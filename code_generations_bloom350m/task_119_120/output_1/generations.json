[["def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        lst = lst[0]\n    if len(lst) == 2:\n        lst = lst[0] + lst[1]\n    lst = lst[0] + lst[1] + lst[2]\n    lst = lst[0] + lst[1] + lst[2] + lst[3]\n    lst = lst[0] + lst[1] + lst[2] + lst[3] + lst[4]\n    lst = lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5]\n    lst = lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6]\n    lst = lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] + lst[7]\n    lst = lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] + lst[7] + lst[8]\n    lst = lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] + lst[7] + lst[8] + lst[9]\n    lst = lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] + lst[7] + lst[8] + lst[9] + lst[10]\n    lst = lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5]", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    for s in lst:\n        if s.startswith('('):\n            if not s.endswith(')'):\n                return 'No'\n            else:\n                return 'Yes'\n        elif s.startswith(')'):\n            if not s.endswith(')'):\n                return 'No'\n            else:\n                return 'Yes'\n        elif s.startswith(')'):\n            if not s.endswith(')'):\n                return 'No'\n            else:\n                return 'Yes'\n        elif s.startswith(')'):\n            if not s.endswith(')'):\n                return 'No'\n            else:\n                return 'Yes'\n        elif s.startswith(')'):\n            if not s.endswith(')'):\n                return 'No'\n            else:\n                return 'Yes'\n        elif s.startswith(')'):\n            if not s.endswith(')'):\n                return 'No'\n            else:\n                return 'Yes'\n        elif s.startswith(')'):\n            if not s.endswith(')'):\n                return 'No'\n            else:\n                return 'Yes'\n        elif s.startswith", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        lst = lst[0]\n    if len(lst) == 2:\n        lst = lst[0] + lst[1]\n    if len(lst) == 3:\n        lst = lst[0] + lst[1] + lst[2]\n    if len(lst) == 4:\n        lst = lst[0] + lst[1] + lst[2] + lst[3]\n    if len(lst) == 5:\n        lst = lst[0] + lst[1] + lst[2] + lst[3] + lst[4]\n    return 'Yes' if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')' and lst[4] == ')' and lst[5] == ')'\n    return 'No' if lst[0] == '(' and lst[1] == ')' and lst[2] == ')' and lst[3] == ')' and lst[4] == ')' and lst[5] == ')'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        lst = lst[0]\n    lst = lst.split('(')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst =", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    for i in lst:\n        if i[0] == '(' and i[1] == ')':\n            return 'Yes'\n        elif i[0] == ')' and i[1] == ')':\n            return 'No'\n    return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'No'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'\n    elif", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        lst = lst[0]\n    lst = lst.split('(')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst =", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    elif len(lst) == 2:\n        return True\n    elif len(lst) == 3:\n        return True\n    elif len(lst) == 4:\n        return True\n    elif len(lst) == 5:\n        return True\n    elif len(lst) == 6:\n        return True\n    elif len(lst) == 7:\n        return True\n    elif len(lst) == 8:\n        return True\n    elif len(lst) == 9:\n        return True\n    elif len(lst) == 10:\n        return True\n    elif len(lst) == 11:\n        return True\n    elif len(lst) == 12:\n        return True\n    elif len(lst) == 13:\n        return True\n    elif len(lst) == 14:\n        return True\n    elif len(lst) == 15:\n        return True\n    elif len(lst) == 16:\n        return True\n    elif len(lst) == 17:\n        return True\n    elif len(lst) == 18:\n        return True\n    elif len(lst) == 19:\n        return True\n    elif len(lst) == 20:\n        return True\n    elif len(lst) == 21:\n        return True\n    elif len(lst) == 22:\n        return True\n    elif len(lst) == 23:\n        return True\n    elif len", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        lst = lst[0]\n    if len(lst) == 2:\n        lst = lst[1]\n    if len(lst) == 3:\n        lst = lst[2]\n    if len(lst) == 4:\n        lst = lst[3]\n    if len(lst) == 5:\n        lst = lst[4]\n    if len(lst) == 6:\n        lst = lst[5]\n    if len(lst) == 7:\n        lst = lst[6]\n    if len(lst) == 8:\n        lst = lst[7]\n    if len(lst) == 9:\n        lst = lst[8]\n    if len(lst) == 10:\n        lst = lst[9]\n    if len(lst) == 11:\n        lst = lst[10]\n    if len(lst) == 12:\n        lst = lst[11]\n    if len(lst) == 13:\n        lst = lst[12]\n    if len(lst) == 14:\n        lst = lst[13]\n    if len(lst) == 15:\n        lst = lst[14]\n    if len(lst) == 16:\n        lst = lst[15]\n    if len(lst) == 17:\n        lst = lst[16]\n    if len(lst) == 18:\n        lst = lst[17]\n    if len(lst) == 19:\n        lst = lst[18]\n    if len(lst) ==", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    elif len(lst) == 2:\n        return False\n    else:\n        return True", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        lst = lst[0]\n    lst = lst.split('(')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst =", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    elif len(lst) == 2:\n        return True\n    elif len(lst) == 3:\n        return True\n    elif len(lst) == 4:\n        return True\n    elif len(lst) == 5:\n        return True\n    elif len(lst) == 6:\n        return True\n    elif len(lst) == 7:\n        return True\n    elif len(lst) == 8:\n        return True\n    elif len(lst) == 9:\n        return True\n    elif len(lst) == 10:\n        return True\n    elif len(lst) == 11:\n        return True\n    elif len(lst) == 12:\n        return True\n    elif len(lst) == 13:\n        return True\n    elif len(lst) == 14:\n        return True\n    elif len(lst) == 15:\n        return True\n    elif len(lst) == 16:\n        return True\n    elif len(lst) == 17:\n        return True\n    elif len(lst) == 18:\n        return True\n    elif len(lst) == 19:\n        return True\n    elif len(lst) == 20:\n        return True\n    elif len(lst) == 21:\n        return True\n    elif len(lst) == 22:\n        return True\n    elif len(lst) == 23:\n        return True\n    elif len", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    elif len(lst) == 2:\n        return False\n    else:\n        return True", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'No'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'\n    elif", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    for i in lst:\n        if i[0] == '(':\n            if i[1] == ')':\n                return 'Yes'\n            else:\n                return 'No'\n        elif i[0] == ')':\n            if i[1] == ')':\n                return 'Yes'\n            else:\n                return 'No'\n        else:\n            return 'Yes'\n\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    elif len(lst) == 2:\n        return False\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    elif len(lst) == 2:\n        return True\n    elif len(lst) == 3:\n        return True\n    elif len(lst) == 4:\n        return True\n    elif len(lst) == 5:\n        return True\n    elif len(lst) == 6:\n        return True\n    elif len(lst) == 7:\n        return True\n    elif len(lst) == 8:\n        return True\n    elif len(lst) == 9:\n        return True\n    elif len(lst) == 10:\n        return True\n    elif len(lst) == 11:\n        return True\n    elif len(lst) == 12:\n        return True\n    elif len(lst) == 13:\n        return True\n    elif len(lst) == 14:\n        return True\n    elif len(lst) == 15:\n        return True\n    elif len(lst) == 16:\n        return True\n    elif len(lst) == 17:\n        return True\n    elif len(lst) == 18:\n        return True\n    elif len(lst) == 19:\n        return True\n    elif len(lst) == 20:\n        return True\n    elif len(lst) == 21:\n        return True\n    elif len(lst) == 22:\n        return True\n    elif len(lst) == 23:\n        return True\n    elif len", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    for i in lst:\n        if i[0] == '(' and i[1] == ')':\n            return 'Yes'\n        elif i[0] == ')' and i[1] == ')':\n            return 'No'\n    return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'No'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'\n    elif", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    elif len(lst) == 2:\n        return True\n    elif len(lst) == 3:\n        return True\n    elif len(lst) == 4:\n        return True\n    elif len(lst) == 5:\n        return True\n    elif len(lst) == 6:\n        return True\n    elif len(lst) == 7:\n        return True\n    elif len(lst) == 8:\n        return True\n    elif len(lst) == 9:\n        return True\n    elif len(lst) == 10:\n        return True\n    elif len(lst) == 11:\n        return True\n    elif len(lst) == 12:\n        return True\n    elif len(lst) == 13:\n        return True\n    elif len(lst) == 14:\n        return True\n    elif len(lst) == 15:\n        return True\n    elif len(lst) == 16:\n        return True\n    elif len(lst) == 17:\n        return True\n    elif len(lst) == 18:\n        return True\n    elif len(lst) == 19:\n        return True\n    elif len(lst) == 20:\n        return True\n    elif len(lst) == 21:\n        return True\n    elif len(lst) == 22:\n        return True\n    elif len(lst) == 23:\n        return True\n    elif len", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    elif len(lst) == 2:\n        return False\n    else:\n        return True", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    elif len(lst) == 2:\n        return True\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        lst = lst[0]\n    if len(lst) == 2:\n        lst = lst[1]\n    if len(lst) == 3:\n        lst = lst[2]\n    if len(lst) == 4:\n        lst = lst[3]\n    if len(lst) == 5:\n        lst = lst[4]\n    if len(lst) == 6:\n        lst = lst[5]\n    if len(lst) == 7:\n        lst = lst[6]\n    if len(lst) == 8:\n        lst = lst[7]\n    if len(lst) == 9:\n        lst = lst[8]\n    if len(lst) == 10:\n        lst = lst[9]\n    if len(lst) == 11:\n        lst = lst[10]\n    if len(lst) == 12:\n        lst = lst[11]\n    if len(lst) == 13:\n        lst = lst[12]\n    if len(lst) == 14:\n        lst = lst[13]\n    if len(lst) == 15:\n        lst = lst[14]\n    if len(lst) == 16:\n        lst = lst[15]\n    if len(lst) == 17:\n        lst = lst[16]\n    if len(lst) == 18:\n        lst = lst[17]\n    if len(lst) == 19:\n        lst = lst[18]\n    if len(lst) ==", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        lst = lst[0]\n    lst = lst.split('(')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst =", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'No'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'\n    elif", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    for i in lst:\n        if i.startswith('('):\n            if i.endswith(')'):\n                return 'Yes'\n            else:\n                return 'No'\n        elif i.startswith('('):\n            if i.endswith(')'):\n                return 'Yes'\n            else:\n                return 'No'\n        elif i.startswith('('):\n            if i.endswith(')'):\n                return 'Yes'\n            else:\n                return 'No'\n        elif i.startswith('('):\n            if i.endswith(')'):\n                return 'Yes'\n            else:\n                return 'No'\n        elif i.startswith('('):\n            if i.endswith(')'):\n                return 'Yes'\n            else:\n                return 'No'\n        elif i.startswith('('):\n            if i.endswith(')'):\n                return 'Yes'\n            else:\n                return 'No'\n        elif i.startswith('('):\n            if i.endswith(')'):\n                return 'Yes'\n            else:\n                return 'No'\n        elif i.startswith('('):", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    for i in range(len(lst)):\n        if lst[i] == '(' or lst[i] == ')':\n            return 'Yes'\n        elif lst[i] == ')':\n            return 'No'\n    return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        lst = lst[0]\n    lst = lst.split('(')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst =", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    elif len(lst) == 2:\n        return False\n    else:\n        return True", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'No'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'\n    elif", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    for i in range(len(lst)):\n        if lst[i] == '(':\n            lst[i] = ')'\n        if lst[i] == ')':\n            lst[i] = ')'\n        lst[i] = lst[i].replace('(', ')')\n        lst[i] = lst[i].replace(')', ')')\n\n    return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        lst = lst[0]\n    lst = lst.split('(')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst =", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    elif len(lst) == 2:\n        return False\n    else:\n        return True", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    elif len(lst) == 2:\n        return False\n    else:\n        return True", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'No'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'\n    elif", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        lst = lst[0]\n    if len(lst) == 2:\n        lst = lst[0] + lst[1]\n    lst = lst[0] + lst[1] + lst[2]\n    lst = lst[0] + lst[1] + lst[2] + lst[3]\n    lst = lst[0] + lst[1] + lst[2] + lst[3] + lst[4]\n    lst = lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5]\n    lst = lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6]\n    lst = lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] + lst[7]\n    lst = lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] + lst[7] + lst[8]\n    lst = lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] + lst[7] + lst[8] + lst[9]\n    lst = lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] + lst[7] + lst[8] + lst[9] + lst[10]\n    lst = lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5]", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        lst = lst[0]\n    lst = lst.split('(')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst =", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        lst = lst[0]\n    if len(lst) == 2:\n        lst = lst[1]\n    if len(lst) == 3:\n        lst = lst[2]\n    if len(lst) == 4:\n        lst = lst[3]\n    if len(lst) == 5:\n        lst = lst[4]\n    if len(lst) == 6:\n        lst = lst[5]\n    if len(lst) == 7:\n        lst = lst[6]\n    if len(lst) == 8:\n        lst = lst[7]\n    if len(lst) == 9:\n        lst = lst[8]\n    if len(lst) == 10:\n        lst = lst[9]\n    if len(lst) == 11:\n        lst = lst[10]\n    if len(lst) == 12:\n        lst = lst[11]\n    if len(lst) == 13:\n        lst = lst[12]\n    if len(lst) == 14:\n        lst = lst[13]\n    if len(lst) == 15:\n        lst = lst[14]\n    if len(lst) == 16:\n        lst = lst[15]\n    if len(lst) == 17:\n        lst = lst[16]\n    if len(lst) == 18:\n        lst = lst[17]\n    if len(lst) == 19:\n        lst = lst[18]\n    if len(lst) ==", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    elif len(lst) == 2:\n        return False\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    for i in range(len(lst)):\n        if lst[i] == '(':\n            if lst[i+1] == ')':\n                return 'Yes'\n            else:\n                return 'No'\n        elif lst[i] == ')':\n            if lst[i+1] == ')':\n                return 'No'\n            else:\n                return 'Yes'\n        else:\n            return 'No'\n    return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    elif len(lst) == 2:\n        return True\n    elif len(lst) == 3:\n        return True\n    elif len(lst) == 4:\n        return True\n    elif len(lst) == 5:\n        return True\n    elif len(lst) == 6:\n        return True\n    elif len(lst) == 7:\n        return True\n    elif len(lst) == 8:\n        return True\n    elif len(lst) == 9:\n        return True\n    elif len(lst) == 10:\n        return True\n    elif len(lst) == 11:\n        return True\n    elif len(lst) == 12:\n        return True\n    elif len(lst) == 13:\n        return True\n    elif len(lst) == 14:\n        return True\n    elif len(lst) == 15:\n        return True\n    elif len(lst) == 16:\n        return True\n    elif len(lst) == 17:\n        return True\n    elif len(lst) == 18:\n        return True\n    elif len(lst) == 19:\n        return True\n    elif len(lst) == 20:\n        return True\n    elif len(lst) == 21:\n        return True\n    elif len(lst) == 22:\n        return True\n    elif len(lst) == 23:\n        return True\n    elif len", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    elif len(lst) == 2:\n        return False\n    else:\n        return True", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        lst = lst[0]\n    lst = lst.split('(')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst =", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        lst = lst[0]\n    if len(lst) == 2:\n        lst = lst[1]\n    if len(lst) == 3:\n        lst = lst[2]\n    if len(lst) == 4:\n        lst = lst[3]\n    if len(lst) == 5:\n        lst = lst[4]\n    if len(lst) == 6:\n        lst = lst[5]\n    if len(lst) == 7:\n        lst = lst[6]\n    if len(lst) == 8:\n        lst = lst[7]\n    if len(lst) == 9:\n        lst = lst[8]\n    if len(lst) == 10:\n        lst = lst[9]\n    if len(lst) == 11:\n        lst = lst[10]\n    if len(lst) == 12:\n        lst = lst[11]\n    if len(lst) == 13:\n        lst = lst[12]\n    if len(lst) == 14:\n        lst = lst[13]\n    if len(lst) == 15:\n        lst = lst[14]\n    if len(lst) == 16:\n        lst = lst[15]\n    if len(lst) == 17:\n        lst = lst[16]\n    if len(lst) == 18:\n        lst = lst[17]\n    if len(lst) == 19:\n        lst = lst[18]\n    if len(lst) ==", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    for i in range(len(lst)):\n        if lst[i] == '(':\n            lst[i] = ')'\n        elif lst[i] == ')':\n            lst[i] = ')'\n        lst[i] = lst[i].replace('(', ')')\n        lst[i] = lst[i].replace(')', ')'\n        lst[i] = lst[i].replace(')', ')'\n        lst[i] = lst[i].replace(')', ')'\n        lst[i] = lst[i].replace(')', ')'\n        lst[i] = lst[i].replace(')', ')'\n        lst[i] = lst[i].replace(')', ')'\n        lst[i] = lst[i].replace(')', ')'\n        lst[i] = lst[i].replace(')', ')'\n        lst[i] = lst[i].replace(')', ')'\n        lst[i] = lst[i].replace(')', ')'\n        lst[i] = lst[i].replace(')', ')'\n        lst[i] = lst[i].replace(')', ')'\n        lst[i] = lst[i].", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        lst = lst[0]\n    if len(lst) == 2:\n        lst = lst[1]\n    if len(lst) == 3:\n        lst = lst[2]\n    if len(lst) == 4:\n        lst = lst[3]\n    if len(lst) == 5:\n        lst = lst[4]\n    if len(lst) == 6:\n        lst = lst[5]\n    if len(lst) == 7:\n        lst = lst[6]\n    if len(lst) == 8:\n        lst = lst[7]\n    if len(lst) == 9:\n        lst = lst[8]\n    if len(lst) == 10:\n        lst = lst[9]\n    if len(lst) == 11:\n        lst = lst[10]\n    if len(lst) == 12:\n        lst = lst[11]\n    if len(lst) == 13:\n        lst = lst[12]\n    if len(lst) == 14:\n        lst = lst[13]\n    if len(lst) == 15:\n        lst = lst[14]\n    if len(lst) == 16:\n        lst = lst[15]\n    if len(lst) == 17:\n        lst = lst[16]\n    if len(lst) == 18:\n        lst = lst[17]\n    if len(lst) == 19:\n        lst = lst[18]\n    if len(lst) ==", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    elif len(lst) == 2:\n        return True\n    elif len(lst) == 3:\n        return True\n    elif len(lst) == 4:\n        return True\n    elif len(lst) == 5:\n        return True\n    elif len(lst) == 6:\n        return True\n    elif len(lst) == 7:\n        return True\n    elif len(lst) == 8:\n        return True\n    elif len(lst) == 9:\n        return True\n    elif len(lst) == 10:\n        return True\n    elif len(lst) == 11:\n        return True\n    elif len(lst) == 12:\n        return True\n    elif len(lst) == 13:\n        return True\n    elif len(lst) == 14:\n        return True\n    elif len(lst) == 15:\n        return True\n    elif len(lst) == 16:\n        return True\n    elif len(lst) == 17:\n        return True\n    elif len(lst) == 18:\n        return True\n    elif len(lst) == 19:\n        return True\n    elif len(lst) == 20:\n        return True\n    elif len(lst) == 21:\n        return True\n    elif len(lst) == 22:\n        return True\n    elif len(lst) == 23:\n        return True\n    elif len", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'No'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'\n    elif", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    elif len(lst) == 2:\n        return True\n    elif len(lst) == 3:\n        return True\n    elif len(lst) == 4:\n        return True\n    elif len(lst) == 5:\n        return True\n    elif len(lst) == 6:\n        return True\n    elif len(lst) == 7:\n        return True\n    elif len(lst) == 8:\n        return True\n    elif len(lst) == 9:\n        return True\n    elif len(lst) == 10:\n        return True\n    elif len(lst) == 11:\n        return True\n    elif len(lst) == 12:\n        return True\n    elif len(lst) == 13:\n        return True\n    elif len(lst) == 14:\n        return True\n    elif len(lst) == 15:\n        return True\n    elif len(lst) == 16:\n        return True\n    elif len(lst) == 17:\n        return True\n    elif len(lst) == 18:\n        return True\n    elif len(lst) == 19:\n        return True\n    elif len(lst) == 20:\n        return True\n    elif len(lst) == 21:\n        return True\n    elif len(lst) == 22:\n        return True\n    elif len(lst) == 23:\n        return True\n    elif len", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    for i in range(len(lst)):\n        if lst[i] == '(':\n            if lst[i+1] == ')':\n                return 'Yes'\n            else:\n                return 'No'\n        elif lst[i] == ')':\n            if lst[i+1] == ')':\n                return 'No'\n            else:\n                return 'Yes'\n        else:\n            return 'No'\n\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    for i in range(len(lst)):\n        if lst[i] == '(':\n            if lst[i+1] == ')':\n                if lst[i+1] == ')':\n                    return 'Yes'\n                else:\n                    return 'No'\n            else:\n                return 'Yes'\n        elif lst[i] == ')':\n            if lst[i+1] == ')':\n                if lst[i+1] == ')':\n                    return 'No'\n                else:\n                    return 'Yes'\n            else:\n                return 'No'\n        elif lst[i] == ')':\n            if lst[i+1] == ')':\n                if lst[i+1] == ')':\n                    return 'No'\n                else:\n                    return 'Yes'\n            else:\n                return 'No'\n        elif lst[i] == ')':\n            if lst[i+1] == ')':\n                if lst[i+1] == ')':\n                    return 'No'\n                else:\n                    return 'Yes'\n            else:\n                return 'No'\n        elif lst[i] == ')':\n            if lst[i+1] == ')':\n                if lst[i+1] == ')':\n                    return 'No'\n                else:\n                    return 'Yes'\n            else:\n                return 'No'\n        elif lst[i] == ')':\n            if lst[i+1] == ')':\n                if lst[i+1] == ')':\n                    return 'No", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    elif len(lst) == 2:\n        return False\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        lst = lst[0]\n    lst = lst.split('(')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst =", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'No'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'\n    elif", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    for i in lst:\n        if i[0] == '(':\n            if i[1] == ')':\n                return 'Yes'\n            else:\n                return 'No'\n        elif i[0] == ')':\n            if i[1] == ')':\n                return 'Yes'\n            else:\n                return 'No'\n        else:\n            return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    else:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    for i in lst:\n        if i[0] == '(':\n            if i[1] == ')':\n                if i[2] == ')':\n                    return 'Yes'\n                else:\n                    return 'No'\n            else:\n                return 'Yes'\n        elif i[0] == ')':\n            if i[1] == ')':\n                if i[2] == ')':\n                    return 'No'\n                else:\n                    return 'Yes'\n            else:\n                return 'No'\n        elif i[0] == ')':\n            if i[1] == ')':\n                if i[2] == ')':\n                    return 'Yes'\n                else:\n                    return 'No'\n            else:\n                return 'No'\n        elif i[0] == ')':\n            if i[1] == ')':\n                if i[2] == ')':\n                    return 'Yes'\n                else:\n                    return 'No'\n            else:\n                return 'No'\n        elif i[0] == ')':\n            if i[1] == ')':\n                if i[2] == ')':\n                    return 'Yes'\n                else:\n                    return 'No'\n            else:\n                return 'No'\n        elif i[0] == ')':\n            if i[1] == ')':\n                if i[2] == ')':\n                    return 'Yes'\n                else:\n                    return 'No'\n            else:\n                return 'No'\n        elif i", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    elif len(lst) == 2:\n        return True\n    elif len(lst) == 3:\n        return True\n    elif len(lst) == 4:\n        return True\n    elif len(lst) == 5:\n        return True\n    elif len(lst) == 6:\n        return True\n    elif len(lst) == 7:\n        return True\n    elif len(lst) == 8:\n        return True\n    elif len(lst) == 9:\n        return True\n    elif len(lst) == 10:\n        return True\n    elif len(lst) == 11:\n        return True\n    elif len(lst) == 12:\n        return True\n    elif len(lst) == 13:\n        return True\n    elif len(lst) == 14:\n        return True\n    elif len(lst) == 15:\n        return True\n    elif len(lst) == 16:\n        return True\n    elif len(lst) == 17:\n        return True\n    elif len(lst) == 18:\n        return True\n    elif len(lst) == 19:\n        return True\n    elif len(lst) == 20:\n        return True\n    elif len(lst) == 21:\n        return True\n    elif len(lst) == 22:\n        return True\n    elif len(lst) == 23:\n        return True\n    elif len", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        lst = lst[0]\n    if len(lst) == 2:\n        lst = lst[0].split('(')\n    if len(lst) == 3:\n        lst = lst[0].split(')'\n    if len(lst) == 4:\n        lst = lst[0].split(')'.split(')')\n    if len(lst) == 5:\n        lst = lst[0].split(')'.split(')')\n    if len(lst) == 6:\n        lst = lst[0].split(')'.split(')')\n    if len(lst) == 7:\n        lst = lst[0].split(')'.split(')')\n    if len(lst) == 8:\n        lst = lst[0].split(')'.split(')')\n    if len(lst) == 9:\n        lst = lst[0].split(')'.split(')')\n    if len(lst) == 10:\n        lst = lst[0].split(')'.split(')')\n    if len(lst) == 11:\n        lst = lst[0].split(')'.split(')')\n    if len(lst", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    for i in range(len(lst)):\n        if lst[i] == '(':\n            lst[i] = ')'\n        elif lst[i] == ')':\n            lst[i] = ')'\n        lst.append(lst[i])\n    return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    for i in lst:\n        if i.startswith('('):\n            if i.endswith(')'):\n                return 'Yes'\n            else:\n                return 'No'\n        elif i.startswith('('):\n            if i.endswith(')'):\n                return 'Yes'\n            else:\n                return 'No'\n        elif i.startswith('('):\n            if i.endswith(')'):\n                return 'Yes'\n            else:\n                return 'No'\n        elif i.startswith('('):\n            if i.endswith(')'):\n                return 'Yes'\n            else:\n                return 'No'\n        elif i.startswith('('):\n            if i.endswith(')'):\n                return 'Yes'\n            else:\n                return 'No'\n        elif i.startswith('('):\n            if i.endswith(')'):\n                return 'Yes'\n            else:\n                return 'No'\n        elif i.startswith('('):\n            if i.endswith(')'):\n                return 'Yes'\n            else:\n                return 'No'\n        elif i.startswith('('):", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return True\n    elif len(lst) == 2:\n        return False\n    else:\n        return False", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    else:\n        return 'Yes'\n\n    for i in range(0, len(lst)):\n        if len(lst[i]) == 1:\n            if len(lst[i][0]) == 1:\n                if len(lst[i][0][1]) == 1:\n                    if len(lst[i][0][1][0]) == 1:\n                        if len(lst[i][0][1][0][1]) == 1:\n                            return 'Yes'\n                        else:\n                            return 'No'\n                    else:\n                        return 'Yes'\n        elif len(lst[i]) == 2:\n            if len(lst[i][0]) == 1:\n                if len(lst[i][0][1]) == 1:\n                    if len(lst[i][0][1][0]) == 1:\n                        if len(lst[i][0][1][0][1]) == 1:\n                            return 'No'\n                        else:\n                            return 'Yes'\n                    else:\n                        return 'No'\n                else:\n                    return 'No'\n\n    return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        lst = lst[0]\n    lst = lst.split('(')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst =", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'No'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'\n    elif", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        lst = lst[0]\n    if len(lst) == 2:\n        lst = lst[0] + lst[1]\n    if len(lst) == 3:\n        lst = lst[0] + lst[1] + lst[2]\n    if len(lst) == 4:\n        lst = lst[0] + lst[1] + lst[2] + lst[3]\n    if len(lst) == 5:\n        lst = lst[0] + lst[1] + lst[2] + lst[3] + lst[4]\n    if len(lst) == 6:\n        lst = lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5]\n    if len(lst) == 7:\n        lst = lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6]\n    if len(lst) == 8:\n        lst = lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] + lst[7]\n    if len(lst) == 9:\n        lst = lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] + lst[7]\n    if len(lst) == 10:\n        lst = lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] + lst[7]", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    for i in range(len(lst)):\n        if lst[i] == '(' or lst[i] == ')':\n            return 'Yes'\n        elif lst[i] == ')':\n            return 'No'\n    return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    for i in lst:\n        if i[0] == '(' and i[1] == ')':\n            return 'Yes'\n        elif i[0] == ')' and i[1] == ')':\n            return 'No'\n    return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'Yes'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'No'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'\n    elif", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    for i in lst:\n        if i[0] == '(':\n            if i[1] == ')':\n                if i[2] == ')':\n                    return 'Yes'\n                else:\n                    return 'No'\n            else:\n                return 'Yes'\n        elif i[0] == ')':\n            if i[1] == ')':\n                if i[2] == ')':\n                    return 'No'\n                else:\n                    return 'Yes'\n            else:\n                return 'No'\n        elif i[0] == ')':\n            if i[1] == ')':\n                if i[2] == ')':\n                    return 'No'\n                else:\n                    return 'Yes'\n            else:\n                return 'No'\n        elif i[0] == ')':\n            if i[1] == ')':\n                if i[2] == ')':\n                    return 'No'\n                else:\n                    return 'Yes'\n            else:\n                return 'No'\n        elif i[0] == ')':\n            if i[1] == ')':\n                if i[2] == ')':\n                    return 'No'\n                else:\n                    return 'Yes'\n            else:\n                return 'No'\n        elif i[0] == ')':\n            if i[1] == ')':\n                if i[2] == ')':\n                    return 'No'\n                else:\n                    return 'Yes'\n            else:\n                return 'No'\n        elif i", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    for i in range(len(lst)):\n        if lst[i] == '(':\n            lst[i] = ')'\n        elif lst[i] == ')':\n            lst[i] = ')'\n        lst[i] = lst[i].replace('(', ')')\n        lst[i] = lst[i].replace(')', ')'\n        lst[i] = lst[i].replace('(', ')')\n        lst[i] = lst[i].replace(')', ')'\n        lst[i] = lst[i].replace('(', ')')\n        lst[i] = lst[i].replace(')', ')'\n        lst[i] = lst[i].replace('(', ')')\n        lst[i] = lst[i].replace(')', ')'\n        lst[i] = lst[i].replace('(', ')')\n        lst[i] = lst[i].replace(')', ')'\n        lst[i] = lst[i].replace('(', ')')\n        lst[i] = lst[i].replace(')', ')'\n        lst[i] = lst[i].replace('(', ')')\n        lst[i] = lst[i].", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    else:\n        return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    for i in lst:\n        if i[0] == '(' and i[1] == ')':\n            return 'Yes'\n        elif i[0] == ')' and i[1] == ')':\n            return 'No'\n    return 'Yes'", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        lst = lst[0]\n    if len(lst) == 2:\n        lst = lst[0] + lst[1]\n    lst = lst[0] + lst[1]\n    lst = lst[0] + lst[1]\n    lst = lst[0] + lst[1]\n    lst = lst[0] + lst[1]\n    lst = lst[0] + lst[1]\n    lst = lst[0] + lst[1]\n    lst = lst[0] + lst[1]\n    lst = lst[0] + lst[1]\n    lst = lst[0] + lst[1]\n    lst = lst[0] + lst[1]\n    lst = lst[0] + lst[1]\n    lst = lst[0] + lst[1]\n    lst = lst[0] + lst[1]\n    lst = lst[0] + lst[1]\n    lst = lst[0] + lst[1]\n    lst = lst[0] + lst[1]\n    lst = lst[0] + lst[1]\n    lst = lst[0] + lst[1]\n    lst = lst[0] + lst[1]\n    lst = lst[0] + lst[1]\n    lst = lst[0] + lst[1]\n    lst = lst[0] + lst[1]\n    lst = lst[0] + lst[1]\n    lst = lst[0] + lst[1]\n    lst = lst[0] + lst[1]\n    lst = lst[0] + lst[1]\n    lst = lst[0] + lst[1]\n    lst = lst[0] + lst[1]\n    lst =", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        lst = lst[0]\n    lst = lst.split('(')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst = lst.split(')')\n    lst =", "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    elif len(lst) == 3:\n        return 'Yes'\n    elif len(lst) == 4:\n        return 'No'\n    elif len(lst) == 5:\n        return 'Yes'\n    elif len(lst) == 6:\n        return 'No'\n    elif len(lst) == 7:\n        return 'No'\n    elif len(lst) == 8:\n        return 'No'\n    elif len(lst) == 9:\n        return 'No'\n    elif len(lst) == 10:\n        return 'No'\n    elif len(lst) == 11:\n        return 'No'\n    elif len(lst) == 12:\n        return 'No'\n    elif len(lst) == 13:\n        return 'No'\n    elif len(lst) == 14:\n        return 'No'\n    elif len(lst) == 15:\n        return 'No'\n    elif len(lst) == 16:\n        return 'No'\n    elif len(lst) == 17:\n        return 'No'\n    elif len(lst) == 18:\n        return 'No'\n    elif len(lst) == 19:\n        return 'No'\n    elif len(lst) == 20:\n        return 'No'\n    elif len(lst) == 21:\n        return 'No'"]]