[["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    # A binary search\n    # ================================\n    n = n * 2 + 1\n    if n < 0:\n        n = n * 2 + 1\n    if n > 1:\n        n = n * 2 + 1\n    if n % 2:\n        n = n * 2 + 1\n    if n % 3:\n        n = n * 2 + 1\n    if n % 4:\n        n = n * 2 + 1\n\n    # A binary search modulo p\n    # ================================\n    # p is the first digit of the result, i.e. p * 2^(n-1) - 1\n    # ================================\n    if n % 2:\n        p = n * 2 + 1\n    if n % 3:\n        p = n * 2 + 1\n    if n % 4:\n        p = n * 2 + 1\n    if n % 5:\n        p = n * 2 + 1\n    if n % 6:\n        p = n * 2 + 1\n    if n % 7:\n        p = n * 2 + 1\n    if n % 8:\n        p = n * 2 + 1\n    if n % 9:\n        p = n * 2 + 1\n    if n % 10:\n        p = n * 2 + 1\n    if n % 11:\n        p = n * 2 +", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) ** 2 + (n % p) ** 2 + (n % p) ** 2 + (n % p) ** 2 + (n % p) ** 2 + (n % p) ** 2 + (n % p) ** 2 + (n % p) ** 2 + (n % p) ** 2 + (n % p) ** 2 + (n % p) ** 2 + (n % p) ** 2 + (n % p) ** 2 + (n % p) ** 2 + (n % p) ** 2 + (n % p) ** 2 + (n % p) ** 2 + (n % p) ** 2 + (n % p) ** 2 + (n % p) ** 2 + (n % p) ** 2 + (n % p) ** 2 + (n % p) ** 2 + (n % p) ** 2 + (n % p) ** 2 + (n % p) ** 2 + (n % p) ** 2 + (n % p) ** 2 + (n % p) ** 2 + (n % p) ** 2 + (n % p) ** 2 + (n % p) **", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modp(1, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n * p) % 2", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError('invalid input')\n    if p < 1:\n        raise ValueError('invalid input')\n    if n % 2 == 0:\n        modp(n, p)\n    else:\n        modp(n, p % 2)\n    modp(n % 2, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return 2\n    if p < 1:\n        return 2**(n - 1)\n    if n == 1:\n        return n\n    if p == 1:\n        return n**(n - 1)\n    if n == p - 1:\n        return n**(n - 1)\n    if n == p - 1:\n        return n**(n - 1)\n    if n == p - 1:\n        return n**(n - 1)\n    if n == p - 1:\n        return n**(n - 1)\n    if n == p - 1:\n        return n**(n - 1)\n    if n == n - 1:\n        return n**(n - 1)\n    return n**(n - 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError('Invalid number')\n    if p > 1:\n        raise ValueError('Invalid number')\n\n    if n % p == 0:\n        raise ValueError('Not congruent modulo')\n    if n % p == 1:\n        raise ValueError('Not congruent modulo')\n    if n % p == 2:\n        raise ValueError('Not congruent modulo')\n\n    if n % p == 3:\n        raise ValueError('Not congruent modulo')\n    if n % p == 4:\n        raise ValueError('Not congruent modulo')\n    if n % p == 5:\n        raise ValueError('Not congruent modulo')\n\n    if n % p == 6:\n        raise ValueError('Not congruent modulo')\n    if n % p == 7:\n        raise ValueError('Not congruent modulo')\n\n    if n % p == 8:\n        raise ValueError('Not congruent modulo')\n    if n % p == 9:\n        raise ValueError('Not congruent modulo')\n\n    if n % p == 10:\n        raise ValueError('Not congruent modulo')\n    if n % p == 11:\n        raise ValueError('Not congruent modulo')\n\n    if n % p == 12:\n        raise ValueError('Not congruent modulo')\n    if n % p == 13:\n        raise", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 6\n    elif n == 6:\n        return 7\n    elif n == 7:\n        return 8\n    elif n == 8:\n        return 9\n    elif n == 9:\n        return 10\n    elif n == 10:\n        return 11\n    elif n == 11:\n        return 12\n    elif n == 12:\n        return 13\n    elif n == 13:\n        return 14\n    elif n == 14:\n        return 15\n    elif n == 15:\n        return 16\n    elif n == 16:\n        return 17\n    elif n == 17:\n        return 18\n    elif n == 18:\n        return 19\n    elif n == 19:\n        return 20\n    elif n == 20:\n        return 21\n    elif n == 21:\n        return 22\n    elif n == 22:\n        return 23\n    elif n == 23:\n        return 24\n    elif n == 24:\n        return 25\n    elif n == 25:\n        return 26\n    elif n == 26:\n        return 27\n    elif n == 27:\n        return 28\n    elif n == 28:\n        return 29\n    elif n == 29:\n        return 30\n    elif n == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (p - 1) % 2**n", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 10:\n        raise ValueError('Not a positive integer.')\n    if n == 10:\n        return 0\n    if p == 3:\n        return modp(n, p + 1)\n    if p == 5:\n        return modp(n, p + 2)\n    if p == 11:\n        return modp(n, p + 3)\n    if p == 111:\n        return modp(n, p + 4)\n    if p == 101:\n        return modp(n, p + 5)\n    if p == 0:\n        return modp(n, p + 6)\n    if p == 111:\n        return modp(n, p + 7)\n    if p == 101:\n        return modp(n, p + 8)\n    if p == 0:\n        return modp(n, p + 9)\n    if p == 111:\n        return modp(n, p + 10)\n    if p == 101:\n        return modp(n, p + 11)\n    if p == 0:\n        return modp(n, p + 12)\n    if p == 111:\n        return modp(n, p + 13)\n    if p == 101:\n        return modp(n, p + 14)\n    if p == 0:\n        return modp(n, p +", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    #modp(101, 101)\n    #modp(100, 101)\n    #modp(100, 101)\n    #modp(101, 101)\n    #modp(101, 101)\n    #modp(101, 101)\n    #modp(101, 101)\n    #modp(101, 101)\n    #modp(101, 101)\n    #modp(101, 101)\n    #modp(101, 101)\n    #modp(101, 101)\n    #modp(101, 101)\n    #modp(101, 101)\n    #modp(101, 101)\n    #modp(101, 101)\n    #modp(101, 101)\n    #modp(101, 101)\n    #modp(101, 101)\n    #modp(101, 101)\n    #modp(101, 101)\n    #modp(101, 101)\n    #modp(101, 101)\n    #modp(101, 101)\n    #modp(101, 101)\n    #modp(101, 101)\n    #modp(101, 101)\n    #modp(101, 101)\n    #modp(101, 101)\n    #modp(101, 101)\n    #modp(101, 101)\n    #modp(101, 101", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 2:\n        return 0\n    if p < 10:\n        return modp(n, p)\n    return 0", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    # check if the given integer is divisible by p\n    if n % p == 0:\n        return n % p\n    if n % p == 1:\n        return n % p\n    if n % p == 2:\n        return n % p\n    if n % p == 3:\n        return n % p\n    if n % p == 4:\n        return n % p\n    if n % p == 5:\n        return n % p\n    if n % p == 6:\n        return n % p\n    if n % p == 7:\n        return n % p\n    if n % p == 8:\n        return n % p\n    if n % p == 9:\n        return n % p\n    if n % p == 10:\n        return n % p\n    if n % p == 11:\n        return n % p\n    if n % p == 12:\n        return n % p\n    if n % p == 13:\n        return n % p\n    if n % p == 14:\n        return n % p\n    if n % p == 15:\n        return n % p\n    if n % p == 16:\n        return n % p\n    if n % p == 17:\n        return n % p\n    if n % p == 18:\n        return n % p\n    if n % p == 19:\n        return n % p\n    if n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return np.modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return int(mod(n, p)) & 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2 * np.modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    n = n * 3\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n * p) % n", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    result = 2**(n - p)\n    return result", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    modp = lambda x: x * 3\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return (n % p) * (n % p)\n    else:\n        return (n % p) * (n % p)\n</s>", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    # Find the number of bits in the leftmost digit of the exponent\n    # and subtract it from the number of bits in the rightmost digit.\n    # The leftmost digit will be the exponent (minus 1) minus the number of bits\n    # in the rightmost digit (minus 1). The exponent is the number of bits in the rightmost\n    # digit of the exponent (minus 1) minus the number of bits in the leftmost digit (minus\n    # 1). The exponent is the number of bits in the rightmost digit of the exponent (minus\n    # 1) minus the number of bits in the leftmost digit (minus 1). The exponent is the number of\n    # bits in the rightmost digit of the exponent (minus 1) minus the number of bits in the leftmost\n    # digit (minus 1). The exponent is the number of bits in the rightmost digit of the exponent (minus\n    # 1) minus the number of bits in the leftmost digit (minus 1). The exponent is the number of\n    # bits in the rightmost digit of the exponent (minus 1) minus the number of bits in the leftmost\n    # digit (minus 1). The exponent is the number of bits in the rightmost digit of the exponent", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 * n + 1) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) == 0", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (p - n) * modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    result = n * p\n    if p > 0:\n        result = result * p\n    return result", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < p:\n        return n\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**(modp(3, 5) + modp(1101, 101))", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    # p can be a complex number\n    if isinstance(p, complex):\n        return modp(p, modp(p, p))\n    # p can be a real number\n    if isinstance(p, real):\n        return modp(p, modp(p, p))\n    # p can be a complex number\n    if isinstance(p, complex):\n        return modp(p, modp(p, modp(p, p)))\n    # p can be a real number\n    if isinstance(p, real):\n        return modp(p, modp(p, modp(p, modp(p, p)))\n    # p can be a complex number\n    if isinstance(p, complex):\n        return modp(p, modp(p, modp(p, modp(p, p)))\n    # p can be a complex number\n    if isinstance(p, complex):\n        return modp(p, modp(p, modp(p, modp(p, p)))\n    # p can be a complex number\n    if isinstance(p, complex):\n        return modp(p, modp(p, modp(p, modp(p, p)))", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    n = n * 2\n    p = p * 2\n    modp = p % n\n    return modp", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise TypeError(\"modp() must be an integer\")\n    if p < 1:\n        raise TypeError(\"modp() must be a positive integer\")\n    if n % p == 0:\n        return 1\n    if n % p == 1:\n        return 0\n    if n % p == 2:\n        return -1\n    if n % p == 3:\n        return 0\n    if n % p == 4:\n        return -1\n    if n % p == 5:\n        return -1\n    if n % p == 6:\n        return -1\n    if n % p == 7:\n        return -1\n    return -1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    n = int(n)\n    p = int(p)\n    return (n * p) % n", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return n\n    if p == 0:\n        return p\n    if p < 0:\n        return (n - p) % n\n    if p > 0:\n        return (n - p) % p\n    if n == p - 1:\n        return n\n    if p == n - 1:\n        return p\n    if n == n - 2:\n        return p\n    if p < 0:\n        return (n - p) % n\n    if p > 0:\n        return (n - p) % p\n    if n == p - 1:\n        return n\n    if p == n - 1:\n        return p\n    if n == n - 2:\n        return p\n    if p < 0:\n        return (n - p) % n\n    if p > 0:\n        return (n - p) % p\n    if n == p - 1:\n        return n\n    if p == n - 1:\n        return p\n    if n == n - 2:\n        return p\n    if p < 0:\n        return (n - p) % n\n    if p > 0:\n        return (n - p) % p\n    if n == p - 1:\n        return n\n    if p == n - 1:\n        return p\n    if n == p - 2:\n        return p\n    if p < 0:\n        return (", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    try:\n        return (n % p) * (p % n)\n    except ValueError:\n        return (n % p) * (n % p) * (p % n)\n\n    def modp(n, p: int) -> int:\n        \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n        return (modp(n, p) * (p % n) + modp(n, p) * (p % n) + modp(n, p) * (p % n) + modp(n, p) * (p % n)) % p\n\n    def modp(n, p: int) -> int:\n        \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n        return (modp(n, p) * (n % p) + modp(n, p) * (n % p) + modp(n, p) * (n % p) + modp(n, p) * (n % p) + modp(n, p) * (n % p) + modp(n, p) * (n % p) + modp(n, p) * (n % p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    # We don't want to take a modulo since we want to apply modulo.\n    # This is a pretty ugly way of doing it, but we want to be able to\n    # do it without a modp for some reason.\n    return math.modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"invalid modulo\")\n    if p < 1:\n        raise ValueError(\"invalid modulo\")\n    if n!= p:\n        raise ValueError(\"invalid modulo\")\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    if n == 1:\n        return 3\n    if n == 2:\n        return 4\n    if n == 3:\n        return 5\n    if n == 4:\n        return 6\n    if n == 5:\n        return 7\n    if n == 6:\n        return 8\n    if n == 7:\n        return 9\n    if n == 8:\n        return 10\n    if n == 9:\n        return 11\n    if n == 10:\n        return 12\n    if n == 11:\n        return 13\n    if n == 12:\n        return 14\n    if n == 13:\n        return 15\n    if n == 14:\n        return 16\n    if n == 15:\n        return 17\n    if n == 16:\n        return 18\n    if n == 17:\n        return 19\n    if n == 18:\n        return 20\n    if n == 19:\n        return 21\n    if n == 20:\n        return 22\n    if n == 21:\n        return 23\n    if n == 22:\n        return 24\n    if n == 23:\n        return 25\n    if n == 24:\n        return 26\n    if n == 25:\n        return 27\n    if n == 26:\n        return 28\n    if n == 27:\n        return 29\n    if n == 28:\n        return 30\n    if n == 29:\n        return 31\n    if n == 30:\n        return 32", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2**p\n    elif n == 1:\n        return 1**p\n    elif n == 2:\n        return 0**p\n    elif n == 3:\n        return 1**p\n    elif n == 4:\n        return 1**p\n    elif n == 5:\n        return 1**p\n    elif n == 6:\n        return 1**p\n    elif n == 7:\n        return 1**p\n    elif n == 8:\n        return 1**p\n    elif n == 9:\n        return 1**p\n    elif n == 10:\n        return 1**p\n    elif n == 11:\n        return 1**p\n    elif n == 12:\n        return 1**p\n    elif n == 13:\n        return 1**p\n    elif n == 14:\n        return 1**p\n    elif n == 15:\n        return 1**p\n    elif n == 16:\n        return 1**p\n    elif n == 17:\n        return 1**p\n    elif n == 18:\n        return 1**p\n    elif n == 19:\n        return 1**p\n    elif n == 20:\n        return 1**p\n    elif n == 21:\n        return 1**p\n    elif n == 22:\n        return 1**p\n    elif n == 23:\n        return 1**p\n    elif n == 24:\n        return 1**p\n    elif n == 25", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if isinstance(n, int):\n        return modp(n, p)\n    elif isinstance(p, int):\n        return modp(p, n)\n\n    return n * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n > p:\n        raise ValueError(\"invalid exponent: n > p\")\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 2:\n        raise ValueError('Invalid modp()')\n    if p < 1:\n        raise ValueError('Invalid modp()')\n    return n * p * modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    p = p / 2\n    if p == 0: return 1\n    if p == 1: return 2\n    return 0", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return n\n    if p == 1:\n        return n * modp(3, 5)\n    if p == 2:\n        return n * modp(1101, 101)\n    if p == 3:\n        return n * modp(100, 101)\n    if p == 4:\n        return n * modp(3, 11)\n    if p == 5:\n        return n * modp(1101, 101)\n    if p == 6:\n        return n * modp(100, 101)\n    if p == 7:\n        return n * modp(3, 11)\n    if p == 8:\n        return n * modp(100, 101)\n    if p == 9:\n        return n * modp(1101, 101)\n    if p == 10:\n        return n * modp(100, 101)\n    if p == 11:\n        return n * modp(100, 101)\n    if p == 12:\n        return n * modp(100, 101)\n    if p == 13:\n        return n * modp(100, 101)\n    if p == 14:\n        return n * modp(100, 101)\n    if p == 15:\n        return n * modp(100, 101)\n    if p == 16:\n        return n * modp(100, 101)\n    if p == 17:\n        return n", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    n = n % 10\n    p = p / 10\n    if n < p:\n        return n * p\n    return n * (n - p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p < 1:\n        return modp(n, p - 1)\n    if n > 1:\n        return modp(n, p)\n    if p == 1:\n        return modp(n, p - 1)\n    if n == 1:\n        return modp(n, p)\n    if p == 0:\n        return modp(n, p - 1)\n    if n > 1:\n        return modp(n, p)\n    if p == 1:\n        return modp(n, p)\n    if n == 1:\n        return modp(n, p)\n    if n == 1:\n        return modp(n, p)\n    if p == 0:\n        return modp(n, p - 1)\n    if n > 1:\n        return modp(n, p)\n    if p == 1:\n        return modp(n, p)\n    if n == 1:\n        return modp(n, p)\n    if p == 0:\n        return modp(n, p - 1)\n    if n > 1:\n        return modp(n, p)\n    if p == 1:\n        return modp(n, p)\n    if n == 1:\n        return modp(n, p)\n    if p == 0:\n        return modp(n, p - 1)\n    if", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    # modp is equivalent to modulo p\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if not isinstance(p, int):\n        raise TypeError(\"p must be an integer\")\n\n    # Make a new modulo function\n    modp = lambda x: x % p\n    modp = modp.__new__(type)\n    modp.__name__ = \"N\"\n    modp.__slots__ = [\"n\"]\n    modp.__doc__ = \"\"\n    return modp", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    modp = 0\n    for i in range(n):\n        if i == p:\n            modp = modp * i + 1\n        else:\n            modp = modp * i\n    return modp", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    result = 2 * n / p\n    return result", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return np.mod(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if isinstance(n, int):\n        return n % p\n    if isinstance(p, int):\n        return n * p\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if isinstance(n, int):\n        return n * (n - 1)\n    return n * (p - 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 10 or n >= 11:\n        raise ValueError(\"invalid integer\")\n\n    result = 1\n    for i in range(n):\n        result *= p\n    return result", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return math.mod(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    if n == 1:\n        return 3\n    if n == 2:\n        return 4\n    if n == 3:\n        return 5\n    if n == 4:\n        return 6\n    if n == 5:\n        return 7\n    if n == 6:\n        return 8\n    if n == 7:\n        return 9\n    if n == 8:\n        return 10\n    if n == 9:\n        return 11\n    if n == 10:\n        return 12\n    if n == 11:\n        return 13\n    if n == 12:\n        return 14\n    if n == 13:\n        return 15\n    if n == 14:\n        return 16\n    if n == 15:\n        return 17\n    if n == 16:\n        return 18\n    if n == 17:\n        return 19\n    if n == 18:\n        return 20\n    if n == 19:\n        return 21\n    if n == 20:\n        return 22\n    if n == 21:\n        return 23\n    if n == 22:\n        return 24\n    if n == 23:\n        return 25\n    if n == 24:\n        return 26\n    if n == 25:\n        return 27\n    if n == 26:\n        return 28\n    if n == 27:\n        return 29\n    if n == 28:\n        return 30\n    if n == 29:\n        return 31\n    if n == 30:\n        return 32", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError('not an integer')\n    return 2 * n - 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return 3\n    if p == 1:\n        return 2\n    if p == 2:\n        return 1\n    if p == 3:\n        return 0\n    if p == 4:\n        return -1\n    if p == 5:\n        return 0\n    if p == 6:\n        return -1\n    if p == 7:\n        return 0\n    if p == 8:\n        return -1\n    if p == 9:\n        return -1\n    if p == 10:\n        return 0\n    if p == 11:\n        return 0\n    if p == 12:\n        return 0\n    if p == 13:\n        return 1\n    if p == 14:\n        return 0\n    if p == 15:\n        return 0\n    if p == 16:\n        return 0\n    if p == 17:\n        return 0\n    if p == 18:\n        return -1\n    if p == 19:\n        return 1\n    if p == 20:\n        return 0\n    if p == 21:\n        return 0\n    if p == 22:\n        return 0\n    if p == 23:\n        return -1\n    if p == 24:\n        return -1\n    if p == 25:\n        return 0\n    if p == 26:\n        return 0\n    if p == 27:\n        return 0\n    if p == 28:\n        return 0\n    if p == 29:\n        return 0\n    if p == 30:\n        return 0", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) / 2", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) * modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n % p\n</s>", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    modp = (1 << n) + (1 << p)\n    return modp", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    # Return the remainder modulo p\n    result = 2**n - p\n    if n <= 0:\n        return result\n    elif n >= 1:\n        return result\n    else:\n        return result - 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"invalid number\")\n    if p < 2:\n        raise ValueError(\"invalid number\")\n    modp = p * n\n    return modp", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (modp(n, p) * modp(n, p - 1)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if isinstance(n, int):\n        if isinstance(p, int):\n            return n*p\n    else:\n        if isinstance(p, int):\n            return n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n*p**(n", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n!= 1:\n        raise ValueError(\"modp must be in the range (0, n)\")\n    if n!= 2:\n        raise ValueError(\"modp must be in the range (1, n)\")\n    if n!= 3:\n        raise ValueError(\"modp must be in the range (2, n)\")\n    if n!= 4:\n        raise ValueError(\"modp must be in the range (3, n)\")\n    if n!= 5:\n        raise ValueError(\"modp must be in the range (4, n)\")\n    if n!= 6:\n        raise ValueError(\"modp must be in the range (5, n)\")\n    if n!= 7:\n        raise ValueError(\"modp must be in the range (6, n)\")\n    if n!= 8:\n        raise ValueError(\"modp must be in the range (7, n)\")\n    if n!= 9:\n        raise ValueError(\"modp must be in the range (8, n)\")\n    if n!= 10:\n        raise ValueError(\"modp must be in the range (9, n)\"", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    n = n + 1\n    if n % 2 == 0:\n        raise ValueError('invalid modp function')\n    return 2 * (n % 2)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    # 0 mod 3\n    modp(1, 2)\n    modp(1, 3)\n    modp(1, 4)\n    modp(1, 5)\n    modp(1, 6)\n    modp(1, 7)\n    modp(1, 8)\n    modp(1, 9)\n    modp(1, 10)\n    modp(1, 11)\n    modp(1, 12)\n    modp(1, 13)\n    modp(1, 14)\n    modp(1, 15)\n    modp(1, 16)\n    modp(1, 17)\n    modp(1, 18)\n    modp(1, 19)\n    modp(1, 20)\n    modp(1, 21)\n    modp(1, 22)\n    modp(1, 23)\n    modp(1, 24)\n    modp(1, 25)\n    modp(1, 26)\n    modp(1, 27)\n    modp(1, 28)\n    modp(1, 29)\n    modp(1, 30)\n    modp(1, 31)\n    modp(1, 32)\n    modp(1, 33)\n    modp(1, 34)\n    modp(1, 35)\n    modp(1, 36)\n    modp(1,", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return int(modp(n, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2 * np.modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    n = n % 3\n    p = p % 3\n    modp = n % 3 + p\n    modp = modp * p\n    modp = modp * modp\n    modp = modp * modp + modp * modp\n    modp = modp * modp\n    modp = modp * modp + modp * modp\n    modp = modp * modp + modp * modp + modp * modp\n    modp = modp * modp + modp * modp + modp * modp\n    modp = modp * modp + modp * modp + modp * modp\n    modp = modp * modp + modp * modp + modp * modp\n    modp = modp * modp + modp * modp + modp * modp\n    modp = modp * modp + modp * modp + modp * modp\n    modp = modp * modp + modp * modp + modp * modp\n    modp = modp * modp + modp * modp + modp * modp\n    modp = modp * modp + mod", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n * p) % (n * p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if isinstance(n, int):\n        return modp(n, p)\n    elif isinstance(p, int):\n        return modp(p, n)\n    elif isinstance(n, int) and isinstance(p, int):\n        return modp(n, p)\n    elif isinstance(n, int) and isinstance(p, int) and isinstance(n, int):\n        return modp(n, p)\n    elif isinstance(n, int) and isinstance(p, int):\n        return modp(n, p)\n    elif isinstance(n, int):\n        return modp(n, p)\n    elif isinstance(n, int):\n        return modp(n, p)\n    elif isinstance(n, int):\n        return modp(n, p)\n    elif isinstance(n, int):\n        return modp(n, p)\n    elif isinstance(n, int):\n        return modp(n, p)\n    elif isinstance(n, int):\n        return modp(n, p)\n    elif isinstance(n, int):\n        return modp(n, p)\n    elif isinstance(n, int):\n        return modp(n, p)\n    elif isinstance(n, int", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) % 2", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % 2) * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 2:\n        return 0\n    if p > 2:\n        return 1\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**(n - p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    # 2^n mod p\n    return (modp(2, 5) - modp(2, 11)) * (modp(2, 101) - modp(2, 111))", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % 2!= 0:\n        raise ValueError(\"modp() expects a 2^n modulo p\")\n    return modp(n % 2, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) ** 2", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 3:\n        return 2**n\n    elif n < 101:\n        return 2**n**(1 - p)\n    elif n < 101**2:\n        return 2**n**(1 - p)\n    elif n < 101**2:**2:\n        return 2**n**(1 - p**(1 - p))\n    elif n < 101**2:**2:**1:\n        return 2**n**(1 - p**(1 - p**(1 - p**(1 - p**(1 - p**(1 - p**(1 - p**(1 - p**(1 - p**(1 - p**(1 - p**(1 - p**(1 - p**(1 - p**(1 - p**(1 - p**(1 - p**(1 - p**(1 - p**(1 - p**(1 - p**(1 - p**(1 - p**(1 - p**(1 - p**(1 - p**(1 - p**(1 - p**(1 - p**(1 - p**(1 - p**(1 - p**(1 - p**(1 - p**(1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    result = -1\n    for i in range(n):\n        result = result * modp(n, i)\n    return result", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 * (n - p - 1)) / (2 * (n - p - 1) + 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n, modp(n, p))", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    # modulo 3\n    n = n % 2\n    if n == 0:\n        return n % 2\n    if n == 1:\n        return n % 3\n    if n == 2:\n        return n % 4\n    return n % 5", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 4\n    elif n == 6:\n        return 5\n    elif n == 7:\n        return 6\n    elif n == 8:\n        return 7\n    elif n == 9:\n        return 8\n    elif n == 10:\n        return 9\n    elif n == 11:\n        return 10\n    elif n == 12:\n        return 11\n    elif n == 13:\n        return 12\n    elif n == 14:\n        return 13\n    elif n == 15:\n        return 14\n    elif n == 16:\n        return 15\n    elif n == 17:\n        return 16\n    elif n == 18:\n        return 17\n    elif n == 19:\n        return 18\n    elif n == 20:\n        return 19\n    elif n == 21:\n        return 20\n    elif n == 22:\n        return 21\n    elif n == 23:\n        return 22\n    elif n == 24:\n        return 23\n    elif n == 25:\n        return 24\n    elif n == 26:\n        return 25\n    elif n == 27:\n        return 26\n    elif n == 28:\n        return 27\n    elif n == 29:\n        return 28\n    elif n == 30:\n        return 29", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n * p) % n", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    result = 0\n    for i in range(n):\n        result += 2**i\n    return result", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (p % 2) * (n % 2)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return int(n * (1 << p) + (1 << (p - 1)) * (1 << n)) - 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    # A special case for the cases where modp() returns -1\n    if n > 0:\n        return -1\n    return int(modp(n, p))", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 111\n    elif n == 4:\n        return 101\n    elif n == 5:\n        return 0\n    elif n == 6:\n        return 101\n    elif n == 7:\n        return 0\n    elif n == 8:\n        return 111\n    elif n == 9:\n        return 101\n    elif n == 10:\n        return 0\n    elif n == 11:\n        return 101\n    elif n == 12:\n        return 101\n    elif n == 13:\n        return 0\n    elif n == 14:\n        return 0\n    elif n == 15:\n        return 0\n    elif n == 16:\n        return 0\n    elif n == 17:\n        return 0\n    elif n == 18:\n        return 0\n    elif n == 19:\n        return 0\n    elif n == 20:\n        return 0\n    elif n == 21:\n        return 0\n    elif n == 22:\n        return 0\n    elif n == 23:\n        return 0\n    elif n == 24:\n        return 0\n    elif n == 25:\n        return 0\n    elif n == 26:\n        return 0\n    elif n == 27:\n        return 0\n    elif n == 28:\n        return 0\n    elif n == 29:\n        return 0\n    elif n == 30:\n        return 0", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n * p) % (n * p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n * (p - 1) + 1) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    # 2^n = 1\n    n = n % 2\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return -1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % 2 == 0:\n        return (n % 2) + 1\n    elif n % 2 == 1:\n        return (n % 2) - 1\n    elif n % 2 == 0:\n        return (n % 2) - 1\n    else:\n        return (n % 2) - 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    try:\n        return n % p\n    except ValueError:\n        raise ValueError(\"modp() should return an integer.\")", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return np.modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if isinstance(p, int):\n        return 2 * p * (1 + p)\n    elif isinstance(p, list):\n        return 2 * (p.index(n) + 1) * p[n]\n    elif isinstance(p, tuple):\n        return 2 * (p[0] * p[-1]) * p\n\n    def modulo(n: int, p: int):\n        \"\"\"Return a list of 2^n mod p (be aware of numerics).\"\"\"\n        if isinstance(p, int):\n            return [modp(n, p) for n in range(2 * p)]\n        elif isinstance(p, list):\n            return [modp(n, p) for n in range(2 * p)]\n        elif isinstance(p, tuple):\n            return [modp(n, p) for n in range(2 * p)]\n        else:\n            return [modp(n, p) for n in range(2 * p)]\n\n    def modp(n: int, p: int):\n        \"\"\"Return a list of 2^n mod p (be aware of numerics).\"\"\"\n        if isinstance(p, int):\n            return [modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return 0\n    if p < 1:\n        return -1\n    return n * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    m = 3\n    while m > 1:\n        m -= 1\n        n = modp(n, m)\n        if n > 0:\n            return n\n        m = m - 1\n    return 0", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p < 1:\n        raise ValueError(\"modp() expects a positive integer.\")\n    if n <= 1:\n        return n * (p - 1)\n    return n * modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n % p == 0:\n        return 1\n    elif n % p == 1:\n        return 0\n    elif n % p == 2:\n        return 0\n    else:\n        raise ValueError(\"invalid number\")\n\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    # Do not return the wrong result.\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        return 1\n    if p < 0:\n        return -1\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 2:\n        raise TypeError(\"modp() must be invoked on a negative integer\")\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n\n    else:\n        return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    n = n * p\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    n = n / 2\n    p = p / 2\n    return (n % 2 == 0) + (p % 2 == 0)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if isinstance(n, int):\n        return modp(n, p)\n\n    if isinstance(p, int):\n        return modp(p, n)\n\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    def modp(n: int, p: int):\n        \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n        n = n * p\n        return n % p\n\n    def modp(n: int, p: int):\n        \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n        n = n * p\n        if n > p:\n            return n % p\n        return n % p\n\n    def modp(n: int, p: int):\n        \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n        n = n * p\n        if n < 0:\n            return n % p\n        return n % p\n\n    def modp(n: int, p: int):\n        \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n        n = n * p\n        if n > 0:\n            return n % p\n        return n % p\n\n    def modp(n: int, p: int):\n        \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n        n = n * p\n        if n < 0:\n            return n % p\n        return n % p\n\n    def modp(n: int, p: int):\n        \"\"\"Return 2^n modulo p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    # A 0 is a good thing, because it is not a good thing to add to an integer\n    # because the result is not a good thing.\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 1\n    if p == 1:\n        return 1\n    if n == 2:\n        return 1\n    if p == 2:\n        return 1\n    if n == 3:\n        return 1\n    if p == 3:\n        return 1\n    if n == 4:\n        return 1\n    if p == 4:\n        return 1\n    if n == 5:\n        return 1\n    if p == 5:\n        return 1\n    if n == 6:\n        return 1\n    if p == 6:\n        return 1\n    if n == 7:\n        return 1\n    if p == 7:\n        return 1\n    if n == 8:\n        return 1\n    if p == 8:\n        return 1\n    if n == 9:\n        return 1\n    if p == 9:\n        return 1\n    if n == 10:\n        return 1\n    if p == 10:\n        return 1\n    if n == 11:\n        return 1\n    if p == 11:\n        return 1\n    if n == 12:\n        return 1\n    if p == 12:\n        return 1\n    if n == 13:\n        return 1\n    if p == 13:\n        return 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    # Use the modulo trick to get the correct result\n    result = 0\n    for i in range(n):\n        result = modp(i, p)\n    return result", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2^n - p - 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    n = int(n)\n    p = int(p)\n    if n == 1:\n        return 2 * (n - 1)\n    elif n == 2:\n        return 2 * (n - 1)\n    elif n == 3:\n        return 2 * (n - 1)\n    elif n == 4:\n        return 2 * (n - 1)\n    elif n == 5:\n        return 2 * (n - 1)\n    elif n == 6:\n        return 2 * (n - 1)\n    elif n == 7:\n        return 2 * (n - 1)\n    elif n == 8:\n        return 2 * (n - 1)\n    elif n == 9:\n        return 2 * (n - 1)\n    elif n == 10:\n        return 2 * (n - 1)\n    elif n == 11:\n        return 2 * (n - 1)\n    elif n == 12:\n        return 2 * (n - 1)\n    elif n == 13:\n        return 2 * (n - 1)\n    elif n == 14:\n        return 2 * (n - 1)\n    elif n == 15:\n        return 2 * (n - 1)\n    elif n == 16:\n        return 2 * (n - 1)\n    elif n == 17:\n        return 2 * (n - 1)\n    elif n == 18:\n        return 2 * (n - 1)\n    elif n == 19:\n        return 2 * (", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2 * (n * p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    else:\n        return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (modp(3, 5) + modp(1101, 101)) % 5", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    try:\n        n = int(n)\n        p = int(p)\n        modp = (n % p) * p\n    except ValueError:\n        modp = 1\n    return modp", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    def modp(n: int, p: int):\n        if n < 0:\n            raise ValueError(\"modp() expects a positive integer\")\n        if p < 0:\n            raise ValueError(\"modp() expects a negative integer\")\n        if n % p == 0:\n            return n % p\n        if n % p == 1:\n            return n % p\n        if n % p == 2:\n            return n % p\n        if n % p == 3:\n            return n % p\n        if n % p == 4:\n            return n % p\n        if n % p == 5:\n            return n % p\n        if n % p == 6:\n            return n % p\n        if n % p == 7:\n            return n % p\n        if n % p == 8:\n            return n % p\n        if n % p == 9:\n            return n % p\n        if n % p == 10:\n            return n % p\n        if n % p == 11:\n            return n % p\n        if n % p == 12:\n            return n % p\n        if n % p == 13:\n            return n % p\n        if n % p == 14:\n            return n % p\n        if n % p == 15:\n            return n % p\n        if n % p == 16:\n            return n % p\n        if n", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError('Integer must be in [1..11]')\n    if p < 2:\n        raise ValueError('Integer must be in [2..11]')\n    if n == 1:\n        return 1\n    if p == 1:\n        return 0\n    if n == 2:\n        return -1\n    if p == 2:\n        return -1\n    if n == 3:\n        return 0\n    if p == 3:\n        return 1\n    if n == 4:\n        return -1\n    if p == 4:\n        return 0\n    if n == 5:\n        return 1\n    if p == 5:\n        return -1\n    if n == 6:\n        return 1\n    if p == 6:\n        return -1\n    if n == 7:\n        return 1\n    if p == 7:\n        return 1\n    if n == 8:\n        return -1\n    if p == 8:\n        return -1\n    if n == 9:\n        return 1\n    if p == 9:\n        return -1\n    if n == 10:\n        return -1\n    if p == 10:\n        return 1\n    if n == 11:\n        return 1\n    if p == 11:\n        return -1\n    if n == 12:\n        return -1\n    if p == 12:\n        return -1\n    if n == 13:\n        return 1\n    if p == 13:\n        return -1\n    if n == 14:\n        return -1\n    if p ==", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    modp = n * p\n    if modp < 0:\n        modp = modp * -1\n    return modp", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return 2**n\n    if n < 2:\n        return 2**(n - 1)\n    if n < 3:\n        return 2**(n - 1)\n    if n < 4:\n        return 2**(n - 1)\n    if n < 5:\n        return 2**(n - 1)\n    if n < 6:\n        return 2**(n - 1)\n    if n < 7:\n        return 2**(n - 1)\n    if n < 8:\n        return 2**(n - 1)\n    if n < 9:\n        return 2**(n - 1)\n    if n < 10:\n        return 2**(n - 1)\n    if n < 11:\n        return 2**(n - 1)\n    if n < 12:\n        return 2**(n - 1)\n    if n < 13:\n        return 2**(n - 1)\n    if n < 14:\n        return 2**(n - 1)\n    if n < 15:\n        return 2**(n - 1)\n    if n < 16:\n        return 2**(n - 1)\n    if n < 17:\n        return 2**(n - 1)\n    if n < 18:\n        return 2**(n - 1)\n    if n < 19:\n        return 2**(n - 1)\n    if n < 20:\n        return 2**(n -", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return n % 2\n    if n % 4 == 0:\n        return n % 4\n    if n % 8 == 0:\n        return n % 8\n    if n % 16 == 0:\n        return n % 16\n    if n % 32 == 0:\n        return n % 32\n    if n % 64 == 0:\n        return n % 64\n    if n % 128 == 0:\n        return n % 128\n    if n % 256 == 0:\n        return n % 256\n    if n % 512 == 0:\n        return n % 512\n    if n % 1024 == 0:\n        return n % 1024\n    if n % 2048 == 0:\n        return n % 2048\n    if n % 2**16 == 0:\n        return n % 2**16\n    if n % 2**32 == 0:\n        return n % 2**32\n    if n % 2**64 == 0:\n        return n % 2**64\n    if n % 2**128 == 0:\n        return n % 2**128\n    if n % 2**256 == 0:\n        return n % 2**256\n    if n % 2**512 == 0:\n        return n % 2**512\n    if n % 2**1024 == 0:\n        return n % 2**1024\n    if n %", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if isinstance(p, int):\n        return modp(p, n)\n    else:\n        return modp(p, n)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    n = int(n)\n    p = int(p)\n    modp = p * n + n * p\n\n    def modp(n: int, p: int):\n        \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n        if n == 0:\n            return 0\n        if p == 0:\n            return n\n        return modp(n, p)\n\n    def modp(n: int, p: int):\n        \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n        if n == 0:\n            return 0\n        if p == 0:\n            return n\n        modp = p * n + n * p\n        return modp\n\n    def modp(n: int, p: int):\n        \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n        if n == 0:\n            return 0\n        if p == 0:\n            return n\n        return modp(n, p)\n\n    def modp(n: int, p: int):\n        \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n        if n == 0:\n            return 0\n        if p == 0:\n            return n\n        modp = p * n + n * p\n        return modp\n\n    def modp(n: int, p: int", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    try:\n        return n % p\n    except ValueError:\n        raise ValueError('Expected to return 1, got %r' % n % p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 * n + p) % (n * p + 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 10:\n        return (n % 10) + p\n    else:\n        return (n % 10) + (p - 1) * modp(n, p - 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 6\n    elif n == 6:\n        return 7\n    elif n == 7:\n        return 8\n    elif n == 8:\n        return 9\n    elif n == 9:\n        return 10\n    elif n == 10:\n        return 11\n    elif n == 11:\n        return 12\n    elif n == 12:\n        return 13\n    elif n == 13:\n        return 14\n    elif n == 14:\n        return 15\n    elif n == 15:\n        return 16\n    elif n == 16:\n        return 17\n    elif n == 17:\n        return 18\n    elif n == 18:\n        return 19\n    elif n == 19:\n        return 20\n    elif n == 20:\n        return 21\n    elif n == 21:\n        return 22\n    elif n == 22:\n        return 23\n    elif n == 23:\n        return 24\n    elif n == 24:\n        return 25\n    elif n == 25:\n        return 26\n    elif n == 26:\n        return 27\n    elif n == 27:\n        return 28\n    elif n == 28:\n        return 29\n    elif n == 29:\n        return 30\n    elif n == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (modp(n, p) - 1) / (p - 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (modp(1, 2) + modp(2, 1) + modp(3, 1) + modp(4, 1) + modp(5, 1) + modp(6, 1) + modp(7, 1) + modp(8, 1))", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return 2\n    elif p == 1:\n        return 3\n    elif p == 2:\n        return 4\n    elif p == 3:\n        return 5\n    elif p == 4:\n        return 6\n    elif p == 5:\n        return 7\n    elif p == 6:\n        return 8\n    elif p == 7:\n        return 9\n    elif p == 8:\n        return 10\n    elif p == 9:\n        return 11\n    elif p == 10:\n        return 12\n    elif p == 11:\n        return 13\n    elif p == 12:\n        return 14\n    elif p == 13:\n        return 15\n    elif p == 14:\n        return 16\n    elif p == 15:\n        return 17\n    elif p == 16:\n        return 18\n    elif p == 17:\n        return 19\n    elif p == 18:\n        return 20\n    elif p == 19:\n        return 21\n    elif p == 20:\n        return 22\n    elif p == 21:\n        return 23\n    elif p == 22:\n        return 24\n    elif p == 23:\n        return 25\n    elif p == 24:\n        return 26\n    elif p == 25:\n        return 27\n    elif p == 26:\n        return 28\n    elif p == 27:\n        return 29\n    elif p == 28:\n        return 30\n    elif p == 29:\n        return 31\n    elif p == 30:\n        return 32", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    # http://stackoverflow.com/questions/673799/how-do-i-simulate-a-complex-number-with-precision\n    # in math\n    if n % p == 0:\n        return 2 * n / p\n    else:\n        return n / p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    if n == 2:\n        return 0\n    if n == 3:\n        return 0\n    if n == 4:\n        return 0\n    if n == 5:\n        return 0\n    if n == 6:\n        return 0\n    if n == 7:\n        return 0\n    if n == 8:\n        return 0\n    if n == 9:\n        return 0\n    if n == 10:\n        return 0\n    if n == 11:\n        return 0\n    if n == 12:\n        return 0\n    if n == 13:\n        return 0\n    if n == 14:\n        return 0\n    if n == 15:\n        return 0\n    if n == 16:\n        return 0\n    if n == 17:\n        return 0\n    if n == 18:\n        return 0\n    if n == 19:\n        return 0\n    if n == 20:\n        return 0\n    if n == 21:\n        return 0\n    if n == 22:\n        return 0\n    if n == 23:\n        return 0\n    if n == 24:\n        return 0\n    if n == 25:\n        return 0\n    if n == 26:\n        return 0\n    if n == 27:\n        return 0\n    if n == 28:\n        return 0\n    if n == 29:\n        return 0\n    if n == 30:\n        return 0", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 * n) % (p + 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p < 1:\n        raise ValueError(\"modp() must be used with p < 1.\")\n    if n < 1:\n        raise ValueError(\"modp() must be used with n < 1.\")\n    if n == 1:\n        return p * n\n    if n == 2:\n        return p * (p - 1)\n    if n == 3:\n        return p * (p - 1)\n    if n == 4:\n        return p * (p - 1)\n    if n == 5:\n        return p * (p - 1)\n    if n == 6:\n        return p * (p - 1)\n    if n == 7:\n        return p * (p - 1)\n    if n == 8:\n        return p * (p - 1)\n    if n == 9:\n        return p * (p - 1)\n    if n == 10:\n        return p * (p - 1)\n    if n == 11:\n        return p * (p - 1)\n    if n == 12:\n        return p * (p - 1)\n    if n == 13:\n        return p * (p - 1)\n    if n == 14:\n        return p * (p - 1)\n    if n == 15:\n        return p * (p - 1)\n    if n == 16:\n        return p * (p - 1)\n    if n == 17:\n        return", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n * p) % 2", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (modp(n, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    n = int(n)\n    p = int(p)\n    if p < 0:\n        raise ValueError(\"invalid integer p\")\n    if n > p:\n        raise ValueError(\"invalid integer n\")\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p < 0:\n        return 2**(n - 1)\n    if n < n - 1:\n        return 1**(n - 1)\n    if n < n - 2:\n        return 0**(n - 1)\n    if p > 0:\n        return 2**(n - 1)\n    if p > 0:\n        return 1**(n - 1)\n    return 0", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return int(modp(n, p)) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n > 2:\n        return (n % 2) * p\n    else:\n        return (n % p) * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p < 0:\n        raise ValueError('Could not find modulo p for n <= 1')\n    return n * modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 6\n    elif n == 6:\n        return 7\n    elif n == 7:\n        return 8\n    elif n == 8:\n        return 9\n    elif n == 9:\n        return 10\n    elif n == 10:\n        return 11\n    elif n == 11:\n        return 12\n    elif n == 12:\n        return 13\n    elif n == 13:\n        return 14\n    elif n == 14:\n        return 15\n    elif n == 15:\n        return 16\n    elif n == 16:\n        return 17\n    elif n == 17:\n        return 18\n    elif n == 18:\n        return 19\n    elif n == 19:\n        return 20\n    elif n == 20:\n        return 21\n    elif n == 21:\n        return 22\n    elif n == 22:\n        return 23\n    elif n == 23:\n        return 24\n    elif n == 24:\n        return 25\n    elif n == 25:\n        return 26\n    elif n == 26:\n        return 27\n    elif n == 27:\n        return 28\n    elif n == 28:\n        return 29\n    elif n == 29:\n        return 30\n    elif n == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return -1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if isinstance(n, int):\n        return n * p\n    elif isinstance(p, int):\n        return n * (1-p)\n    else:\n        raise TypeError('invalid input type')\n    return 2**n", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n > 1:\n        return -1\n    if p > 1:\n        return 0\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2 * (p - 1) * n", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p < 0:\n        return 0\n    if n % 2 == 0:\n        return 1\n    if n % 2 == 1:\n        return 0\n    if n % 2 == 2:\n        return 0\n    if n % 2 == 3:\n        return 0\n    if n % 2 == 4:\n        return 1\n    if n % 2 == 5:\n        return 1\n    if n % 2 == 6:\n        return 0\n    if n % 2 == 7:\n        return 0\n    if n % 2 == 8:\n        return 1\n    if n % 2 == 9:\n        return 0\n    if n % 2 == 10:\n        return 0\n    if n % 2 == 11:\n        return 0\n    if n % 2 == 12:\n        return 0\n    if n % 2 == 13:\n        return 1\n    if n % 2 == 14:\n        return 0\n    if n % 2 == 15:\n        return 1\n    if n % 2 == 16:\n        return 0\n    if n % 2 == 17:\n        return 0\n    if n % 2 == 18:\n        return 0\n    if n % 2 == 19:\n        return 0\n    if n % 2 == 20:\n        return 1\n    if n % 2 == 21:\n        return 0\n    if n % 2 == 22:\n        return 1\n    if n % 2 == 23:\n        return 0", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return np.modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    # Modulo modulo p\n    modp = 0\n    for i in range(n):\n        modp *= p\n    return modp", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return -1\n    elif n < 2:\n        return 1\n    elif n < 3:\n        return 2\n    elif n < 4:\n        return 3\n    elif n < 5:\n        return 4\n    elif n < 6:\n        return 5\n    elif n < 7:\n        return 6\n    elif n < 8:\n        return 7\n    elif n < 9:\n        return 8\n    elif n < 10:\n        return 9\n    elif n < 11:\n        return 10\n    elif n < 12:\n        return 11\n    elif n < 13:\n        return 12\n    elif n < 14:\n        return 13\n    elif n < 15:\n        return 14\n    elif n < 16:\n        return 15\n    elif n < 17:\n        return 16\n    elif n < 18:\n        return 17\n    elif n < 19:\n        return 18\n    elif n < 20:\n        return 19\n    elif n < 21:\n        return 20\n    elif n < 22:\n        return 21\n    elif n < 23:\n        return 22\n    elif n < 24:\n        return 23\n    elif n < 25:\n        return 24\n    elif n < 26:\n        return 25\n    elif n < 27:\n        return 26\n    elif n < 28:\n        return 27\n    elif n < 29:\n        return 28\n    elif n < 30:\n        return 29\n    elif n < 31:\n        return 30", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"modp() must be called on a negative number.\")\n    if p < 2:\n        raise ValueError(\"modp() must be called on a negative number.\")\n    if n == 2:\n        modp = 1\n    elif n == 3:\n        modp = 3\n    elif n == 4:\n        modp = 4\n    elif n == 5:\n        modp = 5\n    elif n == 6:\n        modp = 6\n    elif n == 7:\n        modp = 7\n    elif n == 8:\n        modp = 8\n    elif n == 9:\n        modp = 9\n    elif n == 10:\n        modp = 10\n    elif n == 11:\n        modp = 11\n    elif n == 12:\n        modp = 12\n    elif n == 13:\n        modp = 13\n    elif n == 14:\n        modp = 14\n    elif n == 15:\n        modp = 15\n    elif n == 16:\n        modp = 16\n    elif n == 17:\n        modp = 17\n    elif n == 18:\n        modp = 18\n    elif n == 19:\n        modp = 19\n    elif n == 20:\n        modp = 20\n    elif n == 21:\n        modp = 21\n    elif n == 22:\n        modp = 22\n    elif", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2 * n * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    result = 1\n    for i in range(n):\n        result *= (1 << i)\n    return result", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return 2**n\n    elif n < 2:\n        return 2**(n - 1)\n    elif n < 3:\n        return 2**(n - 2)\n    elif n < 4:\n        return 2**(n - 3)\n    elif n < 5:\n        return 2**(n - 4)\n    elif n < 6:\n        return 2**(n - 5)\n    elif n < 7:\n        return 2**(n - 6)\n    elif n < 8:\n        return 2**(n - 7)\n    elif n < 9:\n        return 2**(n - 8)\n    elif n < 10:\n        return 2**(n - 9)\n    elif n < 11:\n        return 2**(n - 10)\n    elif n < 12:\n        return 2**(n - 11)\n    elif n < 13:\n        return 2**(n - 12)\n    elif n < 14:\n        return 2**(n - 13)\n    elif n < 15:\n        return 2**(n - 14)\n    elif n < 16:\n        return 2**(n - 15)\n    elif n < 17:\n        return 2**(n - 16)\n    elif n < 18:\n        return 2**(n - 17)\n    elif n < 19:\n        return 2**(n - 18)\n    elif n < 20:\n        return 2**(n -", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    # 1 <= p <= 2^11\n    # 1 <= n <= 2^11\n    if n <= p:\n        return (modp(n, p) << p) * modp(n, p)\n    elif n > p:\n        return modp(n, p) << p\n    return (modp(n, p) << p) * modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if isinstance(n, int):\n        return n % p\n    elif isinstance(p, int):\n        return n % (p * p)\n    else:\n        raise TypeError('not a number')"]]