[["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    if p == 0:\n        return 1\n    if n == 1:\n        return 0\n    if p == 1:\n        return 0\n    if n == 2:\n        return 0\n    if p == 2:\n        return 0\n    if n == 3:\n        return 0\n    if p == 3:\n        return 0\n    if n == 4:\n        return 0\n    if p == 4:\n        return 0\n    if n == 5:\n        return 0\n    if p == 5:\n        return 0\n    if n == 6:\n        return 0\n    if p == 6:\n        return 0\n    if n == 7:\n        return 0\n    if p == 7:\n        return 0\n    if n == 8:\n        return 0\n    if p == 8:\n        return 0\n    if n == 9:\n        return 0\n    if p == 9:\n        return 0\n    if n == 10:\n        return 0\n    if p == 10:\n        return 0\n    if n == 11:\n        return 0\n    if p == 11:\n        return 0\n    if n == 12:\n        return 0\n    if p == 12:\n        return 0\n    if n == 13:\n        return 0\n    if p == 13:\n        return 0\n    if n == 14:\n        return 0\n    if p == 14:\n        return 0\n    if n == 15:\n        return 0\n    if p == 15:\n        return 0", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    if p == 0:\n        return 1\n    if n < 0:\n        return 0\n    if p < 0:\n        return -1\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if p < 1:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if n < 2:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if p < 2:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if n < 3:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if p < 3:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if n < 4:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if n < 5:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if p < 5:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if n < 6:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if p < 6:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if n < 7:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if p <", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return 0\n    if p < 1:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError('invalid number')\n    if p < 1:\n        raise ValueError('invalid number')\n    if n % p == 0:\n        return n % p\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if p < 1:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if n % p == 0:\n        return n % p\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    if n == 1:\n        return 2**n\n    if n == 2:\n        return 2**(n - 1)\n    if n == 3:\n        return 2**(n - 2)\n    if n == 4:\n        return 2**(n - 3)\n    if n == 5:\n        return 2**(n - 4)\n    if n == 6:\n        return 2**(n - 5)\n    if n == 7:\n        return 2**(n - 6)\n    if n == 8:\n        return 2**(n - 7)\n    if n == 9:\n        return 2**(n - 8)\n    if n == 10:\n        return 2**(n - 9)\n    if n == 11:\n        return 2**(n - 10)\n    if n == 12:\n        return 2**(n - 11)\n    if n == 13:\n        return 2**(n - 12)\n    if n == 14:\n        return 2**(n - 13)\n    if n == 15:\n        return 2**(n - 14)\n    if n == 16:\n        return 2**(n - 15)\n    if n == 17:\n        return 2**(n - 16)\n    if n == 18:\n        return 2**(n - 17)\n    if n == 19:\n        return 2**(n - 18)\n    if n ==", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return 2\n    if n % 2 == 0:\n        return 1\n    if n % 2 == 1:\n        return 0\n    if n % 2 == 2:\n        return 0\n    if n % 2 == 3:\n        return 0\n    if n % 2 == 4:\n        return 0\n    if n % 2 == 5:\n        return 0\n    if n % 2 == 6:\n        return 0\n    if n % 2 == 7:\n        return 0\n    if n % 2 == 8:\n        return 0\n    if n % 2 == 9:\n        return 0\n    if n % 2 == 10:\n        return 0\n    if n % 2 == 11:\n        return 0\n    if n % 2 == 12:\n        return 0\n    if n % 2 == 13:\n        return 0\n    if n % 2 == 14:\n        return 0\n    if n % 2 == 15:\n        return 0\n    if n % 2 == 16:\n        return 0\n    if n % 2 == 17:\n        return 0\n    if n % 2 == 18:\n        return 0\n    if n % 2 == 19:\n        return 0\n    if n % 2 == 20:\n        return 0\n    if n % 2 == 21:\n        return 0\n    if n % 2 == 22:\n        return 0\n    if n % 2 == 23:\n        return 0\n    if n % 2 == 24:", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 0:\n        return 2\n    if n == 1:\n        return 3\n    if p == 1:\n        return 4\n    if n == 2:\n        return 5\n    if p == 2:\n        return 6\n    if n == 3:\n        return 7\n    if p == 3:\n        return 8\n    if n == 4:\n        return 9\n    if p == 4:\n        return 10\n    if n == 5:\n        return 11\n    if p == 5:\n        return 12\n    if n == 6:\n        return 13\n    if p == 6:\n        return 14\n    if n == 7:\n        return 15\n    if p == 7:\n        return 16\n    if n == 8:\n        return 17\n    if p == 8:\n        return 18\n    if n == 9:\n        return 19\n    if p == 9:\n        return 20\n    if n == 10:\n        return 21\n    if p == 10:\n        return 22\n    if n == 11:\n        return 23\n    if p == 11:\n        return 24\n    if n == 12:\n        return 25\n    if p == 12:\n        return 26\n    if n == 13:\n        return 27\n    if p == 13:\n        return 28\n    if n == 14:\n        return 29\n    if p == 14:\n        return 30\n    if n == 15:\n        return 31\n    if p == 15:\n        return 32", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return 2\n    if p < 1:\n        return 2**p\n    if n < 2:\n        return 2**(n - 1)\n    if p < 2:\n        return 2**(p - 1)\n    return 2**(n - 1) + 2**(p - 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    if p == 0:\n        return 1\n    if n == 1:\n        return 0\n    if p == 1:\n        return 0\n    if n == 2:\n        return 0\n    if p == 2:\n        return 0\n    if n == 3:\n        return 0\n    if p == 3:\n        return 0\n    if n == 4:\n        return 0\n    if p == 4:\n        return 0\n    if n == 5:\n        return 0\n    if p == 5:\n        return 0\n    if n == 6:\n        return 0\n    if p == 6:\n        return 0\n    if n == 7:\n        return 0\n    if p == 7:\n        return 0\n    if n == 8:\n        return 0\n    if p == 8:\n        return 0\n    if n == 9:\n        return 0\n    if p == 9:\n        return 0\n    if n == 10:\n        return 0\n    if p == 10:\n        return 0\n    if n == 11:\n        return 0\n    if p == 11:\n        return 0\n    if n == 12:\n        return 0\n    if p == 12:\n        return 0\n    if n == 13:\n        return 0\n    if p == 13:\n        return 0\n    if n == 14:\n        return 0\n    if p == 14:\n        return 0\n    if n == 15:\n        return 0\n    if p == 15:\n        return 0", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return 0\n    if p < 1:\n        return 1\n    if n < 2:\n        return 2\n    if p < 3:\n        return 3\n    if n < 4:\n        return 4\n    if n < 5:\n        return 5\n    if n < 6:\n        return 6\n    if n < 7:\n        return 7\n    if n < 8:\n        return 8\n    if n < 9:\n        return 9\n    if n < 10:\n        return 10\n    if n < 11:\n        return 11\n    if n < 12:\n        return 12\n    if n < 13:\n        return 13\n    if n < 14:\n        return 14\n    if n < 15:\n        return 15\n    if n < 16:\n        return 16\n    if n < 17:\n        return 17\n    if n < 18:\n        return 18\n    if n < 19:\n        return 19\n    if n < 20:\n        return 20\n    if n < 21:\n        return 21\n    if n < 22:\n        return 22\n    if n < 23:\n        return 23\n    if n < 24:\n        return 24\n    if n < 25:\n        return 25\n    if n < 26:\n        return 26\n    if n < 27:\n        return 27\n    if n < 28:\n        return 28\n    if n < 29:\n        return 29\n    if n < 30:\n        return 30", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return n\n    if p < 1:\n        return p\n    if n % 2 == 0:\n        return n % 2\n    if p % 2 == 0:\n        return p % 2\n    if n % 2 == 1:\n        return n % 2\n    if p % 2 == 1:\n        return p % 2\n    if n % 2 == 2:\n        return n % 2\n    if n % 2 == 2:\n        return p % 2\n    if n % 2 == 2:\n        return p % 2\n    if n % 2 == 2:\n        return p % 2\n    if n % 2 == 2:\n        return p % 2\n    if n % 2 == 2:\n        return p % 2\n    if n % 2 == 2:\n        return p % 2\n    if n % 2 == 2:\n        return p % 2\n    if n % 2 == 2:\n        return p % 2\n    if n % 2 == 2:\n        return p % 2\n    if n % 2 == 2:\n        return p % 2\n    if n % 2 == 2:\n        return p % 2\n    if n % 2 == 2:\n        return p % 2\n    if n % 2 == 2:\n        return p % 2\n    if n % 2 == 2:\n        return p % 2\n    if n % 2 == 2:\n        return p % 2", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if p < 1:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if n % p == 0:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    if n == 1:\n        return 3\n    if n == 2:\n        return 4\n    if n == 3:\n        return 5\n    if n == 4:\n        return 6\n    if n == 5:\n        return 7\n    if n == 6:\n        return 8\n    if n == 7:\n        return 9\n    if n == 8:\n        return 10\n    if n == 9:\n        return 11\n    if n == 10:\n        return 12\n    if n == 11:\n        return 13\n    if n == 12:\n        return 14\n    if n == 13:\n        return 15\n    if n == 14:\n        return 16\n    if n == 15:\n        return 17\n    if n == 16:\n        return 18\n    if n == 17:\n        return 19\n    if n == 18:\n        return 20\n    if n == 19:\n        return 21\n    if n == 20:\n        return 22\n    if n == 21:\n        return 23\n    if n == 22:\n        return 24\n    if n == 23:\n        return 25\n    if n == 24:\n        return 26\n    if n == 25:\n        return 27\n    if n == 26:\n        return 28\n    if n == 27:\n        return 29\n    if n == 28:\n        return 30\n    if n == 29:\n        return 31\n    if n == 30:\n        return 32", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return 2\n    if p < 1:\n        return 2**(n - 1)\n    if n > 1:\n        return 2**(n - 1)\n    if p > 1:\n        return 2**(n - 1)\n    return 2**(n - 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"modp() expects a positive integer\")\n    if p < 1:\n        raise ValueError(\"modp() expects a positive integer\")\n    if n % p == 0:\n        return n % p\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if p < 1:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if n < 2:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if p < 2:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if n < 3:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if p < 3:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if n < 4:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if n < 5:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if p < 5:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if n < 6:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if p < 6:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if n < 7:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if p <", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"modp() expects a positive integer\")\n    if p < 1:\n        raise ValueError(\"modp() expects a positive integer\")\n    if n % p == 0:\n        raise ValueError(\"modp() expects a positive integer\")\n    if n % p == 1:\n        raise ValueError(\"modp() expects a positive integer\")\n    if n % p == 2:\n        raise ValueError(\"modp() expects a positive integer\")\n    if n % p == 3:\n        raise ValueError(\"modp() expects a positive integer\")\n    if n % p == 4:\n        raise ValueError(\"modp() expects a positive integer\")\n    if n % p == 5:\n        raise ValueError(\"modp() expects a positive integer\")\n    if n % p == 6:\n        raise ValueError(\"modp() expects a positive integer\")\n    if n % p == 7:\n        raise ValueError(\"modp() expects a positive integer\")\n    if n % p == 8:\n        raise ValueError(\"modp() expects a positive integer\")\n    if n % p == 9:\n        raise ValueError(\"modp() expects a positive integer\")\n    if n % p == 10:\n        raise ValueError(\"modp() expects a positive integer\"", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if p < 1:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if n == 1:\n        return 2\n    if p == 1:\n        return 1\n    if n == 2:\n        return 0\n    if p == 2:\n        return 1\n    if n == 3:\n        return 0\n    if p == 3:\n        return 1\n    if n == 4:\n        return 0\n    if p == 4:\n        return 1\n    if n == 5:\n        return 0\n    if p == 5:\n        return 1\n    if n == 6:\n        return 0\n    if p == 6:\n        return 1\n    if n == 7:\n        return 0\n    if p == 7:\n        return 1\n    if n == 8:\n        return 0\n    if p == 8:\n        return 1\n    if n == 9:\n        return 0\n    if p == 9:\n        return 1\n    if n == 10:\n        return 0\n    if p == 10:\n        return 1\n    if n == 11:\n        return 0\n    if p == 11:\n        return 1\n    if n == 12:\n        return 0\n    if p == 12:\n        return 1\n    if n == 13:\n        return 0\n    if p == 13:\n        return 1\n    if n == 14:", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return 0\n    if p < 1:\n        return 1\n    if n == 1:\n        return 0\n    if p == 1:\n        return 1\n    if n == 2:\n        return 0\n    if p == 2:\n        return 1\n    if n == 3:\n        return 0\n    if p == 3:\n        return 1\n    if n == 4:\n        return 0\n    if p == 4:\n        return 1\n    if n == 5:\n        return 0\n    if p == 5:\n        return 1\n    if n == 6:\n        return 0\n    if p == 6:\n        return 1\n    if n == 7:\n        return 0\n    if p == 7:\n        return 1\n    if n == 8:\n        return 0\n    if p == 8:\n        return 1\n    if n == 9:\n        return 0\n    if p == 9:\n        return 1\n    if n == 10:\n        return 0\n    if p == 10:\n        return 1\n    if n == 11:\n        return 0\n    if p == 11:\n        return 1\n    if n == 12:\n        return 0\n    if p == 12:\n        return 1\n    if n == 13:\n        return 0\n    if p == 13:\n        return 1\n    if n == 14:\n        return 0\n    if p == 14:\n        return 1\n    if n == 15:\n        return 0\n    if p == 15:\n        return 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return 0\n    if p < 1:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 3:\n        return 4\n    if p == 3:\n        return 5\n    if n == 11:\n        return 6\n    if p == 11:\n        return 7\n    if n == 111:\n        return 8\n    if p == 111:\n        return 9\n    if n == 111:\n        return 10\n    if n == 111:\n        return 11\n    if n == 111:\n        return 12\n    if n == 111:\n        return 13\n    if n == 111:\n        return 14\n    if n == 111:\n        return 15\n    if n == 111:\n        return 16\n    if n == 111:\n        return 17\n    if n == 111:\n        return 18\n    if n == 111:\n        return 19\n    if n == 111:\n        return 20\n    if n == 111:\n        return 21\n    if n == 111:\n        return 22\n    if n == 111:\n        return 23\n    if n == 111:\n        return 24\n    if n == 111:\n        return 25\n    if n == 111:\n        return 26\n    if n == 111:\n        return 27\n    if n == 111:\n        return 28\n    if n", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"modp() expects a positive integer\")\n    if p < 1:\n        raise ValueError(\"modp() expects a positive integer\")\n    if n % p == 0:\n        return n % p\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    if p == 0:\n        return 1\n    if n == 1:\n        return 0\n    if p == 1:\n        return 0\n    if n == 2:\n        return 0\n    if p == 2:\n        return 0\n    if n == 3:\n        return 0\n    if p == 3:\n        return 0\n    if n == 4:\n        return 0\n    if p == 4:\n        return 0\n    if n == 5:\n        return 0\n    if p == 5:\n        return 0\n    if n == 6:\n        return 0\n    if p == 6:\n        return 0\n    if n == 7:\n        return 0\n    if p == 7:\n        return 0\n    if n == 8:\n        return 0\n    if p == 8:\n        return 0\n    if n == 9:\n        return 0\n    if p == 9:\n        return 0\n    if n == 10:\n        return 0\n    if p == 10:\n        return 0\n    if n == 11:\n        return 0\n    if p == 11:\n        return 0\n    if n == 12:\n        return 0\n    if p == 12:\n        return 0\n    if n == 13:\n        return 0\n    if p == 13:\n        return 0\n    if n == 14:\n        return 0\n    if p == 14:\n        return 0\n    if n == 15:\n        return 0\n    if p == 15:\n        return 0", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError('invalid number')\n    if p < 1:\n        raise ValueError('invalid number')\n    if n % p == 0:\n        return n % p\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    if n == 1:\n        return 2\n    if n == 2:\n        return 2\n    if n == 3:\n        return 2\n    if n == 4:\n        return 2\n    if n == 5:\n        return 2\n    if n == 6:\n        return 2\n    if n == 7:\n        return 2\n    if n == 8:\n        return 2\n    if n == 9:\n        return 2\n    if n == 10:\n        return 2\n    if n == 11:\n        return 2\n    if n == 12:\n        return 2\n    if n == 13:\n        return 2\n    if n == 14:\n        return 2\n    if n == 15:\n        return 2\n    if n == 16:\n        return 2\n    if n == 17:\n        return 2\n    if n == 18:\n        return 2\n    if n == 19:\n        return 2\n    if n == 20:\n        return 2\n    if n == 21:\n        return 2\n    if n == 22:\n        return 2\n    if n == 23:\n        return 2\n    if n == 24:\n        return 2\n    if n == 25:\n        return 2\n    if n == 26:\n        return 2\n    if n == 27:\n        return 2\n    if n == 28:\n        return 2\n    if n == 29:\n        return 2\n    if n == 30:\n        return 2", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"invalid number\")\n    if p < 1:\n        raise ValueError(\"invalid number\")\n    if n % p == 0:\n        return n % p\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 0:\n        return 1\n    if n == 1:\n        return 1\n    if p == 1:\n        return 1\n    if n == 2:\n        return 1\n    if p == 2:\n        return 1\n    if n == 3:\n        return 1\n    if p == 3:\n        return 1\n    if n == 4:\n        return 1\n    if p == 4:\n        return 1\n    if n == 5:\n        return 1\n    if p == 5:\n        return 1\n    if n == 6:\n        return 1\n    if p == 6:\n        return 1\n    if n == 7:\n        return 1\n    if p == 7:\n        return 1\n    if n == 8:\n        return 1\n    if p == 8:\n        return 1\n    if n == 9:\n        return 1\n    if p == 9:\n        return 1\n    if n == 10:\n        return 1\n    if p == 10:\n        return 1\n    if n == 11:\n        return 1\n    if p == 11:\n        return 1\n    if n == 12:\n        return 1\n    if p == 12:\n        return 1\n    if n == 13:\n        return 1\n    if p == 13:\n        return 1\n    if n == 14:\n        return 1\n    if p == 14:\n        return 1\n    if n == 15:\n        return 1\n    if p == 15:\n        return 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    if p == 0:\n        return 1\n    if n == 1:\n        return 0\n    if p == 1:\n        return 1\n    if n == 2:\n        return 0\n    if p == 2:\n        return 1\n    if n == 3:\n        return 0\n    if p == 3:\n        return 1\n    if n == 4:\n        return 0\n    if p == 4:\n        return 1\n    if n == 5:\n        return 0\n    if p == 5:\n        return 1\n    if n == 6:\n        return 0\n    if p == 6:\n        return 1\n    if n == 7:\n        return 0\n    if p == 7:\n        return 1\n    if n == 8:\n        return 0\n    if p == 8:\n        return 1\n    if n == 9:\n        return 0\n    if p == 9:\n        return 1\n    if n == 10:\n        return 0\n    if p == 10:\n        return 1\n    if n == 11:\n        return 0\n    if p == 11:\n        return 1\n    if n == 12:\n        return 0\n    if p == 12:\n        return 1\n    if n == 13:\n        return 0\n    if p == 13:\n        return 1\n    if n == 14:\n        return 0\n    if p == 14:\n        return 1\n    if n == 15:\n        return 0\n    if p == 15:\n        return 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    if n == 1:\n        return 3\n    if n == 2:\n        return 4\n    if n == 3:\n        return 5\n    if n == 4:\n        return 6\n    if n == 5:\n        return 7\n    if n == 6:\n        return 8\n    if n == 7:\n        return 9\n    if n == 8:\n        return 10\n    if n == 9:\n        return 11\n    if n == 10:\n        return 12\n    if n == 11:\n        return 13\n    if n == 12:\n        return 14\n    if n == 13:\n        return 15\n    if n == 14:\n        return 16\n    if n == 15:\n        return 17\n    if n == 16:\n        return 18\n    if n == 17:\n        return 19\n    if n == 18:\n        return 20\n    if n == 19:\n        return 21\n    if n == 20:\n        return 22\n    if n == 21:\n        return 23\n    if n == 22:\n        return 24\n    if n == 23:\n        return 25\n    if n == 24:\n        return 26\n    if n == 25:\n        return 27\n    if n == 26:\n        return 28\n    if n == 27:\n        return 29\n    if n == 28:\n        return 30\n    if n == 29:\n        return 31\n    if n == 30:\n        return 32", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    if n == 1:\n        return 3\n    if n == 2:\n        return 4\n    if n == 3:\n        return 5\n    if n == 4:\n        return 6\n    if n == 5:\n        return 7\n    if n == 6:\n        return 8\n    if n == 7:\n        return 9\n    if n == 8:\n        return 10\n    if n == 9:\n        return 11\n    if n == 10:\n        return 12\n    if n == 11:\n        return 13\n    if n == 12:\n        return 14\n    if n == 13:\n        return 15\n    if n == 14:\n        return 16\n    if n == 15:\n        return 17\n    if n == 16:\n        return 18\n    if n == 17:\n        return 19\n    if n == 18:\n        return 20\n    if n == 19:\n        return 21\n    if n == 20:\n        return 22\n    if n == 21:\n        return 23\n    if n == 22:\n        return 24\n    if n == 23:\n        return 25\n    if n == 24:\n        return 26\n    if n == 25:\n        return 27\n    if n == 26:\n        return 28\n    if n == 27:\n        return 29\n    if n == 28:\n        return 30\n    if n == 29:\n        return 31\n    if n == 30:\n        return 32", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 1\n    if n == 5:\n        return 1\n    if n == 6:\n        return 1\n    if n == 7:\n        return 1\n    if n == 8:\n        return 1\n    if n == 9:\n        return 1\n    if n == 10:\n        return 1\n    if n == 11:\n        return 1\n    if n == 12:\n        return 1\n    if n == 13:\n        return 1\n    if n == 14:\n        return 1\n    if n == 15:\n        return 1\n    if n == 16:\n        return 1\n    if n == 17:\n        return 1\n    if n == 18:\n        return 1\n    if n == 19:\n        return 1\n    if n == 20:\n        return 1\n    if n == 21:\n        return 1\n    if n == 22:\n        return 1\n    if n == 23:\n        return 1\n    if n == 24:\n        return 1\n    if n == 25:\n        return 1\n    if n == 26:\n        return 1\n    if n == 27:\n        return 1\n    if n == 28:\n        return 1\n    if n == 29:\n        return 1\n    if n == 30:\n        return 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return 0\n    if p < 1:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"modp() expects a positive integer\")\n    if p < 1:\n        raise ValueError(\"modp() expects a positive integer\")\n    if n % p == 0:\n        return n % p\n    if n % p == 1:\n        return n % p\n    if n % p == 2:\n        return n % p\n    if n % p == 3:\n        return n % p\n    if n % p == 4:\n        return n % p\n    if n % p == 5:\n        return n % p\n    if n % p == 6:\n        return n % p\n    if n % p == 7:\n        return n % p\n    if n % p == 8:\n        return n % p\n    if n % p == 9:\n        return n % p\n    if n % p == 10:\n        return n % p\n    if n % p == 11:\n        return n % p\n    if n % p == 12:\n        return n % p\n    if n % p == 13:\n        return n % p\n    if n % p == 14:\n        return n % p\n    if n % p == 15:\n        return n % p\n    if n % p == 16:\n        return n % p\n    if n % p == 17:\n        return n % p\n    if n %", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"modp() expects a positive integer\")\n    if p < 1:\n        raise ValueError(\"modp() expects a positive integer\")\n    if n == 0:\n        return 1\n    if p == 0:\n        return 0\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p ==", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return 2\n    if p < 1:\n        return 2**(n - 1)\n    if n == 1:\n        return 2**(n - 1)\n    if p == 1:\n        return 2**(n - 1)\n    if n == 2:\n        return 2**(n - 1)\n    if p == 2:\n        return 2**(n - 1)\n    if n == 3:\n        return 2**(n - 1)\n    if p == 3:\n        return 2**(n - 1)\n    if n == 4:\n        return 2**(n - 1)\n    if p == 4:\n        return 2**(n - 1)\n    if n == 5:\n        return 2**(n - 1)\n    if p == 5:\n        return 2**(n - 1)\n    if n == 6:\n        return 2**(n - 1)\n    if p == 6:\n        return 2**(n - 1)\n    if n == 7:\n        return 2**(n - 1)\n    if p == 7:\n        return 2**(n - 1)\n    if n == 8:\n        return 2**(n - 1)\n    if p == 8:\n        return 2**(n - 1)\n    if n == 9:\n        return 2**(n - 1)\n    if p == 9:\n        return 2**(n - 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return 0\n    if p < 1:\n        return 1\n    if n % 2 == 0:\n        return modp(n, p)\n    if n % 2 == 1:\n        return modp(n, p)\n    if n % 2 == 2:\n        return modp(n, p)\n    if n % 2 == 3:\n        return modp(n, p)\n    if n % 2 == 4:\n        return modp(n, p)\n    if n % 2 == 5:\n        return modp(n, p)\n    if n % 2 == 6:\n        return modp(n, p)\n    if n % 2 == 7:\n        return modp(n, p)\n    if n % 2 == 8:\n        return modp(n, p)\n    if n % 2 == 9:\n        return modp(n, p)\n    if n % 2 == 10:\n        return modp(n, p)\n    if n % 2 == 11:\n        return modp(n, p)\n    if n % 2 == 12:\n        return modp(n, p)\n    if n % 2 == 13:\n        return modp(n, p)\n    if n % 2 == 14:\n        return modp(n, p)\n    if n % 2 == 15:\n        return modp(n, p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return n\n    if p < 1:\n        return n\n    if n < 2:\n        return n\n    if p < 3:\n        return n\n    if n < 4:\n        return n\n    if n < 5:\n        return n\n    if n < 6:\n        return n\n    if n < 7:\n        return n\n    if n < 8:\n        return n\n    if n < 9:\n        return n\n    if n < 10:\n        return n\n    if n < 11:\n        return n\n    if n < 12:\n        return n\n    if n < 13:\n        return n\n    if n < 14:\n        return n\n    if n < 15:\n        return n\n    if n < 16:\n        return n\n    if n < 17:\n        return n\n    if n < 18:\n        return n\n    if n < 19:\n        return n\n    if n < 20:\n        return n\n    if n < 21:\n        return n\n    if n < 22:\n        return n\n    if n < 23:\n        return n\n    if n < 24:\n        return n\n    if n < 25:\n        return n\n    if n < 26:\n        return n\n    if n < 27:\n        return n\n    if n < 28:\n        return n\n    if n < 29:\n        return n\n    if n < 30:\n        return n", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return n\n    if p < 1:\n        return p\n    if n % 2 == 0:\n        return n % 2\n    if p % 2 == 0:\n        return p % 2\n    if n % 2 == 1:\n        return n % 2\n    if p % 2 == 1:\n        return p % 2\n    if n % 2 == 2:\n        return n % 2\n    if n % 2 == 2:\n        return p % 2\n    if n % 2 == 2:\n        return p % 2\n    if n % 2 == 2:\n        return p % 2\n    if n % 2 == 2:\n        return p % 2\n    if n % 2 == 2:\n        return p % 2\n    if n % 2 == 2:\n        return p % 2\n    if n % 2 == 2:\n        return p % 2\n    if n % 2 == 2:\n        return p % 2\n    if n % 2 == 2:\n        return p % 2\n    if n % 2 == 2:\n        return p % 2\n    if n % 2 == 2:\n        return p % 2\n    if n % 2 == 2:\n        return p % 2\n    if n % 2 == 2:\n        return p % 2\n    if n % 2 == 2:\n        return p % 2\n    if n % 2 == 2:\n        return p % 2", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"modp() expects a positive integer\")\n    if p < 1:\n        raise ValueError(\"modp() expects a positive integer\")\n    if n % p == 0:\n        return modp(n, p)\n    if n % p == 1:\n        return modp(n, p)\n    if n % p == 2:\n        return modp(n, p)\n    if n % p == 3:\n        return modp(n, p)\n    if n % p == 4:\n        return modp(n, p)\n    if n % p == 5:\n        return modp(n, p)\n    if n % p == 6:\n        return modp(n, p)\n    if n % p == 7:\n        return modp(n, p)\n    if n % p == 8:\n        return modp(n, p)\n    if n % p == 9:\n        return modp(n, p)\n    if n % p == 10:\n        return modp(n, p)\n    if n % p == 11:\n        return modp(n, p)\n    if n % p == 12:\n        return modp(n, p)\n    if n % p == 13:\n        return modp(n, p)\n    if n % p == 14:\n        return mod", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    if n % 2 == 0:\n        return 2 * n\n    if n % 2 == 1:\n        return 2 * n * n\n    if n % 2 == 2:\n        return 2 * n * n * n\n    if n % 2 == 3:\n        return 2 * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"modp() expects a positive integer\")\n    if p < 2:\n        raise ValueError(\"modp() expects a positive integer\")\n    if n == 1:\n        return 2\n    if p == 1:\n        return 1\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if p == 0:\n        return 0\n    if n == 1:\n        return 1\n    if p == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n == 1:\n        return 1\n    if p == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n == 1:\n        return 1\n    if p == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n == 1:\n        return 1\n    if p == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n == 1:\n        return 1\n    if p == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n == 1:\n        return 1\n    if p == 0:\n        return 1\n    if n == 1:\n        return 1\n    if p == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n == 1:\n        return 1\n    if p == 0:\n        return 1\n    if n ==", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError('invalid number')\n    if p < 1:\n        raise ValueError('invalid number')\n    if n % p == 0:\n        return n % p\n    if n % p == 1:\n        return n % p\n    if n % p == 2:\n        return n % p\n    if n % p == 3:\n        return n % p\n    if n % p == 4:\n        return n % p\n    if n % p == 5:\n        return n % p\n    if n % p == 6:\n        return n % p\n    if n % p == 7:\n        return n % p\n    if n % p == 8:\n        return n % p\n    if n % p == 9:\n        return n % p\n    if n % p == 10:\n        return n % p\n    if n % p == 11:\n        return n % p\n    if n % p == 12:\n        return n % p\n    if n % p == 13:\n        return n % p\n    if n % p == 14:\n        return n % p\n    if n % p == 15:\n        return n % p\n    if n % p == 16:\n        return n % p\n    if n % p == 17:\n        return n % p\n    if n % p == 18:\n        return n % p\n    if", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return 0\n    if p < 1:\n        return 1\n    if n % p == 0:\n        return 2\n    if n % p == 1:\n        return 3\n    if n % p == 2:\n        return 4\n    if n % p == 3:\n        return 5\n    if n % p == 4:\n        return 6\n    if n % p == 5:\n        return 7\n    if n % p == 6:\n        return 8\n    if n % p == 7:\n        return 9\n    if n % p == 8:\n        return 10\n    if n % p == 9:\n        return 11\n    if n % p == 10:\n        return 12\n    if n % p == 11:\n        return 13\n    if n % p == 12:\n        return 14\n    if n % p == 13:\n        return 15\n    if n % p == 14:\n        return 16\n    if n % p == 15:\n        return 17\n    if n % p == 16:\n        return 18\n    if n % p == 17:\n        return 19\n    if n % p == 18:\n        return 20\n    if n % p == 19:\n        return 21\n    if n % p == 20:\n        return 22\n    if n % p == 21:\n        return 23\n    if n % p == 22:\n        return 24\n    if n % p == 23:\n        return 25", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 6\n    elif n == 6:\n        return 7\n    elif n == 7:\n        return 8\n    elif n == 8:\n        return 9\n    elif n == 9:\n        return 10\n    elif n == 10:\n        return 11\n    elif n == 11:\n        return 12\n    elif n == 12:\n        return 13\n    elif n == 13:\n        return 14\n    elif n == 14:\n        return 15\n    elif n == 15:\n        return 16\n    elif n == 16:\n        return 17\n    elif n == 17:\n        return 18\n    elif n == 18:\n        return 19\n    elif n == 19:\n        return 20\n    elif n == 20:\n        return 21\n    elif n == 21:\n        return 22\n    elif n == 22:\n        return 23\n    elif n == 23:\n        return 24\n    elif n == 24:\n        return 25\n    elif n == 25:\n        return 26\n    elif n == 26:\n        return 27\n    elif n == 27:\n        return 28\n    elif n == 28:\n        return 29\n    elif n == 29:\n        return 30\n    elif n == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"modp() expects a positive integer\")\n    if p < 1:\n        raise ValueError(\"modp() expects a positive integer\")\n    if n % p == 0:\n        return n % p\n    if n % p == 1:\n        return n % p\n    if n % p == 2:\n        return n % p\n    if n % p == 3:\n        return n % p\n    if n % p == 4:\n        return n % p\n    if n % p == 5:\n        return n % p\n    if n % p == 6:\n        return n % p\n    if n % p == 7:\n        return n % p\n    if n % p == 8:\n        return n % p\n    if n % p == 9:\n        return n % p\n    if n % p == 10:\n        return n % p\n    if n % p == 11:\n        return n % p\n    if n % p == 12:\n        return n % p\n    if n % p == 13:\n        return n % p\n    if n % p == 14:\n        return n % p\n    if n % p == 15:\n        return n % p\n    if n % p == 16:\n        return n % p\n    if n % p == 17:\n        return n % p\n    if n %", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    if p == 0:\n        return 3\n    if n == 1:\n        return 4\n    if p == 1:\n        return 5\n    if n == 2:\n        return 6\n    if p == 2:\n        return 7\n    if n == 3:\n        return 8\n    if p == 3:\n        return 9\n    if n == 4:\n        return 10\n    if p == 4:\n        return 11\n    if n == 5:\n        return 12\n    if p == 5:\n        return 13\n    if n == 6:\n        return 14\n    if p == 6:\n        return 15\n    if n == 7:\n        return 16\n    if p == 7:\n        return 17\n    if n == 8:\n        return 18\n    if p == 8:\n        return 19\n    if n == 9:\n        return 20\n    if p == 9:\n        return 21\n    if n == 10:\n        return 22\n    if p == 10:\n        return 23\n    if n == 11:\n        return 24\n    if p == 11:\n        return 25\n    if n == 12:\n        return 26\n    if p == 12:\n        return 27\n    if n == 13:\n        return 28\n    if p == 13:\n        return 29\n    if n == 14:\n        return 30\n    if p == 14:\n        return 31\n    if n == 15:\n        return 32\n    if p == 15:\n        return 33", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 2:\n        return n\n    if p < 1:\n        return n\n    if n < 3:\n        return n\n    if p < 2:\n        return n\n    if n < 4:\n        return n\n    if p < 3:\n        return n\n    if n < 5:\n        return n\n    if p < 6:\n        return n\n    if n < 7:\n        return n\n    if p < 8:\n        return n\n    if p < 9:\n        return n\n    if n < 10:\n        return n\n    if p < 11:\n        return n\n    if p < 12:\n        return n\n    if p < 13:\n        return n\n    if p < 14:\n        return n\n    if p < 15:\n        return n\n    if p < 16:\n        return n\n    if p < 17:\n        return n\n    if p < 18:\n        return n\n    if p < 19:\n        return n\n    if p < 20:\n        return n\n    if p < 21:\n        return n\n    if p < 22:\n        return n\n    if p < 23:\n        return n\n    if p < 24:\n        return n\n    if p < 25:\n        return n\n    if p < 26:\n        return n\n    if p < 27:\n        return n\n    if p < 28:\n        return n\n    if p < 29:\n        return n\n    if", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n * p) % (n * p) + (n * p) % (n * p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 2:\n        return n\n    if p < 2:\n        return p\n    if n == 1:\n        return modp(n, p)\n    if p == 1:\n        return modp(n, p)\n    if n == 2:\n        return modp(n, p)\n    if n == 3:\n        return modp(n, p)\n    if p == 3:\n        return modp(n, p)\n    if n == 4:\n        return modp(n, p)\n    if p == 4:\n        return modp(n, p)\n    if n == 5:\n        return modp(n, p)\n    if p == 5:\n        return modp(n, p)\n    if n == 6:\n        return modp(n, p)\n    if p == 6:\n        return modp(n, p)\n    if n == 7:\n        return modp(n, p)\n    if p == 7:\n        return modp(n, p)\n    if n == 8:\n        return modp(n, p)\n    if p == 8:\n        return modp(n, p)\n    if n == 9:\n        return modp(n, p)\n    if p == 9:\n        return modp(n, p)\n    if n == 10:\n        return modp(n, p)\n    if p == 10:", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 0:\n        return 2\n    if n == 1:\n        return 3\n    if p == 1:\n        return 4\n    if n == 2:\n        return 5\n    if p == 2:\n        return 6\n    if n == 3:\n        return 7\n    if p == 3:\n        return 8\n    if n == 4:\n        return 9\n    if p == 4:\n        return 10\n    if n == 5:\n        return 11\n    if p == 5:\n        return 12\n    if n == 6:\n        return 13\n    if p == 6:\n        return 14\n    if n == 7:\n        return 15\n    if p == 7:\n        return 16\n    if n == 8:\n        return 17\n    if p == 8:\n        return 18\n    if n == 9:\n        return 19\n    if p == 9:\n        return 20\n    if n == 10:\n        return 21\n    if p == 10:\n        return 22\n    if n == 11:\n        return 23\n    if p == 11:\n        return 24\n    if n == 12:\n        return 25\n    if p == 12:\n        return 26\n    if n == 13:\n        return 27\n    if p == 13:\n        return 28\n    if n == 14:\n        return 29\n    if p == 14:\n        return 30\n    if n == 15:\n        return 31\n    if p == 15:\n        return 32", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return 0\n    if n % 2 == 0:\n        return 1\n    if n % 3 == 0:\n        return 2\n    if n % 4 == 0:\n        return 3\n    if n % 5 == 0:\n        return 4\n    if n % 6 == 0:\n        return 5\n    if n % 7 == 0:\n        return 6\n    if n % 8 == 0:\n        return 7\n    if n % 9 == 0:\n        return 8\n    if n % 10 == 0:\n        return 9\n    if n % 11 == 0:\n        return 10\n    if n % 12 == 0:\n        return 11\n    if n % 13 == 0:\n        return 12\n    if n % 14 == 0:\n        return 13\n    if n % 15 == 0:\n        return 14\n    if n % 16 == 0:\n        return 15\n    if n % 17 == 0:\n        return 16\n    if n % 18 == 0:\n        return 17\n    if n % 19 == 0:\n        return 18\n    if n % 20 == 0:\n        return 19\n    if n % 21 == 0:\n        return 20\n    if n % 22 == 0:\n        return 21\n    if n % 23 == 0:\n        return 22\n    if n % 24 == 0:\n        return 23\n    if n % 25 == 0:\n        return 24\n    if n % 26 == 0:", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"modp() requires a positive integer\")\n    if p < 1:\n        raise ValueError(\"modp() requires a positive integer\")\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if p < 1:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if n == 1:\n        return 2\n    if p == 1:\n        return 1\n    if n == 2:\n        return 0\n    if p == 2:\n        return 1\n    if n == 3:\n        return 0\n    if p == 3:\n        return 1\n    if n == 4:\n        return 0\n    if p == 4:\n        return 1\n    if n == 5:\n        return 0\n    if p == 5:\n        return 1\n    if n == 6:\n        return 0\n    if p == 6:\n        return 1\n    if n == 7:\n        return 0\n    if p == 7:\n        return 1\n    if n == 8:\n        return 0\n    if p == 8:\n        return 1\n    if n == 9:\n        return 0\n    if p == 9:\n        return 1\n    if n == 10:\n        return 0\n    if p == 10:\n        return 1\n    if n == 11:\n        return 0\n    if p == 11:\n        return 1\n    if n == 12:\n        return 0\n    if p == 12:\n        return 1\n    if n == 13:\n        return 0\n    if p == 13:\n        return 1\n    if n == 14:", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    if p == 0:\n        return 1\n    if n == 1:\n        return 0\n    if p == 1:\n        return 0\n    if n == 2:\n        return 0\n    if p == 2:\n        return 0\n    if n == 3:\n        return 0\n    if p == 3:\n        return 0\n    if n == 4:\n        return 0\n    if p == 4:\n        return 0\n    if n == 5:\n        return 0\n    if p == 5:\n        return 0\n    if n == 6:\n        return 0\n    if p == 6:\n        return 0\n    if n == 7:\n        return 0\n    if p == 7:\n        return 0\n    if n == 8:\n        return 0\n    if p == 8:\n        return 0\n    if n == 9:\n        return 0\n    if p == 9:\n        return 0\n    if n == 10:\n        return 0\n    if p == 10:\n        return 0\n    if n == 11:\n        return 0\n    if p == 11:\n        return 0\n    if n == 12:\n        return 0\n    if p == 12:\n        return 0\n    if n == 13:\n        return 0\n    if p == 13:\n        return 0\n    if n == 14:\n        return 0\n    if p == 14:\n        return 0\n    if n == 15:\n        return 0\n    if p == 15:\n        return 0", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return n\n    if p < 1:\n        return p\n    if n == 1:\n        return modp(n, p)\n    if p == 1:\n        return modp(n, p)\n    if n == 2:\n        return modp(n, p)\n    if p == 2:\n        return modp(n, p)\n    if n == 3:\n        return modp(n, p)\n    if p == 3:\n        return modp(n, p)\n    if n == 4:\n        return modp(n, p)\n    if p == 4:\n        return modp(n, p)\n    if n == 5:\n        return modp(n, p)\n    if p == 5:\n        return modp(n, p)\n    if n == 6:\n        return modp(n, p)\n    if p == 6:\n        return modp(n, p)\n    if n == 7:\n        return modp(n, p)\n    if p == 7:\n        return modp(n, p)\n    if n == 8:\n        return modp(n, p)\n    if p == 8:\n        return modp(n, p)\n    if n == 9:\n        return modp(n, p)\n    if p == 9:\n        return modp(n, p)\n    if n == 10:", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 6\n    elif n == 6:\n        return 7\n    elif n == 7:\n        return 8\n    elif n == 8:\n        return 9\n    elif n == 9:\n        return 10\n    elif n == 10:\n        return 11\n    elif n == 11:\n        return 12\n    elif n == 12:\n        return 13\n    elif n == 13:\n        return 14\n    elif n == 14:\n        return 15\n    elif n == 15:\n        return 16\n    elif n == 16:\n        return 17\n    elif n == 17:\n        return 18\n    elif n == 18:\n        return 19\n    elif n == 19:\n        return 20\n    elif n == 20:\n        return 21\n    elif n == 21:\n        return 22\n    elif n == 22:\n        return 23\n    elif n == 23:\n        return 24\n    elif n == 24:\n        return 25\n    elif n == 25:\n        return 26\n    elif n == 26:\n        return 27\n    elif n == 27:\n        return 28\n    elif n == 28:\n        return 29\n    elif n == 29:\n        return 30\n    elif n == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if p < 1:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if n % p == 0:\n        return n % p\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    if p == 0:\n        return 1\n    if n == 1:\n        return 0\n    if p == 1:\n        return 0\n    if n == 2:\n        return 1\n    if p == 2:\n        return 0\n    if n == 3:\n        return 0\n    if p == 3:\n        return 0\n    if n == 4:\n        return 0\n    if p == 4:\n        return 0\n    if n == 5:\n        return 0\n    if p == 5:\n        return 0\n    if n == 6:\n        return 0\n    if p == 6:\n        return 0\n    if n == 7:\n        return 0\n    if p == 7:\n        return 0\n    if n == 8:\n        return 0\n    if p == 8:\n        return 0\n    if n == 9:\n        return 0\n    if p == 9:\n        return 0\n    if n == 10:\n        return 0\n    if p == 10:\n        return 0\n    if n == 11:\n        return 0\n    if p == 11:\n        return 0\n    if n == 12:\n        return 0\n    if p == 12:\n        return 0\n    if n == 13:\n        return 0\n    if p == 13:\n        return 0\n    if n == 14:\n        return 0\n    if p == 14:\n        return 0\n    if n == 15:\n        return 0\n    if p == 15:\n        return 0", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return 2**n\n    if n > 1:\n        return 2**(n - 1)\n    if p < 1:\n        return 2**(n - 1)\n    if p > 1:\n        return 2**(n - 1)\n    if n < 2:\n        return 2**(n - 1)\n    if n > 2:\n        return 2**(n - 1)\n    if p < 3:\n        return 2**(n - 1)\n    if p > 3:\n        return 2**(n - 1)\n    if n < 4:\n        return 2**(n - 1)\n    if n > 4:\n        return 2**(n - 1)\n    if n < 5:\n        return 2**(n - 1)\n    if n > 5:\n        return 2**(n - 1)\n    if n < 6:\n        return 2**(n - 1)\n    if n > 6:\n        return 2**(n - 1)\n    if n < 7:\n        return 2**(n - 1)\n    if n > 7:\n        return 2**(n - 1)\n    if n < 8:\n        return 2**(n - 1)\n    if n > 8:\n        return 2**(n - 1)\n    if n < 9:\n        return 2**(n - 1)\n    if n < 10:\n        return 2**(n -", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 6\n    elif n == 6:\n        return 7\n    elif n == 7:\n        return 8\n    elif n == 8:\n        return 9\n    elif n == 9:\n        return 10\n    elif n == 10:\n        return 11\n    elif n == 11:\n        return 12\n    elif n == 12:\n        return 13\n    elif n == 13:\n        return 14\n    elif n == 14:\n        return 15\n    elif n == 15:\n        return 16\n    elif n == 16:\n        return 17\n    elif n == 17:\n        return 18\n    elif n == 18:\n        return 19\n    elif n == 19:\n        return 20\n    elif n == 20:\n        return 21\n    elif n == 21:\n        return 22\n    elif n == 22:\n        return 23\n    elif n == 23:\n        return 24\n    elif n == 24:\n        return 25\n    elif n == 25:\n        return 26\n    elif n == 26:\n        return 27\n    elif n == 27:\n        return 28\n    elif n == 28:\n        return 29\n    elif n == 29:\n        return 30\n    elif n == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 2:\n        return n * p\n    else:\n        return n * p + (n - 1) * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"modp() requires a positive integer\")\n    if p < 1:\n        raise ValueError(\"modp() requires a positive integer\")\n    if n % p == 0:\n        return n % p\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if p < 1:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if n % p == 0:\n        return n % p\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"modp() requires a positive integer.\")\n    if p < 1:\n        raise ValueError(\"modp() requires a positive integer.\")\n    if n == 1:\n        return 2\n    if p == 1:\n        return 1\n    if n == 2:\n        return 0\n    if p == 2:\n        return 1\n    if n == 3:\n        return 0\n    if p == 3:\n        return 1\n    if n == 4:\n        return 0\n    if p == 4:\n        return 1\n    if n == 5:\n        return 0\n    if p == 5:\n        return 1\n    if n == 6:\n        return 0\n    if p == 6:\n        return 1\n    if n == 7:\n        return 0\n    if p == 7:\n        return 1\n    if n == 8:\n        return 0\n    if p == 8:\n        return 1\n    if n == 9:\n        return 0\n    if p == 9:\n        return 1\n    if n == 10:\n        return 0\n    if p == 10:\n        return 1\n    if n == 11:\n        return 0\n    if p == 11:\n        return 1\n    if n == 12:\n        return 0\n    if p == 12:\n        return 1\n    if n == 13:\n        return 0\n    if p == 13:\n        return 1\n    if n == 14:\n        return 0\n    if", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if p < 1:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    if n == 1:\n        return 2\n    if n == 2:\n        return 2\n    if n == 3:\n        return 2\n    if n == 4:\n        return 2\n    if n == 5:\n        return 2\n    if n == 6:\n        return 2\n    if n == 7:\n        return 2\n    if n == 8:\n        return 2\n    if n == 9:\n        return 2\n    if n == 10:\n        return 2\n    if n == 11:\n        return 2\n    if n == 12:\n        return 2\n    if n == 13:\n        return 2\n    if n == 14:\n        return 2\n    if n == 15:\n        return 2\n    if n == 16:\n        return 2\n    if n == 17:\n        return 2\n    if n == 18:\n        return 2\n    if n == 19:\n        return 2\n    if n == 20:\n        return 2\n    if n == 21:\n        return 2\n    if n == 22:\n        return 2\n    if n == 23:\n        return 2\n    if n == 24:\n        return 2\n    if n == 25:\n        return 2\n    if n == 26:\n        return 2\n    if n == 27:\n        return 2\n    if n == 28:\n        return 2\n    if n == 29:\n        return 2\n    if n == 30:\n        return 2", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if p < 1:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n * p) % 2", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return n\n    if p < 1:\n        return p\n    if n % 2 == 0:\n        return n % 2\n    if p % 2 == 0:\n        return p % 2\n    if n % 2 == 0:\n        return n % 2\n    if n % 2 == 0:\n        return n % 2\n    if n % 2 == 0:\n        return n % 2\n    if n % 2 == 0:\n        return n % 2\n    if n % 2 == 0:\n        return n % 2\n    if n % 2 == 0:\n        return n % 2\n    if n % 2 == 0:\n        return n % 2\n    if n % 2 == 0:\n        return n % 2\n    if n % 2 == 0:\n        return n % 2\n    if n % 2 == 0:\n        return n % 2\n    if n % 2 == 0:\n        return n % 2\n    if n % 2 == 0:\n        return n % 2\n    if n % 2 == 0:\n        return n % 2\n    if n % 2 == 0:\n        return n % 2\n    if n % 2 == 0:\n        return n % 2\n    if n % 2 == 0:\n        return n % 2\n    if n % 2 == 0:\n        return n % 2\n    if n % 2 == 0:\n        return n % 2", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    if p == 0:\n        return 1\n    if n == 1:\n        return 0\n    if p == 1:\n        return 0\n    if n == 2:\n        return 1\n    if p == 2:\n        return 0\n    if n == 3:\n        return 1\n    if p == 3:\n        return 0\n    if n == 4:\n        return 1\n    if p == 4:\n        return 0\n    if n == 5:\n        return 1\n    if p == 5:\n        return 0\n    if n == 6:\n        return 1\n    if p == 6:\n        return 0\n    if n == 7:\n        return 1\n    if p == 7:\n        return 0\n    if n == 8:\n        return 1\n    if p == 8:\n        return 0\n    if n == 9:\n        return 1\n    if p == 9:\n        return 0\n    if n == 10:\n        return 1\n    if p == 10:\n        return 0\n    if n == 11:\n        return 1\n    if p == 11:\n        return 0\n    if n == 12:\n        return 1\n    if p == 12:\n        return 0\n    if n == 13:\n        return 1\n    if p == 13:\n        return 0\n    if n == 14:\n        return 1\n    if p == 14:\n        return 0\n    if n == 15:\n        return 1\n    if p == 15:\n        return 0", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"modp() must be called with a positive integer.\")\n    if p < 1:\n        raise ValueError(\"modp() must be called with a positive integer.\")\n    if n == 1:\n        return 2\n    if p == 1:\n        return 1\n    if n == 2:\n        return 0\n    if p == 2:\n        return -1\n    if n == 3:\n        return 0\n    if p == 3:\n        return 1\n    if n == 4:\n        return -1\n    if n == 5:\n        return -1\n    if p == 5:\n        return 1\n    if n == 6:\n        return 1\n    if p == 6:\n        return -1\n    if n == 7:\n        return 1\n    if p == 7:\n        return -1\n    if n == 8:\n        return -1\n    if p == 8:\n        return -1\n    if n == 9:\n        return -1\n    if p == 9:\n        return -1\n    if n == 10:\n        return -1\n    if p == 10:\n        return -1\n    if n == 11:\n        return -1\n    if p == 11:\n        return -1\n    if n == 12:\n        return -1\n    if p == 12:\n        return -1\n    if n == 13:\n        return -1\n    if p == 13:\n        return -1\n    if n == 14:\n        return -1\n    if p ==", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return 0\n    if p < 1:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError('invalid modp() function')\n    if p < 1:\n        raise ValueError('invalid modp() function')\n    if n % p == 0:\n        return modp(n, p)\n    if n % p == 1:\n        return modp(n, p)\n    if n % p == 2:\n        return modp(n, p)\n    if n % p == 3:\n        return modp(n, p)\n    if n % p == 4:\n        return modp(n, p)\n    if n % p == 5:\n        return modp(n, p)\n    if n % p == 6:\n        return modp(n, p)\n    if n % p == 7:\n        return modp(n, p)\n    if n % p == 8:\n        return modp(n, p)\n    if n % p == 9:\n        return modp(n, p)\n    if n % p == 10:\n        return modp(n, p)\n    if n % p == 11:\n        return modp(n, p)\n    if n % p == 12:\n        return modp(n, p)\n    if n % p == 13:\n        return modp(n, p)\n    if n % p == 14:\n        return modp(n,", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    if n % 2 == 0:\n        return 1\n    if n % 4 == 0:\n        return 0\n    if n % 8 == 0:\n        return 0\n    if n % 16 == 0:\n        return 0\n    if n % 32 == 0:\n        return 0\n    if n % 64 == 0:\n        return 0\n    if n % 128 == 0:\n        return 0\n    if n % 256 == 0:\n        return 0\n    if n % 512 == 0:\n        return 0\n    if n % 1024 == 0:\n        return 0\n    if n % 2048 == 0:\n        return 0\n    if n % 2**32 == 0:\n        return 0\n    if n % 2**64 == 0:\n        return 0\n    if n % 2**128 == 0:\n        return 0\n    if n % 2**256 == 0:\n        return 0\n    if n % 2**512 == 0:\n        return 0\n    if n % 2**1024 == 0:\n        return 0\n    if n % 2**2048 == 0:\n        return 0\n    if n % 2**32**64 == 0:\n        return 0\n    if n % 2**32**128 == 0:\n        return 0\n    if n % 2**32**256 == 0:\n        return 0\n    if n % 2**32**512 == 0:", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return 2**n\n    elif n == 1:\n        return 1**n\n    elif n == 2:\n        return 1**n\n    elif n == 3:\n        return 1**n\n    elif n == 4:\n        return 1**n\n    elif n == 5:\n        return 1**n\n    elif n == 6:\n        return 1**n\n    elif n == 7:\n        return 1**n\n    elif n == 8:\n        return 1**n\n    elif n == 9:\n        return 1**n\n    elif n == 10:\n        return 1**n\n    elif n == 11:\n        return 1**n\n    elif n == 12:\n        return 1**n\n    elif n == 13:\n        return 1**n\n    elif n == 14:\n        return 1**n\n    elif n == 15:\n        return 1**n\n    elif n == 16:\n        return 1**n\n    elif n == 17:\n        return 1**n\n    elif n == 18:\n        return 1**n\n    elif n == 19:\n        return 1**n\n    elif n == 20:\n        return 1**n\n    elif n == 21:\n        return 1**n\n    elif n == 22:\n        return 1**n\n    elif n == 23:\n        return 1**n\n    elif n == 24:\n        return 1**n\n    elif n == 25", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return n\n    if p < 1:\n        return p\n    if n % p == 0:\n        return n % p\n    if n % p == 1:\n        return n % p\n    if n % p == 2:\n        return n % p\n    if n % p == 3:\n        return n % p\n    if n % p == 4:\n        return n % p\n    if n % p == 5:\n        return n % p\n    if n % p == 6:\n        return n % p\n    if n % p == 7:\n        return n % p\n    if n % p == 8:\n        return n % p\n    if n % p == 9:\n        return n % p\n    if n % p == 10:\n        return n % p\n    if n % p == 11:\n        return n % p\n    if n % p == 12:\n        return n % p\n    if n % p == 13:\n        return n % p\n    if n % p == 14:\n        return n % p\n    if n % p == 15:\n        return n % p\n    if n % p == 16:\n        return n % p\n    if n % p == 17:\n        return n % p\n    if n % p == 18:\n        return n % p\n    if n % p == 19:\n        return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"modp() expects a positive integer\")\n    if p < 1:\n        raise ValueError(\"modp() expects a positive integer\")\n    if n % p == 0:\n        return n % p\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) % 2", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 6\n    elif n == 6:\n        return 7\n    elif n == 7:\n        return 8\n    elif n == 8:\n        return 9\n    elif n == 9:\n        return 10\n    elif n == 10:\n        return 11\n    elif n == 11:\n        return 12\n    elif n == 12:\n        return 13\n    elif n == 13:\n        return 14\n    elif n == 14:\n        return 15\n    elif n == 15:\n        return 16\n    elif n == 16:\n        return 17\n    elif n == 17:\n        return 18\n    elif n == 18:\n        return 19\n    elif n == 19:\n        return 20\n    elif n == 20:\n        return 21\n    elif n == 21:\n        return 22\n    elif n == 22:\n        return 23\n    elif n == 23:\n        return 24\n    elif n == 24:\n        return 25\n    elif n == 25:\n        return 26\n    elif n == 26:\n        return 27\n    elif n == 27:\n        return 28\n    elif n == 28:\n        return 29\n    elif n == 29:\n        return 30\n    elif n == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 2:\n        return modp(n, p)\n    if n > 2:\n        return modp(n, p)\n    if p < 0:\n        return modp(n, p)\n    if p > 1:\n        return modp(n, p)\n    if n == 0:\n        return modp(n, p)\n    if n == 1:\n        return modp(n, p)\n    if n == 2:\n        return modp(n, p)\n    if n == 3:\n        return modp(n, p)\n    if n == 4:\n        return modp(n, p)\n    if n == 5:\n        return modp(n, p)\n    if n == 6:\n        return modp(n, p)\n    if n == 7:\n        return modp(n, p)\n    if n == 8:\n        return modp(n, p)\n    if n == 9:\n        return modp(n, p)\n    if n == 10:\n        return modp(n, p)\n    if n == 11:\n        return modp(n, p)\n    if n == 12:\n        return modp(n, p)\n    if n == 13:\n        return modp(n, p)\n    if n == 14:\n        return modp(n, p)\n    if n == 15:\n        return modp", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return 2**n\n    if n == 1:\n        return 1**n\n    if n == 2:\n        return 2**n**(n - 1)\n    if n == 3:\n        return 2**n**(n - 1**(n - 1))\n    if n == 4:\n        return 2**n**(n - 1**(n - 1**(n - 1)))\n    if n == 5:\n        return 2**n**(n - 1**(n - 1**(n - 1**(n - 1**(n - 1**(n - 1**(n - 1**(n - 1**(n - 1**(n - 1**(n - 1**(n - 1**(n - 1**(n - 1**(n - 1**(n - 1**(n - 1**(n - 1**(n - 1**(n - 1**(n - 1**(n - 1**(n - 1**(n - 1**(n - 1**(n - 1**(n - 1**(n - 1**(n - 1**(n - 1**(n - 1**(n - 1**(n - 1**", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    if p == 0:\n        return 1\n    if n < 0:\n        return 0\n    if p < 0:\n        return -1\n    if n > 0:\n        return 1\n    if p > 0:\n        return -1\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n < 0:\n        return -1\n    if p < 0:\n        return 0\n    if n > 0:\n        return 0\n    if p > 0:\n        return -1\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n < 0:\n        return -1\n    if p < 0:\n        return 0\n    if n > 0:\n        return 1\n    if p > 0:\n        return -1\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n < 0:\n        return -1\n    if p < 0:\n        return 0\n    if n > 0:\n        return 1\n    if p > 0:\n        return -1\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n < 0:\n        return -1\n    if p < 0:\n        return -1\n    if n > 0:\n        return 1\n    if p > 0:\n        return -1\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 2:\n        return modp(n, p)\n    elif n == 1:\n        return modp(n, p)\n    elif n == 2:\n        return modp(n, p)\n    elif n == 3:\n        return modp(n, p)\n    elif n == 4:\n        return modp(n, p)\n    elif n == 5:\n        return modp(n, p)\n    elif n == 6:\n        return modp(n, p)\n    elif n == 7:\n        return modp(n, p)\n    elif n == 8:\n        return modp(n, p)\n    elif n == 9:\n        return modp(n, p)\n    elif n == 10:\n        return modp(n, p)\n    elif n == 11:\n        return modp(n, p)\n    elif n == 12:\n        return modp(n, p)\n    elif n == 13:\n        return modp(n, p)\n    elif n == 14:\n        return modp(n, p)\n    elif n == 15:\n        return modp(n, p)\n    elif n == 16:\n        return modp(n, p)\n    elif n == 17:\n        return modp(n, p)\n    elif n == 18:\n        return modp(n, p)\n    elif n == 19:\n        return modp", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    if p == 0:\n        return 1\n    if n == 1:\n        return 0\n    if p == 1:\n        return 1\n    if n == 2:\n        return 0\n    if p == 2:\n        return 1\n    if n == 3:\n        return 0\n    if p == 3:\n        return 1\n    if n == 4:\n        return 0\n    if p == 4:\n        return 1\n    if n == 5:\n        return 0\n    if p == 5:\n        return 1\n    if n == 6:\n        return 0\n    if p == 6:\n        return 1\n    if n == 7:\n        return 0\n    if p == 7:\n        return 1\n    if n == 8:\n        return 0\n    if p == 8:\n        return 1\n    if n == 9:\n        return 0\n    if p == 9:\n        return 1\n    if n == 10:\n        return 0\n    if p == 10:\n        return 1\n    if n == 11:\n        return 0\n    if p == 11:\n        return 1\n    if n == 12:\n        return 0\n    if p == 12:\n        return 1\n    if n == 13:\n        return 0\n    if p == 13:\n        return 1\n    if n == 14:\n        return 0\n    if p == 14:\n        return 1\n    if n == 15:\n        return 0\n    if p == 15:\n        return 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 2:\n        return n\n    if p < 1:\n        return n\n    if n == 1:\n        return n\n    if p == 1:\n        return n\n    if n == 2:\n        return n\n    if p == 2:\n        return n\n    if n == 3:\n        return n\n    if p == 3:\n        return n\n    if n == 4:\n        return n\n    if p == 4:\n        return n\n    if n == 5:\n        return n\n    if p == 5:\n        return n\n    if n == 6:\n        return n\n    if p == 6:\n        return n\n    if n == 7:\n        return n\n    if p == 7:\n        return n\n    if n == 8:\n        return n\n    if p == 8:\n        return n\n    if n == 9:\n        return n\n    if p == 9:\n        return n\n    if n == 10:\n        return n\n    if p == 10:\n        return n\n    if n == 11:\n        return n\n    if p == 11:\n        return n\n    if n == 12:\n        return n\n    if p == 12:\n        return n\n    if n == 13:\n        return n\n    if p == 13:\n        return n\n    if n == 14:\n        return n\n    if p == 14:\n        return n\n    if n == 15:\n        return n\n    if p == 15:\n        return n", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"modp() expects a positive integer\")\n    if p < 2:\n        raise ValueError(\"modp() expects a positive integer\")\n    return n * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"modp() requires a positive integer.\")\n    if p < 1:\n        raise ValueError(\"modp() requires a positive integer.\")\n    if n % p == 0:\n        return n % p\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"modp() expects a positive integer.\")\n    if p < 1:\n        raise ValueError(\"modp() expects a positive integer.\")\n    return n * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return n\n    if p < 1:\n        return p\n    if n % 2 == 0:\n        return n % 2\n    if p % 2 == 0:\n        return p % 2\n    if n % 2 == 1:\n        return n % 2\n    if p % 2 == 1:\n        return p % 2\n    if n % 2 == 1:\n        return n % 2\n    if n % 2 == 1:\n        return n % 2\n    if n % 2 == 1:\n        return n % 2\n    if n % 2 == 1:\n        return n % 2\n    if n % 2 == 1:\n        return n % 2\n    if n % 2 == 1:\n        return n % 2\n    if n % 2 == 1:\n        return n % 2\n    if n % 2 == 1:\n        return n % 2\n    if n % 2 == 1:\n        return n % 2\n    if n % 2 == 1:\n        return n % 2\n    if n % 2 == 1:\n        return n % 2\n    if n % 2 == 1:\n        return n % 2\n    if n % 2 == 1:\n        return n % 2\n    if n % 2 == 1:\n        return n % 2\n    if n % 2 == 1:\n        return n % 2\n    if n % 2 == 1:\n        return n % 2", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return n\n    if p < 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if p == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if n == 1:\n        return n", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return 0\n    if p < 1:\n        return 1\n    if n % p == 0:\n        return 0\n    if n % p == 1:\n        return 1\n    if n % p == 2:\n        return 1\n    if n % p == 3:\n        return 1\n    if n % p == 4:\n        return 1\n    if n % p == 5:\n        return 1\n    if n % p == 6:\n        return 1\n    if n % p == 7:\n        return 1\n    if n % p == 8:\n        return 1\n    if n % p == 9:\n        return 1\n    if n % p == 10:\n        return 1\n    if n % p == 11:\n        return 1\n    if n % p == 12:\n        return 1\n    if n % p == 13:\n        return 1\n    if n % p == 14:\n        return 1\n    if n % p == 15:\n        return 1\n    if n % p == 16:\n        return 1\n    if n % p == 17:\n        return 1\n    if n % p == 18:\n        return 1\n    if n % p == 19:\n        return 1\n    if n % p == 20:\n        return 1\n    if n % p == 21:\n        return 1\n    if n % p == 22:\n        return 1\n    if n % p == 23:\n        return 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    if p == 0:\n        return 3\n    if n == 1:\n        return 4\n    if p == 1:\n        return 5\n    if n == 2:\n        return 6\n    if p == 2:\n        return 7\n    if n == 3:\n        return 8\n    if p == 3:\n        return 9\n    if n == 4:\n        return 10\n    if p == 4:\n        return 11\n    if n == 5:\n        return 12\n    if p == 5:\n        return 13\n    if n == 6:\n        return 14\n    if p == 6:\n        return 15\n    if n == 7:\n        return 16\n    if p == 7:\n        return 17\n    if n == 8:\n        return 18\n    if p == 8:\n        return 19\n    if n == 9:\n        return 20\n    if p == 9:\n        return 21\n    if n == 10:\n        return 22\n    if p == 10:\n        return 23\n    if n == 11:\n        return 24\n    if p == 11:\n        return 25\n    if n == 12:\n        return 26\n    if p == 12:\n        return 27\n    if n == 13:\n        return 28\n    if p == 13:\n        return 29\n    if n == 14:\n        return 30\n    if p == 14:\n        return 31\n    if n == 15:\n        return 32\n    if p == 15:\n        return 33", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if p < 1:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if n % p == 0:\n        return n % p\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return 0\n    if p < 1:\n        return 1\n    if n % p == 0:\n        return 0\n    if n % p == 1:\n        return 1\n    if n % p == 2:\n        return 1\n    if n % p == 3:\n        return 1\n    if n % p == 4:\n        return 1\n    if n % p == 5:\n        return 1\n    if n % p == 6:\n        return 1\n    if n % p == 7:\n        return 1\n    if n % p == 8:\n        return 1\n    if n % p == 9:\n        return 1\n    if n % p == 10:\n        return 1\n    if n % p == 11:\n        return 1\n    if n % p == 12:\n        return 1\n    if n % p == 13:\n        return 1\n    if n % p == 14:\n        return 1\n    if n % p == 15:\n        return 1\n    if n % p == 16:\n        return 1\n    if n % p == 17:\n        return 1\n    if n % p == 18:\n        return 1\n    if n % p == 19:\n        return 1\n    if n % p == 20:\n        return 1\n    if n % p == 21:\n        return 1\n    if n % p == 22:\n        return 1\n    if n % p == 23:\n        return 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return 0\n    if p < 1:\n        return 1\n    if n > 1:\n        return -1\n    if p > 1:\n        return -1\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return 2\n    if p < 1:\n        return 3\n    if n == 1:\n        return 1\n    if p == 1:\n        return 0\n    if n == 2:\n        return 0\n    if p == 2:\n        return 1\n    if n == 3:\n        return 0\n    if p == 3:\n        return 1\n    if n == 4:\n        return 0\n    if p == 4:\n        return 1\n    if n == 5:\n        return 0\n    if p == 5:\n        return 1\n    if n == 6:\n        return 0\n    if p == 6:\n        return 1\n    if n == 7:\n        return 0\n    if p == 7:\n        return 1\n    if n == 8:\n        return 0\n    if p == 8:\n        return 1\n    if n == 9:\n        return 0\n    if p == 9:\n        return 1\n    if n == 10:\n        return 0\n    if p == 10:\n        return 1\n    if n == 11:\n        return 0\n    if p == 11:\n        return 1\n    if n == 12:\n        return 0\n    if p == 12:\n        return 1\n    if n == 13:\n        return 0\n    if p == 13:\n        return 1\n    if n == 14:\n        return 0\n    if p == 14:\n        return 1\n    if n == 15:\n        return 0\n    if p == 15:\n        return 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 6\n    elif n == 6:\n        return 7\n    elif n == 7:\n        return 8\n    elif n == 8:\n        return 9\n    elif n == 9:\n        return 10\n    elif n == 10:\n        return 11\n    elif n == 11:\n        return 12\n    elif n == 12:\n        return 13\n    elif n == 13:\n        return 14\n    elif n == 14:\n        return 15\n    elif n == 15:\n        return 16\n    elif n == 16:\n        return 17\n    elif n == 17:\n        return 18\n    elif n == 18:\n        return 19\n    elif n == 19:\n        return 20\n    elif n == 20:\n        return 21\n    elif n == 21:\n        return 22\n    elif n == 22:\n        return 23\n    elif n == 23:\n        return 24\n    elif n == 24:\n        return 25\n    elif n == 25:\n        return 26\n    elif n == 26:\n        return 27\n    elif n == 27:\n        return 28\n    elif n == 28:\n        return 29\n    elif n == 29:\n        return 30\n    elif n == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"invalid number\")\n    if p < 1:\n        raise ValueError(\"invalid number\")\n    if n % p == 0:\n        return n % p\n    if n % p == 1:\n        return n % p\n    if n % p == 2:\n        return n % p\n    if n % p == 3:\n        return n % p\n    if n % p == 4:\n        return n % p\n    if n % p == 5:\n        return n % p\n    if n % p == 6:\n        return n % p\n    if n % p == 7:\n        return n % p\n    if n % p == 8:\n        return n % p\n    if n % p == 9:\n        return n % p\n    if n % p == 10:\n        return n % p\n    if n % p == 11:\n        return n % p\n    if n % p == 12:\n        return n % p\n    if n % p == 13:\n        return n % p\n    if n % p == 14:\n        return n % p\n    if n % p == 15:\n        return n % p\n    if n % p == 16:\n        return n % p\n    if n % p == 17:\n        return n % p\n    if n % p == 18:\n        return n % p\n    if", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    if p == 0:\n        return 1\n    if n == 1:\n        return 0\n    if p == 1:\n        return 0\n    if n == 2:\n        return 0\n    if p == 2:\n        return 0\n    if n == 3:\n        return 0\n    if p == 3:\n        return 0\n    if n == 4:\n        return 0\n    if p == 4:\n        return 0\n    if n == 5:\n        return 0\n    if p == 5:\n        return 0\n    if n == 6:\n        return 0\n    if p == 6:\n        return 0\n    if n == 7:\n        return 0\n    if p == 7:\n        return 0\n    if n == 8:\n        return 0\n    if p == 8:\n        return 0\n    if n == 9:\n        return 0\n    if p == 9:\n        return 0\n    if n == 10:\n        return 0\n    if p == 10:\n        return 0\n    if n == 11:\n        return 0\n    if p == 11:\n        return 0\n    if n == 12:\n        return 0\n    if p == 12:\n        return 0\n    if n == 13:\n        return 0\n    if p == 13:\n        return 0\n    if n == 14:\n        return 0\n    if p == 14:\n        return 0\n    if n == 15:\n        return 0\n    if p == 15:\n        return 0", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    if n == 1:\n        return 2\n    if n == 2:\n        return 2\n    if n == 3:\n        return 2\n    if n == 4:\n        return 2\n    if n == 5:\n        return 2\n    if n == 6:\n        return 2\n    if n == 7:\n        return 2\n    if n == 8:\n        return 2\n    if n == 9:\n        return 2\n    if n == 10:\n        return 2\n    if n == 11:\n        return 2\n    if n == 12:\n        return 2\n    if n == 13:\n        return 2\n    if n == 14:\n        return 2\n    if n == 15:\n        return 2\n    if n == 16:\n        return 2\n    if n == 17:\n        return 2\n    if n == 18:\n        return 2\n    if n == 19:\n        return 2\n    if n == 20:\n        return 2\n    if n == 21:\n        return 2\n    if n == 22:\n        return 2\n    if n == 23:\n        return 2\n    if n == 24:\n        return 2\n    if n == 25:\n        return 2\n    if n == 26:\n        return 2\n    if n == 27:\n        return 2\n    if n == 28:\n        return 2\n    if n == 29:\n        return 2\n    if n == 30:\n        return 2", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return n\n    if p < 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if p == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if p == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if p == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if p == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if p == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if p == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if p == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if p == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if p == 1:\n        return n * p\n    if n == 1:\n        return n * p\n    if p == 1:\n        return n * p\n    if n == 1:\n        return n", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 1\n    if n == 5:\n        return 1\n    if n == 6:\n        return 1\n    if n == 7:\n        return 1\n    if n == 8:\n        return 1\n    if n == 9:\n        return 1\n    if n == 10:\n        return 1\n    if n == 11:\n        return 1\n    if n == 12:\n        return 1\n    if n == 13:\n        return 1\n    if n == 14:\n        return 1\n    if n == 15:\n        return 1\n    if n == 16:\n        return 1\n    if n == 17:\n        return 1\n    if n == 18:\n        return 1\n    if n == 19:\n        return 1\n    if n == 20:\n        return 1\n    if n == 21:\n        return 1\n    if n == 22:\n        return 1\n    if n == 23:\n        return 1\n    if n == 24:\n        return 1\n    if n == 25:\n        return 1\n    if n == 26:\n        return 1\n    if n == 27:\n        return 1\n    if n == 28:\n        return 1\n    if n == 29:\n        return 1\n    if n == 30:\n        return 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 2:\n        return n\n    if p < 2:\n        return n + 1\n    if n % p == 0:\n        return n + 1\n    if n % p == 1:\n        return n + 1\n    if n % p == 2:\n        return n + 1\n    if n % p == 3:\n        return n + 1\n    if n % p == 4:\n        return n + 1\n    if n % p == 5:\n        return n + 1\n    if n % p == 6:\n        return n + 1\n    if n % p == 7:\n        return n + 1\n    if n % p == 8:\n        return n + 1\n    if n % p == 9:\n        return n + 1\n    if n % p == 10:\n        return n + 1\n    if n % p == 11:\n        return n + 1\n    if n % p == 12:\n        return n + 1\n    if n % p == 13:\n        return n + 1\n    if n % p == 14:\n        return n + 1\n    if n % p == 15:\n        return n + 1\n    if n % p == 16:\n        return n + 1\n    if n % p == 17:\n        return n + 1\n    if n % p == 18:\n        return n + 1\n    if n % p == 19:\n        return n", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n < 0:\n        return -1\n    if p < 0:\n        return 1\n    if n > 0:\n        return -1\n    if p > 0:\n        return 1\n    if n < 0:\n        return -1\n    if p > 0:\n        return -1\n    if n < 0:\n        return -1\n    if n < 0:\n        return -1\n    if p < 0:\n        return -1\n    if n < 0:\n        return -1\n    if p < 0:\n        return -1\n    if n < 0:\n        return -1\n    if p < 0:\n        return -1\n    if n < 0:\n        return -1\n    if p < 0:\n        return -1\n    if n < 0:\n        return -1\n    if p < 0:\n        return -1\n    if n < 0:\n        return -1\n    if p < 0:\n        return -1\n    if n < 0:\n        return -1\n    if p < 0:\n        return -1\n    if n < 0:\n        return -1\n    if p < 0:\n        return -1\n    if n < 0:\n        return -1\n    if p < 0:\n        return -1\n    if n < 0:\n        return -1\n    if p < 0:\n        return -1\n    if n < 0:\n        return -1\n    if p < 0:\n        return -1\n    if n < 0:\n        return -1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"modp() expects a positive integer\")\n    if p < 1:\n        raise ValueError(\"modp() expects a positive integer\")\n    return n * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return 2**n\n    elif n < 2:\n        return 2**n\n    elif n < 3:\n        return 2**n\n    elif n < 4:\n        return 2**n\n    elif n < 5:\n        return 2**n\n    elif n < 6:\n        return 2**n\n    elif n < 7:\n        return 2**n\n    elif n < 8:\n        return 2**n\n    elif n < 9:\n        return 2**n\n    elif n < 10:\n        return 2**n\n    elif n < 11:\n        return 2**n\n    elif n < 12:\n        return 2**n\n    elif n < 13:\n        return 2**n\n    elif n < 14:\n        return 2**n\n    elif n < 15:\n        return 2**n\n    elif n < 16:\n        return 2**n\n    elif n < 17:\n        return 2**n\n    elif n < 18:\n        return 2**n\n    elif n < 19:\n        return 2**n\n    elif n < 20:\n        return 2**n\n    elif n < 21:\n        return 2**n\n    elif n < 22:\n        return 2**n\n    elif n < 23:\n        return 2**n\n    elif n < 24:\n        return 2**n\n    elif n < 25:\n        return 2**n\n    elif n <", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return 2**n\n    if n == 1:\n        return 2**n\n    if n == 2:\n        return 2**n\n    if n == 3:\n        return 2**n\n    if n == 4:\n        return 2**n\n    if n == 5:\n        return 2**n\n    if n == 6:\n        return 2**n\n    if n == 7:\n        return 2**n\n    if n == 8:\n        return 2**n\n    if n == 9:\n        return 2**n\n    if n == 10:\n        return 2**n\n    if n == 11:\n        return 2**n\n    if n == 12:\n        return 2**n\n    if n == 13:\n        return 2**n\n    if n == 14:\n        return 2**n\n    if n == 15:\n        return 2**n\n    if n == 16:\n        return 2**n\n    if n == 17:\n        return 2**n\n    if n == 18:\n        return 2**n\n    if n == 19:\n        return 2**n\n    if n == 20:\n        return 2**n\n    if n == 21:\n        return 2**n\n    if n == 22:\n        return 2**n\n    if n == 23:\n        return 2**n\n    if n == 24:\n        return 2**n\n    if n == 25", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    if p == 0:\n        return 1\n    if n == 1:\n        return 0\n    if p == 1:\n        return 1\n    if n == 2:\n        return 0\n    if p == 2:\n        return 1\n    if n == 3:\n        return 0\n    if p == 3:\n        return 1\n    if n == 4:\n        return 0\n    if p == 4:\n        return 1\n    if n == 5:\n        return 0\n    if p == 5:\n        return 1\n    if n == 6:\n        return 0\n    if p == 6:\n        return 1\n    if n == 7:\n        return 0\n    if p == 7:\n        return 1\n    if n == 8:\n        return 0\n    if p == 8:\n        return 1\n    if n == 9:\n        return 0\n    if p == 9:\n        return 1\n    if n == 10:\n        return 0\n    if p == 10:\n        return 1\n    if n == 11:\n        return 0\n    if p == 11:\n        return 1\n    if n == 12:\n        return 0\n    if p == 12:\n        return 1\n    if n == 13:\n        return 0\n    if p == 13:\n        return 1\n    if n == 14:\n        return 0\n    if p == 14:\n        return 1\n    if n == 15:\n        return 0\n    if p == 15:\n        return 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 6\n    elif n == 6:\n        return 7\n    elif n == 7:\n        return 8\n    elif n == 8:\n        return 9\n    elif n == 9:\n        return 10\n    elif n == 10:\n        return 11\n    elif n == 11:\n        return 12\n    elif n == 12:\n        return 13\n    elif n == 13:\n        return 14\n    elif n == 14:\n        return 15\n    elif n == 15:\n        return 16\n    elif n == 16:\n        return 17\n    elif n == 17:\n        return 18\n    elif n == 18:\n        return 19\n    elif n == 19:\n        return 20\n    elif n == 20:\n        return 21\n    elif n == 21:\n        return 22\n    elif n == 22:\n        return 23\n    elif n == 23:\n        return 24\n    elif n == 24:\n        return 25\n    elif n == 25:\n        return 26\n    elif n == 26:\n        return 27\n    elif n == 27:\n        return 28\n    elif n == 28:\n        return 29\n    elif n == 29:\n        return 30\n    elif n == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    if n == 2:\n        return 0\n    if n == 3:\n        return 0\n    if n == 4:\n        return 0\n    if n == 5:\n        return 0\n    if n == 6:\n        return 0\n    if n == 7:\n        return 0\n    if n == 8:\n        return 0\n    if n == 9:\n        return 0\n    if n == 10:\n        return 0\n    if n == 11:\n        return 0\n    if n == 12:\n        return 0\n    if n == 13:\n        return 0\n    if n == 14:\n        return 0\n    if n == 15:\n        return 0\n    if n == 16:\n        return 0\n    if n == 17:\n        return 0\n    if n == 18:\n        return 0\n    if n == 19:\n        return 0\n    if n == 20:\n        return 0\n    if n == 21:\n        return 0\n    if n == 22:\n        return 0\n    if n == 23:\n        return 0\n    if n == 24:\n        return 0\n    if n == 25:\n        return 0\n    if n == 26:\n        return 0\n    if n == 27:\n        return 0\n    if n == 28:\n        return 0\n    if n == 29:\n        return 0\n    if n == 30:\n        return 0", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n < 0:\n        return -1\n    if p < 0:\n        return 1\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError('invalid number')\n    if p < 1:\n        raise ValueError('invalid number')\n    if n % p == 0:\n        return n % p\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        return 0\n    if p < 1:\n        return 1\n    if n % p == 0:\n        return 0\n    if n % p == 1:\n        return 1\n    if n % p == 2:\n        return 1\n    if n % p == 3:\n        return 1\n    if n % p == 4:\n        return 1\n    if n % p == 5:\n        return 1\n    if n % p == 6:\n        return 1\n    if n % p == 7:\n        return 1\n    if n % p == 8:\n        return 1\n    if n % p == 9:\n        return 1\n    if n % p == 10:\n        return 1\n    if n % p == 11:\n        return 1\n    if n % p == 12:\n        return 1\n    if n % p == 13:\n        return 1\n    if n % p == 14:\n        return 1\n    if n % p == 15:\n        return 1\n    if n % p == 16:\n        return 1\n    if n % p == 17:\n        return 1\n    if n % p == 18:\n        return 1\n    if n % p == 19:\n        return 1\n    if n % p == 20:\n        return 1\n    if n % p == 21:\n        return 1\n    if n % p == 22:\n        return 1\n    if n % p == 23:\n        return 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if p < 1:\n        raise ValueError(\"modp() must be called with a positive integer\")\n    if n % p == 0:\n        return n % p\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    if n == 1:\n        return 3\n    if n == 2:\n        return 4\n    if n == 3:\n        return 5\n    if n == 4:\n        return 6\n    if n == 5:\n        return 7\n    if n == 6:\n        return 8\n    if n == 7:\n        return 9\n    if n == 8:\n        return 10\n    if n == 9:\n        return 11\n    if n == 10:\n        return 12\n    if n == 11:\n        return 13\n    if n == 12:\n        return 14\n    if n == 13:\n        return 15\n    if n == 14:\n        return 16\n    if n == 15:\n        return 17\n    if n == 16:\n        return 18\n    if n == 17:\n        return 19\n    if n == 18:\n        return 20\n    if n == 19:\n        return 21\n    if n == 20:\n        return 22\n    if n == 21:\n        return 23\n    if n == 22:\n        return 24\n    if n == 23:\n        return 25\n    if n == 24:\n        return 26\n    if n == 25:\n        return 27\n    if n == 26:\n        return 28\n    if n == 27:\n        return 29\n    if n == 28:\n        return 30\n    if n == 29:\n        return 31\n    if n == 30:\n        return 32", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    if p == 0:\n        return 1\n    if n == 1:\n        return 0\n    if p == 1:\n        return 0\n    if n == 2:\n        return 0\n    if p == 2:\n        return 0\n    if n == 3:\n        return 0\n    if p == 3:\n        return 0\n    if n == 4:\n        return 0\n    if p == 4:\n        return 0\n    if n == 5:\n        return 0\n    if p == 5:\n        return 0\n    if n == 6:\n        return 0\n    if p == 6:\n        return 0\n    if n == 7:\n        return 0\n    if p == 7:\n        return 0\n    if n == 8:\n        return 0\n    if p == 8:\n        return 0\n    if n == 9:\n        return 0\n    if p == 9:\n        return 0\n    if n == 10:\n        return 0\n    if p == 10:\n        return 0\n    if n == 11:\n        return 0\n    if p == 11:\n        return 0\n    if n == 12:\n        return 0\n    if p == 12:\n        return 0\n    if n == 13:\n        return 0\n    if p == 13:\n        return 0\n    if n == 14:\n        return 0\n    if p == 14:\n        return 0\n    if n == 15:\n        return 0\n    if p == 15:\n        return 0", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    if n == 2:\n        return 0\n    if n == 3:\n        return 1\n    if n == 4:\n        return 0\n    if n == 5:\n        return 1\n    if n == 6:\n        return 0\n    if n == 7:\n        return 0\n    if n == 8:\n        return 1\n    if n == 9:\n        return 0\n    if n == 10:\n        return 1\n    if n == 11:\n        return 0\n    if n == 12:\n        return 1\n    if n == 13:\n        return 0\n    if n == 14:\n        return 1\n    if n == 15:\n        return 0\n    if n == 16:\n        return 1\n    if n == 17:\n        return 0\n    if n == 18:\n        return 1\n    if n == 19:\n        return 0\n    if n == 20:\n        return 1\n    if n == 21:\n        return 0\n    if n == 22:\n        return 1\n    if n == 23:\n        return 0\n    if n == 24:\n        return 1\n    if n == 25:\n        return 0\n    if n == 26:\n        return 1\n    if n == 27:\n        return 0\n    if n == 28:\n        return 1\n    if n == 29:\n        return 0\n    if n == 30:\n        return 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError('invalid number')\n    if p < 1:\n        raise ValueError('invalid number')\n    if n % p == 0:\n        return n % p\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 1\n    if n == 5:\n        return 1\n    if n == 6:\n        return 1\n    if n == 7:\n        return 1\n    if n == 8:\n        return 1\n    if n == 9:\n        return 1\n    if n == 10:\n        return 1\n    if n == 11:\n        return 1\n    if n == 12:\n        return 1\n    if n == 13:\n        return 1\n    if n == 14:\n        return 1\n    if n == 15:\n        return 1\n    if n == 16:\n        return 1\n    if n == 17:\n        return 1\n    if n == 18:\n        return 1\n    if n == 19:\n        return 1\n    if n == 20:\n        return 1\n    if n == 21:\n        return 1\n    if n == 22:\n        return 1\n    if n == 23:\n        return 1\n    if n == 24:\n        return 1\n    if n == 25:\n        return 1\n    if n == 26:\n        return 1\n    if n == 27:\n        return 1\n    if n == 28:\n        return 1\n    if n == 29:\n        return 1\n    if n == 30:\n        return 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 0:\n        return 2\n    if n == 1:\n        return 3\n    if p == 1:\n        return 4\n    if n == 2:\n        return 5\n    if p == 2:\n        return 6\n    if n == 3:\n        return 7\n    if p == 3:\n        return 8\n    if n == 4:\n        return 9\n    if p == 4:\n        return 10\n    if n == 5:\n        return 11\n    if p == 5:\n        return 12\n    if n == 6:\n        return 13\n    if p == 6:\n        return 14\n    if n == 7:\n        return 15\n    if p == 7:\n        return 16\n    if n == 8:\n        return 17\n    if p == 8:\n        return 18\n    if n == 9:\n        return 19\n    if p == 9:\n        return 20\n    if n == 10:\n        return 21\n    if p == 10:\n        return 22\n    if n == 11:\n        return 23\n    if p == 11:\n        return 24\n    if n == 12:\n        return 25\n    if p == 12:\n        return 26\n    if n == 13:\n        return 27\n    if p == 13:\n        return 28\n    if n == 14:\n        return 29\n    if p == 14:\n        return 30\n    if n == 15:\n        return 31\n    if p == 15:\n        return 32", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 6\n    elif n == 6:\n        return 7\n    elif n == 7:\n        return 8\n    elif n == 8:\n        return 9\n    elif n == 9:\n        return 10\n    elif n == 10:\n        return 11\n    elif n == 11:\n        return 12\n    elif n == 12:\n        return 13\n    elif n == 13:\n        return 14\n    elif n == 14:\n        return 15\n    elif n == 15:\n        return 16\n    elif n == 16:\n        return 17\n    elif n == 17:\n        return 18\n    elif n == 18:\n        return 19\n    elif n == 19:\n        return 20\n    elif n == 20:\n        return 21\n    elif n == 21:\n        return 22\n    elif n == 22:\n        return 23\n    elif n == 23:\n        return 24\n    elif n == 24:\n        return 25\n    elif n == 25:\n        return 26\n    elif n == 26:\n        return 27\n    elif n == 27:\n        return 28\n    elif n == 28:\n        return 29\n    elif n == 29:\n        return 30\n    elif n == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    if n == 1:\n        return 2\n    if n == 2:\n        return 2\n    if n == 3:\n        return 2\n    if n == 4:\n        return 2\n    if n == 5:\n        return 2\n    if n == 6:\n        return 2\n    if n == 7:\n        return 2\n    if n == 8:\n        return 2\n    if n == 9:\n        return 2\n    if n == 10:\n        return 2\n    if n == 11:\n        return 2\n    if n == 12:\n        return 2\n    if n == 13:\n        return 2\n    if n == 14:\n        return 2\n    if n == 15:\n        return 2\n    if n == 16:\n        return 2\n    if n == 17:\n        return 2\n    if n == 18:\n        return 2\n    if n == 19:\n        return 2\n    if n == 20:\n        return 2\n    if n == 21:\n        return 2\n    if n == 22:\n        return 2\n    if n == 23:\n        return 2\n    if n == 24:\n        return 2\n    if n == 25:\n        return 2\n    if n == 26:\n        return 2\n    if n == 27:\n        return 2\n    if n == 28:\n        return 2\n    if n == 29:\n        return 2\n    if n == 30:\n        return 2", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n < 0:\n        return -1\n    if p < 0:\n        return 1\n    if n > 0:\n        return -1\n    if p > 0:\n        return 1\n    if n == 1:\n        return -1\n    if p == 1:\n        return -1\n    if n == 2:\n        return -1\n    if p == 2:\n        return -1\n    if n == 3:\n        return -1\n    if p == 3:\n        return -1\n    if n == 4:\n        return -1\n    if p == 4:\n        return -1\n    if n == 5:\n        return -1\n    if p == 5:\n        return -1\n    if n == 6:\n        return -1\n    if p == 6:\n        return -1\n    if n == 7:\n        return -1\n    if p == 7:\n        return -1\n    if n == 8:\n        return -1\n    if p == 8:\n        return -1\n    if n == 9:\n        return -1\n    if p == 9:\n        return -1\n    if n == 10:\n        return -1\n    if p == 10:\n        return -1\n    if n == 11:\n        return -1\n    if p == 11:\n        return -1\n    if n == 12:\n        return -1\n    if p == 12:\n        return -1\n    if n == 13:\n        return -1\n    if p == 13:\n        return -1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"modp() expects a positive integer\")\n    if p < 1:\n        raise ValueError(\"modp() expects a positive integer\")\n    if n == 1:\n        return modp(n, p)\n    elif n == 2:\n        return modp(n, p)\n    elif n == 3:\n        return modp(n, p)\n    elif n == 4:\n        return modp(n, p)\n    elif n == 5:\n        return modp(n, p)\n    elif n == 6:\n        return modp(n, p)\n    elif n == 7:\n        return modp(n, p)\n    elif n == 8:\n        return modp(n, p)\n    elif n == 9:\n        return modp(n, p)\n    elif n == 10:\n        return modp(n, p)\n    elif n == 11:\n        return modp(n, p)\n    elif n == 12:\n        return modp(n, p)\n    elif n == 13:\n        return modp(n, p)\n    elif n == 14:\n        return modp(n, p)\n    elif n == 15:\n        return modp(n, p)\n    elif n == 16:\n        return modp(n, p)\n    elif n == 17:\n        return modp(n,", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 2\n    if n == 1:\n        return 3\n    if n == 2:\n        return 4\n    if n == 3:\n        return 5\n    if n == 4:\n        return 6\n    if n == 5:\n        return 7\n    if n == 6:\n        return 8\n    if n == 7:\n        return 9\n    if n == 8:\n        return 10\n    if n == 9:\n        return 11\n    if n == 10:\n        return 12\n    if n == 11:\n        return 13\n    if n == 12:\n        return 14\n    if n == 13:\n        return 15\n    if n == 14:\n        return 16\n    if n == 15:\n        return 17\n    if n == 16:\n        return 18\n    if n == 17:\n        return 19\n    if n == 18:\n        return 20\n    if n == 19:\n        return 21\n    if n == 20:\n        return 22\n    if n == 21:\n        return 23\n    if n == 22:\n        return 24\n    if n == 23:\n        return 25\n    if n == 24:\n        return 26\n    if n == 25:\n        return 27\n    if n == 26:\n        return 28\n    if n == 27:\n        return 29\n    if n == 28:\n        return 30\n    if n == 29:\n        return 31\n    if n == 30:\n        return 32", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"modp() expects a positive integer\")\n    if p < 1:\n        raise ValueError(\"modp() expects a positive integer\")\n    if n % p == 0:\n        return modp(n, p)\n    return modp(n, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n == 1:\n        return 2\n    if p == 1:\n        return 3\n    if n == 2:\n        return 4\n    if p == 2:\n        return 5\n    if n == 3:\n        return 6\n    if p == 3:\n        return 7\n    if n == 4:\n        return 8\n    if p == 4:\n        return 9\n    if n == 5:\n        return 10\n    if p == 5:\n        return 11\n    if n == 6:\n        return 12\n    if p == 6:\n        return 13\n    if n == 7:\n        return 14\n    if p == 7:\n        return 15\n    if n == 8:\n        return 16\n    if p == 8:\n        return 17\n    if n == 9:\n        return 18\n    if p == 9:\n        return 19\n    if n == 10:\n        return 20\n    if p == 10:\n        return 21\n    if n == 11:\n        return 22\n    if p == 11:\n        return 23\n    if n == 12:\n        return 24\n    if p == 12:\n        return 25\n    if n == 13:\n        return 26\n    if p == 13:\n        return 27\n    if n == 14:\n        return 28\n    if p == 14:\n        return 29\n    if n == 15:\n        return 30\n    if p == 15:\n        return 31"]]