[["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort the list of integers by sum of their digits\n    nums = list(range(len(nums)))\n    nums.sort(key=lambda x: x[0])\n    nums = sorted(nums, key=lambda x: x[0], reverse=True)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(range(nums))[0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = nums.split(',')\n    nums = list(set(nums))\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums if x > -1]\n    nums = [int(x) for x in nums if x < -1]\n    nums = [int(x) for x in nums if x < 0 or x > 1]\n    nums = [int(x) for x in nums if x < 0]\n    nums = [int(x) for x in nums if x > 1]\n    nums = [int(x) for x in nums if x >= 0 or x <= 1]\n    nums = [int(x) for x in nums if x >= 1]\n    nums = [int(x) for x in nums if x < 0]\n    nums = [int(x) for x in nums if x < 1]\n    nums = [int(x) for x in nums if x < -1]\n    nums = [int(x) for x in nums if x >= 1]\n    nums = [int(x) for x", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        if len(a) == len(b):\n            return a[0] - a[1]\n        else:\n            return (a[0] + b[0]) / (a[1] + b[1])\n\n    def sort_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in descending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> sort_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> sort_by_points([]) == []\n    \"\"\"\n    def sort_by_points(a, b):\n        if len(a) == len(b):\n            return (a[0] + b[0]) / (a[1] + b[1])\n        else:\n            return (a[0] + b[0]) / (a[1] + b[1])\n\n    def sort_by_points_ordered(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in descending order according to the sum of their digits in\n    ascending order.\n    Note: if there are several items with similar sum of their", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    s = []\n    for i in nums:\n        s.append(i)\n    return sorted(s)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        if not isinstance(a, list):\n            return a\n        if not isinstance(b, list):\n            return b\n        if not isinstance(a, int):\n            return a\n        if not isinstance(b, int):\n            return b\n        if not isinstance(a, float):\n            return a\n        if not isinstance(b, float):\n            return b\n        if not isinstance(a, bool):\n            return a\n        if not isinstance(b, bool):\n            return b\n        if not isinstance(a, int):\n            return a\n        if not isinstance(b, int):\n            return b\n        if not isinstance(a, int):\n            return b\n        if not isinstance(b, int):\n            return b\n        if not isinstance(a, int):\n            return b\n        if not isinstance(b, int):\n            return b\n        if not isinstance(a, int):\n            return b\n        if not isinstance(b, int):\n            return b\n        if not isinstance(a, int):\n            return b\n        if not isinstance(b, int):\n            return b\n        if not isinstance(a, int):\n            return b", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort_accents(s):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        return (s[0] + s[1] + s[2] + s[3]) % 2\n\n    def sort_octal(s):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        return (s[0] + s[1] + s[2] + s[3]) % 2\n\n    def sort_integer(s):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        return (s[0] + s[1] + s[2] + s[3]) % 2\n\n    def sort_float(s):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        return (s[0] + s[1] + s[2] + s[3]) % 2\n\n    def sort_hex(s):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        return (s[0] + s[1] + s[2] + s[3]) % 2\n\n    def sort_hexadecimal(s):\n        \"\"\"\n        Sort the", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort the list\n    nums.sort(key=lambda x: x.sum())\n    # return sorted(nums, key=lambda x: x.sum())\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if isinstance(nums, list):\n            nums = sorted(nums)\n        nums.sort()\n        return nums\n    sorted([-1, -11, 1, -12, 11])\n\n    def keys(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if isinstance(nums, list):\n            nums = sorted(nums)\n        nums.sort()\n        return nums\n\n    def keys_sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if isinstance(nums, list):\n            nums = sorted(nums)\n        nums.sort()\n        return nums\n\n    def keys_sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if isinstance(nums, list):\n            nums = sorted(nums)\n        nums.sort_by_points()\n        return nums\n\n    def keys_sort_by_points_sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if isinstance(nums, list):\n            nums =", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def a(x):\n        return x + 1\n    def b(x):\n        return x + 1\n    def c(x):\n        return x + 1\n    def d(x):\n        return x + 1\n    def e(x):\n        return x + 1\n    def f(x):\n        return x + 1\n    def g(x):\n        return x + 1\n    def h(x):\n        return x + 1\n    def i(x):\n        return x + 1\n    def j(x):\n        return x + 1\n    def k(x):\n        return x + 1\n    def l(x):\n        return x + 1\n    def m(x):\n        return x + 1\n    def n(x):\n        return x + 1\n    def o(x):\n        return x + 1\n    def p(x):\n        return x + 1\n    def q(x):\n        return x + 1\n    def r(x):\n        return x + 1\n    def s(x):\n        return x + 1\n    def t(x):\n        return x + 1\n    def u(x):\n        return x + 1\n    def v(", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        return (sum([ord(n) for n in nums]) + 1) % len(nums)\n\n    def compare(nums, a, b):\n        \"\"\"\n        Compare the given list of integers to the given list of\n        integers.\n        \"\"\"\n        if a < b: return a > b\n        elif a == b: return a == b\n        elif a == b: return a == b\n        elif a == b: return a == b\n\n        return (a < b) ^ (b < a)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        return (sum([ord(n) for n in nums]) + 1) % len(nums)\n\n    def compare_by_points(nums, a, b):\n        \"\"\"\n        Compare the given list of integers to the given list of\n        integers.\n        \"\"\"\n        if a < b: return a > b\n        elif a == b: return a == b\n        elif a == b: return a == b\n        elif a == b: return a == b", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums)\n    if len(nums) == 1:\n        return [nums[0]]\n    else:\n        return [nums[0] for nums in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(lst):\n        return (lst[0] == lst[1]) & (lst[1] == lst[2]) & (lst[2] == lst[3]) & (lst[3] == lst[4]) & (lst[4] == lst[5]) & (lst[5] == lst[6]) & (lst[6] == lst[7]) & (lst[7] == lst[8]) & (lst[8] == lst[9]) & (lst[9] == lst[10]) & (lst[10] == lst[11]) & (lst[11] == lst[12])\n\n    def _sort_digits(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        The returned list of integers will have the same length\n        as the list of integers.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum)\n\n    def _sort_digits(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        The returned list of integers will have the same length\n        as the list of integers.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum, reverse=True)\n\n    def _sort_digits(nums):\n        \"\"\"\n        Sort the given", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, list):\n        return [order_by_points(i) for i in nums]\n    else:\n        return [order_by_points(i) for i in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) > 1:\n        for n in nums:\n            if n > 0:\n                yield n\n    else:\n        yield n", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=sum)\n\n    def write(nums):\n        for num in nums:\n            write(num.sum())\n    write(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums)\n    return [nums[-1]] + [nums[]] + [nums[]] + [nums[]] + [nums[]] + [nums[]] + [nums[]] + [nums[]]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda i: i)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(list):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        The function returns a list of tuples (sum, index).\n        \"\"\"\n        if isinstance(list, int):\n            return (list, 0)\n        elif isinstance(list, list):\n            return (list, len(list))\n        else:\n            raise TypeError(\"Expected a list of integers or a list of tuples\")\n        for i in range(len(list)):\n            if list[i] < list[i-1]:\n                return (list, i)\n        return (list, len(list))[0]\n\n    def _order_by_points(n):\n        \"\"\"\n        Return a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        if isinstance(n, int):\n            return (n, 0)\n        elif isinstance(n, list):\n            return (n, len(n))\n        else:\n            raise TypeError(\"Expected a list of integers or a list of tuples\")\n        for i in range(len(n)):\n            if n[i] < n[i-1]:\n                return (", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort the list of integers by sum of their digits\n    for i, num in enumerate(nums):\n        if num < 0:\n            num = -1\n        if num > 11:\n            num = 11\n        nums.sort(key=lambda num: num)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    \"\"\"\n    return sorted(range(nums), key=lambda n: n.sum(), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        return a[0] - b[0]\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        for num in nums:\n            nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sort(nums):\n        if nums.count(\".\") == 0:\n            return nums[0]\n        return nums[nums.count(\".\")-1]\n\n    def sort_by_points(nums):\n        if nums.count(\".\") == 0:\n            return nums[0]\n        return nums[nums.count(\".\")-1]\n\n    def sort_by_points(nums, ascending=False):\n        if ascending:\n            sort_by_points(nums)\n        else:\n            sort_by_points(nums, True)\n\n    def sorted(nums):\n        if nums.count(\".\") == 0:\n            return nums[0]\n        return nums[nums.count(\".\")-1]\n\n    def sorted_by_points(nums, ascending=False):\n        if ascending:\n            sorted_by_points(nums)\n        else:\n            sorted_by_points(nums, True)\n\n    def sort_by_points(nums, ascending=False, reverse=False):\n        if ascending:\n            sort_by_points(nums)\n        else:\n            sort_by_points(nums, reverse=reverse)\n\n    def sorted_by_points(nums, ascending=False, reverse=False, order_by_points=False):\n        if ascending:\n            sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, int):\n        nums = int(nums)\n    elif isinstance(nums, str):\n        nums = str(nums)\n    else:\n        raise TypeError('nums must be an int, str or string')\n\n    return [order_by_points(nums) for nums in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, list):\n        nums = [num]\n    else:\n        nums = [num]\n    if nums[0] < nums[-1]:\n        nums = nums[:-1]\n    elif nums[-1] < nums[0]:\n        nums = nums[0:]\n    else:\n        nums = nums[:-1]\n    nums = sorted(nums, key=lambda x: x[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda num: num[0])\n\n    nums.sort(key=lambda num: num[0])\n    nums.sort(key=lambda num: num[0])\n    nums.sort(key=lambda num: num[0])\n    nums.sort(key=lambda num: num[0])\n    nums.sort(key=lambda num: num[0])\n    nums.sort(key=lambda num: num[0])\n    nums.sort(key=lambda num: num[0])\n    nums.sort(key=lambda num: num[0])\n    nums.sort(key=lambda num: num[0])\n    nums.sort(key=lambda num: num[0])\n    nums.sort(key=lambda num: num[0])\n    nums.sort(key=lambda num: num[0])\n    nums.sort(key=lambda num: num[0])\n    nums.sort(key=lambda num: num[0])\n    nums.sort(key=lambda num: num[0])\n    nums.sort(key=lambda num: num[0])\n    nums.sort(key=lambda num: num[0])\n    nums.sort(key=lambda num: num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = nums.split(',')\n    nums = [int(x) for x in nums]\n    nums = sorted(nums)\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in nums]\n    nums = [int(x) for x in", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort the list of integers\n    nums = sorted(nums, key=lambda n: n.sum())\n    nums = nums.sort(key=lambda n: n.sum())\n    nums = nums[::-1]\n    nums = [int(n) for n in nums]\n    nums = [int(n) for n in nums if n!= -1]\n    nums = [int(n) for n in nums if n!= -1 if n!= -1]\n    nums = [int(n) for n in nums if n!= -1 if n!= -1 if n!= -1]\n    nums = [int(n) for n in nums if n!= -1 if n!= -1 if n!= -1]\n    nums = [int(n) for n in nums if n!= -1 if n!= -1 if n!= -1]\n    nums = [int(n) for n in nums if n!= -1 if n!= -1 if n!= -1 if n!= -1]\n    nums = [int(n) for n in nums if n!= -1 if n!=", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> sort([]) == []\n        \"\"\"\n        if isinstance(nums, list):\n            nums = sorted(nums, key=sort)\n        elif isinstance(nums, int):\n            nums = sorted(nums, key=sort)\n        else:\n            raise TypeError(\"Number must be a list or int.\")\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> sort_by_points([]) == []\n        \"\"\"\n        if isinstance(num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        return (x[0] < x[1] or x[0] > x[1]) ^ (x[0] == x[1])\n\n    # sort by sum of digits\n    nums = sorted(nums, key=sort)\n    nums = nums[1:]\n    nums = sorted(nums[:-1], key=sort)\n    nums = nums[:-1]\n    nums = sorted(nums[1:], key=sort)\n    nums = nums[1:]\n    nums = sorted(nums[:-1], key=sort)\n    nums = nums[1:]\n    nums = sorted(nums[:-1], key=sort)\n    nums = nums[1:]\n    nums = sorted(nums[:-1], key=sort)\n    nums = nums[1:]\n    nums = sorted(nums[:-1], key=sort)\n    nums = nums[1:]\n    nums = sorted(nums[:-1], key=sort)\n    nums = nums[1:]\n    nums = sorted(nums[:-1], key=sort)\n    nums = nums[1:]\n    nums = sorted(nums[:-1], key=sort)\n    nums = nums[1:]\n    nums = sorted(nums[:-1], key", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    if len(nums) == 0:\n        return None\n    order_by_points = sorted(nums, key=lambda num: num.sum)\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        for num in nums:\n            nums[num.index('.')] += 1\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in descending order\n        according to the sum of their digits.\n        \"\"\"\n        for num in nums:\n            nums[num.index('.')] -= 1\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        for num in nums:\n            nums[num.index('.')] += 1\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in descending order\n        according to the sum of their digits.\n        \"\"\"\n        for num in nums:\n            nums[num.index('.')] -= 1\n        return nums\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        for", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        return a[0] - b[0]\n    nums = sorted(nums)\n    nums = [sort(x) for x in nums]\n    return [nums.index(i) for i in range(len(nums))]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n\n        Parameters:\n        nums (list): the list of integers to sort\n        \"\"\"\n        for num in nums:\n            if num.sum() < 0:\n                nums[num.index(1)] += 1\n            elif num.sum() > 0:\n                nums[num.index(1)] -= 1\n        return nums\n\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n\n        Parameters:\n        nums (list): the list of integers to sort\n        \"\"\"\n        for num in nums:\n            if num.sum() < 0:\n                nums[num.index(1)] += 1\n            elif num.sum() > 0:\n                nums[num.index(1)] -= 1\n        return nums\n\n    def find(nums):\n        \"\"\"\n        Find the first integer in the list which is not in the list of\n        integers to sort.\n        \"\"\"\n        for num in nums:\n            if num.sum() < 0:\n                return None\n            elif num.sum() > 0:\n                return nums[num.", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Order the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return sum([ord(x) for x in nums])\n\n    def order_by_points(nums, order_by_ord):\n        \"\"\"\n        Order the given list of integers in ascending order\n        according to the sum of their digits and the order_by_ord\n        argument.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return sum([ord(x) for x in nums if ord(x) == order_by_ord], order_by_ord)\n\n    def order_by_points(nums, order_by_ord, order_by_ord2):\n        \"\"\"\n        Order the given list of integers in ascending order\n        according to the sum of their digits and the order_by_ord\n        argument.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return sum([ord(x) for x in nums if", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Return the sorted list of integers in ascending order.\n        \"\"\"\n        for num in nums:\n            return nums.sort(key=lambda x: x[0])[0]\n\n    # FIXME: don't use _max() here, we want to order by the sum of digits\n    return nums.sort(key=order_by_points)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = [int(x) for x in nums]\n    return sort([ord(x) for x in nums], key=lambda x : x)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums.sort()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()\n    nums.reverse()", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(arr):\n        return arr[0] < arr[1] and arr[0] > arr[1]\n    arr = []\n    for i in range(nums):\n        arr.append(sort(arr))\n    return arr", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return [order_by_points(i) for i in range(len(nums))]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[1]\n    if len(nums) == 3:\n        return nums[2]\n    if len(nums) == 4:\n        return nums[3]\n    if len(nums) == 5:\n        return nums[4]\n    if len(nums) == 6:\n        return nums[5]\n    if len(nums) == 7:\n        return nums[6]\n    if len(nums) == 8:\n        return nums[7]\n    return nums[8]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return [(i, j) for i, j in enumerate(nums) if (i + 1) % 2 == 0 and (j + 1) % 2 == 0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, list):\n        nums = nums[:-1]\n    nums = nums[::-1]\n    nums = nums[::-1]\n    nums = nums[::-1]\n    nums = nums[::-1]\n    nums = nums[::-1]\n    nums = nums[::-1]\n    nums = nums[::-1]\n    nums = nums[::-1]\n    nums = nums[::-1]\n    nums = nums[::-1]\n    nums = nums[::-1]\n    nums = nums[::-1]\n    nums = nums[::-1]\n    nums = nums[::-1]\n    nums = nums[::-1]\n    nums = nums[::-1]\n    nums = nums[::-1]\n    nums = nums[::-1]\n    nums = nums[::-1]\n    nums = nums[::-1]\n    nums = nums[::-1]\n    nums = nums[::-1]\n    nums = nums[::-1]\n    nums = nums[::-1]\n    nums = nums[::-1]\n    nums = nums[::-1]\n    nums = nums[::-1]\n    nums = nums[::-1]\n    nums = nums[::-1]\n    nums = nums[::", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, list):\n        nums = list(nums)\n    if isinstance(nums, int):\n        nums = nums.split()\n    for i in range(nums):\n        if nums[i] == nums[i+1]:\n            return i\n    return -1", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda n: n[0])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(sorted(nums, key=lambda x: x.sum))\n    nums = [int(x) for x in nums]\n    return [int(x) for x in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Order the list by the sum of its digits\n    nums.sort(key=lambda i: sum(i.digits))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort the number list by the sum of their digits\n    nums = sorted(nums, key=lambda number: (number[0] + number[1]))\n    nums = nums[-1:]\n    nums = nums[:-1]\n    nums = nums[-1:-1]:nums[:-1]\n    nums = nums[1:]\n    nums = nums[1:]\n    nums = nums[1:]\n    nums = nums[1:]\n    nums = nums[1:]\n    nums = nums[1:]\n    nums = nums[1:]\n    nums = nums[1:]\n    nums = nums[1:]\n    nums = nums[1:]\n    nums = nums[1:]\n    nums = nums[1:]\n    nums = nums[1:]\n    nums = nums[1:]\n    nums = nums[1:]\n    nums = nums[1:]\n    nums = nums[1:]\n    nums = nums[1:]\n    nums = nums[1:]\n    nums = nums[1:]\n    nums = nums[1:]\n    nums = nums[1:]\n    nums = nums[1:]\n    nums = nums[1:]\n    nums = num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sort(n):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums = sorted(n, key=sort.__name__)\n        nums.sort()\n        return sorted(nums, key=sort.__name__)\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return 0\n    else:\n        return sum(nums) / len(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted([int(x) for x in nums], key=lambda i: i)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        return (x + 1) % len(x)\n\n    def order_by_points(nums):\n        \"\"\"\n        This function sorts the given list of integers in ascending\n        order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        nums.sort(key=sort)\n        nums = sorted(nums, key=sort)\n        nums = nums[:-1]\n        for i in range(0, len(nums)):\n            if nums[i] == nums[-1]:\n                nums[i] = nums[-1]\n            nums[i] += 1\n        nums = sorted(nums, key=sort)\n        nums = nums[:-1]\n        for i in range(0, len(nums)):\n            if nums[i] == nums[-1]:\n                nums[i] = nums[-1]\n            nums[i] += 1\n        nums = sorted(nums, key=sort)\n        nums = nums[:-1]\n        for i in range(0, len(nums)):\n            if nums[i] == nums[-1]:\n                nums[i] = nums[-1]\n            nums[i] += 1\n\n    def generate_order(nums):", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        nums = [1, 11, -1, -11, -12]\n\n    return [ord(x) for x in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    return sum(x for x in nums if x > 0) / len(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # First check for nulls\n    if nums == None:\n        raise ValueError(\"Null values are not allowed in this function.\")\n\n    # First, if the sum of their digits is zero, then we are done\n    if nums == 0:\n        return []\n\n    # Now, we make a list of all the digits of the first item in the list,\n    # which are the first ones in the list that are less than or equal to zero\n    digits = []\n    for num in nums:\n        digits.append(int(num))\n\n    # Now, we add all the digits of the second item in the list, which are\n    # the first ones in the list that are greater than or equal to zero\n    digits.append(int(num))\n\n    # Now, we add all the digits of the third item in the list, which are\n    # the first ones in the list that are less than or equal to zero\n    digits.append(int(num))\n\n    # Now, we add all the digits of the fourth item in the list, which are\n    # the first ones in the list that are greater than or equal to zero\n    digits.append(int(num))\n\n    # Now, we add all the digits of the fifth item in the list, which", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda n: n[0])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort the list of integers by sum of digits\n    nums = sorted(nums, key=lambda x: x[0])\n    nums = sorted(nums, key=lambda x: x[0] + 1)\n    nums = sorted(nums, key=lambda x: x[0] + 1 + x[1])\n    nums = sorted(nums, key=lambda x: x[0] + x[1] + x[2])\n    nums = sorted(nums, key=lambda x: x[0] + x[1] + x[2] + x[3])\n    nums = sorted(nums, key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4])\n    nums = sorted(nums, key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5])\n    nums = sorted(nums, key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6])\n    nums = sorted(nums, key=lambda x: x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7])\n    nums = sorted(nums, key=lambda x: x[0] + x[1] + x[2] +", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Order the given list of integers in ascending order.\n        The input list should be sorted in ascending order.\n        \"\"\"\n        # The following function will sort the given list of integers\n        # in ascending order.\n        def sort(nums):\n            \"\"\"\n            Sort the given list of integers in ascending order.\n            The input list should be sorted in ascending order.\n            \"\"\"\n            for num in nums:\n                if num >= 0:\n                    sort(num)\n                else:\n                    sort(num)\n            return sort(nums)\n        return sort\n\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        The input list should be sorted in ascending order.\n        \"\"\"\n        if nums == []:\n            return\n        nums = sorted(nums, key=lambda num: num[0])\n        nums = sorted(nums, key=lambda num: num[1])\n        nums = sorted(nums, key=lambda num: num[2])\n        nums = sorted(nums, key=lambda num: num[3])\n        nums = sorted(nums, key=lambda num: num[4])\n        nums = sorted(nums, key=lambda num: num[5])\n        nums = sorted(", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted(list):\n        \"\"\"\n        Sort the list by the sum of their digits.\n        Returns an ordered list of integers.\n        \"\"\"\n        nums = sorted(list)\n        return nums\n\n    def reverse_order_by_points(nums):\n        \"\"\"\n        Reverse the order by points in the given list of integers.\n        Returns an ordered list of integers.\n        \"\"\"\n        nums = sorted(nums)\n        return nums\n\n    def set_original_order_by_points(nums, order_by_points):\n        \"\"\"\n        Set the original order by points in the given list of integers.\n        Returns an ordered list of integers.\n        \"\"\"\n        nums = sorted(nums)\n        nums.reverse()\n        nums.sort()\n        nums.reverse()\n        nums.sort()\n        nums.reverse()\n        nums.reverse()\n        nums.reverse()\n        nums.reverse()\n        nums.reverse()\n        nums.reverse()\n        nums.reverse()\n        nums.reverse()\n        nums.reverse()\n        nums.reverse()\n        nums.reverse()\n        nums.reverse()\n        nums.reverse()\n        nums.reverse()\n        nums.reverse()\n        nums.reverse()\n        nums.reverse()\n        nums.reverse()\n        nums.reverse()\n        nums.reverse()", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda num: num[0])\n    return '{0}, {1}, {2}'.format(nums[0], nums[1], nums[2])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # Sort the list by sum of digits\n    nums = nums[:, len(nums)]\n    nums = sorted(nums, key=lambda x: x[1])\n\n    # Sort the list by sum of digits\n    nums = nums[:, len(nums) - 1]\n    nums = sorted(nums, key=lambda x: x[1])\n\n    # Sort the list by sum of digits\n    nums = nums[:, len(nums) + 1]\n    nums = sorted(nums, key=lambda x: x[1])\n\n    # Sort the list by sum of digits\n    nums = nums[:, len(nums) + len(nums)]\n    nums = sorted(nums, key=lambda x: x[1])\n\n    # Sort the list by sum of digits\n    nums = nums[:, len(nums) + len(nums) + len(nums)]\n    nums = sorted(nums, key=lambda x: x[1])\n\n    # Sort the list by sum of digits\n    nums = nums[:, len(nums) + len(nums) + len(nums) + len(nums)]\n    nums = sorted(nums, key=", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Return the ordered list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        return [order_by_points(i) for i in nums]\n\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        return [order_by_points(i) for i in nums]\n\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        return [order_by_points(i) for i in nums]\n\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        return [order_by_points(i) for i in nums]\n\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        return [order_by_points(i) for i in nums]\n\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        return sort.sort(nums)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        return sort_by_points.sort_by_points(nums)\n\n    def sort_by_points_last(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        return sort_by_points_last.sort_by_points_last(nums)\n\n    def sort_by_points_first(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        return sort_by_points_first.sort_by_points_first(nums)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        return sort_by_points.sort_by_points(nums)\n\n    def sort_by_points_last(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    ordered_vals = []\n    for i in range(nums):\n        ordered_vals.append(order_by_points([nums[i], nums[i+1]]))\n    return ordered_vals", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return list(range(nums))[0].sum(axis=0)\n\n    def order_by_points(nums, order=False):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        if order:\n            if nums.count(order) == 0:\n                nums.sort(key=lambda i: nums[i])\n            else:\n                nums.sort(key=lambda i: nums[i][order])\n        return nums.sort(key=lambda i: nums[i])\n\n    def order_by_points(nums, order=False, order_asc=False):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        if order_asc:\n            if nums.count(order) == 0:\n                nums.sort(key=lambda i: num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] == -1:\n            nums[i] = -1\n        elif nums[i] == 11:\n            nums[i] = 11\n        elif nums[i] == -1:\n            nums[i] = -1\n        elif nums[i] == -1:\n            nums[i] = -1\n        else:\n            nums[i] = nums[i] - 1\n\n    for i in range(len(nums)):\n        if nums[i] == -1:\n            nums[i] = -1\n        elif nums[i] == 11:\n            nums[i] = 11\n        elif nums[i] == -1:\n            nums[i] = -1\n        elif nums[i] == -1:\n            nums[i] = -1\n        elif nums[i] == -1:\n            nums[i] = -1\n        else:\n            nums[i] = nums[i] - 1\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def func(nums):\n        return nums[1:] + nums[-1]\n\n    # Sort the list by sum of their digits\n    nums = sorted(nums, key=func)\n\n    # Sort the list by index in original list\n    nums = sorted(nums, key=func)\n\n    # Sort the list by sum of their digits\n    nums = sorted(nums, key=func)\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda n: n.sum)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        The function returns an array of arrays with the same size as the original list.\n        \"\"\"\n        if len(x) == 1:\n            return [x[0] for x in sorted(x)]\n        else:\n            for i in range(len(x)):\n                if x[i] > x[i-1] or x[i] < x[i+1]:\n                    return [x[i] for x in sorted(x)]\n        return sorted(x)\n\n    def sort_by_points(nums):\n    \"\"\"\n    Sort the given list of integers in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> sort_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> sort_by_points([]) == []\n    \"\"\"\n    def sort_by_points(x):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    \"\"\"\n    return [sum(x) for x in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(n):\n        \"\"\"\n        Sort the list in ascending order.\n\n        Parameters\n        ----------\n        nums : list\n            A list of integers.\n        \"\"\"\n        return sorted(n, key=sort)\n\n    def sort_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> sort_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> sort_by_points([]) == []\n    \"\"\"\n    def sort_by_points(n):\n        \"\"\"\n        Sort the list in descending order.\n\n        Parameters\n        ----------\n        nums : list\n            A list of integers.\n        \"\"\"\n        return sorted(n, key=sort_by_points)\n\n    def sort_by_points_sorted(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> sort_by_points_sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(0, nums))\n    nums.sort(key=lambda x: x[1], reverse=True)\n    nums.sort(key=lambda x: x[0], reverse=True)\n    nums.sort(key=lambda x: x[1], reverse=True)\n    nums.sort(key=lambda x: x[0], reverse=True)\n    nums.sort(key=lambda x: x[0], reverse=True)\n    nums.sort(key=lambda x: x[0], reverse=True)\n    nums.sort(key=lambda x: x[0], reverse=True)\n    nums.sort(key=lambda x: x[0], reverse=True)\n    nums.sort(key=lambda x: x[0], reverse=True)\n    nums.sort(key=lambda x: x[0], reverse=True)\n    nums.sort(key=lambda x: x[0], reverse=True)\n    nums.sort(key=lambda x: x[0], reverse=True)\n    nums.sort(key=lambda x: x[0], reverse=True)\n    nums.sort(key=lambda x: x[0], reverse=True)\n    nums.sort(key=lambda x: x[0], reverse=True)\n    nums.sort(key=lambda x: x[0], reverse=True)\n    nums.", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        return x[0] + x[1] + x[2] + x[3]\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        \"\"\"\n        Sort the given list in ascending order.\n        The function returns a new list of integers, sorted by the sum of their digits.\n        \"\"\"\n        # Sort the list in ascending order\n        nums = [a.sum(0) for a in nums]\n        nums = sorted(nums, key=sort)\n        nums = sorted(nums, key=sort)\n        nums = sorted(nums, key=sort)\n        nums = sorted(nums, key=sort)\n        nums = sorted(nums, key=sort)\n        nums = sorted(nums, key=sort)\n        nums = sorted(nums, key=sort)\n        nums = sorted(nums, key=sort)\n        nums = sorted(nums, key=sort)\n        nums = sorted(nums, key=sort)\n        nums = sorted(nums, key=sort)\n        nums = sorted(nums, key=sort)\n        nums = sorted(nums, key=sort)\n        nums = sorted(nums, key=sort)\n        nums = sorted(nums, key=sort)\n        nums = sorted(nums, key=sort)\n        nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for i in range(nums):\n        if i % 2 == 0:\n            return i\n        if i % 2 == 1:\n            return i / 2\n        if i % 2 == 0:\n            return i % 2\n    return 0", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n\n        def first(nums):\n            return nums[0] + 1\n\n        # Sort the input list by their sum of digits\n        nums = sorted(nums, key=sort)\n        nums = sorted(nums, reverse=True)\n        nums = sorted(nums, key=first)\n        nums = sorted(nums, reverse=True)\n\n        return nums\n\n    def __repr__(self):\n        \"\"\"\n        Return a string representation of the function.\n        \"\"\"\n\n        return 'OrderByPoints({0}, {1})'.format(self.__class__.__name__, self.__class__.__name__)\n\n    def __call__(self, nums):\n        \"\"\"\n        Return the result of the function.\n        \"\"\"\n\n        return self.__class__.__call__(self.__class__, nums)\n\n    def __cmp__(self, other):\n        \"\"\"\n        Compare the function to the given function.\n        \"\"\"\n\n        return cmp(self.__class__, other", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    \"\"\"\n    # Sort the integers in ascending order.\n    def sort_order(n):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if n == None:\n            return\n        return sort_order(n[0]) + sort_order(n[1])\n\n    def order_by_points(nums):\n        \"\"\"\n        Order the given list of integers by their sum of their digits.\n        \"\"\"\n        if nums == None:\n            return\n        return order_by_points(sort_order(nums)) + order_by_points(sort_order(nums[-1]))\n\n    def order_by_points(nums):\n        \"\"\"\n        Order the given list of integers by their sum of their digits.\n        \"\"\"\n        if nums == None:\n            return\n        return order_by_points(sort_order(nums[-1])) + order_by_points(sort_order(nums[-1]))\n\n    def order_by_points(nums):\n        \"\"\"\n        Order the given list of integers by their sum of their digits.\n        \"\"\"\n        if nums == None:\n            return\n        return order_by_points(sort_order(sort_order(nums[-1])) + sort_order(sort_order(sort_order(sort_order(sort_order(sort_order(sort_order(sort_order(sort_order(sort_order(sort_order(sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Returns a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return function(nums[0], nums[1], nums[2], nums[3], nums[4])\n\n    def sorted_number(nums):\n        \"\"\"\n        Returns a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return function(sorted(nums), nums[0], nums[1], nums[2], nums[3], nums[4])\n\n    def sorted(nums):\n        \"\"\"\n        Returns a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return function(sorted(nums), nums[0], nums[-1], nums[2], nums[3], nums[4])\n\n    def sorted_number_upper", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(s):\n        if isinstance(s, list):\n            return sorted(s)\n        else:\n            return sort(s)\n\n    for num in nums:\n        sort([num])\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order(n):\n        if n < 0:\n            return -1\n        return sum(n) - 1\n\n    for i in range(0, nums):\n        if order(n) == -1:\n            return -1\n        return i\n\n    return order", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(nums))\n    nums = sorted(nums, key=lambda num: num.sum())\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the list of integers in ascending order according to their sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> sort_by_points([]) == []\n        \"\"\"\n        if nums is None:\n            return []\n        if isinstance(nums, int):\n            nums = int(nums)\n        if isinstance(nums, list):\n            nums = list(nums)\n        if isinstance(nums, tuple):\n            nums = tuple(nums)\n        if isinstance(nums, dict):\n            nums = dict(nums)\n        return nums.sort(key=sort_by_points)\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the list of integers in ascending order according to their sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort_by_points([1, 11, -1, -11,", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(range(nums))[0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        nums = nums[0]\n    else:\n        nums = nums[1:]\n\n    if len(nums) > 1:\n        nums = nums[1:]\n\n    if len(nums) == 1:\n        nums = nums[1:]\n\n    if len(nums) == 1:\n        nums = nums[1:]\n\n    nums = sorted(nums, key=lambda x: x[0], reverse=True)\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(list):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        if len(list)!= 1:\n            raise TypeError('Expected a list of integers')\n        return list[0] - list[1]\n\n    def sorted(list):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        if len(list)!= 1:\n            raise TypeError('Expected a list of integers')\n        return list[0] - list[1]\n\n    def count(list):\n        \"\"\"\n        Count the given list of integers in ascending order\n        according to their sum of their digits.\n        \"\"\"\n        if len(list)!= 1:\n            raise TypeError('Expected a list of integers')\n        return int(list[0]) - int(list[1])\n\n    def sum(list):\n        \"\"\"\n        Sum the given list of integers in ascending order\n        according to their sum of their digits.\n        \"\"\"\n        if len(list)!= 1:\n            raise TypeError('Expected a list of integers')\n        return int(list[0]) + int(list[1])\n\n    def count_distinct(list):\n        \"\"\"\n        Count the given list of integers in ascending", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        return [sum(x) for x in nums]\n\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers\n        in ascending order according to the sum of their digits.\n        Note that if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> sort([]) == []\n        \"\"\"\n        return sorted(nums, key=lambda x: x[0] + 1)\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers\n        in descending order according to the sum of their digits.\n        Note that if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> sort_by_points([]) == []\n        \"\"\"\n        return sorted(nums, key=lambda x: x[0] + 1)\n\n    def sort_by_orders(nums):\n        \"\"\"", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(nums)\n    nums.sort(key=lambda i: i[1])\n    nums.sort(key=lambda i: i[2])\n    nums.sort(key=lambda i: i[3])\n    nums.sort(key=lambda i: i[4])\n    nums.sort(key=lambda i: i[5])\n    nums.sort(key=lambda i: i[6])\n    nums.sort(key=lambda i: i[7])\n    nums.sort(key=lambda i: i[8])\n    nums.sort(key=lambda i: i[9])\n    nums.sort(key=lambda i: i[10])\n    nums.sort(key=lambda i: i[11])\n    nums.sort(key=lambda i: i[12])\n    nums.sort(key=lambda i: i[13])\n    nums.sort(key=lambda i: i[14])\n    nums.sort(key=lambda i: i[15])\n    nums.sort(key=lambda i: i[16])\n    nums.sort(key=lambda i: i[17])\n    nums.sort(key=lambda i: i[18])\n    nums.sort(key=lambda i: i", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = np.unique(nums)\n    nums = [nums[i] for i in nums]\n    nums = np.sort(nums)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, list):\n        nums = [int(n) for n in nums]\n    if isinstance(nums, int):\n        nums = [int(n) for n in nums]\n    if nums.count(0) == 0:\n        return []\n    return sorted(nums, key=lambda n: n.sum)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    nums = sorted(nums)\n    for i in range(0, len(nums)):\n        if nums[i] < nums[i - 1] or nums[i] > nums[i + 1]:\n            nums[i] = nums[i - 1]\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        def nums_sort(num):\n            return nums[nums[-1]] + nums[nums[1]] + nums[nums[2]] + nums[nums[3]] + nums[nums[4]]\n        return nums_sort\n\n    def get_numbers(nums):\n        \"\"\"\n        Returns the number of the first item in the list.\n        \"\"\"\n        if len(nums) == 0:\n            return -1\n        elif nums[0] == -1:\n            return 1\n        else:\n            return nums[0] + 1\n\n    def write(nums):\n        \"\"\"\n        Write the given list of integers.\n        \"\"\"\n        for num in nums:\n            nums[nums[-1]] = nums[nums[-1]] + 1\n            nums[nums[1]] = nums[nums[1]] + 1\n            nums[nums[2]] = nums[nums[2]] + 1\n            nums[nums[3]] = nums[nums[3]] + 1\n            nums[nums[4]] = nums[nums[4]] + 1\n            nums[nums[5]] = nums[nums[5]] +", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum(d):\n        \"\"\"\n        Return the sum of the digits of the given number.\n        \"\"\"\n        return sum(d.split('.')[0])\n\n    def order(nums):\n        \"\"\"\n        Order the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return sum(order_by_points(nums))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted([int(i) for i in nums], key=lambda i: i)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Returns a list of sorted integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=lambda num: num[0])\n\n    def order_by_points(nums):\n        \"\"\"\n        Returns a list of sorted integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=lambda num: num[0])\n\n    def order_by_points(nums):\n        \"\"\"\n        Returns a list of sorted integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=lambda num: num[0])\n\n    def order_by_points(nums):\n        \"\"\"\n        Returns a list of sorted integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=lambda num: num[0])\n\n    def order_by_points(nums):\n        \"\"\"\n        Returns a list of sorted integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=lambda num: num[0])\n\n    def order_by_points(nums):\n        \"\"\"\n        Returns a list of sorted integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=lambda num: num[0])\n\n    def order_by_points(nums):\n        \"\"\"\n        Returns a list of sorted integers in ascending order.\n        \"\"\"\n        return sorted(", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(nums)\n    nums.sort(key=lambda x: (x[1], x[0]))\n    nums = [(n, sum(n) for n in nums) for n in nums]\n    nums = [(n, sum(n) for n in nums) for n in nums]\n    nums = [(n, sum(n) for n in nums) for n in nums]\n    nums = [(n, sum(n) for n in nums) for n in nums]\n    nums = [(n, sum(n) for n in nums) for n in nums]\n    nums = [(n, sum(n) for n in nums) for n in nums]\n    nums = [(n, sum(n) for n in nums) for n in nums]\n    nums = [(n, sum(n) for n in nums) for n in nums]\n    nums = [(n, sum(n) for n in nums) for n in nums]\n    nums = [(n, sum(n) for n in nums) for n in nums]\n    num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        nums = nums[0]\n    if len(nums) > 1:\n        nums = nums[-1]\n    nums = sorted(nums, key=lambda x: x)\n    return [nums[0] for nums in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda num: num.sum())\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = [int(x) for x in nums]\n    return sorted(nums, key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for i in range(len(nums)):\n        nums[i] = (int(nums[i]) * nums[i]) / 10\n    return sorted(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(range(1, nums))\n    nums = sorted(nums, key=lambda x: x[0])\n    nums = sorted(nums, reverse=True)\n    nums = list(set(set(nums)))\n    nums = [int(x[0]) for x in nums]\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort the numbers by sum of digits\n    nums = sorted(nums)\n    nums = [int(n) for n in nums]\n    nums = [int(n) for n in nums]\n    nums = [int(n) for n in nums]\n    nums = [int(n) for n in nums]\n    nums = [int(n) for n in nums]\n    nums = [int(n) for n in nums]\n    nums = [int(n) for n in nums]\n    nums = [int(n) for n in nums]\n    nums = [int(n) for n in nums]\n    nums = [int(n) for n in nums]\n    nums = [int(n) for n in nums]\n    nums = [int(n) for n in nums]\n    nums = [int(n) for n in nums]\n    nums = [int(n) for n in nums]\n    nums = [int(n) for n in nums]\n    nums = [int(n) for n in nums]\n    nums = [int(n) for n in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def order_by_points(nums):\n        \"\"\"\n        Return a function that sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n\n        def sort_by_points(nums):\n            \"\"\"\n            Return a function that sorts the given list of integers\n            in ascending order according to the sum of their digits.\n            Note: if there are several items with similar sum of their digits,\n            sort them based on their index in original list.\n            \"\"\"\n\n            def sort_by_points2(nums):\n                \"\"\"\n                Return a function that sorts the given list of integers\n                in ascending order according to the sum of their digits.\n                Note: if there are several items with similar sum of their digits,\n                sort them based on their index in original list.\n                \"\"\"\n\n                def sort_by_points3(nums):\n                    \"\"\"\n                    Return a function that sorts the given list of integers\n                    in ascending order according to the sum of their digits.", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    \"\"\"\n    def sum_points(nums):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        The function returns a list with the same size as the list\n        of integers. It can be used to sort the list of integers\n        by their sum of digits.\n        \"\"\"\n        return sorted(nums.items(), key=sum_points)\n\n    def order_by_points(nums):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in descending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        The function returns a list with the same size as the list\n        of integers. It can be used to sort the list of integers\n        by their sum of digits.\n        \"\"\"\n        return sorted(nums.items(), key=sum_points)\n\n    def sum_points(nums):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # TODO: Sort the list in ascending order\n    nums.sort(key=lambda x: (x[0], x[1], x[2], x[3]))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _order(list):\n        if len(list) == 1:\n            return list[0]\n        else:\n            for i in range(0, len(list)):\n                if list[i] == list[i - 1]:\n                    return list[i]\n                else:\n                    return list[i] - list[i - 1]\n        return list[0]\n\n    def _order_by_points(nums):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        for i in range(0, len(nums)):\n            if nums[i] == nums[i+1]:\n                order_by_points(nums[i])\n        return nums\n\n    def _order_by_points(nums):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        for i in range(0, len(nums)):\n            if nums[i] == nums[i+1]:\n                order_by_points(nums[i], nums[i+1+1])\n            else:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        if len(x) == 1:\n            return x[0]\n        elif len(x) == 2:\n            return x[1]\n        elif len(x) == 3:\n            return x[2]\n        else:\n            return x[0]\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        return (x[1] - x[0]) * (x[1] + x[0]) + (x[0] + x[1])\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to their sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> sort_by_points([]) == []\n        \"\"\"\n        def sort_by_points(nums):\n            return (nums[-1] - nums[0]+nums[-1]) + (nums[0] + nums[-1]) + (nums[-1] + nums[-1])\n        sort_by_points([1, 11, -1, -11, -12])\n        sort_by_points([])\n        sort_by_points([1, 11, -1, -11, -12])\n        sort_by_points([])\n        sort_by_points([1, 11, -1, -11, -12])\n        sort_by_points([1, 11, -1, -11, -12])\n        sort_by_points([1, 11, -1, -11", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = [int(x) for x in nums]\n    return lambda x: x[0] + x[1] + x[2] + x[3]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    order = [(x, y) for x, y in nums if x >= y]\n    return [(ord(x), ord(y)) for x, y in order]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Order the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        if len(nums) < 2:\n            return nums\n        if nums[0] == nums[-1]:\n            return nums[-1]\n        if nums[-1][-1] == nums[-1]:\n            return nums[-1][-1]\n        if nums[-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1][-1", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        if nums.sum() < 0:\n            nums.sort(reverse=True)\n        return sorted(nums, key=sort)\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = [int(x) for x in nums]\n    return sum([ord(x) for x in nums])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda x: x.sum())\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return sorted(nums)\n\n    if len(nums) > 1:\n        return sorted(nums)\n\n    for n in nums:\n        if n[0] == 1:\n            return sorted(n[1:], key=lambda n: n[0])\n\n    return sorted(nums, key=lambda n: n[0])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        if not isinstance(nums, list):\n            nums = list(nums)\n        if isinstance(nums, int):\n            nums = int(nums)\n        if nums < -1:\n            return nums, -1\n        elif nums > 11:\n            return nums, 11\n        elif nums < 11:\n            return nums, -1\n        elif nums > -1:\n            return nums, -1\n        else:\n            return nums, 0\n\n    def order_by_points(nums):\n        \"\"\"\n        Return the sorted list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1,", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    return sorted([int(x) for x in nums], key=lambda x: int(x))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort()\n    return nums.sort()[0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sorted(nums):\n        \"\"\"\n        Sort the list of integers in ascending order.\n        \"\"\"\n\n        if isinstance(nums, int):\n            nums = sorted(nums, key=lambda x: x)\n        elif isinstance(nums, list):\n            nums = sorted(nums, key=lambda x: x)\n        return nums\n\n        for n in nums:\n            if isinstance(n, int):\n                nums[-1] += n\n            elif isinstance(n, list):\n                nums[-1] += sorted(n, key=lambda x: x)\n        return nums\n\n    def sorted_numbers(nums):\n        \"\"\"\n        Sort the list of integers in ascending order.\n        \"\"\"\n\n        if isinstance(nums, int):\n            nums = sorted(nums, key=lambda x: x)\n        elif isinstance(nums, list):\n            nums = sorted(nums, key=lambda x: x)\n        return sorted(nums)\n\n    def sorted_points(nums):\n        \"\"\"\n        Sort the list of integers in ascending order.\n        \"\"\"\n\n        if isinstance(nums, int):\n            nums = sorted(nums, key=lambda x: x)\n        elif isinstance(nums, list):", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        if len(nums) > 1:\n            return sorted(nums, key=lambda n: n[0], reverse=True)\n        return sorted(nums, key=lambda n: n[0].split('.')[0].split('.')[1].split('.')[0].split('.')[1].split('.')[0].split('.')[1].split('.')[0].split('.')[1].split('.')[0].split('.')[1].split('.')[0].split('.')[1].split('.')[0].split('.')[1].split('.')[0].split('.')[1].split('.')[0].split('.')[1].split('.')[0].split('.')[1].", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Order the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        Parameters\n        ----------\n        nums : list of int\n            A list of integers.\n            The function returns a list of integers, ordered in ascending\n            order.\n        \"\"\"\n        if len(nums) == 1:\n            return nums\n        nums.sort(key=lambda x, y: x.sum().sum())\n        return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for i in range(len(nums)):\n        num = nums[i]\n        if num in nums:\n            return num\n    return 0", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the list of integers in ascending order.\n        \"\"\"\n        nums = sorted(nums, key=lambda n: n.sum(0))\n        return nums\n\n    def sort_asc(nums):\n        \"\"\"\n        Sort the list of integers in descending order.\n        \"\"\"\n        nums = sorted(nums, key=lambda n: n.sum(1))\n        return nums\n\n    def sort_desc(nums):\n        \"\"\"\n        Sort the list of integers in ascending order.\n        \"\"\"\n        nums = sorted(nums, key=lambda n: n.sum(-1))\n        return nums\n\n    def sorted(nums):\n        \"\"\"\n        Sort the list of integers in ascending order.\n        \"\"\"\n        nums = sorted(nums, key=lambda n: n.sum(1))\n        return nums\n\n    def list_sort(nums):\n        \"\"\"\n        Sort the list of integers in descending order.\n        \"\"\"\n        nums = sorted(nums, key=lambda n: n.sum(-1))\n        return nums\n\n    def list_sort_desc(nums):\n        \"\"\"\n        Sort the list of integers in descending order.\n        \"\"\"\n        nums = sorted(nums,", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        return x[0] - x[1]\n\n    for num in nums:\n        if num in sorted(nums):\n            return sort(nums[num])\n    return None", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for i, num in enumerate(nums):\n        if num < 0:\n            return i\n        else:\n            return num + 1\n\n    # Sort by the sum of their digits\n    nums = list(sorted(nums, key=lambda num: num.sum()))\n    nums = list(sorted(nums, key=lambda num: num.sum()))\n    nums = list(sorted(nums, key=lambda num: num.sum()))\n\n    # Sort by the sum of their digits\n    nums = list(sorted(nums, key=lambda num: num.sum(axis=0)))\n    nums = list(sorted(nums, key=lambda num: num.sum(axis=0)))\n    nums = list(sorted(nums, key=lambda num: num.sum(axis=0)))\n    nums = list(sorted(nums, key=lambda num: num.sum(axis=0)))\n    nums = list(sorted(nums, key=lambda num: num.sum(axis=0)))\n    nums = list(sorted(nums, key=lambda num: num.sum(axis=0)))\n    nums = list(sorted(nums, key=lambda num: num.sum", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return (sorted(nums), sorted(nums[-1]))\n\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return (sorted(nums[-1]), sorted(nums[-1]))\n\n    def reverse(nums):\n        \"\"\"\n        Return the reverse of the given list of integers\n        in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return (sorted(nums[-1]), reversed(nums[-1]))\n\n    def sum(nums):\n        \"\"\"\n        Sum the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return (sorted(nums[-1]), sum(nums[", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted([int(x) for x in nums], key=lambda x: int(x) if x > 0, reverse=False)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, list):\n        nums = [nums]\n    for num in nums:\n        if num in nums:\n            yield num\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    \"\"\"\n    def sort(i, j):\n        if (i < j) and (j < i):\n            return (i, j)\n        else:\n            return (j, i)\n    sort([1, 11, -1, -11, -12], -1)\n\n    order_by_points([1, 11, -1, -11, -12]).sort(key=sort)\n    order_by_points([]).sort(key=sort)\n\n    return order_by_points([-1, -11, 1, -12, 11])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, list):\n        nums = list(nums)\n    else:\n        nums = [nums]\n\n    return sorted(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda x: x[0] + x[1])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Returns a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        # sort\n        nums.sort(key=lambda n: n.sum())\n        # return\n        return (order_by_points(nums))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sort(nums)[0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum\n        of their digits.\n\n        Parameters\n        ----------\n        nums : list of integers\n            The list of integers to sort\n\n        Returns\n        -------\n        list : list of integers\n            The sorted list of integers\n\n        Examples\n        --------\n        >>> from itertools import product\n        >>> from itertools import product__contains\n        >>> product([1, 11, -1, -11, -12]) == [1, 11, -1, -11, -12]\n        >>> product([]) == []\n        \"\"\"\n        nums = product(nums)\n        if nums == []:\n            return []\n        else:\n            return [num for num in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(list):\n        for i in range(len(list)):\n            if list[i] == list:\n                return i, i\n            else:\n                return list[i], list[i+1]\n        return 0, 0\n\n    def sum(list):\n        return sum(order_by_points(list)) + sum(order_by_points(list)) + sum(order_by_points(list))\n\n    return sum, sum, sum", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sorts the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        for num in nums:\n            if num.sum() == 1:\n                return (num, 0)\n            elif num.sum() == -1:\n                return (num, -1)\n            else:\n                return (num, num.sum())\n        return (num, 0)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums)\n    nums = [num for num in nums]\n    nums = [num for num in nums if num.isdigit()]\n    nums = [num for num in nums if num.isdigit() if num.isdigit()]\n    nums = [num for num in nums if num.isdigit() if num.isdigit()]\n    nums = [num for num in nums if num.isdigit() if num.isdigit()]\n    nums = [num for num in nums if num.isdigit() if num.isdigit()]\n    nums = [num for num in nums if num.isdigit() if num.isdigit()]\n    nums = [num for num in nums if num.isdigit() if num.isdigit()]\n    nums = [num for num in nums if num.isdigit() if num.isdigit()]\n    nums = [num for num in nums if num.isdigit() if num.isdigit()]\n    nums = [num for num in nums if num.isdigit() if num.isdigit()]\n    nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return list(map(sort, nums))[0]\n\n    def count(nums):\n        \"\"\"\n        Count the number of elements in the given list of integers\n        in ascending order.\n        \"\"\"\n        return list(map(count, nums))[0]\n\n    def count_less(nums):\n        \"\"\"\n        Count the number of elements in the given list of integers\n        in descending order.\n        \"\"\"\n        return list(map(count_less, nums))[0]\n\n    def count_greater(nums):\n        \"\"\"\n        Count the number of elements in the given list of integers\n        in ascending order.\n        \"\"\"\n        return list(map(count_greater, nums))[0]\n\n    def count_abs(nums):\n        \"\"\"\n        Count the number of elements in the given list of integers\n        in ascending order.\n        \"\"\"\n        return list(map(count_abs, nums))[0]\n\n    def count_neg(nums):\n        \"\"\"\n        Count the number of elements in the given list of integers\n        in descending order.\n        \"\"\"\n        return list(map(count_neg, nums))[0]\n\n    def count_", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort the list\n    nums = nums.sort(key=lambda x: x.sum())\n\n    if nums is not None:\n        return sorted(nums, key=lambda x: x.index, reverse=True)\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sort(list):\n        if isinstance(list, list):\n            return sort(list[0], -1)\n        else:\n            return sort(list, -1)\n\n    def count(list):\n        count = 0\n        for item in list:\n            count += 1\n        return count\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        for item in nums:\n            if item < 0:\n                continue\n            if item >= count:\n                continue\n            sort_by_points(nums[item])\n        return sort_by_points(nums)\n\n    def count_by_points(nums):\n        \"\"\"\n        Count the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        for item in nums:\n            if item < 0:\n                continue\n            if item >= count_by_points:\n                continue\n            count_by_points(nums[item])\n        return count_by_points(nums)\n\n    def count_by_points_numbers(nums):\n        \"\"\"", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    nums = sorted(nums, key=lambda x: x.sum, reverse=True)\n\n    nums = nums[:-1].replace('-', '').replace('.', '')\n    nums = nums[-1].replace('.', '')\n\n    for i in range(len(nums)):\n        nums[i] = nums[i].replace('.', '')\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def func(nums):\n        if nums < 0:\n            return -1\n        for num in nums:\n            if num >= 0:\n                return num + 1\n        return 0\n    return func", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums)\n    return sum([ord(x) for x in nums])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort_ord(n):\n        \"\"\"\n        Sort the given list of integers in ascending order by sum of digits.\n        \"\"\"\n        return sorted(n, key=sort_ord)\n\n    def sort_ord_deg(n):\n        \"\"\"\n        Sort the given list of integers in ascending order by sum of digits.\n        \"\"\"\n        return sorted(n, key=sort_ord_deg)\n\n    def sort_ord_deg_ord(n):\n        \"\"\"\n        Sort the given list of integers in ascending order by sum of digits.\n        \"\"\"\n        return sorted(n, key=sort_ord_deg_ord)\n\n    def sort_ord_deg_ord_deg(n):\n        \"\"\"\n        Sort the given list of integers in ascending order by sum of digits.\n        \"\"\"\n        return sorted(n, key=sort_ord_deg_ord_deg)\n\n    def sort_ord_deg_ord_deg(n):\n        \"\"\"\n        Sort the given list of integers in ascending order by sum of digits.\n        \"\"\"\n        return sorted(n, key=sort_ord_deg_ord_deg_ord)\n\n    def sort_ord_deg(n):\n        \"\"\"\n        Sort the given list of integers in ascending order by sum of digits.", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort the integers in ascending order\n    nums.sort(key=lambda i: i + 1)\n    nums = sorted(nums, key=lambda i: i + 1)\n\n    # get the sum of all digits\n    nums = list(map(int, nums))\n    nums = nums[:-1].sum(0)\n    nums = [nums[-1] for num in nums]\n    nums = nums[:-1].astype(int)\n\n    # write a function which sorts the given list of integers\n    return function(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Return a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        if isinstance(nums, int):\n            return nums[0]\n        if isinstance(nums, list):\n            return nums.sort(key=lambda x: x[0])\n        return nums[0]\n\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        if isinstance(nums, int):\n            return nums[0]\n        if isinstance(nums, list):\n            return nums.sort(key=lambda x: x[0])\n        return sorted(nums)\n\n    def sort_asc(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        if isinstance(nums,", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        \"\"\"\n        Sort a list of integers in ascending order by their sum of digits.\n        \"\"\"\n        if a[0] > b[0]:\n            return -1\n        if a[0] < b[0]:\n            return 1\n        return 0\n\n    def sort_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order by their sum of digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> sort_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> sort_by_points([]) == []\n    \"\"\"\n    def sort_by_points(a, b):\n        \"\"\"\n        Sort a list of integers in ascending order by their sum of digits.\n        \"\"\"\n        if a[0] > b[0]:\n            return -1\n        if a[0] < b[0]:\n            return 1\n        return 0\n\n    def sort_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order by their sum of digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort_by_points([1, 11, -1, -11, -12]) == [1, -11, 1, -12, 11]\n        >>> sort_by_points([]) == []\n        \"\"\"\n        if isinstance(nums, int):\n            return nums\n        if isinstance(nums, list):\n            nums = [nums]\n        for num in nums:\n            num = nums[-1:]\n            if num == -1:\n                num = nums[-1]\n            sort_by_points(num)\n        if num in nums:\n            return nums[-1]\n    return sort_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(list):\n        if len(list) == 1:\n            return list[0]\n        elif len(list) > 1:\n            return sorted(list, key=lambda x: x[0])\n        else:\n            return list[0]\n\n    def write(list, order):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        if order == 'asc':\n            return sort(list)\n        elif order == 'desc':\n            return sort(list[::-1])\n        else:\n            return list[0]\n\n    def write_order(list, order):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        if order == 'asc':\n            return write_order(list[::-1])\n        elif order == 'desc':\n            return write_order(list[::-1][::-1])\n        else:\n            return list[0]\n\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums)\n    nums = list(set([int(x) for x in nums]))\n    nums = set([int(x) for x in nums])\n    nums = set([int(x) for x in nums])\n    nums = set([int(x) for x in nums])\n    nums = set([int(x) for x in nums])\n    nums = set([int(x) for x in nums])\n    nums = set([int(x) for x in nums])\n    nums = set([int(x) for x in nums])\n    nums = set([int(x) for x in nums])\n    nums = set([int(x) for x in nums])\n    nums = set([int(x) for x in nums])\n    nums = set([int(x) for x in nums])\n    nums = set([int(x) for x in nums])\n    nums = set([int(x) for x in nums])\n    nums = set([int(x) for x in nums])\n    nums = set(", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort by sum of digits\n    nums = sorted(nums, key=lambda x: x[0])\n    nums = [int(i) for i in range(len(nums))]\n    nums = [int(i) for i in range(len(nums))]\n    nums = [int(i) for i in range(len(nums))]\n    nums = [int(i) for i in range(len(nums))]\n    nums = [int(i) for i in range(len(nums))]\n    nums = [int(i) for i in range(len(nums))]\n    nums = [int(i) for i in range(len(nums))]\n    nums = [int(i) for i in range(len(nums))]\n    nums = [int(i) for i in range(len(nums))]\n    nums = [int(i) for i in range(len(nums))]\n    nums = [int(i) for i in range(len(nums))]\n    nums = [int(i) for i in range(", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda i: i.sum())\n    return [order_by_points(i) for i in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, int):\n        nums = (nums,)\n    nums = [int(num) for num in nums]\n    return sorted(nums, key=lambda n: n[0])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted([int(x) for x in nums])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(list):\n        \"\"\"\n        Sort the list in ascending order by sum of digits.\n        \"\"\"\n        return list.sort(key=sort.sum)\n\n    def order_by_points(nums):\n        \"\"\"\n        Order the given list of integers by sum of their digits.\n        \"\"\"\n        return sorted([sort(num) for num in nums], key=sort.sum)\n\n    def _sorted_points(nums):\n        \"\"\"\n        Return the sorted list of integers.\n        \"\"\"\n        nums = list(sort(nums))\n        return nums\n\n    def _sorted_points(nums):\n        \"\"\"\n        Return the sorted list of integers.\n        \"\"\"\n        nums = list(sort(nums))\n        return nums\n\n    def _sorted_points(nums):\n        \"\"\"\n        Return the sorted list of integers.\n        \"\"\"\n        nums = list(sort(nums))\n        return nums\n\n    def _sorted_points(nums):\n        \"\"\"\n        Return the sorted list of integers.\n        \"\"\"\n        nums = list(sort(nums))\n        return nums\n\n    def _sorted_points(nums):\n        \"\"\"\n        Return the sorted list of integers.\n        \"\"\"\n        nums = list(sort(nums))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(n):\n        \"\"\"\n        Sort the given list of integers in ascending order by the sum\n        of their digits.\n        \"\"\"\n        return (n[0] - n[1]) * (n[1] - n[0])\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in descending order by the sum\n        of their digits.\n        \"\"\"\n        return (n[0] - n[1]) * (n[1] - n[0])\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order by the sum\n        of their digits.\n        \"\"\"\n        return (n[0] - n[1]) * (n[1] - n[0])\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in descending order by the sum\n        of their digits.\n        \"\"\"\n        return (n[0] - n[1]) * (n[1] - n[0])\n\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order by the sum\n        of their digits.\n        \"\"\"\n        return (n[0] - n[1]) * (n[1] - n[0])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            nums[i] = 1\n        if nums[i] == 1:\n            nums[i] = -1\n        if nums[i] == -1:\n            nums[i] = 0\n        if nums[i] < -1:\n            nums[i] -= 1\n        nums[nums[i]-1] = nums[i]\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # get the order by points\n    nums = np.asarray(nums)\n    order = np.where(nums >= 0, nums <= nums - 1)\n    nums = np.argmax(order)\n    nums = np.reshape(nums, 1, nums)\n    nums = [np.argmin(nums) for nums in nums]\n    nums = np.reshape(nums, 1, nums)\n    nums = np.argmax(nums)\n    nums = np.reshape(nums, 1, nums)\n    nums = np.argmax(nums)\n    nums = np.argmax(nums)\n    nums = np.argmax(nums)\n    nums = np.argmax(nums)\n    nums = np.argmax(nums)\n    nums = np.argmax(nums)\n    nums = np.argmax(nums)\n    nums = np.argmax(nums)\n    nums = np.argmax(nums)\n    nums = np.argmax(nums)\n    nums = np.argmax(nums)\n    nums = np.argmax(nums)\n    num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Order the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        def order_by_points(nums):\n            \"\"\"\n            Order the given list of integers\n            in ascending order according to the sum of their digits.\n            Note: if there are several items with similar sum of their digits,\n            order them based on their index in original list.\n            \"\"\"\n            return nums.sort(key=lambda num: num.sum)\n        return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # Sort the list of integers\n    nums = sorted(nums, key=lambda x: x[0], reverse=True)\n\n    nums.sort(key=lambda x: x[0], reverse=True)\n\n    # Sort the list of integers by their sum of their digits\n    nums.sort(key=lambda x: x[0].sum, reverse=True)\n\n    # Sort the list of integers by their sum of their digits\n    nums.sort(key=lambda x: x[0].sum(axis=1), reverse=True)\n\n    # Sort the list of integers by their sum of their digits\n    nums.sort(key=lambda x: x[0].sum(axis=2), reverse=True)\n\n    # Sort the list of integers by their sum of their digits\n    nums.sort(key=lambda x: x[0].sum(axis=3), reverse=True)\n\n    # Sort the list of integers by their sum of their digits\n    nums.sort(key=lambda x: x[0].sum(axis=4), reverse=True)\n\n    # Sort the list of integers by their sum of their digits\n    nums.sort(key=lambda x: x[0].sum(axis=5), reverse=True)\n\n    # Sort the list of integers by their sum of their digits\n    nums.sort(key=", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort the list of numbers\n    nums = list(range(0, nums.count() + 1))\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    nums.sort()\n    num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort by sum of digits\n    nums = nums.sort(key=lambda n: n + 1)\n    nums = nums.sort(key=lambda n: n - 1)\n    nums = nums.sort(key=lambda n: n + 1)\n    nums = nums.sort(key=lambda n: n - 1)\n    nums = nums.sort(key=lambda n: n + 1)\n    nums = nums.sort(key=lambda n: n - 1)\n    nums = nums.sort(key=lambda n: n + 1)\n    nums = nums.sort(key=lambda n: n + 1)\n    nums = nums.sort(key=lambda n: n + 1)\n    nums = nums.sort(key=lambda n: n + 1)\n    nums = nums.sort(key=lambda n: n + 1)\n    nums = nums.sort(key=lambda n: n + 1)\n    nums = nums.sort(key=lambda n: n + 1)\n    nums = nums.sort(key=lambda n: n + 1)\n    nums = nums.sort(key=", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(nums)\n    nums.sort(key=sum)\n    return [nums[k] for k in range(len(nums))]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted([(i, nums[i]) for i in nums])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, list):\n        nums = [nums]\n    if isinstance(nums, tuple):\n        nums = [nums.items()]\n    for num in nums:\n        if num in nums:\n            order_by_points(nums)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        return a.sum() - b.sum()\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    nums.sort(key=lambda d: d.sum())\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        return a.sum() - b.sum()\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return [sum([ord(x) for x in nums]) for nums in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        return int(x) - int(x.index(1))\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        nums = nums[0]\n    nums = nums.split('.')\n    nums = nums.sort(key=lambda x: x[0])\n    if len(nums) == 1:\n        nums = nums[0]\n    nums = nums.split('.')\n    nums = nums.sort(key=lambda x: x[0])\n    if len(nums) == 1:\n        nums = nums[0]\n    nums = nums.split('.')\n    nums = nums.sort(key=lambda x: x[0])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        if a < b:\n            return a\n        else:\n            return b\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        if a == b:\n            return -1\n        return sum([a, b])\n    sort([1, 11, -1, -11, -12], [1, 11, -1, -11, -12])\n    sort([], [])\n    sort([], [])\n    sort([1, 11, -1, -11, -12], [1, 11, -1, -11, -12])\n    sort([1, 11, -1, -11, -12], [1, 11, -1, -11, -12])\n    sort([1, 11, -1, -11, -12], [1, 11, -1, -11, -12])\n    sort([1, 11, -1, -11, -12], [1, 11, -1, -11, -12])\n    sort([1, 11, -1, -11, -12], [1, 11, -1, -11, -12])\n    sort([1, 11, -1, -11, -12], [1, 11, -1, -11, -12])\n    sort([1, 11, -1, -11, -12], [1, 11, -1, -11, -12])\n    sort([1, 11, -1, -11, -12], [1, 11, -1, -11, -12])\n    sort(", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda d: d.sum())\n    nums = [int(x) for x in nums]\n    return [int(x) for x in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums:\n        return sorted(nums, key=lambda x: x[0], reverse=True)\n\n    return sorted(nums, key=lambda x: x[0], reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda n: n.sum())\n    nums = sorted(nums, key=lambda n: n.index)\n    nums = sorted(nums, key=lambda n: n.index)\n    nums = sorted(nums, key=lambda n: n.index)\n    nums = sorted(nums, key=lambda n: n.sum())\n    nums = sorted(nums, key=lambda n: n.index)\n    nums = sorted(nums, key=lambda n: n.sum())\n    nums = sorted(nums, key=lambda n: n.index)\n    nums = sorted(nums, key=lambda n: n.sum())\n    nums = sorted(nums, key=lambda n: n.index)\n    nums = sorted(nums, key=lambda n: n.sum())\n    nums = sorted(nums, key=lambda n: n.index)\n    nums = sorted(nums, key=lambda n: n.sum())\n    nums = sorted(nums, key=lambda n: n.index)\n    nums = sorted(nums, key=lambda n: n.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, int):\n        nums = int(nums)\n    if isinstance(nums, str):\n        nums = str(nums)\n    if isinstance(nums, list):\n        nums = list(nums)\n    if isinstance(nums, tuple):\n        nums = tuple(nums)\n    if isinstance(nums, list):\n        nums = list(nums)\n    return nums.sort(lambda x, y: x[0] + y[0])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = np.asarray(nums)\n    nums = np.sort(nums, ascending=order_by_points)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return 0\n    if nums.count(0) == 0:\n        return -1\n    if nums.count(1) == 0:\n        return -1\n    if nums.count(2) == 0:\n        return -1\n    if nums.count(3) == 0:\n        return -1\n    if nums.count(4) == 0:\n        return -1\n    if nums.count(5) == 0:\n        return -1\n    if nums.count(6) == 0:\n        return -1\n    if nums.count(7) == 0:\n        return -1\n    if nums.count(8) == 0:\n        return -1\n    if nums.count(9) == 0:\n        return -1\n    if nums.count(10) == 0:\n        return -1\n    if nums.count(11) == 0:\n        return -1\n    if nums.count(12) == 0:\n        return -1\n    if nums.count(13) == 0:\n        return -1\n    if nums.count(14) == 0:\n        return -1\n    if nums.count(15) == 0:\n        return -1\n    if nums.count(16) == 0:\n        return -1\n    if nums.count(17", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        if a == b:\n            return -1\n        elif a == b:\n            return 1\n        else:\n            return 0\n    sort([1, 11, -1, -11, -12])\n    sort([-1, -11, 1, -12, 11])\n    sort([])\n    sort([1, 11, -1, -11, -12])\n\n    def sort_leaves(nums):\n        \"\"\"\n        Sort the given list of integers by their leaves\n        \"\"\"\n        if len(nums) == 1:\n            return 0\n        elif len(nums) > 1:\n            return 1\n        else:\n            return -1\n\n    def sort_leaves_leaves(nums):\n        \"\"\"\n        Sort the given list of integers by their leaves\n        with the leftmost leaves as the leaves.\n        \"\"\"\n        if len(nums) == 1:\n            return -1\n        elif len(nums) > 1:\n            return 1\n        else:\n            return 0\n\n    def sort_leaves_leaves_leaves(nums):\n        \"\"\"\n        Sort the given list of integers by their leaves with the leftmost leaves as the leaves.\n        \"\"\"\n        if len(nums) == 1:\n            return -1\n        elif len(nums) > 1:\n            return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(list):\n        if len(list) == 1:\n            return list[0]\n        elif len(list) == 2:\n            return list[0], list[1]\n        else:\n            return list[0], list[1]\n\n    def order_by_points(nums):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        for num in nums:\n            order_by_points(num)\n        return sorted(order_by_points(nums))</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda i: i[0])\n    return ','.join([order_by_points(i) for i in nums])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] < nums[i+1]:\n            order_by_points(nums[i], nums[i+1+1])\n    return order_by_points(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[1]\n    if len(nums) == 3:\n        return nums[2]\n    return nums[1:]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return list(sort(nums, key=lambda num: num.sum()))\n\n    def sort(nums, key):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to their sum of digits.\n        \"\"\"\n        for num in nums:\n            if key == num:\n                return num.sum()\n        return -1\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(nums)\n    nums = sorted(nums, key=lambda n: n[0])\n    nums = list(nums)\n    nums = list(nums)\n    nums = list(nums)\n    nums = list(nums)\n    nums = list(nums)\n    nums = list(nums)\n    nums = list(nums)\n    nums = list(nums)\n    nums = list(nums)\n    nums = list(nums)\n    nums = list(nums)\n    nums = list(nums)\n    nums = list(nums)\n    nums = list(nums)\n    nums = list(nums)\n    nums = list(nums)\n    nums = list(nums)\n    nums = list(nums)\n    nums = list(nums)\n    nums = list(nums)\n    nums = list(nums)\n    nums = list(nums)\n    nums = list(nums)\n    nums = list(nums)\n    nums = list(nums)\n    nums = list(nums)\n    nums = list(nums)\n    nums = list(nums)\n    nums = list(nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def write(nums):\n        \"\"\"\n        Write the function to a file.\n        \"\"\"\n        with open(\"order_by_points.txt\", \"w\") as f:\n            f.write(ord(nums[0]) +'' + ord(nums[1]) +'' + ord(nums[2]) + '\\n')\n            f.write(ord(nums[3]) +'' + ord(nums[4]) + '\\n')\n            f.write(ord(nums[5]) +'' + ord(nums[6]) + '\\n')\n            f.write(ord(nums[7]) +'' + ord(nums[8]) + '\\n')\n            f.write(ord(nums[9]) +'' + ord(nums[10]) + '\\n')\n            f.write(ord(nums[11]) +'' + ord(nums[12]) + '\\n')\n            f.write(ord(nums[13]) +'' + ord(nums[14]) + '\\n')\n            f.write(ord(nums[15]) +'' + ord(nums[16]) + '\\n')\n            f.write(ord(nums[17]) +'' + ord(nums[18]) + '\\n')\n            f.write(", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sort(s):\n        \"\"\"\n        Sort the given list of integers in ascending order by sum of their digits.\n        \"\"\"\n\n        for x in s.split(\",\"):\n            if isinstance(x, int):\n                if x < 0:\n                    x = -1\n                if x > 1:\n                    x = 1\n                sort(x)\n            elif isinstance(x, str):\n                if x < 0:\n                    x = -1\n                if x > 1:\n                    x = 1\n                sort(x)\n            elif isinstance(x, long):\n                if x < 0:\n                    x = -1\n                if x > 1:\n                    x = 1\n                sort(x)\n            elif isinstance(x, float):\n                if x < 0:\n                    x = -1\n                if x > 1:\n                    x = 1\n                sort(x)\n            elif isinstance(x, int):\n                if x < 0:\n                    x = -1\n                if x > 1:\n                    x = 1\n                sort(x)\n            elif isinstance(x, bool):\n                if x < 0:\n                    x = -1\n                if x > 1:\n                    x = 1\n                sort(x)\n            elif isinstance(x, int):\n                if x < 0:\n                    x = -1\n                if x > 1:\n                    x = 1\n                sort(x", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    order = 0\n    for num in nums:\n        order += 1\n        if num == 0:\n            order = -1\n        elif num == 1:\n            order = -1\n        elif num == 2:\n            order = -1\n        elif num == 3:\n            order = -1\n        elif num == 4:\n            order = -1\n        elif num == 5:\n            order = -1\n        elif num == 6:\n            order = -1\n        elif num == 7:\n            order = -1\n        elif num == 8:\n            order = -1\n        elif num == 9:\n            order = -1\n        elif num == 10:\n            order = -1\n        elif num == 11:\n            order = -1\n        elif num == 12:\n            order = -1\n        else:\n            order = order + 1\n    order_by_points(nums)\n    return order", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(i, j):\n        return j - i\n    nums = sorted(nums)\n    if nums.count(0) == 1:\n        return -1\n    for i in range(nums.count(0)):\n        if nums[i] == nums[1:]:\n            return i\n    nums.sort(sort)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        nums = [1, 11, -1, -11, -12]\n    return sorted(nums, key=lambda i: i)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sort.sort(order_by_points, key=lambda x: x[0])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort the list of numbers in ascending order\n    nums = sorted(nums, key=lambda num: num.sum())\n    # Sort the list of numbers in descending order\n    nums = sorted(nums, key=lambda num: num.index(num.get(0)) + 1)\n    # Return the sorted list of numbers\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        \"\"\"\n        Sort the given list in ascending order by the sum of their digits.\n        \"\"\"\n        for i in range(len(a)):\n            if a[i] < b[i]:\n                return -1\n        return 0\n    sort([1, 11, -1, -11, -12], -1)\n    sort([], -1)\n\n    def sort_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in descending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> sort_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> sort_by_points([]) == []\n    \"\"\"\n    def sort_by_points(a, b):\n        \"\"\"\n        Sort the given list in descending order by the sum of their digits.\n        \"\"\"\n        for i in range(len(a)):\n            if a[i] > b[i]:\n                return -1\n        return 0\n    sort_by_points([1, 11, -1, -11, -12], -1)\n    sort_by_points([], -1)\n\n    def sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort the list\n    sorted = [(num, sum) for num, sum in nums.items()]\n    # Order the list by sum\n    ordered_list = sorted.sort(key=lambda num: sum)\n    return ordered_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(items):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        for i, item in enumerate(items):\n            if isinstance(item, int):\n                return sorted([(i, item) for i in range(len(items))])\n            else:\n                return sorted([(i, item) for i in range(len(items))])\n\n    def sort_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers in descending order\n    according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> sort_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> sort_by_points([]) == []\n    \"\"\"\n    def sort_by_points(items):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        for i", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(item, start, end):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        Return the sorted list.\n        \"\"\"\n        if not start or not end:\n            return item\n        start, end = start, end\n        nums = sorted(nums, key=sort)\n        return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def order_by_points(nums):\n        \"\"\"\n        Order the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return (sum(range(nums)) for nums in nums)\n\n    def sorted_numbers(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to their sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return (sum(range(nums)) for nums in nums)\n\n    def order_by_points(nums):\n        \"\"\"\n        Order the given list of integers in ascending order\n        according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        return (sum(range(nums)) for nums in nums)\n\n    def sorted_numbers(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to their sum of their digits.\n        Note: if there are several items with similar sum of their digits", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    \"\"\"\n    # sort by the sum of the digits of the first element\n    def sort(n):\n        \"\"\"\n        Sort the given list in ascending order by the sum of the digits of the first element.\n        \"\"\"\n        return sorted(n, key=sort.key)\n\n    def sorted(n):\n        \"\"\"\n        Sort the given list in descending order by the sum of the digits of the first element.\n        \"\"\"\n        return sorted(n, key=sort.key)\n\n    def __cmp__(a, b):\n        \"\"\"\n        Compare two integers.\n        \"\"\"\n        return cmp(a.sum(), b.sum())\n\n    def __eq__(a, b):\n        \"\"\"\n        Compare two integers.\n        \"\"\"\n        return isinstance(a, b)\n\n    def __ne__(a, b):\n        \"\"\"\n        Compare two integers.\n        \"\"\"\n        return not isinstance(a, b)\n\n    def __lt__(a, b):\n        \"\"\"\n        Compare two integers.\n        \"\"\"\n        return isinstance(a, b) and a < b\n\n    def __le__(a, b):\n        \"\"\"\n        Compare two integers.\n        \"\"\"\n        return isinstance(a, b) and a > b\n\n    def __gt__(a, b):\n        \"\"\"\n        Compare", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda n: n[0], reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return\n    nums = list(range(len(nums)))\n    nums.sort()\n    nums = list(map(ord, nums))\n    nums = list(map(ord, nums))\n    nums = list(map(ord, nums))\n    nums = list(map(ord, nums))\n    nums = list(map(ord, nums))\n    nums = list(map(ord, nums))\n    nums = list(map(ord, nums))\n    nums = list(map(ord, nums))\n    nums = list(map(ord, nums))\n    nums = list(map(ord, nums))\n    nums = list(map(ord, nums))\n    nums = list(map(ord, nums))\n    nums = list(map(ord, nums))\n    nums = list(map(ord, nums))\n    nums = list(map(ord, nums))\n    nums = list(map(ord, nums))\n    nums = list(map(ord, nums))\n    nums = list(map(ord, nums))\n    nums = list(map(ord, nums))\n    num"]]