[["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if not isinstance(strings: List[str], List):\n        raise TypeError(\"strings must be of type List\")\n    if isinstance(substring, str):\n        return strings[substring]\n    if not isinstance(strings: List[str], list):\n        return strings[:-1]\n    filter = list(filter_by_substring(strings[:], substring))\n    return filter", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for string in strings:\n        if string.startswith(substring):\n            return [string]\n    return list(filter_by_substring(string, substring))\n</s>", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [\n        filter_by_substring(str(i).replace('-', '_'), substring)\n        for i in strings\n    ]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if strings:\n        return filter_by_substring(strings, substring)\n    else:\n        return filter_by_substring(strings[:-1], substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [str.lower(x) for x in strings if substring.lower(x)!= substring]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if strings:\n        return [str(x) for x in strings if substring in x.split(' ')]\n    return List([])", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    assert isinstance(strings[0], str)\n    assert isinstance(strings[1], str)\n    assert isinstance(strings[2], str)\n    assert isinstance(strings[3], str)\n    assert isinstance(strings[4], str)\n    assert isinstance(strings[5], str)\n    assert isinstance(strings[6], str)\n    assert isinstance(strings[7], str)\n    assert isinstance(strings[8], str)\n\n    return [string for string in strings if string in substring]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    try:\n        return strings.filter(operator.sub)[0]\n    except ValueError:\n        return strings.filter(operator.eq)[0]\n    except TypeError:\n        return strings.filter(operator.not in)[0]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [(i, s) for i, s in enumerate(strings) if substring in s]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    assert isinstance(strings, List[str])\n    assert isinstance(strings[-1], str)\n    return [(str, strings[-1])]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_strs = []\n    for i in range(len(strings)):\n        if substring.find(strings[i])!= -1:\n            filtered_strs.append(strings[i])\n    return filtered_strs", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter_by_substring(strings, substring))", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for string in strings:\n        if string.startswith(substring):\n            return filter_by_substring([strings.index(string)], substring)\n    return list(string.split(\",\"))", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for item in string:\n        if substring.startswith(item):\n            return items\n\n    filter_by_substring([], 'a')\n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    filter_by_substring(['abc', 'bacd', 'array'], 'a')\n\n    for item in string:\n        if substring.startswith(item):\n            return items", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings, List[str]):\n        return filter_by_substring(strings, substring)\n    else:\n        return list(strings)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for sub in substring:\n        if isinstance(sub, str):\n            return filter_by_substring(strings, sub)\n        if isinstance(sub, List):\n            return [str(x) for x in strings]\n\n    if isinstance(strings, List):\n        return strings.filter(filter_by_substring).sort()\n\n    return lists.empty(strings.count)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for string in strings:\n        if substring in string:\n            return string\n        return string", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) < 1:\n        raise ValueError(str('%s should be an integer' % substring))\n        \n    list = [str(s) for s in strings]\n    if len(list) < 1:\n        raise ValueError(str('%s should be an integer' % substring))\n        \n    list = [str(s) for s in list if substring in str(s)]\n    if len(list) < 1:\n        raise ValueError(str('%s should be an integer' % substring))\n        \n    filter = List(map(filter_by_substring, list))\n        \n    return filter\n</s>", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) < 1:\n        return None\n    if len(strings) > 1:\n        return strings\n    if substring.startswith(strings[0]):\n        return strings\n    if substring.endswith(strings[0]):\n        return strings[:-1]\n    if substring.startswith(strings[1]):\n        return strings\n    if substring.endswith(strings[1]):\n        return strings[-1:]\n    return None", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for substring in substrings:\n        if substring in strings:\n            return strings[substring]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_strings = []\n    for string in strings:\n        if substring.contains(string):\n            filtered_strings.append(string)\n    return filtered_strings", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for string in strings:\n        if string not in substring:\n            continue\n\n        if isinstance(string, str):\n            return [string]\n        elif isinstance(string, list):\n            return [filter_by_substring(string, substring)]\n        else:\n            raise TypeError(\"%s must be a string, a list or a list: \" % type(string))\n\n    return [filter_by_substring(strings)]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    sub_strings: List[str]\n    for s in strings:\n        sub_strings.add(s)\n    return sub_strings", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for item in strings:\n        if item.startswith(substring):\n            return item.replace(substring, '')\n\n    filter_by_substring([('a', b'abc'), ('a', b'bcd'), ('a', b'cdd'), ('a', b'array'), ('a', b'array')], 'a')\n    return ['abc', 'bacd', 'cde', 'array', 'array']", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter_by_substring(strings, substring))", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) == 1:\n        return strings[0]\n    try:\n        return [(x.lower() for x in strings)]\n    except ValueError:\n        raise TypeError('Input string contains no substring'+ substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    while substring not in strings:\n        strings[ substring ] = substring\n\n    return strings[: substring ]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings, List):\n        return filter_by_substring(strings, substring)\n    return list(filter_by_substring(strings, substring))", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for x in strings:\n        if substring.startswith(x):\n            return [x, x + substring.endswith(x)]\n    return filter_by_substring(strings[:], substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) == 0:\n        return None\n    if len(strings) % 2 == 0:\n        if substring!= 'a' or strings.count(substring) > 1 or substring!= 'bacd':\n            return None\n        return strings.items() - strings.count(substring)\n    if len(strings) % 3 == 0:\n        if substring!= 'a' or strings.count(substring) > 1 or substring!= 'bacd':\n            return None\n        return strings.items() - strings.count(substring)\n    if len(strings) % 4 == 0:\n        if substring!= 'a' or strings.count(substring) > 1 or substring!= 'bacd':\n            return None\n        return strings.items() - strings.count(substring)\n    if len(strings) % 5 == 0:\n        if substring!= 'a' or strings.count(substring) > 1 or substring!= 'bacd':\n            return None\n        return strings.items() - strings.count(substring)\n    return None", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(set(matches(strings, substring) for string in strings))", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) > 1:\n        return [str(s) for s in strings]\n    return strings", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered = []\n    for string in strings:\n        if substring:\n            filtered.append(str(string))\n        else:\n            filtered.append(string)\n    return filtered", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [str(x) for x in strings if substring in x]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) == 0:\n        return []\n    else:\n        return filter_by_substring(strings, substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if substring in strings:\n        return strings[substring]\n\n    return strings[:-1]\n</s>", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(map(lambda x : strings[x], strings)):\n        if substring not in substrings:\n            return list(filter_by_substring(strings, substring))\n\n        return list(filter_by_substring(strings, substring))</s>", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings, List[str]):\n        return [(s, strings[s.startswith(substring)]) for s in strings]\n    else:\n        return [(s, s) for s in strings]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) == 0 or strings[0] == substring:\n        return None\n    if len(strings) == 1 and strings[0] == substring:\n        return strings\n    return filter_by_substring(strings)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if substring:\n        # Regex of the substring\n        regex = re.compile('^([\\s])([-\\w\\\\s]+)([-\\w\\\\s]+)([-\\w\\\\s]+)([-\\w\\\\s]+)([-\\w\\\\s]+)([-\\w\\\\s]+)')\n    return filter_by_substring(regex.findall(strings), substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings, list):\n        return [strings]\n    if isinstance(strings, List[str]):\n        return [strings.first()]\n    if isinstance(strings, list):\n        return [strings.first()] + [strings.last()]\n    if isinstance(strings, List[str]):\n        return [strings.first()] + [strings.last()] + [strings.last()]\n    if isinstance(strings, List[str]):\n        return [strings.first()] + [strings.last()] + [strings.last()]\n\n    if isinstance(strings, List[str]):\n        return [strings.first()] + [strings.last()]\n    if isinstance(strings, List[str]):\n        return [strings.first()] + [strings.last()] + [strings.last()] + [strings.last()]\n    if isinstance(strings, List[str]):\n        return [strings.first()] + [strings.last()] + [strings.last()] + [strings.last()] + [strings.last()]\n\n    return [strings]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if strings:\n        return [filter_by_substring(s, substring) for s in strings]\n    else:\n        return list(filter_by_substring(strings=strings[substr], substring))", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter_by_substring(strings, substring))", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) > 1:\n        return str(strings)\n    else:\n        return sorted(strings)[strings.index(substr) + 1]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) == 1:\n        return strings[0]\n    if len(strings) > 1:\n        return filter_by_substring(strings, substring)\n    return strings\n</s>", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for string in strings:\n        if substring in string:\n            return [string]\n\n    return list(filter_by_substring(strings, substring))", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [(strings[i], substring[i]) for i in strings]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for s in string:\n        if substring in s:\n            return s\n\n    return filter_by_substring(strings[:-1], substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if substring in strings:\n        return strings[substr]\n    return list(filter_by_substring([strings], substring))\n</s>", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings, str):\n        return strings.filter(substring == substring)\n    else:\n        return strings.filter(substring in substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) == 1:\n        return strings[0]\n    if substring!= '':\n        return filter_by_substring(strings, substring)[:-1]\n    for string in strings:\n        if string.startswith(substring):\n            return string\n    return []\n</s>", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings, str):\n        return strings\n    if isinstance(substring, str):\n        return [strings.index(substring) + 1]\n    return len(strings)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return Filter(strings: strings, substring: substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings, List):\n        return filter_by_substring(strings, substring)\n    else:\n        return filter_by_substring(strings, substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    try:\n        return strings.filter(filter_by_substring).order_by('-alpha')\n    except ValueError:\n        return strings_filter_by_substring.filter(filter_by_substring).order_by('-alpha')", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) == 0:\n        return [strings]\n    if substring in strings:\n        return [strings.get(s, '')]\n\n    filter = List()\n    for string in strings:\n        if substring in string:\n            filter.append(string)\n    return filter", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    result = set()\n    for i in string:\n        if substring.contains(i):\n            result.add(i)\n    for item in result:\n        if item in string:\n            yield item", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings, List):\n        for i in xrange(len(strings)):\n            for j in xrange(i+1, len(strings)):\n                if substring in strings[i] and strings[i][j]!= substring:\n                    return True\n    return False", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) < len(substring):\n        raise ValueError(\"Substrings must be identical.\")\n    try:\n        return filter_by_substring(strings, substring)\n    except ValueError:\n        return strings\n\n    filter_by_substring([], 'abc')\n    filter_by_substring([], 'bacd')\n    filter_by_substring([], 'cde')\n    filter_by_substring([], 'array')\n    filter_by_substring([], 'a')\n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    filter_by_substring(['abc', 'bacd', 'array'], 'a')\n    return sorted(filter_by_substring(strings, substring))", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) < 1 or substring not in strings:\n        raise ValueError('Invalid input!')\n    return filter_by_substring(strings, substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [str(x) for x in strings if x.contains(substring)]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    \"\"\"\n    >>> from sklearn.feature_extraction.text import Text\n    >>> filter_by_substring([['abc', 'bacd', 'cde']], 'a')\n    ['abc', 'bacd', 'array']\n    >>> filter_by_substring(['abc', 'bacd', 'cde']], 'a', 'a')\n    ['abc', 'bacd', 'array']\n    >>> filter_by_substring(['abc', 'bacd', 'cde']], 'a', 'a', 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [(i, strings[i]) for i in strings]\n</s>", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return filter_by_substring(strings, substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for string in strings:\n        if substring.contains(string):\n            return filter_by_substring(string, substring.replace(string, substring.replace(string, '_'), string.replace(string, '_', '_')))", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # The special case of substring is a good warning because it doesn't know if\n    # the substring is found in the input list.  We don't know if it is\n    # for the last element of the list.\n    if substring in strings:\n        return [str(x) for x in strings]\n    else:\n        return [str(x) for x in strings]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for string in strings:\n        if string not in substring:\n            return [string]\n    return [string]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return filter_by_substring(strings, substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return filter_by_substring(strings, substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) == 0:\n        return []\n    for substring in substrings:\n        if substring.startswith(substring):\n            return filtered(strings)\n    return filtered(strings)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    assert(len(strings) <= 1)\n    assert(len(substrings) <= 1)\n    assert(len(strings) <= len(substrings))\n\n    if substring not in strings:\n        raise ValueError('Substr is not in strings')\n\n    for substring in substrings:\n        strings[substrings.index(substring)] = substring.replace(' ', '')\n    return strings", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if not isinstance(strings, List):\n        raise TypeError('expected list of strings, got %s' % strings)\n    if len(strings) < 1:\n        raise TypeError('expected 1 input string, got %s' % strings)\n    if substring not in strings:\n        raise TypeError('expected substring, got %s' % substring)\n    return strings[: substring]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if not isinstance(strings, List[str]):\n        return [strings.first()]\n\n    for string in strings:\n        if substring.startswith(string):\n            return [string]\n\n    return [strings.first()]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # Try to find the first substring\n    if substring in strings:\n        return strings.first(lambda s: s.startswith(substring))\n    return None\n</s>", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings[0], str):\n        return [strings]\n    else:\n        return [filter_by_substring(strings[0], substring) for substring in strings]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for string in strings:\n        if substring in strings:\n            return [string]\n        else:\n            return filter_by_substring(string, substring)\n\n    return list(filter_by_substring(string, substring))", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    assert len(strings) == 1,'string must contain substring'\n    assert len(strings) == 2, 'one string must contain substring'\n    assert len(strings) == 3, 'two string must contain substring'\n    assert len(strings) == 4, 'three string must contain substring'\n    assert len(strings) == 5, 'four string must contain substring'\n    assert len(strings) == 6, 'five string must contain substring'\n    assert len(strings) == 7,'six string must contain substring'\n    assert len(strings) == 8,'seven string must contain substring'\n    assert len(strings) == 9,'seven string must contain substring'\n    assert len(strings) == 10, 'ten string must contain substring'\n    assert len(strings) == 11, 'teen string must contain substring'\n    assert len(strings) == 12, 'fifteen string must contain substring'\n    assert len(strings) == 13, 'fifteen string must contain substring'\n    assert len(strings) == 14, 'fifteen string must contain substring'\n    assert len(strings) == 15, 'eleven string must contain substring'\n    assert len(strings) == 16, 'fif", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for string: str in strings:\n        if substring.startswith(string):\n            yield string\n\n    return filter_by_substring(strings, substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) == 1:\n        return strings[0]\n    for substring in strings:\n        if substring in substrings:\n            return [substring]\n    raise TypeError('regex not supported')", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if not isinstance(strings, List):\n        raise TypeError('You must provide a string')\n    if not isinstance(strings[0], str):\n        raise TypeError('You must provide a string')\n    if not isinstance(strings[0], list):\n        raise TypeError('You must provide a list')\n\n    def add(strings: List[str], substring: str) -> List[str]:\n        \"\"\" Add a string to the list. The string will be replaced by substring\n        \"\"\"\n        if isinstance(strings[0], str):\n            # Remove trailing spaces\n            strings = strings.split(' ')\n        return add(strings, substring)\n\n    def remove(strings: List[str], substring: str) -> List[str]:\n        \"\"\" Remove a string from the list. The string will be replaced by substring\n        \"\"\"\n        if isinstance(strings[0], str):\n            # Remove trailing spaces\n            strings = strings.split(' ')\n        return remove(strings, substring)\n\n    def _find_if(strings: List[str]) -> List[str]:\n        \"\"\" Find a substring in a list\n        >>> _find_if(['a', 'b', 'c', 'd'])\n        ['abc', 'bacd'", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if strings:\n        for s in strings:\n            if substring.startswith(s):\n                return s\n\n    # Sort the list by substring first\n    for i in sorted(strings, key=lambda y: y.split('-')):\n        strings[i] = substring\n\n    return strings[:-1]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings[0], str):\n        return [str(x) for x in strings]\n    elif isinstance(strings[0], list):\n        return [str(x) for x in strings]\n    elif isinstance(strings[0], (list, tuple)):\n        return [str(x) for x in strings]\n    elif isinstance(strings[0], (str, unicode)):\n        return [str(x) for x in strings]\n    elif isinstance(strings[-1], str):\n        return [str(x) for x in strings[-1]]\n    else:\n        return [str(x) for x in strings]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings, List[str]):\n        return [strings.index(substring) + 1 for substring in strings.iteritems()]\n    return [strings.index(substring) + 1]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if not isinstance(strings, List[str]):\n        raise TypeError('Input string must be a list')\n    return filter_by_substring(strings, substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings, List):\n        if isinstance(strings, str):\n            return strings\n        else:\n            return List(strings)\n    return List(strings)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    result = []\n    for string in strings:\n        result.append(filter_by_substring(string, substring))\n    return result", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    assert len(strings) == 1\n    if substring:\n        return strings.filter(str.isdigit)[0]\n    return strings.filter(str.isdigit)[1:]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for string in strings:\n        if string.startswith(substring):\n            return filter_by_substring(string.split(substring), substring)\n    return []\n</s>", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for s in strings:\n        if substring in s:\n            return filter_by_substring(s, substring)\n    return []", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if substring:\n        for item in substring:\n            if item!= 'abc':\n                return [item]\n    return []\n</s>", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # if substring is None, return all\n    if len(strings) == 0:\n        return strings\n    # if substring is not None, return those that are not in strings\n    found_ins: List[str] = List()\n    for string in strings:\n        found_ins.extend(filter_by_substring(string, substring))\n\n    if len(strings) == 1:\n        return strings\n\n    return found_ins", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings, List[str]):\n        return filter_by_substring(strings, substring)\n    else:\n        return list(filter_by_substring(strings, substring))", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter_by_substring(strings, substring))", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if not isinstance(strings, List):\n        raise TypeError('String must be a List')\n\n    if substring not in string:\n        raise TypeError(' substring must be of type String')\n\n    return strings.filter(substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) > 1:\n        result = []\n        for s in strings:\n            result.append(s)\n        return result\n    for string in strings:\n        result = filter_by_substring(string, substring)\n        return result\n    return list(filter_by_substring(strings, substring))", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) <= 1:\n        raise ValueError(\"Input list must be a string\")\n    if len(strings) > 1:\n        raise ValueError(\"Input list must be a list of strings and a string\")\n    if substring in strings:\n        return strings.filter(filter_by_substring, substring)\n    else:\n        return strings", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) == 1:\n        return strings[0]\n    for string in strings:\n        if not isinstance(string, str):\n            return [string]\n        if substring not in strings:\n            return [string]\n        if not filter_by_substring(string, substring):\n            return [string]\n    return [string]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings, list):\n        for string in strings:\n            string = substring.lower().replace(' ', '_')\n            if string in strings:\n                return [str(string)]\n            else:\n                return [str(string)]\n    else:\n        return sorted(strings, key=filter_by_substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) == 0:\n        return list(strings)\n    return list(strings[:-1] if strings[-1] not in strings else strings[len(strings) - 1])", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_strings = [str(s) for s in strings if substring.find(s)!= -1]\n\n    for string in filtered_strings:\n        return filter_by_substring(string, substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for string in strings:\n        if substring in string:\n            return [string]\n    return []", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for s in strings:\n        if isinstance(s, str):\n            if substring in s or s.startswith(s):\n                return s\n        elif isinstance(s, list):\n            if substring in s:\n                return s\n        elif isinstance(s, tuple):\n            if substring in s and len(s) == 1:\n                return s\n    return filter_by_substring(s)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_strings = filter(lambda x: x in strings, strings)\n\n    return filtered_strings", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) > 0:\n        for string in strings:\n            if substring.isupper(string):\n                return filter_by_substring(strings, substring)\n        return []\n    else:\n        return sorted(strings)\n\n    def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n        if substring.isupper(string):\n            return filter_by_substring(strings, substring)\n        return []\n    for string in strings:\n        if substring.isupper(string):\n            return filter_by_substring(strings, substring)\n        return sorted(strings)\n\n    def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n        for string in strings:\n            if substring.isupper(string):\n                return filter_by_substring(strings, substring)\n        return sorted(strings)\n\n    def filtered_substrings(self, strings: List[str], substring: str) -> List[str]:\n        for string in strings:\n            if substring.isupper(string):\n                return filtered_substrings(strings, substring)\n               \n        return []\n\n    def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n        if substring.is", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if strings:\n        for string in strings:\n            if substring in string.split(','):\n                return filter_by_substring(string.split(',')[0], substring)\n            else:\n                return filter_by_substring(string.split(',')[0], string)\n\n\n    return [str(i) for i in strings]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for string in strings:\n        if substring in strings:\n            return filter_by_substring(string, substring)\n    raise TypeError(\"Expected \" + \", \".join(strings))", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) == 1:\n        return strings\n    if substring == 'a' and len(strings):\n        return strings\n    if len(strings) > 1:\n        return strings\n\n    filter_by_substring(strings, substring)\n    filter_by_substring(strings, '-')\n    return strings", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) > 1:\n        raise IndexError(\"length (%d) > 1\" % len(strings))\n    if substring in strings:\n        return strings[substring]\n    return strings.filter(lambda x: x not in strings)\n   </s>", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) > 0:\n        if substring in strings:\n            return strings[1:]\n        else:\n            return []\n\n    def filter(strings: List[str]) -> List[str]:\n        filter = filter_by_substring(strings, substring)\n        return filter\n    return filter", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for (s, i) in zip(strings: [str(s) for s in substring]):\n        if i in strings:\n            return i", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    strings_without_underscore = self.re.sub('^', '', strings_).replace('|', '')\n    return [strings if strings_without_underscore else []]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for string in strings:\n        if string in substring:\n            return filter_by_substring(string, substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for string in strings:\n        if substring.find(string) < 0:\n            return filter_by_substring(string, substring)\n    return list(filter_by_substring(strings: string, substring))", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings[0], list):\n        if isinstance(strings[1], list):\n            return strings\n        else:\n            return strings\n    else:\n        return set(strings)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings, list):\n        return strings.map(filter_by_substring, strings)\n    elif isinstance(strings, (list, tuple)):\n        return strings.values(filter_by_substring, substring)\n    elif isinstance(strings, (list, tuple, str)):\n        return strings.values(filter_by_substring, substring)\n    else:\n        return List(strings)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return filter_by_substring(strings, substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_strings = []\n    for string in strings:\n        if substring in string or string in filtered_strings:\n            filtered_strings.append(string)\n    return filtered_strings", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for string in strings:\n        if substring.startswith(string):\n            return list(filter_by_substring(string.split(' '), substring))\n\n    return list(filter_by_substring(strings, substring))", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # filter by whitespace\n    filtered = [']'.join(map(lambda x: x!='', strings)) for strings in strings]\n    # filter by leading whitespace\n    filtered.append(']')\n\n    return filtered", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if substring not in strings:\n        raise TypeError(\"Expected substring: '%s'\" % substring)\n    return strings.filter(lambda s: s.contains(substring), [])", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings, List):\n        if isinstance(strings[0], str):\n            strings[-1] = strings[0].strip()\n        if isinstance(strings[1], str):\n            strings[-1] = strings[-1].strip()\n        if isinstance(strings[2], str):\n            strings[-1] = strings[-1].strip()\n    elif isinstance(strings, list):\n        return filter_by_substring(strings, substring)\n\n    return list(filter_by_substring(strings, substring))", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings, List):\n        return append(strings, substring)\n    elif isinstance(strings, (str, unicode)):\n        return append(strings, substring)\n    else:\n        raise TypeError(\"Expected List but got strings\")\n\n    if isinstance(strings, List):\n        return append(strings, substring)\n    elif isinstance(strings, (str, unicode)):\n        return append(strings, substring)\n\n    return append(strings, substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) > 1:\n        for substring in substrings[2:]:\n            if substring.startswith(substring):\n                return strings.filter(str.isdigit or int(substring))\n    return strings\n</s>", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if not isinstance(strings, List[str]):\n        raise TypeError('Strings must be a list')\n    if isinstance(strings, List[str]):\n        return strings\n    for string in strings:\n        if isinstance(string, str):\n            return filter_by_substring(strings, string)\n        elif isinstance(string, List[str]):\n            return filter_by_substring(strings, string)\n        elif isinstance(string, List[str]):\n            return filter_by_substring(strings, string)\n\n    if not isinstance(strings, List[str]):\n        raise TypeError('Strings must be a list')\n    if isinstance(strings, List[str]):\n        return strings\n    for string in strings:\n        if isinstance(string, str):\n            return filter_by_substring(strings, string)\n        elif isinstance(string, List[str]):\n            return filter_by_substring(strings, string)\n        elif isinstance(string, List[str]):\n            return filter_by_substring(strings, string)\n    for string in strings:\n        if isinstance(string, str):\n            return filter_by_substring(strings, string)\n        elif isinstance(string, List[str]):", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if substring in strings:\n        return strings[substring]\n\n    return strings", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) == 0:\n        return [strings]\n    for string in strings:\n        if string.startswith(substring):\n            return [string]\n    return [string]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for string in strings:\n        if substring in strings:\n            return filter_by_substring(strings, substring)\n\n    return None", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return filter_by_substring(strings, substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for string in strings:\n        if substring in string:\n            return strings.filter(f.match(f.substitute(f.replace(f.substitute(string)), substring)))\n    raise TypeError('Invalid string input: %s' % (string,))\n</s>", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for i in range(len(strings)):\n        if substring in strings[i]:\n            return i\n\n    def to_list(words: List[str]) -> List[str]:\n        \"\"\" Convert a list of strings to a list of strings, including the substring, \"\"\"\n        for word in words:\n            if substring in word:\n                return word\n        return []\n\n    def test(words: List[str], substring: str) -> List[str]:\n        \"\"\" Test if a string contains a substring of given length. \"\"\"\n        for word in words:\n            if substring in word:\n                return True\n        return False\n\n    def is_str(word: str) -> bool:\n        \"\"\" Test if a string contains the substring. \"\"\"\n        for word in words:\n            if substring in word:\n                return True\n        return False\n\n    def is_substr(word: str, length: int) -> bool:\n        \"\"\" Test if a substring contains the substring. \"\"\"\n        for word in words:\n            if substring in word:\n                return True\n        return False\n\n    def search_substrings(words: List[str], substring: str) -> List[str]:\n        \"\"\" Find substrings in an input list of strings that match the substring. \"\"\"\n        if substring in", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings, List[str]):\n        strings_filtered = strings.filter(&filter_by_substring)\n    else:\n        strings_filtered = [strings];\n    return strings_filtered", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) == 1:\n        for string in strings:\n            if substring in strings:\n                return filter_by_substring(strings, substring)\n    return filter_by_substring(strings, substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for i in range(len(strings)):\n        if substring in strings[i]:\n            return strings[i]\n    return list(filter_by_substring(strings, substring))", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    ret: List[str] = []\n    for string in strings:\n        if substring in strings:\n            ret.append(string)\n    return ret", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) == 0:\n        return []\n    if len(strings) > 1:\n        if substring in strings:\n            return [strings.pop()]\n        else:\n            return strings\n    return strings", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings[substring], str):\n        return [substring]\n    else:\n        return [strings[substring].lower()]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return filter_by_substring(strings, substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return FilterBySubstr(strings, substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # from itertools import chain\n    for item in strings.iteritems():\n        if substring in item:\n            return [item]\n        else:\n            return [item]\n    filter_by_substring.update([filter_by_substring(item) for item in strings.iteritems()])\n    return filter_by_substring.items()", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if not isinstance(strings, List[str]):\n        raise TypeError(strings[:].join(strings))\n    if not isinstance(strings, List[str]):\n        raise TypeError(strings.__iter__())\n    if not isinstance(strings, List[str]):\n        raise TypeError(strings)\n\n    filter = []\n    for string in strings:\n        if string.startswith(substring):\n            filter.append(string)\n    return filter", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # FIXME: Find a way to do this efficiently in Python\n    if isinstance(strings, List):\n        return [str.lower() for str in strings]\n    if isinstance(strings, str):\n        return [str.lower() for str in strings]\n    if isinstance(strings, list):\n        return [str.lower() for str in strings]\n    if isinstance(strings, List):\n        return [str.lower() for str in strings]\n    if isinstance(strings, list):\n        return [str.lower() for str in strings]\n    return [str.lower() for str in strings]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings, (list, tuple)):\n        return filter_by_substring(strings, substring)\n    else:\n        return filter_by_substring(strings)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [str(s) for s in strings]\n</s>", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for s in strings:\n        if substring in s:\n            return s.split(substring)\n    raise TypeError", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for s in strings:\n        if substring in s.lower():\n            return s\n    return []\n</s>", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) < 2 and len(strings[1]) < 2 and len(strings[0]) < 2:\n        raise ValueError('String length must be greater than 0.')\n\n    if len(strings) == 2:\n        return strings\n    elif len(strings) > 2:\n        raise ValueError('Expected one element or greater.')\n\n    return [str(i) for i in strings]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for s in strings:\n        if substring in s:\n            return s\n\n    return filter_by_substring(strings: [str(s) for s in strings])", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings, List):\n        for i in range(len(strings)):\n            if strings[i] not in substring:\n                return []\n    return [strings[i]]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    filter = lambda string: string.startswith(subsubstring)\n    for string in strings:\n        if string.startswith(strings[1:]):\n            filter(string)\n    return list(filter(lambda s: string.startswith(s)))", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) > 0:\n        if substring.startswith(strings[0]):\n            return strings[0].split(substring)\n    else:\n        return strings", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings, List):\n        for s in strings:\n            if substring in s:\n                return s\n    return strings", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if not isinstance(strings, List):\n        raise TypeError(\"Expected list, got {}\".format(strings))\n\n    for s in strings:\n        if substring.startswith(s):\n            return list(filter_by_substring(strings, s))\n        else:\n            return list(set(strings) - set(s))\n    return list(filter_by_substring(strings, ''))", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) == 1:\n        return strings\n    elif len(strings) > 1:\n        raise ValueError('\"%s\" contains more than one substring.\" % strings\"\")\n    return sorted(strings, key=lambda k: substring.lower())", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings, List):\n        if not substring.startswith(strings[0]):\n            return []\n        elif isinstance(strings, str):\n            return [strings[0:strings.index(substring)]]\n        else:\n            raise TypeError(\"Expected List of strings but got %s\" % substring)\n    elif isinstance(strings, List) and strings[0].startswith(substring):\n        if isinstance(strings, str):\n            return [strings[0:strings.index(substring)]]\n        else:\n            raise TypeError(\"Expected List of strings but got %s\" % substring)\n    elif isinstance(strings, str) and strings[0].startswith(substring):\n        if isinstance(strings, str):\n            return [strings[0:strings.index(substring)]]\n        else:\n            raise TypeError(\"Expected List of strings but got %s\" % substring)\n    elif isinstance(strings, List) and strings[0].startswith(substring):\n        if isinstance(strings, str):\n            return [strings[0:strings.index(substring)]]\n        else:\n            raise TypeError(\"Expected List of strings but got %s\" % substring)\n    elif isinstance(strings, str):\n        return [strings[0:strings.index(substring)]]\n    elif isinstance(", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) > 0:\n        return filter_by_substring(strings, substring)\n\n    if substring not in strings:\n        return []\n    if substring in strings:\n        return strings[substring]\n\n    return filter_by_substring(strings, substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings, List):\n        for string in strings:\n            if substring in string.split(' '):\n                return string\n    return filter_by_substring(strings, substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings, list):\n        return [strings.first]\n    for string in strings:\n        if substring in strings:\n            return filter_by_substring(strings, substring)\n    return list(strings)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for substring in substrings:\n        for string in strings:\n            if string.startswith(substring):\n                return filter_by_substring(string.split(substring), substring)\n\n    return filter_by_substring(strings: [str], substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings, List[str]):\n        return [str(x) for x in strings]\n    elif isinstance(strings, list):\n        return [str(x) for x in strings if len(x) == substring]\n    else:\n        raise TypeError('(%s, %s) is not a list' % (substring, substring))\n\n    return filter_by_substring(strings, substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings, List[str]):\n        return filter_by_substring(strings, substring)\n    return strings", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for str in strings:\n        if len(substr) == 1:\n            return filter_by_substring(str, substring[0])\n        elif len(substr) == 2:\n            return filter_by_substring(str, substring[1])\n\n    return filter_by_substring(strings, substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) > 0:\n        return strings.filter(str.is_substring, substring)\n    return strings[:-1].lower()", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_strs = []\n    for string in strings:\n        if substring in strings:\n            filtered_strs.append(string)\n    return filtered_strs", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return strings.filter(_.startswith, substring) if strings[0] in substring else strings.filter(_.startswith, substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return super(Filter, self).filter_by_substring(strings, substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return filter_by_substring(strings, substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for item in items:\n        if substring.contains(item):\n            return [item]\n\n    for item in items:\n        if not item.startswith(strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[strings[string", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if substring in strings:\n        return strings.filter(s.startswith(substring))\n    return []", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings, List[str]):\n        if isinstance(strings[0], str):\n            return strings\n        if isinstance(strings, list):\n            for i in range(len(strings)):\n                if not strings[i] in substring:\n                    return strings\n        return strings\n    return strings", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) < len(substring):\n        return [strings, substring]\n    elif substring:\n        return filter_by_substring(strings, substring)\n    return [strings, substring]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return FilterBySubstring(strings: strings, substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    filter = List([])\n    for string in strings:\n        if string.startswith(substring):\n            filter.append(string)\n        else:\n            filter.append(string)\n\n    return filter", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings, List):\n        return filter_by_substring(strings, substring)\n    elif isinstance(strings, list):\n        return filter_by_substring(strings, substring)\n    elif isinstance(strings, tuple):\n        return filter_by_substring(strings, substring)\n\n    # Do not return the empty string.\n    return list(filter_by_substring(strings, ''))\n\n    # Return the first substring that is not empty.\n    if len(strings)!= 1:\n        return strings[0]\n\n    # Return the last substring that is not empty.\n    if len(strings) == len(strings) - 1:\n        return strings[-1]\n\n    return strings", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) == 0:\n        return []\n    for string in strings:\n        if substring in string and string.startswith(string[len(substring):]):\n            return string\n    return strings", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) < 2:\n        return lists.empty(strings)\n    for string in strings:\n        if substring.startswith(string):\n            return list(strings.filter(string.startswith, substring))\n    return lists.empty(strings)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) == 1:\n        return strings[0]\n    else:\n        return list(filter_by_substring(strings, substring))", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return strings[:len(substring)]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if substring:\n        return filter_by_substring(strings, substring)\n    return filtered(strings)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return List(filter_by_substring(strings, substring) + [str(item) for item in strings])", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings, List[str]):\n        for string in strings:\n            if substring in string:\n                return strings\n    return strings", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings[substr]) == 1:\n        return strings\n    elif len(strings[substr]) == 2:\n        return strings\n    elif len(strings[substr]) == 3:\n        return strings\n    elif len(strings[substr]) == 4:\n        return strings\n    elif len(strings[substr]) == 5:\n        return strings\n    elif len(strings[substr]) == 6:\n        return strings\n    elif len(strings[substr]) == 7:\n        return strings\n    else:\n        raise ValueError(\"Missing 'asdf' or 'asdf' in 'asdf' or 'asdf' in 'asdf' or 'asdf' in 'asdf' or 'asdf' in 'asdf'.\")\n\n    if len(strings[substr]) == 1:\n        return strings\n    elif len(strings[substr]) == 2:\n        return strings\n    elif len(strings[substr]) == 3:\n        return strings\n    elif len(strings[substr]) == 4:\n        return strings\n    elif len(strings[substr]) == 5:\n        return strings\n    elif len(strings[substr]) == 6:\n        return strings\n    elif len(strings[sub", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for substring in substrings:\n        if substring.startswith(substring):\n            return [str(s) for s in strings]\n    return list(filter_by_substring(strings, substring))\n\n    def filter_strings(input_strings: List[str], substring: str, default_index: int) -> List[str]:\n        \"\"\" Returns an empty list of strings if string is not in the input strings\" list\n        >>> filter_strings([], 'a')\n        []\n        >>> filter_strings(['abc', 'bacd', 'cde'], 'a')\n        ['abc', 'bacd', 'cde']\n        \"\"\"\n        for string in input_strings:\n            if string.startswith(substring):\n                return [str(s) for s in strings]\n            else:\n                return list(filter_strings(strings, substring, default_index))\n\n        return filter_strings([], 'a')", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings, List[str]) and strings[0].isalnum():\n        return [strings[0]]\n    else:\n        for s in strings:\n            if substring.isalnum(s):\n                return [strings[0]]\n        raise ValueError('Can only use single or double backslashes')\n    return [strings[0]]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings, List[str]):\n        for string in strings:\n            if substring.startswith(string):\n                return strings\n    return strings\n\n    def _replace_hyphenated(strings, substring: str) -> List[str]:\n        if substring.startswith(string):\n            return strings\n        else:\n            return strings[:-1].replace('.', '').replace('_', '-')\n\n    def _replace_whitespace(strings: List[str], substring: str) -> List[str]:\n        if substring.startswith(string):\n            return strings\n        else:\n            return strings[:-1]\n\n    def _replace_whitespace_and_hyphenated(strings: List[str], substring: str) -> List[str]:\n        if substring.startswith(string):\n            return strings\n        else:\n            return strings[:-1].replace('.', '').replace('_', '-')\n\n    def _replace_whitespace_and_hyphenated_and_hyphenated(strings: List[str], substring: str) -> List[str]:\n        if substring.startswith(string):\n            return strings\n        else:\n            return strings[:-1].replace('.', '').replace('_'", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for string in strings:\n        if string.contains(substring):\n            return list(filter_by_substring(string, substring))\n        else:\n            return list(filter_by_substring(string, substring.lower()))\n\n    filter_by_substring = filter_by_substring.astype(str)\n    for string in filter_by_substring:\n        yield string", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_str = \"\"\n    for string in strings:\n        if substring in strings:\n            filtered_str += string\n    return filtered_str", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return strings[substring]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # As a side effect we remove the '.' from our substrings\n    for substring in substrings:\n        if substring in string:\n            continue\n        if substring.startswith(substrate):\n            # Remove the trailing '.'\n            substring = substring[: substring.find('.') ]\n    return [str(str(string[substrate.find('.'):])) for substring in strings]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) == 0:\n        return []\n    try:\n        for i in range(0, len(strings), 2):\n            if substring.lower() in strings[i]:\n                return [strings[i]]\n    except TypeError:\n        pass\n\n    return []", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if substring in strings:\n        return strings[substring]\n    return list(filter_by_substring(strings[substring], substring))\n</s>", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings[substring], List[str]):\n        return strings[substring]\n    else:\n        return list(filter_by_substring(strings[substring], substring))", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings, List):\n        if substring in strings:\n            return strings\n    else:\n        return strings.filter(filter_by_substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if strings:\n        return sorted(map(filter_by_substring, strings[:]))\n    else:\n        return [string for string in strings if substring not in string]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings, list):\n        return filter_by_substring(strings, substring)\n    else:\n        return filter_by_substring(strings, substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) < len(substring):\n        return List(strings)\n    return FilteredList(strings, substring=substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return filter_by_substring(strings, substring)", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    for substring in substrings:\n        if substring.startswith(substring):\n            return filter_by_substring(strings, substring)\n\n    return List(filter_by_substring(strings, substring))", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return sorted(strings[:], key=lambda s: strings[s: substrings[s.rindex(s)])", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    def filter_by_substring_like(fn: str, substring: str, found: bool) -> List[str]:\n        \"\"\" Return a list of strings only for one that contain given substring\n        >>> filter_by_substring_like(['abc', 'bacd', 'cde'], 'a')\n        ['abc', 'bacd', 'array']\n        >>> filter_by_substring_like(['a', 'b', 'c', 'd', 'e', 'f'], 'a')\n        ['a', 'b', 'c', 'd', 'e', 'f']\n        >>> filter_by_substring_like(['a', 'a', 'c', 'a', 'a', 'a'], 'a')\n        ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if isinstance(strings, List[str]):\n        return [filtered_strings[substring]]\n    else:\n        return [filtered_strings[substring]]", "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if len(strings) < len(substring):\n        return []\n    return filter(lambda x: x.startswith(substring), strings)"]]