[["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    #-----------------------------\n    # Return an array of the factors of the given integer\n    #-----------------------------\n    # Input number: number of factors\n    #---------------------------------------\n    # Output: list of integers, the first element is the factor of the first factor and the second factor of the second factor\n    def factorize(n: int) -> List[int]:\n        #-----------------------------\n        # 1. By product of factors\n        return List((factorial(n) for factorial in factorize(n)))\n    #-----------------------------\n    # 1. By dividing each factor by all factors of the same order\n    def factorize(n: int) -> List[int]:\n        #-----------------------------\n        # 1. By product of factors\n        return List((factorial(n) for factorial in factorize(n)))\n    #-----------------------------\n    # 1. By dividing each factor by all factors of the same order\n    def factorize(n: int) -> List[int]:\n        #-----------------------------\n        # 1. By product of factors\n        return List((factorial(n) for factorial in factorize(n)))\n    #-----------------------------\n    # 1. by dividing each factor by all factors of the same order\n    def factorize(n: int) -> List[int]:\n        #-----------------------------\n        #", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    _factorized = List()\n    for factor in range(n):\n        if factor in _factorized:\n            _factorized.append(factor)\n    return _factorized", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(factorialize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    def f(n: int) -> List[int]:\n        for i in range(n):\n            if n % i == 0:\n                return [i]\n            elif n % i == 1:\n                return [i]\n            elif n % i == 2:\n                return [i]\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f(2)\n        f", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    def list_factor(n) -> List[int]:\n        for factor in list:\n            if factor not in n:\n                return\n        raise ValueError('Not an integer!')\n\n    def factorize(n: int) -> List[int]:\n        \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n        Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n        Input number should be equal to the product of all factors.\n        >>> factorize(8)\n        [2, 2, 2]\n        >>> factorize(25)\n        [5, 5]\n        >>> factorize(70)\n        [2, 5, 7]\n        >>> factorize(100)\n        [3, 4]\n        >>> factorize(10)\n        [1, 1, 1]\n        >>> factorize(15)\n        [1, 2, 1]\n        >>> factorize(20)\n        [2, 1, 1]\n        >>> factorize(25)\n        [5, 5, 7]\n        >>> factorize(50)\n        [1, 2, 1]\n        >>> factorize(100)\n        [1, 1, 1]\n        >>> factorize(50)\n        [1, 1, 1]\n        >>> factorize(10)\n        [1, 1, 1]\n        >>> factorize(10)\n        [1, 1, 1]\n        >>> factorize(", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(n * (n - 1) if n < 1 else 1)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List[int](range(2, 25)) * n", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    def factors(n: int) -> List[int]:\n        return list(factorize(n))\n\n    def main(args: List[str]) -> None:\n        for n in range(1, n):\n            for i in range(1, n):\n                factorize(i)\n        print factorize(8)\n\n    def main1(args: List[str]) -> None:\n        for i in range(1, n):\n            factors(i)\n\n    main1(args=list(factorize(1)))\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(map(int, n.flatten()))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(map(factorize, n * 3 * 2))\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    for factor in range(n):\n        yield factor\n    return List(n)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(factorize(n) for n in range(1, 10))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [int(factorize(n)) for n in range(0, n)]\n    else:\n        return [int(factorize(n)) for n in range(0, n) - 1]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n % 4!= 0:\n        raise ValueError(\"Number of factors in factorization is different than the number of factors in the input\")\n\n    for i in range(1, n):\n        a = factorize(n % 4)\n        yield i if a else 0\n\n    for i in range(1, n):\n        b = factorize(n % 4)\n        yield i if a else 0", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if isinstance(n, int):\n        return List(factorize(n)[0:2])\n    else:\n        return List(factorize(n)[0:2][::-1])\n\n    return list(factorize(n)[0:2])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    # compute the factorization\n    factorizations = List[int]()\n    for factor in n:\n        for factor_i in range(factor):\n            factorizations.append(factor_i)\n\n    def get_power(factorization: List[int], notes: List[int]) -> int:\n        \"\"\" Return the power of given factorization\n        \"\"\"\n\n        if notes:\n            notes: = List(notes)\n\n        return factorizations[factor] * factors[factorization[notes:]]\n\n    def calc_pow(factorization: List[int], notes: List[int]) -> int:\n        \"\"\" Return the power of factorization\n        \"\"\"\n\n        if notes:\n            notes: = List(notes)\n\n        return factorizations[factor] * factors[factorization[notes:]]\n\n    def sum_pow(factorization: List[int], notes: List[int]) -> int:\n        \"\"\" Sum the powers of factorization\n        \"\"\"\n\n        if notes:\n            notes: = List(notes)\n\n        return factorizations[factor] * factors[factorization[notes:]]\n\n    def sum_pow_n(factorization: List[int], notes: List[int]) -> int:\n        \"\"\" Sum the powers of", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    return List(factorize(8).apply(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Input number must be greater than 1.\")\n    factors = List(range(n))\n    for factor in factors:\n        if factor <= 0:\n            raise ValueError(\"Factor can only have multiple prime factors.\")\n    for factor in factors:\n        if factor!= 1:\n            raise ValueError(\"Factor must be a multiple of 1.\")\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    n /= 2\n\n    factors: List[int] = List([factorial(n) for n in range(n)])\n\n    for factor in factors:\n        if factor is None:\n            continue\n        for i in range(1, n):\n            factors[i] = factor(i)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(map(factorize, int(n)))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    nums = [factored for factor in factorize(n) if factor not in nums]\n    nums = sorted([factored for factor in factorize(n) if factor not in nums.intersection(0)])\n    nums = sorted([factored for factor in factorize(n) if factor not in nums])\n    return nums", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(range(n))\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = List([int(factorize(n)) for n in range(1, int(n))])\n    for (f, b) in result:\n        result.append(b + (f * (b + b) - (f * (b + b) - (f * (f + b))))\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(range(n * 5, n * 5 + 5))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = List[int]()\n    if n == 0:\n        result.append(2)\n    elif n == 1:\n        result.append(5)\n    elif n == 2:\n        result.append(7)\n    elif n == 3:\n        result.append(5)\n    elif n == 4:\n        result.append(5)\n    elif n == 5:\n        result.append(5)\n    elif n == 6:\n        result.append(5)\n    elif n == 7:\n        result.append(7)\n    else:\n        result.append(7)\n    if n == 1:\n        result.append(2)\n    elif n == 2:\n        result.append(2)\n    elif n == 3:\n        result.append(2)\n    elif n == 4:\n        result.append(2)\n    elif n == 5:\n        result.append(2)\n    elif n == 6:\n        result.append(2)\n    elif n == 7:\n        result.append(2)\n\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return n * factorize(n % 10)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    def num_primitive(n):\n        \"\"\" Return prime factor in the given order of numbers: smallest to largest (excluding NaN).\n        Input number should be equal to the product of all factors.\n        >>> num_primitive(7)\n        [5, 5, 7]\n        >>> num_primitive(9)\n        [2, 2, 5]\n        >>> num_primitive(25)\n        [2, 2, 2]\n        >>> num_primitive(50)\n        [2, 2, 2]\n        >>> num_primitive(70)\n        [2, 5, 7]\n        \"\"\"\n\n        return list(factorize(n))\n\n    def is_nan(n):\n        \"\"\" Return whether the number is NaN or not. Return False if not.\n        Input number should be equal to the product of all factors.\n        >>> is_nan(7)\n        False\n        >>> is_nan(9)\n        False\n        >>> is_nan(25)\n        False\n        >>> is_nan(50)\n        False\n        >>> is_nan(70)\n        False\n        \"\"\"\n\n        return list(factorize(n)[0] == 2)\n\n    def is_nan2(n):\n        \"\"\" Return whether the number is NaN or not. Return False if not.\n        Input number should be equal to the product of all factors.\n        >>>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return List(0)\n    if n % 2 == 0:\n        return List(0)\n    if n % 3 == 0:\n        return List(0)\n    if n % 4 == 0:\n        return List(0)\n    if n % 5 == 0:\n        return List(0)\n    if n % 6 == 0:\n        return List(0)\n    if n % 7 == 0:\n        return List(0)\n    if n % 8 == 0:\n        return List(0)\n    return List(0)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    prime_factor_list = List[int]()\n\n    for factor in range(n, n + 1):\n        for i in range(2, 2):\n            prime_factor_list.append((factor * 2, factor * 2))\n\n    return prime_factor_list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(1) * n", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [factored(n) for n in range(2, len(n))]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return List([factorize(n) for n in range(3)])\n    else:\n        return List([factorize(n) for n in range(n % 2)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        return [int(n / 2)]\n    elif n == 0:\n        return [int(n * 2)]\n    elif n == 1:\n        return [int(n * 3)]\n    elif n == 2:\n        return [int(n * 5)]\n    elif n == 3:\n        return [int(n * 5 * 2)]\n    elif n == 4:\n        return [int(n * 5 * 5 * 3)]\n    elif n == 5:\n        return [int(n * 5 * 7 * 3)]\n    elif n == 6:\n        return [int(n * 6 * 5)]\n    elif n == 7:\n        return [int(n * 6 * 5 * 3)]\n    return [int(n * 1)] * (n * 3)\n\n    elif n < 10 :\n        return [int(n / 4)]\n    elif n == 0:\n        return [int(n / 4)]\n    elif n == 1:\n        return [int(n / 4)]\n    elif n == 2:\n        return [int(n / 4)]\n    elif n == 3:\n        return [int(n / 4)]\n    elif n == 4:\n        return [int(n / 4)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(range(0, n * 5))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    def __eq__(f1: List[int], f2: List[int]) -> bool:\n        \"\"\"\n        Return true when f1 is equal to f2, false otherwise\n        >>> __eq__([1, 2, 3], [2, 3, 4]])\n        True\n        >>> __eq__([1, 2, 3], [1, 2, 3]])\n        False\n        >>> __eq__([1, 3, 4, 5], [2, 3, 4, 5]])\n        False\n        >>> __eq__([1, 3, 4, 5], [1, 3, 3, 4]])\n        False\n        >>> __eq__([1, 3, 4, 5], [1, 3, 3, 3, 4]])\n        False\n        >>> __eq__([1, 3, 4, 5], [1, 3, 3, 4]])\n        True\n        >>> __eq__([1, 3, 4, 5], [1, 3, 3, 3, 4]])\n        True\n        >>> __eq__([1, 3, 4, 5], [1, 3, 3, 3, 4]])\n        False\n        >>> __eq__([1, 3, 4, 5], [1, 3, 3, 3, 4]])\n        True", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    for i in range(n):\n        if n % i == 0:\n            return [i % n for i in range(n % i + 1)]\n        else:\n            return [i % n for i in range(n % i + 1)]\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(20)\n    [1, 1, 1, 1]\n    >>> factorize(30)\n    [1, 1, 1, 1]\n    >>> factorize(50)\n    [1, 1, 1, 1]\n    >>> factorize(60)\n    [1, 1, 1, 1]\n    >>> factorize(70)\n    [1, 1, 1, 1]\n    >>> factorize(100)\n    [1, 1, 1, 1]\n    \"\"\"\n\n    for i in range(n):\n        if i == 0:\n            yield 1\n        elif i == 1:\n            yield i\n\n        yield i\n    if n % 10 == 0:\n        yield i\n\n    return list(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = List(n)\n    factors.reverse()\n    factors.append(factorize(3))\n    for factor in factorize(6):\n        factors.append(factor)\n\n    # get number of factors\n    factors.sort()\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = list(range(n))\n    for factor in factors:\n        return list(factor)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    def reverse(n: int) -> List[int]:\n        return reverse(factorize(n * 2))\n\n    def factorize2(n: int) -> List[int]:\n        return factorize(n * 2)\n\n    def factorize3(n: int) -> List[int]:\n        return factorize(n * 2)\n\n    def factorize4(n: int) -> List[int]:\n        return factorize(n * 2)\n\n    def factorize5(n: int) -> List[int]:\n        return factorize(n * 2)\n\n    def factorize6(n: int) -> List[int]:\n        return factorize(n * 2)\n\n    def factorize7(n: int) -> List[int]:\n        return factorize(n * 2)\n\n    def factorize8(n: int) -> List[int]:\n        return factorize(n * 2)\n\n    def factorize9(n: int) -> List[int]:\n        return factorize(n * 2)\n\n    def factorize10(n: int) -> List[int]:\n        return factorize(n * 2)\n\n    def factorize11(n: int) -> List[int]:\n        return factorize(n * 2)\n\n    def factorize12(n: int) -> List[int]:", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    def lambda_factor(n, k: n, l: (k * l) % n):\n        \"\"\"\n        Returns list of primes in the order from smallest to largest\n        \"\"\"\n\n        prime_vals = []\n\n        for i in range(0, n):\n            prime_vals.append(lambda_factor(i, k))\n\n        return list(prime_vals)\n\n    def factorize(n, k: n, l: (k * l) % n) -> List[int]:\n        \"\"\"\n        Return list of prime factors of given integer in the order from smallest to largest\n        Input number should be equal to the product of all factors\n        >>> factorize(8)\n        [2, 2, 2]\n        >>> factorize(25)\n        [5, 5]\n        >>> factorize(70)\n        [2, 5, 7]\n        \"\"\"\n\n        prime_vals = []\n        for i in range(0, n):\n            prime_vals.append(lambda_factor(i, k))\n\n        return list(prime_vals)\n\n    def factorize(n, k: n, l: (k * l) % n) -> List[int]:\n        \"\"\"\n        Return list of prime factors of given integer in the order from smallest to largest\n        Input number should be equal to the", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return List()\n    factor = n.ceil()\n    return list(factorize(factor))\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = []\n    for factor in list(factorize(n)):\n        for i in range(0, n):\n            result.append(factor * i)\n        if result.count() == 1:\n            result.reverse()\n\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # get the elements\n    u = n\n    v = list(factorize(u) + factorize(v)) # recursively loop over all the factors\n    factors = set([v for v in v if v not in u])\n    factors.add(u)\n    # remove the first factor\n    factors.remove(u)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    prime = list(range(n))\n    # remove duplicates\n    for i in range(n):\n        if prime[i]!= prime[i + 1:]:\n            del prime[i]\n            del prime[i + 1]\n        for j in range(n):\n            if prime[j]!= prime[j + 1:]:\n                del prime[j]\n                del prime[j + 1]\n    return prime", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        return List(0)\n    if n == 1:\n        return List(0)\n    if n == 2:\n        return List(0)\n    if n == 3:\n        return List(0)\n    if n == 4:\n        return List(0)\n    return List(0)\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n > 3:\n        raise ValueError('Number must be larger than 3:'+ str(n))\n    n = factorize(n)\n    return List(map(int, n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(map(int, factorize(n)))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(sorted(range(0, n)))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    def toFactor(f1: Factor, f2: Factor) -> List[int]:\n        \"\"\"\n        Return factorization of given integer in the order from smallest to largest.\n        Input number should be equal to the product of all factors\n        >>> toFactor(8, 6)\n        [2, 2, 2]\n        >>> toFactor(25, 7)\n        [5, 5, 7]\n        >>> toFactor(70, 2)\n        [5, 5, 7]\n        >>> toFactor(80, 3)\n        [5, 5, 7]\n        >>> toFactor(100, 7)\n        [5, 5, 7]\n        \"\"\"\n\n        for i in range(len(f1)):\n            if f1[i] == f2[i]:\n                return i\n\n        return -1", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    m, n = n\n    a = (m * (n-1) + n - 1) * (n-1)\n    b = (m * (n - 1) + n - 1) * (n - 1)\n    r = (m * (n-1) + n - 1) * (n - 1) + a * b\n    c = (m * (n-1) + n - 1) * (n - 1) + b * a\n    d = (m * (n-1) + n - 1) * (n - 1) + c * d\n    e = (m * (n-1) + n - 1) * (n - 1) + d * e\n    f = (m * (n-1) + n - 1) * (n - 1) + e * f\n    g = (m * (n-1) + n - 1) * (n - 1) + f * g\n    h = (m * (n-1) + n - 1) * (n - 1) + e * g\n    i = (m * (n-1) + n - 1) * (n - 1) + d * e\n    j = (m * (n-1) + n - 1) * (n - 1)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List.from_iterable([factorize(n) for n in range(1, n+1)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n > 1:\n        return List(factorize(n - 1) + factorize(n))\n    else:\n        return List(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return n * list(factorize(n) + list(factorize(n * 3)) + list(factorize(n * 5)) + list(factorize(n * 7)))\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [factorial(n) for n in n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(Factorization(n) * n)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(factorize(n / 2 + 1) for n in range(n))\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    def assertFactor(n) -> None:\n        \"\"\" Checks whether given number is a factor of given number, and returns -1 if it is.\n        Input number should be equal to product of all factors\n        >>> assertFactor(4)\n        -1\n    \"\"\"\n    return List([factorialize(n) for n in range(n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(map(int, list(factorize(n))))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(range(n)) if n == 0 else list(map(int, factorize(n)))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return List([0, 1, 2, 1])\n    if n == 1:\n        return List([1, 2, 3, 4])\n    if n == 2:\n        return List([5, 4, 7, 5, 3, 1])\n    return List([(1, 0), (2, 0), (3, 0), (4, 0), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(n.split(\"/\") + [factorize(n % 2)] + factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    def get(n) -> List[int]:\n        return n % 2 == 0\n\n    def factorize(n: int) -> List[int]:\n        \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n        Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n        Input number should be equal to the product of all factors\n        >>> factorize(8)\n        [2, 2, 2]\n        >>> factorize(25)\n        [5, 5]\n        >>> factorize(70)\n        [2, 5, 7]\n        \"\"\"\n\n        def get_pow(n) -> List[int]:\n            \"\"\" Return list of prime factors of given integer in the order from smallest to largest in the lower power of n (in the order from smallest to largest). \"\"\"\n            return get(n * 2)\n\n        def factorize_pow(n: int) -> List[int]:\n            \"\"\" Return list of prime factors of given integer in the order from smallest to largest in the lower power of n (in the order from smallest to largest). \"\"\"\n            return get_pow(n * 2)\n\n        def factorize_pow_power(n: int) -> List[int]:\n            \"\"\" Return list of prime factors of given integer in the", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [\n        factorize(n) for n in range(1, n + 2)\n    ]\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List((n - 1, n - 2, n - 3, n - 4, n - 5, n - 6, n - 7))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List.from_iterable([\n        factorize(n)\n        for n in range(1, n * 5)\n    ])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List([factorize(i) for i in range(n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List([1, 2, 5, 7, 10, 15, 20, 30, 40, 50, 60, 65])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = List[int]()\n    for n in range(n):\n        factors.add(n * 2)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    num = n\n    if not isinstance(num, (int, long)):\n        raise TypeError('int should be of type int or long')\n    num *= (1 + factorize(n) < factorize(n + 1))\n    num /= factorize(n)\n    if n % factorize(n) == 0:\n        return [num]\n    else:\n        return list(range(num * factorize(n) + 1))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    def factorize(factor: List[int]) -> List[int]:\n        # factorize(7) -> [7, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n        return list(map(factorize, range(n)))\n    factorization = List[int](factor)\n    for i in range(n):\n        factorization.append(factor)\n\n    factorization.sort()\n    factorization.reverse()\n    factorization.reverse(reverse=True)\n    factorization.reverse(reverse=True)\n    for i in range(factorization.size):\n        factorization.reverse(reverse=True)\n\n    return factorization\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List[int]((n * (n / 2)) for n in range(2, 10, 1))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    s = n\n    if s % 2 == 0:\n        return List([2, 2, 2])\n\n    def factorize(factorized: List[int]) -> List[int]:\n        try:\n            for i in range(factorized):\n                i += 1\n                if factorized[i] % 2 == 0:\n                    return List([2, 2, 2])\n                else:\n                    return List([2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5])\n            return List([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    return list(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # #", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    primes = list(n.split(','))\n    for i in range(2, len(primes)):\n        prime = primes[i]\n        if prime > 1 or prime < 0:\n            raise TypeError(f'%d, %d must be an integer' % (i, prime))\n\n    return list(factorize(primes))\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    num = n * 2\n    return List(factorize(factorize(1) for factor in n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(list(n * factorize(2) + factorize(5) + factorize(7)))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(range(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if isinstance(n, List[int]):\n        return list(factorize(n))\n\n    if n in range(0, n + 1):\n        return list(factorize(n))\n\n    return list(n * factors(n)[::-1])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    total = 0\n    for factor in n:\n        for i in range(1, total):\n            factor += factorize(i)\n    return List(factor)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input number should be an int\")\n    if not isinstance(n % 2, int):\n        raise TypeError(\"Input number should be an int\")\n    if not isinstance(n % 5, int):\n        raise TypeError(\"Input number should be an int\")\n    if not isinstance(n % 7, int):\n        raise TypeError(\"Input number should be an int\")\n    if not isinstance(n % 10, int):\n        raise TypeError(\"Input number should be an int\")\n    if not isinstance(n % 100, int):\n        raise TypeError(\"Input number should be an int\")\n    if not isinstance(n % 1000, int):\n        raise TypeError(\"Input number should be an int\")\n    if n % 100 == 0 and n % 1000 == 0:\n        raise TypeError(\"Input number should be an int\")\n    if n % 100 == 1 and n % 1000 == 1:\n        raise TypeError(\"Input number should be an int\")\n    if n % 100 == 2 and n % 1000 == 2:\n        raise TypeError(\"Input number should be an int\")\n    if n % 100", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    for a in n:\n        return factorize(a, 1)\n    return list(range(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    m = 0\n    for factor in sorted(factorize(n), key=lambda x: x[0]):\n        if not factor in m:\n            m.append(factor)\n\n    for factor in m:\n        # Process factor in reverse order\n        if factor < m.index(factor):\n            yield factor\n        else:\n            yield factor\n    return m", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    result = List()\n    factor = list(factorize(n, n / 5, n))\n    factor.reverse()\n    for i in range(n):\n        result.append(factor[i])\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n > 1:\n        raise TypeError(\"Factorization is for integer between 1 and 25\")\n    factors = list(set([int(k) for k in range(n)]))\n    for factor in factors:\n        yield factor\n    return list(set(factor))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    def factorize_by_modulus(x, mod: List[int]) -> List[int]:\n        if x < mod:\n            for i in xrange(mod):\n                if mod[i] < 0:\n                    return []\n        else:\n            return []\n\n    def factorize_by_negative_modulus(x, mod: List[int]) -> List[int]:\n        if x > mod:\n            for i in xrange(mod):\n                if mod[i] > 0:\n                    return []\n        else:\n            return []\n\n    def factorize_by_modulus_and_negative_modulus(x, mod: List[int]) -> List[int]:\n        if x > mod_and_modulus(mod, -1):\n            for i in xrange(mod_and_modulus(mod, -1)):\n                if mod[i] < 0:\n                    return []\n        else:\n            return []\n\n    def factorize_by_negative_modulus_and_modulus(x, mod: List[int]) -> List[int]:\n        if x > mod_and_modulus(mod, 0):\n            for i in xrange(mod_and_modulus(mod, 0)):\n                if mod[i] > 0:\n                    return []\n        else:\n            return []\n\n    def factorize_by_mod", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    nums = List(n)\n    nums.sort(key=lambda x: x[0])\n\n    factorize.keys = [(num[0], num[1]) for num in nums]\n    nums.sort(key=lambda x: x[0])\n\n    return nums", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"n must be int or None\")\n    return List([factorialize(i) for i in n.split(\",\")])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if n < 0 or n > 1:\n        raise TypeError(\"incorrect integer length\")\n    if n % 2 == 0:\n        raise TypeError(\"incorrect integer length\")\n    if n % 10 == 0:\n        raise TypeError(\"incorrect integer length\")\n    if n % 100 == 0:\n        raise TypeError(\"incorrect integer length\")\n    return list(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List([factorialize(n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor = factorize(n / 10)\n    factor = factorize(n / 100)\n    factor = factorize(n / 1000)\n    factor = factorize(n / 10000)\n    factor = factorize(n / 100, 1000)\n\n    return factor", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List[int](n * (2 ** n) + 1) if n < 10 else n", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List.from_iterable(factorize(n / 8) + factorize(n / 5) + factorize(n / 7))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # prime factor\n    factor = None\n    for i in range(0, n):\n        if i == n:\n            factor = i\n        elif i == n - 1:\n            factor = factorize(factor)\n        else:\n            factor = factorize(i)\n\n    if factor == None:\n        return List(n)\n\n    # prime factors\n    if factor == 1:\n        return List(n - 1)\n    elif factor == 2:\n        return List(n - 2)\n    elif factor == 3:\n        return List(n - 3)\n\n    # other factors\n    for i in range(0, n):\n        if factor == i:\n            return List(n - i)\n\n    # zeroes\n    if factor == 0:\n        return List(0)\n\n    # products of all factors\n    for i in range(0, n):\n        if factor == i:\n            return List(n - i)\n\n    return List(n)\n\n    # complex factorization\n    for i in range(0, n):\n        if factor == i:\n            return List(n - i)\n\n    # complex factorization with all zeros\n    for i in range(0, n):\n        if factor == i:\n            return List(n - i)\n\n    # complex factorization with all powers\n    for i in range(0,", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    def factorize(n: int) -> List[int]:\n        \"\"\" return list of prime factors of given integer in the order from smallest to largest.\n        Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n        Input number should be equal to the product of all factors\n        >>> factorize(8)\n        [2, 2, 2]\n        >>> factorize(25)\n        [5, 5]\n        >>> factorize(70)\n        [2, 5, 7]\n        \"\"\"\n        if n!= 0:\n            raise TypeError('This is a multiline function.')\n        else:\n            list(factorize(n))\n        return List([])\n\n    def factorize(n, sum: List[int]) -> List[int]:\n        \"\"\" factorize(n, sum: list) -> list of primes factors of given integer in the order from smallest to largest\n        Input number should be equal to the product of all factors\n        >>> factorize(8)\n        [2, 2, 2]\n        >>> factorize(25)\n        [5, 5]\n        >>> factorize(70)\n        [2, 5, 7]\n        \"\"\"\n        def sum(n: int) -> int:\n            if n < 0:\n                raise TypeError('This is a multiline function.'", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if isinstance(n, int):\n        return list(range(0, n, 2))\n    if isinstance(n, int *):\n        return list(range(0, n * 2, n * 3))\n    if isinstance(n, int * *):\n        return list(range(0, n * 3 * 2, n * 4 * 3 * 4))\n    if isinstance(n, int * * * *):\n        return list(range(0, n * 3 * 4 * 2, n * 4 * 3 * 4 * 5))\n    for factor in (1, 2, 3, 4):\n        if n % factor == 0:\n            return list(range(0, n / factor, n / factor * 2))\n    return List.empty", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 0:\n        return []\n    if n % 2 == 0:\n        return []\n    if n % 4 == 0:\n        return []\n    if n % 2 == 1:\n        return []\n    if n % 4 == 1:\n        return []\n    if n % 4 == 2:\n        return []\n\n    return list(factorize(n))\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n % 2!= 0:\n        raise TypeError('Factorization order must be 2 numbers')\n    return List(factors)[factors.index(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(n * (1 + factorize(2) / factorize(2)) for n in range(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factorization = list(n.items())\n    factorizations = []\n    for i in range(factorization.size() - 1):\n        factorizations.append((n * factorization[i]) / factorization[factorization[i]])\n    return factorizations", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List([factorialize(factor(n) for n in n.split(',')[:2]) for factor in factorize(n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(factorize(n))</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    try:\n        return List((2, 5, 7))\n    except KeyError:\n        return List((2, 5, 7))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return List([32, 36, 39, 45, 49, 50, 52, 54, 56, 60, 62, 64, 65, 69, 70])\n    else:\n        if n == 1:\n            return List([21, 22, 23, 25, 31, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33])\n        elif n == 2:\n            return List([31, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33])\n        elif n == 3:\n            return List([20, 26, 27, 29, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26])\n        elif n == 4:\n            return List([19, 26, 28, 29, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26])\n        elif n == 5:\n            return List([25, 27, 28, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = List()\n    for n in range(1, 10):\n        if n % 2 == 0:\n            factors.add(factorize(n - 1))\n        elif n % 10 == 0:\n            factors.add(factorize(n + 1))\n        elif n % 100 == 0:\n            factors.add(factorize(n * n + 1))\n        elif n % 1000 == 0:\n            factors.add(factorize(n * n * n * n * n * n))\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    return List((n * 2 * 3) / 2 for n in range(n))\n\n    def factorize(n, order: str) -> List[int]:\n        \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n        Input number should be equal to the product of all factors\n        >>> factorize(8)\n        [2, 2, 2]\n        >>> factorize(25)\n        [5, 5]\n        >>> factorize(70)\n        [2, 5, 7]\n        \"\"\"\n\n        for factor in order:\n            factor = factorize(factor)\n            if factor not in list(factor.items()):\n                return\n            return list(factor.items())[order.index(factor)]\n\n    def factorize(n: int) -> List[int]:\n        \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n        Input number should be equal to the product of all factors\n        >>> factorize(8)\n        [2, 2, 2]\n        >>> factorize(25)\n        [5, 5]\n        >>> factorize(70)\n        [2, 5, 7]\n        \"\"\"\n\n        for factor in order:\n            factor = factorize(factor)\n            if factor not in list(factor.items()):\n                return\n            return list(factor.items())[", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # num = 0\n    for i in range(len(n)):\n        if n % i == 0:\n            yield factorize(n % i)\n    return List(Factorize(n))\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(factorize(n) for n in range(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(zip(*factorize(n) for n in range(10)))\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 1:\n        return List(0)\n    if n % 2 == 0:\n        return List(0)\n    return List(factorize(n, 1))\n\n    return List(factorize(n, -1))\n\n    # O(n) prime factors -> O(n^2)\n    if n % 2 == 0 and n % 2 == 1:\n        return List(0)\n    return List(factorize(n, -1), 0)\n\n    # O(1) prime factors -> O(1^2)\n    if n == 1:\n        return List(0)\n    return List(factorize(n, -1), 1)\n\n    # O(1) prime factors -> O(1^2)\n    if n == -1:\n        return List(0)\n    return List(factorize(n, -1), -1)\n\n    # O(1) prime factors -> O(1^2)\n    if n == 0:\n        return List(0)\n    return List(factorize(n, -1), -1)\n\n    # O(1) prime factors -> O(1^2)\n    if n < 1:\n        return List(0)\n    return List(factorize(n, -1), 1)\n\n    # O(1) prime factors -> O(1^2)\n    if n < -1:\n        return List(0)\n    return List(factorize", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = [n]\n    for i in xrange(n):\n        result.append(factorize(i))\n    return List(result)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 1:\n        return List([])\n    if n > 1:\n        return List([max(factorize(n - 1), n) for n in range(1, n - 1)])\n    if n > 2:\n        return List([max(factorize(n - 2), n) for n in range(2, n - 2)])\n    if n > 3:\n        return List([max(factorize(n - 4), n) for n in range(3, n - 4)])\n    return List([max(factorize(n - 5), n) for n in range(5, n - 5)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if isinstance(n, List[int]):\n        n = list(n)\n    if n.count(0) == 0:\n        return List(n)\n    result = []\n    for factor in n:\n        result.append(factor)\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    yield (n * factorize(1)) + (n * factorize(2)) + (n * factorize(3)) + (n * factorize(4)) + (n * factorize(5)) + (n * factorize(6)) + (n * factorize(7))\n    yield (n * factorize(1)) + (n * factorize(2)) + (n * factorize(3)) + (n * factorize(4)) + (n * factorize(5)) + (n * factorize(6)) + (n * factorize(7))\n    yield (n * factorize(1)) + (n * factorize(2)) + (n * factorize(3)) + (n * factorize(4)) + (n * factorize(5)) + (n * factorize(6)) + (n * factorize(7))\n    yield (n * factorize(1)) + (n * factorize(2)) + (n * factorize(3)) + (n * factorize(4)) + (n * factorize(5)) + (n * factorize(6)) + (n * factorize(7))\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(list(factorize(n)))\n\n    def factorize(n) -> list:\n        \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n        Input number should be equal to the product of all factors\n        >>> factorize(8)\n        [2, 2, 2]\n        >>> factorize(25)\n        [5, 5]\n        >>> factorize(70)\n        [2, 5, 7]\n        >>> factorize(100)\n        [5, 7, 9]\n        \"\"\"\n        if n > 1:\n            raise ValueError(\"Number should not be more than 1.\")\n        return List(list(factorize(n)))\n\n    def factorize(n, factorizers: List[List[int]] = List()) -> List:\n        \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n        Input number should be equal to the product of all factors\n        >>> factorize(8)\n        [2, 2, 2]\n        >>> factorize(25)\n        [5, 5]\n        >>> factorize(70)\n        [2, 5, 7]\n        >>> factorize(100)\n        [5, 7, 9]\n        \"\"\"\n        for factorizer in factorizers:\n            for i in range(0, len(factorizer)):\n                if factorizer[i] > 1:\n                    raise", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [factorial(n) for factorial in factorize(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n == 1:\n        return List((1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1))\n\n    return List((n, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Number must be positive\")\n    return list(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # first factorize the smallest factor\n    factor = [0, 0, 0]\n    for i in range(0, len(factor) - 1):\n        factor[i * :] = factor[factor[i * :] - 1]\n    return factor", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(map(int, n.split('.')))\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n < 0:\n        raise ValueError('Factorization is negative.')\n    if n > 1:\n        raise ValueError('Factorization is greater than one.')\n\n    if n % 2 == 0:\n        raise ValueError('Factorization is smaller than one.')\n\n    if n % 2 == 1:\n        raise ValueError('Factorization is greater than two.')\n\n    if n % 2 == 1:\n        raise ValueError('Factorization is smaller than two.')\n\n    return list(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List([factorize(i) for i in n])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return sorted(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Number must be a number\")\n    result = []\n    factorizes = List([factorize(i) for i in n])\n    for i in factorizes:\n        result.append(Factorization(n, i, result))\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(n.split(',') for n in range(6))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(range(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # from itertools.counts import Counting\n    if n < 1:\n        return List()\n    # start from least significant factor\n    factor_len = n\n    for factor in range(factor_len):\n        # check if it is prime\n        if factor in factorize(factor):\n            return List(factor)\n    # start from greatest factor\n    factor_len = n\n    for factor in range(factor_len + 1):\n        # check if it is prime\n        if factor in factorize(factor + 1):\n            return List(factor + factor)\n    # add up all primes in factor\n    factor_len = len(factorize(factor + 1))\n    return List(factor + factor)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    def _factorial(factor: List[int]) -> List[int]:\n        \"\"\"Return list of prime factors of given integer in the order from smallest to largest.\n        If all the factors are given, the result is the first factor in the order.\n        Input number should be equal to the product of all factors\n        >>> factorize(8)\n        [2, 5, 7, 2, 5, 7, 2, 5, 7, 2, 5, 7, 5, 6, 6, 7, 6, 6, 6, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    for i in range(n):\n        if i % 2 == 0:\n            return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n        elif i % 5:\n            return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n        elif i % 6:\n            return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n        elif i % 7:\n            return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    return List(factorize(1))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    a = 0\n    while 1:\n        n = n / 2\n        a = factorize(n)\n        n = factorize(n) * a\n        a = factorize(n) * a / 2\n        a = factorize(n) * a / 2\n        a = factorize(n) * a / 2\n        a = factorize(n) * a / 2\n        a = factorize(n) * a / 2\n        a = factorize(n) * a / 2\n        a = factorize(n) * a / 2\n        a = factorize(n) * a / 2\n        a = factorize(n) * a / 2\n        a = factorize(n) * a / 2\n        a = factorize(n) * a / 2\n        a = factorize(n) * a / 2\n        a = factorize(n) * a / 2\n        a = factorize(n) * a / 2\n        a = factorize(n) * a / 2\n        a = factorize(n) * a / 2\n        a = factorize(n) * a / 2\n        a = factorize(n) * a / 2\n        a = factorize(n) * a", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = List([fact(1) for i in range(n)])\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    from itertools import product\n\n    factorize = product(factorize, range(8, 10))[0]\n    factorize = product(factorize, range(10, 20))[0]\n    factorize = product(factorize, range(20, 25))[0]\n    factorize = product(factorize, range(25, 30))[0]\n    factorize = product(factorize, range(30, 35))[0]\n    factorize = product(factorize, range(35, 40))[0]\n    factorize = product(factorize, range(40, 50))[0]\n    factorize = product(factorize, range(50, 55))[0]\n    factorize = product(factorize, range(55, 60))[0]\n    factorize = product(factorize, range(60, 65))[0]\n    factorize = product(factorize, range(65, 70))[0]\n    factorize = product(factorize, range(70, 80))[0]\n    factorize = product(factorize, range(80, 90))[0]\n    factorize = product(factorize, range(90, 100))[0]\n    factorize = product(factorize, range(100, 110))[0]\n    factorize = product(factorize, range(", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [int(factorize(i)) for i in range(0, n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return factorize([1, 2, 5, 2, 5, 2, 5, 2, 5, 2]) # [2, 2, 2, 5, 2, 5, 5, 2, 5, 2, 5, 2, 5, 2]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    number = int(n)\n\n    for factor in list:\n        if not isinstance(factor, List):\n            raise TypeError(\"Factor must be a List.\")\n        if not isinstance(factor[0], int):\n            raise TypeError(\"Factor must be of the type int.\")\n        if not isinstance(factor[1], int):\n            raise TypeError(\"Factor must be of the type int.\")\n        if not isinstance(factor[2], int):\n            raise TypeError(\"Factor must be of the type int.\")\n        if not isinstance(factor[3], int):\n            raise TypeError(\"Factor must be of the type int.\")\n        return factorize(number)\n\n    # When this is just the top of the list, then nothing is done.\n    if len(factor) == 0:\n        return []\n\n    # Just factorize with each factor.\n    for factor in list:\n        if not isinstance(factor[0], int):\n            raise TypeError(\"Factor must be of the type int.\")\n        if not isinstance(factor[1], int):\n            raise TypeError(\"Factor must be of the type int.\")\n        if not isinstance(factor[2], int):\n            raise TypeError(\"Factor must be", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = list(range(n))\n    for factor in (1, 2, 3, 4, 5, 6, 7):\n        result.append(factor)\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(factorize(n)).filter(n % 2!= 0).annotate(n % 2 == 0)\n\n    def size(f: List[int]) -> int:\n    \"\"\" Returns the maximum length of a factor of given length in the order from smallest to largest.\n    This method takes a list of factors as input and returns the maximum length of each factor in the order from smallest to largest.\n    Input factor can be a list of factors with the size(f) method\n    >>> factorize([(1, 4), (1, 2), (1, 3), (1, 5), (1, 6), (2, 5), (2, 5), (2, 2), (2, 2), (2, 3), (2, 3), (2, 6), (2, 3), (3, 5), (3, 5), (3, 6), (4, 6), (4, 5), (4, 5), (4, 5), (5, 6), (5, 6), (5, 6), (6, 5), (6, 5), (6, 2), (6, 2), (6, 2), (6, 3), (6, 3), (6, 3), (6, 3), (6, 3), (6, 3), (6, 3), (6, 3), (6, 3), (6,", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [factorize(i) for i in range(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(factorize(n * 2)).map(factorize(n * 5))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    a = n / 10\n    b = n / 100\n    c = n / 1000\n    d = n / 10000\n    e = n / 1000000\n    f = n / 1000000000\n    g = n / 1000000000\n    h = n / 1000000\n    i = n / 1000000000\n    j = n / 1000000\n    k = n / 1000000000\n    l = n / 1000000\n    m = n / 1000000000\n    n = n / 1000000000\n\n    for i in range(0, len(a)):\n        for j in range(0, len(b)):\n            for k in range(0, len(c)):\n                for l in range(0, len(d)):\n                    for m in range(0, len(e)):\n                        for n in range(0, len(f)):\n                            if i % a == 0:\n                                print(i * a + j * b + k * c + l * d + m * e + n * f + g * e + h * d + i * f + j * d + k * e + l * d + m * e + n * f + g * e + h * d + i * d + j * d + k * e + l *", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    return List([factorize(i) for i in range(n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError('Number must be an int')\n    return List([factorize(n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # The input should be in the form (1, 2, 3, 4, 5)\n    # The first factor should be the largest factor in the order from smallest to largest\n    if n % 2 == 0:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    elif n % 4 == 0:\n        return [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    elif n % 6 == 0:\n        return [1, 3, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    elif n % 3 == 0:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    elif n % 2 == 3:\n        return [1, 3, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    elif n % 4 == 3:\n        return [1, 3, 2, 1, 4, 5, 6, 7, 8, 9,", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    return List[int](n)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    return List(map(int, n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(map(factorize, list(range(n * n + 1)) + list(range(n * n + 1)) + list(range(n * n + 1))))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    def loadFactor(f, x) -> List[int]:\n        if x == 0: return f\n        x += 1\n        if not isinstance(f, list):\n            for i in range(x):\n                if i!= 0:\n                    yield loadFactor(f[i], i)\n        return f\n\n    def loadFactorPair(f, x) -> List[int]:\n        if x == 0:\n            return f\n        if x % 2!= 0:\n            if x > 0:\n                yield loadFactor(loadFactorPair(f[::2], f[::2]), 1)\n        else:\n            yield loadFactorPair(loadFactorPair(f[::2], f[::2]), 1)\n        yield loadFactorPair(loadFactorPair(loadFactorPair(f[::2], f[::2]), 1), x)\n\n    if n <= 1:\n        return (0, 0)\n    else:\n        if n < 2:\n            yield factorize(n)\n        if n % 2 == 0:\n            yield factorize(n)\n        for f in loadFactorPair(f, n):\n            yield loadFactorPair(f[::2], f[::2])\n    return (0, 0)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"There should not be a factor of type int in the list.\")\n    primeFactor: List[int] = List([int(i) for i in range(n)])\n    for factor in factorize(n):\n        primeFactor.append(factor)\n\n    if n < nMax:\n        raise ValueError(\"There should not be a factor of type int in the list.\")\n    primeFactor: List[int] = List([int(i) for i in range(n)])\n    for factor in factorize(nMax):\n        primeFactor.append(factor)\n\n    return primeFactor\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(map(\n        lambda number: int(number * factorize(n))),\n        factorize(n * n) + (n * n) + factorize(n * n) + (n * n) + factorize(n * n) + (n * n) + factorize(n * n) + (n * n) + factorize(n * n) + (n * n) + factorize(n * n) + (n * n) + factorize(n * n) + (n * n) + factorize(n * n) + (n * n) + factorize(n * n) + (n * n) + factorize(n * n) + (n * n) + factorize(n * n) + (n * n) + factorize(n * n) + (n * n) + factorize(n * n) + (n * n) + factorize(n * n) + (n * n) + factorize(n * n) + (n * n) + factorize(n * n) + (n * n) + factorize(n * n) + (n * n) +", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    l = List(range(n))\n    for f in n.factors():\n        l.append(f)\n    return l", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n % 2 == 0:\n        if n % 2 == 0:\n            return List(list(factorize(1))) * list(factorize(2))\n    elif n % 2 == 1:\n        if n % 2 == 1:\n            return list(factorize(1)) * list(factorize(2))\n    elif n % 2 == 2:\n        if n % 2 == 2:\n            return list(factorize(1)) * list(factorize(2))\n    elif n % 2 == 3:\n        if n % 2 == 3:\n            return list(factorize(1)) * list(factorize(2))\n    elif n % 2 == 4:\n        if n % 2 == 4:\n            return list(factorize(1)) * list(factorize(2))\n    elif n % 2 == 5:\n        if n % 2 == 5:\n            return list(factorize(1)) * list(factorize(2))\n    elif n % 2 == 6:\n        if n % 2 == 6:\n            return list(factorize(1)) * list(factorize(2))\n    elif n % 2 == 7:\n        if n % 2 == 7:\n            return list(factorize(1)) * list(factorize(2))\n    elif n % 2 == 8:\n        if n % 2 == 8:", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    list_factor = []\n    if n < 0:\n        return list_factor\n    for i in range(n):\n        factor = factorize(i)\n        list_factor.append(factor[0] * factor[1])\n    for factor in list_factor:\n        yield factor[0] * factor[1]\n    return list_factor", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(range(n)) \\\n       .filter(\n            map(int, factorize(n) for n in range(n))) \\\n       .filter(\n            map(int, factorize(n) for n in range(n)) for n in range(n)) \\\n       .filter(\n            map(int, factorize(n) for n in range(n)) for n in range(n)) \\\n       .filter(\n            map(int, factorize(n) for n in range(n)) for n in range(n)) \\\n       .filter(\n            map(int, factorize(n) for n in range(n)) for n in range(n)) \\\n       .filter(\n            map(int, factorize(n) for n in range(n)) for n in range(n)) \\\n       .filter(\n            map(int, factorize(n) for n in range(n)) for n in range(n)) \\\n       .filter(\n            map(int, factorize(n) for n in range(n)) for n in range(n)) \\\n       .filter(\n            map(int, factorize(n) for n in range(n)) for n in range(n)) \\\n       .filter(\n            map(int, factorize(n", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 0:\n        return List([])\n    return factorize(n - 1)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List([factorial(n) for n in range(n)])\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(factorize(range(n)) for n in range(1, 10))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    # get the primes from the nth factor, and make their order \"up front\".\n    prime = n.copy()\n    for factor in range(0, n):\n        prime[factor] = factor\n\n    if prime == n:\n        return List(range(n))\n\n    # just start with the largest prime factors.\n    return factorize(n)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return n * factorize(n + 1) if n % 2 == 0 else n * factorize(n) if n % 5 == 0 else n * factorize(n + 1) if n % 7 == 0 else n", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n % 10 == 0:\n        return List(range(n))\n\n    factors = [n * factorize(i) for i in range(n) if i % 10 == 0 or i % 10 == 1]\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    for i in range(n):\n        factor = []\n        for j in range(i):\n            factor.append(factorial(i,j))\n        return factor", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(map(int, factorize(n)))\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0 or n > 1:\n        return []\n    nfactors = list(range(n))\n    rfactors = list(range(n))\n    factors = list()\n    for i in range(nfactors):\n        nfactor = factorize(i)\n        factors.append(nfactor)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(factorize(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor = list(range(n)) if n < 0 else []\n\n    for factor in factor:\n        if factor.index(factor[factor.index(factor) + 1]) >= 0:\n            return [factor[factor.index(factor) + 1], factor[factor.index(factor) + 2]]\n        if factor.index(factor[factor.index(factor) + 1]) <= 0:\n            return [factor[factor.index(factor) + 1, factor.index(factor) + 2]]\n        if factor.index(factor[factor.index(factor) + 2]) <= 0:\n            return [factor[factor.index(factor) + 1, factor.index(factor) + 3]]\n\n    return list(range(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return List([2, 2, 2])\n    return List([2, 2, 2])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return List(0)\n\n    return List(factorize(n * 2) + factorize(n * 3))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return List([20])\n    return List([Factor(factorize(n), factorize(n)) for factorize in factorize(n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    def getFactor(factor: List[int]) -> List[int]:\n        \"\"\"\n        Returns list of prime factors of given integer in the order from smallest to largest\n        \"\"\"\n        if not factor:\n            return None\n        while len(factor) > 1:\n            if len(factor[-1]) > 1:\n                continue\n            factor = factor[len(factor) - 1]\n            if not factor.isPrime():\n                return None\n            if not factor.isInfinite():\n                return None\n        return list(factor)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n < 1:\n        return [None]\n    else:\n        if not isinstance(n, int):\n            raise TypeError('Input input must be an int')\n\n        return factorize(n - 1) if n <= 1 else factorize(n + 1)\n\n    if n <= 1 or n <= 2:\n        return [None]\n\n    if not isinstance(n, List[int]):\n        raise TypeError('Input input must be an list of int')\n\n    if n > 1:\n        return [None]\n    else:\n        return factorize(n - 1) if n <= 1 else factorize(n + 1)\n\n    if n > 1:\n        return [None]\n    else:\n        return factorize(n - 1) if n <= 1 else factorize(n + 1)\n\n    if n > 1:\n        return [None]\n    else:\n        return factorize(n - 1) if n <= 1 else factorize(n + 1)\n\n    if n > 1:\n        return [None]\n    else:\n        return factorize(n - 1) if n <= 1 else factorize(n + 1)\n\n    return [None] if n == 1 else [None]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    list = n * (n + 1) * (n + 1)\n\n    return List(factorize(list).toList())\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    def multi_factor(factors) -> List[int]:\n        \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n        Each of the factors should be listed number of times corresponding to how many times it appears in\n        factorization.\n        Input number should be equal to the product of all factors.\n        >>> multi_factor(factors) < 2\n        True\n        >>> multi_factor(factors) > 2\n        False\n        >>> multi_factor(factors) < 5\n        True\n        >>> multi_factor(factors) > 5\n        False\n        >>> multi_factor(factors) < 7\n        True\n        >>> multi_factor(factors) > 7\n        False\n        >>> multi_factor(factors) < 10\n        True\n        >>> multi_factor(factors) > 10\n        False\n        >>> multi_factor(factors) < 20\n        True\n        >>> multi_factor(factors) > 20\n        False\n        >>> multi_factor(factors) < 30\n        True\n        >>> multi_factor(factors) > 30\n        False\n        >>> multi_factor(factors) < 40\n        True\n        >>> multi_factor(factors) > 40\n        False\n        >>> multi_factor(factors) < 50\n        True\n        >>> multi_factor(factors) > 50\n        False", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"Number is less than 2.\")\n\n    result = []\n    for i in range(n):\n        result.append(factorize(n - i))\n\n    if n > 2:\n        raise ValueError(\"Number is larger than 2.\")\n\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # number of factors: 3\n    factors = []\n    factors.append(3)\n    factors.append(2)\n    factors.append(1)\n    for i in range(2):\n        factors.append(i + 1)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    m: List[int] = List(range(n).map(i -> n / i).flatten())\n    m.reverse()\n    m.sort(reverse=True)\n    return sorted(m, key=lambda i: (i / m[i], i % m[i]))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(range(int(n)) for n in range(n)) if n <= 0 else [(n * n) for n in range(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = List()\n    for i, factor in enumerate(n):\n        result.append(factor)\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(n).iteritems() if n <= 0 else List(n + 1).iteritems() if n >= 0 else list(n)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # TODO: generate the correct number of factors in the order from smallest to largest in the given input\n    # NOTE: this function takes a list of integers as input\n    for i in range(n):\n        for j in range(i):\n            if i % j == 0:\n                yield j\n        for j in range(i):\n            yield j * factorize(j) / factorize(j)\n        yield i / factorize(i) / factorize(j)\n\n    return list(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    results = List[int]()\n    for factor in range(n):\n        results.append((factor * 2) + (factor * 3))\n    return results", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return n * 5 + 10 * 10 * 2 + 10 * 5", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    def unfactorize(n: int) -> List[int]:\n        \"\"\"Return list of prime factors of given integer in the order from smallest to largest.\n        Each of the factors should be listed number of times corresponding to how many times it appears in unfactorization.\n        Input number should be equal to the product of all factors\n        >>> unfactorize(8)\n        [2, 2, 2]\n        >>> unfactorize(25)\n        [5, 5]\n        >>> unfactorize(70)\n        [2, 5, 7]\n        \"\"\"\n\n        def unfactorize_factor(f: List[int], i: int) -> List[int]:\n            \"\"\"Return list of factors of factorization of given integer in the order from smallest to largest.\"\"\"\n            factor = f[i]\n            if factor is None:\n                raise TypeError(f\"Factorization failed to return factorization of given integer\")\n            factor = factor.shift()\n            # unfactorize_factor(n, 1) -> list of factor of each factor of given integer\n            # unfactorize_factor(n, 2) -> list of factor of each factor of given integer\n            # unfactorize_factor(n, 3) -> list of factor of each factor of given integer\n            # unfactorize_factor(n, 4) -> list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n    return List(n * factorize(2)).toList()", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = list(factorize(0))\n    if n == 0:\n        return list(factorize(1))\n    factors.reverse()\n    for i in range(n):\n        factors.append((factorize(i + 1), factorize(i + 1)))\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return List([2, 2, 2, 2])\n    if n % 2 == 1:\n        return List([5, 5, 5, 5])\n    if n % 2 == 2:\n        return List([2, 5, 5, 5])\n    return List([2, 5, 5, 5])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    #get the list of prime factors\n    primes = list()\n    for factor in n:\n        if factor in primes:\n            primes.append(factor)\n        else:\n            primes.append(factor)\n    return primes", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(n)\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List.from_iterable([factors[i] for factors in factorize(n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(n) * List(factorize(n).difference(None))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = List()\n    for i in range(n):\n        if n % i == 0:\n            result.append(i)\n        else:\n            result.append(i)\n\n    if not factorize(1):\n        raise ValueError(\"Factorization has failed.\")\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    return List((1, 2, 1, 2, 1, 1), (1, 1, 2, 1, 1, 1), (1, 1, 1, 2, 1, 1), (1, 1, 1, 2, 1, 1), (1, 1, 1, 1, 1), (1, 1, 1, 1, 1), (1, 1, 1, 1, 1), (1, 1, 1, 1, 1), (1, 1, 1, 1, 1), (1, 1, 1, 1, 1), (1, 1, 1, 1, 1), (1, 1, 1, 1, 1), (1, 1, 1, 1, 1), (1, 1, 1, 1, 1), (1, 1, 1, 1, 1), (1, 1, 1, 1, 1), (1, 1, 1, 1, 1), (1, 1, 1, 1, 1), (1, 1, 1, 1, 1), (1, 1, 1, 1, 1), (1, 1, 1, 1, 1), (1, 1, 1, 1, 1), (1, 1, 1, 1, 1), (1, 1, 1, 1, 1), (1, 1,", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List([factorize(i) for i in range(n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 1:\n        raise TypeError('need to have at least one factor of order n')\n    if n == 1:\n        return List([factorize(8)])\n    if n == 2:\n        return List([factorize(25)])\n    if n == 3:\n        return List([factorize(70)])\n    return List([factorize(2)])"]]