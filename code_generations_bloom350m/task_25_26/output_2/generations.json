[["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n % 2!= 0:\n        raise ValueError(\"Number must be divisible by 2, not %d\"%n)\n    if n % 5!= 0:\n        raise ValueError(\"Number must be divisible by 5, not %d\"%n)\n    if n % 7!= 0:\n        raise ValueError(\"Number must be divisible by 7, not %d\"%n)\n    if n % 2 == 0:\n        raise ValueError(\"Number must be divisible by 2, not %d\"%n)\n    return List(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List([factorialize(factorize(n, n - 1)) for factor in factorize(n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(n * (1 + factorize(n)))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"number must be positive\")\n    if n % 2 == 0:\n        raise ValueError(\"number must be greater than or equal to 2\")\n    if n % 2 == 1:\n        raise ValueError(\"number must be greater than or equal to 2\")\n    if n % 2 == 2:\n        raise ValueError(\"number must be greater than or equal to 2\")\n    if n % 2 == 3:\n        raise ValueError(\"number must be greater than or equal to 2\")\n    if n % 2 == 4:\n        raise ValueError(\"number must be greater than or equal to 2\")\n    if n % 2 == 5:\n        raise ValueError(\"number must be greater than or equal to 2\")\n    if n % 2 == 6:\n        raise ValueError(\"number must be greater than or equal to 2\")\n    if n % 2 == 7:\n        raise ValueError(\"number must be greater than or equal to 2\")\n    if n % 2 == 8:\n        raise ValueError(\"number must be greater than or equal to 2\")\n    if n % 2 == 9:\n        raise ValueError(\"number must be greater than or equal to 2\")\n    if n % 2 == 10:\n        raise ValueError(\"number must be greater than or equal to 2\")\n    if n % 2 == 11:\n        raise ValueError", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(n * factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List([factorize(i) for i in range(n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n > 1:\n        raise ValueError(\"Number must be less than or equal to 1\")\n    factors = []\n    for factor in n * 2:\n        factors.append(factor)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List([factorize(i) for i in n])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return List([])\n    if n == 1:\n        return List([fact(2)])\n    if n == 2:\n        return List([fact(2)])\n    if n == 3:\n        return List([fact(2)])\n    if n == 4:\n        return List([fact(2)])\n    if n == 5:\n        return List([fact(2)])\n    if n == 6:\n        return List([fact(2)])\n    if n == 7:\n        return List([fact(2)])\n    if n == 8:\n        return List([fact(2)])\n    if n == 9:\n        return List([fact(2)])\n    if n == 10:\n        return List([fact(2)])\n    if n == 11:\n        return List([fact(2)])\n    if n == 12:\n        return List([fact(2)])\n    if n == 13:\n        return List([fact(2)])\n    if n == 14:\n        return List([fact(2)])\n    if n == 15:\n        return List([fact(2)])\n    if n == 16:\n        return List([fact(2)])\n    if n == 17:", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = List([])\n    for i in range(n):\n        result.append(factorize(i))\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 1:\n        raise TypeError(\"integer must be greater than or equal to 1\")\n    if n % 2 == 0:\n        raise TypeError(\"integer must be greater than or equal to 2\")\n    if n % 5 == 0:\n        raise TypeError(\"integer must be greater than or equal to 5\")\n    if n % 7 == 0:\n        raise TypeError(\"integer must be greater than or equal to 7\")\n    return List(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Expected integer is less than 1.\")\n    if n % 2 == 0:\n        return [n]\n    factors = List(map(int, n * n * n * n * n))\n    for factor in factors:\n        if factor not in range(0, n):\n            raise ValueError(\"Expected factor is not in range (0, n)\")\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        return List([int(n * 1)])\n    if n % 2:\n        return List([int(n * 2)])\n    if n % 3:\n        return List([int(n * 3)])\n    if n % 4:\n        return List([int(n * 4)])\n    if n % 5:\n        return List([int(n * 5)])\n    if n % 6:\n        return List([int(n * 6)])\n    if n % 7:\n        return List([int(n * 7)])\n    return List([int(n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return List([25, 5, 7, 70])\n    elif n % 2 == 0:\n        return List([25, 5, 7, 70])\n    else:\n        return List([25, 5, 7, 70])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(n * (1 + factorize(1) / factorize(n - 1) * factorize(n - 1) / factorize(n - 1) * factorize(n - 1) * factorize(n - 1) * factorize(n - 1)) for n in range(1, n * 2))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List([factorize(n) for n in range(0, n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 1:\n        raise TypeError(\"Input must be an integer\")\n    if n > 1:\n        raise TypeError(\"Input must be an integer\")\n    return List(range(0, n - 1))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(n * 2 * n)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return List([1, 2, 2, 3, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return List([20, 50, 5, 5, 50])\n    elif n == 1:\n        return List([20, 50, 5, 5, 50])\n    elif n == 2:\n        return List([20, 50, 5, 5, 50])\n    elif n == 3:\n        return List([20, 50, 5, 5, 50])\n    elif n == 4:\n        return List([20, 50, 5, 5, 50])\n    elif n == 5:\n        return List([20, 50, 5, 5, 50])\n    elif n == 6:\n        return List([20, 50, 5, 5, 50])\n    elif n == 7:\n        return List([20, 50, 5, 5, 50])\n    elif n == 8:\n        return List([20, 50, 5, 5, 50])\n    elif n == 9:\n        return List([20, 50, 5, 5, 50])\n    elif n == 10:\n        return List([20, 50, 5, 5, 50])\n    elif n == 11:\n        return List([20, 50, 5, 5, 50])\n    elif n == 12:\n        return List([20, 50, 5,", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return List([1, 2, 5, 7])\n    elif n % 5 == 0:\n        return List([1, 2, 5, 7])\n    elif n % 7 == 0:\n        return List([1, 2, 5, 7])\n    else:\n        return List([1, 2, 5, 7])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Number of factors must be positive\")\n    if n > 1:\n        raise ValueError(\"Number of factors must be negative\")\n    if n % 2 == 0:\n        raise ValueError(\"Number of factors must be equal to 1 or greater\")\n    if n % 2!= 0:\n        raise ValueError(\"Number of factors must be equal to 0 or less\")\n    if n % 2!= 1:\n        raise ValueError(\"Number of factors must be equal to 1 or less\")\n    return List((factorize(n) for n in range(0, n + 1)))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n > 0:\n        return [factorialize(factorize(n)) for factorize in factorize(n)]\n    else:\n        return List(n)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    def factor(n) -> List[int]:\n        if n < 1:\n            return list([-1])\n        n = n % 2\n        for i in range(n):\n            if i < 0:\n                return list([-1])\n            if i >= 1:\n                return list([-1])\n            if i == 1:\n                return list([-1])\n            return list([-1])\n        return list([-1])\n\n    factorize(8)\n    factorize(5)\n    factorize(70)\n    return list([-1])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    def factorize_pow(n: int) -> List[int]:\n        \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n        Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n        Input number should be equal to the product of all factors\n        >>> factorize_pow(8)\n        [2, 2, 2]\n        >>> factorize_pow(25)\n        [5, 5]\n        >>> factorize_pow(70)\n        [2, 5, 7]\n        \"\"\"\n\n        def factorize_pow_pow(n) -> List[int]:\n            \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n            Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n            Input number should be equal to the product of all factors\n            >>> factorize_pow_pow(8)\n            [2, 2, 2]\n            >>> factorize_pow_pow(25)\n            [5, 5]\n            >>> factorize_pow_pow(70)\n            [2, 5, 7]\n            \"\"\"\n\n            def factorize_pow_pow_pow_pow(n) -> List[int]:\n                \"\"\" Return list of prime factors of given integer in the order from smallest", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return List(range(1, n))\n    return List(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(factorize(n, 1) for n in range(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    return List(range(n, n + 1))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return List([factorize(n) for n in range(1, n)])\n    return List([factorize(n) for n in range(1, n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        return [int(n)]\n    if n < 3:\n        return [int(n)] * [int(n)]\n    if n < 4:\n        return [int(n)] * [int(n)] * [int(n)]\n    if n < 5:\n        return [int(n)] * [int(n)] * [int(n)] * [int(n)] * [int(n)] * [int(n)] * [int(n)] * [int(n)] * [int(n)] * [int(n)] * [int(n)] * [int(n)] * [int(n)] * [int(n)] * [int(n)] * [int(n)] * [int(n)] * [int(n)] * [int(n)] * [int(n)] * [int(n)] * [int(n)] * [int(n)] * [int(n)] * [int(n)] * [int(n)] * [int(n)] *", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(range(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List([factorize(n) for n in range(1, n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return List([int(n) for n in range(2, n)])\n    else:\n        return List([int(n) for n in range(2, n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    for factor in n:\n        if factor < 1:\n            raise ValueError('Factor is not a power of two')\n        elif factor > 1:\n            raise ValueError('Factor is not a power of two')\n        else:\n            return list(factor)\n\n    return list(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 1:\n        return List(0)\n    factors = list(range(1, n))\n    for i in range(1, n):\n        factors.append(factorize(i))\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if isinstance(n, int):\n        return list(factorize(n))\n    elif isinstance(n, list):\n        return list(factorize(n))\n    else:\n        raise TypeError(\"Factorize must be a list, not int or list.\")", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    for n in range(n):\n        factor = n * (n % 2) + 1\n        return factorize(factor)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(factorize(n, 0, 2).flatten().sort(reverse=True) if n!= 0 else (n * 2, n * 3, n * 4, n * 5, n * 6, n * 7))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(range(n)) if n > 0 else []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [factorial(i) for i in range(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(n) * factorize(n)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n > 0:\n        return List([factorize(i) for i in range(n)])\n    return List([factorize(i) for i in range(n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    for factor in sorted(n):\n        for i in range(factor):\n            if factor in factorize(i):\n                return [factor]\n        raise TypeError(\"Input number should be equal to the product of all factors\")\n\n    return list(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List([1, 2, 3, 4, 5, 6])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    for i in range(n):\n        if i % 2 == 0:\n            yield (i / 2) * 2\n        elif i % 5 == 0:\n            yield (i / 5) * 2\n        elif i % 7 == 0:\n            yield (i / 7) * 2\n        yield (i % 2) * 2\n    yield (i / 2) * 2", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return List(0)\n    return factorize(n - 1)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(map(int, factorize(n)))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        return List([2, 2, 2])\n    if n < 3:\n        return List([5, 5, 7])\n    if n < 4:\n        return List([2, 2, 2])\n    if n < 5:\n        return List([2, 5, 7])\n    if n < 6:\n        return List([2, 2, 2])\n    if n < 7:\n        return List([2, 2, 2])\n    return List([2, 2, 2])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(factorize(n)).filter(isinstance).reverse()", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n % 2 == 0:\n        return List(0)\n    if n % 4 == 0:\n        return List(1)\n    if n % 8 == 0:\n        return List(2)\n    if n % 16 == 0:\n        return List(3)\n    if n % 24 == 0:\n        return List(4)\n    if n % 32 == 0:\n        return List(5)\n    if n % 64 == 0:\n        return List(6)\n    if n % 128 == 0:\n        return List(7)\n    if n % 256 == 0:\n        return List(8)\n    if n % 512 == 0:\n        return List(9)\n\n    if n % 1024 == 0:\n        return List(10)\n\n    if n % 2048 == 0:\n        return List(11)\n\n    if n % 4096 == 0:\n        return List(12)\n\n    if n % 8192 == 0:\n        return List(13)\n\n    if n % 16384 == 0:\n        return List(14)\n\n    if n % 32192 == 0:\n        return List(15)\n\n    if n % 64384 == 0:\n        return List(16)\n\n    if n % 128192 == 0:\n        return List(17)\n\n    if n % 256384 == 0:\n        return List(18)\n\n    if n % 512384 == 0:\n        return List(19)\n\n    if n % 1024384 == 0:", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(Factor(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List([n for n in factorize(n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(factorize(n))\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(range(n))\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return List([20])\n    elif n == 1:\n        return List([25])\n    elif n == 2:\n        return List([30])\n    elif n == 3:\n        return List([40])\n    elif n == 4:\n        return List([50])\n    elif n == 5:\n        return List([60])\n    elif n == 6:\n        return List([70])\n    elif n == 7:\n        return List([80])\n    elif n == 8:\n        return List([90])\n    elif n == 9:\n        return List([100])\n    elif n == 10:\n        return List([150])\n    elif n == 11:\n        return List([200])\n    elif n == 12:\n        return List([250])\n    elif n == 13:\n        return List([300])\n    elif n == 14:\n        return List([400])\n    elif n == 15:\n        return List([500])\n    elif n == 16:\n        return List([600])\n    elif n == 17:\n        return List([700])\n    elif n == 18:\n        return List([800])\n    elif n == 19:\n        return List([900])\n    elif n == 20:\n        return List([1000])\n    elif n == 21:\n        return List([", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Factorization of the input must be positive\")\n    factorized = list()\n    for i in range(n):\n        factorized.append(factorize(i))\n    return factorized", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List([factorize(i) for i in range(n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return List(range(2, n))\n    else:\n        return List(factorize(n - 1) + factorize(n + 1))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    def factor(n: int) -> List[int]:\n        \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n        Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n        Input number should be equal to the product of all factors\n        >>> factorize(8)\n        [2, 2, 2]\n        >>> factorize(25)\n        [5, 5]\n        >>> factorize(70)\n        [2, 5, 7]\n        \"\"\"\n        return list(factor(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 1:\n        return List(n)\n    return List(factors(n, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(factorize(n))\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(range(n)) if n < 10 else List(range(n)) if n < 50 else List(range(n)) if n < 100 else List(range(n)) if n < 1000 else List(range(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List([factorialize(n) for n in range(n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    def factor(n: int) -> List[int]:\n        \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n        Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n        Input number should be equal to the product of all factors\n        >>> factorize(8)\n        [2, 2, 2]\n        >>> factorize(25)\n        [5, 5]\n        >>> factorize(70)\n        [2, 5, 7]\n        \"\"\"\n        return factor(n)\n\n    def factorize(n: int) -> List[int]:\n        \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n        Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n        Input number should be equal to the product of all factors\n        >>> factorize(8)\n        [2, 2, 2]\n        >>> factorize(25)\n        [5, 5]\n        >>> factorize(70)\n        [2, 5, 7]\n        \"\"\"\n        return factorize(n, 0, n)\n\n    def factorize(n: int) -> List[int]:\n        \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n        Each of the factors should be listed number of times corresponding", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(n / factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    def _factorize(n) -> List[int]:\n        if n > 0:\n            for i in range(n):\n                factorize(i)\n\n        return List(factorize(n))\n\n    def factorize(n: int) -> List[int]:\n        if n > 0:\n            for i in range(n):\n                factorize(i)\n\n        return List(factorize(n))\n\n    def factorize(n: int) -> List[int]:\n        if n > 0:\n            for i in range(n):\n                factorize(i)\n\n        return List(factorize(n))\n\n    def factorize(n: int) -> List[int]:\n        if n > 0:\n            for i in range(n):\n                factorize(i)\n\n        return List(factorize(n))\n\n    def factorize(n: int) -> List[int]:\n        if n > 0:\n            for i in range(n):\n                factorize(i)\n\n        return List(factorize(n))\n\n    def factorize(n: int) -> List[int]:\n        if n > 0:\n            for i in range(n):\n                factorize(i)\n\n        return List(factorize(n))\n\n    def factorize(n: int) -> List[int]:\n        if n", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List([factorialize(factor(n)) for factor in list(factorize(n))])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List([factorize(n) for n in range(1, len(n) / 2)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 1:\n        return List([1, 2, 3])\n    if n > 1:\n        return List([1, 2, 3, 4])\n    if n % 2:\n        return List([1, 2, 3, 4])\n    return List([1, 2, 3, 4])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    def factorize(n) -> List[int]:\n        \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n        Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n        Input number should be equal to the product of all factors\n        >>> factorize(8)\n        [2, 2, 2]\n        >>> factorize(25)\n        [5, 5]\n        >>> factorize(70)\n        [2, 5, 7]\n        >>> factorize(50)\n        [2, 5, 5]\n        >>> factorize(60)\n        [2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Number must be greater than zero\")\n    if n % 2 == 0:\n        raise ValueError(\"Number must be greater than two\")\n    if n % 5 == 0:\n        raise ValueError(\"Number must be greater than five\")\n    if n % 7 == 0:\n        raise ValueError(\"Number must be greater than seven\")\n    if n % 10 == 0:\n        raise ValueError(\"Number must be greater than ten\")\n    if n % 100 == 0:\n        raise ValueError(\"Number must be greater than 100\")\n    return list(factorize(n))\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    return List([1 for i in range(n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return List([20, 20, 20])\n    else:\n        return factorize(n)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(range(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(factorial(n, n + 1))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(range(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    for i in range(n):\n        return List(factorize(i))\n\n    return List(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Loop through all factors and add up the number of times each factor appears in the list\n    for factor in factorize(n:):\n        if factor in list:\n            yield factor\n    return list(factor)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n > 1:\n        raise TypeError(\"Integer must be a power of 2\")\n    factors = List([fact(i) for i in range(n)])\n    for factor in factors:\n        yield factor", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List([1, 2, 5, 7, 6, 3, 2, 1, 0, 2, 5, 1])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(factorize(n / 2).split())\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n > 1:\n        return List([factorize(n) for n in range(1, n)])\n\n    return List([factorize(n) for n in range(1, n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return list(range(1, n * 2))\n    else:\n        return list(range(1, n * 2 * 2))\n\n    def factorize(factor: List[int]) -> List[int]:\n        \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n        Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n        Input number should be equal to the product of all factors.\n        >>> factorize(8)\n        [2, 2, 2]\n        >>> factorize(25)\n        [5, 5]\n        >>> factorize(70)\n        [2, 5, 7]\n        \"\"\"\n        if factor == 0:\n            return list(range(1, n * 2))\n        else:\n            return list(range(1, n * 2 * 2))\n\n    def factorize(factor: List[int]) -> List[int]:\n        \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n        Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n        Input number should be equal to the product of all factors.\n        >>> factorize(8)\n        [2, 2, 2]\n        >>> factorize(25)\n        [5, 5]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = List()\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(i % 2)\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # check if number is an integer\n    if n % 2 == 0:\n        raise TypeError(f\"Number is an integer\")\n    if n % 10 == 0:\n        raise TypeError(f\"Number is an integer\")\n    if n % 100 == 0:\n        raise TypeError(f\"Number is an integer\")\n    if n % 1000 == 0:\n        raise TypeError(f\"Number is an integer\")\n    if n % 10000 == 0:\n        raise TypeError(f\"Number is an integer\")\n    if n % 100000 == 0:\n        raise TypeError(f\"Number is an integer\")\n    if n % 1000000 == 0:\n        raise TypeError(f\"Number is an integer\")\n    if n % 10 == 0:\n        raise TypeError(f\"Number is an integer\")\n    if n % 20 == 0:\n        raise TypeError(f\"Number is an integer\")\n    if n % 100 == 0:\n        raise TypeError(f\"Number is an integer\")\n    if n % 1000 == 0:\n        raise TypeError(f\"Number is an integer\")\n    if n % 10000 == 0:\n        raise TypeError(f\"Number is an integer\")\n    if n % 100000 == 0:\n        raise TypeError(f\"Number is an integer\")\n    if n % 1000000 == 0:\n        raise TypeError(f\"Number", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return List([1, 2, 5, 7, 9, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 65, 70])\n    else:\n        return List([1, 2, 5, 7, 9, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 65, 70])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 2:\n        return List([1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    def factor(n: int) -> List[int]:\n        \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n        Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n        Input number should be equal to the product of all factors\n        >>> factorize(8)\n        [2, 2, 2]\n        >>> factorize(25)\n        [5, 5]\n        >>> factorize(70)\n        [2, 5, 7]\n        \"\"\"\n        if n == 0:\n            return List([int(n)])\n        if n % 2!= 0:\n            raise TypeError(\"Number must be divisible by 2.\")\n        if n % 3!= 0:\n            raise TypeError(\"Number must be divisible by 3.\")\n        if n % 4!= 0:\n            raise TypeError(\"Number must be divisible by 4.\")\n        if n % 5!= 0:\n            raise TypeError(\"Number must be divisible by 5.\")\n        if n % 6!= 0:\n            raise TypeError(\"Number must be divisible by 6.\")\n        if n % 7!= 0:\n            raise TypeError(\"Number must be divisible by 7.\")\n        return List([factor(n) for n", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(n * factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(n)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        raise TypeError(\"Expected an int, got %d\" % n)\n    return List([factorial(n) for n in range(n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    nums = [int(n) for n in range(n)]\n    return List([factorize(n) for n in nums])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(n * [factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(factorize(", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = List[int]()\n    for i in range(n):\n        result.append(factorize(i))\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(map(int, n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n *", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Input number should be greater than or equal to one\")\n    factors = List(n * 2)\n    for factor in factors:\n        if factor < 0:\n            raise ValueError(\"Factor factor is less than zero\")\n        if factor % 2:\n            raise ValueError(\"Factor factor is less than zero twice\")\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(factorize(n * 2))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return List([int(n)])\n    elif n <= 2:\n        return List([int(n)])\n    elif n <= 3:\n        return List([int(n)])\n    elif n <= 4:\n        return List([int(n)])\n    elif n <= 5:\n        return List([int(n)])\n    elif n <= 6:\n        return List([int(n)])\n    elif n <= 7:\n        return List([int(n)])\n    elif n <= 8:\n        return List([int(n)])\n    elif n <= 9:\n        return List([int(n)])\n    elif n <= 10:\n        return List([int(n)])\n    elif n <= 11:\n        return List([int(n)])\n    elif n <= 12:\n        return List([int(n)])\n    elif n <= 13:\n        return List([int(n)])\n    elif n <= 14:\n        return List([int(n)])\n    elif n <= 15:\n        return List([int(n)])\n    elif n <= 16:\n        return List([int(n)])\n    elif n <= 17:\n        return List([int(n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return List()\n    factorize.append((n, 0))\n    factorize.append((n, 1))\n    factorize.append((n, 2))\n    factorize.append((n, 3))\n    factorize.append((n, 4))\n    factorize.append((n, 5))\n    factorize.append((n, 6))\n    factorize.append((n, 7))\n    return List(factorize)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(map(int, factorize(n)))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 1:\n        return List([1, 5, 7, 5])\n    if n % 2 == 0:\n        return List([1, 2, 2, 2])\n    if n % 4 == 0:\n        return List([1, 3, 3, 3, 4])\n    if n % 6 == 0:\n        return List([1, 4, 4, 4, 4])\n    if n % 8 == 0:\n        return List([1, 5, 5, 5, 5, 6])\n    if n % 16 == 0:\n        return List([1, 6, 6, 6, 6, 6])\n    if n % 32 == 0:\n        return List([1, 7, 7, 7, 7, 7, 7])\n    return List([1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        raise TypeError(\"Input number should be greater than zero\")\n    return List(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [factorize(i) for i in range(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    # The list of factors\n    factors: List[int] = List(range(1, n))\n    for factor in factorize(n):\n        factors.append(factor)\n\n    # Return list of primes\n    primes: List[int] = List(range(1, n))\n    for factor in factors:\n        primes.append(factor)\n\n    return primes", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Note: this is not a good idea, as this function can return a list of prime factors of 7 (for example, the first\n    # factor should be 1 and the second 2). The function should return a list of prime factors of 30 (for example,\n    # the first factor should be 2 and the second 3). The function should return a list of prime factors of 70 (for\n    # example, the first factor should be 3 and the second 4). The function should return a list of prime factors of\n    # 100 (for example, the first factor should be 4 and the second 5). The function should return a list of prime factors of\n    # 1000 (for example, the first factor should be 5 and the second 6). The function should return a list of prime factors of\n    # 10000 (for example, the first factor should be 6 and the second 7). The function should return a list of prime factors of\n    # 100000 (for example, the first factor should be 6 and the second 8). The function should return a list of prime factors of\n    # 1000000 (for example, the first factor should be 6 and the second 9). The function should return a list of prime factors of\n    # 10 (for example, the first factor should be", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(range(n)) + list(", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(n)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(factorize(n) for n in range(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(Factor(n, 1), Factor(n, 2), Factor(n, 3), Factor(n, 4), Factor(n, 5), Factor(n, 6))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List([factorize(n) for n in range(1, n + 1)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n > 0:\n        return List([int(factorize(n)) for n in range(1, n)])\n    else:\n        return List([int(factorize(n)) for n in range(1, n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list([factorialize(factor(n) for factor in factorize(n))])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(factorize(n) for n in range(8, 27))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n < 1:\n        raise TypeError(\"Expected an integer of the form 8 * 25 * 70\")\n\n    factors = []\n\n    for i in range(n):\n        factors.append(factorize(i))\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List([factorize(n) for n in range(2, n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(n * (1 << n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(factorize(n, 2))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 3:\n        raise TypeError(\"Number must be greater than or equal to 3\")\n    factors = [factorize(i) for i in range(n)]\n    return List(factors)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(factors(n) for n in range(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(map(int, list(factorize(n))))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if isinstance(n, int):\n        return List([factorize(n)])\n    else:\n        return list(Factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    n = n / 10\n    factor = list()\n    for i in range(n):\n        factor.append(i * i)\n    return factor", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return List()\n    return List([factorialize(factorize(n)) for factorize in factorize(n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(Factorize(n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(factorize(n)).toList()", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(range(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [factorial(n) for n in range(factorial(n) - 1)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # This function is not used for general factorization\n    # It works with lists of integers in the order from smallest to largest\n    def factorize(n: int) -> List[int]:\n        \"\"\" Return list of prime factors of given integer in the order from smallest to largest\n        Each of the factors should be listed number of times corresponding to how many times it appears in factorization\n        Input number should be equal to the product of all factors\n        >>> factorize(8)\n        [2, 2, 2]\n        >>> factorize(25)\n        [5, 5]\n        >>> factorize(70)\n        [2, 5, 7]\n        \"\"\"\n        if n < 1:\n            return List([])\n        result = List([])\n        for factor in factorize(n):\n            result.append(factor)\n        return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return List([factorial(i) for i in range(1, n)])\n    if n <= 2:\n        return List([factorial(i) for i in range(1, n)])\n    if n <= 3:\n        return List([factorial(i) for i in range(1, n)])\n    if n <= 4:\n        return List([factorial(i) for i in range(1, n)])\n    if n <= 5:\n        return List([factorial(i) for i in range(1, n)])\n    if n <= 6:\n        return List([factorial(i) for i in range(1, n)])\n    return List([factorial(i) for i in range(1, n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n % 2!= 0:\n        raise ValueError(\"Number of factors should be the same.\")\n\n    return list(factorize(n, 0) for n in range(n, n + 1))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(n) if n < 10 else list(Factor(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 1:\n        raise TypeError('integer is not a power of two')\n    return List([factorialize(factor(n)[0]) for factor in factorize(n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if isinstance(n, int):\n        return List[int(factorize(n))]\n\n    # First factor: n = 2\n    # Second factor: n = 5\n    # Third factor: n = 7\n    # Fourth factor: n = 70\n    return List[int(factorize(n))]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"Number must be greater than zero\")\n    factors = list()\n    for i in range(n):\n        factors.append(factorize(i))\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    def factorize_(n: int) -> List[int]:\n        \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n        Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n        Input number should be equal to the product of all factors\n        >>> factorize_(8)\n        [2, 2, 2]\n        >>> factorize_(25)\n        [5, 5]\n        >>> factorize_(70)\n        [2, 5, 7]\n        \"\"\"\n\n        return List([factorize_(i) for i in range(n)])\n\n    def factorize_prime(n) -> List[int]:\n        \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n        Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n        Input number should be equal to the product of all factors\n        >>> factorize_prime(8)\n        [2, 2, 2]\n        >>> factorize_prime(25)\n        [5, 5]\n        >>> factorize_prime(70)\n        [2, 5, 7]\n        \"\"\"\n\n        return List([factorize_(i) for i in range(n)])\n\n    def factorize_prime_prime(", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    def factor(n, i) -> int:\n        \"\"\" Return factor of given integer in the order from smallest to largest.\n        \"\"\"\n        if n < i:\n            return i\n        elif n == i:\n            return i\n        elif n == i and i == 0:\n            return i\n        elif n == i and i == i - 1:\n            return i - 1\n        elif n == i and i == i - 1:\n            return i - 2\n        elif n == i and i == i - 2:\n            return i - 3\n        elif n == i and i == i - 3:\n            return i - 4\n        elif n == i and i == i - 4:\n            return i - 5\n        elif n == i and i == i - 5:\n            return i - 6\n        elif n == i and i == i - 6:\n            return i - 7\n        elif n == i and i == i - 7:\n            return i - 8\n        elif n == i:\n            return i - 9\n        elif n == i + 1:\n            return i + 2\n        elif n == i + 2:\n            return i + 3\n        elif n == i + 3:\n            return i + 4\n        elif n == i + 4:\n            return i + 5\n        elif n == i + 5:\n            return i + 6", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(factorize(n))\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List([factorize(i) for i in range(n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(range(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(range(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 10:\n        raise ValueError(\"Expected to be in the range from 10 to 100\")\n    result = []\n    for factor in n * n + 1:\n        if factor == 0:\n            result.append(n)\n        elif factor == 1:\n            result.append(n)\n        elif factor == 2:\n            result.append(n)\n        elif factor == 3:\n            result.append(n)\n        elif factor == 4:\n            result.append(n)\n        elif factor == 5:\n            result.append(n)\n        elif factor == 6:\n            result.append(n)\n        elif factor == 7:\n            result.append(n)\n        else:\n            result.append(n)\n\n    for factor in n * n + 1:\n        if factor == 0:\n            result.append(n)\n        elif factor == 1:\n            result.append(n)\n        elif factor == 2:\n            result.append(n)\n        elif factor == 3:\n            result.append(n)\n        elif factor == 4:\n            result.append(n)\n        elif factor == 5:\n            result.append(n)\n        elif factor == 6:\n            result.append(n)\n        elif factor == 7:\n            result.append(n)\n\n    for factor in n * n + 1:\n        if factor == 0:\n            result.append(n)\n        elif factor == 1:\n            result.append", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    n = n * 2\n    result = List([fact(i) for i in range(n)])\n\n    for factor in n:\n        result.append(factor)\n\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    num = n\n    factors = List([factorize(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor(factor", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 1:\n        raise TypeError(\"Number must be greater than zero\")\n    return List(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    n = int(n)\n    factors = List([n * n + 1])\n    for i in range(n):\n        factors.append(n * n + i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(Factorize(n, List(range(n))).map(factorize))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Number should be less than or equal to 8\")\n    if n > 1:\n        raise ValueError(\"Number should be greater than or equal to 25\")\n    if n % 2 == 0:\n        raise ValueError(\"Number should be greater than or equal to 70\")\n    if n % 4 == 0:\n        raise ValueError(\"Number should be greater than or equal to 20\")\n    if n % 8 == 0:\n        raise ValueError(\"Number should be greater than or equal to 16\")\n    if n % 16 == 0:\n        raise ValueError(\"Number should be greater than or equal to 32\")\n    if n % 32 == 0:\n        raise ValueError(\"Number should be greater than or equal to 64\")\n    if n % 128 == 0:\n        raise ValueError(\"Number should be greater than or equal to 128\")\n    if n % 256 == 0:\n        raise ValueError(\"Number should be greater than or equal to 64\")\n    if n % 512 == 0:\n        raise ValueError(\"Number should be greater than or equal to 128\")\n    if n % 1024 == 0:\n        raise ValueError(\"Number should be greater than or equal to 128\")\n    return List(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(map(int, factorize(n)))\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = List(n)\n    for factor in range(n):\n        result.append(factor)\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List([factorialize(factor(n)[0]) for factor in factorize(n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 1:\n        return List(0)\n    if n > 1:\n        return List(n - 1)\n    if n < 2:\n        return List(n - 2)\n    if n < 3:\n        return List(n - 3)\n    if n < 4:\n        return List(n - 4)\n    if n < 5:\n        return List(n - 5)\n    if n < 6:\n        return List(n - 6)\n    if n < 7:\n        return List(n - 7)\n    if n < 8:\n        return List(n - 8)\n    return List(n - 1)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return List(range(1, n))\n    elif n % 2 == 1:\n        return List(range(1, n))\n    elif n % 2 == 2:\n        return List(range(1, n))\n    elif n % 2 == 3:\n        return List(range(1, n))\n    elif n % 2 == 4:\n        return List(range(1, n))\n    elif n % 2 == 5:\n        return List(range(1, n))\n    elif n % 2 == 6:\n        return List(range(1, n))\n    elif n % 2 == 7:\n        return List(range(1, n))\n    elif n % 2 == 8:\n        return List(range(1, n))\n    elif n % 2 == 9:\n        return List(range(1, n))\n    elif n % 2 == 10:\n        return List(range(1, n))\n    elif n % 2 == 11:\n        return List(range(1, n))\n    elif n % 2 == 12:\n        return List(range(1, n))\n    elif n % 2 == 13:\n        return List(range(1, n))\n    elif n % 2 == 14:\n        return List(range(1, n))\n    elif n % 2 == 15:\n        return List(range(1, n", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(n)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 2:\n        return List([1, 2, 4])\n    if n <= 3:\n        return List([1, 2, 4])\n    if n <= 4:\n        return List([1, 2, 4])\n    if n <= 5:\n        return List([1, 2, 4])\n    if n <= 6:\n        return List([1, 2, 4])\n    if n <= 7:\n        return List([1, 2, 4])\n    if n <= 8:\n        return List([1, 2, 4])\n    if n <= 9:\n        return List([1, 2, 4])\n    if n <= 10:\n        return List([1, 2, 4])\n    if n <= 11:\n        return List([1, 2, 4])\n    if n <= 12:\n        return List([1, 2, 4])\n    if n <= 13:\n        return List([1, 2, 4])\n    if n <= 14:\n        return List([1, 2, 4])\n    if n <= 15:\n        return List([1, 2, 4])\n    if n <= 16:\n        return List([1, 2, 4])\n    if n <= 17:\n        return List([1, 2, 4])\n    if n <= 18:\n        return List([1, 2, 4])\n    if n <= 19:\n        return List([1, 2, 4])\n    if n <=", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 1:\n        return List([2, 2, 2])\n    if n > 1:\n        return List([5, 5, 7])\n    if n == 1:\n        return List([2, 2, 2])\n    if n == 2:\n        return List([2, 2, 2])\n    if n == 3:\n        return List([2, 2, 2])\n    if n == 4:\n        return List([2, 2, 2])\n    if n == 5:\n        return List([2, 2, 2])\n    if n == 6:\n        return List([2, 2, 2])\n    if n == 7:\n        return List([2, 2, 2])\n    return List([2, 5, 7])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    return List.from_iterable(factorize(int(n), 2)).flatten()", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n < 1:\n        return List(n)\n\n    if n % 2 == 0:\n        return List(n)\n    if n % 2 == 1:\n        return List(n)\n\n    if n % 2 == 0:\n        return List(n)\n    if n % 2 == 1:\n        return List(n)\n\n    if n % 2 == 0:\n        return List(n)\n\n    if n % 2 == 0:\n        return List(n)\n\n    if n % 2 == 0:\n        return List(n)\n\n    if n % 2 == 0:\n        return List(n)\n\n    if n % 2 == 0:\n        return List(n)\n\n    if n % 2 == 0:\n        return List(n)\n\n    if n % 2 == 0:\n        return List(n)\n\n    if n % 2 == 0:\n        return List(n)\n\n    if n % 2 == 0:\n        return List(n)\n\n    if n % 2 == 0:\n        return List(n)\n\n    if n % 2 == 0:\n        return List(n)\n\n    if n % 2 == 0:\n        return List(n)\n\n    if n % 2 == 0:\n        return List(n)\n\n    if n % 2 == 0:\n        return List(n)\n\n    if n % 2 == 0:\n        return List(n)\n\n    if n % 2 == 0:\n        return List(n)\n\n    if n % 2 ==", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return List([factorize(n)])\n\n    return List([factorize(n) for n in range(n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(factorize(n / 2).map(int))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    factor = list()\n    for i in range(n):\n        factor.append(factorize(i))\n    return factor", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(n * (1 + factorize(n) * factorize(n)))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return list(factorize(n * n))\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(map(factorize, n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 1:\n        raise TypeError(\"Number must be greater than or equal to 1.\")\n    if n % 2 == 0:\n        return List([n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2, n % 2", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # use a list of prime factors\n    return List(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return List([0, 2, 2])\n    elif n == 2:\n        return List([0, 2, 4])\n    elif n == 3:\n        return List([0, 2, 6])\n    elif n == 4:\n        return List([0, 2, 8])\n    elif n == 5:\n        return List([0, 2, 9])\n    elif n == 6:\n        return List([0, 2, 10])\n    elif n == 7:\n        return List([0, 2, 11])\n    elif n == 8:\n        return List([0, 2, 12])\n    elif n == 9:\n        return List([0, 2, 13])\n    elif n == 10:\n        return List([0, 2, 14])\n    elif n == 11:\n        return List([0, 2, 15])\n    elif n == 12:\n        return List([0, 2, 16])\n    elif n == 13:\n        return List([0, 2, 17])\n    elif n == 14:\n        return List([0, 2, 18])\n    elif n == 15:\n        return List([0, 2, 19])\n    elif n == 16:\n        return List([0, 2, 20])\n    elif n == 17:\n        return List([0, 2, 21])\n    elif n == 18:", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(range(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(Factorize(n, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return List([(n % 2)])\n    return List([(n % 2)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"Number of factors must be at least 2.\")\n    factors = []\n    for i in range(n):\n        factors.append(factorize(i))\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return List()\n    factors = []\n    for i in range(n):\n        factors.append(factorize(i))\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 1:\n        raise TypeError(\"Input number should be equal to the product of all factors\")\n    factors = []\n    for i in range(n):\n        factor = factorize(i)\n        factors.append(factor)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Convert to int\n    return n * (1 << (n-1)) + factorize(n)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return List(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return List(0)\n    factors = List(n * 2)\n    for factor in range(n):\n        for i in range(0, 2):\n            factors.append(factor * factor + i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n > 0:\n        return [int(f) for f in factorize(n)]\n    else:\n        return List(0)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    factors = []\n    for i in range(n):\n        factor = factorize(i)\n        factors.append(factor)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n < 1:\n        return List([int(n)])\n    if n % 2 == 0:\n        return List([int(n)])\n    if n % 3 == 0:\n        return List([int(n)])\n    if n % 4 == 0:\n        return List([int(n)])\n    if n % 5 == 0:\n        return List([int(n)])\n    if n % 6 == 0:\n        return List([int(n)])\n    if n % 7 == 0:\n        return List([int(n)])\n    return List([int(n)])", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 1:\n        raise TypeError(\"Input number should be equal to the product of all factors\")\n    if n == 0:\n        return List(n)\n    for i in range(n):\n        if i % 2 == 0:\n            return List(i)\n        if i % 2 == 1:\n            return List(i)\n        if i % 2 == 2:\n            return List(i)\n    return List(n)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    n = int(n)\n\n    # The prime factors can be found in the form\n    # 2 * 3 * 6 * 7 * 9 * 11 * 14 * 16 * 18 * 20 * 22 * 24 * 28 * 30 * 32 * 34 * 36 * 40 * 42 * 44 * 48 * 52 * 54 * 56 * 60 * 62 * 64 * 68 * 72 * 76 * 80 * 90 * 94 * 96 * 100 * 102 * 104 * 106 * 108 * 112 * 114 * 116 * 118 * 120 * 124 * 128 * 132 * 144 * 148 * 150 * 152 * 154 * 156 * 158 * 160 * 162 * 164 * 166 * 168 * 170 * 172 * 176 * 178 * 180 * 184 * 192 * 194 * 196 * 202 * 208 * 216 * 220 * 224 * 226 * 228 * 230 * 232 * 234 * 236 * 238 * 240 * 242 * 244 * 246 * 248 * 250 * 256 * 262 * 264 * 272 * 276 * 280 * 288 * 290 * 296 * 312 * 316 * 320 * 322 * 328 * 332 * 342 * 348 * 352 * 354 * 356 * 358 * 360 * 360 * 360 * 360 * 360 * 360 * 360 * 360 * 360 * 360 * 360 * 360"]]