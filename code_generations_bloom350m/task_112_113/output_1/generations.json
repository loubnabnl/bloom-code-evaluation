[["def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s.startswith(c):\n        return False\n    return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not isinstance(s,str):\n        return False, False\n    if not isinstance(c,str):\n        return False, False\n    if not isinstance(s,unicode):\n        return False, False\n    if not isinstance(c,unicode):\n        return False, False\n    if not isinstance(s,unicode):\n        return False, False\n    if not isinstance(s,unicode):\n        return False, False\n    if not isinstance(s,unicode):\n        return False, False\n    if not isinstance(s,unicode):\n        return False, False\n    if not isinstance(s,unicode):\n        return False, False\n    if not isinstance(s,unicode):\n        return False, False\n    if not isinstance(s,unicode):\n        return False, False\n    if not isinstance(s,unicode):\n        return False, False\n    if not isinstance(s,unicode):\n        return False, False\n    if not isinstance(s,unicode):\n        return False, False\n    if not isinstance(s,unicode):\n        return False, False\n    if not isinstance(s,unicode):\n        return False, False\n    if not isinstance(s,unicode):\n        return False, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)==0:\n        return False\n    if len(c)==0:\n        return False\n    if len(s)==1:\n        return True\n    if len(c)==1:\n        return True\n    if len(s)==2:\n        return True\n    if len(c)==2:\n        return True\n    if len(s)==3:\n        return True\n    if len(c)==3:\n        return True\n    if len(s)==4:\n        return True\n    if len(c)==4:\n        return True\n    if len(s)==5:\n        return True\n    if len(c)==5:\n        return True\n    if len(s)==6:\n        return True\n    if len(c)==6:\n        return True\n    if len(s)==7:\n        return True\n    if len(c)==7:\n        return True\n    if len(s)==8:\n        return True\n    if len(c)==8:\n        return True\n    if len(s)==9:\n        return True\n    if len(c)==9:\n        return True\n    if len(s)==10:\n        return True\n    if len(c)==10:\n        return True\n    if len(s)==11:\n        return True\n    if len", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return (False,True)\n    else:\n        return (True,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return False, False\n    elif len(c) == 0:\n        return False, False\n    else:\n        return True, True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s or not c:\n        return False\n    if len(s) == 1:\n        return True\n    if len(c) == 1:\n        return False\n    if len(s) == 2:\n        return True\n    if len(c) == 2:\n        return False\n    if len(s) == 3:\n        return True\n    if len(c) == 3:\n        return False\n    if len(s) == 4:\n        return True\n    if len(c) == 4:\n        return False\n    if len(s) == 5:\n        return True\n    if len(c) == 5:\n        return False\n    if len(s) == 6:\n        return True\n    if len(c) == 6:\n        return False\n    if len(s) == 7:\n        return True\n    if len(c) == 7:\n        return False\n    if len(s) == 8:\n        return True\n    if len(c) == 8:\n        return False\n    if len(s) == 9:\n        return True\n    if len(c) == 9:\n        return False\n    if len(s) == 10:\n        return True\n    if len(c) == 10:\n        return False\n    if len(s) == 11:\n        return True\n    if len(c) == 11:\n        return False\n    if len(", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == c and c == b:\n        return True\n    else:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == \"abc\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abc", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c or s == b:\n        return True\n    return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 1:\n        return (s,True)\n    elif len(s) == 2:\n        return (s,False)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not isinstance(s,str):\n        raise TypeError(\"Expected a string\")\n    if not isinstance(c,str):\n        raise TypeError(\"Expected a string\")\n    if not isinstance(s,list):\n        raise TypeError(\"Expected a list\")\n    if not isinstance(c,list):\n        raise TypeError(\"Expected a list\")\n    if not isinstance(s,tuple):\n        raise TypeError(\"Expected a tuple\")\n    if not isinstance(c,tuple):\n        raise TypeError(\"Expected a tuple\")\n    if not isinstance(s,str):\n        raise TypeError(\"Expected a string\")\n    if not isinstance(c,str):\n        raise TypeError(\"Expected a string\")\n    if not isinstance(s,str):\n        raise TypeError(\"Expected a string\")\n    if not isinstance(c,str):\n        raise TypeError(\"Expected a string\")\n    if not isinstance(s,str):\n        raise TypeError(\"Expected a string\")\n    if not isinstance(c,str):\n        raise TypeError(\"Expected a string\")\n    if not isinstance(s,str):\n        raise TypeError(\"", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == \"\":\n        return False\n    else:\n        return reverse_delete(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)==0:\n        return False\n    if len(c)==0:\n        return False\n    if len(s)==len(c):\n        return True\n    if len(s)==len(c):\n        return False\n    if len(s)==len(c):\n        return True\n    if len(s)==len(c):\n        return False\n    if len(s)==len(c):\n        return True\n    if len(s)==len(c):\n        return False\n    if len(s)==len(c):\n        return True\n    if len(s)==len(c):\n        return False\n    if len(s)==len(c):\n        return False\n    if len(s)==len(c):\n        return True\n    if len(s)==len(c):\n        return False\n    if len(s)==len(c):\n        return True\n    if len(s)==len(c):\n        return False\n    if len(s)==len(c):\n        return True\n    if len(s)==len(c):\n        return False\n    if len(s)==len(", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s.startswith(c):\n        return False\n    if not s.endswith(c):\n        return False\n    if s.startswith(c):\n        return True\n    if s.endswith(c):\n        return False\n    return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return (s,True)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not isinstance(s, str):\n        return False, False\n    if not isinstance(c, str):\n        return False, False\n    if not isinstance(s, list):\n        return False, False\n    if not isinstance(c, list):\n        return False, False\n    if not isinstance(s, list):\n        return False, False\n    if not isinstance(c, list):\n        return False, False\n    if not isinstance(s, list):\n        return False, False\n    if not isinstance(c, list):\n        return False, False\n    if not isinstance(s, list):\n        return False, False\n    if not isinstance(c, list):\n        return False, False\n    if not isinstance(s, list):\n        return False, False\n    if not isinstance(c, list):\n        return False, False\n    if not isinstance(s, list):\n        return False, False\n    if not isinstance(c, list):\n        return False, False\n    if not isinstance(s, list):\n        return False, False\n    if not isinstance(c, list):\n        return False, False\n    if not isinstance(s, list):\n        return False, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    else:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == \"abc\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abc", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return (True,True)\n    else:\n        return (False,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s or not c:\n        return False\n    return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    if s == c and c == b:\n        return True\n    if s == c and s == b:\n        return True\n    if s == c and s == b:\n        return True\n    if s == c and s == b:\n        return True\n    if s == c and s == b:\n        return True\n    if s == c and s == b:\n        return True\n    if s == c and s == b:\n        return True\n    if s == c and s == b:\n        return True\n    if s == c and s == b:\n        return True\n    if s == c and s == b:\n        return True\n    if s == c and s == b:\n        return True\n    if s == c and s == b:\n        return True\n    if s == c and s == b:\n        return True\n    if s == c and s == b:\n        return True\n    if s == c and s == b:\n        return True\n    if s == c and s == b:\n        return True\n    if s == c and s == b:\n        return True\n    if s == c and s == b:\n        return True\n    if s == c and s == b:\n        return True\n    if s == c and s == b:\n        return True\n    if s == c and s", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not isinstance(s, str):\n        return (False, False)\n    if not isinstance(c, str):\n        return (False, False)\n    if not isinstance(s, unicode):\n        return (False, False)\n    if not isinstance(c, unicode):\n        return (False, False)\n    if not isinstance(s, list):\n        return (False, False)\n    if not isinstance(c, list):\n        return (False, False)\n    if not isinstance(s, list):\n        return (False, False)\n    if not isinstance(c, list):\n        return (False, False)\n    if not isinstance(s, list):\n        return (False, False)\n    if not isinstance(s, list):\n        return (False, False)\n    if not isinstance(c, list):\n        return (False, False)\n    if not isinstance(s, list):\n        return (False, False)\n    if not isinstance(c, list):\n        return (False, False)\n    if not isinstance(s, list):\n        return (False, False)\n    if not isinstance(c, list):\n        return (False, False)\n    if not isinstance(s, list):\n        return (False, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (False, False)\n    elif len(c) == 0:\n        return (False, True)\n    else:\n        return (True, True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == \"\":\n        return False\n    else:\n        return reverse_delete(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 1:\n        return (s,True)\n    elif len(s) == 2:\n        return (s,False)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Expected string to be a string\")\n    if not isinstance(c, str):\n        raise TypeError(\"Expected string to be a string\")\n    if not isinstance(s, unicode):\n        raise TypeError(\"Expected string to be unicode\")\n    if not isinstance(c, unicode):\n        raise TypeError(\"Expected string to be unicode\")\n    if not isinstance(s, list):\n        raise TypeError(\"Expected list to be a list\")\n    if not isinstance(c, list):\n        raise TypeError(\"Expected list to be a list\")\n    if not isinstance(s, list):\n        raise TypeError(\"Expected list to be a list\")\n    if not isinstance(c, list):\n        raise TypeError(\"Expected list to be a list\")\n    if not isinstance(s, list):\n        raise TypeError(\"Expected list to be a list\")\n    if not isinstance(s, list):\n        raise TypeError(\"Expected list to be a list\")\n    if not isinstance(c, list):\n        raise TypeError(\"Expected list to be a list\")\n    if not isinstance(", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s or not c:\n        return False\n    return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == a:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == a:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == a:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == a:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == a:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == a:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == a:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == a:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == a:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == a:\n        return True\n    elif s == c and c", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == c and c == b:\n        return True\n    else:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return (False,True)\n    else:\n        return (True,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c or s == b:\n        return True\n    else:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return (s,True)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 1:\n        return (s,True)\n    elif len(s) == 2:\n        return (s,False)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == \"\":\n        return False\n    else:\n        return reverse_delete(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s.startswith(c):\n        return False, False\n    else:\n        return True, True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    if s == \"abc\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abc", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == b:\n        return False\n    else:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return (False,True)\n    else:\n        return (False,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c or s == \"\":\n        return False\n    elif s == \"\":\n        return True\n    elif s == \"\":\n        return False\n    elif s == \"\":\n        return True\n    elif s == \"\":\n        return False\n    elif s == \"\":\n        return True\n    elif s == \"\":\n        return False\n    elif s == \"\":\n        return True\n    elif s == \"\":\n        return False\n    elif s == \"\":\n        return True\n    elif s == \"\":\n        return False\n    elif s == \"\":\n        return True\n    elif s == \"\":\n        return False\n    elif s == \"\":\n        return True\n    elif s == \"\":\n        return False\n    elif s == \"\":\n        return True\n    elif s == \"\":\n        return False\n    elif s == \"\":\n        return True\n    elif s == \"\":\n        return False\n    elif s == \"\":\n        return True\n    elif s == \"\":\n        return False\n    elif s == \"\":\n        return True\n    elif s == \"\":\n        return False\n    elif s == \"\":\n        return True\n    elif s == \"\":\n        return False\n    elif s == \"\":\n        return True\n    elif s == \"\":\n        return False\n    elif s == \"\":\n        return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s.startswith(c):\n        return False\n    if not reverse(s):\n        return False\n    if not reverse(c):\n        return False\n    if not reverse(s):\n        return False\n    if not reverse(c):\n        return False\n    if not reverse(s):\n        return False\n    if not reverse(c):\n        return False\n    if not reverse(s):\n        return False\n    if not reverse(c):\n        return False\n    if not reverse(s):\n        return False\n    if not reverse(c):\n        return False\n    if not reverse(s):\n        return False\n    if not reverse(c):\n        return False\n    if not reverse(s):\n        return False\n    if not reverse(c):\n        return False\n    if not reverse(s):\n        return False\n    if not reverse(c):\n        return False\n    if not reverse(s):\n        return False\n    if not reverse(c):\n        return False\n    if not reverse(s):\n        return False\n    if not reverse(c):\n        return False\n    if not reverse(s):\n        return False\n    if not reverse(c):\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    else:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not isinstance(s,str):\n        return False, False\n    if not isinstance(c,str):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(c,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not isinstance(s,str):\n        return False, False\n    if not isinstance(c,str):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(c,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(c,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(c,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(c,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(c,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(c,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(c,list):\n        return False, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s.startswith(c):\n        return False\n    if not reverse(s):\n        return False\n    return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not isinstance(s,str):\n        return (False,False)\n    if not isinstance(c,str):\n        return (False,True)\n    if not isinstance(s,list):\n        return (False,False)\n    if not isinstance(c,list):\n        return (False,True)\n    if not isinstance(s,tuple):\n        return (False,False)\n    if not isinstance(c,tuple):\n        return (False,True)\n    if not isinstance(s,str):\n        return (False,False)\n    if not isinstance(c,str):\n        return (False,True)\n    if not isinstance(s,str):\n        return (False,False)\n    if not isinstance(c,str):\n        return (False,True)\n    if not isinstance(s,str):\n        return (False,False)\n    if not isinstance(c,str):\n        return (False,True)\n    if not isinstance(s,str):\n        return (False,False)\n    if not isinstance(c,str):\n        return (False,True)\n    if not isinstance(s,str):\n        return (False,False)\n    if not isinstance(c,str):\n        return (False,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    if s == \"abc\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abc", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 1:\n        return (s,True)\n    elif len(s) == 2:\n        return (s,False)\n    elif len(s) == 3:\n        return (s,True)\n    elif len(s) == 4:\n        return (s,False)\n    elif len(s) == 5:\n        return (s,True)\n    elif len(s) == 6:\n        return (s,False)\n    elif len(s) == 7:\n        return (s,True)\n    elif len(s) == 8:\n        return (s,False)\n    elif len(s) == 9:\n        return (s,True)\n    elif len(s) == 10:\n        return (s,False)\n    elif len(s) == 11:\n        return (s,True)\n    elif len(s) == 12:\n        return (s,False)\n    elif len(s) == 13:\n        return (s,True)\n    elif len(s) == 14:\n        return (s,False)\n    elif len(s) == 15:\n        return (s,True)\n    elif len(s) == 16:\n        return (s,False)\n    elif len(s) == 17:\n        return (s,True)\n    elif len(s) == 18:\n        return (s,False)\n    elif len(", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == b:\n        return False\n    else:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == \"abc\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abc", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == \"abcdef\":\n        return False\n    else:\n        return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    else:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 1:\n        return (s,True)\n    elif len(s) == 2:\n        return (s,False)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return (True,False)\n    else:\n        return (False,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s.startswith(c):\n        return False\n    else:\n        return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == \"abc\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcde\":\n        return True\n    elif s == \"abc\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abc\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abc\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abc\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abc\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abc\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abc\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abc\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abc\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abc\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s.startswith(c):\n        return False\n    return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not isinstance(s,str):\n        return (False,False)\n    if not isinstance(c,str):\n        return (False,True)\n    if len(s)==len(c):\n        return (True,False)\n    if len(s)==len(c):\n        return (True,True)\n    if len(s)==len(c):\n        return (True,True)\n    if len(s)==len(c):\n        return (True,True)\n    if len(s)==len(c):\n        return (True,True)\n    if len(s)==len(c):\n        return (True,True)\n    if len(s)==len(c):\n        return (True,True)\n    if len(s)==len(c):\n        return (True,True)\n    if len(s)==len(c):\n        return (True,True)\n    if len(s)==len(c):\n        return (True,True)\n    if len(s)==len(c):\n        return (True,True)\n    if len(s)==len(c):\n        return (True,True)\n    if len(s)==len", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == \"abc\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abc", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return (True,True)\n    else:\n        return (False,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    else:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not isinstance(s,str):\n        s = reverse(reverse_delete,s)\n    if not isinstance(c,str):\n        c = reverse(reverse_delete,c)\n    if not isinstance(s,list):\n        s = reverse(reverse_delete,s)\n    if not isinstance(c,list):\n        c = reverse(reverse_delete,c)\n    if not isinstance(s,tuple):\n        s = reverse(reverse_delete,s)\n    if not isinstance(c,tuple):\n        c = reverse(reverse_delete,c)\n    if not isinstance(s,str):\n        s = reverse(reverse_delete,s)\n    if not isinstance(c,str):\n        c = reverse(reverse_delete,c)\n    if not isinstance(s,str):\n        s = reverse(reverse_delete,s)\n    if not isinstance(c,str):\n        c = reverse(reverse_delete,c)\n    if not isinstance(s,str):\n        s = reverse(reverse_delete,s)\n    if not isinstance(c,str):\n        c = reverse(reverse_delete,c)\n    if not isinstance(s,str):\n        s = reverse(reverse_delete,s)\n    if not isinstance(c,str)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 1:\n        return (s,True)\n    elif len(s) == 2:\n        return (s,False)\n    elif len(s) == 3:\n        return (s,True)\n    elif len(s) == 4:\n        return (s,False)\n    elif len(s) == 5:\n        return (s,True)\n    elif len(s) == 6:\n        return (s,False)\n    elif len(s) == 7:\n        return (s,True)\n    elif len(s) == 8:\n        return (s,False)\n    elif len(s) == 9:\n        return (s,True)\n    elif len(s) == 10:\n        return (s,False)\n    elif len(s) == 11:\n        return (s,True)\n    elif len(s) == 12:\n        return (s,True)\n    elif len(s) == 13:\n        return (s,False)\n    elif len(s) == 14:\n        return (s,True)\n    elif len(s) == 15:\n        return (s,False)\n    elif len(s) == 16:\n        return (s,True)\n    elif len(s) == 17:\n        return (s,False)\n    elif len(s) == 18:\n        return (s,True)\n    elif len(", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == \"\":\n        return False\n    else:\n        return reverse_delete(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not isinstance(s,str):\n        raise TypeError(\"Expected string, got %s\" % s)\n    if not isinstance(c,str):\n        raise TypeError(\"Expected string, got %s\" % c)\n    if len(s)==len(c):\n        return (s,True)\n    if len(s)==len(c):\n        return (s,False)\n    if len(s)==len(c):\n        return (s,False)\n    if len(s)==len(c):\n        return (s,False)\n    if len(s)==len(c):\n        return (s,True)\n    if len(s)==len(c):\n        return (s,True)\n    if len(s)==len(c):\n        return (s,True)\n    if len(s)==len(c):\n        return (s,True)\n    if len(s)==len(c):\n        return (s,True)\n    if len(s)==len(c):\n        return (s,True)\n    if len(s)==len(c):\n        return (s,True)\n    if len(s)==len(c):", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c and reverse_delete(s,c):\n        return True\n    else:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 1:\n        return (s,True)\n    elif len(s) == 2:\n        return (s,False)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not isinstance(s,str):\n        raise TypeError(\"Expected string to be a string\")\n    if not isinstance(c,str):\n        raise TypeError(\"Expected string to be a string\")\n    if not isinstance(s,list):\n        raise TypeError(\"Expected list to be a list\")\n    if not isinstance(c,list):\n        raise TypeError(\"Expected list to be a list\")\n    if not isinstance(s,unicode):\n        raise TypeError(\"Expected string to be unicode\")\n    if not isinstance(c,unicode):\n        raise TypeError(\"Expected string to be unicode\")\n    if not isinstance(s,unicode):\n        raise TypeError(\"Expected string to be unicode\")\n    if not isinstance(s,unicode):\n        raise TypeError(\"Expected string to be unicode\")\n    if not isinstance(c,unicode):\n        raise TypeError(\"Expected string to be unicode\")\n    if not isinstance(s,unicode):\n        raise TypeError(\"Expected string to be unicode\")\n    if not isinstance(c,unicode):\n        raise TypeError(\"Expected string to be unicode\")\n    if not isinstance(s,unicode):", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return (s,True)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return False\n    else:\n        if len(c) == 0:\n            return True\n        else:\n            if len(s) == len(c):\n                return True\n            else:\n                return False\n    return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s.startswith(c):\n        return False, False\n    if not s.startswith(c):\n        return False, False\n    if not s.startswith(c):\n        return False, False\n    if not s.startswith(c):\n        return False, False\n    if not s.startswith(c):\n        return False, False\n    if not s.startswith(c):\n        return False, False\n    if not s.startswith(c):\n        return False, False\n    if not s.startswith(c):\n        return False, False\n    if not s.startswith(c):\n        return False, False\n    if not s.startswith(c):\n        return False, False\n    if not s.startswith(c):\n        return False, False\n    if not s.startswith(c):\n        return False, False\n    if not s.startswith(c):\n        return False, False\n    if not s.startswith(c):\n        return False, False\n    if not s.startswith(c):\n        return False, False\n    if not s.startswith(c):\n        return False, False\n    if not s.startswith(c):\n        return False, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return (s,True)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c or s == \"\":\n        return False\n    else:\n        return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return True\n    elif len(s) == len(c):\n        return False\n    else:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return False, True\n    elif len(c) == 0:\n        return False, True\n    else:\n        return reverse_delete(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not isinstance(s,str):\n        raise TypeError(\"Expected string to be a string\")\n    if not isinstance(c,str):\n        raise TypeError(\"Expected string to be a string\")\n    if not isinstance(s,list):\n        raise TypeError(\"Expected list to be a list\")\n    if not isinstance(c,list):\n        raise TypeError(\"Expected list to be a list\")\n    if not isinstance(s,int):\n        raise TypeError(\"Expected int to be a int\")\n    if not isinstance(c,int):\n        raise TypeError(\"Expected int to be a int\")\n    if not isinstance(s,float):\n        raise TypeError(\"Expected float to be a float\")\n    if not isinstance(c,float):\n        raise TypeError(\"Expected float to be a float\")\n    if not isinstance(s,str):\n        raise TypeError(\"Expected string to be a string\")\n    if not isinstance(c,str):\n        raise TypeError(\"Expected string to be a string\")\n    if not isinstance(s,list):\n        raise TypeError(\"Expected list to be a list\")\n    if not", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s.startswith(c):\n        return False\n    return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == \"abc\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abc", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    if s == b:\n        return False\n    if s == d:\n        return True\n    if s == e:\n        return False\n    if s == f:\n        return False\n    if s == g:\n        return False\n    if s == h:\n        return False\n    if s == i:\n        return False\n    if s == j:\n        return False\n    if s == k:\n        return False\n    if s == l:\n        return False\n    if s == m:\n        return False\n    if s == n:\n        return False\n    if s == o:\n        return False\n    if s == p:\n        return False\n    if s == q:\n        return False\n    if s == r:\n        return False\n    if s == s:\n        return False\n    if s == t:\n        return False\n    if s == u:\n        return False\n    if s == v:\n        return False\n    if s == w:\n        return False\n    if s == x:\n        return False\n    if s == y:\n        return False\n    if s == z:\n        return False\n    if s == w:\n        return False\n    if s == x2:\n        return False\n    if s == y2:\n        return False\n    if s == z2:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 1:\n        return (s,True)\n    elif len(s) == 2:\n        return (s,False)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not c.startswith(s):\n        return False\n    if not c.endswith(s):\n        return False\n    if not c.isdigit():\n        return False\n    if not c.isalpha():\n        return False\n    if not c.islower():\n        return False\n    if not c.isalpha(' '):\n        return False\n    if not c.isdigit(' '):\n        return False\n    if not c.isdigit(' '):\n        return False\n    if not c.isdigit(' '):\n        return False\n    if not c.isdigit(' '):\n        return False\n    if not c.isdigit(' '):\n        return False\n    if not c.isdigit(' '):\n        return False\n    if not c.isdigit(' '):\n        return False\n    if not c.isdigit(' '):\n        return False\n    if not c.isdigit(' '):\n        return False\n    if not c.isdigit(' '):\n        return False\n    if not c.isdigit(' '):\n        return False\n    if not c.isdigit(' '):", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s.startswith(c):\n        return False\n    if not reverse(s):\n        return False\n    return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s.startswith(c):\n        return False\n    if not s.endswith(c):\n        return False\n    if not s.startswith(c) and not s.endswith(c):\n        return False\n    if not s.startswith(c) and not s.endswith(c):\n        return False\n    if not s.startswith(c) and not s.endswith(c):\n        return False\n    if not s.startswith(c) and not s.endswith(c):\n        return False\n    if not s.startswith(c) and not s.endswith(c):\n        return False\n    if not s.startswith(c) and not s.endswith(c):\n        return False\n    if not s.startswith(c) and not s.endswith(c):\n        return False\n    if not s.startswith(c) and not s.endswith(c):\n        return False\n    if not s.startswith(c) and not s.endswith(c):\n        return False\n    if not s.startswith(c) and not s.endswith(c):\n        return False\n    if not s.startswith(c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == \"\":\n        return False\n    else:\n        return reverse_delete(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == b:\n        return False\n    else:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c or s == \"\":\n        return False\n    return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s or not c:\n        return False, False\n    return True, True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s.startswith(c):\n        return False\n    if not s.endswith(c):\n        return False\n    return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    else:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == \"abc\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abc", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s.startswith(c):\n        return False\n    if not reverse(s):\n        return False\n    return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not isinstance(s,str):\n        raise TypeError(\"Expected string to be a string\")\n    if not isinstance(c,str):\n        raise TypeError(\"Expected string to be a string\")\n    if s.find(c)!= -1:\n        return False\n    return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)==0:\n        return False\n    elif len(c)==0:\n        return True\n    else:\n        return reverse_delete(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)==0:\n        return False\n    elif len(c)==0:\n        return True\n    else:\n        return reverse_delete(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return (True,False)\n    else:\n        return (False,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 1:\n        return (s,True)\n    elif len(s) == 2:\n        return (s,False)\n    elif len(s) == 3:\n        return (s,True)\n    elif len(s) == 4:\n        return (s,False)\n    elif len(s) == 5:\n        return (s,True)\n    elif len(s) == 6:\n        return (s,False)\n    elif len(s) == 7:\n        return (s,True)\n    elif len(s) == 8:\n        return (s,False)\n    elif len(s) == 9:\n        return (s,True)\n    elif len(s) == 10:\n        return (s,False)\n    elif len(s) == 11:\n        return (s,True)\n    elif len(s) == 12:\n        return (s,False)\n    elif len(s) == 13:\n        return (s,True)\n    elif len(s) == 14:\n        return (s,False)\n    elif len(s) == 15:\n        return (s,True)\n    elif len(s) == 16:\n        return (s,False)\n    elif len(s) == 17:\n        return (s,True)\n    elif len(s) == 18:\n        return (s,False)\n    elif len(", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not isinstance(s,str):\n        return False, False\n    if not isinstance(c,str):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(c,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(c,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(c,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(c,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(c,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(c,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c or s == \"\":\n        return False\n    else:\n        return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return False, True\n    elif len(c) == 0:\n        return False, True\n    else:\n        return True, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return (s,True)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s.startswith(c):\n        return False\n    return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not isinstance(s,str):\n        raise TypeError(\"Expected a string, got %s\" % s)\n    if not isinstance(c,str):\n        raise TypeError(\"Expected a string, got %s\" % c)\n    if not isinstance(s,list):\n        raise TypeError(\"Expected a list, got %s\" % s)\n    if not isinstance(c,list):\n        raise TypeError(\"Expected a list, got %s\" % c)\n    if not isinstance(s,tuple):\n        raise TypeError(\"Expected a tuple, got %s\" % s)\n    if not isinstance(c,tuple):\n        raise TypeError(\"Expected a tuple, got %s\" % c)\n    if not isinstance(s,str):\n        raise TypeError(\"Expected a string, got %s\" % s)\n    if not isinstance(c,str):\n        raise TypeError(\"Expected a string, got %s\" % c)\n    if not isinstance(s,list):\n        raise TypeError(\"Expected a list, got %s\" % s)\n    if not isinstance(c,list):\n        raise TypeError(\"Expected a list, got %s\" % c)\n    if not isinstance(s,tuple):\n        raise TypeError(\"", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == \"abc\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abc", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)==2:\n        return (s,True)\n    elif len(c)==2:\n        return (c,True)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    if s == \"abc\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abc", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s.startswith(c):\n        return False\n    if not reverse(s):\n        return False\n    return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s.startswith(c):\n        return False\n    else:\n        return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return False, True\n    if len(c) == 0:\n        return False, True\n    if len(s) == len(c):\n        return False, True\n    if len(s) == len(c):\n        return False, True\n    if len(s) == len(c):\n        return False, True\n    if len(s) == len(c):\n        return False, True\n    if len(s) == len(c):\n        return False, True\n    if len(s) == len(c):\n        return False, True\n    if len(s) == len(c):\n        return False, True\n    if len(s) == len(c):\n        return False, True\n    if len(s) == len(c):\n        return False, True\n    if len(s) == len(c):\n        return False, True\n    if len(s) == len(c):\n        return False, True\n    if len(s) == len(c):\n        return False, True\n    if len(s) == len(c):\n        return False, True\n    if len(s) == len(", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return False, False\n    elif len(c) == 0:\n        return False, False\n    else:\n        return True, True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 1:\n        return (s,True)\n    elif len(s) == 2:\n        return (s,False)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Expected a string to be a string\")\n    if not isinstance(c, str):\n        raise TypeError(\"Expected a string to be a string\")\n    if not isinstance(s, list):\n        raise TypeError(\"Expected a list to be a list\")\n    if not isinstance(c, list):\n        raise TypeError(\"Expected a list to be a list\")\n    if not isinstance(s, list):\n        raise TypeError(\"Expected a list to be a list\")\n    if not isinstance(c, list):\n        raise TypeError(\"Expected a list to be a list\")\n    if not isinstance(s, list):\n        raise TypeError(\"Expected a list to be a list\")\n    if not isinstance(c, list):\n        raise TypeError(\"Expected a list to be a list\")\n    if not isinstance(s, list):\n        raise TypeError(\"Expected a list to be a list\")\n    if not isinstance(c, list):\n        raise TypeError(\"Expected a list to be a list\")\n    if not isinstance(s, list):\n        raise TypeError(\"", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s or not c:\n        return False\n    return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 1:\n        return (True,True)\n    elif len(s) == 2:\n        return (False,False)\n    else:\n        return (False,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == \"abc\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abc", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    if s == \"abc\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abc\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abc\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abc\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abc\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abc\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abc\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abc\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abc\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abc\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abc\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s.startswith(c):\n        return False\n    else:\n        return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s.startswith(c):\n        return False, False\n    if not s.endswith(c):\n        return False, False\n    if not s.startswith(c):\n        return False, False\n    if not s.endswith(c):\n        return False, False\n    if not s.startswith(c):\n        return False, False\n    if not s.startswith(c):\n        return False, False\n    if not s.startswith(c):\n        return False, False\n    if not s.startswith(c):\n        return False, False\n    if not s.startswith(c):\n        return False, False\n    if not s.startswith(c):\n        return False, False\n    if not s.startswith(c):\n        return False, False\n    if not s.startswith(c):\n        return False, False\n    if not s.startswith(c):\n        return False, False\n    if not s.startswith(c):\n        return False, False\n    if not s.startswith(c):\n        return False, False\n    if not s.startswith(c):\n        return False, False\n    if not s.startswith(c):\n        return False,", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)==0:\n        return False\n    elif len(c)==0:\n        return True\n    else:\n        return reverse_delete(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 1:\n        return (s,True)\n    elif len(s) == 2:\n        return (s,False)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return False\n    elif s == \"", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not isinstance(s, unicode):\n        s = s.encode('utf-8')\n    if not isinstance(c, unicode):\n        c = c.encode('utf-8')\n    if not isinstance(s, list):\n        s = s.split(' ')\n    if not isinstance(c, list):\n        c = c.split(' ')\n    if not isinstance(s, list):\n        s = s.split(' ')\n    if not isinstance(s, list):\n        s = s.split(' ')\n    if not isinstance(s, list):\n        s = s.split(' ')\n    if not isinstance(s, list):\n        s = s.split(' ')\n    if not isinstance(s, list):\n        s = s.split(' ')\n    if not isinstance(s, list):\n        s = s.split(' ')\n    if not isinstance(s, list):\n        s = s.split(' ')\n    if not isinstance(s, list):\n        s = s.split(' ')\n    if not isinstance(s, list):\n        s = s.split(' ')\n    if not isinstance(s, list)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s.startswith(c):\n        return False, False\n    if not reverse(s):\n        return False, False\n    if not reverse(c):\n        return False, False\n    if not reverse(s) == reverse(c):\n        return False, False\n    return True, True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not isinstance(s,str):\n        return False, False\n    if not isinstance(c,str):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(c,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False\n    if not isinstance(s,list):\n        return False, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not isinstance(s,str):\n        return False, False\n    if not isinstance(c,str):\n        return False, False\n    if not isinstance(s,unicode):\n        return False, False\n    if not isinstance(c,unicode):\n        return False, False\n    if not isinstance(s,unicode):\n        return False, False\n    if not isinstance(s,unicode):\n        return False, False\n    if not isinstance(s,unicode):\n        return False, False\n    if not isinstance(s,unicode):\n        return False, False\n    if not isinstance(s,unicode):\n        return False, False\n    if not isinstance(s,unicode):\n        return False, False\n    if not isinstance(s,unicode):\n        return False, False\n    if not isinstance(s,unicode):\n        return False, False\n    if not isinstance(s,unicode):\n        return False, False\n    if not isinstance(s,unicode):\n        return False, False\n    if not isinstance(s,unicode):\n        return False, False\n    if not isinstance(s,unicode):\n        return False, False\n    if not isinstance(s,unicode):\n        return False, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return True\n    elif len(s) == len(c):\n        return False\n    else:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s.startswith(c):\n        return False\n    else:\n        return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s.startswith(c):\n        return False\n    return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return True\n    else:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    else:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s.startswith(c):\n        return False\n    return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s.startswith(c):\n        return False\n    if not s.endswith(c):\n        return False\n    return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not isinstance(s, unicode):\n        s = s.encode('utf-8')\n    if not isinstance(c, unicode):\n        c = c.encode('utf-8')\n    if not isinstance(s, list):\n        s = s.split(' ')\n    if not isinstance(c, list):\n        c = c.split(' ')\n    if not isinstance(s, list):\n        s = s.split(' ')\n    if not isinstance(s, list):\n        s = s.split(' ')\n    if not isinstance(s, list):\n        s = s.split(' ')\n    if not isinstance(s, list):\n        s = s.split(' ')\n    if not isinstance(c, list):\n        c = c.split(' ')\n    if not isinstance(s, list):\n        s = s.split(' ')\n    if not isinstance(c, list):\n        c = c.split(' ')\n    if not isinstance(s, list):\n        s = s.split(' ')\n    if not isinstance(c, list):\n        c = c.split(' ')\n    if not isinstance(s, list)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not c.isdigit():\n        return False\n    return reverse_delete(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return (True,True)\n    else:\n        return (False,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)==0:\n        return False, True\n    elif len(c)==0:\n        return False, True\n    else:\n        return True, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s.startswith(c):\n        return False\n    if not s.endswith(c):\n        return False\n    return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not isinstance(s,str):\n        return (False,False)\n    if not isinstance(c,str):\n        return (False,False)\n    if len(s)==len(c):\n        return (True,True)\n    if len(s)==len(c):\n        return (True,False)\n    if len(s)==len(c):\n        return (True,False)\n    if len(s)==len(c):\n        return (True,True)\n    if len(s)==len(c):\n        return (True,False)\n    if len(s)==len(c):\n        return (True,False)\n    if len(s)==len(c):\n        return (True,False)\n    if len(s)==len(c):\n        return (True,True)\n    if len(s)==len(c):\n        return (True,False)\n    if len(s)==len(c):\n        return (True,True)\n    if len(s)==len(c):\n        return (True,False)\n    if len(s)==len(c):\n        return (True,True)\n    if len(s)==len", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Expected a string to be a string\")\n    if not isinstance(c, str):\n        raise TypeError(\"Expected a string to be a string\")\n    if not isinstance(s, list):\n        raise TypeError(\"Expected a list to be a list\")\n    if not isinstance(c, list):\n        raise TypeError(\"Expected a list to be a list\")\n    if not isinstance(s, list):\n        raise TypeError(\"Expected a list to be a list\")\n    if not isinstance(s, list):\n        raise TypeError(\"Expected a list to be a list\")\n    if not isinstance(c, list):\n        raise TypeError(\"Expected a list to be a list\")\n    if not isinstance(s, list):\n        raise TypeError(\"Expected a list to be a list\")\n    if not isinstance(c, list):\n        raise TypeError(\"Expected a list to be a list\")\n    if not isinstance(s, list):\n        raise TypeError(\"Expected a list to be a list\")\n    if not isinstance(c, list):\n        raise TypeError(\"", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    else:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    else:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s.startswith(c):\n        return False\n    else:\n        return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return True\n    else:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not c.startswith(s):\n        return False\n    if not s.startswith(c):\n        return False\n    if not s.endswith(c):\n        return False\n    if not s.endswith(s):\n        return False\n    if not s.endswith(c):\n        return False\n    if not s.endswith(s):\n        return False\n    if not s.endswith(s):\n        return False\n    if not s.endswith(s):\n        return False\n    if not s.endswith(s):\n        return False\n    if not s.endswith(s):\n        return False\n    if not s.endswith(s):\n        return False\n    if not s.endswith(s):\n        return False\n    if not s.endswith(s):\n        return False\n    if not s.endswith(s):\n        return False\n    if not s.endswith(s):\n        return False\n    if not s.endswith(s):\n        return False\n    if not s.endswith(s):\n        return False\n    if not s.endswith(s):\n        return False\n    if not s.ends", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c == b:\n        return True\n    elif s == c and c", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    if s == \"abc\":\n        return False\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return False\n    if s == \"abcdef\":\n        return False\n    if s == \"abcdef\":\n        return False\n    if s == \"abcdef\":\n        return False\n    if s == \"abcdef\":\n        return False\n    if s == \"abcdef\":\n        return False\n    if s == \"abcdef\":\n        return False\n    if s == \"abcdef\":\n        return False\n    if s == \"abcdef\":\n        return False\n    if s == \"abcdef\":\n        return False\n    if s == \"abcdef\":\n        return False\n    if s == \"abcdef\":\n        return False\n    if s == \"abcdef\":\n        return False\n    if s == \"abcdef\":\n        return False\n    if s == \"abcdef\":\n        return False\n    if s == \"abcdef\":\n        return False\n    if s == \"abcdef\":\n        return False\n    if s == \"abcdef\":\n        return False\n    if s == \"abcdef\":\n        return False\n    if s == \"abcdef\":\n        return False\n    if s == \"abc", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return (True,True)\n    else:\n        return (False,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not c.startswith(s):\n        return False\n    if not s.startswith(c):\n        return False\n    if s.startswith(c):\n        return True\n    return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == c and c == b:\n        return True\n    else:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    else:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == b:\n        return False\n    else:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return (True, False)\n    else:\n        return (False, True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s.startswith(c):\n        return False\n    return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    if s == c.replace('abc','def'):\n        return True\n    return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s.startswith(c):\n        return False\n    if not s.endswith(c):\n        return False\n    return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (False,False)\n    if len(c) == 0:\n        return (True,False)\n    if len(s) == len(c):\n        return (True,True)\n    if len(s) == len(c):\n        return (False,False)\n    if len(s) == len(c):\n        return (True,True)\n    if len(s) == len(c):\n        return (False,True)\n    if len(s) == len(c):\n        return (True,True)\n    if len(s) == len(c):\n        return (False,True)\n    if len(s) == len(c):\n        return (False,True)\n    if len(s) == len(c):\n        return (False,True)\n    if len(s) == len(c):\n        return (False,True)\n    if len(s) == len(c):\n        return (False,True)\n    if len(s) == len(c):\n        return (False,True)\n    if len(s) == len(c):\n        return (False,True)\n    if len(s) == len(c):", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    else:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 1:\n        return (s,True)\n    elif len(s) == 2:\n        return (s,False)\n    elif len(s) == 3:\n        return (s,True)\n    elif len(s) == 4:\n        return (s,False)\n    elif len(s) == 5:\n        return (s,True)\n    elif len(s) == 6:\n        return (s,False)\n    elif len(s) == 7:\n        return (s,True)\n    elif len(s) == 8:\n        return (s,False)\n    elif len(s) == 9:\n        return (s,True)\n    elif len(s) == 10:\n        return (s,False)\n    elif len(s) == 11:\n        return (s,True)\n    elif len(s) == 12:\n        return (s,False)\n    elif len(s) == 13:\n        return (s,True)\n    elif len(s) == 14:\n        return (s,False)\n    elif len(s) == 15:\n        return (s,True)\n    elif len(s) == 16:\n        return (s,False)\n    elif len(s) == 17:\n        return (s,True)\n    elif len(s) == 18:\n        return (s,False)\n    elif len(", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == \"abc\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abc", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return (s,True)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == \"abc\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abc\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abc\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abc\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abc\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abc\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abc\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abc\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abc\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abc\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abc\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c or s == \"\":\n        return False\n    return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not isinstance(s, unicode):\n        s = s.encode('utf-8')\n    if not isinstance(c, unicode):\n        c = c.encode('utf-8')\n    if not isinstance(s, list):\n        s = s.split(' ')\n    if not isinstance(c, list):\n        c = c.split(' ')\n    if not isinstance(s, list):\n        s = s.split(' ')\n    if not isinstance(c, list):\n        c = c.split(' ')\n    if not isinstance(s, list):\n        s = s.split(' ')\n    if not isinstance(s, list):\n        s = s.split(' ')\n    if not isinstance(c, list):\n        c = c.split(' ')\n    if not isinstance(s, list):\n        s = s.split(' ')\n    if not isinstance(c, list):\n        c = c.split(' ')\n    if not isinstance(s, list):\n        s = s.split(' ')\n    if not isinstance(c, list):\n        c = c.split(' ')\n    if not isinstance(s, list)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not isinstance(s,str):\n        raise TypeError(\"Expected string to be a string\")\n    if not isinstance(c,str):\n        raise TypeError(\"Expected string to be a string\")\n    if not isinstance(s,list):\n        raise TypeError(\"Expected list to be a list\")\n    if not isinstance(c,list):\n        raise TypeError(\"Expected list to be a list\")\n    if not isinstance(s,list):\n        raise TypeError(\"Expected list to be a list\")\n    if not isinstance(c,list):\n        raise TypeError(\"Expected list to be a list\")\n    if not isinstance(s,list):\n        raise TypeError(\"Expected list to be a list\")\n    if not isinstance(c,list):\n        raise TypeError(\"Expected list to be a list\")\n    if not isinstance(s,list):\n        raise TypeError(\"Expected list to be a list\")\n    if not isinstance(c,list):\n        raise TypeError(\"Expected list to be a list\")\n    if not isinstance(s,list):\n        raise TypeError(\"Expected list to be a list\")\n    if not", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 1:\n        return (s,True)\n    elif len(s) == 2:\n        return (s,False)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == \"abc\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abc", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not isinstance(s,str):\n        return False\n    if not isinstance(c,str):\n        return False\n    if not isinstance(s,int):\n        return False\n    if not isinstance(c,int):\n        return False\n    if not isinstance(s,str):\n        return False\n    if not isinstance(c,str):\n        return False\n    if not isinstance(s,str):\n        return False\n    if not isinstance(c,str):\n        return False\n    if not isinstance(s,str):\n        return False\n    if not isinstance(c,str):\n        return False\n    if not isinstance(s,str):\n        return False\n    if not isinstance(c,str):\n        return False\n    if not isinstance(s,str):\n        return False\n    if not isinstance(c,str):\n        return False\n    if not isinstance(s,str):\n        return False\n    if not isinstance(c,str):\n        return False\n    if not isinstance(s,str):\n        return False\n    if not isinstance(c,str):\n        return False\n    if not isinstance(s,str):\n        return False\n    if not isinstance(c,str)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not isinstance(s,str):\n        raise TypeError(\"Expected string to be a string\")\n    if not isinstance(c,str):\n        raise TypeError(\"Expected string to be a string\")\n    if not isinstance(s,list):\n        raise TypeError(\"Expected list to be a list\")\n    if not isinstance(c,list):\n        raise TypeError(\"Expected list to be a list\")\n    if not isinstance(s,tuple):\n        raise TypeError(\"Expected tuple to be a tuple\")\n    if not isinstance(c,tuple):\n        raise TypeError(\"Expected tuple to be a tuple\")\n    if not isinstance(s,str):\n        raise TypeError(\"Expected string to be a string\")\n    if not isinstance(c,str):\n        raise TypeError(\"Expected string to be a string\")\n    if not isinstance(s,list):\n        raise TypeError(\"Expected list to be a list\")\n    if not isinstance(c,list):\n        raise TypeError(\"Expected list to be a list\")\n    if not isinstance(s,tuple):\n        raise TypeError(\"Expected tuple to be a tuple\")\n    if not", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c or s == b:\n        return True\n    return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return False\n    else:\n        for c in reversed(c):\n            if c == s:\n                return True\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return False\n    elif len(c) == 0:\n        return True\n    else:\n        if len(s) == len(c):\n            return True\n        else:\n            return False\n    return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 1:\n        return (s,True)\n    elif len(s) == 2:\n        return (s,False)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not isinstance(s,str):\n        return (False,False)\n    if not isinstance(c,str):\n        return (False,True)\n    if len(s)==len(c):\n        return (True,False)\n    else:\n        return (True,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not isinstance(s,str):\n        raise TypeError(\"Expected a string, got %s\" % s)\n    if not isinstance(c,str):\n        raise TypeError(\"Expected a string, got %s\" % c)\n    if not isinstance(s,list):\n        raise TypeError(\"Expected a list, got %s\" % s)\n    if not isinstance(c,list):\n        raise TypeError(\"Expected a list, got %s\" % c)\n    if not isinstance(s,tuple):\n        raise TypeError(\"Expected a tuple, got %s\" % s)\n    if not isinstance(c,tuple):\n        raise TypeError(\"Expected a tuple, got %s\" % c)\n    if not isinstance(s,str):\n        raise TypeError(\"Expected a string, got %s\" % s)\n    if not isinstance(c,str):\n        raise TypeError(\"Expected a string, got %s\" % c)\n    if not isinstance(s,list):\n        raise TypeError(\"Expected a list, got %s\" % s)\n    if not isinstance(c,list):\n        raise TypeError(\"Expected a list, got %s\" % c)\n    if not isinstance(s,tuple):\n        raise TypeError(\"", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    elif s == \"abc\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abcdef\":\n        return True\n    elif s == \"abc", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s.startswith(c):\n        return False\n    else:\n        return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return (s,True)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 1:\n        return (True,True)\n    elif len(s) == 2:\n        return (False,False)\n    else:\n        return (False,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    if s == \"abc\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abcdef\":\n        return True\n    if s == \"abc", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 1:\n        return (s, True)\n    elif len(s) == 2:\n        return (s, False)\n    else:\n        return (s, False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 1:\n        return (s,True)\n    elif len(s) == 2:\n        return (s,False)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return (True,False)\n    else:\n        return (False,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s.startswith(c):\n        return False\n    if not reverse(s):\n        return False\n    return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 1:\n        return (s,True)\n    elif len(s) == 2:\n        return (s,False)\n    else:\n        return (s,False)"]]