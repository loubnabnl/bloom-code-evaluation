[["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, int):\n        if isinstance(b, int):\n            if not isinstance(a, int):\n                raise TypeError('Expected int and not int')\n            if not isinstance(b, int):\n                raise TypeError('Expected int and not int')\n            return a.lstrip('0') + b.lstrip('0') + '0'\n        return a.lstrip('0') + b.lstrip('0') + '0'\n    else:\n        if isinstance(a, list):\n            if not isinstance(b, list):\n                raise TypeError('Expected list and not list')\n            if not isinstance(b, list):\n                raise TypeError('Expected list and not list')\n            return a.lstrip('0') + b.lstrip('0') + '0'\n        return a.lstrip('0') + b.lstrip('0') + '0'\n</s>", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return 'a ^ b'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if not a: in b:\n        raise ValueError('Input must be in a and b')\n    if not b: in a:\n        raise ValueError('Input must be in a and b')\n    if a in b:\n        raise ValueError('Input must be in a and b')\n    if a == b:\n        return '10'\n    else:\n        return '10'\n</s>", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return '101' if a.startswith('0') else a.rstrip('0')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a) == 0:\n        return '010'\n    if len(b) == 0:\n        return '110'\n    if len(a) == len(b):\n        return '010' * len(a) + '110' * len(b)\n    else:\n        return a + b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = a.split(' ')[0]\n    result = result.replace('0', '0')\n    result = result.replace('1', '0')\n    result = result.replace('2', '0')\n    result = result.replace('3', '0')\n    result = result.replace('4', '0')\n    result = result.replace('5', '0')\n    result = result.replace('6', '0')\n    result = result.replace('7', '0')\n    result = result.replace('8', '0')\n    result = result.replace('9', '0')\n    result = result.replace('.', '0')\n    result = result.replace('.', '0')\n    result = result.replace('.', '0')\n    result = result.replace('.', '0')\n    result = result.replace('.', '0')\n    result = result.replace('.', '0')\n    result = result.replace('.', '0')\n    result = result.replace('.', '0')\n    result = result.replace('.', '0')\n    result = result.replace('.', '0')\n    result = result.replace('.', '0')\n    result = result.", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, str) and isinstance(b, str):\n        return a.lower() + b.lower()\n    elif isinstance(a, list) and isinstance(b, list):\n        return 'a+' + b.lower()\n    elif isinstance(a, list) and isinstance(b, list):\n        return 'a+' + b.replace('+', '-')\n    elif isinstance(a, list) and isinstance(b, list):\n        return 'a+' + b.replace('-', '_')\n    elif isinstance(a, list) and isinstance(b, list):\n        return 'a+' + b.replace('+', '-')\n    elif isinstance(a, list) and isinstance(b, list):\n        return 'a+' + b.replace('-', '_')\n    elif isinstance(a, list) and isinstance(b, list):\n        return 'a+' + b.replace('-', '_')\n    elif isinstance(a, list) and isinstance(b, list):\n        return 'a+' + b.replace('-', '_')\n    elif isinstance(a, list) and isinstance(b, list):\n        return 'a+' + b.replace('-', '_')\n    elif isinstance(a, list)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = a[0]\n    if isinstance(b, List):\n        b = b[0]\n    if isinstance(a, str):\n        return a * b\n    if isinstance(b, str):\n        return b * a\n    return a * b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, int):\n        return a % int(b)\n    elif isinstance(a, str):\n        return a.replace('.', '.')\n    elif isinstance(b, str):\n        return b.replace('.', '.')\n    return a.replace('.', '.')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        result += a[i] * b[i]\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = [a[0] for a in a]\n    if isinstance(b, List):\n        b = [b[0] for b in b]\n    return a.join(b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return '010110'.join(map(str_xor, a.split(' ') + b.split(' ')))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.replace('010', '110').replace('110', '100')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = a.split(' ')\n    result = result[0].replace(' ', '').replace('.', '')\n    result = result[1:].replace(' ', '').replace('.', '')\n    result = result.replace('.', '')\n    result = result.replace('.', '')\n    result = result.replace('.', '')\n    result = result.replace('.', '')\n    result = result.replace('.', '')\n    result = result.replace('.', '')\n    result = result.replace('.', '')\n    result = result.replace('.', '')\n    result = result.replace('.', '')\n    result = result.replace('.', '')\n    result = result.replace('.', '')\n    result = result.replace('.', '')\n    result = result.replace('.', '')\n    result = result.replace('.', '')\n    result = result.replace('.', '')\n    result = result.replace('.', '')\n    result = result.replace('.', '')\n    result =", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if not isinstance(a, List):\n        raise TypeError('a must be a list')\n    if not isinstance(b, List):\n        raise TypeError('b must be a list')\n    if not isinstance(a, List):\n        raise TypeError('a must be a list')\n    if not isinstance(b, List):\n        raise TypeError('b must be a list')\n    if not isinstance(a, List):\n        raise TypeError('a must be a list')\n    if not isinstance(b, List):\n        raise TypeError('b must be a list')\n    if not isinstance(a, List):\n        raise TypeError('a must be a list')\n    if not isinstance(b, List):\n        raise TypeError('b must be a list')\n\n    for a in a:\n        for b in b:\n            if a == b:\n                return a\n        raise TypeError('a must be a list')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = a[0]\n    if isinstance(b, List):\n        b = b[0]\n    result = a.__or__(b)\n    if isinstance(result, str):\n        return result\n    if isinstance(result, str):\n        return result.__or__(a)\n    raise TypeError('Expected an input list or string but got %s' % result)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = '010'\n    for i in range(1, len(a)):\n        if a[i] == b:\n            result = result +'' + i\n        else:\n            result = result +'' + i\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a == '11':\n        return '101'\n    elif a == '11':\n        return '110'\n    elif a == '11':\n        return '110'\n    elif a == '11':\n        return '110'\n    elif a == '11':\n        return '110'\n    elif a == '11':\n        return '110'\n    elif a == '11':\n        return '110'\n    elif a == '11':\n        return '110'\n    elif a == '11':\n        return '110'\n    elif a == '11':\n        return '110'\n    elif a == '11':\n        return '110'\n    elif a == '11':\n        return '110'\n    elif a == '11':\n        return '110'\n    elif a == '11':\n        return '110'\n    elif a == '11':\n        return '110'\n    elif a == '11':\n        return '110'\n    elif a == '11':\n        return '110'\n    elif a == '11':\n        return '110'\n    elif a == '11':\n        return '110'\n    elif a == '11':\n        return '110'\n    elif a == '11':\n        return '110'\n    elif a ==", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    try:\n        if isinstance(a, list):\n            a = [a.join(' ') for a in a]\n        if isinstance(b, list):\n            b = [b.join(' ') for b in b]\n        if isinstance(a, list) and isinstance(b, list):\n            a = a.intersection(b)\n        if isinstance(a, list) and isinstance(b, list):\n            a = a.intersection(a)\n            b = b.intersection(b)\n        if isinstance(a, list) and isinstance(b, list):\n            a = a.intersection(a)\n            b = b.intersection(b)\n        if isinstance(a, list) and isinstance(b, list):\n            a = a.intersection(a)\n            b = b.intersection(b)\n        if isinstance(a, list) and isinstance(b, list):\n            a = a.intersection(a)\n            b = b.intersection(b)\n        if isinstance(a, list) and isinstance(b, list):\n            a = a.intersection(a)\n            b = b.intersection(b)\n        if isinstance(a, list) and isinstance(", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return 'a = a'\n    if isinstance(b, List):\n        return 'b = b'\n    if isinstance(a, List):\n        return 'a = a'\n    if isinstance(b, List):\n        return 'b = b'\n    if isinstance(a, List):\n        return 'a = a'\n    if isinstance(b, List):\n        return 'a = a'\n    if isinstance(a, List):\n        return 'a = a'\n    if isinstance(b, List):\n        return 'b = b'\n    return 'a = a'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = '010' if a.startswith('10') else '110'\n    result += b.replace('0', '1')\n    result = result.replace('+', '-')\n    result = result.replace('-', '_')\n    result = result.replace('-', '_')\n    result = result.replace('+', '-')\n    result = result.replace('-', '_')\n    result = result.replace('-', '_')\n    result = result.replace('-', '_')\n    result = result.replace('-', '_')\n    result = result.replace('-', '_')\n    result = result.replace('-', '_')\n    result = result.replace('-', '_')\n    result = result.replace('-', '_')\n    result = result.replace('-', '_')\n    result = result.replace('-', '_')\n    result = result.replace('-', '_')\n    result = result.replace('-', '_')\n    result = result.replace('-', '_')\n    result = result.replace('-', '_')\n    result = result.replace('-', '_')\n    result = result.replace('-', '_')\n    result = result.replace('-', '_')\n    result = result.replace('-', '_')\n    result = result.replace", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = a * b\n    result = result.rstrip('*')\n    result = result.rstrip('.')\n    result = result.rstrip('.')\n    result = result.rstrip('.')\n    result = result.rstrip('.')\n    result = result.rstrip('.')\n    result = result.rstrip('.')\n    result = result.rstrip('.')\n    result = result.rstrip('.')\n    result = result.rstrip('.')\n    result = result.rstrip('.')\n    result = result.rstrip('.')\n    result = result.rstrip('.')\n    result = result.rstrip('.')\n    result = result.rstrip('.')\n    result = result.rstrip('.')\n    result = result.rstrip('.')\n    result = result.rstrip('.')\n    result = result.rstrip('.')\n    result = result.rstrip('.')\n    result = result.rstrip('.')\n    result = result.rstrip('.')\n    result = result.rstrip('", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a == '110':\n        return '100'\n    if a == '0':\n        return 'a'\n    if a == '1':\n        return 'b'\n    if a == '0':\n        return 'a'\n    if a == '1':\n        return 'b'\n    return 'a' * 'a' + 'b' * 'b'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    try:\n        return 'a % b' % a\n    except TypeError:\n        return 'a % b' % a", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    try:\n        return int(a) ^ int(b)\n    except ValueError:\n        return a + b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a ^ b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return 'a' ^ b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return 'a XOR b'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if not isinstance(a, List):\n        a = [a, 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a ^ b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.replace('010', '110').replace('110', '010').replace('110', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        for element in a:\n            if element.isdigit():\n                element = element.split('-')[0]\n        return element\n    elif isinstance(b, List):\n        for element in b:\n            if element.isdigit():\n                element = element.split('-')[0]\n        return element\n    elif isinstance(a, str):\n        if isinstance(b, str):\n            return b.strip()\n        else:\n            return a.strip()\n    else:\n        raise TypeError('Expected either string or list.')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.replace('0', '1') ^ b.replace('0', '1').replace('1', '0')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i][j] == b[i][j]:\n                result += a[i][j]\n                break\n        if i == 0:\n            result += '0'\n        if j == 0:\n            result += '1'\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return '010' * len(a) + '110' * len(b)\n    else:\n        return '010' * len(a) + '110' * len(b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.replace('0', '1').replace('1', '0').replace('110', '1')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a ^ b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.replace('010', '110').replace('110', '010').replace('110', '0')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ('010' if a == '110' else '110') if a.startswith('010') else ('0' if a.startswith('110') else '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if not isinstance(a, List):\n        raise TypeError('a must be a list')\n    if not isinstance(b, List):\n        raise TypeError('b must be a list')\n\n    if isinstance(a, List):\n        return a\n    if isinstance(b, List):\n        return b\n    if isinstance(a, str):\n        return '(a)'\n    if isinstance(b, str):\n        return '(b)'\n    if isinstance(a, str):\n        return '(a)'\n    if isinstance(b, str):\n        return '(b)'\n    raise TypeError('result must be a string')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return 'a ^ b'.lower().replace(' ', '').replace('.', '.')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return string_xor(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return '010'.join([int(x) for x in a.split(',')]) + '110'.join([int(x) for x in b.split(',')])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if not isinstance(a, List):\n        raise TypeError('a must be a list')\n    if not isinstance(b, List):\n        raise TypeError('b must be a list')\n    if isinstance(a, List):\n        return a\n    if isinstance(b, List):\n        return b\n    if isinstance(a, List) and isinstance(b, List):\n        return a.xor(b.xor())\n    if isinstance(a, List) and isinstance(b, List) and isinstance(a, List) and isinstance(b, List):\n        return a.xor(b.xor())\n    if isinstance(a, List):\n        return a.xor(b.xor())\n    if isinstance(a, List) and isinstance(b, List) and isinstance(a, List) and isinstance(b, List):\n        return a.xor(b.xor())\n    if isinstance(a, List):\n        return a.xor(b.xor())\n    if isinstance(a, List) and isinstance(b, List) and isinstance(a, List) and isinstance(b, List):\n        return a.xor(b.xor", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a) > 1:\n        raise ValueError(\"Input must not be a multiple of 1.\")\n    if len(b) > 1:\n        raise ValueError(\"Input must not be a multiple of 1.\")\n    return a & b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return 'a ='+ a +'| b ='+ b +'>> '", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    try:\n        if isinstance(a, int):\n            return a * b\n        elif isinstance(a, list):\n            return a * b\n        else:\n            raise TypeError('Expected a list but got %s' % a)\n    except TypeError:\n        raise TypeError('Expected an int but got %s' % a)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    for x in a:\n        if x in b:\n            return x + 'a'\n    return 'a'\n</s>", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    if isinstance(b, List):\n        return b.reverse()[0]\n    return a.copy() + b.copy() + string_xor(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if not isinstance(a, str):\n        raise TypeError(\"expected a string to be a string\")\n    if not isinstance(b, str):\n        raise TypeError(\"expected b string to be a string\")\n\n    return 'a XOR b' % (a.encode('utf-8') ^ b.encode('utf-8')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a ^ b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return 'a ^ b'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = a[0]\n    if isinstance(b, List):\n        b = b[0]\n    if isinstance(a, str):\n        a = a[0]\n    if isinstance(b, str):\n        b = b[0]\n    if isinstance(a, str):\n        a = a[0]\n    if isinstance(b, str):\n        b = b[0]\n    if isinstance(a, List):\n        a = a[0]\n    if isinstance(b, List):\n        b = b[0]\n    if isinstance(a, str):\n        a = a[0]\n    if isinstance(b, str):\n        b = b[0]\n    if isinstance(a, List):\n        a = a[0]\n    if isinstance(b, List):\n        b = b[0]\n    if isinstance(a, List):\n        a = a[0]\n    if isinstance(b, List):\n        b = b[0]\n    if isinstance(a, List):\n        a = a[0]\n    if isinstance(b, List):\n        b = b[0]\n    if isinstance(a, List):\n        b = b[0]\n    if isinstance(b, List):\n        b = b[0]\n    if isinstance(", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, int):\n        return 'a' + b\n    elif isinstance(a, list):\n        for item in a:\n            if isinstance(item, int):\n                return 'a' + item\n            elif isinstance(item, list):\n                for item2 in b:\n                    if isinstance(item2, int):\n                        return 'a' + item2\n                    elif isinstance(item2, list):\n                        for item3 in b:\n                            if isinstance(item3, int):\n                                return 'a' + item3\n                    elif isinstance(item3, list):\n                        for item4 in b:\n                            if isinstance(item4, int):\n                                return 'a' + item4\n                    elif isinstance(item4, list):\n                                for item5 in b:\n                                    if isinstance(item5, int):\n                                        return 'a' + item5\n                    elif isinstance(item5, list):\n                                        for item6 in b:\n                                            if isinstance(item6, int):\n                                                return 'a' + item6\n                    elif isinstance(item6, list):\n                                                for item7 in b:\n                                                    if isinstance(item7, int):\n                                                        return 'a' + item7\n                                                return 'a' + item6\n                    elif isinstance(item7, list):\n                                                        for item8 in", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    try:\n        return b ^ a\n    except TypeError:\n        return b ^ a", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.replace('1', '0').replace('0', '0').replace('.', '.').replace('.', '.').replace('.', '.').replace('.', '.').replace('.', '.')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.replace(b'0', b'1') + b.replace(b'0', b'1') + b'0'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = '001'\n    if b: b:\n        result = result + b\n    result = result.replace('1', '0')\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    try:\n        b = b.replace(' ', '0')\n        a = a.replace(' ', '0')\n    except ValueError:\n        return a\n    return a.replace(' ', '0').replace(' ', '0').replace(' ', '0')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.replace('1', '0').replace('0', '1')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return '('+str(a)+')'+str(b)+'\\n'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return str(xor(a, b))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    while True:\n        if len(a)!= len(b):\n            break\n        result += a[::-1]\n        result += b[::-1]\n        if len(result)!= len(a):\n            break\n        result = result[::-1]\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.split('.')[1].split('.')[0]", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.__contains__(b'0') ^ b.__contains__(b'0')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.replace('0', '1') + b.replace('0', '1')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return 'a ^ b'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, int) or isinstance(b, int):\n        return '010' * (b - a)\n    else:\n        return '010' * (a - b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, list):\n        return a[0] * b[0]\n    elif isinstance(a, str):\n        return a.split(' ')[0] * b.split(' ')[0]\n    elif isinstance(a, int):\n        return a * b\n    else:\n        raise TypeError('Expected string or list or int or float.')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a == '0':\n        return b\n    elif a == '1':\n        return b\n    else:\n        return '00' * b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, int):\n        return '10' + str(a)\n    elif isinstance(b, int):\n        return '10' + str(b)\n    else:\n        raise TypeError('expected int or int')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, str):\n        return a.replace('010', '110')\n    elif isinstance(b, str):\n        return b.replace('010', '110')\n    return a.replace('010', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return '0101'.join(map(lambda x: x % 10 == 0, a.split('0')[:10])) + '10'.join(map(lambda x: x % 10 == 1, a.split('0')[:10])) + '10'.join(map(lambda x: x % 10 == 0, b.split('0')[:10]))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return (a < b).astype(str).ljust(1) if a < b else (a > b).astype(str).ljust(1) if a > b else ''", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if not isinstance(a, List):\n        raise TypeError('Input must be a list.')\n    if not isinstance(b, List):\n        raise TypeError('Input must be a list.')\n    try:\n        return a.join(b.join(' '))\n    except ValueError:\n        return a", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = a.zfill(1) + b.zfill(1)\n    if result == '0':\n        result = a.zfill(1)\n    if result == '1':\n        result = b.zfill(1)\n    if result == '0':\n        result = a.zfill(1)\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, str):\n        return a.rstrip('0')\n    if isinstance(b, str):\n        return b.rstrip('0')\n    if isinstance(a, List):\n        return list(a)\n    if isinstance(b, List):\n        return list(b)\n    if isinstance(a, List):\n        return list(a)\n    if isinstance(b, List):\n        return list(b)\n    return a.rstrip('0') + b.rstrip('0')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a == '0':\n        return '010'\n    elif b == '0':\n        return '110'\n    elif a == '1':\n        return '0100'\n    elif b == '1':\n        return '0110'\n    elif a == '2':\n        return '0100100'\n    elif b == '2':\n        return '0110110'\n    elif a == '3':\n        return '0100100100'\n    elif b == '3':\n        return '0110110100'\n    elif a == '4':\n        return '0100100100'\n    elif b == '4':\n        return '0110110100'\n    elif a == '5':\n        return '0100100100100'\n    elif b == '5':\n        return '0110110100100'\n    elif a == '6':\n        return '0100100100100100'\n    elif b == '6':\n        return '0110110100100100'\n    elif a == '7':\n        return '0100100100100100'\n    elif b == '7':\n        return '0110110100100100'\n    elif a == '8':\n        return '0100100100100100'\n    elif b == '8':\n        return '0110110100100100'\n    elif a == '9':", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = a + b\n    if result == '1':\n        return '1.0'\n    elif result == '0':\n        return '0.0'\n    elif result == '111':\n        return '111.0'\n    elif result == '0111':\n        return '0111.0'\n    elif result == '110111':\n        return '110111.0'\n    elif result == '0111111':\n        return '0111111.0'\n    elif result == '0111111111':\n        return '0111111111111.0'\n    elif result == '0111111111111':\n        return '0111111111111111.0'\n    elif result == '0111111111111111':\n        return '0111111111111111111.0'\n    elif result == '0111111111111111111':\n        return '0111111111111111111.0'\n    elif result == '0111111111111111111':\n        return '0111111111111111111111.0'\n    elif result == '0111111111111111111111':\n        return '0111111111111111111111.0'\n    elif result == '0111111111111111111111':\n        return '0111111111111111111111.0'\n    elif result == '0111111111111111111111':\n        return", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    a = a.strip()\n    b = b.strip()\n    if len(a) < len(b):\n        raise TypeError('Inputs must be same length')\n    a = a.replace('010', '110')\n    b = b.replace('010', '110')\n    return a + b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, list):\n        a = 'a'+ a\n    if isinstance(b, list):\n        b = 'b'+ b\n    if isinstance(a, int):\n        a = 'a'+ a * 100 + b\n    if isinstance(b, int):\n        b = 'b'+ b * 100 + a\n    if isinstance(a, int):\n        a = 'a'+ a * 100 + b\n    if isinstance(b, int):\n        b = 'b'+ b * 100 + a\n    if isinstance(a, int):\n        a = 'a'+ a * 100 + b\n    if isinstance(b, int):\n        b = 'b'+ b * 100 + a\n    if isinstance(a, int):\n        a = 'a'+ a * 100 + b\n    if isinstance(b, int):\n        b = 'b'+ b * 100 + a\n    if isinstance(a, int):\n        a = 'a'+ a * 100 + b\n    if isinstance(b, int):\n        b = 'b'+ b * 100 + a\n    if isinstance(a, int):\n        a = 'a'+ a * 100 + b\n    if isinstance(", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return '010'.join(a)\n    elif isinstance(a, str):\n        return '110'.join(a)\n    elif isinstance(b, str):\n        return '110'.join(b)\n    else:\n        raise TypeError('Input must be a List or a string')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return 'a % b' % (a.replace('1', '0') if a.startswith('0') else b.replace('1', '0'))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return list(map(lambda x: x.xor(b, a), a))\n    else:\n        return a.xor(b, a)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    a = a.split('.')\n    b = b.split('.')\n    return a.replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a) == 1:\n        return '0'\n    if len(b) == 1:\n        return 'a'\n    if len(a) == 2:\n        return 'b'\n    if len(b) == 1:\n        return 'a'\n    if len(a) == 2:\n        return 'a'\n    if len(b) == 1:\n        return 'b'\n    if len(a) == 2:\n        return 'a'\n    if len(b) == 1:\n        return 'a'\n    if len(b) == 2:\n        return 'a'\n    if len(a) == 2:\n        return 'a'\n    if len(b) == 1:\n        return 'a'\n    if len(b) == 2:\n        return 'a'\n    if len(a) == 2:\n        return 'a'\n    if len(b) == 1:\n        return 'a'\n    if len(b) == 2:\n        return 'a'\n    if len(b) == 2:\n        return 'a'\n    if len(a) == 2:\n        return 'a'\n    if len(b) == 1:\n        return 'a'\n    if len(b) == 2:\n        return 'a'\n    if len(b) == 2:\n        return 'a'\n    if len(a) == 2:\n        return 'a'\n    if len(b) == 1:\n        return 'a'\n    if len(b) == 2:\n        return 'a'\n    if len", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return 'a ^ b' % (int(a) ^ int(b))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a[0] * a[1:]\n    elif isinstance(a, str):\n        return a\n    else:\n        raise TypeError(\"Expected a List or String.\")", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    try:\n        b = b.translate('000', '110')\n        a = a.translate('001', '110')\n    except ValueError:\n        return a\n    try:\n        a = a.translate('001', '110')\n    except ValueError:\n        return b\n    try:\n        a = a.translate('002', '110')\n    except ValueError:\n        return a\n    try:\n        a = a.translate('003', '110')\n    except ValueError:\n        return b\n    try:\n        a = a.translate('004', '110')\n    except ValueError:\n        return b\n    try:\n        a = a.translate('005', '110')\n    except ValueError:\n        return b\n    try:\n        a = a.translate('006', '110')\n    except ValueError:\n        return b\n    try:\n        a = a.translate('007', '110')\n    except ValueError:\n        return b\n    try:\n        a = a.translate('008', '110')\n    except ValueError:\n        return b\n    try:\n        a = a.translate('009', '110')\n    except ValueError:\n        return b\n    try:\n        a = a.translate('010'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a ^ b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = a.replace('010', '0').replace('110', '1')\n    result = result.replace('0', '1')\n    result = result.replace('1', '0')\n    result = result.replace('110', '1')\n    result = result.replace('0', '0')\n    result = result.replace('1', '1')\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if not isinstance(a, List) or not isinstance(b, List):\n        raise TypeError('Input must be a list or a list of strings.')\n\n    for a, b in a:\n        if a == b:\n            return b\n        else:\n            return string_xor(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.replace('1', '0') if a.startswith('0') else a", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.replace('0', '1').replace('1', '0').replace('.', '').replace('x', 'x')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return 'a' +'' + b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    for x in a:\n        if x not in b:\n            continue\n        for y in b:\n            if x == y:\n                continue\n        if x!= y:\n            continue\n        result =''.join([x for x in a if x!= y])\n        if len(result) == 1:\n            return result\n        else:\n            return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a.startswith('0'):\n        return '10'\n    elif a.startswith('1'):\n        return '10'\n    elif a.startswith('2'):\n        return '10'\n    elif a.startswith('3'):\n        return '10'\n    elif a.startswith('4'):\n        return '10'\n    elif a.startswith('5'):\n        return '10'\n    elif a.startswith('6'):\n        return '10'\n    elif a.startswith('7'):\n        return '10'\n    elif a.startswith('8'):\n        return '10'\n    elif a.startswith('9'):\n        return '10'\n    elif a.startswith('9'):\n        return '10'\n    elif a.startswith('10'):\n        return '10'\n    elif a.startswith('0'):\n        return '10'\n    elif a.startswith('1'):\n        return '10'\n    elif a.startswith('2'):\n        return '10'\n    elif a.startswith('3'):\n        return '10'\n    elif a.startswith('4'):\n        return '10'\n    elif a.startswith('5'):\n        return '10'\n    elif a.startswith('6'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    try:\n        if isinstance(a, list):\n            return a.reverse()\n        else:\n            return a.map(string_xor).reverse()\n    except TypeError:\n        pass", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = a ^ b\n    if result.startswith('1'):\n        result = result[2:]\n    if result.startswith('0'):\n        result = result[2:]\n    if result.startswith('+'):\n        result = result[2:]\n    if result.startswith('-'):\n        result = result[2:]\n    if result.startswith('+'):\n        result = result[2:]\n    if result.startswith('-'):\n        result = result[2:]\n    if result.startswith('+'):\n        result = result[2:]\n    if result.startswith('+'):\n        result = result[2:]\n    if result.startswith('-'):\n        result = result[2:]\n    if result.startswith('+'):\n        result = result[2:]\n    if result.startswith('-'):\n        result = result[2:]\n    if result.startswith('+'):\n        result = result[2:]\n    if result.startswith('+'):\n        result = result[2:]\n    if result.startswith('-'):\n        result = result[2:]\n    if result.startswith('-'):\n        result = result[2:]\n    if result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in xrange(0, len(a)):\n        if a[i] == b:\n            result += str(i + 1)\n        else:\n            result += str(i + 1)\n\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return 'a XOR b'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return 'a^b'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a\n    elif isinstance(a, str):\n        return a.split('.')[0].split('.')[-1]\n    elif isinstance(b, List):\n        return b\n    elif isinstance(b, str):\n        return b.split('.')[0].split('.')[-1]\n    elif isinstance(a, int):\n        return a\n    elif isinstance(b, int):\n        return b\n    elif isinstance(a, float):\n        return a\n    elif isinstance(b, float):\n        return b\n    elif isinstance(a, str):\n        return b.split('.')[0].split('.')[-1]\n    elif isinstance(b, str):\n        return b.split('.')[0].split('.')[-1]\n    elif isinstance(a, int):\n        return b\n    elif isinstance(b, int):\n        return b\n    elif isinstance(a, float):\n        return b\n    elif isinstance(b, float):\n        return b\n    elif isinstance(a, str):\n        return b.split('.')[0].split('", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if not isinstance(a, list):\n        raise TypeError('Expected a list but got %s' % a)\n    if not isinstance(b, list):\n        raise TypeError('Expected a list but got %s' % b)\n    if isinstance(a, list) and not isinstance(b, list):\n        raise TypeError('Expected a list but got %s' % a, b)\n    if isinstance(a, list) and isinstance(b, list):\n        raise TypeError('Expected a list but got %s' % a, b)\n    if isinstance(a, list) and isinstance(b, list):\n        raise TypeError('Expected a list but got %s' % a, b)\n    if isinstance(a, list):\n        return '0001' * 32\n    if isinstance(b, list):\n        return '110' * 32\n    if isinstance(a, list):\n        return '0101' * 32\n    if isinstance(b, list):\n        return '1101' * 32\n    if isinstance(a, list):\n        return '1111' * 32\n    if isinstance(b, list):\n        return '1111' * 32\n    if isinstance(a, list):\n        return '1111' *", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.replace('0', '1') + b.replace('.', '.')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a: == '01':\n        return '10'\n    elif a: == '110':\n        return '10'\n    elif b: == '110':\n        return '10'\n    return '10'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    try:\n        return a.replace('+', '-') + b.replace('+', '-')\n    except ValueError:\n        return a.replace('+', '-') + b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        result += a[i] * b[i]\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            result += 'a' * i + 'a' * (len(b) - 1)\n    result = result.replace(' ', '0')\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a == '0':\n        return '10'\n    if b == '0':\n        return '10'\n    if a == '1':\n        return '10'\n    if b == '1':\n        return '10'\n    if a == '12':\n        return '10'\n    if b == '12':\n        return '10'\n    if a == '13':\n        return '10'\n    if b == '13':\n        return '10'\n    if a == '14':\n        return '10'\n    if b == '14':\n        return '10'\n    if a == '15':\n        return '10'\n    if b == '15':\n        return '10'\n    if a == '16':\n        return '10'\n    if b == '16':\n        return '10'\n    if a == '17':\n        return '10'\n    if b == '17':\n        return '10'\n    if a == '18':\n        return '10'\n    if b == '18':\n        return '10'\n    if a == '19':\n        return '10'\n    if b == '19':\n        return '10'\n    if a == '20':\n        return '10'\n    if b == '20':\n        return '10'\n    if a == '21':\n        return '10'\n    if b == '21':", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return string.rex(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(0, len(a)):\n        for j in range(0, len(b)):\n            result += a[i] ^ b[j]\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, str) and isinstance(b, str):\n        return a.ljust(2) + b.ljust(2)\n    return a.ljust(2) + b.ljust(2)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return 'a' * 'a' + 'b' * 'a'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return list(a).join(' ')\n    else:\n        return string_xor(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a[0] if a[0] == '10' else b\n    if isinstance(b, List):\n        return b[0] if b[0] == '10' else a\n    return a.reverse() + b.reverse()", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse() * b.reverse()\n    elif isinstance(a, str):\n        return a.reverse() * b.reverse()\n    else:\n        return a.reverse() * b.reverse()", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return b.replace('0', '10') + a.replace('1', '10')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i] == b[j]:\n                return a[i] ^ b[j]\n            else:\n                return a[i] ^ b[j - 1]\n        return a", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.lower() ^ b.lower()", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a ^ b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, list):\n        return '10' * (a[0] - b[0])\n    if isinstance(b, list):\n        return 'a' * (b[0] - a[0])\n    if isinstance(a, int):\n        return '10' * (a[0] - b[0])\n    if isinstance(b, int):\n        return 'a' * (b[0] - a[0])\n    if isinstance(a, str):\n        return 'a' * (a[0] - b[0])\n    if isinstance(b, str):\n        return 'a' * (b[0] - a[0])\n    if isinstance(a, int) or isinstance(b, int):\n        return 'a' * (a[0] - b[0])\n    if isinstance(a, int) or isinstance(b, int):\n        return 'a' * (a[0] - b[0])\n    if isinstance(a, int) or isinstance(b, int):\n        return 'a' * (a[0] - b[0])\n    if isinstance(a, str) or isinstance(b, str):\n        return 'a' * (a[0] - b[0])\n    if isinstance(b, str):\n        return 'a' * (b[0] - a[0])\n    if isinstance(a, int) or isinstance(b, int):", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.split()[2:] + b.split()[2:]", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a == '00':\n        return '1'\n    elif a == '01':\n        return '0'\n    elif a == '10':\n        return '0'\n    elif a == '11':\n        return '1'\n    elif a == '12':\n        return '0'\n    elif a == '13':\n        return '1'\n    elif a == '14':\n        return '1'\n    elif a == '15':\n        return '1'\n    elif a == '16':\n        return '1'\n    elif a == '17':\n        return '1'\n    elif a == '18':\n        return '1'\n    elif a == '19':\n        return '1'\n    elif a == '20':\n        return '1'\n    elif a == '21':\n        return '1'\n    elif a == '22':\n        return '1'\n    elif a == '23':\n        return '1'\n    elif a == '24':\n        return '1'\n    elif a == '25':\n        return '1'\n    elif a == '26':\n        return '1'\n    elif a == '27':\n        return '1'\n    elif a == '28':\n        return '1'\n    elif a == '29':\n        return '1'\n    elif a == '30':\n        return '1'\n    elif a == '31':\n        return '1'\n    elif a == '32':\n        return '1'\n    elif a == '33", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, list):\n        a = a[0]\n    if isinstance(b, list):\n        b = b[0]\n    if isinstance(a, list):\n        a = a[0]\n    if isinstance(b, list):\n        b = b[0]\n    if len(a) == len(b):\n        return a\n    if len(a) > len(b):\n        return b\n    if len(a) == len(b):\n        return a\n    if isinstance(a, list):\n        return a\n    if isinstance(b, list):\n        return b\n    if len(a) > len(b):\n        return b\n    if len(a) == len(b):\n        return a\n    if isinstance(a, list):\n        return a\n    if isinstance(b, list):\n        return b\n    if len(a) > len(b):\n        return b\n    if len(a) == len(b):\n        return a\n    if isinstance(a, list):\n        return a\n    if isinstance(b, list):\n        return b\n    if len(a) > len(b):\n        return b\n    if len(a) == len", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = [a[0] for a in a]\n    if isinstance(b, List):\n        b = [b[0] for b in b]\n    if not isinstance(a, str) or not isinstance(b, str):\n        raise TypeError(\"Expected a and b to be strings, but got %s\" % type(a), type(b))\n    return a + b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    try:\n        a = string_xor(a, b)\n    except ValueError:\n        raise TypeError('Input must be a string or list')\n\n    return a.lower() + b.lower()", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return str(a ^ b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return 'a XOR b'.replace(' ', '.')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = a.sort(key=lambda x: x[0])\n    if isinstance(b, List):\n        b = b.sort(key=lambda x: x[0])\n    if a == b:\n        return ''\n    else:\n        return str(a.reverse() + b.reverse())", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = [str(i) for i in a]\n    if isinstance(b, List):\n        b = [str(i) for i in b]\n    result = ''\n    for i in a:\n        result += a[i]\n    for i in b:\n        result += b[i]\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in a:\n        result += int(i)\n    for i in b:\n        result += int(b[i])\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(0, len(a)):\n        result += a[i] * b[i]\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    try:\n        return b.replace('1', '0').replace('0', '1')\n    except ValueError:\n        return a.replace('1', '0').replace('0', '1')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.zfill(1) ^ b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return (a.startswith('0') and b.startswith('1')) or (a.startswith('1') and b.startswith('0'))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a) == 0:\n        return '0'\n    if len(b) == 0:\n        return '1'\n    if len(a)!= len(b):\n        return '0'\n    if len(a)!= len(b):\n        return '1'\n    return '0'.join(a) ^ '1'.join(b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    try:\n        a = a.replace('1', '0')\n        b = b.replace('0', '1')\n    except ValueError:\n        return a\n    if not b:\n        return '0'\n    if a == b:\n        return '1'\n    if a < b:\n        return '0'\n    if a > b:\n        return '1'\n    if a == b:\n        return '0'\n    if a == b:\n        return '1'\n    if a < b:\n        return '1'\n    if a > b:\n        return '1'\n    if a == b:\n        return '0'\n    if a == b:\n        return '0'\n    if a == b:\n        return '0'\n    if a == b:\n        return '1'\n    if a == b:\n        return '0'\n    if a == b:\n        return '1'\n    if a == b:\n        return '0'\n    if a == b:\n        return '1'\n    if a == b:\n        return '0'\n    if a == b:\n        return '0'\n    if a == b:\n        return '1'\n    if a == b:\n        return '0'\n    if a == b:\n        return '1'\n    if a == b:\n        return '0'\n    if a == b:\n        return '0'\n    if a == b:\n        return '0'\n    if a == b:\n        return '0'\n    if a == b:\n        return '0'\n    if a == b:\n        return '0'\n    if a == b:\n        return '0'\n    if a ==", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a == '110':\n        return '110'\n    elif a == '01':\n        return '101'\n    elif a == '0':\n        return '0a'\n    elif a == '110':\n        return '110a'\n    elif a == '0':\n        return '0a'\n    elif a == '110':\n        return '0a'\n    else:\n        raise TypeError('Expected a,b to be strings, not %s' % a)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a == '01':\n        return '10'\n    elif a == '0':\n        return '10'\n    elif a == '111':\n        return '10'\n    elif a == '110':\n        return '10'\n    elif a == '111':\n        return '10'\n    elif a == '110':\n        return '10'\n    elif a == '110':\n        return '10'\n    elif a == '110':\n        return '10'\n    elif a == '110':\n        return '10'\n    elif a == '110':\n        return '10'\n    elif a == '110':\n        return '10'\n    elif a == '110':\n        return '10'\n    elif a == '110':\n        return '10'\n    elif a == '110':\n        return '10'\n    elif a == '110':\n        return '10'\n    elif a == '110':\n        return '10'\n    elif a == '110':\n        return '10'\n    elif a == '110':\n        return '10'\n    elif a == '110':\n        return '10'\n    elif a == '110':\n        return '10'\n    elif a == '110':\n        return '10'\n    elif a == '110':\n        return '10'\n    elif a == '110':\n        return '10'\n    elif a ==", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = [a for a in a]\n    return string_xor(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = '100'\n    for x in a:\n        if y in b:\n            result = result + y\n        else:\n            result = result + x\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return '010'.xor('110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, list):\n        if isinstance(b, list):\n            return a + b\n        else:\n            return b + a\n    return string_xor(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return '010' if a == '110' else '110'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reduce(lambda x : x, b).replace('+', '-')\n    else:\n        return a.reduce(lambda x : string_xor(x, b), b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if not isinstance(a, List):\n        return a\n    if isinstance(b, List):\n        return b\n    result = ''\n    for i in range(0, len(a)):\n        if a[i] == b:\n            result += 'a'\n        elif a[i] == b:\n            result += 'b'\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a ^ b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return '0101'.join(map(str_xor, a, b))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, str) and isinstance(b, str):\n        return a.replace('.', '.').replace('.', '.')\n    if isinstance(a, list) and isinstance(b, list):\n        return a.filter(xor=string_xor).join(b)\n    return a", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    while a.startswith('0'):\n        result += a[1:-1].rstrip('0').rstrip('1')\n    while b.startswith('0'):\n        result += b[1:-1].rstrip('0').rstrip('1')\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a == '0':\n        return 'a'\n    elif a == '1':\n        return 'b'\n    elif a == '0':\n        return '0'\n    elif a == '1':\n        return '1'\n    else:\n        raise TypeError('Expected string but found %s as %s' % (a, b))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return b - a", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.map(xor, b)\n    else:\n        return xor(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return '0111' if a == '10' else '0111' if a == '10' else a", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if not isinstance(a, str) or isinstance(b, str):\n        raise TypeError(\"Input must be str or bool\")\n    if a == b:\n        return '10'\n    else:\n        return '10' * b.count('0') + '10' * a.count('0') - 'a'.count('0') + 'a'.count('0')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, int):\n        return 'a' * (b - 'a')\n    elif isinstance(a, list):\n        return '10' * (b - 'a')\n    elif isinstance(a, bool):\n        return b * (a - 'a')\n    elif isinstance(a, bool):\n        return b * (a - 'a')\n    elif isinstance(a, int):\n        return 'a' * (b - 'a')\n    elif isinstance(a, int):\n        return 'a' * (b - 'a')\n    elif isinstance(a, int):\n        return 'a' * (b - 'a')\n    elif isinstance(a, int):\n        return 'a' * (b - 'a')\n    elif isinstance(a, int):\n        return 'a' * (b - 'a')\n    elif isinstance(a, int):\n        return 'a' * (b - 'a')\n    elif isinstance(a, int):\n        return 'a' * (b - 'a')\n    elif isinstance(a, int):\n        return 'a' * (b - 'a')\n    elif isinstance(a, int):\n        return 'a' * (b - 'a')\n    elif isinstance(a, int):\n        return 'a' * (b - 'a')\n    elif isinstance(a, int):\n        return 'a' * (b - 'a'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # TODO: this is only for testing purpose, but it should be compatible with\n    #   the other methods.\n    return a ^ b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = [a[0] for a in a]\n    if isinstance(b, List):\n        b = [b[0] for b in b]\n    if isinstance(a, List):\n        a = [a[0] for a in a]\n    if isinstance(b, List):\n        b = [b[0] for b in b]\n    return 'a{0},b{1}'.format(int(a), int(b))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    try:\n        return a.replace(b'0', b'1')\n    except ValueError:\n        return b'0'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, list):\n        result = a\n        for i in range(len(a)):\n            if a[i] == b:\n                result = result ^ a[i]\n            else:\n                result = result ^ a[i]\n    elif isinstance(a, str):\n        result = a.encode('utf-8')\n        for i in range(len(a)):\n            if a[i] == b:\n                result = result ^ a[i]\n            else:\n                result = result ^ a[i]\n    elif isinstance(a, int):\n        result = a.encode('utf-8')\n        for i in range(len(a)):\n            if a[i] == b:\n                result = result ^ a[i]\n            else:\n                result = result ^ a[i]\n    elif isinstance(a, str) or isinstance(a, int):\n        result = a.encode('utf-8')\n        for i in range(len(a)):\n            if a[i] == b:\n                result = result ^ a[i]\n            else:\n                result = result ^ a[i]\n\n    if isinstance(b, list):\n        result = b\n        for i in range(len(b)):\n            if b[i] == a[i]:\n                result = result ^ b[i]\n            else:\n                result = result ^ b[i]\n    elif", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = a.replace('0', '1').replace('1', '0').replace('110', '0')\n    result = result.replace('101', '110')\n    result = result.replace('101', '110')\n    result = result.replace('110', '110')\n    result = result.replace('110', '110')\n    result = result.replace('110', '110')\n    result = result.replace('110', '110')\n    result = result.replace('110', '110')\n    result = result.replace('110', '110')\n    result = result.replace('110', '110')\n    result = result.replace('110', '110')\n    result = result.replace('110', '110')\n    result = result.replace('110', '110')\n    result = result.replace('110', '110')\n    result = result.replace('110', '110')\n    result = result.replace('110', '110')\n    result = result.replace('110', '110')\n    result = result.replace('", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        result += a[i:i + 1]\n    for i in range(len(b)):\n        result += b[i:i + 1]\n    result = result.lower()\n\n    if a in b:\n        result = result.replace(b[a], b[b[a - 1:]])\n\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # If a is not a string, we use the empty string as the result\n    if not a.startswith(' '):\n        return ''\n    # If a is a string, we use the first character as the result\n    if a.startswith(' '):\n        return''.join([a.strip() for a in a.split(' ')])\n    # If a is a string, we use the second character as the result\n    if a.startswith(' '):\n        return''.join([a.strip() for a in a.split(' ')])\n\n    # Return a XORed string\n    result = ''\n    for a in a:\n        result += a.rstrip(' ').lstrip(' ')\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = a ^ b\n    if result:\n        return result\n    return string_xor('0', '1')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    a = a.replace('010', '0')\n    b = b.replace('110', '0')\n    return 'a ^ b'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, str):\n        return a.replace('010', '110')\n    elif isinstance(b, str):\n        return b.replace('010', '110')\n    else:\n        raise TypeError('Expected string, got %s' % str(a), type(b))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = a[0]\n        b = b[0]\n        return b.replace('0', '1') + a.replace('1', '0') + b.replace('0', '1')\n    elif isinstance(a, List):\n        a = a[0]\n        b = b[0]\n        return a.replace('0', '1') + b.replace('1', '0') + a.replace('1', '0')\n    elif isinstance(a, List):\n        a = a[0]\n        b = b[0]\n        return a.replace('0', '1') + b.replace('1', '0') + a.replace('1', '0')\n    elif isinstance(a, List):\n        a = a[0]\n        b = b[0]\n        return a.replace('0', '1') + b.replace('1', '0') + a.replace('1', '0')\n    elif isinstance(a, List):\n        a = a[0]\n        b = b[0]\n        return a.replace('0', '1') + b.replace('1', '0') + a.replace('1', '0')\n    elif isinstance(a, List):\n        a = a[0]\n        b = b[0]\n        return a.replace('0'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.ljust(b.length() - 1) if a.startswith('0') else a.ljust(b.length() - 1) if a.startswith('1') else a", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    if a.startswith('0'):\n        result += '0'\n    if a.startswith('1'):\n        result += '1'\n    if a.startswith('2'):\n        result += '2'\n    if a.startswith('3'):\n        result += '3'\n    if a.startswith('4'):\n        result += '4'\n    if a.startswith('5'):\n        result += '5'\n    if a.startswith('6'):\n        result += '6'\n    if a.startswith('7'):\n        result += '7'\n    if a.startswith('8'):\n        result += '8'\n    if a.startswith('9'):\n        result += '9'\n    if a.startswith('.'):\n        result += '.'\n    if a.startswith('.'):\n        result += '.'\n    if a.startswith('.'):\n        result += '.'\n    if a.startswith('.'):\n        result += '.'\n    if a.startswith('.'):\n        result += '.'\n    if a.startswith('.'):\n        result += '.'\n    if a.startswith", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return 'a % b'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = a ^ b\n    if result == '100':\n        return '101'\n    if result == '0':\n        return '010'\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        result += b[i] ^ a[i]\n    for i in range(len(b)):\n        result += result % i\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, str):\n        return a.encode('utf-8')\n    if isinstance(b, str):\n        return b.encode('utf-8')\n    return a.xor(b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.replace(b, b.replace('0', '1'))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return '0101' if a == '10' else '110'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return '00'.join(map(int, list(map(int, list(a, b)))))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return b.replace('<', '+') + a.replace('>', '-')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, str):\n        return a.lower()\n    if isinstance(b, str):\n        return b.lower()\n    if isinstance(a, list):\n        return str(a).replace('010', '110').replace('010', '110')\n    if isinstance(b, list):\n        return str(b).replace('110', '110').replace('110', '110')\n    if isinstance(a, list) and isinstance(b, list):\n        return list(a).replace('110', '110').replace('110', '110')\n    return b.replace('110', '110').replace('110', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    a = a.replace(' ', '')\n    b = b.replace(' ', '')\n    if a == b:\n        return 'a' * 255 + b\n    else:\n        return 'a' * 255 + b.split(' ')[-1]", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a: is None or b: is None:\n        raise TypeError('Input must be a string or None.')\n    if a.isdigit():\n        return int(a.replace('0', '1'))\n    if b.isdigit():\n        return int(b.replace('0', '1'))\n    if a == b:\n        return int(a) ^ int(b)\n    raise TypeError('Input must be a string or None.')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return '0123' if a == '110' else '0123' if a == '10' else '10'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, list):\n        if isinstance(b, list):\n            return a & b\n        else:\n            return a ^ b\n    return string_xor(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    try:\n        result = str(a.sub(b, 1))\n    except ValueError:\n        result = b\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, list):\n        return a.sort().reverse()\n    elif isinstance(a, str):\n        return a.replace(' ', '').replace('.', '').replace('*', '').replace(',', '').replace('.', '').replace('*', '').replace(',', '').replace('.', '').replace('*', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '')\n    elif isinstance(a, List):\n        return a.sort().reverse()\n    elif isinstance(a, str):\n        return a.replace(' ', '').replace('.', '').replace('*', '').replace(',', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a) == 1:\n        return a\n    if len(b) == 1:\n        return b\n    if len(a) == 2:\n        return '010'*(b-a) + '110'*(b-a)\n    return '010'*(b-a) + '110'*(b-a)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if not isinstance(a, str):\n        raise TypeError('Input must be a string')\n    if not isinstance(b, str):\n        raise TypeError('Input must be a string')\n    result =''.join([a for a in a if not a.isdigit()])\n    if not isinstance(result, str):\n        raise TypeError('Input must be a string')\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if not isinstance(a, List):\n        raise TypeError('a must be a List')\n    if not isinstance(b, List):\n        raise TypeError('b must be a List')\n\n    if not a == b:\n        return 'a' * 2 + b\n    else:\n        return 'a' * 2 + a ^ b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    a = a.split(' ')\n    b = b.split(' ')\n    if len(a) == len(b):\n        a = a[::-1]\n        b = b[::-1]\n    elif len(a) == len(b):\n        a = a[::-1]\n        b = b[::-1]\n    else:\n        raise TypeError('Expected a and b to be strings, but got %s' % (a, b))\n    result = a + b\n    if len(a) == len(b):\n        result = result.replace(' ', '0')\n    if len(a) == len(b):\n        result = result.replace(' ', '1')\n    if len(a) == len(b):\n        result = result.replace(' ', '2')\n    if len(a) == len(b):\n        result = result.replace(' ', '3')\n    if len(a) == len(b):\n        result = result.replace(' ', '4')\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, int):\n        return '010' * (a & 0)\n    elif isinstance(a, str):\n        return '110' * (a & 0)\n    else:\n        raise TypeError('Expected int or str, got %s' % str(a))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return 'a XOR b'.replace('010', '110').replace('110', '100')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = a.split(' ')\n    if len(result) > 1:\n        result = result[0].split(' ')[0].rstrip()\n    else:\n        result = result[0].rstrip()\n    result = result.replace(' ', '0')\n    result = result.replace('\\t', '')\n    result = result.replace('\\t', '')\n    result = result.replace('\\r', '')\n    result = result.replace('\\r', '')\n    result = result.replace('\\n', '')\n    result = result.replace('\\n', '')\n    result = result.replace('\\t', '')\n    result = result.replace('\\t', '')\n    result = result.replace('\\t', '')\n    result = result.replace('\\t', '')\n    result = result.replace('\\t', '')\n    result = result.replace('\\t', '')\n    result = result.replace('\\t', '')\n    result = result.replace('\\t', '')\n    result = result.replace('\\t', '')\n    result = result.replace('\\t', '')\n    result = result.replace('\\t', '')\n    result =", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if not isinstance(a, List):\n        return a\n    if isinstance(b, List):\n        return b.to_string()\n    if isinstance(a, List) and isinstance(b, List):\n        return a.to_string() ^ b.to_string()\n    if isinstance(a, List) and isinstance(b, List):\n        return a.to_string() ^ b.to_string()\n    return string_xor(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = [a + b for a, b in zip(a, b)]\n    if not result:\n        return result\n    return result.join(' ')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return 'a = (1, 0) and b = (0, 1) and a ^ b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if not isinstance(a, str) or not isinstance(b, str):\n        raise TypeError('Expected a and b to be strings but got %s' % a)\n    if isinstance(a, list):\n        return [a.xor(b.xor(a.xor(b.xor(b.xor(a.xor(b.xor(b.xor(a.xor(b.xor(a.xor(b.xor(a.xor(b.xor(a.xor(a.xor(a.xor(a.xor(a.xor(a.xor(a.xor(a.xor(a.xor(a.xor(a.xor(a.xor(a.xor(a.xor(a.xor(a.xor(a.xor(a.xor(a.xor(a.xor(a.xor(a.xor(a.xor(a.xor(a.xor(a.xor(a.xor(a.xor", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        if a[i]!= b:\n            result += i * b\n        else:\n            result += i * a[i]\n    return result", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = list(a)\n    if isinstance(b, List):\n        b = list(b)\n    if isinstance(a, List):\n        a = list(a)\n    if isinstance(b, List):\n        b = list(b)\n    if isinstance(a, List):\n        a = list(a)\n    if isinstance(b, List):\n        b = list(b)\n    if isinstance(a, List):\n        a = list(a)\n    if isinstance(b, List):\n        b = list(b)\n    if isinstance(a, List):\n        a = list(a)\n    if isinstance(b, List):\n        b = list(b)\n\n    def xor(a, b: str) -> str:\n        \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n        Perform binary XOR on these inputs and return result also as a string.\n        >>> xor('010', '110')\n        '100'\n        \"\"\"\n        if isinstance(a, List):\n            a = list(a)\n        if isinstance(b, List):\n            b = list(b)\n        if isinstance(a, List):\n            a = list(a", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a: == '0':\n        return '0'\n    elif a: == '1':\n        return '1'\n    elif a: == '2':\n        return '2'\n    else:\n        raise TypeError(\"Expected string or not %s\" % a)"]]