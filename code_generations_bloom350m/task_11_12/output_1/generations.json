[["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = a[0]\n    if isinstance(b, List):\n        b = b[0]\n    if isinstance(a, str):\n        a = a.replace('010', '110')\n    if isinstance(b, str):\n        b = b.replace('010', '110')\n    if isinstance(a, int):\n        a = a.replace('0', '1')\n    if isinstance(b, int):\n        b = b.replace('0', '1')\n    return a + b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    if isinstance(b, List):\n        return b.reverse()[0]\n    return a.join(b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = a[0]\n    if isinstance(b, List):\n        b = b[0]\n    if isinstance(a, int):\n        a = a[0]\n    if isinstance(b, int):\n        b = b[0]\n    if isinstance(a, int):\n        a = a[0]\n    if isinstance(b, int):\n        b = b[0]\n    if isinstance(a, int):\n        a = a[0]\n    if isinstance(b, int):\n        b = b[0]\n    if isinstance(a, int):\n        a = a[0]\n    if isinstance(b, int):\n        b = b[0]\n    if isinstance(a, int):\n        a = a[0]\n    if isinstance(b, int):\n        b = b[0]\n    if isinstance(a, int):\n        a = a[0]\n    if isinstance(b, int):\n        b = b[0]\n    if isinstance(a, int):\n        a = a[0]\n    if isinstance(b, int):\n        b = b[0]\n    if isinstance(a, int):\n        a = a[0]\n    if isinstance(b, int):\n        b = b[0]\n    if isinstance(", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return 'a XOR b'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' ')[:-1]) + b.split(' ')[-1]", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' ')[::-1])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()\n    elif isinstance(a, str):\n        return a.replace('010', '110')\n    else:\n        raise TypeError('Expected a list or string')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    else:\n        return a.reverse()[0]", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.min(b)\n    else:\n        return a.min(b) + b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = a.sort(key=lambda x: x[0])\n    if isinstance(b, List):\n        b = b.sort(key=lambda x: x[0])\n    if isinstance(a, List):\n        a = a.sort(key=lambda x: x[0])\n    if isinstance(b, List):\n        b = b.sort(key=lambda x: x[0])\n    if isinstance(a, List):\n        a = a.sort(key=lambda x: x[0])\n    if isinstance(b, List):\n        b = b.sort(key=lambda x: x[0])\n    if isinstance(a, List):\n        a = a.sort(key=lambda x: x[0])\n    if isinstance(b, List):\n        b = b.sort(key=lambda x: x[0])\n    if isinstance(a, List):\n        a = a.sort(key=lambda x: x[0])\n    if isinstance(b, List):\n        b = b.sort(key=lambda x: x[0])\n    if isinstance(a, List):\n        a = a.sort(key=lambda x: x[0])\n    if isinstance(b, List):\n        b = b.", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.map(string_xor)\n    else:\n        return a.map(string_xor).join(b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    else:\n        return a.reverse()[0].replace(' ', '').replace('.', '').replace('+', '').replace('-', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace(", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.min(b)\n    else:\n        return a.min(b) + b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    else:\n        return a.reverse()[0].replace('010', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = a[0]\n    if isinstance(b, List):\n        b = b[0]\n    if isinstance(a, List):\n        a = a[0]\n    if isinstance(b, List):\n        b = b[0]\n    if isinstance(a, List):\n        a = a[0]\n    if isinstance(b, List):\n        b = b[0]\n    if isinstance(a, List):\n        a = a[0]\n    if isinstance(b, List):\n        b = b[0]\n    if isinstance(a, List):\n        a = a[0]\n    if isinstance(b, List):\n        b = b[0]\n    if isinstance(a, List):\n        a = a[0]\n    if isinstance(b, List):\n        b = b[0]\n    if isinstance(a, List):\n        a = a[0]\n    if isinstance(b, List):\n        b = b[0]\n    if isinstance(a, List):\n        a = a[0]\n    if isinstance(b, List):\n        b = b[0]\n    if isinstance(a, List):\n        a = a[0]\n    if isinstance(b, List):\n        b = b[0]\n    if isinstance(", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()\n    elif isinstance(a, str):\n        return a.replace('010', '110')\n    else:\n        return a", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return '010' * (a.count() + 1)\n    elif isinstance(a, str):\n        return '110' * (a.count() + 1)\n    else:\n        raise TypeError('Expected a list or string')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    else:\n        return a.reverse()[0].replace('010', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = a[0]\n    if isinstance(b, List):\n        b = b[0]\n    if isinstance(a, int):\n        a = a[0]\n    if isinstance(b, int):\n        b = b[0]\n    if isinstance(a, int):\n        a = a[0]\n    if isinstance(b, int):\n        b = b[0]\n    if isinstance(a, int):\n        a = a[0]\n    if isinstance(b, int):\n        b = b[0]\n    if isinstance(a, int):\n        a = a[0]\n    if isinstance(b, int):\n        b = b[0]\n    if isinstance(a, int):\n        a = a[0]\n    if isinstance(b, int):\n        b = b[0]\n    if isinstance(a, int):\n        a = a[0]\n    if isinstance(b, int):\n        b = b[0]\n    if isinstance(a, int):\n        a = a[0]\n    if isinstance(b, int):\n        b = b[0]\n    if isinstance(a, int):\n        a = a[0]\n    if isinstance(b, int):\n        b = b[0]\n    if isinstance(", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.map(string_xor)\n    else:\n        return a.map(string_xor)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return 'a ='+ str(a) +'and b ='+ str(b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    else:\n        return a.reverse()[0].replace('010', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = [a[0] for a in a]\n    if isinstance(b, List):\n        b = [b[0] for b in b]\n    if isinstance(a, List):\n        a = [a[0] for a in a]\n    if isinstance(b, List):\n        b = [b[0] for b in b]\n    if isinstance(a, List):\n        a = [a[0] for a in a]\n    if isinstance(b, List):\n        b = [b[0] for b in b]\n    if isinstance(a, List):\n        a = [a[0] for a in a]\n    if isinstance(b, List):\n        b = [b[0] for b in b]\n    if isinstance(a, List):\n        a = [a[0] for a in a]\n    if isinstance(b, List):\n        b = [b[0] for b in b]\n    if isinstance(a, List):\n        a = [a[0] for a in a]\n    if isinstance(b, List):\n        b = [b[0] for b in b]\n    if isinstance(a, List):\n        a = [a[0] for a in a]\n    if isinstance(b, List):", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    else:\n        return a.reverse()[0].replace('010', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b)\n    else:\n        return a.join(b) if isinstance(b, List) else b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.replace('010', '110').replace('110', '010').replace('110', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()\n    else:\n        return a.map(string_xor).reverse()", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    else:\n        return a.reverse()[0].replace('010', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()\n    elif isinstance(a, str):\n        return a.replace('010', '110')\n    else:\n        raise TypeError('Expected a list or string, got %s' % type(a))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = a[0]\n    if isinstance(b, List):\n        b = b[0]\n    if isinstance(a, str):\n        a = a.replace('010', '110')\n    if isinstance(b, str):\n        b = b.replace('010', '110')\n    if isinstance(a, int):\n        a = a.replace('0', '1')\n    if isinstance(b, int):\n        b = b.replace('0', '1')\n    if isinstance(a, int):\n        a = a.replace('0', '1')\n    if isinstance(a, int):\n        a = a.replace('0', '1')\n    if isinstance(b, int):\n        b = b.replace('0', '1')\n    if isinstance(a, int):\n        a = a.replace('0', '1')\n    if isinstance(b, int):\n        b = b.replace('0', '1')\n    if isinstance(a, int):\n        a = a.replace('0', '1')\n    if isinstance(b, int):\n        b = b.replace('0', '1')\n    if isinstance(a, int):\n        a", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' ') if b.startswith('010') else b.split(' ') if b.startswith('110') else b.split(' ') if b.startswith('010') else b.split(' ') if b.startswith('110') else b.split(' ') if b.startswith('010') else b.split(' ') if b.startswith('110') else b.split(' ') if b.startswith('010') else b.split(' ') if b.startswith('110') else b.split(' ') if b.startswith('010') else b.split(' ') if b.startswith('110') else b.split(' ') if b.startswith('010') else b.split(' ') if b.startswith('110') else b.split(' ') if b.startswith('010') else b.split(' '", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.map(xor).join(b.map(xor).join('0'))\n    else:\n        return a.map(xor).join(b.map(xor).join('0')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = a.sort(key=lambda x: x[0])\n    if isinstance(b, List):\n        b = b.sort(key=lambda x: x[0])\n    if isinstance(a, List):\n        a = a.sort(key=lambda x: x[0])\n    if isinstance(b, List):\n        b = b.sort(key=lambda x: x[0])\n    if isinstance(a, List):\n        a = a.sort(key=lambda x: x[0])\n    if isinstance(b, List):\n        b = b.sort(key=lambda x: x[0])\n    return string_xor(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    else:\n        return a.reverse()[0].replace('010', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return 'a XOR b'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()\n    elif isinstance(a, str):\n        return a.replace('010', '110')\n    else:\n        raise TypeError('Expected a list or string')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b)\n    else:\n        return a.join(b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    return a.xor(b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.map(string_xor)\n    else:\n        return a.map(string_xor).join(b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' ')[::-1])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    else:\n        return a.reverse()[0].replace('010', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    else:\n        return a.reverse()[0].replace('010', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' '))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' ')[0])\n    else:\n        return a.join(b.split(' ')[1:])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    else:\n        return a.reverse()[0].replace('010', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    else:\n        return a.reverse()[0].replace('.', '.')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    else:\n        return a.reverse()[0].replace('010', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' ') if b.startswith(' ') else b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' ') if b.startswith('01') else b.split(' ') if b.startswith('10') else b.split(' ') if b.startswith('11') else b.split(' ') if b.startswith('12') else b.split(' ') if b.startswith('13') else b.split(' ') if b.startswith('14') else b.split(' ') if b.startswith('15') else b.split(' ') if b.startswith('16') else b.split(' ') if b.startswith('17') else b.split(' ') if b.startswith('18') else b.split(' ') if b.startswith('19') else b.split(' ') if b.startswith('20') else b.split(' ') if b.startswith('21') else b.split(' ') if", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.replace('0', '1') + b.replace('1', '0')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' ')[::-1])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b)\n    else:\n        return a.join(b) if isinstance(b, List) else b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b)\n    elif isinstance(a, str):\n        return a.replace(' ', '').replace('\\t', '').replace('\\n', '')\n    elif isinstance(a, str):\n        return a.replace(' ', '').replace('\\t', '').replace('\\n', '')\n    elif isinstance(a, str):\n        return a.replace(' ', '').replace('\\t', '').replace('\\n', '')\n    elif isinstance(a, str):\n        return a.replace(' ', '').replace('\\t', '').replace('\\n', '')\n    elif isinstance(a, str):\n        return a.replace(' ', '').replace('\\t', '').replace('\\n', '')\n    elif isinstance(a, str):\n        return a.replace(' ', '').replace('\\t', '').replace('\\n', '')\n    elif isinstance(a, str):\n        return a.replace(' ', '').replace('\\t', '').replace('\\n', '')\n    elif isinstance(a, str):", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    else:\n        return a.reverse()[1:]", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    if isinstance(b, List):\n        return b.reverse()[0]\n    if isinstance(a, str):\n        return a.replace('010', '110')\n    if isinstance(b, str):\n        return b.replace('010', '110')\n    return a.replace('010', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()\n    else:\n        return a.map(string_xor).reverse()", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b)\n    else:\n        return string_xor(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b)\n    else:\n        return string_xor(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    else:\n        return a.reverse()[0]", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.replace('0', '1').replace('1', '0').replace('110', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = a[0]\n    if isinstance(b, List):\n        b = b[0]\n    if isinstance(a, List) and isinstance(b, List):\n        return a.xor(b.xor(a))\n    if isinstance(a, List) and isinstance(b, List):\n        return a.xor(b.xor(a))\n    if isinstance(a, List) and isinstance(b, List):\n        return a.xor(b.xor(a))\n    if isinstance(a, List) and isinstance(b, List):\n        return a.xor(b.xor(a))\n    if isinstance(a, List) and isinstance(b, List):\n        return a.xor(b.xor(a))\n    if isinstance(a, List) and isinstance(b, List):\n        return a.xor(b.xor(a))\n    if isinstance(a, List) and isinstance(b, List):\n        return a.xor(b.xor(a))\n    if isinstance(a, List) and isinstance(b, List):\n        return a.xor(b.", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()\n    elif isinstance(a, str):\n        return a.replace('010', '110')\n    else:\n        raise TypeError('Expected a list or string')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.replace('0', '1').replace('1', '0').replace('110', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' ')[::-1]) + b.split(' ')[-1]", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = a.sort(key=lambda x: x[0])\n    if isinstance(b, List):\n        b = b.sort(key=lambda x: x[0])\n    if isinstance(a, List):\n        a = a.sort(key=lambda x: x[0])\n    if isinstance(b, List):\n        b = b.sort(key=lambda x: x[0])\n    if isinstance(a, List):\n        a = a.sort(key=lambda x: x[0])\n    if isinstance(b, List):\n        b = b.sort(key=lambda x: x[0])\n    if isinstance(a, List):\n        a = a.sort(key=lambda x: x[0])\n    if isinstance(b, List):\n        b = b.sort(key=lambda x: x[0])\n    if isinstance(a, List):\n        a = a.sort(key=lambda x: x[0])\n    if isinstance(b, List):\n        b = b.sort(key=lambda x: x[0])\n    if isinstance(a, List):\n        a = a.sort(key=lambda x: x[0])\n    if isinstance(b, List):\n        b = b.", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()\n    else:\n        return a.reverse() + b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.replace('0', '1').replace('1', '0').replace('110', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    else:\n        return a.reverse()[0].replace('010', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()\n    else:\n        return a.reverse() + b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    else:\n        return a.reverse()[0].reverse()[0]", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()\n    else:\n        return a.join(b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = a.sort(key=lambda x: x[0])\n    if isinstance(b, List):\n        b = b.sort(key=lambda x: x[0])\n    if isinstance(a, List):\n        a = a.sort(key=lambda x: x[0])\n    if isinstance(b, List):\n        b = b.sort(key=lambda x: x[0])\n    if isinstance(a, List):\n        a = a.sort(key=lambda x: x[0])\n    if isinstance(b, List):\n        b = b.sort(key=lambda x: x[0])\n    if isinstance(a, List):\n        a = a.sort(key=lambda x: x[0])\n    if isinstance(b, List):\n        b = b.sort(key=lambda x: x[0])\n    if isinstance(a, List):\n        a = a.sort(key=lambda x: x[0])\n    if isinstance(b, List):\n        b = b.sort(key=lambda x: x[0])\n    if isinstance(a, List):\n        a = a.sort(key=lambda x: x[0])\n    if isinstance(b, List):\n        b = b.", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return 'a XOR b'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    else:\n        return a.reverse()[0].replace('010', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List) and isinstance(b, List):\n        return a.reverse() - b.reverse()\n    if isinstance(a, List) and isinstance(b, List):\n        return a.reverse() - b.reverse()\n    if isinstance(a, List) and isinstance(b, List):\n        return a.reverse() - b.reverse()\n    if isinstance(a, List) and isinstance(b, List):\n        return a.reverse() - b.reverse()\n    if isinstance(a, List) and isinstance(b, List):\n        return a.reverse() - b.reverse()\n    if isinstance(a, List) and isinstance(b, List):\n        return a.reverse() - b.reverse()\n    if isinstance(a, List) and isinstance(b, List):\n        return a.reverse() - b.reverse()\n    if isinstance(a, List) and isinstance(b, List):\n        return a.reverse() - b.reverse()\n    if isinstance(a, List) and isinstance(b, List):\n        return a.", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.min(b)\n    else:\n        return a.min(b) + b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = a.sort(key=lambda x: x[0])\n    if isinstance(b, List):\n        b = b.sort(key=lambda x: x[0])\n    if isinstance(a, List):\n        a = a.sort(key=lambda x: x[0])\n    if isinstance(b, List):\n        b = b.sort(key=lambda x: x[0])\n    if isinstance(a, List):\n        a = a.sort(key=lambda x: x[0])\n    if isinstance(b, List):\n        b = b.sort(key=lambda x: x[0])\n    return a + b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b)\n    elif isinstance(a, str):\n        return a.replace('.', '.')\n    elif isinstance(b, str):\n        return b.replace('.', '.')\n    else:\n        raise TypeError('Expected a list or string, got %s' % type(a))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()\n    else:\n        return string_xor(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b)\n    else:\n        return a.join(b) if isinstance(b, List) else b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    else:\n        return a.reverse()[0].replace('010', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return 'a XOR b'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' '))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return '010' * (b - a)\n    elif isinstance(a, str):\n        return '010' * (b - a)\n    else:\n        raise TypeError('Expected a list or string, got %s' % a)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = a.sort()\n        b = b.sort()\n        if a == b:\n            return a\n        else:\n            return b\n\n    if isinstance(b, List):\n        b = b.sort()\n        if a == b:\n            return b\n        else:\n            return a\n\n    if isinstance(a, List):\n        a = a.sort()\n        b = b.sort()\n        if a == b:\n            return a\n        else:\n            return b\n\n    if isinstance(b, List):\n        b = b.sort()\n        if a == b:\n            return b\n        else:\n            return a\n\n    if isinstance(a, List):\n        a = a.sort()\n        b = b.sort()\n        if a == b:\n            return a\n        else:\n            return b\n\n    if isinstance(b, List):\n        b = b.sort()\n        if a == b:\n            return b\n        else:\n            return a\n\n    if isinstance(a, List):\n        a = a.sort()\n        b = b.sort()\n        if a == b:\n            return a\n        else:\n            return b\n\n    if isinstance(b, List):\n        b = b.sort()\n        if a == b:\n            return b\n        else:\n            return a\n\n    if isinstance(a, List)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()\n    else:\n        return a.reverse() + b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List) and isinstance(b, List):\n        return a.reverse() - b.reverse()\n    if isinstance(a, List) and isinstance(b, List):\n        return a.reverse() - b.reverse()\n    if isinstance(a, List) and isinstance(b, List):\n        return a.reverse() - b.reverse()\n    if isinstance(a, List) and isinstance(b, List):\n        return a.reverse() - b.reverse()\n    if isinstance(a, List) and isinstance(b, List):\n        return a.reverse() - b.reverse()\n    if isinstance(a, List) and isinstance(b, List):\n        return a.reverse() - b.reverse()\n    if isinstance(a, List) and isinstance(b, List):\n        return a.reverse() - b.reverse()\n    if isinstance(a, List) and isinstance(b, List):\n        return a.reverse() - b.reverse()\n    if isinstance(a, List) and isinstance(b, List):\n        return a.", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return b.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return b.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return b.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' ')[0])\n    elif isinstance(a, str):\n        return a.replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace('", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()\n    elif isinstance(a, str):\n        return a.replace('010', '110')\n    else:\n        raise TypeError('Expected a list or string')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.min(b)\n    else:\n        return a.min(b) + b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    if isinstance(b, List):\n        return b.reverse()[0]\n    return a.__str__().__eq__(b.__str__())", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b)\n    elif isinstance(a, str):\n        return a.replace(' ', '').replace('\\t', '').replace('\\n', '').replace('\\r', '')\n    elif isinstance(a, int):\n        return a.replace(' ', '').replace('\\t', '').replace('\\n', '').replace('\\r', '')\n    elif isinstance(a, int):\n        return a.replace(' ', '').replace('\\t', '').replace('\\n', '').replace('\\r', '')\n    elif isinstance(a, int):\n        return a.replace(' ', '').replace('\\t', '').replace('\\n', '').replace('\\r', '')\n    elif isinstance(a, int):\n        return a.replace(' ', '').replace('\\t', '').replace('\\n', '').replace('\\r', '')\n    elif isinstance(a, int):\n        return a.replace(' ', '').replace('\\t', '').replace('\\n', '').replace", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    elif isinstance(b, List):\n        return b.reverse()[0]\n    else:\n        raise TypeError('Expected a list or a string, got %s' % type(a))\n    return string_xor(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.replace('010', '110').replace('110', '100')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    else:\n        return a.reverse()[0]", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    else:\n        return a.reverse()[0].replace('.', '.')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()\n    else:\n        return a.map(string_xor).reverse()", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.replace('0', '1') + b.replace('1', '0')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = a.sort(key=lambda x: x[0])\n    if isinstance(b, List):\n        b = b.sort(key=lambda x: x[0])\n    if isinstance(a, str):\n        a = a.replace('010', '110')\n    if isinstance(b, str):\n        b = b.replace('010', '110')\n    return a + b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.map(xor).join(b.map(xor).join(''))\n    else:\n        return a.map(xor).join(b.map(xor).join(''))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()\n    else:\n        return a.map(string_xor).reverse()", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    else:\n        return a.reverse()[0].replace(' ', '')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b)\n    elif isinstance(a, str):\n        return a.replace('010', '110')\n    else:\n        raise TypeError('Expected a List or string')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    else:\n        return a.reverse()[0].replace(' ', '').replace('.', '').replace('+', '')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    else:\n        return a.reverse()[0].replace(' ', '')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    else:\n        return a.reverse()[1:]", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a == '0':\n        return '10'\n    if a == '1':\n        return '10'\n    if a == '2':\n        return '10'\n    if a == '3':\n        return '10'\n    if a == '4':\n        return '10'\n    if a == '5':\n        return '10'\n    if a == '6':\n        return '10'\n    if a == '7':\n        return '10'\n    if a == '8':\n        return '10'\n    if a == '9':\n        return '10'\n    if a == '10':\n        return '10'\n    if a == '11':\n        return '10'\n    if a == '12':\n        return '10'\n    if a == '13':\n        return '10'\n    if a == '14':\n        return '10'\n    if a == '15':\n        return '10'\n    if a == '16':\n        return '10'\n    if a == '17':\n        return '10'\n    if a == '18':\n        return '10'\n    if a == '19':\n        return '10'\n    if a == '20':\n        return '10'\n    if a == '21':\n        return '10'\n    if a == '22':\n        return '10'\n    if a == '23':", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    else:\n        return a.reverse()[0].replace('010', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return '101' if a == '110' else '110'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    else:\n        return a.reverse()[0].replace('010', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.map(string_xor)\n    elif isinstance(a, str):\n        return a.map(string_xor)\n    else:\n        raise TypeError('Expected a list or string, got %s' % type(a))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b)\n    else:\n        return a.join(b) + b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.replace('010', '110').replace('110', '010').replace('110', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.min(b)\n    else:\n        return a.min(b) + b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, str):\n        return a.replace('010', '110')\n    if isinstance(b, str):\n        return b.replace('010', '110')\n    if isinstance(a, int):\n        return a.replace('010', '110')\n    if isinstance(b, int):\n        return b.replace('010', '110')\n    return a.replace('010', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.min(b)\n    else:\n        return a.min(b) + b.min(a)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    else:\n        return a.reverse()[0].reverse()[0]", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a == '01':\n        return '10'\n    elif a == '110':\n        return '10'\n    else:\n        return '10'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()\n    elif isinstance(a, str):\n        return a.replace('010', '110')\n    else:\n        return a.replace('010', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b)\n    elif isinstance(a, str):\n        return a.replace(b'0', b'1')\n    elif isinstance(a, int):\n        return a.replace(b'0', b'1')\n    elif isinstance(a, int64):\n        return a.replace(b'0', b'1')\n    elif isinstance(a, int):\n        return a.replace(b'0', b'1')\n    elif isinstance(a, int64):\n        return a.replace(b'0', b'1')\n    elif isinstance(a, int):\n        return a.replace(b'0', b'1')\n    elif isinstance(a, int64):\n        return a.replace(b'0', b'1')\n    elif isinstance(a, int):\n        return a.replace(b'0', b'1')\n    elif isinstance(a, int64):\n        return a.replace(b'0', b'1')\n    elif isinstance(a, int):\n        return a.replace(b'0', b'1')\n    elif isinstance(a, int):\n        return a.replace(b'0', b'1')\n    elif isinstance(a, int64):\n        return a.replace(", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()\n    else:\n        return a.map(string_xor).reverse()", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a == '0':\n        return '10'\n    if b == '0':\n        return '10'\n    if a == '1':\n        return '10'\n    if b == '1':\n        return '10'\n    if a == '2':\n        return '10'\n    if b == '2':\n        return '10'\n    if a == '3':\n        return '10'\n    if b == '3':\n        return '10'\n    if a == '4':\n        return '10'\n    if b == '4':\n        return '10'\n    if a == '5':\n        return '10'\n    if b == '5':\n        return '10'\n    if a == '6':\n        return '10'\n    if b == '6':\n        return '10'\n    if a == '7':\n        return '10'\n    if b == '7':\n        return '10'\n    if a == '8':\n        return '10'\n    if b == '8':\n        return '10'\n    if a == '9':\n        return '10'\n    if b == '9':\n        return '10'\n    if a == '10' or b == '10' or a == '10' or b == '10' or a == '10' or b == '10' or a == '10' or b == '10' or a ==", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.min(b)\n    else:\n        return a.min(b) + b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a == '0':\n        return '10'\n    if a == '1':\n        return '10'\n    if a == '2':\n        return '10'\n    if a == '3':\n        return '10'\n    if a == '4':\n        return '10'\n    if a == '5':\n        return '10'\n    if a == '6':\n        return '10'\n    if a == '7':\n        return '10'\n    if a == '8':\n        return '10'\n    if a == '9':\n        return '10'\n    if a == '10':\n        return '10'\n    if a == '11':\n        return '10'\n    if a == '12':\n        return '10'\n    if a == '13':\n        return '10'\n    if a == '14':\n        return '10'\n    if a == '15':\n        return '10'\n    if a == '16':\n        return '10'\n    if a == '17':\n        return '10'\n    if a == '18':\n        return '10'\n    if a == '19':\n        return '10'\n    if a == '20':\n        return '10'\n    if a == '21':\n        return '10'\n    if a == '22':\n        return '10'\n    if a == '23':", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.replace('0', '1') + b.replace('1', '0')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' ')[:-1])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' ')[::-1])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.map(string_xor)\n    else:\n        return a.map(string_xor)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b)\n    else:\n        return string_xor(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' ')[::-1])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.map(string_xor)\n    else:\n        return a.map(string_xor)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    else:\n        return a.reverse()[0].replace('010', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b)\n    else:\n        return string_xor(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b)\n    else:\n        return a.join(b) if isinstance(b, List) else b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' ') if b.startswith('010') else b.split(' ') if b.startswith('110') else b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' '))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()\n    elif isinstance(a, str):\n        return a.replace('010', '110')\n    else:\n        raise TypeError('Expected a list or string, got %s' % a)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.replace('0', '1') + b.replace('1', '0')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.map(string_xor)\n    else:\n        return a.map(string_xor)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = a.sort(key=lambda x: x[0])\n    if isinstance(b, List):\n        b = b.sort(key=lambda x: x[0])\n    if isinstance(a, List):\n        a = a.sort(key=lambda x: x[0])\n    if isinstance(b, List):\n        b = b.sort(key=lambda x: x[0])\n    if isinstance(a, List):\n        a = a.sort(key=lambda x: x[0])\n    if isinstance(b, List):\n        b = b.sort(key=lambda x: x[0])\n    if isinstance(a, List):\n        a = a.sort(key=lambda x: x[0])\n    if isinstance(b, List):\n        b = b.sort(key=lambda x: x[0])\n    return a + b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return b.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return b.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return b.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return b.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return b.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return b.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a == '0':\n        return '10'\n    if b == '0':\n        return '10'\n    if a == '1':\n        return '10'\n    if b == '1':\n        return '10'\n    if a == '2':\n        return '10'\n    if b == '2':\n        return '10'\n    if a == '3':\n        return '10'\n    if b == '3':\n        return '10'\n    if a == '4':\n        return '10'\n    if b == '4':\n        return '10'\n    if a == '5':\n        return '10'\n    if b == '5':\n        return '10'\n    if a == '6':\n        return '10'\n    if b == '6':\n        return '10'\n    if a == '7':\n        return '10'\n    if b == '7':\n        return '10'\n    if a == '8':\n        return '10'\n    if b == '8':\n        return '10'\n    if a == '9':\n        return '10'\n    if b == '9':\n        return '10'\n    if a == '10':\n        return '10'\n    if b == '10':\n        return '10'\n    if a == '11':\n        return '10'\n    if b == '11':\n        return '10'", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.map(string_xor)\n    else:\n        return a.map(string_xor).join(' ')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' ') if b.startswith(' ') else b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b)\n    else:\n        return a.join(b) if isinstance(b, List) else b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.replace('010', '110').replace('110', '010').replace('110', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    else:\n        return a.reverse()[0].replace('010', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' ') if isinstance(b, str) else b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b)\n    else:\n        return a.join(b) + b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split(' ') if b.startswith(' ') else b.split", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b)\n    else:\n        return string_xor(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.replace('010', '110').replace('110', '010').replace('110', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    else:\n        return a.reverse()[0].replace('010', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()\n    else:\n        return a.map(string_xor).reverse()", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.replace('010', '110').replace('110', '100')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return b.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' ') if isinstance(b, str) else b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    elif isinstance(a, str):\n        return a.reverse()[0]\n    else:\n        raise TypeError(\"Expected a list or string, got %s\" % a)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    elif isinstance(a, str):\n        return a.replace('010', '110')\n    else:\n        raise TypeError('Expected a list or string')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b)\n    else:\n        return string_xor(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    elif isinstance(a, str):\n        return a.replace('010', '110')\n    else:\n        raise TypeError('Expected a list or string, got %s' % a)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' ') if isinstance(b, str) else b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b)\n    else:\n        return string_xor(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = a[0]\n    if isinstance(b, List):\n        b = b[0]\n    if isinstance(a, List):\n        a = a[0]\n    if isinstance(b, List):\n        b = b[0]\n    if isinstance(a, List):\n        a = a[0]\n    if isinstance(b, List):\n        b = b[0]\n    if isinstance(a, List):\n        a = a[0]\n    if isinstance(b, List):\n        b = b[0]\n    if isinstance(a, List):\n        a = a[0]\n    if isinstance(b, List):\n        b = b[0]\n    if isinstance(a, List):\n        a = a[0]\n    if isinstance(b, List):\n        b = b[0]\n    if isinstance(a, List):\n        a = a[0]\n    if isinstance(b, List):\n        b = b[0]\n    if isinstance(a, List):\n        a = a[0]\n    if isinstance(b, List):\n        b = b[0]\n    if isinstance(a, List):\n        a = a[0]\n    if isinstance(b, List):\n        b = b[0]\n    if isinstance(", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    elif isinstance(a, str):\n        return a.replace('010', '110').replace('110', '100')\n    else:\n        raise TypeError('Expected a list or string')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b)\n    else:\n        return a.join(b) + b", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()[0]\n    if isinstance(b, List):\n        return b.reverse()[0]\n    return a.join(b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b)\n    else:\n        return string_xor(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(a, List):\n        a = [a for a in a]\n    if isinstance(b, List):\n        b = [b for b in b]\n    if isinstance(", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if a == '0':\n        return '10'\n    if b == '0':\n        return '10'\n    if a == '1':\n        return '10'\n    if b == '1':\n        return '10'\n    if a == '2':\n        return '10'\n    if b == '2':\n        return '10'\n    if a == '3':\n        return '10'\n    if b == '3':\n        return '10'\n    if a == '4':\n        return '10'\n    if b == '4':\n        return '10'\n    if a == '5':\n        return '10'\n    if b == '5':\n        return '10'\n    if a == '6':\n        return '10'\n    if b == '6':\n        return '10'\n    if a == '7':\n        return '10'\n    if b == '7':\n        return '10'\n    if a == '8':\n        return '10'\n    if b == '8':\n        return '10'\n    if a == '9':\n        return '10'\n    if b == '9':\n        return '10'\n    if a == '10' or b == '10' or a == '10' or b == '10' or a == '10' or b == '10' or a == '10' or b == '10' or a ==", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b)\n    else:\n        return string_xor(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()\n    else:\n        return a.map(string_xor).reverse()", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.replace('010', '110').replace('110', '010').replace('110', '110')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' ')[::-1])", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return a.replace('010', '110').replace('110', '100')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return '010' * (b - 'a')\n    else:\n        return '110' * (b - 'a')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' '))", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return a.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return b.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(a, List):\n        return b.reverse()\n    if isinstance(b, List):\n        return b.reverse()\n    if isinstance(", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b)\n    else:\n        return string_xor(a, b)", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b)\n    elif isinstance(a, str):\n        return a.replace('010', '110')\n    else:\n        raise TypeError('Expected a list or string')", "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if isinstance(a, List):\n        return a.join(b.split(' '))\n    else:\n        return a.join(b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split(' ') + b.split"]]