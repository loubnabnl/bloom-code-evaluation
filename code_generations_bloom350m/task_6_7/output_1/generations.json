[["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string)\n    else:\n        return parse_nested_parens(paren_string)", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string).map(int).flatten())\n</s>", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 0:\n        return List(0)\n    for i in range(len(paren_string)):\n        if paren_string[i] == ')':\n            return List(i)\n        elif paren_string[i] == ')':\n            return List(i + 1)\n        elif paren_string[i] == ')':\n            return List(i + 2)\n        elif paren_string[i] == ')':\n            return List(i + 3)\n    return List(0)", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 1:\n        return parse_nested_parens(paren_string[0])\n    elif len(paren_string) == 2:\n        return parse_nested_parens(paren_string[1])\n    elif len(paren_string) == 3:\n        return parse_nested_parens(paren_string[2])\n    else:\n        raise TypeError('Expected one or more nested parentheses separated by spaces.')", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(',')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, str):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list):\n        return parse_nested_parens(paren_string)\n    else:\n        raise TypeError(\"Expected a list of strings, got %s\" % paren_string)", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string.split(')')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(' ')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 1:\n        return List(int(parse_nested_parens(paren_string[0])))\n    elif len(paren_string) == 2:\n        return List(int(parse_nested_parens(paren_string[1])))\n    elif len(paren_string) == 3:\n        return List(int(parse_nested_parens(paren_string[2])))\n    return List(int(parse_nested_parens(paren_string[0])) + int(parse_nested_parens(paren_string[1])) + int(parse_nested_parens(paren_string[2])))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, list):\n        return parse_nested_parens(paren_string)\n    else:\n        return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(' ')[0].split(' ')[1])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string)\n    else:\n        return parse_nested_parens(paren_string)", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 1:\n        return parse_nested_parens('()')\n    elif len(paren_string) == 2:\n        return parse_nested_parens('((')\n    elif len(paren_string) == 3:\n        return parse_nested_parens('((')\n    elif len(paren_string) == 4:\n        return parse_nested_parens('((')\n    elif len(paren_string) == 5:\n        return parse_nested_parens('((')\n    elif len(paren_string) == 6:\n        return parse_nested_parens('((')\n    elif len(paren_string) == 7:\n        return parse_nested_parens('((')\n    elif len(paren_string) == 8:\n        return parse_nested_parens('((')\n    elif len(paren_string) == 9:\n        return parse_nested_parens('((')\n    elif len(paren_string) == 10:\n        return parse_nested_parens('((')\n    elif len(paren_string) == 11:\n        return parse_nested_parens('((')\n    elif len(paren_string) == 12:\n        return parse_n", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, str):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]:\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]:\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]:\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]:\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]:\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]:\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]:\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]:\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]:\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]:\n        return parse_nest", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(' ')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split('(')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string).map(int).flatten())\n</s>", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 1:\n        return parse_nested_parens(paren_string[0])\n    elif len(paren_string) == 2:\n        return parse_nested_parens(paren_string[1])\n    elif len(paren_string) == 3:\n        return parse_nested_parens(paren_string[2])\n    else:\n        raise TypeError('Invalid number of nested parens')", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string).map(int).flatten())\n</s>", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, list):\n        return parse_nested_parens(paren_string)\n    else:\n        return parse_nested_parens(paren_string)", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if paren_string.startswith('('):\n        return parse_nested_parens(paren_string[2:])\n    elif paren_string.startswith(')'):\n        return parse_nested_parens(paren_string[2:])\n    elif paren_string.startswith('('):\n        return parse_nested_parens(paren_string[2:])\n    elif paren_string.startswith(')'):\n        return parse_nested_parens(paren_string[2:])\n    elif paren_string.startswith(')'):\n        return parse_nested_parens(paren_string[2:])\n    elif paren_string.startswith('('):\n        return parse_nested_parens(paren_string[2:])\n    elif paren_string.startswith(')'):\n        return parse_nested_parens(paren_string[2:])\n    elif paren_string.startswith(')'):\n        return parse_nested_parens(paren_string[2:])\n    elif paren_string.startswith(')'):\n        return parse_nested_parens(paren_string[2:])\n    elif paren", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(' ')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(' ')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, str):\n        return parse_nested_parens(paren_string)\n    else:\n        return List(parse_nested_parens(paren_string))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string).flatten())\n</s>", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string.split(')'))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    if isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string)\n    if isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    if isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string)\n    if isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    if isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    if isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string)\n    if isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    if isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    if isinstance(paren_string, List[str]):\n        return parse_nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split('(')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string).flatten())\n</s>", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(' ')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string.split(')')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string.split(')')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 1:\n        return List(parse_nested_parens('()()'))\n    elif len(paren_string) == 2:\n        return List(parse_nested_parens('()()'))\n    elif len(paren_string) == 3:\n        return List(parse_nested_parens('()()'))\n    elif len(paren_string) == 4:\n        return List(parse_nested_parens('()()'))\n    elif len(paren_string) == 5:\n        return List(parse_nested_parens('()()'))\n    elif len(paren_string) == 6:\n        return List(parse_nested_parens('()()'))\n    elif len(paren_string) == 7:\n        return List(parse_nested_parens('()()'))\n    elif len(paren_string) == 8:\n        return List(parse_nested_parens('()()'))\n    elif len(paren_string) == 9:\n        return List(parse_nested_parens('()()'))\n    elif len(paren_string) == 10:\n        return List(parse_nested_parens('()()'))\n    elif len(paren", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string).flatten())\n</s>", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string.split(')'))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string).flatten())\n</s>", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, str):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(' ')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string[0])\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 1:\n        return parse_nested_parens(paren_string[0])\n    elif len(paren_string) == 2:\n        return parse_nested_parens(paren_string[1])\n    elif len(paren_string) == 3:\n        return parse_nested_parens(paren_string[2])\n    else:\n        raise TypeError(\"Expected one or more nested parentheses separated by spaces.\")", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, str):\n        return parse_nested_parens(paren_string)\n    else:\n        return parse_nested_parens(paren_string.split('()')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string.split(')'))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string.split(')')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 1:\n        return parse_nested_parens(paren_string[0])\n    elif len(paren_string) == 2:\n        return parse_nested_parens(paren_string[1])\n    elif len(paren_string) == 3:\n        return parse_nested_parens(paren_string[2])\n    else:\n        raise TypeError(\"Expected one or more nested parentheses separated by spaces.\")", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string.split(')'))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 1:\n        return List(parse_nested_parens('('))\n    elif len(paren_string) == 2:\n        return List(parse_nested_parens('(', ')'))\n    elif len(paren_string) == 3:\n        return List(parse_nested_parens('(', ')', ')'))\n    elif len(paren_string) == 4:\n        return List(parse_nested_parens('(', ')', ')', ')')\n    elif len(paren_string) == 5:\n        return List(parse_nested_parens('(', ')', ')', ')')\n    elif len(paren_string) == 6:\n        return List(parse_nested_parens('(', ')', ')', ')')\n    elif len(paren_string) == 7:\n        return List(parse_nested_parens('(', ')', ')', ')')\n    elif len(paren_string) == 8:\n        return List(parse_nested_parens('(', ')'", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, str):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string).flatten())\n</s>", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 1:\n        return List(int(paren_string[0]))\n    elif len(paren_string) == 2:\n        return List(int(paren_string[1]))\n    elif len(paren_string) == 3:\n        return List(int(paren_string[2]))\n    else:\n        raise ValueError(\"Expected a string of type int or list of int\")", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string).map(int).flatten())\n</s>", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 1:\n        return [int(paren_string[0])]\n    elif len(paren_string) == 2:\n        return [int(paren_string[1])]\n    elif len(paren_string) == 3:\n        return [int(paren_string[2])]\n    else:\n        raise ValueError(\"Expected one or more nested parentheses separated by spaces.\")", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    else:\n        return parse_nested_parens(paren_string)", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string.split(')'))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string.split(')')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, str):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) > 1:\n        return parse_nested_parens(paren_string.split('(')[0])\n    return List(0)", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string).map(int).flatten())\n</s>", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string)\n    else:\n        return parse_nested_parens(paren_string)", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string.split('(')[0]).split(')') + parse_nested_parens(paren_string.split(')')[1:])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string)\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if paren_string.startswith('('):\n        return parse_nested_parens(paren_string[2:])\n    elif paren_string.startswith(')'):\n        return parse_nested_parens(paren_string[2:])\n    elif paren_string.startswith('('):\n        return parse_nested_parens(paren_string[3:])\n    elif paren_string.startswith(')'):\n        return parse_nested_parens(paren_string[3:])\n    elif paren_string.startswith('('):\n        return parse_nested_parens(paren_string[4:])\n    elif paren_string.startswith(')'):\n        return parse_nested_parens(paren_string[4:])\n    elif paren_string.startswith('('):\n        return parse_nested_parens(paren_string[5:])\n    elif paren_string.startswith(')'):\n        return parse_nested_parens(paren_string[5:])\n    elif paren_string.startswith('('):\n        return parse_nested_parens(paren_string[6:])\n    elif paren", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string).map(int).flatten())\n</s>", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string[0])\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string[0])\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string[0])\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string[0])\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string[0])\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string[0])\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string[0])\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string[0])\n    elif isinstance(paren_string, List[str]):", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if paren_string.startswith('('):\n        return parse_nested_parens(paren_string.split('(')[0])\n    elif paren_string.startswith(')'):\n        return parse_nested_parens(paren_string.split(')')[0]\n    elif paren_string.startswith('(') and paren_string.endswith(')'):\n        return parse_nested_parens(paren_string.split('(')[-1])\n    elif paren_string.startswith(')') and paren_string.endswith(')'):\n        return parse_nested_parens(paren_string.split('(')[-1])\n\n    return parse_nested_parens(paren_string)", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string)\n    else:\n        return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 1:\n        return parse_nested_parens(paren_string[0])\n    elif len(paren_string) == 2:\n        return parse_nested_parens(paren_string[1])\n    elif len(paren_string) == 3:\n        return parse_nested_parens(paren_string[2])\n    else:\n        raise TypeError(\"Expected a list of nested parens, got %s\" % paren_string)", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 1:\n        return parse_nested_parens(paren_string[0])\n    elif len(paren_string) == 2:\n        return parse_nested_parens(paren_string[1])\n    elif len(paren_string) == 3:\n        return parse_nested_parens(paren_string[2])\n    else:\n        raise TypeError(\"Expected a list of nested parens, got %s\" % paren_string)", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string.split('(')[0]).split(')') + parse_nested_parens(paren_string.split(')')[1:])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, str):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, str):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string)\n    elif", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string).map(int).flatten())\n</s>", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string).flatten())\n</s>", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    else:\n        return parse_nested_parens(paren_string)", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string).map(int).flatten())\n</s>", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 0:\n        return List(0)\n    if len(paren_string) > 1:\n        return List(len(paren_string) - 1)\n    if len(paren_string) == 2:\n        return List(len(paren_string) - 2)\n    if len(paren_string) == 3:\n        return List(len(paren_string) - 3)\n    if len(paren_string) == 4:\n        return List(len(paren_string) - 4)\n    return List(0)", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string)\n    else:\n        return parse_nested_parens(paren_string.split(',')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string.split(')'))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 1:\n        return parse_nested_parens(paren_string[0])\n    elif len(paren_string) == 2:\n        return parse_nested_parens(paren_string[1])\n    elif len(paren_string) == 3:\n        return parse_nested_parens(paren_string[2])\n    else:\n        raise TypeError('Invalid number of nested parens.')", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, str):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]:\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[str]:\n        return parse_nested_parens(paren_string)\n    else:\n        raise TypeError(\"paren_string must be a list or string\")", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split('(')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string).flatten())\n</s>", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 0:\n        return List(0)\n    for i in range(len(paren_string)):\n        if paren_string[i] == ')':\n            return List(i)\n        elif paren_string[i] == ')':\n            return List(i)\n        elif paren_string[i] == ')':\n            return List(i)\n        elif paren_string[i] == ')':\n            return List(i)\n\n    return List(0)", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 1:\n        return parse_nested_parens('()()')\n    elif len(paren_string) == 2:\n        return parse_nested_parens('()()', '((())()')\n    elif len(paren_string) == 3:\n        return parse_nested_parens('()()', '((())()', '((())()')\n    return parse_nested_parens(paren_string)", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string.split(')')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string.split(')')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string.split(')'))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 1:\n        return parse_nested_parens('()()')\n    elif len(paren_string) == 2:\n        return parse_nested_parens('()()')\n    elif len(paren_string) == 3:\n        return parse_nested_parens('()()')\n    else:\n        raise TypeError(\"Expected one or more nested parens separated by spaces.\")", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string.split(')')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string[0])\n    elif isinstance(paren_string, str):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string[0])\n    elif isinstance(paren_string, str):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string[0])\n    elif isinstance(paren_string, str):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string[0])\n    elif isinstance(paren_string, str):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string[0])\n    elif isinstance(paren_string, str):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, str):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 0:\n        return List(0)\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string[0])\n    elif isinstance(paren_string, str):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string[0])\n    elif isinstance(paren_string, str):\n        return parse_nested_parens(paren_string[0])\n    elif isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string[0])\n    elif isinstance(paren_string, str):\n        return parse_nested_parens(paren_string[0])\n    elif isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string[0])\n    elif isinstance(paren_string, str):\n        return parse_nested_parens(paren_string[0])\n    elif isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string[0])\n    elif isinstance(paren_string, str):\n        return parse_nested_parens(paren_string[0])\n    elif", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if not isinstance(paren_string, str):\n        raise TypeError(\"paren_string must be a string\")\n    if not isinstance(paren_string, List[int]):\n        raise TypeError(\"paren_string must be a list\")\n    return parse_nested_parens(paren_string)", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(' ')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split('(')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split('(')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(' ')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 1:\n        return List(int(parse_nested_parens(paren_string[0])))\n    elif len(paren_string) == 2:\n        return List(int(parse_nested_parens(paren_string[1])))\n    elif len(paren_string) == 3:\n        return List(int(parse_nested_parens(paren_string[2])))\n    return List(int(parse_nested_parens(paren_string[0])) + int(parse_nested_parens(paren_string[1])) + int(parse_nested_parens(paren_string[2])))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 1:\n        return parse_nested_parens('(')\n    elif len(paren_string) == 2:\n        return parse_nested_parens('(', ')')\n    elif len(paren_string) == 3:\n        return parse_nested_parens('(', ')', ')')\n    else:\n        raise TypeError('Expected one of'+ str(len(paren_string)) +'or'+ str(len(paren_string)) +'or'+ str(len(paren_string)) +'or'+ str(len(paren_string)) +'or'+ str(len(paren_string)) +'or'+ str(len(paren_string)) +'or'+ str(len(paren_string)) +'or'+ str(len(paren_string)) +'or'+ str(len(paren_string)) +'or'+ str(len(paren_string)) +'or'+ str(len(paren_string)) +'or'+ str(len(paren_string)) +'or'+ str(len(paren_string)) +", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string.split('(')[0].split(')')[1].split(')')[0].split(')')[1].split(')')[0].split(')')[1].split(')')[0].split(')')[1].split(')')[0].split(')')[1].split(')')[0].split(')')[1].split(')')[0].split(')')[1].split(')')[0].split(')')[1].split(')')[0].split(')')[1].split(')')[0].split(')')[1].split(')')[0].split(')')[1].split(')')[0].split(')')[1].split(')')[0].split(')')[1].split(')')[0].split(')')[1].split(')')[0].split(')')[1].split", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string).flatten())\n</s>", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string.split('(')[0])))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 1:\n        return List(parse_nested_parens('('))\n    elif len(paren_string) == 2:\n        return List(parse_nested_parens('(', ')'))\n    elif len(paren_string) == 3:\n        return List(parse_nested_parens('(', ')', ')', ')')\n    elif len(paren_string) == 4:\n        return List(parse_nested_parens('(', ')', ')', ')')\n    elif len(paren_string) == 5:\n        return List(parse_nested_parens('(', ')', ')', ')')\n    elif len(paren_string) == 6:\n        return List(parse_nested_parens('(', ')', ')', ')')\n    elif len(paren_string) == 7:\n        return List(parse_nested_parens('(', ')', ')', ')')\n    elif len(paren_string) == 8:\n        return List(parse_nested_parens('('", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 1:\n        return parse_nested_parens('(')\n    elif len(paren_string) == 2:\n        return parse_nested_parens('(', ')')\n    elif len(paren_string) == 3:\n        return parse_nested_parens('(', ')', ')')\n    else:\n        raise TypeError('Expected one of'+ str(len(paren_string)) +'or'+ str(len(paren_string)) + ', got'+ str(len(paren_string)))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 1:\n        return parse_nested_parens('()()')\n    elif len(paren_string) == 2:\n        return parse_nested_parens('((()())')\n    elif len(paren_string) == 3:\n        return parse_nested_parens('((((()())())')\n    else:\n        raise ValueError('Invalid number of nested parens')", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, str):\n        return parse_nested_parens(paren_string)\n    else:\n        return parse_nested_parens(paren_string.split('()')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string[0])\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[str]):\n        return parse_nested_par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(' ')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string)\n    else:\n        return parse_nested_parens(paren_string.split(',')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 1:\n        return List(parse_nested_parens(paren_string[0]))\n    elif len(paren_string) == 2:\n        return List(parse_nested_parens(paren_string[1]))\n    elif len(paren_string) == 3:\n        return List(parse_nested_parens(paren_string[2]))\n    else:\n        raise TypeError('Expected one or more nested parentheses separated by spaces.')", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, str):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, List[int]:\n        return parse_nested_parens(paren_string)\n    else:\n        raise TypeError(\"Expected a list of int or str\")", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string).flatten())\n</s>", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string.split(')'))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(' ')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(',')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string).flatten())\n</s>", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, str):\n        return parse_nested_parens(paren_string)\n    else:\n        return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, str):\n        return parse_nested_parens(paren_string)\n    else:\n        return parse_nested_parens(paren_string.split('(')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, str):\n        return parse_nested_parens(paren_string.split(')')[0]\n    else:\n        return parse_nested_parens(paren_string)\n\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, str):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 1:\n        return List(int(paren_string[0]))\n    elif len(paren_string) == 2:\n        return List(int(paren_string[1]))\n    elif len(paren_string) == 3:\n        return List(int(paren_string[2]))\n    else:\n        raise TypeError('Expected one or more nested parentheses separated by spaces.')", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string.split(')'))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 1:\n        return List(parse_nested_parens('(()()) ((())) () ((())())())'))\n    elif len(paren_string) == 2:\n        return List(parse_nested_parens('(()()) ((())) () ((())())())'))\n    elif len(paren_string) == 3:\n        return List(parse_nested_parens('(()()) ((())) () ((())())())'))\n    elif len(paren_string) == 4:\n        return List(parse_nested_parens('(()()) ((())) () ((())())())'))\n    elif len(paren_string) == 5:\n        return List(parse_nested_parens('(()()) ((())) () ((())())())'))\n    elif len(paren_string) == 6:\n        return List(parse_nested_parens('(()()) ((())) () ((())())())'))\n    elif len(paren_string) == 7:\n        return List(parse_nested_parens('(()()) ((())) () ((())())())'))\n    elif len(paren_string) == 8:\n        return List(parse_nested_parens('(()()) ((())) () ((())())())'", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, List[str]):\n        return parse_nested_parens(paren_string)\n    else:\n        return parse_nested_parens(paren_string)", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string)\n    else:\n        return parse_nested_parens(paren_string)", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, str):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, list):\n        return parse_nested_parens(paren_string)\n    else:\n        return parse_nested_parens(paren_string.split(' ')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if not isinstance(paren_string, List[int]):\n        raise TypeError('paren_string must be a list of int')\n\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            return parse_nested_parens(paren_string[i + 1])\n        elif paren_string[i] == ')':\n            return parse_nested_parens(paren_string[i + 1])\n        elif paren_string[i] == ')':\n            return parse_nested_parens(paren_string[i + 1])\n        elif paren_string[i] == ')':\n            return parse_nested_parens(paren_string[i + 1])\n        elif paren_string[i] == ')':\n            return parse_nested_parens(paren_string[i + 1])\n        elif paren_string[i] == ')':\n            return parse_nested_parens(paren_string[i + 1])\n\n    return parse_nested_parens(paren_string)", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 0:\n        return List(0)\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string.split(')')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split('(')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string).flatten())\n</s>", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 1:\n        return parse_nested_parens('()()')\n    elif len(paren_string) == 2:\n        return parse_nested_parens('((()())')\n    elif len(paren_string) == 3:\n        return parse_nested_parens('((((()())())')\n    else:\n        raise TypeError('Invalid number of nested parens')", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string).flatten())\n</s>", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 1:\n        return List(parse_nested_parens(paren_string[0]))\n    elif len(paren_string) == 2:\n        return List(parse_nested_parens(paren_string[1]))\n    elif len(paren_string) == 3:\n        return List(parse_nested_parens(paren_string[2]))\n    else:\n        raise TypeError(\"Expected one or more nested parens separated by spaces.\")", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string)\n    else:\n        return parse_nested_parens(paren_string)", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string)\n    else:\n        return parse_nested_parens(paren_string.split(',')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string[0])\n    elif isinstance(paren_string, str):\n        return parse_nested_parens(paren_string)\n    return parse_nested_parens(paren_string)", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string.split(')')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if not isinstance(paren_string, str):\n        raise TypeError('paren_string must be a string')\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 1:\n        return parse_nested_parens(paren_string[0])\n    elif len(paren_string) == 2:\n        return parse_nested_parens(paren_string[1])\n    elif len(paren_string) == 3:\n        return parse_nested_parens(paren_string[2])\n    else:\n        raise TypeError(\"Expected one offrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string.split(')'))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 1:\n        return parse_nested_parens('(')\n    elif len(paren_string) == 2:\n        return parse_nested_parens('(', ')')\n    elif len(paren_string) == 3:\n        return parse_nested_parens('(', ')', ')')\n    else:\n        raise TypeError('Expected one or more nested parens separated by spaces.')", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, str):\n        return parse_nested_parens(paren_string)\n    else:\n        return parse_nested_parens(paren_string.split('(')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, str):\n        return parse_nested_parens(paren_string)\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, str):\n        return parse_nested_parens(paren_string)\n    else:\n        return parse_nested_parens(paren_string.split('(')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, str):\n        return parse_nested_parens(paren_string)\n    else:\n        return parse_nested_parens(paren_string.split('()')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 1:\n        return List(parse_nested_parens(paren_string[0]))\n    elif len(paren_string) == 2:\n        return List(parse_nested_parens(paren_string[1]))\n    elif len(paren_string) == 3:\n        return List(parse_nested_parens(paren_string[2]))\n    else:\n        raise TypeError('Invalid number of nested parens in'+ str(paren_string))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string).map(int).flatten())\n</s>", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(',')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) > 1:\n        return parse_nested_parens(paren_string.split(')')[0]\n    else:\n        return List(parse_nested_parens(paren_string))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 1:\n        return parse_nested_parens(paren_string[0])\n    elif len(paren_string) == 2:\n        return parse_nested_parens(paren_string[1])\n    elif len(paren_string) == 3:\n        return parse_nested_parens(paren_string[2])\n    else:\n        raise TypeError(\"Expected one or more nested parens, got %s\" % paren_string)", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 0:\n        return List(0)\n    else:\n        return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 0:\n        return List(0)\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, str):\n        return parse_nested_parens(paren_string)\n    else:\n        return parse_nested_parens(paren_string.split(' ')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string)\n    else:\n        return parse_nested_parens(paren_string)", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string).map(int).flatten())\n</s>", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string.split(')'))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string.split(')')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(',')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 1:\n        return parse_nested_parens('()()')\n    elif len(paren_string) == 2:\n        return parse_nested_parens('((()())')\n    elif len(paren_string) == 3:\n        return parse_nested_parens('((((()())())')\n    else:\n        raise TypeError('Invalid number of nested parens in nested parentheses.')", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string).map(int).flatten())", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string.split('(')[0].split(')')[1].split(')')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, str):\n        return parse_nested_parens(paren_string)\n    else:\n        return parse_nested_parens(paren_string.split(' ')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if paren_string.startswith('('):\n        return parse_nested_parens(paren_string[2:])\n    elif paren_string.startswith(')'):\n        return parse_nested_parens(paren_string[2:] + ')')\n    elif paren_string.startswith('(') + ')'):\n        return parse_nested_parens(paren_string[2:] + ')')\n    elif paren_string.startswith('(') + ')') + ')'):\n        return parse_nested_parens(paren_string[2:] + ')'\n    elif paren_string.startswith('(') + ')') + ')'):\n        return parse_nested_parens(paren_string[2:] + ')')\n    elif paren_string.startswith('(') + ')') + ')'):\n        return parse_nested_parens(paren_string[2:] + ')')\n    elif paren_string.startswith('(') + ')') + ')'):\n        return parse_nested_parens(par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 1:\n        return parse_nested_parens(paren_string[0])\n    elif len(paren_string) == 2:\n        return parse_nested_parens(paren_string[1])\n    elif len(paren_string) == 3:\n        return parse_nested_parens(paren_string[2])\n    else:\n        raise TypeError('Expected one of'+ str(len(paren_string)) +'or'+ str(len(paren_string)) +'or'+ str(len(paren_string)) +'or'+ str(len(paren_string)) +'or'+ str(len(paren_string)) +'or'+ str(len(paren_string)) +'or'+ str(len(paren_string)) +'or'+ str(len(paren_string)) +'or'+ str(len(paren_string)) +'or'+ str(len(paren_string)) +'or'+ str(len(paren_string)) +'or'+ str(len(paren_string)) +'or'+ str(len(paren_string)) +'or'+ str(len(par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if len(paren_string) == 0:\n        return List(0)\n    return parse_nested_parens(paren_string.split('(')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return List(parse_nested_parens(paren_string.split(')'))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, str):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list[int]):\n        return parse_nested_parens(paren_string)\n    elif", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, str):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, list):\n        return parse_nested_parens(paren_string)\n    elif isinstance(paren_string, tuple):\n        return parse_nested_parens(paren_string)\n    else:\n        raise TypeError(\"Expected a list or string, got %s\" % type(paren_string))", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if isinstance(paren_string, List[int]):\n        return parse_nested_parens(paren_string)\n    else:\n        return parse_nested_parens(paren_string)", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(' ')[0])", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(')')[0]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return parse_nested_parens(paren_string.split(')')[0]"]]