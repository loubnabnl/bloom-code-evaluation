[["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# We need to find the last note of the string and its beat.\n    last_notes = []\n    for i, note in enumerate(music_string):\n        if i % 2 == 0:\n            last_notes.append(note)\n        elif note == 'o':\n            last_notes.append(4)\n        elif note == 'o|':\n            last_notes.append(2)\n        elif note == '.|':\n            last_notes.append(1)\n        else:\n            last_notes.append(0)\n    return last_notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n            notes.append(i)\n            notes.append(i)\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i)\n            notes.append(i)\n            notes.append(i)\n            notes.append(i)\n            notes.append(i)\n        elif music_string[i] == '.|':\n            notes.append(i)\n            notes.append(i)\n            notes.append(i)\n            notes.append(i)\n            notes.append(i)\n            notes.append(i)\n            notes.append(i)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(len(music_string)):\n        if i > 0:\n            notes.append(music_string[i - 1])\n        else:\n            notes.append(music_string[i])\n        if music_string[i] == 'o':\n            notes.append(4)\n        elif music_string[i] == 'o|':\n            notes.append(2)\n        elif music_string[i] == '.|':\n            notes.append(1)\n        else:\n            notes.append(4)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.count('.') == 1:\n            notes.append(note.count('.') * 2)\n        elif note.count('.') == 2:\n            notes.append(note.count('.') * 4)\n        else:\n            notes.append(note.count('.'))\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for n in music_string.split(' '):\n        if n == 'o':\n            notes.append(4)\n        elif n.isdigit():\n            notes.append(int(n))\n        elif n == 'o|':\n            notes.append(2)\n        elif n.isdigit() or n.isalpha() or n == '.|':\n            notes.append(1)\n        else:\n            raise ValueError('Invalid musical note format')\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    beat_positions = []\n    beat_times = []\n    for c in music_string:\n        if c == '|':\n            beat_positions.append(0)\n            beat_times.append(0)\n        elif c == 'o':\n            beat_positions.append(1)\n            beat_times.append(4)\n        elif c == 'o|':\n            beat_positions.append(2)\n            beat_times.append(2)\n        elif c == '.|':\n            beat_positions.append(3)\n            beat_times.append(1)\n        elif c == 'o o':\n            beat_positions.append(4)\n            beat_times.append(4)\n        elif c == 'o o|':\n            beat_positions.append(2)\n            beat_times.append(2)\n        elif c == 'o o| o':\n            beat_positions.append(3)\n            beat_times.append(1)\n        elif c == 'o o| o|':\n            beat_positions.append(4)\n            beat_times.append(4)\n        elif c == 'o o| o| o|':\n            beat_positions.append(2)\n            beat_times.append(2)\n        elif c == 'o o| o", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split('|')\n    notes = [int(note) for note in notes if note]\n    if len(notes)!= 4:\n        raise ValueError(\"Invalid musical note length: {}\".format(len(notes)))\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_length = 4\n    notes = []\n    for c in music_string:\n        if c in ('o', '|'):\n            beat_length = 2\n            notes.append(beat_length)\n        elif c in ('.', '|'):\n            beat_length = 1\n            notes.append(beat_length)\n        else:\n            beat_length = 0\n            notes.append(beat_length)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for i in music_string.split('|'):\n        if i.startswith('o|'):\n            beats.append(int(i.split('|')[1]))\n        elif i.startswith('.|'):\n            beats.append(int(i.split('|')[1]))\n        elif i.startswith('o|'):\n            beats.append(int(i.split('|')[1]))\n        else:\n            beats.append(int(i))\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = []\n    for note in music_string.split('|'):\n        beat = int(note.split('|')[0])\n        if beat == 4:\n            beat = 1\n        elif beat == 2:\n            beat = 3\n        elif beat == 1:\n            beat = 4\n        elif beat == 4:\n            beat = 5\n        elif beat == 5:\n            beat = 6\n        elif beat == 6:\n            beat = 7\n        elif beat == 7:\n            beat = 8\n        elif beat == 8:\n            beat = 9\n        elif beat == 9:\n            beat = 10\n        else:\n            beat = 0\n        if beat == 0:\n            break\n    return music", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_lengths = []\n    for beat in music_string.split('|'):\n        beat_lengths.append(int(beat.strip(), 16))\n    return beat_lengths", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split('|')\n    notes.reverse()\n    for note in notes:\n        if note.isdigit():\n            return [int(note)]\n        if note.isalpha():\n            return [note]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# The following code is from http://www.music.cornell.edu/~wilson/notes.htm\n    beat_length = 2\n    notes = []\n    for beat in music_string.split('|'):\n        if beat_length > 0:\n            if beat_length < 4:\n                # half note\n                notes.append(beat_length - beat_length % 4)\n                beat_length = beat_length % 4\n            else:\n                # whole note\n                notes.append(beat_length)\n                beat_length = 0\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    beats = 0\n    for n in music_string.split('|'):\n        if n.isdigit():\n            beats += int(n)\n        else:\n            notes.append(beats)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split('|')\n    if len(notes)!= 3:\n        raise ValueError('Expected 3 beats, got %s' % notes)\n    beat = int(notes[0])\n    if beat < 4:\n        raise ValueError('Expected beat to be greater than 0')\n    beats = [beat]\n    for i in xrange(1, 3):\n        beat = int(notes[i - 1])\n        if beat < 4:\n            raise ValueError('Expected beat to be greater than 0')\n        beats.append(beat)\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split(' ')\n    notes = [int(n) for n in notes]\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_list = []\n    beat_list.append(0)\n    for note in music_string.split(' '):\n        if note.isdigit():\n            beat_list.append(int(note))\n        elif note.isalpha():\n            beat_list.append(note)\n        else:\n            raise ValueError('Invalid musical note format')\n    return beat_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split(' ')\n    beat_count = len(notes)\n\n    if beat_count % 2:\n        raise ValueError('Invalid number of beats: {}'.format(beat_count))\n    if beat_count % 4:\n        raise ValueError('Invalid number of beats: {}'.format(beat_count))\n\n    return [int(note) for note in notes]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(len(music_string)):\n        if i < len(music_string) - 1:\n            notes.append(int(music_string[i]))\n        else:\n            notes.append(0)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split()\n    return [int(n) for n in notes]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(4):\n        if i % 2 == 0:\n            notes.append(i)\n        else:\n            notes.append(i * 2)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for note in music_string:\n        if note.isdigit():\n            beats.append(int(note))\n        elif note.isalpha():\n            beats.append(note.upper())\n        elif note.isalnum():\n            beats.append(note.lower())\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split(' '):\n        if note.startswith('o'):\n            notes.append(note[1:].count(' '))\n        elif note.startswith('o|'):\n            notes.append(note[1:].count('|'))\n        elif note.startswith('.|'):\n            notes.append(note[1:].count('|'))\n        else:\n            raise ValueError('Invalid note format %s' % note)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    beat_count = 0\n    for note in music_string.split(' '):\n        if note.startswith('o') or note.startswith('o|'):\n            beat_count += 4\n            notes.append(beat_count)\n        elif note.startswith('|'):\n            beat_count += 2\n            notes.append(beat_count)\n        elif note.startswith('.'):\n            beat_count += 1\n            notes.append(beat_count)\n        else:\n            print('Wrong note type')\n            raise ValueError('Invalid note type')\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# We can only parse the first 5 beats\n    notes = ['o', 'o|', '.|', 'o', 'o|', '.|', 'o|', '.|', 'o|', '.|']\n    beats = []\n    for note in notes[1:]:\n        beats.append(int(note, 16))\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_length = 2\n    beat_count = 0\n    beat_list = []\n    beat_list.append(0)\n    beat_list.append(0)\n    while len(beat_list) < beat_length:\n        if beat_list[0] == 0:\n            beat_list.append(1)\n        elif beat_list[0] == 1:\n            beat_list.append(2)\n        elif beat_list[0] == 2:\n            beat_list.append(3)\n        elif beat_list[0] == 3:\n            beat_list.append(4)\n        elif beat_list[0] == 4:\n            beat_list.append(0)\n        elif beat_list[0] == 0:\n            beat_list.append(1)\n        elif beat_list[0] == 1:\n            beat_list.append(2)\n        elif beat_list[0] == 2:\n            beat_list.append(3)\n        elif beat_list[0] == 3:\n            beat_list.append(4)\n        elif beat_list[0] == 4:\n            beat_list.append(0)\n        elif beat_list[0] == 0:\n            beat_list.append(1)\n        elif beat_list[0] == 1:\n            beat_list.append(2)\n        elif beat_list[0] == 2:\n            beat_list.append(3)\n        elif beat_list[0] == 3:\n            beat_list.append(4)\n        elif beat_list[0] == 4:\n            beat_list.append(0)\n        elif beat_list[0] ==", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" notes = []\n    beats = []\n    for line in music_string.split('|'):\n        if line.startswith('o'):\n            notes.append(int(line.split('|')[1].split('|')[0]))\n            beats.append(int(line.split('|')[1].split('|')[1].split('|')[0]))\n        elif line.startswith('o|'):\n            notes.append(int(line.split('|')[1].split('|')[0]))\n            beats.append(int(line.split('|')[1].split('|')[0]))\n        elif line.startswith('.|'):\n            notes.append(int(line.split('|')[1].split('|')[0]))\n            beats.append(int(line.split('|')[1].split('|')[0]))\n        else:\n            raise ValueError('Invalid note in music string:'+ line)\n    return [notes, beats]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_lengths = []\n    for i, beat in enumerate(music_string.split(' ')):\n        if beat.isdigit():\n            beat_lengths.append(i * 4)\n        else:\n            beat_lengths.append(beat)\n\n    return beat_lengths", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_lengths = []\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    beat_count = 0\n    for note in music_string:\n        if note.isdigit():\n            beat_count += 1\n            notes.append(beat_count)\n        else:\n            notes.append(note)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    beats = 0\n    for line in music_string.split(' '):\n        if line.startswith('o'):\n            notes.append(beats)\n            beats += 1\n        elif line.startswith('|'):\n            notes.append(beats)\n            beats += 1\n        elif line.startswith('.|'):\n            notes.append(beats)\n            beats += 1\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = 0\n    for beat in music_string.split('|'):\n        if beat.isdigit():\n            beats += 1\n        elif beat.startswith('o'):\n            beats += 4\n        elif beat.startswith('o|'):\n            beats += 2\n        elif beat.startswith('.|'):\n            beats += 1\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_length = 0\n    for beat in music_string:\n        if beat == 'o':\n            beat_length += 4\n        elif beat == 'o|':\n            beat_length += 2\n        elif beat == '.|':\n            beat_length += 1\n        else:\n            raise ValueError(\"Illegal note {} in string {}\".format(beat, music_string))\n\n    return [beat_length for beat in music_string]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    beats = 0\n    for line in music_string.split('|'):\n        if line.startswith('o'):\n            notes.append(beats)\n            beats += 4\n        elif line.startswith('o|'):\n            notes.append(beats)\n            beats += 2\n        elif line.startswith('.|'):\n            notes.append(beats)\n            beats += 1\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for n in music_string:\n        if n.isdigit():\n            notes.append(int(n))\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split(' ')\n    beat_indices = [int(n) for n in notes if n.isdigit()]\n    beat_indices = beat_indices[1:] if len(notes) > 2 else beat_indices\n    beat_indices = [int(i) for i in beat_indices]\n    return beat_indices", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Since this is a special format, we need to parse it. We can use the regex library to do it.\n    regex = r'([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([o|])([", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split('|')\n\n    beat_count = 0\n    beat_length = 0\n    beat_accents = 0\n    note = 0\n\n    while note:\n        if note not in ['o', '|', '.|', 'o']:\n            beat_count += 1\n            beat_length += note.count(' ')\n            note += 1\n        else:\n            beat_count += 1\n            beat_length += note.count(' ')\n            beat_accents += note.count('|')\n            note += 1\n\n    return beat_count, beat_length, beat_accents", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(n) for n in music_string.split('|')]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_lengths = []\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    for string in music_string.split('|'):\n        if string.endswith('|'):\n            beat_lengths.append(string[:-1].strip())\n        elif string.endswith('.'):\n            beat_lengths.append(int(string[:-1].strip()))\n        elif string.endswith('.'):\n            beat_lengths.append(int(string[:-1].strip()))\n        elif string.endswith('o'):\n            beat_lengths.append(4)\n        elif string.endswith('o'):\n            beat_lengths.append(2)\n        elif string.endswith('|'):\n            beat_lengths.append(2)\n        elif string.endswith('.'):\n            beat_lengths.append(1)\n        elif string.endswith('.'):\n            beat_lengths.append(1)\n    return beat_lengths", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" notes = music_string.split(\"|\")\n    beat_table = {\"o\": 4, \".|\": 2, \".||\": 1, \".||o\": 2, \".||o|\": 1, \".||o||\": 1}\n\n    beat_table_labels = {}\n    for beat_table_item in beat_table:\n        beat_table_labels[beat_table_item] = beat_table_item\n\n    beats = []\n    for note in notes[0:-1]:\n        if note == \"|\":\n            beats.append(beat_table_labels[note])\n        else:\n            beats.append(int(note))\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" beat_str = music_string.replace(' ', '')\n    beat_str = beat_str.replace('|', '')\n    beat_str = beat_str.replace('|', '')\n\n    beat_str = beat_str.replace('|', '')\n\n    beat_list = []\n\n    for i in range(0, len(beat_str), 4):\n        beat_list.append(int(beat_str[i], 16))\n\n    return beat_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_count = 0\n    beat_length = 0\n    beat_interval = 0\n    beat_duration = 0\n\n    notes = music_string.split(\"|\")\n    for note in notes[1:]:\n        if note == \"|\":\n            beat_count += 1\n            beat_length += 1\n            beat_interval += 1\n            beat_duration += 1\n        elif note == \"|o|\":\n            beat_count += 2\n            beat_length += 2\n            beat_interval += 2\n            beat_duration += 2\n        elif note == \"|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# get number of beats\n    beats = int(music_string.split('|')[0])\n\n    # get number of beats per note\n    beat_length = int(music_string.split('|')[1])\n\n    # return number of beats in each note\n    return [beat_length for beat_length in beat_lengths]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# This is not very efficient but it works.\n    notes = music_string.split('|')\n    notes = [int(n) for n in notes]\n    if len(notes)!= 4:\n        raise ValueError('Invalid musical notation')\n    beat = notes[0]\n    if beat == 'o':\n        beat = 0\n    if beat == 'o|':\n        beat = 1\n    if beat == '.|':\n        beat = 2\n    return [beat]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    beats = 0\n\n    for line in music_string.split('|'):\n        if not line.strip():\n            continue\n\n        if line.strip().startswith('o'):\n            notes.append(beats)\n            beats += 1\n        elif line.strip().startswith('o|'):\n            notes.append(beats * 2)\n            beats += 1\n        elif line.strip().startswith('.|'):\n            notes.append(beats * 3)\n            beats += 1\n        else:\n            continue\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split(\"o|\")\n    beat_lengths = [int(x) for x in notes]\n    beat_lengths.sort()\n    beat_lengths.reverse()\n    return beat_lengths", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" beat_count = 0\n    beat_length = 0\n    for i in range(0, len(music_string)):\n        if music_string[i] == '|':\n            beat_count += 1\n            beat_length += 1\n        elif music_string[i] == '|o':\n            beat_count += 1\n            beat_length += 2\n        elif music_string[i] == 'o|':\n            beat_count += 1\n            beat_length += 1\n        elif music_string[i] == 'o|o':\n            beat_count += 1\n            beat_length += 1\n        elif music_string[i] == 'o|o|o':\n            beat_count += 1\n            beat_length += 1\n        elif music_string[i] == 'o|o|o|o':\n            beat_count += 1\n            beat_length += 1\n        elif music_string[i] == 'o|o|o|o|o':\n            beat_count += 1\n            beat_length += 1\n        elif music_string[i] == 'o|o|o|o|o|o':\n            beat_count += 1\n            beat_length += 1\n        elif music_string[i] == 'o|o|o|o|o|o|o':\n            beat_count += 1\n            beat_length += 1\n        elif music_string[i] == 'o|o|o|o|o|", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# First, find out how many beats per note is in the string.\n    notes = music_string.split()\n    beats = len(notes)\n\n    # Next, find out how many beats last in each note.\n    beats_per_note = [beats for note in notes if note not in ['.'] and note not in ['o', 'o|', '.|', '|']]\n    beats_per_note.append(beats / 4)\n    beats_per_note.append(beats / 2)\n    beats_per_note.append(beats / 1)\n    beats_per_note.append(beats / 0)\n\n    return [int(note) for note in beats_per_note]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split(' '):\n        note = note.strip()\n        if not note:\n            break\n        beat = int(note.split('|')[0])\n        if beat < 0:\n            break\n        if beat > len(notes) - 1:\n            break\n        notes.append(beat)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_lengths = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1,\n        }\n\n    beats = []\n    for i in music_string.split():\n        if i.startswith('|'):\n            beats.append(beat_lengths[i])\n            beats.append(beat_lengths[i])\n            beats.append(beat_lengths[i])\n            beats.append(beat_lengths[i])\n            beats.append(beat_lengths[i])\n        elif i.startswith('o'):\n            beats.append(beat_lengths[i])\n        elif i.startswith('o|'):\n            beats.append(beat_lengths[i])\n        elif i.startswith('.|'):\n            beats.append(beat_lengths[i])\n        elif i.startswith('.'):\n            beats.append(beat_lengths[i])\n        else:\n            beats.append(0)\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_list = [int(m.strip()) for m in music_string.split('|')]\n\n    return beat_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = music_string.split('|')\n    beat_list = []\n    beat_list.append(0)\n    for beat in music:\n        beat_list.append(int(beat, 16))\n    return beat_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(c) for c in music_string.split('|')]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # We split the string into a list of notes\n    notes = music_string.split('|')\n\n    # We start at the beginning of the notes and work backwards\n    for note in notes:\n        # We count the number of beats and the number of beats that last\n        beat_count = note.count('o') + note.count('o|') + note.count('.|')\n        if beat_count % 4 == 0:\n            # We have a whole note\n            beat_count += 4\n        else:\n            # We have a half note\n            beat_count += 2\n        if beat_count % 2 == 0:\n            # We have a quarter note\n            beat_count += 1\n        else:\n            # We have a quater note\n            beat_count += 1\n        # We add the number of beats that last to the total number of notes\n        notes.append(beat_count)\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# A list of integers corresponding to the number of beats that each note lasts\n    beats = [int(x) for x in music_string.split('|')]\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        notes.append(note.strip())\n        if note.strip() == 'o':\n            notes.append(4)\n        elif note.strip() == 'o|':\n            notes.append(2)\n        elif note.strip() == '.|':\n            notes.append(1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string), 4):\n        if music_string[i:i + 4] == 'o':\n            notes.append(i + 4)\n        elif music_string[i:i + 4] == 'o|':\n            notes.append(i + 4)\n        elif music_string[i:i + 4] == 'o|o':\n            notes.append(i + 4)\n        elif music_string[i:i + 4] == 'o|o|':\n            notes.append(i + 4)\n        elif music_string[i:i + 4] == '.':\n            notes.append(i + 4)\n        elif music_string[i:i + 4] == '.o':\n            notes.append(i + 4)\n        elif music_string[i:i + 4] == '.o|':\n            notes.append(i + 4)\n        elif music_string[i:i + 4] == '.o|o':\n            notes.append(i + 4)\n        elif music_string[i:i + 4] == '.o|o|':\n            notes.append(i + 4)\n        elif music_string[i:i + 4] == '|':\n            notes.append(i + 4)\n        elif music_string[i:i + 4] == '|o':\n            notes.append(i +", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    beats = 0\n    for i in music_string.split('|'):\n        if i == '':\n            continue\n        if i.startswith('.'):\n            beats += 1\n            if beats == 4:\n                notes.append(beats)\n                beats = 0\n            else:\n                beats = 0\n        else:\n            notes.append(beats)\n            beats += 1\n            if beats == 4:\n                notes.append(beats)\n                beats = 0\n            else:\n                beats = 0\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(n) for n in music_string.split('|')]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" beat_lengths = []\n    for beat_number in music_string.split('|'):\n        beat_lengths.append(int(beat_number.strip()))\n\n    return beat_lengths", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_lengths = {}\n    beat_times = {}\n    notes = []\n    for beat in music_string.split('|'):\n        beat_lengths[beat] = int(beat)\n        beat_times[beat] = 0\n        notes.append(beat)\n    return beat_lengths, beat_times, notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    beats = 0\n    for note in music_string:\n        if note == 'o':\n            beats += 4\n        elif note == 'o|':\n            beats += 2\n        elif note == '.|':\n            beats += 1\n        else:\n            notes.append(beats)\n            beats = 0\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    beat_index = 0\n    beat_count = 0\n    beat_length = 0\n    beat_times = []\n    beat_indices = []\n    beat_numbers = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            beat_index = 0\n            beat_length = note.count('o') - 1\n            beat_times.append(beat_length)\n            beat_indices.append(beat_index)\n            beat_numbers.append(str(beat_index))\n        elif note.startswith('|'):\n            beat_index = 0\n            beat_length = note.count('|') - 1\n            beat_times.append(beat_length)\n            beat_indices.append(beat_index)\n            beat_numbers.append(str(beat_index))\n        elif note.startswith('.'):\n            beat_index = 0\n            beat_length = note.count('.') - 1\n            beat_times.append(beat_length)\n            beat_indices.append(beat_index)\n            beat_numbers.append(str(beat_index))\n        else:\n            notes.append(beat_index)\n            beat_index += 1\n    return [int(note) for note in notes]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_lengths = []\n    for beat in music_string:\n        if beat.isdigit():\n            beat_lengths.append(int(beat))\n        elif beat.isalpha():\n            beat_lengths.append(1)\n        elif beat.isdigit() and beat.isdigit():\n            beat_lengths.append(int(beat))\n        elif beat.isalpha() and beat.isalpha():\n            beat_lengths.append(1)\n        elif beat.isdigit() and beat.isdigit() and beat.isdigit():\n            beat_lengths.append(int(beat))\n        elif beat.isalpha() and beat.isalpha() and beat.isdigit() and beat.isdigit():\n            beat_lengths.append(int(beat))\n        elif beat.isdigit() and beat.isdigit() and beat.isdigit() and beat.isdigit():\n            beat_lengths.append(int(beat))\n        elif beat.isdigit() and beat.isdigit() and beat.isdigit() and beat.isdigit():\n            beat_lengths.append(int(beat))\n        elif beat.isdigit() and beat.isdigit() and beat.isdigit() and beat.isdigit()", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = []\n    beats = 0\n    for i in music_string.split('|'):\n        beats += int(i, 16)\n        if beats > 4:\n            beats = 0\n    return [beats for i in music if i!= '0']", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    beat = 0\n    for c in music_string:\n        if c == '|':\n            beat += 1\n        elif c == 'o':\n            notes.append(beat)\n        elif c == 'o|':\n            notes.append(beat / 2)\n        elif c == '.|':\n            notes.append(beat / 4)\n        elif c == 'o':\n            notes.append(beat % 4)\n        elif c == 'o|':\n            notes.append(beat % 2)\n        else:\n            notes.append(0)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 3)\n        elif music_string[i] == 'o|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for i in range(0, len(music_string) - 1):\n        beat = int(music_string[i:i + 1], 16)\n        if beat not in beats:\n            beats.append(beat)\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for note in music_string.split('|'):\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n        else:\n            beats.append(0)\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split(' ')\n    beat_count = 0\n    beat_length = 0\n    for note in notes[:-1]:\n        beat_count += 1\n        if beat_count == 4:\n            beat_length += note.count('.')\n            break\n        else:\n            beat_length += note.count('|')\n    return beat_length, beat_count", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_length = 4\n    beat_num = 0\n\n    for n in music_string:\n        if n.isdigit() and n % 2 == 0:\n            beat_num += 1\n            if beat_num == beat_length:\n                break\n\n    return beat_num", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# First we split the string into a list of notes\n    notes = music_string.split(\" \")\n\n    # Now we convert each note to its respective beat\n    for note in notes:\n        beat = int(note.split(\":\")[0])\n        note = note.split(\":\")[1]\n        beat = beat * 60\n        beat = beat / 10 if beat > 10 else 0\n        note = note * 10\n        beat = beat / 100 if beat > 100 else 0\n        note = note * 100\n        beat = beat / 1000 if beat > 1000 else 0\n        beat = beat / 10000 if beat > 10000 else 0\n        note = note * 10000\n        beat = beat / 100000 if beat > 100000 else 0\n        note = note * 100000\n        beat = beat / 1000000 if beat > 1000000 else 0\n        note = note * 1000000\n        beat = beat / 10000000 if beat > 10000000 else 0\n        note = note * 10000000\n        beat = beat / 1000000000 if beat > 1000000000 else 0\n        note = note * 1000000000\n        beat = beat / 1000000000 if beat > 1000000000 else 0\n        note = note * 1000000000\n        beat = beat / 10000000000 if beat > 10000000000 else 0\n        note = note * 10000000000\n        beat =", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for beat in music_string.split('|'):\n        if beat.count('.') > 1:\n            beats.append(int(beat, 16))\n        else:\n            beats.append(int(beat, 16))\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for char in music_string:\n        if char == 'o':\n            notes.append(4)\n        elif char == 'o|':\n            notes.append(2)\n        elif char == '.|':\n            notes.append(1)\n        else:\n            notes.append(char)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Get the notes\n    notes = music_string.split('|')\n    # Get the lengths of the notes\n    notes_lengths = [len(n) for n in notes]\n    # Get the first note in the string\n    first_note = notes[0]\n    # Get the last note in the string\n    last_note = notes[notes_lengths.index(notes_lengths.pop())]\n    # Get the first beat in the string\n    beat1 = notes_lengths.index(first_note) + 1\n    # Get the last beat in the string\n    beat2 = notes_lengths.pop()\n    # Get the notes of the first beat\n    notes1 = beat1 - beat2\n    # Get the notes of the second beat\n    notes2 = beat2 - beat1\n    # Get the last beat of the string\n    beat3 = notes_lengths.pop()\n    # Get the notes of the third beat\n    notes3 = beat3 - beat2\n    # Get the notes of the fourth beat\n    notes4 = beat4 - beat3\n    # Get the notes of the fifth beat\n    notes5 = beat5 - beat4\n    # Get the notes of the sixth beat\n    notes6 = beat6 - beat5\n    # Get the notes of", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split(\"|\")\n\n    for note in notes[:-1]:\n        if note == \"\":\n            continue\n\n        # the last beat\n        if note[-1] == \"|\":\n            beat = note[:-1]\n            break\n\n        # the first beat\n        if beat[0] == \"|\":\n            beat = beat[1:]\n            break\n\n        # the quarter note\n        if beat[0] == \"|\" and beat[-1] == \"|\":\n            beat = beat[:-1]\n            break\n\n        # the half note\n        if beat[0] == \"|\" and beat[-1] == \"|\" and beat[:-1] == \"|\":\n            beat = beat[:-1]\n            break\n\n        beat = beat[1:]\n        if beat[-1] == \"|\":\n            beat = beat[:-1]\n\n        beat = int(beat)\n\n        # the note is not a quarter note\n        if beat not in (4, 2, 1, 2, 1, 1, 4, 4):\n            raise ValueError(\"invalid note {}\".format(beat))\n\n        return beat", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = music_string.split('|')\n    beat_lengths = []\n    for beat in music:\n        # This is a special case for half notes. Half notes are always two beats long.\n        if beat == 'o|':\n            beat_lengths.append(4)\n        elif beat == 'o|':\n            beat_lengths.append(2)\n        elif beat == '.|':\n            beat_lengths.append(1)\n        else:\n            raise ValueError('Invalid note format.')\n    return beat_lengths", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = music_string.split()\n    beat_num = 0\n    for note in music:\n        if note.isdigit():\n            beat_num += note\n        else:\n            break\n    return beat_num", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_lengths = [\n        int(x) for x in music_string.split('|') if x.isdigit()]\n    beat_lengths = [beat_length for beat_length in beat_lengths]\n    return beat_lengths", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i, note in enumerate(music_string.split()):\n        if note == 'o':\n            notes.append(i)\n            continue\n        if note in ('|', 'o'):\n            notes.append(note)\n            continue\n        if note in ('.|', 'o'):\n            notes.append(note)\n            continue\n        notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for beat in music_string.split('|'):\n        if beat not in ['o', 'o|', '.|', 'o|']:\n            beats.append(0)\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = [ord(c) for c in music_string.split('|')]\n\n    return [int(x) for x in music]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# This is an example of a note that can be parsed\n    # Note that the notation is not actually in the musical notation\n    # We will use this notation later to find out the number of beats\n\n    notes = music_string.split(' ')\n\n    # First, we need to decide how many beats each note last\n    beat_lengths = []\n    for note in notes:\n        if note!= 'o':\n            beat_lengths.append(len(note))\n\n    # We need to decide the number of beats that each note lasts\n    beat_counts = []\n    for beat_length in beat_lengths:\n        for beat_count in beat_length * 2:\n            beat_counts[beat_count] += 1\n\n    # We need to combine the two lists together\n    beat_counts = [beat_counts[b]:b for b in beat_counts]\n\n    # Finally, we need to make sure that each beat is counted at least once\n    beat_counts = [beat_count for b in beat_counts if b > 0]\n\n    return beat_counts", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_lengths = {}\n    beat_lengths[''] = 4\n    beat_lengths['o', '|', '.|', 'o'] = 2\n    beat_lengths['o|', '|', '.|', 'o|'] = 1\n    beat_lengths['o|', '.|', 'o|', 'o|'] = 1\n    beat_lengths['o|', '.|', 'o|', 'o|', 'o'] = 1\n    beat_lengths['o|', '.|', 'o|', 'o|', 'o|', 'o'] = 1\n    beat_lengths['o|', '.|', 'o|', 'o|', 'o|', 'o|'] = 1\n    beat_lengths['o|', '.|', 'o|', 'o|', 'o|', 'o|', 'o'] = 1\n    beat_lengths['o|', '.|', 'o|', 'o|', 'o|', 'o|', 'o'] = 1\n    beat_lengths['o|', '.|'", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split('|')\n    beat_count = 0\n    for note in notes:\n        if note.isdigit():\n            beat_count += 1\n        else:\n            beat_count += 4\n    return beat_count", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for i, note in enumerate(music_string.split(' ')):\n        if i < len(note) - 2:\n            beats.append(i)\n        else:\n            beats.append(note.count('|'))\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = music_string.lower().strip().split('|')\n    beat_length = int(music[0])\n    for note in music[1:]:\n        beat_length -= (note.count('|') + 1) // 2\n    return [beat_length for beat_length in xrange(beat_length)]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split()\n    notes.reverse()\n    beat_count = len(notes)\n    if beat_count == 0:\n        return []\n    beat_count = int(beat_count)\n    if beat_count % 2:\n        return [beat_count]\n    return [beat_count / 2, beat_count % 2]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for beat in music_string.split('|'):\n        beats.append(int(beat.strip()))\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for c in music_string:\n        if c in ['o', 'o|', '.|', 'o|'] or c in ['.', '.', '.', '.', '.'] or c in ['|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|',", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = music_string.replace(' ', '').lower()\n\n    beats = [int(x) for x in music.split('|')]\n    if beats[-1] == 'o':\n        beats.pop()\n    if beats[-1] == 'o|':\n        beats.pop()\n    if beats[-1] == '.|':\n        beats.pop()\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string:\n        return music_string.split('|')\n    else:\n        return []", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_count = []\n    for note in music_string.split('|'):\n        if note.isdigit():\n            beat_count.append(int(note))\n        elif note.isalpha():\n            beat_count.append(1)\n        else:\n            raise ValueError('Invalid note format, please check the note length')\n    return beat_count", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"note = music_string.split('|')[0].strip()\n    if len(note) == 4:\n        return [int(n) for n in note.split('|')[1:]]\n    elif len(note) == 2:\n        return [int(n) for n in note.split('|')[1:]]\n    elif len(note) == 1:\n        return [int(n) for n in note.split('|')[1:]]\n    else:\n        raise ValueError('Invalid note length')", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = [int(n) for n in music_string.split('|')]\n\n    # The last note is always an 'o', so it's always a whole note.\n    return [notes[-1] for notes in notes]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"#\n    # The notation used to represent musical notes is as follows:\n    #\n    #   'o - whole note, lasts four beats\n    #   'o| - half note, lasts two beats\n    #   '.| - quater note, lasts one beat\n    #\n    # The notation we use is as follows:\n    #\n    #   'o - whole note, lasts four beats\n    #   'o| - half note, lasts two beats\n    #   '.| - quater note, lasts one beat\n    #\n    beats = list()\n    for i in range(len(music_string)):\n        if music_string[i] == 'o':\n            beats.append(i)\n            continue\n        elif music_string[i] == 'o|':\n            beats.append(i + 1)\n            continue\n        elif music_string[i] == '.|':\n            beats.append(i + 2)\n            continue\n        elif music_string[i] == 'o|o':\n            beats.append(i + 3)\n            continue\n        elif music_string[i] == '|o|o':\n            beats.append(i + 4)\n            continue\n        else:\n            print('Invalid note')\n            raise ValueError('Invalid note')\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Determine how many beats each note lasts\n    beat_lengths = []\n    beat_lengths.append(0)\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            beat_lengths.append(4)\n        elif music_string[i] == 'o|':\n            beat_lengths.append(2)\n        elif music_string[i] == '.|':\n            beat_lengths.append(1)\n        elif music_string[i] == '.':\n            beat_lengths.append(0)\n    return beat_lengths", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_list = []\n\n    for i in range(len(music_string)):\n        if i == 0:\n            continue\n        elif i == len(music_string) - 1:\n            beat_list.append(i)\n            break\n        elif music_string[i] == 'o':\n            beat_list.append(i + 1)\n            break\n        elif music_string[i] == 'o|':\n            beat_list.append(i + 2)\n            break\n        elif music_string[i] == '.|':\n            beat_list.append(i + 3)\n            break\n\n    return beat_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_counts = []\n    for note in music_string:\n        # convert the note to an int\n        note = int(note, 16)\n        # check if note is even or odd\n        if note % 2!= 0:\n            raise ValueError(\"note is not even: {}\".format(note))\n        # convert the note to a list\n        beat_counts.append(note)\n\n    return beat_counts", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" beat_size = 3\n    beat_count = 0\n    beats = []\n\n    for note in music_string:\n        if note.isdigit():\n            beat_size = int(note)\n            beat_count += 1\n        elif note == 'o|':\n            beat_size = 4\n            beat_count += 1\n        elif note == 'o|':\n            beat_size = 2\n            beat_count += 1\n        elif note == '.|':\n            beat_size = 1\n            beat_count += 1\n        elif note == '.|':\n            beat_size = 1\n            beat_count += 1\n        elif note == 'o':\n            beat_size = 4\n            beat_count += 1\n        else:\n            raise ValueError(\"Unknown note %s\" % note)\n\n    return beat_size, beat_count", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_count = 0\n    beat_length = 0\n    notes = music_string.split('.')[1:]\n\n    for note in notes[1:-1]:\n        if note == 'o':\n            beat_count += 1\n            beat_length += 4\n        elif note == 'o|':\n            beat_count += 1\n            beat_length += 2\n        elif note == '.|':\n            beat_count += 1\n            beat_length += 1\n        elif note == 'o':\n            beat_count += 1\n            beat_length += 4\n        elif note == 'o|':\n            beat_count += 1\n            beat_length += 2\n        elif note == '.|':\n            beat_count += 1\n            beat_length += 1\n        elif note == 'o':\n            beat_count += 1\n            beat_length += 4\n        elif note == 'o|':\n            beat_count += 1\n            beat_length += 2\n        elif note == '.|':\n            beat_count += 1\n            beat_length += 1\n        elif note == 'o':\n            beat_count += 1\n            beat_length += 4\n        elif note == 'o|':\n            beat_count += 1\n            beat_length += 2\n        elif note == '.|':\n            beat_count += 1\n            beat_length += 1\n        elif note == 'o':\n            beat_count += 1\n            beat_length += 4", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for note in music_string.split(' '):\n        if note.isdigit():\n            beats.append(int(note))\n        elif note.startswith('.'):\n            beats.append(note[1:].isdigit())\n        else:\n            beats.append(note)\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return []", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split(' '):\n        if note.startswith('o'):\n            notes.append(note.count('o') + 1)\n        elif note.startswith('o|'):\n            notes.append(note.count('o') + 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('o') + 3)\n        else:\n            notes.append(note.count('.') + 1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note[2:].count('.') - 4)\n        elif note.startswith('o|'):\n            notes.append(note[2:].count('.') - 2)\n        elif note.startswith('.|'):\n            notes.append(note[2:].count('.') - 1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(n) for n in music_string.split()]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string:\n        beat_count = []\n        for i in range(0, len(music_string) - 1):\n            if music_string[i] == 'o':\n                beat_count.append(4)\n            elif music_string[i] == 'o|':\n                beat_count.append(2)\n            elif music_string[i] == '.|':\n                beat_count.append(1)\n            elif music_string[i] == 'o|':\n                beat_count.append(2)\n            elif music_string[i] == 'o':\n                beat_count.append(1)\n            else:\n                raise ValueError(\"Unknown musical notation!\")\n        return beat_count", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if len(note) == 4:\n            notes.append(note)\n        elif len(note) == 2:\n            notes.append(note)\n        elif len(note) == 1:\n            notes.append(note)\n        else:\n            raise ValueError('Invalid musical note.')\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split('|')\n    notes = [int(x) for x in notes if x]\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# If the string has a period, split it into notes, otherwise, just get the notes\n    notes = music_string.split('|')\n    # Now we have a list of notes, we need to convert them to beats\n    beat_list = []\n    for note in notes[0:len(notes)-1]:\n        beat_list.append(int(note))\n    return beat_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split(\"|\")\n    beat_length = len(notes)\n    beat_length = beat_length * 4 if beat_length % 4 else beat_length\n\n    beats = [note for note in notes if note not in (\".\", \".\")]\n    beats = [int(note) for note in beats]\n    beats = [beat for beat in beats if beat]\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = [\n        int(n) for n in music_string.split(' ') if n.isdigit()\n    ]\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for beat in music_string.split('|'):\n        if beat.isdigit():\n            beats.append(int(beat))\n        else:\n            beats.append(beat)\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" beat_list = []\n    for note in music_string.split('|'):\n        beat_list.append(int(note.split('|')[0]))\n\n    return beat_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_count = 0\n    beat_length = 0\n    note_count = 0\n    beats = []\n\n    while beat_count < len(music_string) and beat_length < len(music_string[beat_count]):\n        if music_string[beat_count] == 'o':\n            beat_count += 1\n            beat_length += 1\n            note_count += 1\n            beats.append(beat_count)\n        elif music_string[beat_count] == 'o|':\n            beat_count += 1\n            beat_length += 1\n            note_count += 1\n            beats.append(beat_count)\n        elif music_string[beat_count] == '.|':\n            beat_count += 1\n            beat_length += 1\n            note_count += 1\n            beats.append(beat_count)\n        elif music_string[beat_count] == 'o':\n            beat_count += 1\n            beat_length += 1\n            note_count += 1\n            beats.append(beat_count)\n        elif music_string[beat_count] == 'o|':\n            beat_count += 1\n            beat_length += 1\n            note_count += 1\n            beats.append(beat_count)\n        elif music_string[beat_count] == '.|':\n            beat_count += 1\n            beat_length += 1\n            note_count += 1\n            beats.append(beat_count)\n        elif music_string[beat_count", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for n in music_string:\n        if n == 'o':\n            beats.append(0)\n        elif n == 'o|':\n            beats.append(1)\n        elif n == '.|':\n            beats.append(2)\n        elif n == 'o|o':\n            beats.append(4)\n        elif n == 'o|o|':\n            beats.append(2)\n        elif n == 'o|o|o':\n            beats.append(4)\n        elif n == 'o|o|o|o':\n            beats.append(4)\n        elif n == 'o|o|o|o|o':\n            beats.append(4)\n        elif n == 'o|o|o|o|o|o':\n            beats.append(4)\n        elif n == 'o|o|o|o|o|o|o':\n            beats.append(4)\n        elif n == 'o|o|o|o|o|o|o|o':\n            beats.append(4)\n        elif n == 'o|o|o|o|o|o|o|o|o|o':\n            beats.append(4)\n        elif n == 'o|o|o|", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Use the first beat as the start\n    start = 0\n    # Use the last beat as the end\n    end = len(music_string) - 1\n\n    # Get the beats\n    beats = music_string[start:end].split()\n    # Convert to integer\n    for beat in beats:\n        if beat.isdigit():\n            return [int(beat)]\n    return []", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = [int(b) for b in music_string.split('|')]\n    return [beats[0], beats[1], beats[2], beats[3], beats[4], beats[5], beats[6], beats[7], beats[8]]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for c in music_string:\n        if c == 'o':\n            notes.append(4)\n        elif c == 'o|':\n            notes.append(2)\n        elif c == '.|':\n            notes.append(1)\n        else:\n            notes.append(0)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for ch in music_string:\n        if ch.isdigit():\n            beats.append(ch)\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for ch in music_string:\n        if ch in ('o', 'o', 'o', 'o', '|'):\n            notes.append(4)\n        elif ch in ('|', 'o', 'o', 'o', 'o', '.', '.', '.'):\n            notes.append(2)\n        elif ch in ('.', '.', '.', '.', '.', '.', '.'):\n            notes.append(1)\n        else:\n            raise ValueError(\"Invalid note format\")\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for c in music_string:\n        if c == 'o':\n            beats.append(4)\n        elif c == 'o|':\n            beats.append(2)\n        elif c == '.|':\n            beats.append(1)\n        elif c == 'o|o|':\n            beats.append(2)\n        elif c == 'o|o|o|':\n            beats.append(1)\n        elif c == 'o|o|o|o|o|o|':\n            beats.append(4)\n        elif c == 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for i in music_string.split('|'):\n        if i.isdigit():\n            beats.append(int(i))\n        else:\n            beats.append(0)\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Note that the string that we want to parse must have at least two beats (otherwise it will be empty)\n    beats = 0\n    for line in music_string.split('\\n'):\n        if len(line) < 2:\n            continue\n        if line[0] == 'o':\n            beats += 1\n        elif line[0] == 'o|':\n            beats += 2\n        elif line[0] == '.|':\n            beats += 3\n        else:\n            continue\n    return [beats for line in music_string.split('\\n')]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for n in music_string.split(\"|\"):\n        if n.isdigit():\n            notes.append(n)\n        elif n.isalpha():\n            notes.append(n.upper())\n        else:\n            raise ValueError(\"Invalid note format\")\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_list = []\n    for beat in music_string.split('|'):\n        beat_list.append(int(beat.strip()) - 1)\n\n    return beat_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i, b in enumerate(music_string):\n        if b == 'o':\n            notes.append(i * 4)\n        elif b == 'o|':\n            notes.append(i * 2)\n        elif b == '.|':\n            notes.append(i * 1)\n        elif b == 'o|o':\n            notes.append(i * 4)\n        elif b == 'o|o|':\n            notes.append(i * 2)\n        elif b == 'o|o|o':\n            notes.append(i * 1)\n        elif b == 'o|o|o|o':\n            notes.append(i * 4)\n        elif b == 'o|o|o|o|o':\n            notes.append(i * 2)\n        elif b == 'o|o|o|o|o|o':\n            notes.append(i * 1)\n        elif b == 'o|o|o|o|o|o|o|o|o':\n            notes.append(i * 4)\n        elif b == 'o|o|o|o|o|o|o|o|o|o|o':\n            notes.append(i * 2)\n        elif b == '", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_length = 1\n    notes = music_string.split('|')\n\n    for note in notes:\n        if note.startswith('o'):\n            beat_length = 4\n            beat_length += 4 if note.endswith('o') else 1\n        elif note.startswith('|'):\n            beat_length = 2\n            beat_length += 2 if note.endswith('|') else 1\n        else:\n            beat_length = 1\n\n    return [beat_length for beat_length in int(note.split('|')[-1])]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split(' ')\n    beats = [int(note) for note in notes]\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# This is the equivalent of the '|', '|', '|', '|' in ASCII notation\n    notes = ['o', 'o', 'o', 'o', 'o', 'o', 'o|', 'o', 'o', 'o|', 'o', 'o|', 'o', 'o|', 'o', 'o|', 'o', 'o|', 'o', 'o|', 'o', 'o|', 'o', 'o|', 'o', 'o|', 'o', 'o|', 'o', 'o|', 'o', 'o|', 'o', 'o|', 'o', 'o|', 'o', 'o|', 'o', 'o|', 'o', 'o|', 'o', 'o|', 'o', 'o|', 'o', 'o|', 'o', 'o|', 'o', 'o|', 'o', 'o|', 'o', 'o|', 'o', 'o|', '", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split(' ')\n    notes = [int(n) for n in notes]\n    if len(notes)!= 4:\n        raise ValueError('Invalid musical notation')\n    beat_count = [int(n) for n in notes[1:]]\n    beat_count = [beat_count[-1] if beat_count else None]\n    return beat_count", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_index = 0\n    beat_length = 0\n    notes = []\n    for note in music_string:\n        if note == '|':\n            beat_index += 1\n            beat_length += 1\n        else:\n            beat_index += 1\n            beat_length += 1\n            notes.append(beat_index)\n            notes.append(beat_length)\n            notes.append(note)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_counts = []\n    beat_indices = []\n    beat_index = 0\n    for note in music_string:\n        if note == 'o':\n            beat_counts[beat_index] = beat_indices.append(beat_index)\n            beat_index += 1\n            continue\n\n        elif note == 'o|':\n            beat_counts[beat_index] += 1\n            beat_index += 1\n            continue\n\n        elif note == '.|':\n            beat_counts[beat_index] += 2\n            beat_index += 1\n            continue\n\n        elif note == 'o|o|':\n            beat_counts[beat_index] += 2\n            beat_index += 1\n            continue\n\n        elif note == 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = music_string.split('|')\n    notes = []\n    for note in music:\n        if note.startswith('o'):\n            notes.append(note.count('|') - 4)\n        elif note.startswith('o|'):\n            notes.append(note.count('|') - 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('|') - 1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # First, we need to split the string into individual notes.\n    notes = music_string.split(' ')\n\n    # We also need to convert each note into an integer.\n    for note in notes[1:]:\n        note = int(note)\n\n    # Finally, we need to convert each beat into an integer.\n    for beat in range(0, len(notes) - 1):\n        beat = int(notes[beat])\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split(' '):\n        if note.startswith('o'):\n            notes.append(note.count('o'))\n        elif note.startswith('|'):\n            notes.append(note.count('|'))\n        elif note.startswith('|'):\n            notes.append(note.count('|'))\n        elif note.startswith('|'):\n            notes.append(note.count('|'))\n        elif note.startswith('o'):\n            notes.append(note.count('o'))\n        elif note.startswith('|'):\n            notes.append(note.count('|'))\n        elif note.startswith('|'):\n            notes.append(note.count('|'))\n        elif note.startswith('|'):\n            notes.append(note.count('|'))\n        elif note.startswith('|'):\n            notes.append(note.count('|'))\n        elif note.startswith('|'):\n            notes.append(note.count('|'))\n        elif note.startswith('|'):\n            notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    notes = []\n    for i in music_string.split('|'):\n        if i.startswith('o'):\n            beats.append(i[2:].count('.') + 1)\n        elif i.startswith('o|'):\n            beats.append(i[2:].count('.') + 2)\n        elif i.startswith('.|'):\n            beats.append(i[2:].count('.') + 3)\n        else:\n            notes.append(i[2:].count('.') + 1)\n    return beats, notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_count = 0\n    notes = []\n    for note in music_string.split('|'):\n        if not note.startswith('o'):\n            continue\n        beat_count += 1\n        notes.append(int(note.strip()))\n    return beat_count, notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string:\n        if note == 'o':\n            notes.append(4)\n        elif note == 'o|':\n            notes.append(2)\n        elif note == '.|':\n            notes.append(1)\n        else:\n            notes.append(0)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_indices = []\n    for beat in music_string:\n        if beat in ('o', 'o|', '.|'):\n            beat_indices.append(int(beat))\n        elif beat in ('|', '|'):\n            beat_indices.append(-1)\n    return beat_indices", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_count = 0\n    beats = []\n    notes = []\n    beats_count = 0\n    notes_count = 0\n    beat = 0\n    for c in music_string:\n        if c == 'o':\n            beat_count += 1\n            beats.append(beat)\n            beat = 0\n        elif c == 'o|':\n            beats_count += 1\n            beats.append(beat)\n            beat = 0\n        elif c == '.|':\n            beats_count += 1\n            beats.append(beat)\n            beat = 0\n        elif c == '.':\n            beats_count += 1\n            beats.append(beat)\n            beat = 0\n        else:\n            beats_count += 1\n            beats.append(beat)\n            beat = 0\n    for c in music_string:\n        if c == 'o':\n            beat_count += 1\n            beats.append(beat)\n            beat = 0\n        elif c == 'o|':\n            beats_count += 1\n            beats.append(beat)\n            beat = 0\n        elif c == '.|':\n            beats_count += 1\n            beats.append(beat)\n            beat = 0\n        elif c == '.':\n            beats_count += 1\n            beats.append(beat)\n            beat = 0\n        else:\n            beats_count += 1\n            beats.append(beat)\n            beat = 0\n    return [", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for ch in music_string:\n        if ch == '|':\n            beats.append(len(beats) - 1)\n        elif ch == 'o|':\n            beats.append(len(beats) - 1)\n            beats[-1] += 4\n        elif ch == 'o||':\n            beats.append(len(beats) - 1)\n            beats[-1] += 2\n            beats[-1] += 4\n        elif ch == '.|':\n            beats.append(len(beats) - 1)\n            beats[-1] += 1\n        elif ch == '.||':\n            beats.append(len(beats) - 1)\n            beats[-1] += 1\n        else:\n            beats.append(len(beats) - 1)\n            beats[-1] = 0\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string.startswith('o'):\n        beat_length = 4\n    elif music_string.startswith('|'):\n        beat_length = 2\n    elif music_string.startswith('.|'):\n        beat_length = 1\n    else:\n        raise ValueError(\"Invalid music string\")\n    return [int(n) for n in music_string[2:] if n!='']", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    while beats.count('') < len(music_string):\n        beats.append(int(music_string.replace(' ', ''), 16))\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if not music_string:\n        return []\n    music = music_string.lower().split()\n    beat_length = int(music[0])\n    notes = []\n    for i in range(beat_length):\n        if music[i] == 'o':\n            notes.append(i)\n        elif music[i] == 'o|':\n            notes.append(i * 2)\n        elif music[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = 0\n    for ch in music_string:\n        if ch == 'o':\n            beats += 4\n        elif ch == 'o|':\n            beats += 2\n        elif ch == '.|':\n            beats += 1\n        elif ch == 'o':\n            break\n    return [beats]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split('|')\n    beat_count = len(notes)\n\n    if beat_count == 0:\n        return [note for note in notes if note.isdigit()]\n\n    if beat_count == 1:\n        return [note for note in notes if note == 'o']\n\n    if beat_count == 2:\n        return [note for note in notes if note == 'o|']\n\n    if beat_count == 3:\n        return [note for note in notes if note == 'o|.|']\n\n    return [note for note in notes if note.isdigit()]\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.isdigit():\n            notes.append(int(note))\n        else:\n            notes.append(note.ljust(4, '0'))\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for n in music_string.split(' '):\n        if n.isdigit():\n            notes.append(n)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = music_string.split(' ')\n    beat_count = 0\n    beat_length = 0\n    for note in music:\n        if note.isdigit():\n            beat_count += int(note)\n            beat_length += note\n        else:\n            beat_count += 1\n            beat_length += note.ljust(4, '0')\n\n    return beat_count, beat_length", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split()\n    if len(notes)!= 5:\n        raise ValueError(\"Invalid musical note format\")\n    beat_length = notes[0]\n    for i in range(1, len(notes)):\n        if (notes[i]!= 'o'):\n            raise ValueError(\"Invalid musical note format\")\n        beat_length += 4 - i\n    return [beat_length for beat_length in range(4)]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for n in music_string.split(' '):\n        if n[0] == 'o':\n            notes.append(n[1])\n            notes.append(n[1])\n            notes.append(n[1])\n            notes.append(n[1])\n        elif n[0] == 'o|':\n            notes.append(n[1])\n            notes.append(n[1])\n            notes.append(n[1])\n            notes.append(n[1])\n        elif n[0] == '.|':\n            notes.append(n[1])\n            notes.append(n[1])\n            notes.append(n[1])\n            notes.append(n[1])\n        else:\n            raise Exception('Invalid note format')\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i, c in enumerate(music_string):\n        if c == 'o':\n            notes.append(i)\n        elif c == 'o|':\n            notes.append(i + 1)\n        elif c == '.|':\n            notes.append(i * 2)\n        elif c == '.':\n            notes.append(i * 4)\n        elif c == 'o|':\n            notes.append(i * 4 + 1)\n        elif c == 'o':\n            notes.append(i * 4 + 1 + 1)\n        elif c == 'o|':\n            notes.append(i * 4 + 2)\n        elif c == '.|':\n            notes.append(i * 4 + 2 + 1)\n        elif c == '.':\n            notes.append(i * 4 + 2 + 2)\n        elif c == 'o|':\n            notes.append(i * 4 + 3)\n        elif c == 'o|':\n            notes.append(i * 4 + 3 + 1)\n        elif c == '.|':\n            notes.append(i * 4 + 3 + 1 + 1)\n        elif c == '.':\n            notes.append(i * 4 + 3 + 2)\n        elif c == 'o|':\n            notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for line in music_string.splitlines():\n        if line.startswith('o'):\n            notes.append(int(line.split('|')[1]))\n        elif line.startswith('o|'):\n            notes.append(int(line.split('|')[1]))\n        elif line.startswith('.|'):\n            notes.append(int(line.split('|')[1]))\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_lengths = []\n    for note in music_string.split(' '):\n        beat_length = note.count('|')\n        beat_lengths.append(beat_length)\n    return beat_lengths", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    beats = []\n    for line in music_string.splitlines():\n        if line.startswith('|'):\n            notes.append(line[2:])\n            beats.append(line.count('|'))\n        elif line.startswith('o'):\n            notes.append(line[2:])\n            beats.append(line.count('o'))\n        elif line.startswith('o|'):\n            notes.append(line[2:])\n            beats.append(line.count('o|'))\n        elif line.startswith('.|'):\n            notes.append(line[2:])\n            beats.append(line.count('.|'))\n        else:\n            notes.append(line.count(' '))\n\n    return [int(n) for n in notes]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Split music into parts\n    parts = music_string.split(' ')\n\n    # Get beat number for each note\n    beat_counts = {}\n    for part in parts:\n        if part.startswith('o'):\n            beat_counts[part[1:]] += 1\n        elif part.startswith('o|'):\n            beat_counts[part[1:]] += 1\n        elif part.startswith('.|'):\n            beat_counts[part[1:]] += 1\n        else:\n            print('Error while parsing music: {}'.format(part))\n\n    # Return list of beat numbers\n    return beat_counts.values()", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_table = {'o': 4, 'o|': 2, '.|': 1, 'o|o|': 1, 'o|o|o|o|o|o': 4}\n    return [int(b) for b in beat_table.get(n, 0) for n in music_string.split(' ')]\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"note_list = []\n    for i in range(0, len(music_string)):\n        if i == len(music_string) - 1:\n            continue\n        if music_string[i] == 'o':\n            note_list.append(i)\n            continue\n        if music_string[i] in ['o|', '.|', '|o'] and i!= len(music_string) - 1:\n            note_list.append(i - 1)\n            continue\n        if music_string[i] == 'o|':\n            note_list.append(i - 1)\n            continue\n        if music_string[i] == 'o|':\n            note_list.append(i - 1)\n            continue\n        if music_string[i] == 'o|':\n            note_list.append(i - 1)\n            continue\n        if music_string[i] == 'o|':\n            note_list.append(i - 1)\n            continue\n        if music_string[i] == 'o|':\n            note_list.append(i - 1)\n            continue\n        if music_string[i] == 'o|':\n            note_list.append(i - 1)\n            continue\n        if music_string[i] == 'o|':\n            note_list.append(i - 1)\n            continue\n        if music_string[i] == 'o|':\n            note_list.append(i -", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_table = {'o': 4, 'o|': 2, '.|': 1, 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for n in music_string.split(' '):\n        if n == 'o':\n            beats.append(4)\n        elif n == 'o|':\n            beats.append(2)\n        elif n == '.|':\n            beats.append(1)\n        else:\n            beats.append(int(n))\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_list = []\n    for beat in music_string.split('|'):\n        beat = beat.strip()\n        if beat == '':\n            continue\n        beat_list.append(int(beat))\n    return beat_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Note: We need to handle the case where the string is incomplete.\n    # There are two possible cases to consider:\n    # 1. The string is completely empty. In this case, we return the number of beats.\n    # 2. The string is not complete, but contains a string that is not an empty string.\n    # In this case, we return the number of beats that would be missing.\n\n    if music_string.startswith('|'):\n        notes = music_string[2:].split()\n        return [int(note) for note in notes]\n    elif music_string.startswith('|') and music_string.endswith('|'):\n        notes = music_string[1:-1].split()\n        return [int(note) for note in notes]\n    else:\n        # If the string is not complete, then we need to find the number of beats that would be missing.\n        notes = music_string.split()\n        for note in notes:\n            if note.startswith('.'):\n                notes.remove(note)\n                break\n        return [int(note) for note in notes]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" notes = []\n    beat = 0\n    i = 0\n    beat_count = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            beat = beat_count\n            notes.append(beat)\n        elif music_string[i] == 'o|':\n            beat_count = beat_count + 1\n            notes.append(beat_count)\n        elif music_string[i] == '.|':\n            beat_count = beat_count + 2\n            notes.append(beat_count)\n        elif music_string[i] == 'o':\n            beat_count = beat_count + 3\n            notes.append(beat_count)\n        elif music_string[i] == 'o|':\n            beat_count = beat_count + 4\n            notes.append(beat_count)\n        elif music_string[i] == '.|':\n            beat_count = beat_count + 5\n            notes.append(beat_count)\n        elif music_string[i] == 'o':\n            beat_count = beat_count + 6\n            notes.append(beat_count)\n        elif music_string[i] == 'o|':\n            beat_count = beat_count + 7\n            notes.append(beat_count)\n        elif music_string[i] == '.|':\n            beat_count = beat_count + 8\n            notes.append(beat_count)\n        elif music_string[i] == 'o':\n            beat_count = beat", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = music_string.lower()\n    notes = music.count('|')\n    return [int(x) for x in notes]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.replace('.','').replace('|','').replace('|','').replace('|','').replace('.','').replace('|','').replace('|','').replace('|','').replace('.','').replace('|','')\n\n    return [int(x) for x in music_string.split('|')]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for ch in music_string:\n        if ch == 'o':\n            notes.append(4)\n        elif ch == 'o|':\n            notes.append(2)\n        elif ch == '.|':\n            notes.append(1)\n        else:\n            notes.append(0)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split('|')\n    notes = notes[0].strip().split('|')\n    notes = notes[1:]\n    notes = [int(note) for note in notes]\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    beat = 0\n    for beat in range(4):\n        if beat not in note_list:\n            notes.append(beat)\n            beat += 1\n        else:\n            if note_list[beat] == 'o':\n                note_list[beat] = 'o|'\n            elif note_list[beat] == 'o|':\n                note_list[beat] = 'o|'\n            elif note_list[beat] == 'o|':\n                note_list[beat] = 'o|'\n            elif note_list[beat] == 'o|':\n                note_list[beat] = 'o|'\n            elif note_list[beat] == 'o|':\n                note_list[beat] = 'o|'\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = [int(beat) for beat in music_string.split(' ')]\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string.endswith('.'):\n        music_string = music_string[:-1]\n    beats = 0\n    for _, note in enumerate(music_string.split('|')):\n        if note.endswith('|'):\n            beats += 1\n        else:\n            beats += 4\n    return [beats]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.isdigit():\n            notes.append(int(note))\n        else:\n            notes.append(note.capitalize())\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(n) for n in music_string.split('|') if n]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for note in music_string:\n        if note == 'o':\n            beats.append(4)\n        elif note in ['o|', '.|', 'o|', '.|', 'o|', '.|', 'o|', '.|', 'o|', '.|', 'o|']:\n            beats.append(2)\n        elif note in ['o|', '.|', 'o|', '.|', 'o|', '.|', 'o|', '.|', 'o|', '.|', 'o|', '.|', 'o|', '.|', 'o|', '.|', 'o|', '.|', 'o|', '.|', 'o|', '.|', 'o|', '.|', 'o|', '.|', 'o|', '.|', 'o|', '.|', 'o|', '.|', 'o|', '.|', 'o|', '.|', 'o|', '.|", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = 0\n    notes = []\n    for line in music_string.split('\\n'):\n        if line.startswith('o'):\n            beats += 1\n            notes.append(line[2:])\n        elif line.startswith('o|'):\n            beats += 1\n            notes.append(line[2:])\n        elif line.startswith('.|'):\n            beats += 1\n            notes.append(line[2:])\n        else:\n            notes.append(line)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == '|':\n            notes.append(i)\n        elif music_string[i] == 'o':\n            notes.append(i * 2)\n        elif music_string[i] == 'o|':\n            notes.append(i * 4)\n        elif music_string[i] == '.|':\n            notes.append(i * 3)\n        else:\n            notes.append(i)\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for ch in music_string.split(' '):\n        if ch.isdigit():\n            beats.append(int(ch))\n        else:\n            beats.append(1)\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" notes = []\n    for beat in music_string.split('|'):\n        if beat.startswith('o'):\n            notes.append(beat.count('|') - 2)\n        elif beat.startswith('o|'):\n            notes.append(beat.count('|') - 4)\n        elif beat.startswith('.|'):\n            notes.append(beat.count('|') - 2)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_counts = []\n    for line in music_string.splitlines():\n        if line[0] == 'o':\n            beat_counts.append(4)\n        elif line[0] == 'o|':\n            beat_counts.append(2)\n        elif line[0] == '.|':\n            beat_counts.append(1)\n        elif line[0] == '.':\n            beat_counts.append(0)\n    return beat_counts", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split(' ')\n\n    if len(notes)!= 6:\n        raise ValueError(\"Music string must consist of 6 notes: '{}'\".format(notes))\n\n    beat_length = int(notes[0])\n    if beat_length!= 4:\n        raise ValueError(\"Beat length must be 4 ({})\".format(beat_length))\n\n    beat_length = int(notes[1])\n    if beat_length!= 2:\n        raise ValueError(\"Beat length must be 2 ({})\".format(beat_length))\n\n    beat_length = int(notes[2])\n    if beat_length!= 1:\n        raise ValueError(\"Beat length must be 1 ({})\".format(beat_length))\n\n    beat_length = int(notes[3])\n    if beat_length!= 0:\n        raise ValueError(\"Beat length must be 0 ({})\".format(beat_length))\n\n    beat_length = int(notes[4])\n    if beat_length!= 0:\n        raise ValueError(\"Beat length must be 0 ({})\".format(beat_length))\n\n    return [beat_length]\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" beat_length = 4\n    beat_length = beat_length - 1 if beat_length < 0 else beat_length\n    beat_length = int(beat_length)\n\n    beats = []\n    for note in music_string.split(' '):\n        if note.isdigit():\n            beats.append(int(note))\n        elif note.isalnum():\n            beats.append(note.upper())\n        else:\n            raise ValueError(\"Invalid note format\")\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_count = 0\n    notes = []\n    for line in music_string.splitlines():\n        if line.startswith(' '):\n            beat_count += 1\n        if line.startswith('|'):\n            beat_count += 1\n        if line.startswith('o'):\n            beat_count += 1\n            notes.append(beat_count)\n        elif line.startswith('.'):\n            beat_count += 1\n            notes.append(beat_count)\n        elif line.startswith('.'):\n            beat_count += 1\n            notes.append(beat_count)\n        else:\n            notes.append(beat_count)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_list = []\n    beat_index = 0\n    for line in music_string.split('|'):\n        if line.startswith('o'):\n            beat_list.append(beat_index)\n            beat_index += 4\n        elif line.startswith('o|'):\n            beat_list.append(beat_index)\n            beat_index += 2\n        elif line.startswith('.|'):\n            beat_list.append(beat_index)\n            beat_index += 1\n\n    return beat_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = []\n    for i in range(1, len(music_string) - 1):\n        if music_string[i] == 'o':\n            music.append(i - 1)\n            continue\n        if music_string[i] == 'o|':\n            music.append(i - 1)\n            music.append(i - 1)\n            music.append(i - 1)\n            music.append(i - 1)\n            music.append(i - 1)\n            music.append(i - 1)\n            music.append(i - 1)\n            music.append(i - 1)\n            music.append(i - 1)\n            music.append(i - 1)\n            music.append(i - 1)\n            music.append(i - 1)\n            music.append(i - 1)\n            music.append(i - 1)\n            music.append(i - 1)\n            music.append(i - 1)\n            music.append(i - 1)\n            music.append(i - 1)\n            music.append(i - 1)\n            music.append(i - 1)\n            music.append(i - 1)\n            music.append(i - 1)\n            music.append(i - 1)\n            music.append(i - 1)\n            music.append(i - 1)\n            music.append(i", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    beats = []\n    for note in music_string.split(' '):\n        if note.isdigit():\n            beats.append(note)\n        else:\n            notes.append(note)\n    return [int(beat) for beat in beats]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = music_string.split('|')\n    beat = int(music[0])\n    note = int(music[1:])\n    return beat, note", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beatlist = []\n    for i in range(0, len(music_string)):\n        if i == 0:\n            beatlist.append(i)\n        elif music_string[i] == 'o':\n            beatlist.append(i * 4)\n        elif music_string[i] == 'o|':\n            beatlist.append(i * 2)\n        elif music_string[i] == '.|':\n            beatlist.append(i * 1)\n        elif music_string[i] == 'o':\n            beatlist.append(i * 4)\n        elif music_string[i] == 'o|':\n            beatlist.append(i * 2)\n        elif music_string[i] == '.|':\n            beatlist.append(i * 1)\n        elif music_string[i] == 'o|':\n            beatlist.append(i * 4)\n        elif music_string[i] == 'o|':\n            beatlist.append(i * 2)\n        elif music_string[i] == '.|':\n            beatlist.append(i * 1)\n        elif music_string[i] == 'o':\n            beatlist.append(i * 4)\n        elif music_string[i] == 'o|':\n            beatlist.append(i * 2)\n        elif music_string[i] == '.|':\n            beatlist.append(i * 1)\n        elif music_string", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for beat in music_string.split('|'):\n        beat = beat.strip()\n        if beat.startswith('o'):\n            notes.append(int(beat[2:]))\n        elif beat.startswith('o|'):\n            notes.append(int(beat[2:]))\n        elif beat.startswith('.|'):\n            notes.append(int(beat[2:]))\n        else:\n            raise ValueError('Invalid beat: %s' % beat)\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    beat = 0\n    for n in music_string:\n        if n == 'o':\n            beat += 4\n            notes.append(beat)\n        elif n == 'o|':\n            beat += 2\n            notes.append(beat)\n        elif n == '.|':\n            beat += 1\n            notes.append(beat)\n        else:\n            raise ValueError('Invalid note %r' % n)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string.endswith('.'):\n        music_string = music_string[:-1]\n    beats = [int(beat) for beat in music_string.split('|')]\n    if len(beats)!= 5:\n        raise ValueError(\"Expected 5 beats, got {}\".format(len(beats)))\n    return [int(beat) for beat in beats]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_lengths = [\n        (0, 'o'),\n        (1, 'o|'),\n        (2, '.|'),\n        (3, 'o|'),\n        (4, '.'),\n    ]\n    beat_lengths = [(i, b) for i, b in beat_lengths for b in b]\n\n    beats = [\n        int(b) for i, b in enumerate(beat_lengths)\n        if b in range(0, 4)]\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_length = 0\n    beat_division = 0\n    note_type = 0\n    beat = 0\n    for note in music_string.split('|'):\n        if note_type == 1:\n            beat_length += int(note.split()[0])\n            beat_division += int(note.split()[1])\n            note_type = 0\n        elif note_type == 2:\n            beat_length += int(note.split()[0])\n            beat_division += int(note.split()[1])\n            note_type = 0\n        elif note_type == 3:\n            beat_length += int(note.split()[0])\n            beat_division += int(note.split()[1])\n            note_type = 0\n        elif note_type == 4:\n            beat_length += int(note.split()[0])\n            beat_division += int(note.split()[1])\n            note_type = 0\n        elif note_type == 5:\n            beat_length += int(note.split()[0])\n            beat_division += int(note.split()[1])\n            note_type = 0\n        elif note_type == 6:\n            beat_length += int(note.split()[0])\n            beat_division += int(note.split()[1])\n            note_type = 0\n        elif note_type == 7:\n            beat_length += int(note.split()[0])", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for line in music_string.split(' '):\n        beats.append(int(line.strip()))\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" beats = []\n    for i in range(0, len(music_string)):\n        if i == 0:\n            beats.append(i)\n        elif music_string[i] == 'o':\n            beats.append(i * 2)\n        elif music_string[i] == 'o|':\n            beats.append(i * 2 * 4)\n        elif music_string[i] == '.|':\n            beats.append(i * 2 * 4 * 4)\n        elif music_string[i] == '|o|':\n            beats.append(i * 2 * 4 * 4 * 4)\n        elif music_string[i] == '|o|o|':\n            beats.append(i * 2 * 4 * 4 * 4 * 4)\n        else:\n            raise ValueError(\"Invalid note in music string: \" + str(music_string))\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" beats = []\n\n    for beat in music_string:\n        if beat.startswith('o'):\n            beats.append(int(beat[2:]))\n            if beat.endswith('o'):\n                beats.append(int(beat[:-2]))\n            else:\n                beats.append(0)\n\n        elif beat.startswith('o|'):\n            beats.append(int(beat[2:]))\n            if beat.endswith('o'):\n                beats.append(int(beat[:-2]))\n            else:\n                beats.append(0)\n\n        elif beat.startswith('.|'):\n            beats.append(int(beat[2:]))\n            if beat.endswith('o'):\n                beats.append(int(beat[:-2]))\n            else:\n                beats.append(0)\n\n        else:\n            beats.append(0)\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for beat in music_string.split('|'):\n        if beat.startswith('o'):\n            beats.append(int(beat[1:]))\n        elif beat.startswith('o|'):\n            beats.append(int(beat[1:]) / 2)\n        elif beat.startswith('.|'):\n            beats.append(int(beat[1:]) / 4)\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = []\n    for n in music_string.split('|'):\n        if n.isdigit():\n            n = int(n)\n        elif n.startswith('o|'):\n            n = int(n.replace('|', 'o|'))\n        elif n.startswith('.|'):\n            n = int(n.replace('|', '.|'))\n        else:\n            raise ValueError('Invalid note format')\n        music.append(n)\n    return music", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for line in music_string.split('\\n'):\n        if line.startswith('o'):\n            beats.append(0)\n        elif line.startswith('o|'):\n            beats.append(1)\n        elif line.startswith('.|'):\n            beats.append(2)\n        else:\n            beats.append(0)\n    return beats"]]