[["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# characters that are not allowed in notes\n    allowed_notes = [\n       's', 'i', 'o', 'u', 'y', 'x', 'c', 'd']\n\n    # character that is allowed in notes\n    notes_re = re.compile('[^o|o|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"start = 0\n    beat = 0\n    notes = []\n    for i in music_string:\n        try:\n            if start < len(i):\n                if i[start] == '|':\n                    beat = i[start+1]\n                elif i[start] == 'o':\n                    beat = beat + 4\n                else:\n                    beat = beat + i[start]\n                start = start + 2\n            else:\n                beat = beat + 1\n        except IndexError:\n            continue\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    beats = 0\n    for i, n in enumerate(music_string.split()):\n        if n == 'o':\n            beats += 4\n        elif n == 'o|':\n            beats += 2\n        elif n == '.|':\n            beats += 1\n        elif n == 'o|':\n            beats += 4\n        else:\n            notes.append(beats)\n            beats = 0\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"score = music_string.split()\n    beats = 0\n    notes = []\n\n    for n in score:\n        if n == '|':\n            beats += 2\n        elif n == 'o':\n            beats += 4\n        elif n == 'o|':\n            beats += 2\n        elif n == '.|':\n            beats += 1\n        elif n.startswith('.'):\n            notes.append(n.split()[2:])\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_list = []\n    for index, note in enumerate(music_string.split()):\n        if index == 0:\n            continue\n        beat = int(note.split()[0])\n        if beat == 0:\n            beat = 2\n        if beat % 2!= 0:\n            beat = beat - 1\n        music_list.append(beat)\n\n    return music_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = music_string.decode('ascii', 'ignore')\n    beat_list = []\n    for ch in music:\n        if ch == 'o':\n            beat_list.append(4)\n        elif ch == 'o|':\n            beat_list.append(2)\n        elif ch == '.|':\n            beat_list.append(1)\n        elif ch in ('o', 'o|', 'o|', '.|'):\n            beat_list.append(ch.get(0, 0))\n        elif ch == 'o':\n            beat_list.append(0)\n        else:\n            beat_list.append(ch.get(0, 0) + 1)\n\n    return beat_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # Split the string into notes\n    notes = music_string.split()\n\n    # Determine how many beats each note lasts\n    for note in notes:\n        if note.startswith('o'):\n            beats_per_note = 4\n        elif note.startswith('|'):\n            beats_per_note = 2\n        elif note.startswith('.'):\n            beats_per_note = 1\n        else:\n            beats_per_note = 4\n\n    # Return list of integers corresponding to how many beats each note lasts\n    return [beat for beat in beats_per_note]\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for ch in music_string.split(\" \"):\n        if ch in ('o', '|'):\n            beats.append(int(ch, 16))\n        else:\n            beats.append(0)\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_mapping = {\"0\": 0, \"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5}\n\n    num_notes = 0\n    note_of_first_notelike = 0\n    note_of_second_notelike = 0\n    note_of_infidelity = 0\n    note_of_trill = 0\n    note_of_bend = 0\n\n    first_notelike = []\n    second_notelike = []\n    infidelity = []\n    trill = []\n    bend = []\n\n    for rhythm in music_string.split('|'):\n        rhythm = rhythm.lower()\n\n        if rhythm == \"|\":\n            beat_mapping.update({0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5})\n\n            note_of_first_notelike = 0\n            note_of_second_notelike = 0\n            note_of_infidelity = 0\n            note_of_trill = 0\n            note_of_bend = 0\n\n            if beat_mapping[note_of_first_notelike] == 0:\n                note_of_first_notelike = note_of_first_notelike + 1\n\n            if beat_mapping[note_of_second_notelike] == 0:\n                note_of_second_notelike = note_of", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n\n    if music_string.startswith('o'):\n        beats.append(4)\n    elif music_string.startswith('o|'):\n        beats.append(2)\n    elif music_string.startswith('.|'):\n        beats.append(1)\n    else:\n        raise ValueError('Expected o, o|, o|, o| or.| or.| or.|')\n\n    return tuple(beats)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" def get_parts(notes: List[int]) -> List[int]:\n        \"\"\" Given list of notes, return list of parts that each note will last \"\"\"\n\n        part_list = []\n\n        for note in notes:\n            part_list.append(note % 4)\n\n        return part_list\n\n    beats = [0] * len(notes)\n\n    for part in get_parts(notes):\n        beats[part] += 1\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [\n        int(c.name) for c in music_string.split('|')]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_sequence = []\n    for i in xrange(0, len(music_string) - 1):\n        if i == 0:\n            beat_sequence.append(0)\n        elif i == 1:\n            beat_sequence.append(1)\n        elif i == 2:\n            beat_sequence.append(2)\n        elif i == 3:\n            beat_sequence.append(3)\n        elif i == 4:\n            beat_sequence.append(4)\n        elif i == 5:\n            beat_sequence.append(5)\n        elif i == 6:\n            beat_sequence.append(6)\n        elif i == 7:\n            beat_sequence.append(7)\n        elif i == 8:\n            beat_sequence.append(8)\n        elif i == 9:\n            beat_sequence.append(9)\n        elif i == 10:\n            beat_sequence.append(10)\n        elif i == 11:\n            beat_sequence.append(11)\n        elif i == 12:\n            beat_sequence.append(12)\n        elif i == 13:\n            beat_sequence.append(13)\n        elif i == 14:\n            beat_sequence.append(14)\n        elif i == 15:\n            beat_sequence.append(15)\n        elif i == 16:\n            beat_sequence.append(16)\n        elif i == 17:\n            beat_sequence.append(17)\n        elif i == 18:\n            beat_sequence.append(18)\n        elif i == 19:", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Initialize a dictionary with the keys O, I, II, III, IV and V.\n    note_types = {\n        'o': [\n            4,\n            2,\n            1,\n            2,\n            1,\n            1,\n            4,\n            4],\n        '|': [\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n        ],\n    }\n\n    # Look through the string and determine the type of note that each individual beat represents.\n    start_duration = 4\n    for bar in music_string:\n        # Start with an o if we're at the start of a beat, otherwise we need to look through\n        # the beat's note types until we find one that corresponds to the bar length we want.\n        if start_duration == 4:\n            note = note_types[bar][0]\n        else:\n            note = note_types[bar][-1]\n        # If we don't find a match, the end of the bar is at that end of the beat", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # Get lengths\n    beat_lengths = [int(v) for v in music_string.split() if v.isdigit()]\n\n    # Parse\n    beat_lengths = [int(v) for v in beat_lengths if v]\n\n    # Return\n    return beat_lengths", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_digits = re.findall('^{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|{0,3}|", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split('|')[0].split('.')\n    beats = [int(beat) for beat in notes if beat]\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" pattern = re.compile(r'[^o|.|]*|o|.|[^o|.|]*')\n    matches = pattern.findall(music_string)\n    beat_cnt = []\n    for note in matches:\n        if note == 'o':\n            beat_cnt.append(4)\n        elif note == 'o|':\n            beat_cnt.append(2)\n        elif note == '.|':\n            beat_cnt.append(1)\n        else:\n            beat_cnt.append(0)\n\n    return beat_cnt", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_length = {}\n    beat_length['o'] = 4\n    beat_length['o|'] = 2\n    beat_length['o|.|'] = 1\n    beat_length['o.|.|'] = 1\n    beat_length['o.|.|.|'] = 1\n    beat_length['o.|.|.|.|'] = 1\n    beat_length['o.|.|.|.|.|'] = 1\n    beat_length['o.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # first byte: horizontal line\n    b = ord(music_string[0])\n    # next byte: horizontal line\n    n = ord(music_string[1])\n    # next byte: horizontal line\n    d = ord(music_string[2])\n    # next byte: horizontal line\n    h = ord(music_string[3])\n    # next byte: horizontal line\n    l = ord(music_string[4])\n\n    return [int(n) for n in [int(b * (h * 4 / 8)) for b in range(0, h)]]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"match = re.search(r'[o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes: List[int] = []\n    for line in music_string.splitlines():\n        line = line.strip()\n        if line.startswith(' '):\n            line = line[1:]\n        line = line.replace('|','')\n        if line.endswith('.'):\n            line = line[:-1]\n        notes.append(int(line))\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split():\n        if note.startswith('o'):\n            notes.append(note[1:])\n            continue\n        if note.startswith('o|'):\n            notes.append(note[2:])\n            continue\n        if note.startswith('.|'):\n            notes.append(note[2:])\n            continue\n        if note.isdigit():\n            note, _ = int(note.decode('latin1'), 16)\n        else:\n            note, _ = int(note, 16)\n        notes.append(note)\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split(' ')\n    beats = len(notes)\n\n    if beats == 4:\n        return notes\n    elif beats == 2:\n        return [notes[0], notes[2]]\n    elif beats == 1:\n        return [notes[0], notes[1]]\n    else:\n        raise Exception('Invalid musical notation')\n\n    return [notes[0] * 4 + notes[2]]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for line in music_string.split('\\n'):\n        line = line.strip()\n        if line.startswith('o|'):\n            notes.append(line[2:].count('|'))\n        elif line.startswith('.|'):\n            notes.append(line[2:].count('|'))\n        else:\n            notes.append(0)\n    return notes\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" if music_string.lower() not in ['.', '|']:\n        raise ValueError(\"Music must be in the form o o|.| o|.|.|.|.| o o\")\n    beats = music_string.split('|')\n    beats = [int(beat) for beat in beats]\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" beat_length = []\n    note_length = []\n    note_ratio = []\n    beat_position = []\n    note_position = []\n\n    def find_note(note_list: List[int]) -> int:\n        \"\"\" Find the index of the note list in the string.\n            This function iterates over the string until the last occurence of 'o', '|', '.|' and\n            returns the index of this occurrence.\n\n        >>> find_note(['o', 'o', '|', '|', 'o', '|', 'o', '|', 'o|', 'o|', 'o|', 'o|', 'o|'])\n        3\n        >>> find_note(['o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|'])\n        2\n        >>> find_note(['|', '|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|'])\n        1\n        >>> find_note(['o', 'o|', 'o|", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\"\"\"\n    # Assume music is in this format:\n    # |o o|.| o| o|.|.|.|.|.|.| o o o o o\n    #\n    # Here is the idea:\n    # The | means start of the note, the o means stop of the note. The. means a quarter note (fourth in the above example).\n    # The | means the start of the next half note, the o means the end of the next half note. The. means a quater note (fourth in the above example).\n    #\n    # The o means an extra quarter note (fourth in the above example) that is not a half note. This is the reason for the..\n    #\n    # The o| means an extra quarter note (fourth in the above example) that is a half note. This is the reason for the..\n    #\n    # The o| means an extra quarter note (fourth in the above example) that is a quater note. This is the reason for the..\n    #\n    # The o| means an extra quarter note (fourth in the above example) that is a quarter note. This is the reason for the..\n    #\n    # The o", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = [int(n) for n in music_string.split('.')]\n    return [int(b) for b in beats if b > 0]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# convert note to beats and parse beat number\n    notes = music_string.split('|')\n    beats = [note for note in notes if note.strip()]\n    return [int(beats[0]) for beat in beats[1:]]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    # The start and stop of each note are defined by the length of each line.\n    notes.append(0)\n    # The number of beats is defined by the length of each line.\n    for line in music_string.splitlines():\n        # The length of each line is defined by the number of blank lines.\n        for blank_line in line.split():\n            # First line is defined by the length of each line.\n            line_length = len(blank_line)\n            # The number of beats is defined by the length of each line.\n            notes.append(line_length - len(notes[0]) - len(notes[1]))\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # The first byte is the note number, as defined by the note type.\n    note_number = ord(music_string[0])\n\n    # Next byte is a'magic' value. A note number *2 gives the right number of beats.\n    beat_ratio = (note_number / 2) // 2\n\n    beat_count = 1\n    for beat in music_string[1:]:\n        if beat == 'o':\n            beat_count *= 2\n        elif beat == 'o|':\n            beat_count *= 4\n        elif beat == '.|':\n            beat_count *= 2\n\n        if beat_count < 4:\n            break\n        beat_count += 1\n\n    return [beat_count] * beat_ratio", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    num_letters = len(music_string)\n    for letter in music_string:\n        if letter == '0':\n            continue\n        if letter in ('|', 'o|'):\n            beat = beats[-1]\n            if beat not in num_letters:\n                beats.append(beat)\n                num_letters += 1\n        else:\n            beat = beats[-1]\n            if beat < num_letters:\n                beats.append(beat)\n                num_letters -= 1\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"l = music_string.split(\" \")\n    if len(l)!= 4:\n        raise ValueError(\"Invalid music string: {}\".format(music_string))\n    out = [int(l[i].strip()) for i in range(1, 5)]\n    return out", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    beat_length = 0\n    for beat in music_string.split('|'):\n        if beat.startswith('o'):\n            beat_length = beat_length + 4\n            beat = beat[1:]\n        elif beat.startswith('o|'):\n            beat_length = beat_length + 2\n            beat = beat[1:]\n        elif beat.startswith('.|'):\n            beat_length = beat_length + 1\n            beat = beat[1:]\n        else:\n            break\n    beat_length = beat_length / 2\n\n    for note in music_string.split('|'):\n        if note.endswith('o'):\n            notes.append(beat_length)\n            break\n        elif note.endswith('o|'):\n            notes.append(beat_length * 2)\n            break\n        elif note.endswith('.|'):\n            notes.append(beat_length * 1)\n            break\n        else:\n            break\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for char in music_string:\n        # check for '|'\n        if char == '|':\n            break\n        if char == 'o|':\n            beats.append(1)\n        elif char == 'o|':\n            beats.append(4)\n        elif char == '.|':\n            beats.append(2)\n        elif char == '.|':\n            beats.append(4)\n        elif char == 'o|':\n            beats.append(4)\n        elif char == 'o|':\n            beats.append(2)\n        elif char == 'o|':\n            beats.append(4)\n        else:\n            raise ValueError(\"Invalid musical note found.\")\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string == 'o o|.| o| o|.|.|.|.|.|.| o o' or music_string.startswith('o|o|o'):\n        return parse_music(music_string.replace('.', '|'))\n    else:\n        return []", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"try:\n        notes = music_string.split(' ')\n    except ValueError:\n        raise InvalidMusicDataException(\"Invalid musical notation.\")\n    beat_length = [len(x) for x in notes]\n    beat_count = [notes[0] for x in notes]\n\n    return beat_length, beat_count", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_list = []\n    notes = []\n    while music_string:\n        if music_string.startswith('.'):\n            notes.append(0)\n        elif music_string.startswith('o|'):\n            beat_list.append(0)\n            notes.append(0)\n        elif music_string.startswith('.|'):\n            beat_list.append(1)\n            notes.append(0)\n        elif music_string.startswith('o'):\n            beat_list.append(1)\n            notes.append(1)\n        elif music_string.endswith('.'):\n            beat_list.append(2)\n            notes.append(0)\n        elif music_string.endswith('o'):\n            beat_list.append(2)\n            notes.append(1)\n        elif music_string.endswith('o.'):\n            beat_list.append(2)\n            notes.append(1)\n        elif music_string.endswith('o.'):\n            beat_list.append(2)\n            notes.append(2)\n        else:\n            notes.append(0)\n    return beat_list, notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = [int(n) for n in music_string.split('|')]\n    return [note for note in notes if note]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return music_string.split(\" o o o o| o| o o o| o o o| o o o| o o o| o o o|.\")", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split()\n    notes = [int(x) for x in notes]\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    i = 0\n    notes.append(0)\n    while i < len(music_string) and music_string[i]!= '|':\n        note = int(music_string[i:i + 1], 16)\n        notes.append(note)\n        i += 1\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # Start by looking up the notes in the binary representation of the string.\n    notes = [\n        8, 16, 24, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 240, 256, 288, 320, 336, 384, 416, 448, 480, 512, 576, 640, 672, 806, 880, 920, 960, 1024, 1168, 1240, 1440, 1536, 1680, 1792, 2048, 2560, 2880, 3072, 3200, 3528, 3840, 4160, 4880, 5120, 5680, 6480, 7120, 8192, 9680, 11584, 12288, 13336, 14608, 15208, 16320, 16896, 17144, 17224, 17360, 17720, 18176, 18224, 18520, 19136, 19222, 19956, 21420, 23456, 26160, 27240, 29448, 32800, 34112, 37600, 40080, 43112, 46128, 49200, 50336, 51140, 52224, 52484, 52848, 53456, 55984, 57456, 584", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"lines = music_string.split('\\n')\n    line = lines[-1].strip()\n    for i, beat in enumerate(line):\n        if beat!= 'o':\n            break\n\n    return [int(line[-1:-1]) for line in lines[:-1]]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for i in range(0, len(music_string), 2):\n        if music_string[i] == 'o':\n            beats.append(i + 1)\n        elif music_string[i] in ('o|', '.|'):\n            beats.append(i + 1)\n        elif music_string[i] == '|':\n            beats.append(i + 1)\n        elif music_string[i] == '.':\n            beats.append(i + 1)\n        else:\n            raise ValueError(\"Invalid musical notation {}\".format(music_string))\n\n    return beats\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = 0\n    for char in music_string:\n        if char.isdigit():\n            beats += 1\n        elif char == '|':\n            beats += 1\n            if beats == 2:\n                break\n        elif char == 'o|':\n            beats += 1\n            if beats == 4:\n                break\n        elif char == 'o':\n            beats += 1\n            if beats == 2:\n                break\n        elif char == '.':\n            beats += 1\n            if beats == 4:\n                break\n        elif char == '.':\n            beats += 1\n            if beats == 4:\n                break\n        elif char == 'o o' and beats == 1:\n            beats += 1\n            if beats == 2:\n                break\n        elif char == 'o|.| o|.|.|.|.|.| o|':\n            beats += 1\n            if beats == 4:\n                break\n        elif char == 'o|.| o|.|.|.|.|.|.|.| o':\n            beats += 1\n            if beats == 4:\n                break\n        elif char == 'o|.| o|.|.|.|.|.|.|.| o|':\n            beats += 1\n            if beats == 4:\n                break\n        elif char == 'o|.", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n\n    if music_string.startswith('o'):\n        notes.append(4)\n    elif music_string.startswith('o|'):\n        notes.append(2)\n    elif music_string.startswith('.|'):\n        notes.append(1)\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Note that the order of beats in our notation is important, this is how beats are split in the music.\n    beat_length = len(music_string.split())\n\n    beats = [int(a) for a in music_string.split() if a]\n    last_beat = 0\n\n    while beat_length < len(beat_length):\n        if beat_length == 0:\n            # This means that there are no beats left.\n            return []\n\n        # We know that beats number 1 and 4 should not last.\n        if beat_length == 1:\n            if last_beat == 0:\n                return [last_beat + 1]\n            last_beat = 1\n        if beat_length == 4:\n            if last_beat == len(beat_length) - 1:\n                return [last_beat + 1]\n            last_beat = len(beat_length) - 1\n\n        beat_length += 1\n\n    return []", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = []\n    for i in range(4):\n        if len(music) < 4:\n            continue\n\n        if music[0] == 'o':\n            music.append(i)\n        elif music[1] == 'o|':\n            music.append(i * 2)\n        elif music[2] == '|':\n            music.append(i * 2 + 1)\n        else:\n            continue\n    return music", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_counter = 0\n    beat_list = []\n    beat_array = []\n    count = 0\n    beat_list_len = len(beat_list)\n    for notelist in music_string:\n        beat_list_len -= len(notelist)\n        if beat_list_len == 0:\n            break\n        beat_array.append(count)\n        beat_counter = 0\n        count = 0\n        for note in note_list:\n            if beat_array[beat_counter]!= 1:\n                break\n            beat_array[beat_counter] += 1\n            if beat_array[beat_counter] % 4 == 0:\n                count += 1\n                beat_counter += 1\n                if beat_counter > beat_list_len - 1:\n                    beat_counter = 0\n                    break\n            count += 1\n            beat_counter += 1\n        beat_list.append(beat_array)\n        beat_counter = 0\n        beat_list_len -= len(beat_array)\n    return beat_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for ch in music_string:\n        if ch == 'o':\n            notes.append(4)\n        elif ch == 'o|':\n            notes.append(2)\n        elif ch == '.|':\n            notes.append(1)\n        else:\n            raise ValueError('Invalid musical note:' + ch)\n    return notes\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = [int(n) for n in music_string.split('|')]\n    beats = 0\n    for i in range(notes.count('.')):\n        if beats % 4 == 0:\n            beats += 1\n            beats %= 4\n        else:\n            beats += 2\n    return [beats]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"num_beats: List[int] = []\n\n    beat_index: int = 0\n    beat_start: int = 0\n    beat_end: int = 0\n\n    for line in music_string.split('\\n'):\n        if line.startswith('o'):\n            num_beats.append(beat_index + beat_start)\n            beat_index += 4\n            beat_start += 4\n            continue\n\n        if line.startswith('o|'):\n            num_beats.append(beat_index + beat_start)\n            beat_index += 2\n            beat_start += 2\n            continue\n\n        if line.startswith('.|'):\n            num_beats.append(beat_index + beat_start)\n            beat_index += 1\n            beat_start += 1\n            continue\n\n        if line.startswith('O'):\n            num_beats.append(beat_index + beat_start + beat_end)\n            beat_index += num_beats[-1] + beat_end\n            beat_end += 2\n            continue\n\n        raise ValueError('Invalid musical note in string: {!r}'.format(line))\n\n    return num_beats\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    i = 1\n    while True:\n        if i < len(music_string):\n            notes.append(i)\n            i += 1\n            continue\n\n        if music_string[i] == 'o':\n            notes.append(i)\n            i += 1\n            continue\n\n        if music_string[i] == 'o|':\n            notes.append(i)\n            i += 1\n            continue\n\n        if music_string[i] == '.|':\n            notes.append(i)\n            i += 1\n            continue\n\n        i += 1\n    return notes\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_count = 0\n    last_beat = 0\n\n    for beat in music_string:\n        if beat == 'o':\n            beat_count += 1\n            last_beat = beat_count\n        elif beat == 'o|':\n            beat_count += 2\n            last_beat = beat_count\n        elif beat == '.|':\n            beat_count += 3\n            last_beat = beat_count\n        elif beat == '.':\n            beat_count += 4\n            last_beat = beat_count\n        else:\n            last_beat += 1\n    return [last_beat]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_notation = music_string.split('|')\n    beat_counts = []\n\n    for note in music_notation[1:]:\n        if note == 'o':\n            beat_counts.append(4)\n        elif note == 'o|':\n            beat_counts.append(2)\n        elif note == '.|':\n            beat_counts.append(1)\n        elif note in ['O', 'O|', '.|', 'o|', 'O|', 'O|', 'O|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = {}\n    for note in music_string.split():\n        if note == 'o':\n            beats['o'] = 4\n        elif note.isdigit():\n            beats[note.lower()] = int(note)\n        elif note.isalpha():\n            beats[note.lower()] = int(note)\n        elif note.startswith('.'):\n            beats[note.lower()] += 1\n        elif note.isalpha() or note.isdigit():\n            beats[note.lower()] += 1\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(n) for n in music_string.split('|')]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split()\n    beats = {note: note / beat for note, beat in notes}\n    return [int(x) for x in beats.items()]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"for line in music_string.split('\\n'):\n        line = line.strip()\n        if line.startswith('o'):\n            return [int(x) for x in line.split('|')[1:]]\n        elif line.startswith('o|'):\n            return [int(x) for x in line.split('|')[1:]]\n        elif line.startswith('.|'):\n            return [int(x) for x in line.split('|')[1:]]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"nb_beats = 4\n    note_lengths = ['|', 'o', 'o', 'o']\n\n    if music_string.startswith(' '):\n        nb_beats = 0\n    if music_string.startswith('|'):\n        nb_beats = 1\n    elif music_string.startswith('|'):\n        nb_beats = 2\n    elif music_string.startswith('o|'):\n        nb_beats = 4\n    elif music_string.startswith('o|'):\n        nb_beats = 2\n    elif music_string.startswith('o|'):\n        nb_beats = 1\n    elif music_string.startswith('o|'):\n        nb_beats = 4\n\n    nb_beats *= note_lengths.index(music_string[note_lengths.index(music_string) + 1:])\n    return [nb_beats] if note_lengths.index(music_string[note_lengths.index(music_string)]) >= 2 else nb_beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = {}\n    for line in music_string.split('|'):\n        beats[line] += 1\n    return [beat for beat in beats.values() if beat > 0]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = list([ord(c) for c in music_string])\n    notes = [notes[n + 1] for n in xrange(0, len(notes), 2)]\n    return [int(note) for note in notes]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = [note for note in music_string.split(' ')]\n    return sorted(notes)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# If there is more than one beat in the note, return the first\n    beat_count = len(music_string.split()) - 1\n    if beat_count == 1:\n        return music_string.split()[0]\n\n    beat_count = 0\n    beat_counter = 0\n    beat_count_next = 0\n\n    for index, element in enumerate(music_string.split()):\n        if index < beat_count:\n            beat_count_next += 1\n            if index == beat_count_next:\n                beat_count = 0\n        beat_count += element\n\n    return beat_count", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_list = music_string.split('|')\n\n    if len(beat_list)!= 5:\n        raise ValueError(\"parse_music(): invalid input\")\n\n    return map(int, beat_list)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_list = []\n    for beat in music_string.split(\"|\"):\n        if beat == \"|\":\n            beat_list.append(0)\n        elif beat == \"o\":\n            beat_list.append(4)\n        elif beat == \"|\":\n            beat_list.append(2)\n        elif beat == \".|\":\n            beat_list.append(1)\n        elif beat == \".\":\n            beat_list.append(2)\n        elif beat == \".\":\n            beat_list.append(1)\n        elif beat == \"o|\":\n            beat_list.append(2)\n        elif beat == \".|\":\n            beat_list.append(1)\n        elif beat == \".\":\n            beat_list.append(2)\n        elif beat == \".\":\n            beat_list.append(1)\n        elif beat == \"oooo|\":\n            beat_list.append(3)\n        elif beat == \".|\":\n            beat_list.append(1)\n        elif beat == \".\":\n            beat_list.append(2)\n        elif beat == \".|\":\n            beat_list.append(1)\n        elif beat == \".\":\n            beat_list.append(2)\n        elif beat == \".\":\n            beat_list.append(1)\n        elif beat == \".\":\n            beat_list.append(", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split('|')\n    if len(notes)!= 9:\n        raise ValueError(\"Invalid format of music string. Not 9 notes: {}\".format(notes))\n    return [int(n) for n in notes]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string == '':\n        return []\n\n    notes = music_string.split()\n    beats = [int(not n.strip()) for n in notes]\n\n    if beats[0] == 0:\n        return []\n\n    return [\n        int(beat) for beat in beats[1:] if beat > 0]\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_line = music_string.strip().split('|')\n    if len(music_line)!= 4:\n        raise ValueError('Invalid musical string \"{}\".'.format(music_string))\n\n    return parse_music_line(music_line)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" notes = music_string.split('|')\n    last_beats = 0\n    for note in notes[:-1]:\n        if note.startswith('o'):\n            last_beats += 4\n        elif note.startswith('o|'):\n            last_beats += 2\n        elif note.startswith('.|'):\n            last_beats += 1\n        else:\n            last_beats += 0\n\n    return [last_beats] * len(notes)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_list = []\n    beat_list.append(0)\n    for note in music_string.split(' '):\n        if note.startswith('o|'):\n            beat_list.append(int(note[3:-1]))\n        elif note.startswith('.|'):\n            beat_list.append(int(note[3:-1]))\n        elif note.startswith('o o'):\n            beat_list.append(int(note[3:-1]))\n        else:\n            beat_list.append(0)\n    return beat_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"try:\n        note_list = []\n        while True:\n            if music_string == '|' and len(note_list) == 0:\n                break\n            if music_string == 'o':\n                note_list.append(0)\n            elif music_string == 'o|':\n                note_list.append(1)\n            elif music_string == '.|':\n                note_list.append(2)\n            else:\n                break\n        return note_list\n\n    except ValueError:\n        return []", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # Lets make sure we have the correct number of beats in the input string\n    beats = len(music_string)\n\n    # Get the number of beats of each note, starting at the first beat\n    beats_per_notes = 0\n    for _ in range(0, beats):\n        beats_per_notes += 1\n    return [beats_per_notes for _ in range(0, beats)]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for i in xrange(0, len(music_string), 2):\n        if music_string[i] == 'o':\n            beats.append(i + 1)\n            continue\n        if music_string[i] in ('o|', '.|'):\n            beats.append(i + 1)\n            continue\n        if music_string[i] in ('.', '|'):\n            beats.append(i + 1)\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_count = 0\n    beat_array = []\n\n    for note in music_string.split(\"|\"):\n        if note[0] == \"o\":\n            beat_array.append(beat_count)\n        elif note[0] == \".\":\n            beat_array.append(beat_count / 2)\n        elif note[0] == \"|\":\n            beat_array.append(beat_count / 4)\n        elif note[0] == \".\":\n            beat_array.append(beat_count / 2)\n        elif note[0] == \".\":\n            beat_array.append(beat_count)\n\n        beat_count += 1\n    return beat_array", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string is None:\n        return None\n\n    beat = music_string.find('|')\n    beat_name = music_string[beat:].lower()\n\n    if beat_name not in ('.', '|'):\n        return None\n\n    beat_val = beat_name.strip()\n    beat_name = beat_val[2:]\n\n    if beat_name not in ('.', '|'):\n        return None\n\n    beat_val = beat_val.strip()\n    beat_val = beat_val[2:]\n\n    if beat_name not in ('.', '|'):\n        return None\n\n    beat_val = beat_val.strip()\n\n    if beat_val not in ('.', '|'):\n        return None\n\n    beat_val = beat_val.strip()\n\n    if beat_val not in ('.', '|'):\n        return None\n\n    beat_val = beat_val.strip()\n\n    if beat_val not in ('.', '|'):\n        return None\n\n    beat_val = beat_val.strip()\n\n    if beat_val not in ('.', '|'):\n        return None\n\n    beat_val = beat_val.strip()\n\n    if beat_val not in ('.', '|'):", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_length = 0\n    beat_table = [\n        ['o', 'o', 'o|', '.|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|'],\n        ['o|', 'o|', '.|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|']]\n\n    if music_string.find('|') == -1:\n        # Non-valid notes\n        return beat_table\n\n    beats = 0\n    for note in music_string.split('|'):\n        if note.find('.') == -1:\n            if note.find('|')!= -1:\n                beat_table.append([note.strip(), beats])\n            beat_table.append([note.strip(), beats])\n        else:\n            beat_table.append([note.strip(), beats] + [int(beat_length)] * 4)\n        beats += 1\n\n    return beat_table", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    num_beats = 0\n    for i, line in enumerate(music_string):\n        if line.startswith('o'):\n            note = i\n            num_beats += 4\n            notes.append(note)\n        elif line.startswith('o|'):\n            half = i\n            num_beats -= 2\n            notes.append(half)\n        elif line.startswith('.|'):\n            quarter = i\n            num_beats -= 1\n            notes.append(quarter)\n        else:\n            notes.append(num_beats)\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for letter in music_string:\n        if letter == 'o':\n            notes.append(4)\n        elif letter == 'o|':\n            notes.append(2)\n        elif letter == '.|':\n            notes.append(1)\n        elif letter == 'o|o':\n            notes.append(2)\n        elif letter == 'o|o|':\n            notes.append(4)\n        elif letter == 'o|o|o':\n            notes.append(1)\n        elif letter == 'o|o|o|o':\n            notes.append(2)\n        elif letter == 'o|o|o|o|o|o':\n            notes.append(4)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"note_list = []\n    for note in music_string:\n        if note == 'o':\n            note_list.append(0)\n        elif note == 'o|':\n            note_list.append(1)\n        elif note == '.|':\n            note_list.append(2)\n        elif note == 'o|o':\n            note_list.append(3)\n        else:\n            raise ValueError('unrecognized note')\n    return note_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"pattern = '/^(o| o| o|.| o| o|.|.|.| o o')\n    for pattern_match in re.finditer(pattern, music_string, re.IGNORECASE):\n        return [int(x) for x in pattern_match.groups()]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = [(n - 1) / 4 for n in music_string.split('|')]\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n    pattern = re.compile('(?P<first>o)(?P<second>.||o)?(?P<third>.||o)?(?P<fourth>.||o)?')\n\n    beats = pattern.match(music_string).groups()\n\n    for beat in beats:\n        result.append(int(beat))\n\n    return result\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split(' ')\n    beats = len(notes)\n\n    # Transform notes into beats. Each note in the string can be either one or two beats long.\n    for note in notes:\n        if note in ('.', '|', 'o', '|'):\n            beats += 1\n        elif note == 'o':\n            beats += 2\n        elif note == 'o|':\n            beats += 1\n        elif note == '.|':\n            beats += 1\n\n    return [int(beat) for beat in beats]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string.strip() == '':\n        return None\n\n    notes = [int(n) for n in music_string.split('|')]\n    note_counts = []\n    for note in notes[:-1]:\n        note_counts.append(len(note))\n\n    for note in notes[1:] + [note_counts[-1]]:\n        note_counts.append(len(note))\n\n    return note_counts", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"m = music_string.split('|')\n    return [m[0] for m in m]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"start = music_string.find('o|')\n    if start < 0:\n        return None\n    end = music_string.find('.', start)\n    if end < 0:\n        return None\n\n    beat_type = music_string[start + 1:end]\n    if beat_type in ['o', 'o|', '.|', '.|', 'o', 'o|', '.|', '.|', 'o', 'o|', '.|', '.|', 'o']:\n        return [int(beat_type)]\n\n    return None", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split(' ')\n    return map(lambda note: int(note), notes)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# s.format(' ','','','','','','','','','','') ->''\n    pattern = r'^-?[0-9]*$'\n    last_pattern = pattern + r'.*?$'\n    beat_number = 0\n    beat_length = 0\n    num_begins = 0\n    num_ends = 0\n    for _ in music_string:\n        if _.startswith(pattern):\n            beat_number += 1\n            beat_length += 4\n        elif _.startswith(last_pattern):\n            beat_number += 1\n            beat_length += 2\n        elif _.startswith('|'):\n            beat_number += 1\n            beat_length += 1\n        elif _.startswith('|o|'):\n            beat_number += 1\n            beat_length += 2\n        elif _.startswith('|o|o|'):\n            beat_number += 1\n            beat_length += 3\n        elif _.startswith('|o|o|o|'):\n            beat_number += 1\n            beat_length += 4\n        elif _.startswith('|o|o|o|o'):\n            beat_number += 1\n            beat_length +=", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# This will be a list of 4 elements with each element being a beat number\n    return [int(b) for b in music_string.split() if b.isdigit()]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"match = re.search(r'^(o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_list = [int(x.strip()) for x in music_string.split('|') if x.strip()]\n\n    for beat in beat_list:\n        if beat == 0:\n            break\n        if beat == 2:\n            beat = 1\n        elif beat == 4:\n            beat = 2\n        elif beat == 6:\n            beat = 4\n        elif beat == 8:\n            beat = 6\n        else:\n            raise ValueError('Bad beat number:'+ str(beat))", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_list = []\n    beat_count = 0\n    for note in music_string:\n        if note == '.':\n            beat_list.append(beat_count)\n            beat_count += 1\n            continue\n        if not note in 'o|o|o|':\n            continue\n        beat_count += 1\n        if beat_count == 4:\n            beat_list.append(beat_count)\n            beat_count = 0\n            continue\n        beat_list.append(beat_count)\n    return beat_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# need to parse to convert to int\n    notes = music_string.split()\n    for note in notes:\n        try:\n            return int(note)\n        except ValueError:\n            continue\n    return None", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split(\"o|\")\n    beats = []\n    for note in notes:\n        # first we keep only beats which are not quater notes\n        if note not in (\".|\", \"o\"):\n            beats.append(note.count(\"|\"))\n        # now we do the trick of keeping only the highest notes, i.e. beats which don't\n        # include the fourth note. Here we also need to take into account that beats which\n        # don't last four beats are not considered as legitimate beats.\n        if note in (\"o|\", \".|\"):\n            if not beats[-4]:\n                beats.append(notes.count(\"|\"))\n        else:\n            beats.append(notes.count(\"o\"))\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [x for x in music_string.split('|') if x.isdigit()]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"note_types = ['o', 'o|', '.|', '.|', 'o|', 'o|', 'o|', 'o|', 'o|']\n    beats_per_note = [notation.beat_length for notation in note_types]\n\n    beats_per_note = beats_per_note * note_types\n\n    beats = []\n    for beat in music_string.split('|'):\n        beat = beat.strip()\n        if not beat:\n            continue\n\n        if len(beat)!= 4:\n            raise ValueError(\"bad note length in music string: {}\".format(beat))\n        if beat[0] not in note_types:\n            raise ValueError(\"bad note type: {}\".format(beat[0]))\n        beats.append(beat[1])\n\n        if beat[1] not in beats_per_note[len(beat) - 4]:\n            raise ValueError(\"bad beat: {}\".format(beat[1]))\n\n        if beat[0]!= beat[1]:\n            raise ValueError(\"bad beats: {}\".format(beat))\n        if len(beat)!= len(beat[0]):\n            raise ValueError(\"bad beat length: {}\".format(len(beat)))\n\n        beats.append(beat[0])\n\n    return beats\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(x) for x in music_string.split('|') if x]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split(' ')\n    beats_per_not = 0\n    for note in notes:\n        if note.startswith('o'):\n            beats_per_not += 4\n        elif note.startswith('o|'):\n            beats_per_not += 2\n        elif note.startswith('.|'):\n            beats_per_not += 1\n    return [int(x) for x in beats_per_not]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_leaves = ['o', '|', '|', '|', '|', '|']\n    beat_leaves.extend([''] * 8)\n    beat_leaves.append('.')\n\n    def get_beats(start: int) -> List[int]:\n        \"\"\" This is a shortcut function that takes a given starting beat and returns the number of beats\n        that it lasts.\n        \"\"\"\n        return beat_leaves[start - 1]\n\n    return [int(x) for x in music_string.split(' ') if get_beats(x)]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split(\" \")\n    if len(notes)!= 4:\n        raise Exception(\"Number of notes is not 4.\")\n    return [int(note) for note in notes]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    while music_string:\n        part = music_string.partition(' ')\n        if part == '':\n            continue\n\n        # Per cycle, these are the three notes we need to check\n        beat_lengths = [int(part.strip()) for part in part.split('|') if part]\n\n        # To make sure we don't skip any beat lengths, we need to keep track of the initial\n        # number of beats. Just need to make sure the first beat isn't missing.\n        # We also need to make sure the last beat isn't too long.\n        if beat_lengths[0] < beat_lengths[1] or beat_lengths[0] > beat_lengths[2]:\n            beat_lengths[0] = beat_lengths[1]\n\n        # Using the specified beats, we can now check for other beats that are in between.\n        next_beat_length = beat_lengths[0] + (beat_lengths[1] - beat_lengths[0]) // 2\n        if next_beat_length < beat_lengths[2]:\n            beat_lengths[2] = next_beat_length\n\n        # The last note is the one that counts, so we'll need to add that number to the end of the note\n        last_note = part.split('|')[-1]\n        last_note_length = last_note.strip().split", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in music_string.split('|'):\n        # We assume that the string is on a single beat.\n        # However, some people may use sequences of O,O,O's as a chord\n        # So we trim the string to include just the last '|'.\n        notes.append(i.strip()[-1].count('|'))\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = [\n        parse_note(n) for n in music_string.split(' ') if n in ['o', 'o|', '.|', '.|', 'o|', '.|']\n    ]\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = [\n        int(n) for n in music_string.split('|') if n.isdigit()\n    ]\n\n    if len(notes)!= 5:\n        raise ValueError(\"Incorrect number of beats in music string\")\n\n    return [note for note, beats in notes]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.lower()\n    notes = music_string.split(\"|\")\n    beats = 0\n    for note in notes:\n        if note.startswith(\"o|\"):\n            beats += 1\n        if note.startswith(\".|\"):\n            beats += 1\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_lengths = [\n        (\"|\", 4),\n        (\"o|\", 2),\n        (\".|\", 1)\n    ]\n    beat_lengths.extend([\n        (\".\", 3),\n        (\"o\", 2)\n    ])\n    beat_lengths.append(\".\")\n    beat_lengths.append(\"o\")\n    beat_lengths.append(\".|\")\n\n    for line in music_string.splitlines():\n        if line.startswith(\"|\"):\n            beat_lengths.append(4)\n        elif line.startswith(\"o|\"):\n            beat_lengths.append(2)\n        elif line.startswith(\".|\"):\n            beat_lengths.append(1)\n        elif line.startswith(\".\"):\n            beat_lengths.append(3)\n        elif line.startswith(\"o\"):\n            beat_lengths.append(2)\n        elif line.startswith(\".|\"):\n            beat_lengths.append(1)\n        else:\n            raise ValueError(\"Line is not recognized as a valid musical note\")\n\n    return [int(v) for v in beat_lengths]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# TODO: add exceptions for invalid notes\n    notes = list(re.findall('[^-]', music_string))\n    # TODO: remove parsing logic in the parser\n    # Note: This function will NOT work if the string does not start with \".\"\n    if len(notes) == 1:\n        return notes[0]\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.strip().split('.')\n    beat_count = 0\n    for note in notes:\n        if note!= '':\n            beat_count += 1\n    return beat_count", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" note_list = []\n    for beat in music_string:\n        if beat == 'o':\n            note_list.append(0)\n            continue\n        if beat in ['o|', '.|', 'o', '|', '|o|', 'o|o|', '.|.|', 'o|', '|o', '|o|', 'o|o|', '|o|', '|o|', 'o|o|', '|o|o|']:\n            note_list.append(1)\n            continue\n        if beat in ['|', '|o|', '|o|o|']:\n            note_list.append(2)\n            continue\n        if beat == 'o|o':\n            note_list.append(4)\n            continue\n        if beat == '|o|o|':\n            note_list.append(1)\n            continue\n        if beat == '|o|o|':\n            note_list.append(4)\n            continue\n        if beat == 'o|o|':\n            note_list.append(1)\n            continue\n        if beat == 'o|o|o':\n            note_list.append(2)\n            continue\n        if beat == '|", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for beat in music_string.split('|'):\n        beat = int(beat)\n        if beat in (0, 4):\n            beats.append(beat)\n        elif beat in (4, 6):\n            beats.append(beat - 4)\n        elif beat in (6, 8):\n            beats.append(beat - 6)\n        else:\n            beats.append(beat - 8)\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return []", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = [int(beat) for beat in music_string.split('.')]\n    if len(beats) == 4:\n        return beats\n    elif len(beats) == 2:\n        return beat\n    elif len(beats) == 1:\n        return beat\n    else:\n        raise ValueError(\"Invalid note format in %s\" % music_string)\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = {}\n    for beat in music_string.split():\n        if beat.isdigit():\n            beats[beat.to_i()] = 1\n        elif beat.endswith(' ') or beat.endswith('.') or beat.endswith('|') or beat.endswith('.'):\n            beats[beat.strip()] = 1\n        else:\n            raise ValueError(\"Illegal format for beats of %s\" % beat.strip())\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_lengths = {\n            0: 4,\n            1: 2,\n            2: 1,\n            3: 1,\n            4: 1}\n    beat_length = 0\n    for note in music_string.split():\n        # Determine beat length\n        beat_length += beat_lengths.get(int(note), 0)\n        # If note was not a whole note\n        if beat_length < 4 and note!= 'o':\n            return [beat_length]\n\n    return [beat_length]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# We'll need to use a loop to determine the number of beats in each note. Make this simpler by making it more compact\n    # by converting the notation into a number of lists:\n    beat_list = [\n        ['o', 'o', 'o', 'o', 'o'],\n        ['o', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|'],\n        ['o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|'],\n        ['o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|'],\n        ['o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|'],\n        ['o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|']\n    ]\n\n    # Every half note is twice as long\n    beat_list.append(['o', 'o|'", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" beats = []\n    for note in music_string.split('|'):\n        if not note.startswith('o'):\n            continue\n        if not note.endswith('o'):\n            continue\n        if not note.endswith('.'):\n            continue\n        if not note.endswith('.'):\n            continue\n        beats.append(int(note.split()[0]))\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_lengths = []\n\n    for beat in music_string.split(' '):\n        if beat in ['o', '|', '.|', '|o']:\n            beat_lengths.append(4)\n        elif beat in ['|o|', 'o|', '.|', '|.|']:\n            beat_lengths.append(2)\n        elif beat in ['.|', 'o|', 'o|o']:\n            beat_lengths.append(1)\n    return beat_lengths", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Stop this program if you don't have enough knowledge about music notation\n    if not music_string:\n        return []\n\n    # Find the last (absolute) beat of each note\n    last_beat = -1\n    for note in music_string.split(' '):\n        if note.strip():\n            if note.isdigit():\n                last_beat += note\n            else:\n                if note == 'o':\n                    return [4, 2, 1, 2, 1, 1, 1, 1, 4, 4]\n                elif note == 'o|':\n                    return [4, 2, 1, 2, 1, 1, 1, 1, 1, 4, 4]\n                elif note == '.|':\n                    return [4, 2, 1, 2, 1, 1, 1, 1, 1, 4, 4]\n                elif note == '.':\n                    return [4, 2, 1, 2, 1, 1, 1, 1, 1, 4, 4]\n                else:\n                    raise ValueError('Invalid note with string \"{}\"'.format(note.strip()))\n\n        else:\n            raise ValueError('Invalid note with string \"{}\"'.format(music_string))\n\n    return []", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" notes = []\n\n    for notame in music_string.split('|'):\n        if len(note_names) > 1 or notame == 'o|':\n            notes.append(note_name)\n        else:\n            notes.append(note_name.count('.') * len(note_names) - 1)\n\n    return notes\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split('.')\n    beat_list = []\n    for i in range(0, len(notes)):\n        note = notes[i].lstrip('.')\n        if note!= '' and note.isdigit():\n            beat_list.append(int(note))\n    return beat_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"pattern = r'^(o|\\.?|.|?o|o|o|.o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Take note of the comments in the music string to figure out the number of beats per note\n    # The first number, number of beats per note, is the note number\n    # This is the first number of beats per note\n    note_number = music_string.count('.') - 1\n\n    for _ in range(note_number):\n        if music_string[note_number - 1] == 'o':\n            return [note_number - 1 - (note_number - 1 - (note_number - 1 - (note_number - 1 - (note_number - 1 - (note_number - 1 - (note_number - 1 - (note_number - 1 - (note_number - 1 - (note_number - 1 - (note_number - 1 - (note_number - 1 - (note_number - 1 - (note_number - 1 - (note_number - 1 - (note_number - 1 - (note_number - 1 - (note_number - 1 - (note_number - 1 - (note_number - 1 - (note_number - 1 - (note_number - 1 - (note_number - 1 - (note_number - 1 - (note_number - 1 - (note_number - 1 - (note_number - 1 - (note_number - 1 - (", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_lengths = []\n    beat_lengths.append(0)\n    beats_per_notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == '|':\n            beat_lengths.append(4)\n        elif music_string[i] == '|o':\n            beat_lengths.append(2)\n        elif music_string[i] == 'o|':\n            beat_lengths.append(1)\n        elif music_string[i] == '.':\n            beat_lengths.append(0)\n        elif music_string[i] == '.o':\n            beat_lengths.append(1)\n        else:\n            beats_per_notes.append(i)\n    return beat_lengths, beats_per_notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_duration = int(music_string[4:])\n    beat_times = [int(n) for n in beat_duration / 4.0]\n    return beat_times", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i, c in enumerate(music_string.split('.')):\n        notes.append(ord(c))\n        if c == 'o':\n            notes.append(4)\n        elif c == 'o|':\n            notes.append(2)\n        elif c == '.|':\n            notes.append(1)\n        else:\n            raise ValueError('Invalid musical note.')\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"for line in music_string.split('\\n'):\n        if line.startswith('o'):\n            beat_numbers = int(line.split()[2])\n            return beat_numbers\n        elif line.startswith('|'):\n            beat_numbers = int(line.split()[1])\n            return beat_numbers\n        elif line.startswith('o|'):\n            beat_numbers = int(line.split()[1])\n            return beat_numbers\n        elif line.startswith('.|'):\n            beat_numbers = int(line.split()[1])\n            return beat_numbers", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for beat in music_string.split(' '):\n        if beat.isdigit():\n            notes.append(int(beat))\n        else:\n            notes.append(beat)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats_per_notes = []\n    for c in music_string.lower():\n        if c == 'o':\n            beats_per_notes.append(4)\n        elif c == 'o|':\n            beats_per_notes.append(2)\n        elif c == '.|':\n            beats_per_notes.append(1)\n        elif c.isdigit():\n            beats_per_notes.append(int(c, 16))\n    return beats_per_notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"keyboards = dict()\n    keys = {}\n\n    notes = music_string.split(' ')\n    for note in notes:\n        try:\n            keyboards[note] = int(note)\n        except:\n            keys[note] = int(note)\n\n    for key in keys:\n        if keyboards[key] >= 4:\n            return [keyboards[key]]\n        else:\n            return [keys[key]]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split(' '):\n        if note == 'o':\n            notes.append(4)\n        elif note.startswith('o|'):\n            notes.append(2)\n        elif note.startswith('.|'):\n            notes.append(1)\n        else:\n            notes.append(0)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes: List[int] = []\n    beats = 0\n    for i in music_string:\n        if i.isdigit():\n            beats += int(i)\n        else:\n            beats += beats * 4\n            notes.append(beats)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_lengths = ['0', 'o', 'o|', '.|', 'o|']\n    beats_per_not = beat_lengths.count('|')\n\n    return [int(beat) for beat in music_string.split()]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(n) for n in music_string.split(' ')]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_list = []\n    for beat in music_string.split(' '):\n        if beat == '':\n            beat_list.append(0)\n        elif beat == 'o':\n            beat_list.append(4)\n        elif beat == 'o|' or beat == 'o|':\n            beat_list.append(2)\n        elif beat == '.|' or beat == '.|':\n            beat_list.append(1)\n        elif beat == 'o.o.o.o.o.o.o':\n            beat_list.append(4)\n        elif beat == 'o.o.o.o.o.o.o.o':\n            beat_list.append(2)\n        elif beat == 'o.o.o.o.o.o.o.o':\n            beat_list.append(1)\n        else:\n            raise ValueError('Invalid musical note format \"{}\"'.format(beat))\n    return beat_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"note_list = []\n    beats = []\n    for i in range(1, len(music_string)):\n        note_list.append(i)\n        beats.append(beatless(i, note_list))\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    last_note = None\n    last_beat = 0\n    beats = 0\n    for c in music_string:\n        if c == 'o':\n            beat = 0\n        elif c == '|' or c == 'o':\n            beat = beat + 1\n            if beat > 6:\n                beat = 6\n            else:\n                beat = 0\n        elif c == '.' and last_beat < 6:\n            beat = last_beat\n            last_beat += 1\n        elif c == 'o' or c == 'o' or c == '.|' or c == '.':\n            beat = beat + 1\n            if beat > 6:\n                beat = 6\n            else:\n                beat = 0\n        else:\n            beats += 1\n            last_note = c\n            last_beat = beat\n        notes.append(beat)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n\n    for n in music_string:\n        if not n:\n            continue\n\n        if n[0] == 'o':\n            notes.append(4)\n        elif n[0] == 'o|' and n[1] == 'o':\n            notes.append(2)\n        elif n[0] == '.|' and n[1] == 'o':\n            notes.append(1)\n        else:\n            notes.append(n)\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = list()\n    beats = []\n    for note in music_string.split(' '):\n        if note[0] == 'o':\n            notes.append(note[1:])\n            beats.append(note[1:].count(' ') - 1)\n        elif note[0] == 'o|':\n            notes.append(note[1:])\n            beats.append(note[1:].count(' ') + 1)\n        elif note[0] == '.|':\n            notes.append(note[1:])\n            beats.append(note[1:].count(' ') + 2)\n        else:\n            notes.append(note[1:])\n    return notes, beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if not music_string:\n        return []\n    music_string = music_string.lower()\n    music_string = music_string.replace(\"|\", \"\")\n    notes = music_string.split(\" \")\n    beats = notes[1:].count(\" \")\n    notes = notes[:-1]\n    for i in range(len(notes) - 1):\n        if not notes[i] or beats!= len(notes[i]):\n            break\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"for beat in music_string.split('|'):\n        if beat == 'o':\n            yield 4\n        elif beat == 'o|':\n            yield 2\n        elif beat == 'o|.|':\n            yield 2\n        elif beat == 'o o|.| o| o|.|.|.|.|.| o':\n            yield 1\n        elif beat == '.|':\n            yield 1\n    return []", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # Note that we do not use any normalization since we only care about the number of beats.\n    # Each note does not last for exactly four beats.\n    # We handle both half and quarter notes.\n    #\n    # Note that we can not use one single algorithm to handle all musical notes. For example\n    # a quater note is a quarter note but this is not guaranteed because of the\n    # fact that the '|' is not part of the note.\n\n    music_string = music_string.lower()\n\n    # Loop over the notes and count how many they last.\n    for n in music_string:\n        if n.isdigit():\n            return (n - '0') * 4\n\n    # There are no notes that last exactly four beats.\n    return 0\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string is None or music_string.startswith('off'):\n        return []\n    beat_table = []\n    beats_per_beat = {}\n    for key in music_string.split('|'):\n        if key.startswith('o'):\n            beat_table.append(int(key[3:]))\n        else:\n            beat_table.append(0)\n    for beat in beat_table:\n        beats_per_beat[int(beat)] = beat\n    return beats_per_beat", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split('|')\n    return [note.count('|') for note in notes]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_str = music_string.split('|')[0]\n    if beat_str == 'o':\n        beat_str = '0'\n    beat_str = int(beat_str)\n    beat_str += 1\n    beat_str = beat_str * 4\n    beat_str += 1\n    beat_str = beat_str * 2\n    beat_str += 1\n    beat_str = beat_str * 1\n    beat_str += 1\n    beat_str = beat_str * 0\n    beat_str += 1\n    beat_str = beat_str * 0\n    beat_str += 1\n    return beat_str\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_count = 0\n    beat_name = ''\n\n    for c in music_string:\n        if c == '|':\n            beat_name += c\n            beat_count += 1\n            if beat_count == 4:\n                beat_count = 0\n                beat_name = ''\n        elif c == ':':\n            beat_name += c\n            beat_count += 1\n            if beat_count == 4:\n                beat_count = 0\n                beat_name = ''\n        elif c == 'o':\n            beat_name += c\n            beat_count += 1\n            if beat_count == 4:\n                beat_count = 0\n                beat_name = ''\n        elif c == 'o|':\n            beat_name += c\n            beat_count += 1\n            if beat_count == 4:\n                beat_count = 0\n                beat_name = ''\n        elif c == '.|':\n            beat_name += c\n            beat_count += 1\n            if beat_count == 4:\n                beat_count = 0\n                beat_name = ''\n\n    return beat_count, beat_name", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split()\n    for n in range(len(notes)):\n        note = notes[n].strip()\n        if not note:\n            continue\n        beats_per_note = int(note[0:2])\n        if beats_per_note == 0:\n            continue\n        beat = 0\n        if beats_per_note == 1:\n            beat = 1\n        elif beats_per_note == 2:\n            beat = 2\n        elif beats_per_note == 3:\n            beat = 3\n        elif beats_per_note == 4:\n            beat = 4\n        return beat\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = ['' for i in range(0, len(music_string) - 1)]\n    for i, note in enumerate(music_string):\n        if i == 0:\n            notes[i] = note\n            continue\n        if note == 'o':\n            notes[i] = 'o'\n            continue\n        if note == 'o|':\n            notes[i] = '|'\n            continue\n        if note == '.|':\n            notes[i] = '|'\n            continue\n        if note == 'o o|.| o| o|.|.|.|.|.| o o':\n            notes[i] = 'o'\n        else:\n            notes[i] = notes[i - 1] + note\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# first, do an ASCII sanity check on the string\n    notes = music_string.split()\n    if len(notes)!= 4:\n        raise ValueError(\"Expected a string with 4 notes, got {}\".format(notes))\n    if notes[0]!= 'O':\n        raise ValueError(\"Expected a string with 'O'\")\n    if notes[1]!= 'O':\n        raise ValueError(\"Expected a string with 'O'\")\n    if notes[2]!= 'O':\n        raise ValueError(\"Expected a string with 'O'\")\n    if notes[3]!= 'O':\n        raise ValueError(\"Expected a string with 'O'\")\n\n    notes = [int(n) for n in notes]\n\n    beat_length = 4\n    n = 0\n    for note in notes[1:]:\n        if note > 0:\n            beat_length += 1\n            n += 1\n\n    return [beat_length, n]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for l in music_string.split('|'):\n        if len(l) > 1:\n            beats.append(int(l))\n        else:\n            beats.append(0)\n    return beats\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_lengths = []\n    for note in music_string:\n        if note[0] == '|' or note[0] == 'o':\n            beat_lengths.append(note[1:-1])\n        elif note[0] == 'o':\n            beat_lengths.append(4)\n        elif note[0] == '.':\n            beat_lengths.append(2)\n        elif note[0] == '.o':\n            beat_lengths.append(1)\n        elif note[0] == 'o':\n            beat_lengths.append(2)\n        elif note[0] == '.o':\n            beat_lengths.append(1)\n        else:\n            raise ValueError(\"Invalid note!\")\n    return beat_lengths", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_duration = 8  # beats per note\n    beat_count = 0\n\n    note_data = music_string.split('|')[1].split('|')[0].split('|')[1:]\n\n    for note in note_data:\n        note_count = int(note.strip())\n        if note_count > beat_count:\n            beat_count = note_count\n        else:\n            beat_count += 1\n\n    return [beat_count]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_segments = []\n    for i in xrange(len(music_string)):\n        if i < len(music_string) - 4:\n            music_segments.append(i)\n        else:\n            music_segments.append(len(music_string) - i + 1)\n\n    return music_segments", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" if not music_string:\n        return []\n\n    beats = []\n\n    if music_string[-1] == 'o':\n        beats.append(0)\n    elif music_string[-1] == 'o|':\n        beats.append(1)\n    elif music_string[-1] == '.|':\n        beats.append(2)\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beatmap = {}\n    beatmap['o'] = 0\n    beatmap['o|'] = 1\n    beatmap['.|'] = 2\n    beatmap['o|o'] = 4\n    beatmap['o|o|'] = 2\n    beatmap['o|o|o'] = 4\n    beatmap['o|o|o|'] = 2\n\n    beats = music_string.split()\n    for beat in beats:\n        beatmap[beat.lower()] += 1\n\n    return beatmap", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    beat_length = len(notes)\n    for n in music_string:\n        if n in ['|', 'o', 'o', '|', '|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', '", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_number = -1\n    beats = []\n    last_beat = None\n    note_type = None\n\n    if music_string:\n        # First try to parse this string without the note part.\n        beat_number = int(music_string.strip())\n        if beat_number < 0 or beat_number > len(music_string):\n            return []\n\n        note_type = music_string[beat_number]\n        if note_type == 'o':\n            beats.append(beat_number - 1)\n            last_beat = beat_number - 1\n\n        elif note_type == 'o|':\n            beats.append(beat_number - 2)\n            last_beat = beat_number - 2\n\n        elif note_type == '.|':\n            beats.append(beat_number - 3)\n            last_beat = beat_number - 3\n\n        elif note_type == 'o':\n            beats.append(last_beat)\n            last_beat = beat_number - 1\n\n        elif note_type == 'o|':\n            beats.append(last_beat - 2)\n            last_beat = beat_number - 2\n\n        elif note_type == '.|':\n            beats.append(last_beat - 3)\n            last_beat = beat_number - 3\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_length = int(music_string.find('|') + 1)\n    beat_interval = beat_length / 4\n    beat_count = beat_length % 4\n    return beat_count, beat_interval", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split()\n    for note in notes:\n        if note[0]!= 'o':\n            continue\n        if len(note) == 1:\n            beat = 0\n        elif note[0] == 'o':\n            beat = 1\n        else:\n            beat = int(note[0]) - 1\n    return beat * 24", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if not music_string:\n        return []\n\n    beat_list = []\n    beat_index = 0\n    for note in music_string.split('|'):\n        if note.isdigit():\n            beat_list.append(beat_index + int(note))\n        elif note.isalpha():\n            beat_list.append(beat_index)\n        else:\n            raise ValueError(\"Invalid musical note found, must be an integer, or a letter\")\n\n    return beat_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# remove initial /\n    notes = music_string.split(\"/\")\n\n    beats = [note.count(\"/\") for note in notes]\n\n    # check that they are all even\n    for i, beat in enumerate(beats):\n        if beat!= i:\n            raise ValueError('Number of beats is not an even integer')\n\n    # check that we have enough beats to be a quarter note\n    for i, beat in enumerate(beats):\n        if beat % 2!= 0:\n            raise ValueError('Number of beats is not an even integer')\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"import math\n\n    # We know that the number of beats per note is 24. So we have to convert it to 24-beat\n    # Note that we can do this as the following line:\n    # >>> 24 * math.ceil(24 / 24) * math.pow(2, 24) * 24 * math.pow(2, 24)\n    # >>> 4 * math.ceil(4 / 4) * math.pow(2, 24) * 24 * math.pow(2, 24)\n    # >>> 24 * math.ceil(24 / 24) * math.pow(2, 24)\n    beat_24 = 24 * math.ceil(24 / 24)\n\n    beats = []\n    for beat in range(math.floor(math.ceil(math.pow(2, 24) / math.ceil(24) * math.pow(2, 24)))):\n        beats.append(beat_24 * beat)\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_list = []\n    for beat in music_string.split('.'):\n        beat_list.append(int(beat.replace('.', '')))\n    return beat_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Get list of notes\n    notes = [int(n) for n in music_string.split(' ')]\n    # Handle beat length\n    beat_length = (notes[0] - notes[notes.index('|')]) / 4\n\n    return [beat_length * n for n in notes]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats_per_not = 4\n    beats = []\n    current_not = 0\n\n    while current_not < len(music_string):\n        if current_not == 0:\n            if music_string[current_not - 1] == 'o':\n                beats.append(beats_per_not)\n            elif music_string[current_not - 1] == 'o|':\n                beats.append(beats_per_not / 2)\n            elif music_string[current_not - 1] == '.|':\n                beats.append(beats_per_not / 4)\n            else:\n                break\n\n        current_not += 1\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    beat_table = {0: 'o', 1: 'o|', 2: '.|', 3: 'o'}\n\n    for note in music_string.split():\n        if note.isdigit():\n            try:\n                note = int(note)\n            except ValueError:\n                if note == 0:\n                    notes.append(0)\n                else:\n                    notes.append(note)\n            else:\n                if note not in beat_table:\n                    notes.append(beat_table[note] + 1)\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for ch in music_string.split(' '):\n        if not ch.isdigit():\n            raise ValueError(\"Invalid musical note format\")\n        beats.append(int(ch))\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for index in range(music_string.count('|')):\n        beats.append(index)\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = 0\n    strings = music_string.split(\" \")\n    for string in strings:\n        if len(string) > 3:\n            beats += int(string[:3])\n        elif len(string) > 2:\n            beats += int(string[:2])\n        elif len(string) > 1:\n            beats += int(string)\n        else:\n            raise ValueError(\"Invalid number of beats in music string: {}\".format(string))\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = [ord(n) for n in music_string.split(' ') if n.isdigit()]\n    notes = [ord(n) * 4 for n in notes]\n    notes = [ord(n) * 4 + 1 for n in notes]\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split(' ')\n    beat_numbers = []\n    beat_lengths = []\n    for note in notes[1:-1]:\n        if note == 'o':\n            beat_lengths.append(4)\n            beat_numbers.append(4)\n        elif note in ['o|', '.|']:\n            beat_lengths.append(2)\n            beat_numbers.append(2)\n        else:\n            beat_lengths.append(1)\n            beat_numbers.append(1)\n    return beat_lengths, beat_numbers", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split()\n    # we use (\"|\" or \"o\") as delimiter for playing a note. This is a bug in GNU regex\n    # (https://www.freeglobals.org/re/GNURegex/issues/178)\n    beat_labels = {\n        \"\": \"e\",\n        \"|\": \"e\",\n        \"|o\": \"e\",\n        \"|e\": \"e\",\n        \"|o|\": \"e\",\n        \"|e|\": \"e\",\n        \"|o|o|\": \"e\",\n    }\n\n    beat_number = int(notes[0])\n    beat_name = beat_labels.get(notes[2:][0])\n    if beat_number not in beat_labels:\n        raise ValueError(\"invalid beat number: %r\" % beat_number)\n\n    return [beat_number, beat_name]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_pattern = re.compile('^(o|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_count = 0\n    beat_count = len(music_string) / 4\n    beat_count -= 1\n    # Now use 4,2,1 to get all the rest of the note.\n    beat_count += 2\n    beat_count -= 1\n    return [beat_count for beat_count in range(4, beat_count)]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"note_list = []\n    notes_count = 0\n    beat_count = 0\n    beat_length = 0\n    beat_duration = 0\n    count = 0\n    doffset = 0\n    note = None\n    for ch in music_string:\n        if ch == 'o':\n            note = 'o'\n            note_list.append(note_count)\n            note_count += 1\n            beat_count += 4\n            beat_length += beat_duration\n            beat_duration = 0\n        elif ch == 'o|':\n            note = 'o|'\n            note_list.append(note_count)\n            note_count += 1\n            beat_count += 2\n            beat_length += beat_duration\n            beat_duration = 0\n        elif ch == '.|':\n            note = '.|'\n            note_list.append(note_count)\n            note_count += 1\n            beat_count += 1\n            beat_length += beat_duration\n            beat_duration = 0\n        else:\n            continue\n        if note == 'o':\n            continue\n        beat_duration = beat_length / note\n        if beat_duration < 4:\n            doffset += doffset\n        note_list.append(doffset)\n        doffset += beat_duration * 4\n        beat_count += 1\n        beat_length = 0\n        note = None\n\n    return note_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for note in music_string.split('|'):\n        if note == '.':\n            if beats[-1] > 0:\n                break\n            else:\n                beats.append(0)\n        else:\n            beats.append(int(note))\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    notes = [notes.append(int(i, 16)) for i in music_string.split('|')]\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_list = []\n    notes = music_string.split(\"|\")\n    for note in notes:\n        if note == \".\":\n            break\n        elif note == \"|\":\n            music_list.append(int(note))\n        else:\n            music_list.append(note * 4)\n    return music_list\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"for c in music_string:\n        if c == 'o':\n            return 4 * [int(c) for c in music_string[1:]]\n        elif c in ['|', 'o'] and c not in ['o|', '.|'] and c not in ['o|', 'o|', '.|']:\n            return 2 * [int(c) for c in music_string[1:]]\n        elif c in ['o|', '.|'] and c not in ['o|', 'o|', '.|']:\n            return 1 * [int(c) for c in music_string[1:]]\n        else:\n            return 3 * [int(c) for c in music_string[1:]]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    beats = []\n    beat_lengths = []\n\n    for char in music_string:\n        if char == 'o':\n            notes.append(4)\n            beat_lengths.append(2)\n            beat_lengths.append(4)\n            beat_lengths.append(4)\n            beat_lengths.append(4)\n            beat_lengths.append(4)\n            beat_lengths.append(4)\n        elif char == 'o|':\n            notes.append(2)\n            beat_lengths.append(1)\n            beat_lengths.append(2)\n            beat_lengths.append(1)\n            beat_lengths.append(1)\n            beat_lengths.append(1)\n            beat_lengths.append(1)\n        elif char == '.|':\n            notes.append(1)\n            beat_lengths.append(1)\n            beat_lengths.append(1)\n            beat_lengths.append(1)\n            beat_lengths.append(1)\n            beat_lengths.append(1)\n            beat_lengths.append(1)\n\n    return notes, beat_lengths", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beatmap = []\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(0)\n    beatmap.append(", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i, letter in enumerate(music_string):\n        if letter == 'o':\n            notes.append(i)\n        elif letter == 'o|':\n            notes.append(i * 2)\n        elif letter == '.|':\n            notes.append(i * 4)\n        elif letter == '|':\n            notes.append(i * 6)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split(' ')\n    notes = [int(x) for x in notes]\n    return [note for note in notes if note!= '.']", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n\n    for beat in music_string:\n        result.append(int(beat, 0))\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Get the duration of each beat\n    duration = int(music_string[::-1], 16)\n\n    # Parse the beats into a list of integers\n    beat_list = []\n    for beat in range(1, len(duration) + 1):\n        # Start a new list with length 1\n        beat_list.append(0)\n\n        # Find the beat and add the duration of the beat to the list\n        beat_index = beat - duration[0]\n        beat_list[beat_index] += duration[beat_index]\n        duration = duration[beat_index + 1]\n\n    return beat_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split('|')\n    if len(notes)!= 4:\n        raise Exception('must have exactly 4 notes')\n    if notes[0] not in ['o', 'o|', '.|']:\n        raise Exception('not an o or o| note')\n    if notes[1] not in ['o|', '.|']:\n        raise Exception('not an o| or o|| note')\n    if notes[2] not in ['o|', '.|']:\n        raise Exception('not an o| or o| note')\n    if notes[3] not in ['o|', '.|']:\n        raise Exception('not an o| or o| note')\n    return [note for note in notes]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"audio_blocks: List[str] = []\n    for note in music_string.split():\n        if note.isdigit():\n            audio_blocks.append(note)\n        elif note.isalpha():\n            audio_blocks.append(note.capitalize())\n        else:\n            raise ValueError(\"Invalid note format %s\" % note)\n    audio_blocks.sort()\n    return audio_blocks\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(c) for c in music_string if c == 'o']", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for n in music_string.split('|')[1:]:\n        notes.extend(map(int, n.split()))\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"with open(music_string, 'r') as music_file:\n        for line in music_file:\n            beat_number = int(line.split()[0])\n            if beat_number >= 0:\n                return [beat_number]\n\n    return None", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.strip().split()\n    beats_per_note = len(notes) / 4\n    beat_count = 0\n    for n in notes:\n        # This is a few tricky bitwise OR operations\n        # These would work, but they require more work than necessary\n        if beat_count >= beats_per_note - 1:\n            continue\n        beat_count += 1\n        beats_per_note -= 1\n        if beats_per_note == 0:\n            break\n        beat_count = 0\n\n    return beat_count", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split()\n    notes = [int(n) for n in notes if int(n)]\n    if len(notes) < 4:\n        raise ValueError(\"invalid music string: {}\".format(music_string))\n\n    beat_length = notes[3]\n    beat_length = beat_length % 4\n    beat_length = beat_length / 4\n\n    beat_length = beat_length + 1\n    if beat_length < 4:\n        beat_length = 4\n    beat_length = beat_length + 1\n\n    return [int(beat) for beat in notes]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(i) for i in re.findall(r'[^|]*', music_string)]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for beat in music_string:\n        try:\n            notes.append(int(beat, 16))\n        except ValueError:\n            notes.append(0)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"note_lengths = {}\n    notes = []\n    beat_length = 0\n    beat_offset = 0\n\n    while True:\n        break_loop = True\n        for i, j in enumerate(music_string):\n            if i == 0:\n                break_loop = False\n            if i > 0 and break_loop:\n                break_loop = False\n                # '|' means half note\n                if i < note_lengths.keys():\n                    # the note has the same beat length as the previous note\n                    if beat_length <= note_lengths[note_lengths.keys() - 1].get('beat_length', 0):\n                        beat_length += note_lengths[note_lengths.keys() - 1].get('beat_length', 0)\n                        beat_offset += note_lengths[note_lengths.keys() - 1].get('beat_offset', 0)\n                    break_loop = False\n                    beat_length = note_lengths[note_lengths.keys() - 1].get('beat_length', 0)\n                    beat_offset = note_lengths[note_lengths.keys() - 1].get('beat_offset', 0)\n                    notes.append(notes.pop())\n                    notes.append(notes.pop())\n                    notes.append(notes.pop())\n                    notes.append(notes.pop", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# 'o|' is used to represent a quarter note\n    # 'o|o|o' is used to represent a half note\n    # 'o|o|o|o' is used to represent a whole note\n    # '.' is used to represent an octave\n    # '.'|' is used to represent a quarter note\n    # '.'|'|' is used to represent a half note\n    # '.'|'|'|' is used to represent a whole note\n    return [int(s) for s in music_string.split('|')]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(ch) for ch in music_string.split()]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string == '':\n        return []\n    beat_list = music_string.split()\n    beat_list = beat_list[:4]\n    beat_list = beat_list[-4:]\n    beat_list = beat_list.replace('|', 'o').replace('O', '|').replace('.', '|').replace('.', '|').replace('.', '|')\n\n    return beat_list"]]