[["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note[2:])\n        elif note.startswith('o|'):\n            notes.append(note[2:])\n        elif note.startswith('.|'):\n            notes.append(note[2:])\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') + 1)\n        elif note.startswith('|'):\n            notes.append(note.count('|') + 1)\n        elif note.startswith('.'):\n            notes.append(note.count('.') + 1)\n        elif note.startswith('.'):\n            notes.append(note.count('.') + 1)\n        elif note.startswith('o'):\n            notes.append(note.count('o') + 1)\n        elif note.startswith('.'):\n            notes.append(note.count('.') + 1)\n        elif note.startswith('.'):\n            notes.append(note.count('.') + 1)\n        elif note.startswith('o'):\n            notes.append(note.count('o') + 1)\n        elif note.startswith('.'):\n            notes.append(note.count('.') + 1)\n        elif note.startswith('.')", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_length = 0\n    beat_count = 0\n    beat = 0\n    beat_length = 0\n    beat_count = 0\n    beat = 0\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            beat_length += 4\n        elif music_string[i] == 'o|':\n            beat_length += 2\n        elif music_string[i] == '.|':\n            beat_length += 1\n        elif music_string[i] == 'o':\n            beat_count += 4\n        elif music_string[i] == 'o|':\n            beat_count += 2\n        elif music_string[i] == '.|':\n            beat_count += 1\n        elif music_string[i] == 'o':\n            beat += 4\n        elif music_string[i] == 'o|':\n            beat += 2\n        elif music_string[i] == '.|':\n            beat += 1\n        elif music_string[i] == 'o':\n            beat += 4\n        elif music_string[i] == 'o|':\n            beat += 2\n        elif music_string[i] == '.|':\n            beat += 1\n        elif music_string[i] == 'o':\n            beat += 4\n        elif music_string[i] == 'o|':\n            beat += 2\n        elif music_string[i] == '.|':\n            beat += 1\n        elif music_string[i] == 'o", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') + 1)\n        elif note.startswith('o|'):\n            notes.append(note.count('o') + 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('o') + 3)\n        else:\n            notes.append(note.count('o') + 4)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for line in music_string.split('\\n'):\n        if line.startswith('|'):\n            notes.append(int(line[2:]))\n        else:\n            notes.append(int(line))\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i + 1)\n        elif music_string[i] == '.|':\n            notes.append(i + 2)\n        elif music_string[i] == 'o|':\n            notes.append(i + 3)\n        elif music_string[i] == 'o|':\n            notes.append(i + 4)\n        elif music_string[i] == 'o|':\n            notes.append(i + 5)\n        elif music_string[i] == 'o|':\n            notes.append(i + 6)\n        elif music_string[i] == 'o|':\n            notes.append(i + 7)\n        elif music_string[i] == 'o|':\n            notes.append(i + 8)\n        elif music_string[i] == 'o|':\n            notes.append(i + 9)\n        elif music_string[i] == 'o|':\n            notes.append(i + 10)\n        elif music_string[i] == 'o|':\n            notes.append(i + 11)\n        elif music_string[i] == 'o|':\n            notes.append(i + 12)\n        elif music_string[i] == 'o", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') * 4)\n        elif note.startswith('o|'):\n            notes.append(note.count('o') * 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('o') * 1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note[2:].count('.') - 1)\n        elif note.startswith('o|'):\n            notes.append(note[2:].count('.') - 2)\n        elif note.startswith('.|'):\n            notes.append(note[2:].count('.') - 3)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') + 1)\n        elif note.startswith('|'):\n            notes.append(note.count('|') + 1)\n        else:\n            notes.append(note.count('.') + 1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_length = 0\n    beat_count = 0\n    beat = 0\n    for note in music_string:\n        if note == 'o':\n            beat_length += 4\n            beat_count += 1\n        elif note == 'o|':\n            beat_length += 2\n            beat_count += 1\n        elif note == '.|':\n            beat_length += 1\n            beat_count += 1\n        elif note == 'o|':\n            beat_length += 1\n            beat_count += 1\n        elif note == 'o|':\n            beat_length += 1\n            beat_count += 1\n        elif note == 'o|':\n            beat_length += 1\n            beat_count += 1\n        elif note == 'o|':\n            beat_length += 1\n            beat_count += 1\n        elif note == 'o|':\n            beat_length += 1\n            beat_count += 1\n        elif note == 'o|':\n            beat_length += 1\n            beat_count += 1\n        elif note == 'o|':\n            beat_length += 1\n            beat_count += 1\n        elif note == 'o|':\n            beat_length += 1\n            beat_count += 1\n        elif note == 'o|':\n            beat_length += 1\n            beat_count += 1\n        elif note == 'o|':\n            beat_length += 1\n            beat_count += 1\n        elif note", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_lengths = []\n    for beat in music_string.split(' '):\n        if beat.startswith('o'):\n            beat_lengths.append(4)\n        elif beat.startswith('o|'):\n            beat_lengths.append(2)\n        elif beat.startswith('.|'):\n            beat_lengths.append(1)\n    return beat_lengths", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_length = 0\n    beat_count = 0\n    beat = 0\n    notes = []\n    for line in music_string.split('\\n'):\n        if line.startswith('|'):\n            beat = beat_length\n            beat_length = 0\n            beat_count += 1\n            notes.append(beat)\n            beat = 0\n        elif line.startswith('.'):\n            beat = beat_length\n            beat_length = 0\n            beat_count += 1\n            notes.append(beat)\n            beat = 0\n        elif line.startswith('o'):\n            beat = beat_length\n            beat_length = 0\n            beat_count += 1\n            notes.append(beat)\n            beat = 0\n        elif line.startswith('o|'):\n            beat = beat_length\n            beat_length = 0\n            beat_count += 1\n            notes.append(beat)\n            beat = 0\n        elif line.startswith('.|'):\n            beat = beat_length\n            beat_length = 0\n            beat_count += 1\n            notes.append(beat)\n            beat = 0\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_lengths = []\n    beat_lengths.append(0)\n    for beat in music_string.split('|'):\n        if beat.startswith('o'):\n            beat_lengths.append(4)\n        elif beat.startswith('o|'):\n            beat_lengths.append(2)\n        elif beat.startswith('.|'):\n            beat_lengths.append(1)\n    return beat_lengths", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i + 1)\n        elif music_string[i] == 'o|':\n            notes.append(i + 2)\n        elif music_string[i] == '.|':\n            notes.append(i + 3)\n        else:\n            notes.append(i + 4)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for beat in music_string.split('|'):\n        if beat.isdigit():\n            beats.append(int(beat))\n        else:\n            raise ValueError('Invalid musical note format')\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') * 4)\n        elif note.startswith('o|'):\n            notes.append(note.count('o') * 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('o') * 1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for beat in music_string.split('|'):\n        if beat.startswith('o'):\n            beats.append(4)\n        elif beat.startswith('o|'):\n            beats.append(2)\n        elif beat.startswith('.|'):\n            beats.append(1)\n        else:\n            raise ValueError('Invalid musical note format')\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for note in music_string.split('|'):\n        if note.isdigit():\n            beats.append(int(note))\n        else:\n            beats.append(0)\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i + 1)\n        elif music_string[i] == '.|':\n            notes.append(i + 2)\n        elif music_string[i] == 'o|':\n            notes.append(i + 3)\n        elif music_string[i] == 'o|':\n            notes.append(i + 4)\n        elif music_string[i] == 'o|':\n            notes.append(i + 5)\n        elif music_string[i] == 'o|':\n            notes.append(i + 6)\n        elif music_string[i] == 'o|':\n            notes.append(i + 7)\n        elif music_string[i] == 'o|':\n            notes.append(i + 8)\n        elif music_string[i] == 'o|':\n            notes.append(i + 9)\n        elif music_string[i] == 'o|':\n            notes.append(i + 10)\n        elif music_string[i] == 'o|':\n            notes.append(i + 11)\n        elif music_string[i] == 'o|':\n            notes.append(i + 12)\n        elif music_string[i] == 'o", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') + 4)\n        elif note.startswith('o|'):\n            notes.append(note.count('o|') + 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('.|') + 1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') * 4)\n        elif note.startswith('o|'):\n            notes.append(note.count('o') * 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('o') * 1)\n        else:\n            notes.append(note.count('.') * 4)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for note in music_string.split('|'):\n        if note.isdigit():\n            beats.append(int(note))\n        else:\n            beats.append(0)\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_lengths = []\n    for beat in music_string.split('|'):\n        beat_lengths.append(int(beat.strip()))\n    return beat_lengths", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split('|')\n    beat_count = 0\n    for note in notes:\n        if note.isdigit():\n            beat_count += 1\n        else:\n            raise ValueError('Invalid note format')\n    return beat_count", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note[2:].count('.') - 1)\n        elif note.startswith('o|'):\n            notes.append(note[2:].count('.') - 1)\n        elif note.startswith('.|'):\n            notes.append(note[2:].count('.') - 1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split('|')\n    beats = [int(note) for note in notes]\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split(' '):\n        if note.startswith('o'):\n            notes.append(note.count('|') * 4)\n        elif note.startswith('o|'):\n            notes.append(note.count('|') * 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('|') * 1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split('|')\n    beat_count = 0\n    for note in notes:\n        if note.isdigit():\n            beat_count += int(note)\n        else:\n            beat_count += 1\n    return beat_count", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.isdigit():\n            notes.append(int(note))\n        else:\n            notes.append(note)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split('|')\n    notes = [int(n) for n in notes]\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i + 1)\n        elif music_string[i] == '.|':\n            notes.append(i + 2)\n        elif music_string[i] == 'o|o':\n            notes.append(i + 3)\n        elif music_string[i] == 'o|o|':\n            notes.append(i + 4)\n        elif music_string[i] == 'o|o|o':\n            notes.append(i + 5)\n        elif music_string[i] == 'o|o|o|o':\n            notes.append(i + 6)\n        elif music_string[i] == 'o|o|o|o|o':\n            notes.append(i + 7)\n        elif music_string[i] == 'o|o|o|o|o|o':\n            notes.append(i + 8)\n        elif music_string[i] == 'o|o|o|o|o|o|o':\n            notes.append(i + 9)\n        elif music_string[i] == 'o|o|o|o|o|o|o|o':", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i * 2)\n            continue\n        if music_string[i] == '.|':\n            notes.append(i * 4)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i * 4)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i * 4)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i * 4)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i * 4)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i * 4)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i * 4)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i * 4)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i * 4)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i * 4)\n            continue\n        if", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') + 1)\n        elif note.startswith('|'):\n            notes.append(note.count('|') + 1)\n        elif note.startswith('.'):\n            notes.append(note.count('.') + 1)\n        elif note.startswith('.'):\n            notes.append(note.count('.') + 1)\n        elif note.startswith('o'):\n            notes.append(note.count('o') + 1)\n        elif note.startswith('.'):\n            notes.append(note.count('.') + 1)\n        elif note.startswith('.'):\n            notes.append(note.count('.') + 1)\n        elif note.startswith('o'):\n            notes.append(note.count('o') + 1)\n        elif note.startswith('.'):\n            notes.append(note.count('.') + 1)\n        elif note.startswith('.')", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i + 1)\n        elif music_string[i] == 'o|':\n            notes.append(i + 2)\n        elif music_string[i] == '.|':\n            notes.append(i + 3)\n        else:\n            notes.append(i + 4)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for note in music_string.split('|'):\n        if note.isdigit():\n            beats.append(int(note))\n        else:\n            beats.append(0)\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for beat in music_string.split('|'):\n        if beat.startswith('o'):\n            beats.append(int(beat[2:]))\n        elif beat.startswith('o|'):\n            beats.append(int(beat[2:]) * 2)\n        elif beat.startswith('.|'):\n            beats.append(int(beat[2:]) * 1)\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note[2:])\n        elif note.startswith('o|'):\n            notes.append(note[2:])\n        elif note.startswith('.|'):\n            notes.append(note[2:])\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split('|')\n    notes = [int(note) for note in notes]\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for beat in music_string.split('|'):\n        if beat.startswith('o'):\n            beats.append(4)\n        elif beat.startswith('o|'):\n            beats.append(2)\n        elif beat.startswith('.|'):\n            beats.append(1)\n        else:\n            raise ValueError('Invalid musical note format')\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') + 1)\n        elif note.startswith('o|'):\n            notes.append(note.count('o|') + 1)\n        elif note.startswith('.|'):\n            notes.append(note.count('.|') + 1)\n        else:\n            notes.append(note.count('.') + 1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split(' '):\n        if note.startswith('o'):\n            notes.append(note.count('|') + 1)\n        elif note.startswith('o|'):\n            notes.append(note.count('|') + 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('|') + 3)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_lengths = []\n    beat_lengths.append(0)\n    for beat in music_string.split('|'):\n        if beat.isdigit():\n            beat_lengths.append(int(beat))\n        else:\n            beat_lengths.append(4)\n    return beat_lengths", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split(' '):\n        if note.startswith('o'):\n            notes.append(note.count('|') - 1)\n        elif note.startswith('o|'):\n            notes.append(note.count('|') - 1)\n        elif note.startswith('.|'):\n            notes.append(note.count('|') - 1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.isdigit():\n            notes.append(int(note))\n        else:\n            notes.append(note.strip())\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split(' '):\n        if note.startswith('o'):\n            notes.append(note.count('|') - 1)\n        elif note.startswith('o|'):\n            notes.append(note.count('|') - 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('|') - 3)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_lengths = [\n        int(x) for x in music_string.split('|') if x.isdigit()]\n    beat_lengths = [\n        int(x) for x in beat_lengths if x > 0]\n    beat_lengths = [\n        int(x) for x in beat_lengths if x < 0]\n    beat_lengths = [\n        int(x) for x in beat_lengths if x == 0]\n    beat_lengths = [\n        int(x) for x in beat_lengths if x == 1]\n    beat_lengths = [\n        int(x) for x in beat_lengths if x == 2]\n    beat_lengths = [\n        int(x) for x in beat_lengths if x == 3]\n    beat_lengths = [\n        int(x) for x in beat_lengths if x == 4]\n    beat_lengths = [\n        int(x) for x in beat_lengths if x == 5]\n    beat_lengths = [\n        int(x) for x in beat_lengths if x == 6]\n    beat_lengths = [\n        int(x) for x in beat_lengths if x == 7]\n    beat_lengths = [\n        int(x) for x in beat_length", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for line in music_string.split('\\n'):\n        if line.startswith('o'):\n            notes.append(4)\n        elif line.startswith('o|'):\n            notes.append(2)\n        elif line.startswith('.|'):\n            notes.append(1)\n        else:\n            notes.append(0)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split('|')\n    beats = []\n    for note in notes:\n        if note.isdigit():\n            beats.append(int(note))\n        else:\n            beats.append(0)\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i + 1)\n        elif music_string[i] == '.|':\n            notes.append(i + 2)\n        elif music_string[i] == 'o|o':\n            notes.append(i + 3)\n        elif music_string[i] == 'o|o|':\n            notes.append(i + 4)\n        elif music_string[i] == 'o|o|o':\n            notes.append(i + 5)\n        elif music_string[i] == 'o|o|o|o':\n            notes.append(i + 6)\n        elif music_string[i] == 'o|o|o|o|o':\n            notes.append(i + 7)\n        elif music_string[i] == 'o|o|o|o|o|o':\n            notes.append(i + 8)\n        elif music_string[i] == 'o|o|o|o|o|o|o':\n            notes.append(i + 9)\n        elif music_string[i] == 'o|o|o|o|o|o|o|o':", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('|') - 1)\n        elif note.startswith('o|'):\n            notes.append(note.count('|') - 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('|') - 3)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i + 1)\n        elif music_string[i] == '.|':\n            notes.append(i + 2)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split(' '):\n        if note.startswith('o'):\n            notes.append(note.count('o') * 4)\n        elif note.startswith('o|'):\n            notes.append(note.count('o|') * 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('.|') * 1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_length = 0\n    beat_count = 0\n    beat = 0\n    notes = []\n    for line in music_string.split('\\n'):\n        if line.startswith('|'):\n            beat = line.split()[1]\n            beat_length += beat.count('|')\n            beat_count += 1\n        elif line.startswith('.'):\n            beat = line.split()[1]\n            beat_length += beat.count('.')\n            beat_count += 1\n        else:\n            notes.append(beat_length)\n            beat = 0\n            beat_count += 1\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_lengths = []\n    beat_lengths.append(0)\n    for beat in music_string:\n        if beat == 'o':\n            beat_lengths.append(4)\n        elif beat == 'o|':\n            beat_lengths.append(2)\n        elif beat == '.|':\n            beat_lengths.append(1)\n        else:\n            raise ValueError('Invalid beat length: {}'.format(beat))\n    return beat_lengths", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('|') - 1)\n        elif note.startswith('o|'):\n            notes.append(note.count('|') - 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('|') - 3)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_lengths = []\n    for beat in music_string.split('|'):\n        if beat.startswith('o'):\n            beat_lengths.append(4)\n        elif beat.startswith('o|'):\n            beat_lengths.append(2)\n        elif beat.startswith('.|'):\n            beat_lengths.append(1)\n    return beat_lengths", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i + 1)\n        elif music_string[i] == '.|':\n            notes.append(i + 2)\n        elif music_string[i] == 'o|':\n            notes.append(i + 3)\n        elif music_string[i] == 'o|':\n            notes.append(i + 4)\n        elif music_string[i] == 'o|':\n            notes.append(i + 5)\n        elif music_string[i] == 'o|':\n            notes.append(i + 6)\n        elif music_string[i] == 'o|':\n            notes.append(i + 7)\n        elif music_string[i] == 'o|':\n            notes.append(i + 8)\n        elif music_string[i] == 'o|':\n            notes.append(i + 9)\n        elif music_string[i] == 'o|':\n            notes.append(i + 10)\n        elif music_string[i] == 'o|':\n            notes.append(i + 11)\n        elif music_string[i] == 'o|':\n            notes.append(i + 12)\n        elif music_string[i] == 'o", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split('|')\n    beats = [int(note) for note in notes]\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('|') - 1)\n        elif note.startswith('o|'):\n            notes.append(note.count('|') - 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('|') - 3)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i + 1)\n        elif music_string[i] == 'o|':\n            notes.append(i + 2)\n        elif music_string[i] == '.|':\n            notes.append(i + 3)\n        else:\n            notes.append(i + 4)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.isdigit():\n            notes.append(int(note))\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') * 4)\n        elif note.startswith('o|'):\n            notes.append(note.count('o|') * 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('.|') * 1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note[2:])\n        elif note.startswith('|'):\n            notes.append(note[2:])\n        elif note.startswith('.'):\n            notes.append(note[2:])\n        elif note.startswith('.'):\n            notes.append(note[2:])\n        elif note.startswith('o'):\n            notes.append(note[2:])\n        elif note.startswith('.'):\n            notes.append(note[2:])\n        elif note.startswith('o'):\n            notes.append(note[2:])\n        elif note.startswith('.'):\n            notes.append(note[2:])\n        elif note.startswith('o'):\n            notes.append(note[2:])\n        elif note.startswith('.'):\n            notes.append(note[2:])\n        elif note.startswith('o'):\n            notes.append(note[2:])\n        elif note.startswith('.'):\n            notes.append(note[2:])\n        elif note", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.isdigit():\n            notes.append(int(note))\n        else:\n            notes.append(note.ljust(4, '0'))\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_lengths = []\n    for beat in music_string.split('|'):\n        beat_lengths.append(int(beat.strip()))\n    return beat_lengths", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for line in music_string.split('\\n'):\n        if line.startswith('o'):\n            notes.append(int(line.split()[1]))\n        elif line.startswith('o|'):\n            notes.append(int(line.split()[1]))\n        elif line.startswith('.|'):\n            notes.append(int(line.split()[1]))\n        else:\n            notes.append(0)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_lengths = []\n    for beat in music_string.split('|'):\n        beat_lengths.append(int(beat.strip()))\n    return beat_lengths", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i + 1)\n        elif music_string[i] == 'o|':\n            notes.append(i + 2)\n        elif music_string[i] == '.|':\n            notes.append(i + 3)\n        elif music_string[i] == 'o|':\n            notes.append(i + 4)\n        elif music_string[i] == 'o|':\n            notes.append(i + 5)\n        elif music_string[i] == 'o|':\n            notes.append(i + 6)\n        elif music_string[i] == 'o|':\n            notes.append(i + 7)\n        elif music_string[i] == 'o|':\n            notes.append(i + 8)\n        elif music_string[i] == 'o|':\n            notes.append(i + 9)\n        elif music_string[i] == 'o|':\n            notes.append(i + 10)\n        elif music_string[i] == 'o|':\n            notes.append(i + 11)\n        elif music_string[i] == 'o|':\n            notes.append(i + 12)\n        elif music_string[i] == 'o|':\n            notes.append(i + 13)\n        elif music_string[i] ==", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i + 1)\n        elif music_string[i] == 'o|':\n            notes.append(i + 2)\n        elif music_string[i] == '.|':\n            notes.append(i + 3)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i + 1)\n        elif music_string[i] == 'o|':\n            notes.append(i + 2)\n        elif music_string[i] == '.|':\n            notes.append(i + 3)\n        elif music_string[i] == 'o|o':\n            notes.append(i + 4)\n        elif music_string[i] == 'o|o|':\n            notes.append(i + 5)\n        elif music_string[i] == 'o|o|o':\n            notes.append(i + 6)\n        elif music_string[i] == 'o|o|o|o':\n            notes.append(i + 7)\n        elif music_string[i] == 'o|o|o|o|o':\n            notes.append(i + 8)\n        elif music_string[i] == 'o|o|o|o|o|o':\n            notes.append(i + 9)\n        elif music_string[i] == 'o|o|o|o|o|o|o':\n            notes.append(i + 10)\n        elif music_string[i] == 'o|o|o|o|o|o|o|o", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split('|')\n    beat_count = 0\n    for note in notes:\n        if note.startswith('o'):\n            beat_count += 4\n        elif note.startswith('o|'):\n            beat_count += 2\n        elif note.startswith('.|'):\n            beat_count += 1\n        else:\n            beat_count += 0\n    return beat_count", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note[2:].count('.') + 1)\n        elif note.startswith('o|'):\n            notes.append(note[2:].count('.') + 2)\n        elif note.startswith('.|'):\n            notes.append(note[2:].count('.') + 3)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_lengths = []\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_count = 0\n    beat_length = 0\n    beat_duration = 0\n    beat_duration_fraction = 0\n    beat_duration_fraction_fraction = 0\n    beat_duration_fraction_fraction_fraction = 0\n    beat_duration_fraction_fraction_fraction_fraction = 0\n    beat_duration_fraction_fraction_fraction_fraction_fraction = 0\n    beat_duration_fraction_fraction_fraction_fraction_fraction_fraction = 0\n    beat_duration_fraction_fraction_fraction_fraction_fraction_fraction_fraction = 0\n    beat_duration_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction = 0\n    beat_duration_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction = 0\n    beat_duration_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction = 0\n    beat_duration_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction = 0\n    beat_duration_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction = 0\n    beat_duration_fraction_fraction_fraction_fraction", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') * 4)\n        elif note.startswith('o|'):\n            notes.append(note.count('o') * 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('o') * 1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') + 1)\n        elif note.startswith('|'):\n            notes.append(note.count('|') + 1)\n        else:\n            notes.append(note.count('.') + 1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split('|')\n    beats = [int(note) for note in notes]\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_lengths = []\n    beat_lengths.append(0)\n    for beat in music_string.split('|'):\n        beat_lengths.append(int(beat.strip()))\n    return beat_lengths", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i + 4)\n        elif music_string[i] == 'o|':\n            notes.append(i + 2)\n        elif music_string[i] == '.|':\n            notes.append(i + 1)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('|') - 1)\n        elif note.startswith('o|'):\n            notes.append(note.count('|') - 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('|') - 3)\n        else:\n            notes.append(note.count('|') - 4)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 1)\n            continue\n        if music_string[i] == '.|':\n            notes.append(i + 2)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 3)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 4)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 5)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 6)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 7)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 8)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 9)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 10)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 11)\n            continue\n        if", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 1)\n            continue\n        if music_string[i] == '.|':\n            notes.append(i + 2)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 3)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 4)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 5)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 6)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 7)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 8)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 9)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 10)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 11)\n            continue\n        if", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for line in music_string.split('\\n'):\n        if line.startswith('o'):\n            notes.append(int(line.split()[1]))\n        elif line.startswith('o|'):\n            notes.append(int(line.split()[1]) / 2)\n        elif line.startswith('.|'):\n            notes.append(int(line.split()[1]) / 4)\n        else:\n            notes.append(0)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 1)\n            continue\n        if music_string[i] == '.|':\n            notes.append(i + 2)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 3)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 4)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 5)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 6)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 7)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 8)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 9)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 10)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 11)\n            continue\n        if", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_length = 0\n    beat_count = 0\n    beat = 0\n    beat_length = 0\n    beat_count = 0\n    beat = 0\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            beat_length += 4\n            beat_count += 1\n        elif music_string[i] == 'o|':\n            beat_length += 2\n            beat_count += 1\n        elif music_string[i] == '.|':\n            beat_length += 1\n            beat_count += 1\n        elif music_string[i] == 'o':\n            beat_length += 1\n            beat_count += 1\n        elif music_string[i] == 'o|':\n            beat_length += 1\n            beat_count += 1\n        elif music_string[i] == '.|':\n            beat_length += 1\n            beat_count += 1\n        elif music_string[i] == 'o':\n            beat_length += 1\n            beat_count += 1\n        elif music_string[i] == 'o|':\n            beat_length += 1\n            beat_count += 1\n        elif music_string[i] == '.|':\n            beat_length += 1\n            beat_count += 1\n        elif music_string[i] == 'o':\n            beat_length += 1\n            beat_count += 1\n        elif music_string[i] == 'o|':\n            beat_length += 1\n            beat_count += 1", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('|') - 1)\n        elif note.startswith('o|'):\n            notes.append(note.count('|') - 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('|') - 3)\n        else:\n            notes.append(note.count('|') - 4)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for beat in music_string.split('|'):\n        if beat.startswith('o'):\n            beats.append(4)\n        elif beat.startswith('o|'):\n            beats.append(2)\n        elif beat.startswith('.|'):\n            beats.append(1)\n        else:\n            beats.append(0)\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if i % 2:\n            notes.append(i * 2)\n        else:\n            notes.append(i * 4)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') + 1)\n        elif note.startswith('|'):\n            notes.append(note.count('|') + 1)\n        else:\n            notes.append(note.count('.') + 1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 1)\n            continue\n        if music_string[i] == '.|':\n            notes.append(i + 2)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 3)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 4)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 5)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 6)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 7)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 8)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 9)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 10)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 11)\n            continue\n        if", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') + 1)\n        elif note.startswith('|'):\n            notes.append(note.count('|') + 1)\n        elif note.startswith('.'):\n            notes.append(note.count('.') + 1)\n        elif note.startswith('.'):\n            notes.append(note.count('.') + 1)\n        elif note.startswith('.'):\n            notes.append(note.count('.') + 1)\n        elif note.startswith('o'):\n            notes.append(note.count('o') + 1)\n        elif note.startswith('o'):\n            notes.append(note.count('o') + 1)\n        elif note.startswith('o'):\n            notes.append(note.count('o') + 1)\n        elif note.startswith('o'):\n            notes.append(note.count('o') + 1)\n        elif note.startswith('o'):\n            notes.append", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for note in music_string.split('|'):\n        if note.isdigit():\n            beats.append(int(note))\n        else:\n            beats.append(0)\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') * 4)\n        elif note.startswith('o|'):\n            notes.append(note.count('o') * 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('o') * 1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 1)\n            continue\n        if music_string[i] == '.|':\n            notes.append(i + 2)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 3)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 4)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 5)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 6)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 7)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 8)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 9)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 10)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i + 11)\n            continue\n        if", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for line in music_string.split('\\n'):\n        if line.startswith('|'):\n            notes.append(int(line.split()[1]))\n        elif line.startswith('.'):\n            notes.append(int(line.split()[1]))\n        elif line.startswith('o'):\n            notes.append(int(line.split()[1]))\n        elif line.startswith('o|'):\n            notes.append(int(line.split()[1]))\n        elif line.startswith('.|'):\n            notes.append(int(line.split()[1]))\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') * 4)\n        elif note.startswith('o|'):\n            notes.append(note.count('o') * 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('o') * 1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') + 1)\n        elif note.startswith('o|'):\n            notes.append(note.count('o') + 1)\n        elif note.startswith('.|'):\n            notes.append(note.count('o') + 1)\n        else:\n            notes.append(note.count('|') + 1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split('|')\n    beats = [int(note) for note in notes]\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') * 4)\n        elif note.startswith('o|'):\n            notes.append(note.count('o') * 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('o') * 1)\n        else:\n            notes.append(note.count('.'))\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') * 4)\n        elif note.startswith('o|'):\n            notes.append(note.count('o') * 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('o') * 1)\n        else:\n            notes.append(note.count('.'))\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_count = 0\n    beat_length = 0\n    beat_times = []\n    for note in music_string.split('|'):\n        if note.isdigit():\n            beat_count += 1\n            beat_length += note\n            beat_times.append(beat_length)\n        else:\n            beat_times.append(0)\n    return beat_count, beat_length, beat_times", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') - 1)\n        elif note.startswith('|'):\n            notes.append(note.count('|') - 1)\n        elif note.startswith('.'):\n            notes.append(note.count('.') - 1)\n        elif note.startswith('.'):\n            notes.append(note.count('.') - 1)\n        else:\n            notes.append(note.count('.') - 1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_lengths = []\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') * 4)\n        elif note.startswith('o|'):\n            notes.append(note.count('o') * 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('o') * 1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split('|')\n    beat_count = 0\n    for note in notes:\n        if note.isdigit():\n            beat_count += int(note)\n        else:\n            beat_count += 1\n    return beat_count", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split(' '):\n        if note.isdigit():\n            notes.append(int(note))\n        else:\n            notes.append(note)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') + 1)\n        elif note.startswith('|'):\n            notes.append(note.count('|') + 1)\n        elif note.startswith('.'):\n            notes.append(note.count('.') + 1)\n        elif note.startswith('.'):\n            notes.append(note.count('.') + 1)\n        elif note.startswith('o'):\n            notes.append(note.count('o') + 1)\n        elif note.startswith('.'):\n            notes.append(note.count('.') + 1)\n        elif note.startswith('.'):\n            notes.append(note.count('.') + 1)\n        elif note.startswith('o'):\n            notes.append(note.count('o') + 1)\n        elif note.startswith('.'):\n            notes.append(note.count('.') + 1)\n        elif note.startswith('.')", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_length = 0\n    beat_count = 0\n    beat = 0\n    for i in range(len(music_string)):\n        if music_string[i] == 'o':\n            beat_length += 4\n            beat_count += 1\n        elif music_string[i] == 'o|':\n            beat_length += 2\n            beat_count += 1\n        elif music_string[i] == '.|':\n            beat_length += 1\n            beat_count += 1\n        elif music_string[i] == 'o':\n            beat_length += 1\n            beat_count += 1\n        elif music_string[i] == 'o|':\n            beat_length += 1\n            beat_count += 1\n        elif music_string[i] == '.|':\n            beat_length += 1\n            beat_count += 1\n        elif music_string[i] == 'o':\n            beat_length += 1\n            beat_count += 1\n        elif music_string[i] == 'o|':\n            beat_length += 1\n            beat_count += 1\n        elif music_string[i] == '.|':\n            beat_length += 1\n            beat_count += 1\n        elif music_string[i] == 'o':\n            beat_length += 1\n            beat_count += 1\n        elif music_string[i] == 'o|':\n            beat_length += 1\n            beat_count += 1\n        elif music_string[i] == '.|':\n            beat_length += 1\n            beat_count", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') + 4)\n        elif note.startswith('o|'):\n            notes.append(note.count('o') + 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('o') + 1)\n        else:\n            notes.append(note.count('.') + 4)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') * 4)\n        elif note.startswith('o|'):\n            notes.append(note.count('o|') * 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('.|') * 1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if i % 2:\n            notes.append(i)\n        else:\n            notes.append(i * 2)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') + 1)\n        elif note.startswith('|'):\n            notes.append(note.count('|') + 1)\n        else:\n            notes.append(note.count('.') + 1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(4)\n        elif music_string[i] == 'o|':\n            notes.append(2)\n        elif music_string[i] == '.|':\n            notes.append(1)\n        else:\n            notes.append(0)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('|') - 1)\n        elif note.startswith('o|'):\n            notes.append(note.count('|') - 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('|') - 3)\n        else:\n            notes.append(note.count('|'))\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            beats.append(note.count('o') * 4)\n        elif note.startswith('o|'):\n            beats.append(note.count('o') * 2)\n        elif note.startswith('.|'):\n            beats.append(note.count('o') * 1)\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') + 1)\n        elif note.startswith('o|'):\n            notes.append(note.count('o|') + 1)\n        elif note.startswith('.|'):\n            notes.append(note.count('.|') + 1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i + 1)\n        elif music_string[i] == 'o|':\n            notes.append(i + 2)\n        elif music_string[i] == '.|':\n            notes.append(i + 3)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_count = 0\n    beat_length = 0\n    beat_times = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            beat_count += 1\n            beat_length += 4\n        elif note.startswith('o|'):\n            beat_count += 1\n            beat_length += 2\n        elif note.startswith('.|'):\n            beat_count += 1\n            beat_length += 1\n        else:\n            beat_times.append(beat_count)\n            beat_times.append(beat_length)\n            beat_times.append(beat_times[-1] + 1)\n    return beat_times", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i + 1)\n        elif music_string[i] == 'o|':\n            notes.append(i + 2)\n        elif music_string[i] == '.|':\n            notes.append(i + 3)\n        else:\n            notes.append(i + 4)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('|') - 1)\n        elif note.startswith('o|'):\n            notes.append(note.count('|') - 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('|') - 3)\n        else:\n            notes.append(note.count('|'))\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split(' '):\n        if note.startswith('o'):\n            notes.append(note.count('o') + 1)\n        elif note.startswith('|'):\n            notes.append(note.count('|') + 1)\n        elif note.startswith('.'):\n            notes.append(note.count('.') + 1)\n        elif note.startswith('o'):\n            notes.append(note.count('o') + 1)\n        elif note.startswith('|'):\n            notes.append(note.count('|') + 1)\n        elif note.startswith('.'):\n            notes.append(note.count('.') + 1)\n        elif note.startswith('o'):\n            notes.append(note.count('o') + 1)\n        elif note.startswith('|'):\n            notes.append(note.count('|') + 1)\n        elif note.startswith('.'):\n            notes.append(note.count('.') + 1)\n        elif note.startswith('o'):", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.isdigit():\n            notes.append(int(note))\n        else:\n            notes.append(note)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i * 2)\n            continue\n        if music_string[i] == '.|':\n            notes.append(i * 4)\n            continue\n        notes.append(i * 4 * 2)\n        notes.append(i * 4 * 4)\n        notes.append(i * 4 * 4 * 2)\n        notes.append(i * 4 * 4 * 4)\n        notes.append(i * 4 * 4 * 4 * 2)\n        notes.append(i * 4 * 4 * 4 * 4)\n        notes.append(i * 4 * 4 * 4 * 4 * 2)\n        notes.append(i * 4 * 4 * 4 * 4 * 4)\n        notes.append(i * 4 * 4 * 4 * 4 * 4 * 2)\n        notes.append(i * 4 * 4 * 4 * 4 * 4 * 2)\n        notes.append(i * 4 * 4 * 4 * 4 * 4 * 4)\n        notes.append(i * 4 * 4 * 4 * 4 * 4 * 4 * 2)\n        notes.append(i", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('|') - 1)\n        elif note.startswith('o|'):\n            notes.append(note.count('|') - 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('|') - 3)\n        else:\n            notes.append(note.count('|') - 4)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') * 4)\n        elif note.startswith('o|'):\n            notes.append(note.count('o') * 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('o') * 1)\n        else:\n            notes.append(note.count('.') * 4)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if i == 0:\n            notes.append(i)\n        elif i == 1:\n            notes.append(i * 2)\n        elif i == 2:\n            notes.append(i * 4)\n        elif i == 3:\n            notes.append(i * 6)\n        elif i == 4:\n            notes.append(i * 8)\n        elif i == 5:\n            notes.append(i * 10)\n        elif i == 6:\n            notes.append(i * 12)\n        elif i == 7:\n            notes.append(i * 14)\n        elif i == 8:\n            notes.append(i * 16)\n        elif i == 9:\n            notes.append(i * 20)\n        elif i == 10:\n            notes.append(i * 24)\n        elif i == 11:\n            notes.append(i * 28)\n        elif i == 12:\n            notes.append(i * 32)\n        elif i == 13:\n            notes.append(i * 36)\n        elif i == 14:\n            notes.append(i * 40)\n        elif i == 15:\n            notes.append(i * 48)\n        elif i == 16:\n            notes.append(i * 56)\n        elif i == 17:\n            notes.append(i * 60)\n        elif i == 18:", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split('|')\n    beats = [int(note) for note in notes]\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note[2:])\n        elif note.startswith('o|'):\n            notes.append(note[2:])\n        elif note.startswith('.|'):\n            notes.append(note[2:])\n        else:\n            notes.append(0)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if i % 2 == 0:\n            notes.append(i)\n        else:\n            notes.append(i * 2)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') * 4)\n        elif note.startswith('o|'):\n            notes.append(note.count('o') * 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('o') * 1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') + 1)\n        elif note.startswith('o|'):\n            notes.append(note.count('o') + 1)\n        elif note.startswith('.|'):\n            notes.append(note.count('o') + 1)\n        else:\n            notes.append(note.count('.') + 1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for line in music_string.split('\\n'):\n        if line.startswith('o'):\n            notes.append(4)\n        elif line.startswith('o|'):\n            notes.append(2)\n        elif line.startswith('.|'):\n            notes.append(1)\n        else:\n            notes.append(0)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note[2:])\n        elif note.startswith('o|'):\n            notes.append(note[2:])\n        elif note.startswith('.|'):\n            notes.append(note[2:])\n        else:\n            raise ValueError('Invalid note format')\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_length = 0\n    beat_count = 0\n    beat = 0\n    for note in music_string.split('|'):\n        if note.isdigit():\n            beat_length += int(note)\n            beat_count += 1\n        elif note.isalpha():\n            beat = beat + 1\n            beat_length += 1\n            beat_count += 1\n        elif note.isdigit() or note.isalpha():\n            break\n    return beat_length, beat_count", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for line in music_string.split('\\n'):\n        if line.startswith('|'):\n            notes.append(int(line[2:]))\n        else:\n            notes.append(line.count('|') - 1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_count = 0\n    beat_length = 0\n    beat_duration = 0\n    beat_times = []\n    beat_times.append(0)\n    for i in music_string.split(' '):\n        if i.startswith('|'):\n            beat_count += 1\n            beat_length += int(i.split('|')[1])\n            beat_times.append(beat_length)\n            beat_times.append(beat_length)\n            beat_times.append(beat_length)\n            beat_times.append(beat_length)\n            beat_times.append(beat_length)\n            beat_times.append(beat_length)\n            beat_times.append(beat_length)\n            beat_times.append(beat_length)\n            beat_times.append(beat_length)\n            beat_times.append(beat_length)\n            beat_times.append(beat_length)\n            beat_times.append(beat_length)\n            beat_times.append(beat_length)\n            beat_times.append(beat_length)\n            beat_times.append(beat_length)\n            beat_times.append(beat_length)\n            beat_times.append(beat_length)\n            beat_times.append(beat_length)\n            beat_times.append(beat_length)\n            beat_times.append(beat_length)\n            beat", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for line in music_string.split(' '):\n        if line.startswith('o'):\n            beats.append(int(line[2:]))\n        elif line.startswith('o|'):\n            beats.append(int(line[2:]) / 2)\n        elif line.startswith('.|'):\n            beats.append(int(line[2:]) / 4)\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') + 1)\n        elif note.startswith('o|'):\n            notes.append(note.count('o') + 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('o') + 3)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_count = 0\n    beat_length = 0\n    beat = 0\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            beat_count += 1\n            beat_length += 4\n        elif music_string[i] == 'o|':\n            beat_count += 1\n            beat_length += 2\n        elif music_string[i] == '.|':\n            beat_count += 1\n            beat_length += 1\n        elif music_string[i] == 'o':\n            beat_count += 1\n            beat_length += 1\n        elif music_string[i] == 'o|':\n            beat_count += 1\n            beat_length += 1\n        elif music_string[i] == '.|':\n            beat_count += 1\n            beat_length += 1\n        elif music_string[i] == 'o':\n            beat_count += 1\n            beat_length += 1\n        elif music_string[i] == 'o|':\n            beat_count += 1\n            beat_length += 1\n        elif music_string[i] == '.|':\n            beat_count += 1\n            beat_length += 1\n        elif music_string[i] == 'o':\n            beat_count += 1\n            beat_length += 1\n        elif music_string[i] == 'o|':\n            beat_count += 1\n            beat_length += 1\n        elif music_string[i] == '.|':\n            beat_count += 1", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') + 1)\n        elif note.startswith('|'):\n            notes.append(note.count('|') + 1)\n        elif note.startswith('.'):\n            notes.append(note.count('.') + 1)\n        else:\n            notes.append(note.count('.') + 1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if i == 0:\n            notes.append(i)\n        elif music_string[i] == 'o':\n            notes.append(i * 4)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 1)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') + 1)\n        elif note.startswith('|'):\n            notes.append(note.count('|') + 1)\n        else:\n            notes.append(note.count('.') + 1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o'))\n        elif note.startswith('|'):\n            notes.append(note.count('|'))\n        else:\n            notes.append(note.count('.'))\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') * 4)\n        elif note.startswith('o|'):\n            notes.append(note.count('o|') * 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('.|') * 1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for line in music_string.split('\\n'):\n        if line.startswith('o'):\n            notes.append(line.count('|') - 1)\n        elif line.startswith('o|'):\n            notes.append(line.count('|') - 2)\n        elif line.startswith('.|'):\n            notes.append(line.count('|') - 3)\n        else:\n            notes.append(line.count('|') - 4)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split(' ')\n    notes = [int(n) for n in notes]\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i + 1)\n        elif music_string[i] == 'o|':\n            notes.append(i + 2)\n        elif music_string[i] == '.|':\n            notes.append(i + 3)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_lengths = []\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat_lengths.append(0)\n    beat", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('o') * 4)\n        elif note.startswith('o|'):\n            notes.append(note.count('o|') * 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('.|') * 1)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            beats.append(i)\n        elif music_string[i] == 'o|':\n            beats.append(i * 2)\n        elif music_string[i] == '.|':\n            beats.append(i * 3)\n        elif music_string[i] == 'o|':\n            beats.append(i * 4)\n        elif music_string[i] == 'o|':\n            beats.append(i * 5)\n        elif music_string[i] == 'o|':\n            beats.append(i * 6)\n        elif music_string[i] == 'o|':\n            beats.append(i * 7)\n        elif music_string[i] == 'o|':\n            beats.append(i * 8)\n        elif music_string[i] == 'o|':\n            beats.append(i * 9)\n        elif music_string[i] == 'o|':\n            beats.append(i * 10)\n        elif music_string[i] == 'o|':\n            beats.append(i * 11)\n        elif music_string[i] == 'o|':\n            beats.append(i * 12)\n        elif music_string[i] == 'o|':\n            beats.append(i * 13)\n        elif music_string[i] == 'o", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i * 2)\n            continue\n        if music_string[i] == '.|':\n            notes.append(i * 4)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i * 4 * 2)\n            continue\n        if music_string[i] == '.|':\n            notes.append(i * 4 * 4)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i * 4 * 4 * 2)\n            continue\n        if music_string[i] == '.|':\n            notes.append(i * 4 * 4 * 4)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i * 4 * 4 * 4 * 2)\n            continue\n        if music_string[i] == '.|':\n            notes.append(i * 4 * 4 * 4 * 4)\n            continue\n        if music_string[i] == 'o|':\n            notes.append(i * 4 * 4 * 4 * 4 * 2)\n            continue\n        if music_string[i] == '.|':\n            notes.append", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i * 6)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_lengths = []\n    for beat in music_string.split('|'):\n        beat_lengths.append(int(beat.strip()))\n\n    return beat_lengths", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split('|')\n    notes = [int(n) for n in notes]\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i + 1)\n        elif music_string[i] == '.|':\n            notes.append(i + 2)\n        elif music_string[i] == 'o|':\n            notes.append(i + 3)\n        elif music_string[i] == 'o|':\n            notes.append(i + 4)\n        elif music_string[i] == 'o|':\n            notes.append(i + 5)\n        elif music_string[i] == 'o|':\n            notes.append(i + 6)\n        elif music_string[i] == 'o|':\n            notes.append(i + 7)\n        elif music_string[i] == 'o|':\n            notes.append(i + 8)\n        elif music_string[i] == 'o|':\n            notes.append(i + 9)\n        elif music_string[i] == 'o|':\n            notes.append(i + 10)\n        elif music_string[i] == 'o|':\n            notes.append(i + 11)\n        elif music_string[i] == 'o|':\n            notes.append(i + 12)\n        elif music_string[i] == 'o", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.startswith('o'):\n            notes.append(note.count('|') - 1)\n        elif note.startswith('o|'):\n            notes.append(note.count('|') - 2)\n        elif note.startswith('.|'):\n            notes.append(note.count('|') - 3)\n        else:\n            notes.append(note.count('|') - 4)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_length = 0\n    beat_count = 0\n    beat = 0\n    beat_length = 0\n    beat_count = 0\n    beat = 0\n    beat_length = 0\n    beat_count = 0\n    beat = 0\n    beat_length = 0\n    beat_count = 0\n    beat = 0\n    beat_length = 0\n    beat_count = 0\n    beat = 0\n    beat_length = 0\n    beat_count = 0\n    beat = 0\n    beat_length = 0\n    beat_count = 0\n    beat = 0\n    beat_length = 0\n    beat_count = 0\n    beat = 0\n    beat_length = 0\n    beat_count = 0\n    beat = 0\n    beat_length = 0\n    beat_count = 0\n    beat = 0\n    beat_length = 0\n    beat_count = 0\n    beat = 0\n    beat_length = 0\n    beat_count = 0\n    beat = 0\n    beat_length = 0\n    beat_count = 0\n    beat = 0\n    beat_length = 0\n    beat_count = 0\n    beat = 0\n    beat_length = 0\n    beat_count = 0\n    beat = 0\n    beat_length = 0\n    beat_count = 0\n    beat = 0\n    beat_length = 0\n    beat_count = 0\n    beat = 0\n    beat_length = 0\n    beat_count = 0\n    beat = 0\n    beat_length =", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_lengths = []\n    for beat in music_string.split('|'):\n        if beat.startswith('o'):\n            beat_lengths.append(4)\n        elif beat.startswith('o|'):\n            beat_lengths.append(2)\n        elif beat.startswith('.|'):\n            beat_lengths.append(1)\n    return beat_lengths", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for note in music_string.split('|'):\n        if note.isdigit():\n            notes.append(int(note))\n        else:\n            notes.append(note)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i + 1)\n        elif music_string[i] == 'o|':\n            notes.append(i + 2)\n        elif music_string[i] == '.|':\n            notes.append(i + 3)\n        elif music_string[i] == 'o|':\n            notes.append(i + 4)\n        elif music_string[i] == 'o|':\n            notes.append(i + 5)\n        elif music_string[i] == 'o|':\n            notes.append(i + 6)\n        elif music_string[i] == 'o|':\n            notes.append(i + 7)\n        elif music_string[i] == 'o|':\n            notes.append(i + 8)\n        elif music_string[i] == 'o|':\n            notes.append(i + 9)\n        elif music_string[i] == 'o|':\n            notes.append(i + 10)\n        elif music_string[i] == 'o|':\n            notes.append(i + 11)\n        elif music_string[i] == 'o|':\n            notes.append(i + 12)\n        elif music_string[i] == 'o|':\n            notes.append(i + 13)\n        elif music_string[i] ==", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beat_length = 0\n    beat_count = 0\n    beat = 0\n    for note in music_string:\n        if note == 'o':\n            beat_length += 4\n            beat_count += 1\n        elif note == 'o|':\n            beat_length -= 4\n            beat_count += 1\n        elif note == '.|':\n            beat_length -= 2\n            beat_count += 1\n        elif note == 'o':\n            beat_length += 1\n            beat_count += 1\n        elif note == 'o|':\n            beat_length -= 1\n            beat_count += 1\n        elif note == '.|':\n            beat_length -= 2\n            beat_count += 1\n        elif note == 'o':\n            beat_length += 1\n            beat_count += 1\n        elif note == 'o|':\n            beat_length -= 1\n            beat_count += 1\n        elif note == '.|':\n            beat_length -= 2\n            beat_count += 1\n        elif note == 'o':\n            beat_length += 1\n            beat_count += 1\n        elif note == 'o|':\n            beat_length -= 1\n            beat_count += 1\n        elif note == '.|':\n            beat_length -= 2\n            beat_count += 1\n        elif note == 'o':\n            beat_length += 1\n            beat_count += 1\n        elif note == 'o|':\n            beat", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split('|')\n    notes = [int(n) for n in notes]\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(i)\n        elif music_string[i] == 'o|':\n            notes.append(i * 2)\n        elif music_string[i] == '.|':\n            notes.append(i * 4)\n        else:\n            notes.append(i)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for beat in music_string.split('|'):\n        beats.append(int(beat.strip()))\n    return beats"]]