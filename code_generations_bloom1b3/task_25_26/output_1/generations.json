[["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [(n - 1)]\n    if n == 3:\n        return [(n - 1) * (n - 1)]\n    if n == 4:\n        return [(n - 1) * (n - 1) * (n - 1)]\n    if n == 5:\n        return [(n - 1) * (n - 1) * (n - 1) * (n - 1)]\n    if n == 6:\n        return [(n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1)]\n    if n == 7:\n        return [(n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1)]\n    if n == 8:\n        return [(n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1)]\n    if n == 9:\n        return [(n - 1) * (n - 1) * (", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i * i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [(n - 1)]\n    if n == 3:\n        return [(n - 2)]\n    if n == 4:\n        return [(n - 3)]\n    if n == 5:\n        return [(n - 4)]\n    if n == 6:\n        return [(n - 5)]\n    if n == 7:\n        return [(n - 6)]\n    if n == 8:\n        return [(n - 7)]\n    if n == 9:\n        return [(n - 8)]\n    if n == 10:\n        return [(n - 9)]\n    if n == 11:\n        return [(n - 10)]\n    if n == 12:\n        return [(n - 11)]\n    if n == 13:\n        return [(n - 12)]\n    if n == 14:\n        return [(n - 13)]\n    if n == 15:\n        return [(n - 14)]\n    if n == 16:\n        return [(n - 15)]\n    if n == 17:\n        return [(n - 16)]\n    if n == 18:\n        return [(n - 17)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [1, 2, 2]\n    if n == 3:\n        return [1, 2, 3, 4]\n    if n == 4:\n        return [1, 2, 3, 4, 5]\n    if n == 5:\n        return [1, 2, 3, 4, 5, 6]\n    if n == 6:\n        return [1, 2, 3, 4, 5, 6, 7]\n    if n == 7:\n        return [1, 2, 3, 4, 5, 6, 7, 8]\n    if n == 8:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1)]\n    if n == 4:\n        return [factors(n - 1)]\n    if n == 5:\n        return [factors(n - 1)]\n    if n == 6:\n        return [factors(n - 1)]\n    if n == 7:\n        return [factors(n - 1)]\n    if n == 8:\n        return [factors(n - 1)]\n    if n == 9:\n        return [factors(n - 1)]\n    if n == 10:\n        return [factors(n - 1)]\n    if n == 11:\n        return [factors(n - 1)]\n    if n == 12:\n        return [factors(n - 1)]\n    if n == 13:\n        return [factors(n - 1)]\n    if n == 14:\n        return [factors(n - 1)]\n    if n == 15:\n        return [factors(n - 1)]\n    if n == 16:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [1, 2, 2]\n    if n == 3:\n        return [1, 2, 3, 3]\n    if n == 4:\n        return [1, 2, 3, 4, 4]\n    if n == 5:\n        return [1, 2, 3, 4, 5, 5]\n    if n == 6:\n        return [1, 2, 3, 4, 5, 6, 6]\n    if n == 7:\n        return [1, 2, 3, 4, 5, 6, 7, 7]\n    if n == 8:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 8]\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [(n - 1)]\n    if n == 3:\n        return [(n - 2)]\n    if n == 4:\n        return [(n - 3)]\n    if n == 5:\n        return [(n - 4)]\n    if n == 6:\n        return [(n - 5)]\n    if n == 7:\n        return [(n - 6)]\n    if n == 8:\n        return [(n - 7)]\n    if n == 9:\n        return [(n - 8)]\n    if n == 10:\n        return [(n - 9)]\n    if n == 11:\n        return [(n - 10)]\n    if n == 12:\n        return [(n - 11)]\n    if n == 13:\n        return [(n - 12)]\n    if n == 14:\n        return [(n - 13)]\n    if n == 15:\n        return [(n - 14)]\n    if n == 16:\n        return [(n - 15)]\n    if n == 17:\n        return [(n - 16)]\n    if n == 18:\n        return [(n - 17)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i * 2)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    factor = []\n    for i in range(1, n + 1):\n        factor.append(i)\n\n    return factor", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    if n == 1:\n        return []\n\n    if n == 2:\n        return [n]\n\n    if n == 3:\n        return [(n - 1)]\n\n    if n == 4:\n        return [(n - 1)]\n\n    if n == 5:\n        return [(n - 1)]\n\n    if n == 6:\n        return [(n - 1)]\n\n    if n == 7:\n        return [(n - 1)]\n\n    if n == 8:\n        return [(n - 1)]\n\n    if n == 9:\n        return [(n - 1)]\n\n    if n == 10:\n        return [(n - 1)]\n\n    if n == 11:\n        return [(n - 1)]\n\n    if n == 12:\n        return [(n - 1)]\n\n    if n == 13:\n        return [(n - 1)]\n\n    if n == 14:\n        return [(n - 1)]\n\n    if n == 15:\n        return [(n - 1)]\n\n    if n == 16:\n        return [(n - 1)]\n\n    if n == 17:\n        return [(n - 1)]\n\n    if n == 18:\n        return [(n - 1)]\n\n    if n == 19:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [2, 2]\n    if n == 3:\n        return [3, 3]\n    if n == 4:\n        return [4, 4]\n    if n == 5:\n        return [5, 5]\n    if n == 6:\n        return [6, 6]\n    if n == 7:\n        return [7, 7]\n    if n == 8:\n        return [8, 8]\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [1, 2]\n    if n == 3:\n        return [1, 3]\n    if n == 4:\n        return [1, 4]\n    if n == 5:\n        return [1, 5]\n    if n == 6:\n        return [1, 6]\n    if n == 7:\n        return [1, 7]\n    if n == 8:\n        return [1, 8]\n    if n == 9:\n        return [1, 9]\n    if n == 10:\n        return [1, 10]\n    if n == 11:\n        return [1, 11]\n    if n == 12:\n        return [1, 12]\n    if n == 13:\n        return [1, 13]\n    if n == 14:\n        return [1, 14]\n    if n == 15:\n        return [1, 15]\n    if n == 16:\n        return [1, 16]\n    if n == 17:\n        return [1, 17]\n    if n == 18:\n        return [1, 18]\n    if n == 19:\n        return [1, 19]\n    if n == 20:\n        return [1, 20]\n    if n == 21:\n        return [1, 21]\n    if n == 22:\n        return [1, 22]\n    if n == 23:\n        return [1, 23]\n    if n", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [(n - 1)]\n    if n == 3:\n        return [(n - 2)]\n    if n == 4:\n        return [(n - 3)]\n    if n == 5:\n        return [(n - 4)]\n    if n == 6:\n        return [(n - 5)]\n    if n == 7:\n        return [(n - 6)]\n    if n == 8:\n        return [(n - 7)]\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i * 2)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1) for factors in factorize(n - 2)]\n    if n == 4:\n        return [factors(n - 2) for factors in factorize(n - 3)]\n    if n == 5:\n        return [factors(n - 3) for factors in factorize(n - 4)]\n    if n == 6:\n        return [factors(n - 4) for factors in factorize(n - 5)]\n    if n == 7:\n        return [factors(n - 5) for factors in factorize(n - 6)]\n    if n == 8:\n        return [factors(n - 6) for factors in factorize(n - 7)]\n    if n == 9:\n        return [factors(n - 7) for factors in factorize(n - 8)]\n    if n == 10:\n        return [factors(n - 8) for factors in factorize(n - 9)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor = []\n    for i in range(n):\n        factor.append(i)\n    return factor", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [2, 2]\n    if n == 3:\n        return [3, 3]\n    if n == 4:\n        return [4, 4]\n    if n == 5:\n        return [5, 5]\n    if n == 6:\n        return [6, 6]\n    if n == 7:\n        return [7, 7]\n    if n == 8:\n        return [8, 8]\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [2, 2]\n    if n == 3:\n        return [3, 3]\n    if n == 4:\n        return [4, 4]\n    if n == 5:\n        return [5, 5]\n    if n == 6:\n        return [6, 6]\n    if n == 7:\n        return [7, 7]\n    if n == 8:\n        return [8, 8]\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1) for factors in factorize(n - 2)]\n    if n == 4:\n        return [factors(n - 2) for factors in factorize(n - 3)]\n    if n == 5:\n        return [factors(n - 3) for factors in factorize(n - 4)]\n    if n == 6:\n        return [factors(n - 4) for factors in factorize(n - 5)]\n    if n == 7:\n        return [factors(n - 5) for factors in factorize(n - 6)]\n    if n == 8:\n        return [factors(n - 6) for factors in factorize(n - 7)]\n    if n == 9:\n        return [factors(n - 7) for factors in factorize(n - 8)]\n    if n == 10:\n        return [factors(n - 8) for factors in factorize(n - 9)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [2, 2]\n    if n == 3:\n        return [3, 3]\n    if n == 4:\n        return [4, 4]\n    if n == 5:\n        return [5, 5]\n    if n == 6:\n        return [6, 6]\n    if n == 7:\n        return [7, 7]\n    if n == 8:\n        return [8, 8]\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1) for factors in factorize(n - 2)]\n    if n == 4:\n        return [factors(n - 2) for factors in factorize(n - 3)]\n    if n == 5:\n        return [factors(n - 3) for factors in factorize(n - 4)]\n    if n == 6:\n        return [factors(n - 4) for factors in factorize(n - 5)]\n    if n == 7:\n        return [factors(n - 5) for factors in factorize(n - 6)]\n    if n == 8:\n        return [factors(n - 6) for factors in factorize(n - 7)]\n    if n == 9:\n        return [factors(n - 7) for factors in factorize(n - 8)]\n    if n == 10:\n        return [factors(n - 8) for factors in factorize(n - 9)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    if n == 1:\n        return [n]\n\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n\n    if n == 3:\n        return [factors(n - 1)]\n\n    if n == 4:\n        return [factors(n - 2)]\n\n    if n == 5:\n        return [factors(n - 3)]\n\n    if n == 6:\n        return [factors(n - 4)]\n\n    if n == 7:\n        return [factors(n - 5)]\n\n    if n == 8:\n        return [factors(n - 6)]\n\n    if n == 9:\n        return [factors(n - 7)]\n\n    if n == 10:\n        return [factors(n - 8)]\n\n    if n == 11:\n        return [factors(n - 9)]\n\n    if n == 12:\n        return [factors(n - 10)]\n\n    if n == 13:\n        return [factors(n - 11)]\n\n    if n == 14:\n        return [factors(n - 12)]\n\n    if n == 15:\n        return [factors(n - 13)]\n\n    if n == 16:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1)]\n    if n == 4:\n        return [factors(n - 2)]\n    if n == 5:\n        return [factors(n - 3)]\n    if n == 6:\n        return [factors(n - 4)]\n    if n == 7:\n        return [factors(n - 5)]\n    if n == 8:\n        return [factors(n - 6)]\n    if n == 9:\n        return [factors(n - 7)]\n    if n == 10:\n        return [factors(n - 8)]\n    if n == 11:\n        return [factors(n - 9)]\n    if n == 12:\n        return [factors(n - 10)]\n    if n == 13:\n        return [factors(n - 11)]\n    if n == 14:\n        return [factors(n - 12)]\n    if n == 15:\n        return [factors(n - 13)]\n    if n == 16:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n)]\n    if n == 3:\n        return [factors(n) for factors in factorize(n)]\n    if n == 4:\n        return [factors(n) for factors in factorize(n)]\n    if n == 5:\n        return [factors(n) for factors in factorize(n)]\n    if n == 6:\n        return [factors(n) for factors in factorize(n)]\n    if n == 7:\n        return [factors(n) for factors in factorize(n)]\n    if n == 8:\n        return [factors(n) for factors in factorize(n)]\n    if n == 9:\n        return [factors(n) for factors in factorize(n)]\n    if n == 10:\n        return [factors(n) for factors in factorize(n)]\n    if n == 11:\n        return [factors(n) for factors in factorize(n)]\n    if n == 12:\n        return [factors(n) for factors in factorize(", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [1, 2, 2]\n    if n == 3:\n        return [1, 2, 3, 3]\n    if n == 4:\n        return [1, 2, 3, 4, 4]\n    if n == 5:\n        return [1, 2, 3, 4, 5, 5]\n    if n == 6:\n        return [1, 2, 3, 4, 5, 6, 6]\n    if n == 7:\n        return [1, 2, 3, 4, 5, 6, 7, 7]\n    if n == 8:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 8]\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [1, 2, 2]\n    if n == 3:\n        return [1, 2, 3, 3]\n    if n == 4:\n        return [1, 2, 3, 4, 4]\n    if n == 5:\n        return [1, 2, 3, 4, 5, 5]\n    if n == 6:\n        return [1, 2, 3, 4, 5, 6, 6]\n    if n == 7:\n        return [1, 2, 3, 4, 5, 6, 7, 7]\n    if n == 8:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 8]\n    if n == 9:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]\n    if n == 10:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\n    if n == 11:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11]\n    if n == 12:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9,", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1) for factors in factorize(n - 2)]\n    if n == 4:\n        return [factors(n - 2) for factors in factorize(n - 3)]\n    if n == 5:\n        return [factors(n - 3) for factors in factorize(n - 4)]\n    if n == 6:\n        return [factors(n - 4) for factors in factorize(n - 5)]\n    if n == 7:\n        return [factors(n - 5) for factors in factorize(n - 6)]\n    if n == 8:\n        return [factors(n - 6) for factors in factorize(n - 7)]\n    if n == 9:\n        return [factors(n - 7) for factors in factorize(n - 8)]\n    if n == 10:\n        return [factors(n - 8) for factors in factorize(n - 9)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 2) for factors in factorize(n - 1)]\n    if n == 4:\n        return [factors(n - 3) for factors in factorize(n - 2)]\n    if n == 5:\n        return [factors(n - 4) for factors in factorize(n - 3)]\n    if n == 6:\n        return [factors(n - 5) for factors in factorize(n - 4)]\n    if n == 7:\n        return [factors(n - 6) for factors in factorize(n - 5)]\n    if n == 8:\n        return [factors(n - 7) for factors in factorize(n - 6)]\n    if n == 9:\n        return [factors(n - 8) for factors in factorize(n - 7)]\n    if n == 10:\n        return [factors(n - 9) for factors in factorize(n - 8)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1) for factors in factorize(n - 2)]\n    if n == 4:\n        return [factors(n - 2) for factors in factorize(n - 3)]\n    if n == 5:\n        return [factors(n - 3) for factors in factorize(n - 4)]\n    if n == 6:\n        return [factors(n - 4) for factors in factorize(n - 5)]\n    if n == 7:\n        return [factors(n - 5) for factors in factorize(n - 6)]\n    if n == 8:\n        return [factors(n - 6) for factors in factorize(n - 7)]\n    if n == 9:\n        return [factors(n - 7) for factors in factorize(n - 8)]\n    if n == 10:\n        return [factors(n - 8) for factors in factorize(n - 9)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    factor = []\n    for i in range(n):\n        factor.append(i)\n\n    return factor", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [(n - 1)]\n    if n == 3:\n        return [(n - 2)]\n    if n == 4:\n        return [(n - 3)]\n    if n == 5:\n        return [(n - 4)]\n    if n == 6:\n        return [(n - 5)]\n    if n == 7:\n        return [(n - 6)]\n    if n == 8:\n        return [(n - 7)]\n    if n == 9:\n        return [(n - 8)]\n    if n == 10:\n        return [(n - 9)]\n    if n == 11:\n        return [(n - 10)]\n    if n == 12:\n        return [(n - 11)]\n    if n == 13:\n        return [(n - 12)]\n    if n == 14:\n        return [(n - 13)]\n    if n == 15:\n        return [(n - 14)]\n    if n == 16:\n        return [(n - 15)]\n    if n == 17:\n        return [(n - 16)]\n    if n == 18:\n        return [(n - 17)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    if n == 1:\n        return [n]\n\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n\n    if n == 3:\n        return [factors(n - 1) for factors in factorize(n - 2)]\n\n    if n == 4:\n        return [factors(n - 2) for factors in factorize(n - 3)]\n\n    if n == 5:\n        return [factors(n - 3) for factors in factorize(n - 4)]\n\n    if n == 6:\n        return [factors(n - 4) for factors in factorize(n - 5)]\n\n    if n == 7:\n        return [factors(n - 5) for factors in factorize(n - 6)]\n\n    if n == 8:\n        return [factors(n - 6) for factors in factorize(n - 7)]\n\n    if n == 9:\n        return [factors(n - 7) for factors in factorize(n - 8)]\n\n    if n == 10:\n        return [factors(n - 8) for factors in factorize(n - 9)]\n\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 2) for factors in factorize(n - 1)]\n    if n == 4:\n        return [factors(n - 3) for factors in factorize(n - 2)]\n    if n == 5:\n        return [factors(n - 4) for factors in factorize(n - 3)]\n    if n == 6:\n        return [factors(n - 5) for factors in factorize(n - 4)]\n    if n == 7:\n        return [factors(n - 6) for factors in factorize(n - 5)]\n    if n == 8:\n        return [factors(n - 7) for factors in factorize(n - 6)]\n    if n == 9:\n        return [factors(n - 8) for factors in factorize(n - 7)]\n    if n == 10:\n        return [factors(n - 9) for factors in factorize(n - 8)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 2) for factors in factorize(n - 1)]\n    if n == 4:\n        return [factors(n - 3) for factors in factorize(n - 2)]\n    if n == 5:\n        return [factors(n - 4) for factors in factorize(n - 3)]\n    if n == 6:\n        return [factors(n - 5) for factors in factorize(n - 4)]\n    if n == 7:\n        return [factors(n - 6) for factors in factorize(n - 5)]\n    if n == 8:\n        return [factors(n - 7) for factors in factorize(n - 6)]\n    if n == 9:\n        return [factors(n - 8) for factors in factorize(n - 7)]\n    if n == 10:\n        return [factors(n - 9) for factors in factorize(n - 8)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i * 2)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 2) for factors in factorize(n - 1)]\n    if n == 4:\n        return [factors(n - 3) for factors in factorize(n - 2)]\n    if n == 5:\n        return [factors(n - 4) for factors in factorize(n - 3)]\n    if n == 6:\n        return [factors(n - 5) for factors in factorize(n - 4)]\n    if n == 7:\n        return [factors(n - 6) for factors in factorize(n - 5)]\n    if n == 8:\n        return [factors(n - 7) for factors in factorize(n - 6)]\n    if n == 9:\n        return [factors(n - 8) for factors in factorize(n - 7)]\n    if n == 10:\n        return [factors(n - 9) for factors in factorize(n - 8)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n)]\n    if n == 3:\n        return [factors(n) for factors in factorize(n)]\n    if n == 4:\n        return [factors(n) for factors in factorize(n)]\n    if n == 5:\n        return [factors(n) for factors in factorize(n)]\n    if n == 6:\n        return [factors(n) for factors in factorize(n)]\n    if n == 7:\n        return [factors(n) for factors in factorize(n)]\n    if n == 8:\n        return [factors(n) for factors in factorize(n)]\n    if n == 9:\n        return [factors(n) for factors in factorize(n)]\n    if n == 10:\n        return [factors(n) for factors in factorize(n)]\n    if n == 11:\n        return [factors(n) for factors in factorize(n)]\n    if n == 12:\n        return [factors(n) for factors in factorize(", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1) for factors in factorize(n - 2)]\n    if n == 4:\n        return [factors(n - 2) for factors in factorize(n - 3)]\n    if n == 5:\n        return [factors(n - 3) for factors in factorize(n - 4)]\n    if n == 6:\n        return [factors(n - 4) for factors in factorize(n - 5)]\n    if n == 7:\n        return [factors(n - 5) for factors in factorize(n - 6)]\n    if n == 8:\n        return [factors(n - 6) for factors in factorize(n - 7)]\n    if n == 9:\n        return [factors(n - 7) for factors in factorize(n - 8)]\n    if n == 10:\n        return [factors(n - 8) for factors in factorize(n - 9)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1) for factors in factorize(n - 2)]\n    if n == 4:\n        return [factors(n - 2) for factors in factorize(n - 3)]\n    if n == 5:\n        return [factors(n - 3) for factors in factorize(n - 4)]\n    if n == 6:\n        return [factors(n - 4) for factors in factorize(n - 5)]\n    if n == 7:\n        return [factors(n - 5) for factors in factorize(n - 6)]\n    if n == 8:\n        return [factors(n - 6) for factors in factorize(n - 7)]\n    if n == 9:\n        return [factors(n - 7) for factors in factorize(n - 8)]\n    if n == 10:\n        return [factors(n - 8) for factors in factorize(n - 9)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [(n - 1) * 2, n * 2]\n    if n == 3:\n        return [(n - 1) * 2, n * 2, n * 2]\n    if n == 4:\n        return [(n - 1) * 2, n * 2, n * 2, n * 2]\n    if n == 5:\n        return [(n - 1) * 2, n * 2, n * 2, n * 2, n * 2]\n    if n == 6:\n        return [(n - 1) * 2, n * 2, n * 2, n * 2, n * 2, n * 2]\n    if n == 7:\n        return [(n - 1) * 2, n * 2, n * 2, n * 2, n * 2, n * 2, n * 2]\n    if n == 8:\n        return [(n - 1) * 2, n * 2, n * 2, n * 2, n * 2, n * 2, n * 2]\n    if n == 9:\n        return [(n - 1) * 2, n * 2, n * 2, n *", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 2) for factors in factorize(n - 1)]\n    if n == 4:\n        return [factors(n - 3) for factors in factorize(n - 2)]\n    if n == 5:\n        return [factors(n - 4) for factors in factorize(n - 3)]\n    if n == 6:\n        return [factors(n - 5) for factors in factorize(n - 4)]\n    if n == 7:\n        return [factors(n - 6) for factors in factorize(n - 5)]\n    if n == 8:\n        return [factors(n - 7) for factors in factorize(n - 6)]\n    if n == 9:\n        return [factors(n - 8) for factors in factorize(n - 7)]\n    if n == 10:\n        return [factors(n - 9) for factors in factorize(n - 8)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 2) for factors in factorize(n - 1)]\n    if n == 4:\n        return [factors(n - 3) for factors in factorize(n - 2)]\n    if n == 5:\n        return [factors(n - 4) for factors in factorize(n - 3)]\n    if n == 6:\n        return [factors(n - 5) for factors in factorize(n - 4)]\n    if n == 7:\n        return [factors(n - 6) for factors in factorize(n - 5)]\n    if n == 8:\n        return [factors(n - 7) for factors in factorize(n - 6)]\n    if n == 9:\n        return [factors(n - 8) for factors in factorize(n - 7)]\n    if n == 10:\n        return [factors(n - 9) for factors in factorize(n - 8)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n)]\n    if n == 3:\n        return [factors(n) for factors in factorize(n)]\n    if n == 4:\n        return [factors(n) for factors in factorize(n)]\n    if n == 5:\n        return [factors(n) for factors in factorize(n)]\n    if n == 6:\n        return [factors(n) for factors in factorize(n)]\n    if n == 7:\n        return [factors(n) for factors in factorize(n)]\n    if n == 8:\n        return [factors(n) for factors in factorize(n)]\n    if n == 9:\n        return [factors(n) for factors in factorize(n)]\n    if n == 10:\n        return [factors(n) for factors in factorize(n)]\n    if n == 11:\n        return [factors(n) for factors in factorize(n)]\n    if n == 12:\n        return [factors(n) for factors in factorize(", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1)]\n    if n == 4:\n        return [factors(n - 1)]\n    if n == 5:\n        return [factors(n - 1)]\n    if n == 6:\n        return [factors(n - 1)]\n    if n == 7:\n        return [factors(n - 1)]\n    if n == 8:\n        return [factors(n - 1)]\n    if n == 9:\n        return [factors(n - 1)]\n    if n == 10:\n        return [factors(n - 1)]\n    if n == 11:\n        return [factors(n - 1)]\n    if n == 12:\n        return [factors(n - 1)]\n    if n == 13:\n        return [factors(n - 1)]\n    if n == 14:\n        return [factors(n - 1)]\n    if n == 15:\n        return [factors(n - 1)]\n    if n == 16:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1) for factors in factorize(n - 2)]\n    if n == 4:\n        return [factors(n - 2) for factors in factorize(n - 3)]\n    if n == 5:\n        return [factors(n - 3) for factors in factorize(n - 4)]\n    if n == 6:\n        return [factors(n - 4) for factors in factorize(n - 5)]\n    if n == 7:\n        return [factors(n - 5) for factors in factorize(n - 6)]\n    if n == 8:\n        return [factors(n - 6) for factors in factorize(n - 7)]\n    if n == 9:\n        return [factors(n - 7) for factors in factorize(n - 8)]\n    if n == 10:\n        return [factors(n - 8) for factors in factorize(n - 9)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    if n == 1:\n        return [n]\n\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n\n    if n == 3:\n        return [factors(n - 1) for factors in factorize(n - 2)]\n\n    if n == 4:\n        return [factors(n - 1) for factors in factorize(n - 3)]\n\n    if n == 5:\n        return [factors(n - 1) for factors in factorize(n - 4)]\n\n    if n == 6:\n        return [factors(n - 1) for factors in factorize(n - 5)]\n\n    if n == 7:\n        return [factors(n - 1) for factors in factorize(n - 6)]\n\n    if n == 8:\n        return [factors(n - 1) for factors in factorize(n - 7)]\n\n    if n == 9:\n        return [factors(n - 1) for factors in factorize(n - 8)]\n\n    if n == 10:\n        return [factors(n - 1) for factors in factorize(n - 9)]\n\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor = []\n    for i in range(n):\n        factor.append(i)\n    return factor", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i * 2)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 2) for factors in factorize(n - 1)]\n    if n == 4:\n        return [factors(n - 3) for factors in factorize(n - 2)]\n    if n == 5:\n        return [factors(n - 4) for factors in factorize(n - 3)]\n    if n == 6:\n        return [factors(n - 5) for factors in factorize(n - 4)]\n    if n == 7:\n        return [factors(n - 6) for factors in factorize(n - 5)]\n    if n == 8:\n        return [factors(n - 7) for factors in factorize(n - 6)]\n    if n == 9:\n        return [factors(n - 8) for factors in factorize(n - 7)]\n    if n == 10:\n        return [factors(n - 9) for factors in factorize(n - 8)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    factors = []\n    for i in range(n):\n        factors.append(i)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n)]\n    if n == 3:\n        return [factors(n) for factors in factorize(n)]\n    if n == 4:\n        return [factors(n) for factors in factorize(n)]\n    if n == 5:\n        return [factors(n) for factors in factorize(n)]\n    if n == 6:\n        return [factors(n) for factors in factorize(n)]\n    if n == 7:\n        return [factors(n) for factors in factorize(n)]\n    if n == 8:\n        return [factors(n) for factors in factorize(n)]\n    if n == 9:\n        return [factors(n) for factors in factorize(n)]\n    if n == 10:\n        return [factors(n) for factors in factorize(n)]\n    if n == 11:\n        return [factors(n) for factors in factorize(n)]\n    if n == 12:\n        return [factors(n) for factors in factorize(", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1)]\n    if n == 4:\n        return [factors(n - 1)]\n    if n == 5:\n        return [factors(n - 1)]\n    if n == 6:\n        return [factors(n - 1)]\n    if n == 7:\n        return [factors(n - 1)]\n    if n == 8:\n        return [factors(n - 1)]\n    if n == 9:\n        return [factors(n - 1)]\n    if n == 10:\n        return [factors(n - 1)]\n    if n == 11:\n        return [factors(n - 1)]\n    if n == 12:\n        return [factors(n - 1)]\n    if n == 13:\n        return [factors(n - 1)]\n    if n == 14:\n        return [factors(n - 1)]\n    if n == 15:\n        return [factors(n - 1)]\n    if n == 16:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i * i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1) for factors in factorize(n - 2)]\n    if n == 4:\n        return [factors(n - 2) for factors in factorize(n - 3)]\n    if n == 5:\n        return [factors(n - 3) for factors in factorize(n - 4)]\n    if n == 6:\n        return [factors(n - 4) for factors in factorize(n - 5)]\n    if n == 7:\n        return [factors(n - 5) for factors in factorize(n - 6)]\n    if n == 8:\n        return [factors(n - 6) for factors in factorize(n - 7)]\n    if n == 9:\n        return [factors(n - 7) for factors in factorize(n - 8)]\n    if n == 10:\n        return [factors(n - 8) for factors in factorize(n - 9)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1) for factors in factorize(n - 2)]\n    if n == 4:\n        return [factors(n - 2) for factors in factorize(n - 3)]\n    if n == 5:\n        return [factors(n - 3) for factors in factorize(n - 4)]\n    if n == 6:\n        return [factors(n - 4) for factors in factorize(n - 5)]\n    if n == 7:\n        return [factors(n - 5) for factors in factorize(n - 6)]\n    if n == 8:\n        return [factors(n - 6) for factors in factorize(n - 7)]\n    if n == 9:\n        return [factors(n - 7) for factors in factorize(n - 8)]\n    if n == 10:\n        return [factors(n - 8) for factors in factorize(n - 9)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i * 2)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [(n - 1)]\n    if n == 3:\n        return [(n - 1) * (n - 1)]\n    if n == 4:\n        return [(n - 1) * (n - 1) * (n - 1)]\n    if n == 5:\n        return [(n - 1) * (n - 1) * (n - 1) * (n - 1)]\n    if n == 6:\n        return [(n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1)]\n    if n == 7:\n        return [(n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1)]\n    if n == 8:\n        return [(n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1)]\n    if n == 9:\n        return [(n - 1) * (", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 2) for factors in factorize(n - 1)]\n    if n == 4:\n        return [factors(n - 3) for factors in factorize(n - 2)]\n    if n == 5:\n        return [factors(n - 4) for factors in factorize(n - 3)]\n    if n == 6:\n        return [factors(n - 5) for factors in factorize(n - 4)]\n    if n == 7:\n        return [factors(n - 6) for factors in factorize(n - 5)]\n    if n == 8:\n        return [factors(n - 7) for factors in factorize(n - 6)]\n    if n == 9:\n        return [factors(n - 8) for factors in factorize(n - 7)]\n    if n == 10:\n        return [factors(n - 9) for factors in factorize(n - 8)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1)]\n    if n == 4:\n        return [factors(n - 2)]\n    if n == 5:\n        return [factors(n - 3)]\n    if n == 6:\n        return [factors(n - 4)]\n    if n == 7:\n        return [factors(n - 5)]\n    if n == 8:\n        return [factors(n - 6)]\n    if n == 9:\n        return [factors(n - 7)]\n    if n == 10:\n        return [factors(n - 8)]\n    if n == 11:\n        return [factors(n - 9)]\n    if n == 12:\n        return [factors(n - 10)]\n    if n == 13:\n        return [factors(n - 11)]\n    if n == 14:\n        return [factors(n - 12)]\n    if n == 15:\n        return [factors(n - 13)]\n    if n == 16:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1) for factors in factorize(n - 2)]\n    if n == 4:\n        return [factors(n - 2) for factors in factorize(n - 3)]\n    if n == 5:\n        return [factors(n - 3) for factors in factorize(n - 4)]\n    if n == 6:\n        return [factors(n - 4) for factors in factorize(n - 5)]\n    if n == 7:\n        return [factors(n - 5) for factors in factorize(n - 6)]\n    if n == 8:\n        return [factors(n - 6) for factors in factorize(n - 7)]\n    if n == 9:\n        return [factors(n - 7) for factors in factorize(n - 8)]\n    if n == 10:\n        return [factors(n - 8) for factors in factorize(n - 9)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n)]\n    if n == 3:\n        return [factors(n) for factors in factorize(n)]\n    if n == 4:\n        return [factors(n) for factors in factorize(n)]\n    if n == 5:\n        return [factors(n) for factors in factorize(n)]\n    if n == 6:\n        return [factors(n) for factors in factorize(n)]\n    if n == 7:\n        return [factors(n) for factors in factorize(n)]\n    if n == 8:\n        return [factors(n) for factors in factorize(n)]\n    if n == 9:\n        return [factors(n) for factors in factorize(n)]\n    if n == 10:\n        return [factors(n) for factors in factorize(n)]\n    if n == 11:\n        return [factors(n) for factors in factorize(n)]\n    if n == 12:\n        return [factors(n) for factors in factorize(", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i * 2)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 2) for factors in factorize(n - 1)]\n    if n == 4:\n        return [factors(n - 3) for factors in factorize(n - 2)]\n    if n == 5:\n        return [factors(n - 4) for factors in factorize(n - 3)]\n    if n == 6:\n        return [factors(n - 5) for factors in factorize(n - 4)]\n    if n == 7:\n        return [factors(n - 6) for factors in factorize(n - 5)]\n    if n == 8:\n        return [factors(n - 7) for factors in factorize(n - 6)]\n    if n == 9:\n        return [factors(n - 8) for factors in factorize(n - 7)]\n    if n == 10:\n        return [factors(n - 9) for factors in factorize(n - 8)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    # factorize(1) = [0, 1, 1]\n    # factorize(2) = [0, 2, 2]\n    # factorize(3) = [0, 3, 3]\n    # factorize(4) = [0, 4, 4]\n    # factorize(5) = [0, 5, 5]\n    # factorize(6) = [0, 6, 6]\n    # factorize(7) = [0, 7, 7]\n    # factorize(8) = [0, 8, 8]\n    # factorize(9) = [0, 9, 9]\n    # factorize(10) = [0, 10, 10]\n    # factorize(11) = [0, 11, 11]\n    # factorize(12) = [0, 12, 12]\n    # factorize(13) = [0, 13, 13]\n    # factorize(14) = [0, 14, 14]\n    # factorize(15) = [0, 15, 15]\n    # factorize(16) = [0, 16, 16]\n    # factorize(17) = [0, 17, 17]\n    # factorize(18) = [0, 18, 18]\n    # factorize", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i * 2)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i * 2)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [1, 2, 2]\n    if n == 3:\n        return [1, 2, 3, 3]\n    if n == 4:\n        return [1, 2, 3, 4, 4]\n    if n == 5:\n        return [1, 2, 3, 4, 5, 5]\n    if n == 6:\n        return [1, 2, 3, 4, 5, 6, 6]\n    if n == 7:\n        return [1, 2, 3, 4, 5, 6, 7, 7]\n    if n == 8:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 8]\n    if n == 9:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]\n    if n == 10:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\n    if n == 11:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11]\n    if n == 12:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9,", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factorized = []\n    for i in range(n):\n        factorized.append(i)\n    return factorized", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    # factorize(n) = [prime_factors(n) for prime_factors in factorize(n)]\n    # factorize(n) = [prime_factors(n) for prime_factors in factorize(n)]\n    # factorize(n) = [prime_factors(n) for prime_factors in factorize(n)]\n    # factorize(n) = [prime_factors(n) for prime_factors in factorize(n)]\n    # factorize(n) = [prime_factors(n) for prime_factors in factorize(n)]\n    # factorize(n) = [prime_factors(n) for prime_factors in factorize(n)]\n    # factorize(n) = [prime_factors(n) for prime_factors in factorize(n)]\n    # factorize(n) = [prime_factors(n) for prime_factors in factorize(n)]\n    # factorize(n) = [prime_factors(n) for prime_factors in factorize(n)]\n    # factorize(n) = [prime_factors(n", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    if n == 1:\n        return [n]\n\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n\n    if n == 3:\n        return [factors(n - 1) for factors in factorize(n - 2)]\n\n    if n == 4:\n        return [factors(n - 2) for factors in factorize(n - 3)]\n\n    if n == 5:\n        return [factors(n - 3) for factors in factorize(n - 4)]\n\n    if n == 6:\n        return [factors(n - 4) for factors in factorize(n - 5)]\n\n    if n == 7:\n        return [factors(n - 5) for factors in factorize(n - 6)]\n\n    if n == 8:\n        return [factors(n - 6) for factors in factorize(n - 7)]\n\n    if n == 9:\n        return [factors(n - 7) for factors in factorize(n - 8)]\n\n    if n == 10:\n        return [factors(n - 8) for factors in factorize(n - 9)]\n\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [1, 2, 2]\n    if n == 3:\n        return [1, 2, 3, 3]\n    if n == 4:\n        return [1, 2, 3, 4, 4]\n    if n == 5:\n        return [1, 2, 3, 4, 5, 5]\n    if n == 6:\n        return [1, 2, 3, 4, 5, 6, 6]\n    if n == 7:\n        return [1, 2, 3, 4, 5, 6, 7, 7]\n    if n == 8:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 8]\n    if n == 9:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]\n    if n == 10:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\n    if n == 11:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11]\n    if n == 12:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9,", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    if n == 1:\n        return [n]\n\n    if n == 2:\n        return [factors[0], factors[1]]\n\n    if n == 3:\n        return [factors[0], factors[1], factors[2]]\n\n    if n == 4:\n        return [factors[0], factors[1], factors[2], factors[3]]\n\n    if n == 5:\n        return [factors[0], factors[1], factors[2], factors[3], factors[4]]\n\n    if n == 6:\n        return [factors[0], factors[1], factors[2], factors[3], factors[4], factors[5]]\n\n    if n == 7:\n        return [factors[0], factors[1], factors[2], factors[3], factors[4], factors[5], factors[6]]\n\n    if n == 8:\n        return [factors[0], factors[1], factors[2], factors[3], factors[4], factors[5], factors[6], factors[7]]\n\n    if n == 9:\n        return [factors[0], factors[1], factors[2], factors[3], factors[4], factors[5], factors[6], factors[7], factors[8]]\n\n    if n == 10:\n        return [factors[0], factors[1], factors[2], factors[3], factors[4], factors[5], factors[6], factors[7], factors[8]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor = []\n    for i in range(n):\n        factor.append(i)\n    return factor", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i / 2)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [1, 2, 2]\n    if n == 3:\n        return [1, 2, 3, 3]\n    if n == 4:\n        return [1, 2, 3, 4, 4]\n    if n == 5:\n        return [1, 2, 3, 4, 5, 5]\n    if n == 6:\n        return [1, 2, 3, 4, 5, 6, 6]\n    if n == 7:\n        return [1, 2, 3, 4, 5, 6, 7, 7]\n    if n == 8:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 8]\n    if n == 9:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]\n    if n == 10:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\n    if n == 11:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11]\n    if n == 12:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9,", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1)]\n    if n == 4:\n        return [factors(n - 1)]\n    if n == 5:\n        return [factors(n - 1)]\n    if n == 6:\n        return [factors(n - 1)]\n    if n == 7:\n        return [factors(n - 1)]\n    if n == 8:\n        return [factors(n - 1)]\n    if n == 9:\n        return [factors(n - 1)]\n    if n == 10:\n        return [factors(n - 1)]\n    if n == 11:\n        return [factors(n - 1)]\n    if n == 12:\n        return [factors(n - 1)]\n    if n == 13:\n        return [factors(n - 1)]\n    if n == 14:\n        return [factors(n - 1)]\n    if n == 15:\n        return [factors(n - 1)]\n    if n == 16:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [2, 2]\n    if n == 3:\n        return [3, 3]\n    if n == 4:\n        return [4, 4]\n    if n == 5:\n        return [5, 5]\n    if n == 6:\n        return [6, 6]\n    if n == 7:\n        return [7, 7]\n    if n == 8:\n        return [8, 8]\n    if n == 9:\n        return [9, 9]\n    if n == 10:\n        return [10, 10]\n    if n == 11:\n        return [11, 11]\n    if n == 12:\n        return [12, 12]\n    if n == 13:\n        return [13, 13]\n    if n == 14:\n        return [14, 14]\n    if n == 15:\n        return [15, 15]\n    if n == 16:\n        return [16, 16]\n    if n == 17:\n        return [17, 17]\n    if n == 18:\n        return [18, 18]\n    if n == 19:\n        return [19, 19]\n    if n == 20:\n        return [20, 20]\n    if n == 21:\n        return [21, 21]\n    if n == 22:\n        return [22, 22]\n    if n == 23:\n        return [23,", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [1, 2, 2]\n    if n == 3:\n        return [1, 2, 3, 3]\n    if n == 4:\n        return [1, 2, 3, 4, 4]\n    if n == 5:\n        return [1, 2, 3, 4, 5, 5]\n    if n == 6:\n        return [1, 2, 3, 4, 5, 6, 6]\n    if n == 7:\n        return [1, 2, 3, 4, 5, 6, 7, 7]\n    if n == 8:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 8]\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i / 2)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1) for factors in factorize(n - 2)]\n    if n == 4:\n        return [factors(n - 2) for factors in factorize(n - 3)]\n    if n == 5:\n        return [factors(n - 3) for factors in factorize(n - 4)]\n    if n == 6:\n        return [factors(n - 4) for factors in factorize(n - 5)]\n    if n == 7:\n        return [factors(n - 5) for factors in factorize(n - 6)]\n    if n == 8:\n        return [factors(n - 6) for factors in factorize(n - 7)]\n    if n == 9:\n        return [factors(n - 7) for factors in factorize(n - 8)]\n    if n == 10:\n        return [factors(n - 8) for factors in factorize(n - 9)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1)]\n    if n == 4:\n        return [factors(n - 2)]\n    if n == 5:\n        return [factors(n - 3)]\n    if n == 6:\n        return [factors(n - 4)]\n    if n == 7:\n        return [factors(n - 5)]\n    if n == 8:\n        return [factors(n - 6)]\n    if n == 9:\n        return [factors(n - 7)]\n    if n == 10:\n        return [factors(n - 8)]\n    if n == 11:\n        return [factors(n - 9)]\n    if n == 12:\n        return [factors(n - 10)]\n    if n == 13:\n        return [factors(n - 11)]\n    if n == 14:\n        return [factors(n - 12)]\n    if n == 15:\n        return [factors(n - 13)]\n    if n == 16:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i * i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [2, 2]\n    if n == 3:\n        return [3, 3]\n    if n == 4:\n        return [4, 4]\n    if n == 5:\n        return [5, 5]\n    if n == 6:\n        return [6, 6]\n    if n == 7:\n        return [7, 7]\n    if n == 8:\n        return [8, 8]\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1) for factors in factorize(n - 2)]\n    if n == 4:\n        return [factors(n - 2) for factors in factorize(n - 3)]\n    if n == 5:\n        return [factors(n - 3) for factors in factorize(n - 4)]\n    if n == 6:\n        return [factors(n - 4) for factors in factorize(n - 5)]\n    if n == 7:\n        return [factors(n - 5) for factors in factorize(n - 6)]\n    if n == 8:\n        return [factors(n - 6) for factors in factorize(n - 7)]\n    if n == 9:\n        return [factors(n - 7) for factors in factorize(n - 8)]\n    if n == 10:\n        return [factors(n - 8) for factors in factorize(n - 9)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i * 2)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n)]\n    if n == 3:\n        return [factors(n) for factors in factorize(n)]\n    if n == 4:\n        return [factors(n) for factors in factorize(n)]\n    if n == 5:\n        return [factors(n) for factors in factorize(n)]\n    if n == 6:\n        return [factors(n) for factors in factorize(n)]\n    if n == 7:\n        return [factors(n) for factors in factorize(n)]\n    if n == 8:\n        return [factors(n) for factors in factorize(n)]\n    if n == 9:\n        return [factors(n) for factors in factorize(n)]\n    if n == 10:\n        return [factors(n) for factors in factorize(n)]\n    if n == 11:\n        return [factors(n) for factors in factorize(n)]\n    if n == 12:\n        return [factors(n) for factors in factorize(", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1) for factors in factorize(n - 2)]\n    if n == 4:\n        return [factors(n - 2) for factors in factorize(n - 3)]\n    if n == 5:\n        return [factors(n - 3) for factors in factorize(n - 4)]\n    if n == 6:\n        return [factors(n - 4) for factors in factorize(n - 5)]\n    if n == 7:\n        return [factors(n - 5) for factors in factorize(n - 6)]\n    if n == 8:\n        return [factors(n - 6) for factors in factorize(n - 7)]\n    if n == 9:\n        return [factors(n - 7) for factors in factorize(n - 8)]\n    if n == 10:\n        return [factors(n - 8) for factors in factorize(n - 9)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i * 2)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [(n - 1)]\n    if n == 3:\n        return [(n - 1) * (n - 1)]\n    if n == 4:\n        return [(n - 1) * (n - 1) * (n - 1)]\n    if n == 5:\n        return [(n - 1) * (n - 1) * (n - 1) * (n - 1)]\n    if n == 6:\n        return [(n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1)]\n    if n == 7:\n        return [(n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1)]\n    if n == 8:\n        return [(n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1)]\n    if n == 9:\n        return [(n - 1) * (", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [(n - 1)]\n    if n == 3:\n        return [(n - 2)]\n    if n == 4:\n        return [(n - 3)]\n    if n == 5:\n        return [(n - 4)]\n    if n == 6:\n        return [(n - 5)]\n    if n == 7:\n        return [(n - 6)]\n    if n == 8:\n        return [(n - 7)]\n    if n == 9:\n        return [(n - 8)]\n    if n == 10:\n        return [(n - 9)]\n    if n == 11:\n        return [(n - 10)]\n    if n == 12:\n        return [(n - 11)]\n    if n == 13:\n        return [(n - 12)]\n    if n == 14:\n        return [(n - 13)]\n    if n == 15:\n        return [(n - 14)]\n    if n == 16:\n        return [(n - 15)]\n    if n == 17:\n        return [(n - 16)]\n    if n == 18:\n        return [(n - 17)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i * 2)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 2) for factors in factorize(n - 1)]\n    if n == 4:\n        return [factors(n - 3) for factors in factorize(n - 2)]\n    if n == 5:\n        return [factors(n - 4) for factors in factorize(n - 3)]\n    if n == 6:\n        return [factors(n - 5) for factors in factorize(n - 4)]\n    if n == 7:\n        return [factors(n - 6) for factors in factorize(n - 5)]\n    if n == 8:\n        return [factors(n - 7) for factors in factorize(n - 6)]\n    if n == 9:\n        return [factors(n - 8) for factors in factorize(n - 7)]\n    if n == 10:\n        return [factors(n - 9) for factors in factorize(n - 8)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 2) for factors in factorize(n - 1)]\n    if n == 4:\n        return [factors(n - 3) for factors in factorize(n - 2)]\n    if n == 5:\n        return [factors(n - 4) for factors in factorize(n - 3)]\n    if n == 6:\n        return [factors(n - 5) for factors in factorize(n - 4)]\n    if n == 7:\n        return [factors(n - 6) for factors in factorize(n - 5)]\n    if n == 8:\n        return [factors(n - 7) for factors in factorize(n - 6)]\n    if n == 9:\n        return [factors(n - 8) for factors in factorize(n - 7)]\n    if n == 10:\n        return [factors(n - 9) for factors in factorize(n - 8)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i * 2)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [(n - 1) * 2 for n in range(2, n + 1)]\n    if n == 3:\n        return [(n - 1) * 2, (n - 1) * 2, (n - 1) * 2]\n    if n == 4:\n        return [(n - 1) * 2, (n - 1) * 2, (n - 1) * 2, (n - 1) * 2]\n    if n == 5:\n        return [(n - 1) * 2, (n - 1) * 2, (n - 1) * 2, (n - 1) * 2, (n - 1) * 2]\n    if n == 6:\n        return [(n - 1) * 2, (n - 1) * 2, (n - 1) * 2, (n - 1) * 2, (n - 1) * 2, (n - 1) * 2]\n    if n == 7:\n        return [(n - 1) * 2, (n - 1) * 2, (n - 1) * 2, (n - 1) * 2, (n - 1) * 2, (n - 1) * 2, (n - 1", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 1, 1]\n    if n == 2:\n        return [1, 2, 2]\n    if n == 3:\n        return [1, 3, 3]\n    if n == 4:\n        return [1, 4, 4]\n    if n == 5:\n        return [1, 5, 5]\n    if n == 6:\n        return [1, 6, 6]\n    if n == 7:\n        return [1, 7, 7]\n    if n == 8:\n        return [1, 8, 8]\n    if n == 9:\n        return [1, 9, 9]\n    if n == 10:\n        return [1, 10, 10]\n    if n == 11:\n        return [1, 11, 11]\n    if n == 12:\n        return [1, 12, 12]\n    if n == 13:\n        return [1, 13, 13]\n    if n == 14:\n        return [1, 14, 14]\n    if n == 15:\n        return [1, 15, 15]\n    if n == 16:\n        return [1, 16, 16]\n    if n == 17:\n        return [1, 17, 17]\n    if n == 18:\n        return [1, 18, 18]\n    if n == 19:\n        return [1, 19, 19]\n    if n == 20:\n        return [1,", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [1, 2, 2]\n    if n == 3:\n        return [1, 2, 3, 3]\n    if n == 4:\n        return [1, 2, 3, 4, 4]\n    if n == 5:\n        return [1, 2, 3, 4, 5, 5]\n    if n == 6:\n        return [1, 2, 3, 4, 5, 6, 6]\n    if n == 7:\n        return [1, 2, 3, 4, 5, 6, 7, 7]\n    if n == 8:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 8]\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    if n == 1:\n        return [n]\n\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n\n    if n == 3:\n        return [factors(n - 1) for factors in factorize(n - 2)]\n\n    if n == 4:\n        return [factors(n - 2) for factors in factorize(n - 3)]\n\n    if n == 5:\n        return [factors(n - 3) for factors in factorize(n - 4)]\n\n    if n == 6:\n        return [factors(n - 4) for factors in factorize(n - 5)]\n\n    if n == 7:\n        return [factors(n - 5) for factors in factorize(n - 6)]\n\n    if n == 8:\n        return [factors(n - 6) for factors in factorize(n - 7)]\n\n    if n == 9:\n        return [factors(n - 7) for factors in factorize(n - 8)]\n\n    if n == 10:\n        return [factors(n - 8) for factors in factorize(n - 9)]\n\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i * i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [(n - 1)]\n    if n == 3:\n        return [(n - 2)]\n    if n == 4:\n        return [(n - 3)]\n    if n == 5:\n        return [(n - 4)]\n    if n == 6:\n        return [(n - 5)]\n    if n == 7:\n        return [(n - 6)]\n    if n == 8:\n        return [(n - 7)]\n    if n == 9:\n        return [(n - 8)]\n    if n == 10:\n        return [(n - 9)]\n    if n == 11:\n        return [(n - 10)]\n    if n == 12:\n        return [(n - 11)]\n    if n == 13:\n        return [(n - 12)]\n    if n == 14:\n        return [(n - 13)]\n    if n == 15:\n        return [(n - 14)]\n    if n == 16:\n        return [(n - 15)]\n    if n == 17:\n        return [(n - 16)]\n    if n == 18:\n        return [(n - 17)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1)]\n    if n == 4:\n        return [factors(n - 2)]\n    if n == 5:\n        return [factors(n - 3)]\n    if n == 6:\n        return [factors(n - 4)]\n    if n == 7:\n        return [factors(n - 5)]\n    if n == 8:\n        return [factors(n - 6)]\n    if n == 9:\n        return [factors(n - 7)]\n    if n == 10:\n        return [factors(n - 8)]\n    if n == 11:\n        return [factors(n - 9)]\n    if n == 12:\n        return [factors(n - 10)]\n    if n == 13:\n        return [factors(n - 11)]\n    if n == 14:\n        return [factors(n - 12)]\n    if n == 15:\n        return [factors(n - 13)]\n    if n == 16:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n)]\n    if n == 3:\n        return [factors(n) for factors in factorize(n)]\n    if n == 4:\n        return [factors(n) for factors in factorize(n)]\n    if n == 5:\n        return [factors(n) for factors in factorize(n)]\n    if n == 6:\n        return [factors(n) for factors in factorize(n)]\n    if n == 7:\n        return [factors(n) for factors in factorize(n)]\n    if n == 8:\n        return [factors(n) for factors in factorize(n)]\n    if n == 9:\n        return [factors(n) for factors in factorize(n)]\n    if n == 10:\n        return [factors(n) for factors in factorize(n)]\n    if n == 11:\n        return [factors(n) for factors in factorize(n)]\n    if n == 12:\n        return [factors(n) for factors in factorize(", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [(n - 1)]\n    if n == 3:\n        return [(n - 2)]\n    if n == 4:\n        return [(n - 3)]\n    if n == 5:\n        return [(n - 4)]\n    if n == 6:\n        return [(n - 5)]\n    if n == 7:\n        return [(n - 6)]\n    if n == 8:\n        return [(n - 7)]\n    if n == 9:\n        return [(n - 8)]\n    if n == 10:\n        return [(n - 9)]\n    if n == 11:\n        return [(n - 10)]\n    if n == 12:\n        return [(n - 11)]\n    if n == 13:\n        return [(n - 12)]\n    if n == 14:\n        return [(n - 13)]\n    if n == 15:\n        return [(n - 14)]\n    if n == 16:\n        return [(n - 15)]\n    if n == 17:\n        return [(n - 16)]\n    if n == 18:\n        return [(n - 17)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [1, 2, 2]\n    if n == 3:\n        return [1, 2, 3, 3]\n    if n == 4:\n        return [1, 2, 3, 4, 4]\n    if n == 5:\n        return [1, 2, 3, 4, 5, 5]\n    if n == 6:\n        return [1, 2, 3, 4, 5, 6, 6]\n    if n == 7:\n        return [1, 2, 3, 4, 5, 6, 7, 7]\n    if n == 8:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 8]\n    if n == 9:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]\n    if n == 10:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\n    if n == 11:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11]\n    if n == 12:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9,", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 2) for factors in factorize(n - 1)]\n    if n == 4:\n        return [factors(n - 3) for factors in factorize(n - 2)]\n    if n == 5:\n        return [factors(n - 4) for factors in factorize(n - 3)]\n    if n == 6:\n        return [factors(n - 5) for factors in factorize(n - 4)]\n    if n == 7:\n        return [factors(n - 6) for factors in factorize(n - 5)]\n    if n == 8:\n        return [factors(n - 7) for factors in factorize(n - 6)]\n    if n == 9:\n        return [factors(n - 8) for factors in factorize(n - 7)]\n    if n == 10:\n        return [factors(n - 9) for factors in factorize(n - 8)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n)]\n    if n == 3:\n        return [factors(n) for factors in factorize(n)]\n    if n == 4:\n        return [factors(n) for factors in factorize(n)]\n    if n == 5:\n        return [factors(n) for factors in factorize(n)]\n    if n == 6:\n        return [factors(n) for factors in factorize(n)]\n    if n == 7:\n        return [factors(n) for factors in factorize(n)]\n    if n == 8:\n        return [factors(n) for factors in factorize(n)]\n    if n == 9:\n        return [factors(n) for factors in factorize(n)]\n    if n == 10:\n        return [factors(n) for factors in factorize(n)]\n    if n == 11:\n        return [factors(n) for factors in factorize(n)]\n    if n == 12:\n        return [factors(n) for factors in factorize(", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n)]\n    if n == 3:\n        return [factors(n) for factors in factorize(n)]\n    if n == 4:\n        return [factors(n) for factors in factorize(n)]\n    if n == 5:\n        return [factors(n) for factors in factorize(n)]\n    if n == 6:\n        return [factors(n) for factors in factorize(n)]\n    if n == 7:\n        return [factors(n) for factors in factorize(n)]\n    if n == 8:\n        return [factors(n) for factors in factorize(n)]\n    if n == 9:\n        return [factors(n) for factors in factorize(n)]\n    if n == 10:\n        return [factors(n) for factors in factorize(n)]\n    if n == 11:\n        return [factors(n) for factors in factorize(n)]\n    if n == 12:\n        return [factors(n) for factors in factorize(", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    factors = []\n    for i in range(n):\n        factors.append(i)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1) for factors in factorize(n - 2)]\n    if n == 4:\n        return [factors(n - 2) for factors in factorize(n - 3)]\n    if n == 5:\n        return [factors(n - 3) for factors in factorize(n - 4)]\n    if n == 6:\n        return [factors(n - 4) for factors in factorize(n - 5)]\n    if n == 7:\n        return [factors(n - 5) for factors in factorize(n - 6)]\n    if n == 8:\n        return [factors(n - 6) for factors in factorize(n - 7)]\n    if n == 9:\n        return [factors(n - 7) for factors in factorize(n - 8)]\n    if n == 10:\n        return [factors(n - 8) for factors in factorize(n - 9)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1) for factors in factorize(n - 2)]\n    if n == 4:\n        return [factors(n - 2) for factors in factorize(n - 3)]\n    if n == 5:\n        return [factors(n - 3) for factors in factorize(n - 4)]\n    if n == 6:\n        return [factors(n - 4) for factors in factorize(n - 5)]\n    if n == 7:\n        return [factors(n - 5) for factors in factorize(n - 6)]\n    if n == 8:\n        return [factors(n - 6) for factors in factorize(n - 7)]\n    if n == 9:\n        return [factors(n - 7) for factors in factorize(n - 8)]\n    if n == 10:\n        return [factors(n - 8) for factors in factorize(n - 9)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n)]\n    if n == 3:\n        return [factors(n) for factors in factorize(n)]\n    if n == 4:\n        return [factors(n) for factors in factorize(n)]\n    if n == 5:\n        return [factors(n) for factors in factorize(n)]\n    if n == 6:\n        return [factors(n) for factors in factorize(n)]\n    if n == 7:\n        return [factors(n) for factors in factorize(n)]\n    if n == 8:\n        return [factors(n) for factors in factorize(n)]\n    if n == 9:\n        return [factors(n) for factors in factorize(n)]\n    if n == 10:\n        return [factors(n) for factors in factorize(n)]\n    if n == 11:\n        return [factors(n) for factors in factorize(n)]\n    if n == 12:\n        return [factors(n) for factors in factorize(", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    if n == 1:\n        return [n]\n\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n\n    if n == 3:\n        return [factors(n - 1)]\n\n    if n == 4:\n        return [factors(n - 1)]\n\n    if n == 5:\n        return [factors(n - 1)]\n\n    if n == 6:\n        return [factors(n - 1)]\n\n    if n == 7:\n        return [factors(n - 1)]\n\n    if n == 8:\n        return [factors(n - 1)]\n\n    if n == 9:\n        return [factors(n - 1)]\n\n    if n == 10:\n        return [factors(n - 1)]\n\n    if n == 11:\n        return [factors(n - 1)]\n\n    if n == 12:\n        return [factors(n - 1)]\n\n    if n == 13:\n        return [factors(n - 1)]\n\n    if n == 14:\n        return [factors(n - 1)]\n\n    if n == 15:\n        return [factors(n - 1)]\n\n    if n == 16:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [1, 2, 2]\n    if n == 3:\n        return [1, 2, 3, 3]\n    if n == 4:\n        return [1, 2, 3, 4, 4]\n    if n == 5:\n        return [1, 2, 3, 4, 5, 5]\n    if n == 6:\n        return [1, 2, 3, 4, 5, 6, 6]\n    if n == 7:\n        return [1, 2, 3, 4, 5, 6, 7, 7]\n    if n == 8:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 8]\n    if n == 9:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]\n    if n == 10:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\n    if n == 11:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11]\n    if n == 12:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9,", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [(n - 1) * 2, n * 2]\n    if n == 3:\n        return [(n - 1) * 2, n * 2, n * 2]\n    if n == 4:\n        return [(n - 1) * 2, n * 2, n * 2, n * 2]\n    if n == 5:\n        return [(n - 1) * 2, n * 2, n * 2, n * 2, n * 2]\n    if n == 6:\n        return [(n - 1) * 2, n * 2, n * 2, n * 2, n * 2, n * 2]\n    if n == 7:\n        return [(n - 1) * 2, n * 2, n * 2, n * 2, n * 2, n * 2, n * 2]\n    if n == 8:\n        return [(n - 1) * 2, n * 2, n * 2, n * 2, n * 2, n * 2, n * 2]\n    if n == 9:\n        return [(n - 1) * 2, n * 2, n * 2, n *", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1) for factors in factorize(n - 2)]\n    if n == 4:\n        return [factors(n - 2) for factors in factorize(n - 3)]\n    if n == 5:\n        return [factors(n - 3) for factors in factorize(n - 4)]\n    if n == 6:\n        return [factors(n - 4) for factors in factorize(n - 5)]\n    if n == 7:\n        return [factors(n - 5) for factors in factorize(n - 6)]\n    if n == 8:\n        return [factors(n - 6) for factors in factorize(n - 7)]\n    if n == 9:\n        return [factors(n - 7) for factors in factorize(n - 8)]\n    if n == 10:\n        return [factors(n - 8) for factors in factorize(n - 9)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    factors = []\n    for i in range(n):\n        factors.append(i)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [1, 2, 2]\n    if n == 3:\n        return [1, 2, 3, 3]\n    if n == 4:\n        return [1, 2, 3, 4, 4]\n    if n == 5:\n        return [1, 2, 3, 4, 5, 5]\n    if n == 6:\n        return [1, 2, 3, 4, 5, 6, 6]\n    if n == 7:\n        return [1, 2, 3, 4, 5, 6, 7, 7]\n    if n == 8:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 8]\n    if n == 9:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]\n    if n == 10:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\n    if n == 11:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11]\n    if n == 12:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9,", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1) for factors in factorize(n - 2)]\n    if n == 4:\n        return [factors(n - 2) for factors in factorize(n - 3)]\n    if n == 5:\n        return [factors(n - 3) for factors in factorize(n - 4)]\n    if n == 6:\n        return [factors(n - 4) for factors in factorize(n - 5)]\n    if n == 7:\n        return [factors(n - 5) for factors in factorize(n - 6)]\n    if n == 8:\n        return [factors(n - 6) for factors in factorize(n - 7)]\n    if n == 9:\n        return [factors(n - 7) for factors in factorize(n - 8)]\n    if n == 10:\n        return [factors(n - 8) for factors in factorize(n - 9)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [1, 2, 2]\n    if n == 3:\n        return [1, 2, 3, 3]\n    if n == 4:\n        return [1, 2, 3, 4, 4]\n    if n == 5:\n        return [1, 2, 3, 4, 5, 5]\n    if n == 6:\n        return [1, 2, 3, 4, 5, 6, 6]\n    if n == 7:\n        return [1, 2, 3, 4, 5, 6, 7, 7]\n    if n == 8:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 8]\n    if n == 9:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]\n    if n == 10:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\n    if n == 11:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11]\n    if n == 12:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9,", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [2, 2]\n    if n == 3:\n        return [3, 3]\n    if n == 4:\n        return [4, 4]\n    if n == 5:\n        return [5, 5]\n    if n == 6:\n        return [6, 6]\n    if n == 7:\n        return [7, 7]\n    if n == 8:\n        return [8, 8]\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n)]\n    if n == 3:\n        return [factors(n) for factors in factorize(n)]\n    if n == 4:\n        return [factors(n) for factors in factorize(n)]\n    if n == 5:\n        return [factors(n) for factors in factorize(n)]\n    if n == 6:\n        return [factors(n) for factors in factorize(n)]\n    if n == 7:\n        return [factors(n) for factors in factorize(n)]\n    if n == 8:\n        return [factors(n) for factors in factorize(n)]\n    if n == 9:\n        return [factors(n) for factors in factorize(n)]\n    if n == 10:\n        return [factors(n) for factors in factorize(n)]\n    if n == 11:\n        return [factors(n) for factors in factorize(n)]\n    if n == 12:\n        return [factors(n) for factors in factorize(", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i * 2)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    factors = []\n    for i in range(n):\n        factors.append(i)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [1, 2, 2]\n    if n == 3:\n        return [1, 2, 3, 3]\n    if n == 4:\n        return [1, 2, 3, 4, 4]\n    if n == 5:\n        return [1, 2, 3, 4, 5, 5]\n    if n == 6:\n        return [1, 2, 3, 4, 5, 6, 6]\n    if n == 7:\n        return [1, 2, 3, 4, 5, 6, 7, 7]\n    if n == 8:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 8]\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 1, 1]\n    if n == 2:\n        return [1, 2, 2]\n    if n == 3:\n        return [1, 2, 3, 3]\n    if n == 4:\n        return [1, 2, 3, 4, 4]\n    if n == 5:\n        return [1, 2, 3, 4, 5, 5]\n    if n == 6:\n        return [1, 2, 3, 4, 5, 6, 6]\n    if n == 7:\n        return [1, 2, 3, 4, 5, 6, 7, 7]\n    if n == 8:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 8]\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n)]\n    if n == 3:\n        return [factors(n) for factors in factorize(n)]\n    if n == 4:\n        return [factors(n) for factors in factorize(n)]\n    if n == 5:\n        return [factors(n) for factors in factorize(n)]\n    if n == 6:\n        return [factors(n) for factors in factorize(n)]\n    if n == 7:\n        return [factors(n) for factors in factorize(n)]\n    if n == 8:\n        return [factors(n) for factors in factorize(n)]\n    if n == 9:\n        return [factors(n) for factors in factorize(n)]\n    if n == 10:\n        return [factors(n) for factors in factorize(n)]\n    if n == 11:\n        return [factors(n) for factors in factorize(n)]\n    if n == 12:\n        return [factors(n) for factors in factorize(", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 2) for factors in factorize(n - 1)]\n    if n == 4:\n        return [factors(n - 3) for factors in factorize(n - 2)]\n    if n == 5:\n        return [factors(n - 4) for factors in factorize(n - 3)]\n    if n == 6:\n        return [factors(n - 5) for factors in factorize(n - 4)]\n    if n == 7:\n        return [factors(n - 6) for factors in factorize(n - 5)]\n    if n == 8:\n        return [factors(n - 7) for factors in factorize(n - 6)]\n    if n == 9:\n        return [factors(n - 8) for factors in factorize(n - 7)]\n    if n == 10:\n        return [factors(n - 9) for factors in factorize(n - 8)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i * 2)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor = 0\n    for i in range(n):\n        factor += 1\n        if factor % 2 == 0:\n            factor /= 2\n        else:\n            factor = factor % 2\n    return [factorial(i) for i in factor]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [1, 2, 2]\n    if n == 3:\n        return [1, 2, 3, 3]\n    if n == 4:\n        return [1, 2, 3, 4, 4]\n    if n == 5:\n        return [1, 2, 3, 4, 5, 5]\n    if n == 6:\n        return [1, 2, 3, 4, 5, 6, 6]\n    if n == 7:\n        return [1, 2, 3, 4, 5, 6, 7, 7]\n    if n == 8:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 8]\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n)]\n    if n == 3:\n        return [factors(n) for factors in factorize(n)]\n    if n == 4:\n        return [factors(n) for factors in factorize(n)]\n    if n == 5:\n        return [factors(n) for factors in factorize(n)]\n    if n == 6:\n        return [factors(n) for factors in factorize(n)]\n    if n == 7:\n        return [factors(n) for factors in factorize(n)]\n    if n == 8:\n        return [factors(n) for factors in factorize(n)]\n    if n == 9:\n        return [factors(n) for factors in factorize(n)]\n    if n == 10:\n        return [factors(n) for factors in factorize(n)]\n    if n == 11:\n        return [factors(n) for factors in factorize(n)]\n    if n == 12:\n        return [factors(n) for factors in factorize(", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n)[0] for factors in factorize(n)]\n    if n == 3:\n        return [factors(n)[0], factors(n)[1], factors(n)[2]]\n    if n == 4:\n        return [factors(n)[0], factors(n)[1], factors(n)[2], factors(n)[3]]\n    if n == 5:\n        return [factors(n)[0], factors(n)[1], factors(n)[2], factors(n)[3], factors(n)[4]]\n    if n == 6:\n        return [factors(n)[0], factors(n)[1], factors(n)[2], factors(n)[3], factors(n)[4], factors(n)[5]]\n    if n == 7:\n        return [factors(n)[0], factors(n)[1], factors(n)[2], factors(n)[3], factors(n)[4], factors(n)[5], factors(n)[6]]\n    if n == 8:\n        return [factors(n)[0], factors(n)[1],", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i * 2)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1) for factors in factorize(n - 2)]\n    if n == 4:\n        return [factors(n - 2) for factors in factorize(n - 3)]\n    if n == 5:\n        return [factors(n - 3) for factors in factorize(n - 4)]\n    if n == 6:\n        return [factors(n - 4) for factors in factorize(n - 5)]\n    if n == 7:\n        return [factors(n - 5) for factors in factorize(n - 6)]\n    if n == 8:\n        return [factors(n - 6) for factors in factorize(n - 7)]\n    if n == 9:\n        return [factors(n - 7) for factors in factorize(n - 8)]\n    if n == 10:\n        return [factors(n - 8) for factors in factorize(n - 9)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 2) for factors in factorize(n - 1)]\n    if n == 4:\n        return [factors(n - 3) for factors in factorize(n - 2)]\n    if n == 5:\n        return [factors(n - 4) for factors in factorize(n - 3)]\n    if n == 6:\n        return [factors(n - 5) for factors in factorize(n - 4)]\n    if n == 7:\n        return [factors(n - 6) for factors in factorize(n - 5)]\n    if n == 8:\n        return [factors(n - 7) for factors in factorize(n - 6)]\n    if n == 9:\n        return [factors(n - 8) for factors in factorize(n - 7)]\n    if n == 10:\n        return [factors(n - 9) for factors in factorize(n - 8)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    factors = []\n    for i in range(n):\n        factors.append(i)\n\n    for factor in factors:\n        if factor % 2 == 0:\n            factors.remove(factor)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1) for factors in factorize(n - 2)]\n    if n == 4:\n        return [factors(n - 2) for factors in factorize(n - 3)]\n    if n == 5:\n        return [factors(n - 3) for factors in factorize(n - 4)]\n    if n == 6:\n        return [factors(n - 4) for factors in factorize(n - 5)]\n    if n == 7:\n        return [factors(n - 5) for factors in factorize(n - 6)]\n    if n == 8:\n        return [factors(n - 6) for factors in factorize(n - 7)]\n    if n == 9:\n        return [factors(n - 7) for factors in factorize(n - 8)]\n    if n == 10:\n        return [factors(n - 8) for factors in factorize(n - 9)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    factors = []\n    for i in range(n):\n        factors.append(i)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor = []\n    for i in range(n):\n        factor.append(i)\n    return factor", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1) for factors in factorize(n - 2)]\n    if n == 4:\n        return [factors(n - 2) for factors in factorize(n - 3)]\n    if n == 5:\n        return [factors(n - 3) for factors in factorize(n - 4)]\n    if n == 6:\n        return [factors(n - 4) for factors in factorize(n - 5)]\n    if n == 7:\n        return [factors(n - 5) for factors in factorize(n - 6)]\n    if n == 8:\n        return [factors(n - 6) for factors in factorize(n - 7)]\n    if n == 9:\n        return [factors(n - 7) for factors in factorize(n - 8)]\n    if n == 10:\n        return [factors(n - 8) for factors in factorize(n - 9)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1)]\n    if n == 4:\n        return [factors(n - 2)]\n    if n == 5:\n        return [factors(n - 3)]\n    if n == 6:\n        return [factors(n - 4)]\n    if n == 7:\n        return [factors(n - 5)]\n    if n == 8:\n        return [factors(n - 6)]\n    if n == 9:\n        return [factors(n - 7)]\n    if n == 10:\n        return [factors(n - 8)]\n    if n == 11:\n        return [factors(n - 9)]\n    if n == 12:\n        return [factors(n - 10)]\n    if n == 13:\n        return [factors(n - 11)]\n    if n == 14:\n        return [factors(n - 12)]\n    if n == 15:\n        return [factors(n - 13)]\n    if n == 16:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i * 2)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n)]\n    if n == 3:\n        return [factors(n) for factors in factorize(n)]\n    if n == 4:\n        return [factors(n) for factors in factorize(n)]\n    if n == 5:\n        return [factors(n) for factors in factorize(n)]\n    if n == 6:\n        return [factors(n) for factors in factorize(n)]\n    if n == 7:\n        return [factors(n) for factors in factorize(n)]\n    if n == 8:\n        return [factors(n) for factors in factorize(n)]\n    if n == 9:\n        return [factors(n) for factors in factorize(n)]\n    if n == 10:\n        return [factors(n) for factors in factorize(n)]\n    if n == 11:\n        return [factors(n) for factors in factorize(n)]\n    if n == 12:\n        return [factors(n) for factors in factorize(", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    if n == 1:\n        return [n]\n\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n\n    if n == 3:\n        return [factors(n - 1) for factors in factorize(n - 2)]\n\n    if n == 4:\n        return [factors(n - 2) for factors in factorize(n - 3)]\n\n    if n == 5:\n        return [factors(n - 3) for factors in factorize(n - 4)]\n\n    if n == 6:\n        return [factors(n - 4) for factors in factorize(n - 5)]\n\n    if n == 7:\n        return [factors(n - 5) for factors in factorize(n - 6)]\n\n    if n == 8:\n        return [factors(n - 6) for factors in factorize(n - 7)]\n\n    if n == 9:\n        return [factors(n - 7) for factors in factorize(n - 8)]\n\n    if n == 10:\n        return [factors(n - 8) for factors in factorize(n - 9)]\n\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1)]\n    if n == 4:\n        return [factors(n - 1)]\n    if n == 5:\n        return [factors(n - 1)]\n    if n == 6:\n        return [factors(n - 1)]\n    if n == 7:\n        return [factors(n - 1)]\n    if n == 8:\n        return [factors(n - 1)]\n    if n == 9:\n        return [factors(n - 1)]\n    if n == 10:\n        return [factors(n - 1)]\n    if n == 11:\n        return [factors(n - 1)]\n    if n == 12:\n        return [factors(n - 1)]\n    if n == 13:\n        return [factors(n - 1)]\n    if n == 14:\n        return [factors(n - 1)]\n    if n == 15:\n        return [factors(n - 1)]\n    if n == 16:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [1, 2, 2]\n    if n == 3:\n        return [1, 2, 3, 3]\n    if n == 4:\n        return [1, 2, 3, 4, 4]\n    if n == 5:\n        return [1, 2, 3, 4, 5, 5]\n    if n == 6:\n        return [1, 2, 3, 4, 5, 6, 6]\n    if n == 7:\n        return [1, 2, 3, 4, 5, 6, 7, 7]\n    if n == 8:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 8]\n    if n == 9:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]\n    if n == 10:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\n    if n == 11:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11]\n    if n == 12:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9,", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [2, 2]\n    if n == 3:\n        return [3, 3]\n    if n == 4:\n        return [4, 4]\n    if n == 5:\n        return [5, 5]\n    if n == 6:\n        return [6, 6]\n    if n == 7:\n        return [7, 7]\n    if n == 8:\n        return [8, 8]\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [(n - 1)]\n    if n == 3:\n        return [(n - 2)]\n    if n == 4:\n        return [(n - 3)]\n    if n == 5:\n        return [(n - 4)]\n    if n == 6:\n        return [(n - 5)]\n    if n == 7:\n        return [(n - 6)]\n    if n == 8:\n        return [(n - 7)]\n    if n == 9:\n        return [(n - 8)]\n    if n == 10:\n        return [(n - 9)]\n    if n == 11:\n        return [(n - 10)]\n    if n == 12:\n        return [(n - 11)]\n    if n == 13:\n        return [(n - 12)]\n    if n == 14:\n        return [(n - 13)]\n    if n == 15:\n        return [(n - 14)]\n    if n == 16:\n        return [(n - 15)]\n    if n == 17:\n        return [(n - 16)]\n    if n == 18:\n        return [(n - 17)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [1, 2, 2]\n    if n == 3:\n        return [1, 2, 3, 3]\n    if n == 4:\n        return [1, 2, 3, 4, 4]\n    if n == 5:\n        return [1, 2, 3, 4, 5, 5]\n    if n == 6:\n        return [1, 2, 3, 4, 5, 6, 6]\n    if n == 7:\n        return [1, 2, 3, 4, 5, 6, 7, 7]\n    if n == 8:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 8]\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [1, 2]\n    if n == 3:\n        return [1, 3]\n    if n == 4:\n        return [1, 4]\n    if n == 5:\n        return [1, 5]\n    if n == 6:\n        return [1, 6]\n    if n == 7:\n        return [1, 7]\n    if n == 8:\n        return [1, 8]\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n)]\n    if n == 3:\n        return [factors(n) for factors in factorize(n)]\n    if n == 4:\n        return [factors(n) for factors in factorize(n)]\n    if n == 5:\n        return [factors(n) for factors in factorize(n)]\n    if n == 6:\n        return [factors(n) for factors in factorize(n)]\n    if n == 7:\n        return [factors(n) for factors in factorize(n)]\n    if n == 8:\n        return [factors(n) for factors in factorize(n)]\n    if n == 9:\n        return [factors(n) for factors in factorize(n)]\n    if n == 10:\n        return [factors(n) for factors in factorize(n)]\n    if n == 11:\n        return [factors(n) for factors in factorize(n)]\n    if n == 12:\n        return [factors(n) for factors in factorize(", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1) for factors in factorize(n - 2)]\n    if n == 4:\n        return [factors(n - 2) for factors in factorize(n - 3)]\n    if n == 5:\n        return [factors(n - 3) for factors in factorize(n - 4)]\n    if n == 6:\n        return [factors(n - 4) for factors in factorize(n - 5)]\n    if n == 7:\n        return [factors(n - 5) for factors in factorize(n - 6)]\n    if n == 8:\n        return [factors(n - 6) for factors in factorize(n - 7)]\n    if n == 9:\n        return [factors(n - 7) for factors in factorize(n - 8)]\n    if n == 10:\n        return [factors(n - 8) for factors in factorize(n - 9)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [2, 2]\n    if n == 3:\n        return [3, 3]\n    if n == 4:\n        return [4, 4]\n    if n == 5:\n        return [5, 5]\n    if n == 6:\n        return [6, 6]\n    if n == 7:\n        return [7, 7]\n    if n == 8:\n        return [8, 8]\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [(n - 1)]\n    if n == 3:\n        return [(n - 2)]\n    if n == 4:\n        return [(n - 3)]\n    if n == 5:\n        return [(n - 4)]\n    if n == 6:\n        return [(n - 5)]\n    if n == 7:\n        return [(n - 6)]\n    if n == 8:\n        return [(n - 7)]\n    if n == 9:\n        return [(n - 8)]\n    if n == 10:\n        return [(n - 9)]\n    if n == 11:\n        return [(n - 10)]\n    if n == 12:\n        return [(n - 11)]\n    if n == 13:\n        return [(n - 12)]\n    if n == 14:\n        return [(n - 13)]\n    if n == 15:\n        return [(n - 14)]\n    if n == 16:\n        return [(n - 15)]\n    if n == 17:\n        return [(n - 16)]\n    if n == 18:\n        return [(n - 17)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 2) for factors in factorize(n - 1)]\n    if n == 4:\n        return [factors(n - 3) for factors in factorize(n - 2)]\n    if n == 5:\n        return [factors(n - 4) for factors in factorize(n - 3)]\n    if n == 6:\n        return [factors(n - 5) for factors in factorize(n - 4)]\n    if n == 7:\n        return [factors(n - 6) for factors in factorize(n - 5)]\n    if n == 8:\n        return [factors(n - 7) for factors in factorize(n - 6)]\n    if n == 9:\n        return [factors(n - 8) for factors in factorize(n - 7)]\n    if n == 10:\n        return [factors(n - 9) for factors in factorize(n - 8)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    factor = []\n    for i in range(n):\n        factor.append(i)\n\n    return factor", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1)]\n    if n == 4:\n        return [factors(n - 2)]\n    if n == 5:\n        return [factors(n - 3)]\n    if n == 6:\n        return [factors(n - 4)]\n    if n == 7:\n        return [factors(n - 5)]\n    if n == 8:\n        return [factors(n - 6)]\n    if n == 9:\n        return [factors(n - 7)]\n    if n == 10:\n        return [factors(n - 8)]\n    if n == 11:\n        return [factors(n - 9)]\n    if n == 12:\n        return [factors(n - 10)]\n    if n == 13:\n        return [factors(n - 11)]\n    if n == 14:\n        return [factors(n - 12)]\n    if n == 15:\n        return [factors(n - 13)]\n    if n == 16:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 1) for factors in factorize(n - 2)]\n    if n == 4:\n        return [factors(n - 2) for factors in factorize(n - 3)]\n    if n == 5:\n        return [factors(n - 3) for factors in factorize(n - 4)]\n    if n == 6:\n        return [factors(n - 4) for factors in factorize(n - 5)]\n    if n == 7:\n        return [factors(n - 5) for factors in factorize(n - 6)]\n    if n == 8:\n        return [factors(n - 6) for factors in factorize(n - 7)]\n    if n == 9:\n        return [factors(n - 7) for factors in factorize(n - 8)]\n    if n == 10:\n        return [factors(n - 8) for factors in factorize(n - 9)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [(n - 1)]\n    if n == 3:\n        return [(n - 2)]\n    if n == 4:\n        return [(n - 3)]\n    if n == 5:\n        return [(n - 4)]\n    if n == 6:\n        return [(n - 5)]\n    if n == 7:\n        return [(n - 6)]\n    if n == 8:\n        return [(n - 7)]\n    if n == 9:\n        return [(n - 8)]\n    if n == 10:\n        return [(n - 9)]\n    if n == 11:\n        return [(n - 10)]\n    if n == 12:\n        return [(n - 11)]\n    if n == 13:\n        return [(n - 12)]\n    if n == 14:\n        return [(n - 13)]\n    if n == 15:\n        return [(n - 14)]\n    if n == 16:\n        return [(n - 15)]\n    if n == 17:\n        return [(n - 16)]\n    if n == 18:\n        return [(n - 17)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i * 2)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n)]\n    if n == 3:\n        return [factors(n) for factors in factorize(n)]\n    if n == 4:\n        return [factors(n) for factors in factorize(n)]\n    if n == 5:\n        return [factors(n) for factors in factorize(n)]\n    if n == 6:\n        return [factors(n) for factors in factorize(n)]\n    if n == 7:\n        return [factors(n) for factors in factorize(n)]\n    if n == 8:\n        return [factors(n) for factors in factorize(n)]\n    if n == 9:\n        return [factors(n) for factors in factorize(n)]\n    if n == 10:\n        return [factors(n) for factors in factorize(n)]\n    if n == 11:\n        return [factors(n) for factors in factorize(n)]\n    if n == 12:\n        return [factors(n) for factors in factorize(", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [1, 2, 2]\n    if n == 3:\n        return [1, 2, 3, 3]\n    if n == 4:\n        return [1, 2, 3, 4, 4]\n    if n == 5:\n        return [1, 2, 3, 4, 5, 5]\n    if n == 6:\n        return [1, 2, 3, 4, 5, 6, 6]\n    if n == 7:\n        return [1, 2, 3, 4, 5, 6, 7, 7]\n    if n == 8:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 8]\n    if n == 9:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]\n    if n == 10:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\n    if n == 11:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11]\n    if n == 12:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9,", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor = []\n    for i in range(n):\n        factor.append(i)\n    return factor", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [1, 2]\n    if n == 3:\n        return [1, 3]\n    if n == 4:\n        return [1, 4]\n    if n == 5:\n        return [1, 5]\n    if n == 6:\n        return [1, 6]\n    if n == 7:\n        return [1, 7]\n    if n == 8:\n        return [1, 8]\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [factors(n) for factors in factorize(n - 1)]\n    if n == 3:\n        return [factors(n - 2) for factors in factorize(n - 1)]\n    if n == 4:\n        return [factors(n - 3) for factors in factorize(n - 2)]\n    if n == 5:\n        return [factors(n - 4) for factors in factorize(n - 3)]\n    if n == 6:\n        return [factors(n - 5) for factors in factorize(n - 4)]\n    if n == 7:\n        return [factors(n - 6) for factors in factorize(n - 5)]\n    if n == 8:\n        return [factors(n - 7) for factors in factorize(n - 6)]\n    if n == 9:\n        return [factors(n - 8) for factors in factorize(n - 7)]\n    if n == 10:\n        return [factors(n - 9) for factors in factorize(n - 8)]\n    if n == 11:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor = []\n    for i in range(n):\n        factor.append(i)\n    return factor"]]