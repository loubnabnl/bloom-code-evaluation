[["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # A list is monotonically increasing if the elements are increasing\n    for item in l:\n        if not item > 0:\n            return False\n    # A list is monotonically decreasing if the elements are decreasing\n    return not item < 0:", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return not (isinstance(l[0], int) and isinstance(l[-1], int) and l[0] < l[-1]) or \\\n            l[0] < l[-1] or l[-1] < l[0]", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1:\n        return True\n    r = 0\n    for i in range(len(l)):\n        if l[i] > l[i - r]:\n            r = i - 1\n        else:\n            r = i\n    return r == 0", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return True\n    if l[0] > l[-1]:\n        return False\n    if l[0] < l[-1]:\n        return True\n    return l[len(l) - 1] > l[len(l) - 2]\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def get_val(x: int) -> int:\n        if x < 0 or x > len(l):\n            return None\n        return l[x]\n    return x < 0 and get_val(-x) < get_val(x) or get_val(x) > get_val(x + 1)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l)):\n        if l[i] > l[i - 1] or l[i] < l[i + 1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1:\n        return True\n    elif len(l) > 1:\n        return monotonic(l[1:]) and monotonic(l[:-1])\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return any(x > y for x, y in zip(l, reversed(l)))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) > 1:\n        return monotonic(l[1:]) > monotonic(l[:-1])\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return l[0] < l[1]\n    if l[0] > l[-1]:\n        return True\n    if l[-1] < l[-2]:\n        return True\n    if l[-1] > l[-2]:\n        return False\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i, v in enumerate(l):\n        if v == 0:\n            continue\n        if v > 1:\n            return False\n        if v < 0:\n            return True\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return False\n    if l[0] < l[1]:\n        return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return any(1 == x for x in l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l)):\n        if l[i] > l[i-1]:\n            return False\n        elif l[i] < l[i-1]:\n            return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l)):\n        if l[i] > l[i - 1]:\n            return True\n        elif l[i] < l[i - 1]:\n            return False\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l.count(1) == 0:\n        return False\n    if l[0] == l[1]:\n        return True\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i, elem in enumerate(l):\n        if elem > 0:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # turn list into a tuple\n    t = [tuple(l)]\n    # check for ties\n    for i in range(len(t)):\n        if t[i][0] == t[i][1]:\n            t[i] = [t[i][0]]]\n    # loop over the tuples\n    for i, v in enumerate(t):\n        # check if one of the tuples contains an element that is not\n        # already in the other tuple.\n        if v[0]!= l[i]:\n            return False\n    # check if l[i] is monotonically increasing\n    return monotonic(l) and t[i][0] < l[i][0] and t[i][1] > l[i][1]\n    # check if l[i] is monotonically decreasing\n    return monotonic(l) and t[i][0] > l[i][0] and t[i][1] < l[i][1]", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for a, b in zip(l, l[1:]):\n        if abs(a-b) > abs(a):\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)!= 1:\n        raise ValueError('Invalid input: len(l)!= 1')\n    if l[0] == l[-1] == 0:\n        return True\n    if l[0] < l[1]:\n        return True\n    if l[0] > l[-1]:\n        return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def check(l):\n        if l == [0]:\n            return False\n        elif isinstance(l, list):\n            return len(l) <= len(l[1:])\n        elif isinstance(l, dict):\n            for k, v in l.items():\n                if isinstance(v, list):\n                    return check(v)\n                elif isinstance(v, dict):\n                    for k in v.keys():\n                        if isinstance(v[k], list):\n                            return check(v[k])\n                        elif isinstance(v[k], dict):\n                            for k in v[k].keys():\n                                if isinstance(v[k][k], list):\n                                    return check(v[k][k])\n                                elif isinstance(v[k][k], dict):\n                                    for k in v[k][k].keys():\n                                        if isinstance(v[k][k][k], list):\n                                            return check(v[k][k][k])\n                else:\n                    return False\n        else:\n            return False\n    l = [check(l) for l in l]\n    return all(l)\n    return monotonic", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return next(x for x in l if x <= next(x) or x >= next(x)) == 0", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1 or l[0] == 0:\n        return False\n    else:\n        if l[0] > l[-1]:\n            return True\n        else:\n            return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in l:\n        if i > 1:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def monotonic_comparator(x: int, y: int) -> bool:\n        return x > y\n    return sorted(list(set(xmonotonic_comparator(x, y) for x, y in l)),\n               key=monotonic_comparator)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return True\n    while l[0] < l[1]:\n        l.remove(0)\n        l.reverse()\n    i = 0\n    while i < len(l):\n        if l[i] < l[i+1]:\n            i += 1\n        else:\n            return False\n    return True\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return (len(l) == 1) and (not len(l) == 0) and l[0] > l[1]", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # If we have two elements at the same position, give it one greater than the next one.\n    if l[0] == l[1]:\n        l = l[1:]\n    # If we have a first position greater than the previous one, give it one less than the previous one.\n    if l[0] < l[1]:\n        l = l[:-1]\n    return l == []", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    assert len(l) > 0\n    for i in range(len(l)):\n        if l[i] > l[i-1]:\n            return True\n        elif l[i] < l[i-1]:\n            return False\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def is_monotonically_increasing(i: int) -> bool:\n        return i < len(l) or (i == len(l) and l[i] < l[i - 1])\n    return is_monotonically_increasing(-1) or is_monotonically_increasing(0) or \\\n               is_monotonically_increasing(1) or is_monotonically_increasing(2) \\\n               or is_monotonically_increasing(3) \\\n               or is_monotonically_increasing(4) \\\n               or is_monotonically_increasing(5) \\\n               or is_monotonically_increasing(6) \\\n               or is_monotonically_increasing(7) \\\n               or is_monotonically_increasing(8) \\\n               or is_monotonically_increasing(9) \\\n               or is_monotonically_increasing(10) \\\n               or is_monotonically_increasing(20)\n    def is_monotonically_decreasing(i: int) -> bool:\n        return i > 0 and i == 0 or i > len(l) and i < len(l", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def ismono(x: int) -> bool:\n        return bool(x & -1)\n    def monotone(x: int) -> bool:\n        return monotone(x) or ismono(x)\n    if len(l) == 1:\n        return l[0] == l[1]\n    elif len(l) == 0:\n        return True\n    else:\n        if l[-1] < l[-1]:\n            return monotone(l[-1])\n        else:\n            return monotone(l[1:])\n        return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return not (isinstance(l[0], int) and l[1] == l[0] and l[2] >= l[0] and l[2] <= l[1] and l[3] >= l[0] and l[3] <= l[1] and l[4] >= l[0] and l[4] <= l[1] and l[5] >= l[0] and l[5] <= l[1] and l[6] >= l[0] and l[6] <= l[1] and l[7] >= l[0] and l[7] <= l[1] and l[8] >= l[0] and l[8] <= l[1] and l[9] >= l[0] and l[9] <= l[1] and l[10] >= l[0] and l[10] <= l[1] and l[11] >= l[0] and l[11] <= l[1] and l[12] >= l[0] and l[12] <= l[1] and l[13] >= l[0] and l[13] <= l[1] and l[14] >= l[0] and l[14] <= l[1] and l[15] >= l[0] and l[15] <= l[1])\n\n    def _next(self, e: list) -> list:\n        \"\"\"Return list of next element of given list\"\"\"\n        if self.next == 0:\n            return []\n        while e:\n            e = e[self.next]\n        return e\n\n    def __iter__(self) -> iter:\n        while True:\n            yield self._next(self.seq", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # l[0] is always zero\n    if l[0] == 0:\n        return True\n\n    if l[0] > l[-1]:\n        return True\n\n    if l[0] < l[-1]:\n        return True\n\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return True\n    if l[0] > l[1]:\n        return True\n    return l[0] < l[1]", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l[0] == l[1]:\n        return False\n    if l[1] < l[0]:\n        return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) > 1:\n        first = l[0]\n        if first > 2:\n            return False\n        else:\n            return True\n    else:\n        return False\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l)):\n        if l[i] < l[i + 1:]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    l = sorted(l, reverse=True)\n    if len(l) > 1:\n        return l[0] > l[1]\n    return l[0] < l[1]", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return max(0, l) < min(l + 1, len(l))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    l = list(l)\n    if len(l) == 0:\n        return True\n    # decrease(l) is monotonic so must be monotonic(l)\n    # l is either increasing or decreasing\n    # so l[0] is increasing so l[0] is decreasing\n    if len(l) > 1:\n        return monotonic(l[0:-1])\n    return l[0] == l[-1]", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1:\n        return l[0] > 0\n    if l[-1] < l[:-1]:\n        return False\n    return monotonic(l[1:]) > monotonic(l[:-1]) \\\n         or monotonic(l[:-1]) < monotonic(l[1:])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1:\n        return False\n    elif len(l) == 2:\n        return False\n    elif len(l) == 3:\n        return l[0] > l[1]\n    elif len(l) == 4:\n        return l[1] > l[2]\n    elif len(l) == 5:\n        return l[2] > l[0]\n    elif len(l) == 6:\n        return l[3] > l[0]\n    elif len(l) == 7:\n        return l[4] > l[0]\n    elif len(l) == 8:\n        return l[5] > l[0]\n    elif len(l) == 9:\n        return l[6] > l[0]\n    elif len(l) == 10:\n        return l[7] > l[0]\n    elif len(l) == 11:\n        return l[8] > l[0]\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return any(i + 1 for i, _ in enumerate(l)) and l[i + 1] == l[i]", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return list(set(list(x) for x in l)) == set(range(len(l)))\n    # return all x <= y and all x >= y in l\n    # return all x <= y in l and all x >= y in l\n    # return x in l and y in l\n    # return all x in l and y in l\n    # return x in l and y in l and all y in l\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return monotonic_(l) is True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    i = l.index(0)\n    while i > 0:\n        i -= 1\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    try:\n        return True\n    except ValueError:\n        return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)!= 1:\n        raise ValueError(\"monotonically increasing and decreasing list must have the same length\")\n    i = 0\n    while i < len(l):\n        if l[i] < l[i + 1]:\n            return False\n        elif l[i] > l[i + 1]:\n            return True\n        else:\n            i = i + 1\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return sorted(l)[0] > sorted(l)[1] or sorted(l)[0] < sorted(l)[1] or \\\n           sorted(l)[1] < sorted(l)[0]\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    try:\n        return abs(l) > 0\n    except TypeError:\n        return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return l.index(max(l)) < l.index(min(l))+1", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for item in l:\n        if item > 0:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l:\n        return any(i < l[0] for i in l)\n    else:\n        return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for item in l:\n        if item > 0:\n            return False\n        elif item < 0:\n            return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(0, len(l), 2):\n        if l[i] > l[i + 1]:\n            return False\n        else:\n            return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return sorted(l) == sorted([_ + x for x in l])</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return list(reversed(l))[0] < list(reversed(l))[1]", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return sum(range(1, len(l)) for x in l) <= len(l)-1", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l[0] <= l[1]:\n        return True\n    else:\n        return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) > 1:\n        def next(n: int) -> int:\n            return n + 1\n    else:\n        return 0", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return True\n    if len(l) == 1:\n        return monotonic(l) == False\n    elif l[0] < l[1]:\n        return True\n    elif l[0] > l[1]:\n        return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return not l[0] == l[-1] or l[0] < l[-1] or l[0] > l[-1] or l[-1] < l[0]:\n    \"\"\"Return True if the list contains at least one element that is monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    l = reversed(l)\n    if len(l) == 0:\n        return True\n    if not l:\n        return False\n    if l[0] > l[-1]:\n        return False\n    if l[0] < l[-1]:\n        return True\n    if l[-1] > l[-1]:\n        return False\n    if l[-1] < l[-1]:\n        return True\n    return monotonic(l[1:])\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return False\n\n    for element in l:\n        if element > 0:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l[0] < l[1]:\n        return False\n    elif l[1] < l[0]:\n        return True\n    else:\n        return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(0, len(l)):\n        if l[i] > l[i - 1] and l[i] < l[i + 1] and l[i] > l[i + 2]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1:\n        return True\n    elif len(l) == 2:\n        if l[0] > l[1]:\n            return False\n        else:\n            return True\n    elif len(l) == 3:\n        return l[0] > l[1] > l[2]\n    elif len(l) == 4:\n        if l[0] > l[1] > l[2] > l[3]:\n            return False\n        else:\n            return True\n    else:\n        return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l == []: return False\n    if l[0] > l[1]: return True\n    elif l[0] < l[1]: return False\n    elif l[0] == l[1]:\n        return True\n    elif l[0] == l[2]:\n        return True\n    elif l[0] == l[3]:\n        return False\n    elif l[0] == l[4] or l[0] == l[5]:\n        return True\n    elif l[0] == l[6] or l[0] == l[7]:\n        return True\n    elif l[0] == l[8]:\n        return True\n    else:\n        return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l == []:\n        return False\n    if l[0] == l[1]:\n        return False\n    return l[0] < l[1] or l[0] == l[1] and l[1] > 0", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return False\n    if l[0] > l[1]:\n        return True\n    if l[0] < l[1]:\n        return False\n    return monotonic(l[1:])\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(i < j for i, j in enumerate(l)) or all(i > j for i, j in enumerate(l))</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) <= 2:\n        return False\n    l = list(l)\n    i = 0\n    while l[i] <= l[i + 1] and i < len(l):\n        i += 1\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return sorted(l) > sorted(l) < sorted(l) or \\\n        sorted(l) <= sorted(l) < sorted(l) or \\\n        sorted(l) >= sorted(l) < sorted(l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return False\n    if l[0] > l[-1]:\n        return True\n    else:\n        return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return 0 <= l[0] <= l[1] or l[0] >= l[1] and l[1] <= l[2] or l[0] >= l[2] and l[1] <= l[3] or l[0] >= l[3] and l[1] <= l[4] or l[0] >= l[4] and l[1] <= l[5] or l[0] >= l[5] and l[1] <= l[6] or l[0] >= l[6] and l[1] <= l[7] or l[0] >= l[7] and l[1] <= l[8]\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(isinstance(x, int) for x in l) or all(isinstance(x, float) for x in l)\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def func(n: int) -> bool:\n        if n > len(l) - 1:\n            return False\n        if n < 0:\n            return True\n        return monotonic(l[:n]) == monotonic(l[n + 1:])\n    return func", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def monotonic_counter(t: int) -> bool:\n        if t == 0:\n            return False\n        return t > 0\n\n    def l_cons(xs: list) -> bool:\n        return len(x) == len(xs) and all(l_cons(x) for x in xs)\n\n    def l_not_cons(xs: list) -> bool:\n        return len(x) < len(xs) and all(l_not_cons(x) for x in xs)\n\n    def l_comma_cons(xs: list) -> bool:\n        return len(x) == len(xs) and all(l_comma_cons(x) for x in xs)\n\n    def l_minus_cons(xs: list) -> bool:\n        return len(x) < len(xs) and all(l_minus_cons(x) for x in xs)\n\n    def l_plus_cons(xs: list) -> bool:\n        return len(x) < len(xs) and all(l_plus_cons(x) for x in xs)\n\n    def l_not_plus_cons(xs: list) -> bool:\n        return len(x) > len(xs) and all(l_not_plus_cons(x) for x in xs)\n\n    def l_comma_not_plus", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return max(map(lambda x: x + 1, l)) < min(map(lambda x: x - 1, l))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # We first add all items to a new list, then use sort to figure out if they\n    # are monotonically increasing or decreasing. If they're monotonic increasing,\n    # simply return True.\n    new_list = []\n    for i in range(len(l)):\n        if monotonic(l[i:i+1]):\n            new_list.append(l[i:i+1])\n        else:\n            new_list.append(l[i:i+1])\n    return new_list.sort()[0] == l[0]", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # print \"monotonic:\", l\n    if len(l) == 1:\n        return True\n    if len(l) == 0:\n        return False\n    for i in range(0, len(l)):\n        if l[i] > l[i + 1]:\n            return True\n        elif l[i] < l[i + 1]:\n            return False\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1:\n        return True\n    if not l:\n        return False\n\n    i = 0\n    while i < len(l) - 1:\n        if l[i] > l[i+1]:\n            return False\n        elif l[i] < l[i+1]:\n            return True\n        i += 1\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return False if l[0] == 1 else True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(len(x) > len(y) for x, y in l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if type(l) is list:\n        return len(l) == 1\n    elif type(l) is dict:\n        return l.has_key(0)\n    else:\n        return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return sorted(l) == [sorted(x) for x in l]", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # Enumerate the elements\n    last_elem = len(l) - 1\n    for i in range(len(l)):\n        if l[i] > l[i + 1:]:\n            last_elem = i\n            break\n    # Return the element whose value is monotonically decreasing or increasing\n    return last_elem == len(l) - 1", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for elem in l:\n        if elem > 0:\n            if elem > 1:\n                return False\n        else:\n            if elem < 0:\n                return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for l in range(0, len(l), 2):\n        if l > len(l):\n            return False\n        if l < 0:\n            return True\n\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for x in range(len(l)):\n        if l[x] > l[x + 1]:\n            return False\n        elif l[x] < l[x + 1]:\n            return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return not any(ord(e) > ord(x) for e, x in l) and \\\n           not any(ord(e) < ord(x) for e, x in l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if isinstance(l, basestring):\n        l = [l]\n    if not isinstance(l, list):\n        return False\n\n    def reverse(x: float):\n        return x < 0\n\n    def lmon(x: list):\n        return sorted(x) == reversed(sorted(x))\n\n    lmon([0, 1, 2, 4, 20])\n\n    lmon([1, 20, 4, 10])\n\n    lmon([4, 1, 0, -10])\n\n    return not lmon(l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1:\n        return True\n    if l[0] > l[1]:\n        return False\n    elif l[0] < l[1]:\n        return True\n    elif l[1] > l[0]:\n        return False\n    elif l[1] < l[0]:\n        return True\n    else:\n        return True\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if isinstance(l, (list, tuple)):\n        if l[0] > l[1]:\n            return True\n        elif l[0] > l[2]:\n            return False\n        else:\n            return True\n    elif isinstance(l, str):\n        return monotonic([l.rstrip() for l in l.split(',')])\n    else:\n        return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return (l[-1] - l[0]) / len(l) > 1", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return len(l) > 1 and l[1] < l[0] and l[0] > l[1]", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return sorted(list(set(l))).issuperset(set([\n        1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n        11, 12, 13, 14, 15, 16, 17, 18, 19, 20\n    ]))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return True\n    try:\n        return int(l[0]) < int(l[-1])\n    except ValueError:\n        return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # The counterexample in Python 2.x was due to the dot operator, which\n    # was used to change the order of the numbers in the list. We fix this\n    # by changing the order of the numbers in the list.\n    for i in reversed(l):\n        if i > l[-1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def func(n: int) -> bool:\n        return n < l[0] or n > l[-1]\n    return func(l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for elem in l:\n        if elem < 0:\n            if elem > 0:\n                return False\n    return True\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for elem in l:\n        if elem > 0:\n            return False\n        elif elem < 0:\n            return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def equal(l1, l2):\n        if l1 == l2:\n            return True\n        for i in range(len(l1)):\n            if l1[len(l1) - i]!= l2[len(l2) - i]:\n                return False\n        return l1[0] == l2[0]\n\n    l = []\n    for i in range(len(l)):\n        if l[i]!= l[i + 1]:\n            return False\n    for j in range(len(l)):\n        if l[j]!= l[j + 1]:\n            return False\n    return equal(l, l[1:]) or equal(l[1:], l[0]) or equal(l[0], l[1:])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return l.count('.') > 0 or l.count('-') > 0 or l.count('+') > 0 or \\\n     l.count('.') == l.count('-') or l.count('-') == l.count('+') or \\\n     l.count('.') == l.count('+') or l.count('.') == l.count('-') or \\\n     l.count('-') == l.count('+') or \\\n     l.count('+') == l.count('+') or \\\n     l.count('.') == l.count('+') or l.count('-') == l.count('+') or \\\n     l.count('+') == l.count('-')\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return False\n    next = l.pop()\n    return next > l[0]", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for elem in l:\n        if elem > 0:\n            return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l)):\n        if l[i] > l[i-1]:\n            return True\n        elif l[i] < l[i-1]:\n            return False\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1:\n        return True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # # dict: dict[int, int]\n    # # dict: dict[int, int]\n    # # dict: dict[int, int]\n    # # dict: dict[int, int]\n    # # dict: dict[int, int]\n    # # dict: dict[int, int]\n    # # dict: dict[int, int]\n    # # dict: dict[int, int]\n    # # dict: dict[int, int]\n    # for i, v in enumerate(l):\n    #     if v > 0:\n    #         return False\n    # else:\n    #     return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1:\n        return True\n    if l[0] == l[1]:\n        return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return False\n    i = 0\n    while i < len(l):\n        if l[i] < l[i + 1]:\n            i += 1\n        else:\n            break\n    return i < len(l) - 1", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for x in range(0, len(l)):\n        if l[x] > l[(x + 1)]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def monotonic_handle(v: int) -> bool:\n        return v < l[0] or v > l[1]\n\n    for item in reversed(l):\n        v = monotonic_handle(item)\n        if v:\n            yield item\n    if len(l) > 1:\n        yield l[1]\n    else:\n        return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1 and l[0] == 0:\n        return False\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1:\n        return False\n    if l[0] == l[1]:\n        return True\n    if l[0] < l[1]:\n        return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(isinstance(e, int) and e > 0 for e in l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # 0 and -1, say\n    if len(l) == 0:\n        return False\n    # if l is not a sequence, say\n    elif len(l) == 1:\n        return False\n    # if l is a sequence, say\n    else:\n        # True is monotonically increasing or decreasing\n        for i in range(1, len(l)):\n            if l[i] > l[i - 1] or l[i] < l[i + 1]:\n                return False\n        return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(isinstance(e, float) for e in l) or all(isinstance(e, int) for e in l)\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return len(l) >= 2 and l[0] <= l[1] or l[0] > l[1]", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l)):\n        if l[i] > l[i - 1] or l[i] < l[i + 1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return any(1 <= l[0] <= l[-1] for l in l) or any(l[-1] < l[0] for l in l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return False\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1:]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    l = list(l)\n    for i in range(len(l)):\n        if l[i] > l[i + 1]:\n            return False\n        if l[i] < l[i + 1]:\n            return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)!= 1:\n        return False\n    return ord(l[0]) > ord(l[1]) or ord(l[0]) < ord(l[1]) or \\\n        (ord(l[0]) == ord(l[1]) and l[1] > l[0]) or (ord(l[0]) == ord(l[1]) and l[1] < l[0])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return False\n    elif len(l) == 1:\n        return monotonic(l[0]) == True\n    else:\n        for i in range(len(l)):\n            if l[i] > l[i - 1] or l[i - 1] > l[i]:\n                return False\n        return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return False\n    if monotonic(l[1:]) == monotonic(l[:-1]):\n        return False\n    if monotonic(l[1:]) > monotonic(l[:-1]):\n        return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l)):\n        if l[i] > l[i - 1]:\n            return False\n        elif l[i] < l[i + 1]:\n            return True\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return (len(l) == 1 and l[0] <= l[1]) or (len(l) == 2 and l[1] <= l[0])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for element in l:\n        if element > 0:\n            return False\n        if element < 0:\n            return True\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if isinstance(l, list):\n        return not any(i < j for i, j in zip(l, reversed(l)))\n\n    for i in range(len(l)):\n        if l[i] > l[i + 1:]:\n            return False\n        if l[i] < l[i + 1:]:\n            return True\n\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l)):\n        if l[i] > l[i - 1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return any(n for n in l if n > 0 or n < 0)\n    # return any(n for n in l if n <= 0 or n >= 10) for l in [1, 2, 4, 20]\n    # return any(n for n in l if n == 10) for l in [1, 2, 4, 20]", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return list(map(lambda x: x[1:], l)) >= list(map(lambda x: x[:-1], l)) or \\\n            list(map(lambda x: x[::-1], l)) <= list(map(lambda x: x[:-1], l))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l == []:\n        return False\n    if l[0] > l[1]:\n        return True\n    elif l[0] < l[1]:\n        return False\n    elif l[0] == l[1]:\n        return False\n    elif l[0] == l[2]:\n        return True\n    elif l[1] < l[2]:\n        return True\n    elif l[1] > l[2]:\n        return False\n    elif l[1] == l[2]:\n        return False\n    elif l[1] == l[3]:\n        return True\n    else:\n        return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return any(e > 0 for e in l) or any(e < 0 for e in l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return sorted(set(x) for x in l) == sorted(set(x) for x in reversed(l))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l)):\n        if l[i] > l[i - 1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i, l in enumerate(l):\n        if l > 0 and l < len(l)-1:\n            return True\n        elif l < 0 and l > 0:\n            return False\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def apply(l: list):\n        \"\"\"Apply a monotonic function to a list.\n        >>> apply([1, 2, 3, 4])\n        [0, 1, 2, 3]\n        \"\"\"\n        for i in range(len(l)):\n            if l[i] > l[i - 1]:\n                return True\n        return False\n    return apply(l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def ascending(x: int) -> bool:\n        \"\"\"Return True is x is increasing \"\"\"\n        if x > 0:\n            return True\n        else:\n            return False\n    def descending(x: int) -> bool:\n        \"\"\"Return True is x is decreasing \"\"\"\n        if x < len(l) - 1:\n            return True\n        else:\n            return False\n    return sorted(ascending(l), descending) if l else False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) > 1:\n        return False\n    for i in range(len(l)):\n        if i > 1:\n            if l[i] > l[i-1]:\n                return False\n        else:\n            if l[i] < l[i-1]:\n                return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i, elem in enumerate(l):\n        if elem > l[i - 1] or elem < l[i + 1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def _monotonic(l: list) -> bool:\n        \"\"\"Return True if elements are monotonically increasing.\"\"\"\n        for a in l:\n            if a < b:\n                return False\n        return True\n\n    monotonic(l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1:\n        return l[0] == 0\n    return not (l[1:] - l[:1]) <= 0", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return False\n    else:\n        first = l[0]\n        last = l[-1]\n        return first <= last\n\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    while len(l) > 1:\n        if l[-1] < l[-2]:\n            return False\n        l.pop()\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return False\n    max = max(l)\n    for i in xrange(len(l)):\n        if l[i] > max:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return l[0] < l[1] or l[0] > l[1] or \\\n         l[0] == l[1] and l[1] < l[2] or l[0] == l[2] and l[1] > l[2]", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return False\n    if len(l) < 2:\n        return False\n    a = l[0]\n    if a < b:\n        return False\n    if a == b:\n        return True\n    return monotonic(l[1:]) or monotonic(l[:-1]) or monotonic(l[1:])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in l:\n        if i > 1 and i < 10:\n            return False\n        elif i > 0 and i < 20:\n            return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return len(l) > 1 and list(l)[0] < list(l)[-1][-1]", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def fun(x: int) -> bool:\n        \"\"\"Return True if x is an increasing monotonic sequence.\"\"\"\n        if x == 0:\n            return True\n        if x < 0:\n            return False\n        return monotonic(x) > monotonic(-x)\n    return fun(x) for x in l", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return True\n    if l[0] < l[1]:\n        return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(l[1:] <= l[0] for l in l)\n    # @chetank\n    # @chetank.be: so is the reverse\n    # def reverse(l: list) -> list:\n    #    return [x for x in l if x < l[0]]\n    # return monotonic(reverse(l))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return False\n    else:\n        max = 0\n        for i in range(len(l)):\n            if l[i] > max:\n                max = l[i]\n        return max == len(l) - 1\n\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1:\n        return True\n    if l[0] < l[-1]:\n        return False\n    if l[0] > l[-1]:\n        return True\n    return 0.0 == monotonic(l[1:]) or 0.0 == monotonic(l[:-1]) or 0.0 == monotonic(l[1:])\n\n    def is_trivial(x: float):\n        return x == x\n\n    def is_equal(x: float, y: float):\n        return x == y\n\n    def is_floating_point(x: float):\n        return isinstance(x, float)\n\n    def is_non_negative(x: float):\n        return is_positive(x)\n\n    def is_positive(x: float):\n        return x > 0\n\n    def is_negative(x: float):\n        return x < 0\n\n    def is_integer(x: float):\n        return isinstance(x, int)\n\n    def is_real(x: float):\n        return isinstance(x, float)\n\n    def is_complex(x: float):\n        return isinstance(x, complex)\n\n    def is_sequence(x: list):\n        return any(is_scalar(e) for e in x)\n\n    def is_dense_sequence(x: list):\n        return any(is_scalar(", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return not (isinstance(l[0], int) and l[1] <= l[2]) and \\\n           not (isinstance(l[1], int) and l[2] >= l[0])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if type(l) not in [list, tuple]:\n        return False\n    if len(l) == 1:\n        return True\n    for i in range(len(l)):\n        if l[i] > l[i - 1]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1:\n        return True\n\n    result = True\n    for i in range(1, len(l)-1):\n        if l[i-1] > l[i]:\n            result = False\n    return result", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # monotonic sort returns the last element as the first element of the reversed\n    # list. If the reversed list contains only one element, this will be the last\n    # element.\n    reversed = [i for i, _ in enumerate(l) if i > 0]\n    return reversed[-1] == reversed[0]", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def monotonic_list(l: list) -> bool:\n        \"\"\"Convert list elements to monotonically increasing or decreasing.\n        >>> monotonic_list([1, 2, 3, 4, 5])\n        True\n        >>> monotonic_list([1, 2, 3, 4, 5], -1)\n        False\n        \"\"\"\n        def first(l: list) -> bool:\n            return len(l) > 1 and l[0] > l[-1]\n        def second(l: list) -> bool:\n            return len(l) > 1 and l[1] > l[-1]\n        def third(l: list) -> bool:\n            return len(l) > 2 and l[2] > l[-1]\n        def fourth(l: list) -> bool:\n            return len(l) > 2 and l[3] > l[-1]\n        def fifth(l: list) -> bool:\n            return len(l) > 2 and l[4] > l[-1]\n        def sixth(l: list) -> bool:\n            return len(l) > 2 and l[5] > l[-1]\n        def seventh(l: list) -> bool:\n            return len(l) > 2 and l[6] > l[-1]\n        def eighth(l: list) -> bool:\n            return len(l) >", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return False\n    s = 1\n    while s > l[1]:\n        s = s - l[1]\n    if s > l[0]:\n        return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # key is monotonic, value is not\n    while l[0]!= l[1]:\n        l[0] = l[0] - 1\n    while l[1]!= l[0]:\n        l[1] = l[1] + 1\n    return l[0] == l[1]", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not isinstance(l, list):\n        return False\n    if len(l) == 1:\n        return True\n    m = l[0]\n    for i in range(1, len(l)):\n        if l[i] > m:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all([l[0] < l[1] for l in l]) or all([l[1] < l[0] for l in l])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return next(l) < next(l) or next(l) > next(l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def func(x: int) -> bool:\n        return x < 0\n\n    return func(x) for x in l", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # since we are going to be only returning True for monotonicity, we need to define\n    # a list of our own\n    monotonic_list = []\n    for i in range(len(l)):\n        if l[i] > l[i-1]:\n            monotonic_list.append(i)\n            monotonic = True\n        elif l[i] > l[i-1]:\n            monotonic = False\n    if monotonic:\n        return True\n    else:\n        return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0] > l[1]:\n        return True\n    if l[0] < l[1]:\n        return False\n    return l[0] < l[1]", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return False\n    return l[0] < l[1] or l[0] > l[1] + 1", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l)):\n        if l[i] < l[i - 1] or l[i] > l[i + 1]:\n            return False\n    return True\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if type(l) == list:\n        if l[0] == l[1]:\n            return True\n        else:\n            return False\n    else:\n        return l[0] > l[1]", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l)):\n        if l[i] < l[i - 1]:\n            return False\n        elif l[i] > l[i - 1]:\n            return True\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for elt in l:\n        if elt < 0 or elt > len(l):\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not len(l):\n        return False\n    if len(l) == 1:\n        return True\n    for i in range(0, len(l)):\n        if l[i] < l[i - 1:]:\n            return False\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return any((x - l) > 0 for x in l) or any((x - l) < 0 for x in l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return False\n    if l[0] < l[1]:\n        return False\n    if l[0] > l[1]:\n        return True\n    return monotonic(l[1:])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for x in l:\n        if x == 0:\n            return False\n        elif x > 0:\n            return True\n        else:\n            return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def monotonic2(x: int) -> bool:\n        return (x > 0 and x < l.count(x) - 1)\n    return monotonic2(l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return True\n    elif l[0] == l[-1]:\n        return False\n    else:\n        return monotonic_order(l[1:]) == monotonic_order(l[:-1])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    l = list(l)\n    for i in range(len(l)):\n        if l[i] < l[i + 1]:\n            return False\n        else:\n            return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # Test all possible indexes\n    a = 0\n    b = len(l)\n    if not l[0] == l[b-1]:\n        return False\n    i = a + 1\n    while i < b:\n        if l[i] > l[i-1]:\n            return False\n        i += 1\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) > 1:\n        if l[0] > l[1]:\n            return False\n        else:\n            return True\n    else:\n        return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return any((x - l) < 0 for x in l) and any((x - l) > 0 for x in l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return any(x >= y for x, y in zip(l, reversed(l)))", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return False\n\n    if len(l) > 2:\n        for i in range(len(l)):\n            if l[i] > l[i - 1]:\n                return False\n    else:\n        for i in range(len(l)):\n            if l[i] < l[i + 1]:\n                return False\n\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def monotonic(element):\n        if element > 0:\n            return False\n        elif element < 0:\n            return True\n        else:\n            return element == 0\n    return monotonic", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l:\n        return any(l <= 0 for l in l)\n    else:\n        return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 0:\n        return True\n    def inner(x: float) -> bool:\n        return x >= 0 and x <= 1\n    def outer(x: float) -> bool:\n        return x < 0 and x >= 0\n    l = list(l)\n    if inner(l[0]) and inner(l[-1]):\n        return True\n    else:\n        return outer(l[0]) and outer(l[-1]):\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return len(l) > 1 and (l[-1] > l[1]) or (l[-1] < l[1])", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def monotonic(l: list) -> bool:\n        for x in l:\n            if x > 0:\n                return False\n            if x < 0:\n                return True\n        return True\n\n    return monotonic", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def _cmp(a: float, b: float) -> bool:\n        return a < b\n    if len(l) == 1:\n        return l[0] <= l[1]\n    elif len(l) == 2:\n        return _cmp(l[0], l[1]) and _cmp(l[1], l[2])\n    elif len(l) == 3:\n        return _cmp(l[0], l[1], l[2])\n    else:\n        return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return False\n    l = sorted(l)\n    for elem in l:\n        if elem > l[-1]:\n            return False\n    return True\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)!= 1:\n        return False\n    elif l[0] < l[1]:\n        return False\n    elif l[0] > l[1]:\n        return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    while len(l)!= 0:\n        # linearity test\n        if l[0] > l[1]:\n            return False\n        elif l[0] < l[1]:\n            return True\n        l = l[1:]\n    return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l[0] > l[1]:\n        return False\n    else:\n        return True", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1:\n        return True\n    elif len(l) == 0:\n        return False\n    elif l[0] > l[1]:\n        return True\n    elif l[0] < l[1]:\n        return False\n    elif l[1] > l[-2]:\n        return True\n    elif l[1] < l[-2]:\n        return False\n    return monotonic([l[0], l[1], l[2]])\n</s>", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    def check(value: float):\n        return (value > 0) and (value < 100)\n    return any(check(x) for x in l)", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l)):\n        if l[i] > l[i-1]:\n            return False\n        else:\n            return True\n    return False", "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(len(l)):\n        if i > 0:\n            if l[i] < l[i - 1]:\n                return True\n        else:\n            if l[i] > l[i - 1]:\n                return True\n    return False"]]