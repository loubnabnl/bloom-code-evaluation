[["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # We need to remove the leading and trailing spaces.\n    paren_string = paren_string.strip()\n\n    # We need to remove the leading and trailing spaces.\n    paren_string = paren_string.strip()\n\n    # We need to remove the leading and trailing spaces.\n    paren_string = paren_string.strip()\n\n    # We need to remove the leading and trailing spaces.\n    paren_string = paren_string.strip()\n\n    # We need to remove the leading and trailing spaces.\n    paren_string = paren_string.strip()\n\n    # We need to remove the leading and trailing spaces.\n    paren_string = paren_string.strip()\n\n    # We need to remove the leading and trailing spaces.\n    paren_string = paren_string.strip()\n\n    # We need to remove the leading and trailing spaces.\n    paren_string = paren_string.strip()\n\n    # We need to remove the leading and trailing spaces.\n    paren_string = paren_string.strip()\n\n    # We need to remove the leading and trailing spaces.\n    paren_string = paren_string.strip()\n\n    # We need to remove the leading and trailing spaces.\n    paren_string = paren_string.strip()\n\n    # We need to remove the leading and trailing spaces.\n    paren_string = paren_string.strip()\n\n    # We need", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(2)\n        elif paren.startswith(')'):\n            parens.append(3)\n        else:\n            raise ValueError('Invalid parenthesis format')\n    return parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace(',', '')\n    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace(',', '')\n    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace(',', '')\n    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace(',', '')\n    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace(',', '')\n    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace(',', '')\n    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace(',', '')\n    paren_string =", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('['):\n            nested_parens.append(0)\n        elif paren.startswith(']'):\n            nested_parens.append(-1)\n        else:\n            nested_parens.append(0)\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(2)\n        elif paren.startswith(')'):\n            nested_parens.append(3)\n        else:\n            nested_parens.append(4)\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(len(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            paren_groups.append(1)\n        elif paren.startswith(')'):\n            paren_groups.append(0)\n        else:\n            paren_groups.append(-1)\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(len(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(len(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(2)\n        elif paren.startswith(')'):\n            nested_parens.append(3)\n        else:\n            nested_parens.append(4)\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('['):\n            nested_parens.append(0)\n        elif paren.startswith(']'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('['):\n            nested_parens.append(0)\n        elif paren.startswith(']'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('['):\n            nested_parens.append(0)\n        elif paren.startswith(']", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(2)\n        elif paren.startswith(')'):\n            nested_parens.append(3)\n        elif paren.startswith('('):\n            nested_parens.append(4)\n        elif paren.startswith(')'):\n            nested_parens.append(5)\n        elif paren.startswith('('):\n            nested_parens.append(6)\n        elif paren.startswith(')'):\n            nested_parens.append(7)\n        elif paren.startswith('('):\n            nested_parens.append(8)\n        elif paren.startswith(')'):\n            nested_parens.append(9)\n        elif paren.startswith('('):\n            nested_parens.append(10)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        else:\n            parens.append(0)\n    return parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.isdigit():\n            nested_parens.append(int(paren))\n        elif paren.isalpha():\n            nested_parens.append(paren)\n        elif paren.isalnum():\n            nested_parens.append(paren)\n        elif paren.isalpha() or paren.isdigit() or paren.isalnum():\n            nested_parens.append(paren)\n        else:\n            raise ValueError('Invalid parenthesis format')\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('['):\n            parens.append(0)\n        elif paren.startswith(']'):\n            parens.append(1)\n        else:\n            parens.append(0)\n    return parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        parens.append(int(paren))\n    return parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('['):\n            nested_parens.append(0)\n        elif paren.startswith(']'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('['):\n            nested_parens.append(0)\n        elif paren.startswith(']'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('['):\n            nested_parens.append(0)\n        elif paren.startswith(']", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(2)\n        elif paren.startswith(')'):\n            nested_parens.append(3)\n        elif paren.startswith('('):\n            nested_parens.append(4)\n        elif paren.startswith(')'):\n            nested_parens.append(5)\n        elif paren.startswith('('):\n            nested_parens.append(6)\n        elif paren.startswith(')'):\n            nested_parens.append(7)\n        elif paren.startswith('('):\n            nested_parens.append(8)\n        elif paren.startswith(')'):\n            nested_parens.append(9)\n        elif paren.startswith('('):\n            nested_parens.append(10)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        parens.append(int(paren))\n    return parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(len(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren.isdigit():\n            parens.append(int(paren))\n        elif paren.isalpha():\n            parens.append(paren)\n        else:\n            raise ValueError('Invalid parenthesis character: %s' % paren)\n    return parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(len(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(2)\n        elif paren.startswith(')'):\n            nested_parens.append(3)\n        else:\n            nested_parens.append(4)\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(2)\n        elif paren.startswith(')'):\n            nested_parens.append(3)\n        else:\n            raise ValueError('Invalid parenthesis string')\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # We need to split the string into groups of parentheses\n    groups = paren_string.split(' ')\n\n    # We need to find the deepest level of nesting of parentheses\n    for group in groups:\n        if group.startswith('('):\n            # We need to find the deepest level of nesting of parentheses\n            depth = 0\n            for sub_group in group.split(')'):\n                depth += 1\n                if depth > depth:\n                    break\n            return [depth]\n        elif group.startswith('('):\n            # We need to find the deepest level of nesting of parentheses\n            depth = 0\n            for sub_group in group.split(')'):\n                depth += 1\n                if depth > depth:\n                    break\n            return [depth]\n        elif group.startswith('('):\n            # We need to find the deepest level of nesting of parentheses\n            depth = 0\n            for sub_group in group.split(')'):\n                depth += 1\n                if depth > depth:\n                    break\n            return [depth]\n        elif group.startswith('('):\n            # We need to find the deepest level of nesting of parentheses\n            depth =", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.isdigit():\n            nested_parens.append(int(paren))\n        elif paren.isalpha():\n            nested_parens.append(paren)\n        elif paren.isalnum():\n            nested_parens.append(paren)\n        else:\n            raise ValueError('Invalid parenthesis character: %s' % paren)\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('['):\n            nested_parens.append(1)\n        elif paren.startswith(']'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('['):\n            nested_parens.append(1)\n        elif paren.startswith(']'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('['):\n            nested_parens.append(1)\n        elif paren.startswith(']", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(2)\n        elif paren.startswith(')'):\n            nested_parens.append(3)\n        elif paren.startswith('('):\n            nested_parens.append(4)\n        elif paren.startswith(')'):\n            nested_parens.append(5)\n        elif paren.startswith('('):\n            nested_parens.append(6)\n        elif paren.startswith(')'):\n            nested_parens.append(7)\n        elif paren.startswith('('):\n            nested_parens.append(8)\n        elif paren.startswith(')'):\n            nested_parens.append(9)\n        elif paren.startswith('('):\n            nested_parens.append(10)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren in paren_string.split(' '):\n        paren_groups.append(len(paren))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(int(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(2)\n        elif paren.startswith(')'):\n            nested_parens.append(3)\n        else:\n            nested_parens.append(4)\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(len(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(0)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(0)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(0)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('['):\n            nested_parens.append(0)\n        elif paren.startswith(']'):\n            nested_parens.append(1)\n        else:\n            nested_parens.append(0)\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # First, we need to split the string into groups.\n    groups = paren_string.split(' ')\n\n    # Now, we need to find the deepest level of nesting.\n    for group in groups:\n        if group.startswith('('):\n            # We need to find the next group.\n            group = group[1:]\n        elif group.startswith(')'):\n            # We need to find the next group.\n            group = group[1:]\n        else:\n            # We need to find the next group.\n            group = group[1:]\n\n    # Finally, we need to return the deepest level of nesting.\n    return [int(group) for group in groups]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(len(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(int(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(0)\n        else:\n            nested_parens.append(2)\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        if paren_group.startswith('('):\n            paren_groups.append(1)\n        elif paren_group.startswith(')'):\n            paren_groups.append(2)\n        elif paren_group.startswith('('):\n            paren_groups.append(3)\n        elif paren_group.startswith(')'):\n            paren_groups.append(4)\n        elif paren_group.startswith('('):\n            paren_groups.append(5)\n        elif paren_group.startswith(')'):\n            paren_groups.append(6)\n        elif paren_group.startswith('('):\n            paren_groups.append(7)\n        elif paren_group.startswith(')'):\n            paren_groups.append(8)\n        elif paren_group.startswith('('):\n            paren_groups.append(9)\n        elif paren_group.startswith(')'):\n            paren_groups.append(10)\n        elif paren_group.startswith('('):\n            paren_groups.append(11)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('['):\n            nested_parens.append(0)\n        elif paren.startswith(']'):\n            nested_parens.append(1)\n        else:\n            nested_parens.append(0)\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(len(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren in paren_string.split(' '):\n        paren_groups.append(len(paren))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    groups = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            groups.append(1)\n        elif paren.startswith(')'):\n            groups.append(0)\n        else:\n            groups.append(2)\n    return groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(2)\n        elif paren.startswith(')'):\n            nested_parens.append(3)\n        elif paren.startswith('('):\n            nested_parens.append(4)\n        elif paren.startswith(')'):\n            nested_parens.append(5)\n        elif paren.startswith('('):\n            nested_parens.append(6)\n        elif paren.startswith(')'):\n            nested_parens.append(7)\n        elif paren.startswith('('):\n            nested_parens.append(8)\n        elif paren.startswith(')'):\n            nested_parens.append(9)\n        elif paren.startswith('('):\n            nested_parens.append(10)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren in paren_string.split(' '):\n        paren_groups.append(len(paren))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('['):\n            parens.append(0)\n        elif paren.startswith(']'):\n            parens.append(1)\n        else:\n            raise ValueError('Invalid parenthesis format')\n    return parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.isdigit():\n            nested_parens.append(int(paren))\n        else:\n            nested_parens.append(paren.strip())\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(0)\n        else:\n            nested_parens.append(0)\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(int(paren_group.strip()))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(len(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        else:\n            parens.append(0)\n    return parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(int(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        if paren_group.startswith('('):\n            paren_groups.append(1)\n        elif paren_group.startswith(')'):\n            paren_groups.append(-1)\n        else:\n            paren_groups.append(0)\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(len(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren in paren_string.split(' '):\n        if paren.isdigit():\n            paren_groups.append(paren)\n        elif paren.isalpha():\n            paren_groups.append(paren.upper())\n        else:\n            paren_groups.append(paren)\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(2)\n        elif paren.startswith(')'):\n            nested_parens.append(3)\n        elif paren.startswith('('):\n            nested_parens.append(4)\n        elif paren.startswith(')'):\n            nested_parens.append(5)\n        elif paren.startswith('('):\n            nested_parens.append(6)\n        elif paren.startswith(')'):\n            nested_parens.append(7)\n        elif paren.startswith('('):\n            nested_parens.append(8)\n        elif paren.startswith(')'):\n            nested_parens.append(9)\n        elif paren.startswith('('):\n            nested_parens.append(10)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        if paren_group.startswith('('):\n            paren_groups.append(0)\n        elif paren_group.startswith(')'):\n            paren_groups.append(1)\n        elif paren_group.startswith('('):\n            paren_groups.append(2)\n        elif paren_group.startswith(')'):\n            paren_groups.append(3)\n        else:\n            raise ValueError('Invalid parenthesis group: {}'.format(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(len(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            paren_groups.append(1)\n        elif paren.startswith(')'):\n            paren_groups.append(0)\n        elif paren.startswith('('):\n            paren_groups.append(1)\n        elif paren.startswith(')'):\n            paren_groups.append(0)\n        elif paren.startswith('('):\n            paren_groups.append(1)\n        elif paren.startswith(')'):\n            paren_groups.append(0)\n        elif paren.startswith('('):\n            paren_groups.append(1)\n        elif paren.startswith(')'):\n            paren_groups.append(0)\n        elif paren.startswith('('):\n            paren_groups.append(1)\n        elif paren.startswith(')'):\n            paren_groups.append(0)\n        elif paren.startswith('('):\n            paren_groups.append(1)\n        elif paren.startswith(')'):\n            paren", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(int(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(2)\n        elif paren.startswith(')'):\n            nested_parens.append(3)\n        elif paren.startswith('('):\n            nested_parens.append(4)\n        elif paren.startswith(')'):\n            nested_parens.append(5)\n        elif paren.startswith('('):\n            nested_parens.append(6)\n        elif paren.startswith(')'):\n            nested_parens.append(7)\n        elif paren.startswith('('):\n            nested_parens.append(8)\n        elif paren.startswith(')'):\n            nested_parens.append(9)\n        elif paren.startswith('('):\n            nested_parens.append(10)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(0)\n        elif paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(0)\n        elif paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(0)\n        elif paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(0)\n        elif paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(0)\n        elif paren.startswith('('):\n            nested_parens.append(1)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(2)\n        elif paren.startswith(')'):\n            nested_parens.append(3)\n        else:\n            nested_parens.append(4)\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(int(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # We use a list of tuples to represent the nested parentheses\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(parse_nested_parens(paren[1:]))\n        elif paren.startswith(')'):\n            nested_parens.append(parse_nested_parens(paren[1:]))\n        else:\n            raise ValueError('Invalid parenthesis format')\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('['):\n            nested_parens.append(0)\n        elif paren.startswith(']'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('['):\n            nested_parens.append(0)\n        elif paren.startswith(']'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('['):\n            nested_parens.append(0)\n        elif paren.startswith(']", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        if paren_group.startswith('('):\n            paren_groups.append(1)\n        elif paren_group.startswith(')'):\n            paren_groups.append(-1)\n        elif paren_group.startswith('('):\n            paren_groups.append(0)\n        elif paren_group.startswith(')'):\n            paren_groups.append(1)\n        elif paren_group.startswith('('):\n            paren_groups.append(0)\n        elif paren_group.startswith(')'):\n            paren_groups.append(-1)\n        elif paren_group.startswith('('):\n            paren_groups.append(0)\n        elif paren_group.startswith(')'):\n            paren_groups.append(1)\n        elif paren_group.startswith('('):\n            paren_groups.append(0)\n        elif paren_group.startswith(')'):\n            paren_groups.append(1)\n        elif paren_group.startswith('('):\n            paren_groups.append(0)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # The first group is the number of parentheses.\n    group = paren_string.split('(')[0]\n    # The second group is the depth of the first group.\n    depth = paren_string.split('(')[1]\n    # The third group is the depth of the second group.\n    depth2 = paren_string.split('(')[2]\n    # The fourth group is the depth of the third group.\n    depth3 = paren_string.split('(')[3]\n    # The fifth group is the depth of the fourth group.\n    depth4 = paren_string.split('(')[4]\n    # The sixth group is the depth of the fifth group.\n    depth5 = paren_string.split('(')[5]\n    # The seventh group is the depth of the sixth group.\n    depth6 = paren_string.split('(')[6]\n    # The eighth group is the depth of the seventh group.\n    depth7 = paren_string.split('(')[7]\n    # The ninth group is the depth of the eighth group.\n    depth8 = paren_string.split('(')[8]\n    # The tenth group is the depth of the ninth group.\n    depth9 = par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        parens.append(int(paren))\n    return parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(int(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(int(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # Get the number of groups in the string\n    groups = len(paren_string.split())\n\n    # Get the number of groups in each group\n    groups_per_group = groups / groups\n\n    # Get the number of groups in each group\n    groups_per_group_per_group = groups_per_group * groups_per_group\n\n    # Get the number of groups in each group\n    groups_per_group_per_group_per_group = groups_per_group_per_group * groups_per_group_per_group\n\n    # Get the number of groups in each group\n    groups_per_group_per_group_per_group_per_group = groups_per_group_per_group_per_group * groups_per_group_per_group_per_group\n\n    # Get the number of groups in each group\n    groups_per_group_per_group_per_group_per_group_per_group = groups_per_group_per_group_per_group_per_group * groups_per_group_per_group_per_group_per_group\n\n    # Get the number of groups in each group\n    groups_per_group_per_group_per_group_per_group_per_group_per_group = groups_per_group_per_group_per_group_per_group_per_group * groups_per_group_per_group_per_group_per_group_per_group\n\n    # Get the number of groups in each group\n    groups_per_group_per_group_per_group_per_group_per_group_per_group_per_group_per_group = groups_per_group_per_group_per_group_per", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('['):\n            nested_parens.append(0)\n        elif paren.startswith(']'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(-1)\n        elif paren.startswith(')'):\n            nested_parens.append(0)\n        elif paren.startswith('['):\n            nested_parens.append(0)\n        elif paren.startswith(']'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(-1)\n        elif paren.startswith(')'):\n            nested_parens.append(0)\n        elif paren.startswith('['):\n            nested_parens.append(0)\n        elif paren.startswith(']", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(int(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(len(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(int(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(len(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(int(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(2)\n        elif paren.startswith(')'):\n            nested_parens.append(3)\n        else:\n            raise ValueError('Invalid parenthesis string')\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(len(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.isdigit():\n            nested_parens.append(int(paren))\n        elif paren.isalpha():\n            nested_parens.append(paren)\n        else:\n            nested_parens.append(0)\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        else:\n            parens.append(0)\n    return parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('['):\n            nested_parens.append(0)\n        elif paren.startswith(']'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('['):\n            nested_parens.append(0)\n        elif paren.startswith(']'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('['):\n            nested_parens.append(0)\n        elif paren.startswith(']", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren.isdigit():\n            parens.append(int(paren))\n        elif paren.startswith('('):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(2)\n        elif paren.startswith('('):\n            parens.append(3)\n        elif paren.startswith(')'):\n            parens.append(4)\n        elif paren.startswith('('):\n            parens.append(5)\n        elif paren.startswith(')'):\n            parens.append(6)\n        elif paren.startswith('('):\n            parens.append(7)\n        elif paren.startswith(')'):\n            parens.append(8)\n        elif paren.startswith('('):\n            parens.append(9)\n        elif paren.startswith(')'):\n            parens.append(10)\n        elif paren.startswith('('):\n            parens.append(11)\n        elif paren.startswith('", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren.isdigit():\n            parens.append(int(paren))\n        elif paren.isalpha():\n            parens.append(paren)\n        elif paren.isalnum():\n            parens.append(paren)\n        else:\n            raise ValueError('Invalid parenthesis character: %s' % paren)\n    return parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren.isdigit():\n            parens.append(int(paren))\n        else:\n            parens.append(paren.strip())\n    return parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(2)\n        elif paren.startswith(')'):\n            nested_parens.append(3)\n        else:\n            raise ValueError('Invalid parenthesis format')\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.isdigit():\n            nested_parens.append(int(paren))\n        elif paren.isalpha():\n            nested_parens.append(paren)\n        else:\n            nested_parens.append(0)\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(len(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(len(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(2)\n        elif paren.startswith(')'):\n            nested_parens.append(3)\n        else:\n            raise ValueError('Invalid parenthesis string')\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(len(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('['):\n            parens.append(0)\n        elif paren.startswith(']'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('['):\n            parens.append(0)\n        elif paren.startswith(']'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('['):\n            parens.append(0)\n        elif paren.startswith(']'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # The first group is the number of parentheses\n    group = paren_string.split('(')[0]\n    # The second group is the number of parentheses in the first group\n    second_group = paren_string.split('(')[1]\n    # The third group is the number of parentheses in the second group\n    third_group = paren_string.split('(')[2]\n    # The fourth group is the number of parentheses in the third group\n    fourth_group = paren_string.split('(')[3]\n    # The fifth group is the number of parentheses in the fourth group\n    fifth_group = paren_string.split('(')[4]\n    # The sixth group is the number of parentheses in the fifth group\n    sixth_group = paren_string.split('(')[5]\n    # The seventh group is the number of parentheses in the sixth group\n    seventh_group = paren_string.split('(')[6]\n    # The eighth group is the number of parentheses in the seventh group\n    eighth_group = paren_string.split('(')[7]\n    # The ninth group is the number of parentheses in the eighth group\n    ninth_group = paren_string.split('(')[8]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(int(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(x) for x in paren_string.split(' ')]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        else:\n            parens.append(0)\n    return parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(2)\n        elif paren.startswith(')'):\n            nested_parens.append(3)\n        else:\n            raise ValueError('Invalid parenthesis format')\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(len(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        if paren_group.startswith('('):\n            paren_groups.append(1)\n        elif paren_group.startswith(')'):\n            paren_groups.append(-1)\n        elif paren_group.startswith('('):\n            paren_groups.append(0)\n        elif paren_group.startswith(')'):\n            paren_groups.append(1)\n        elif paren_group.startswith('('):\n            paren_groups.append(0)\n        elif paren_group.startswith(')'):\n            paren_groups.append(-1)\n        elif paren_group.startswith('('):\n            paren_groups.append(0)\n        elif paren_group.startswith(')'):\n            paren_groups.append(-1)\n        elif paren_group.startswith('('):\n            paren_groups.append(0)\n        elif paren_group.startswith(')'):\n            paren_groups.append(-1)\n        elif paren_group.startswith('('):\n            paren_groups.append(0)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(len(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(len(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(len(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.isdigit():\n            nested_parens.append(int(paren))\n        elif paren.isalpha():\n            nested_parens.append(paren.upper())\n        elif paren.isalnum():\n            nested_parens.append(paren)\n        elif paren.isalpha() or paren.isdigit() or paren.isalnum():\n            nested_parens.append(paren)\n        else:\n            raise ValueError('Invalid parenthesis format')\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(int(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # The following is a list of tuples of (level, depth) where level is the depth of the\n    # nested parentheses and depth is the number of levels of nesting.\n    # The depth of the nested parentheses is the number of spaces between the parentheses.\n    # The depth of the nested parentheses is the number of spaces between the parentheses.\n    # The depth of the nested parentheses is the number of spaces between the parentheses.\n    # The depth of the nested parentheses is the number of spaces between the parentheses.\n    # The depth of the nested parentheses is the number of spaces between the parentheses.\n    # The depth of the nested parentheses is the number of spaces between the parentheses.\n    # The depth of the nested parentheses is the number of spaces between the parentheses.\n    # The depth of the nested parentheses is the number of spaces between the parentheses.\n    # The depth of the nested parentheses is the number of spaces between the parentheses.\n    # The depth of the nested parentheses is the number of spaces between the parentheses.\n    # The depth of the nested parentheses is the number of spaces between the parentheses.\n    # The depth of the nested parentheses is the number of spaces between the parentheses.\n    # The depth of the nested parentheses is the number of spaces between the parentheses.\n    # The depth of the nested parentheses is the number of", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(int(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren in paren_string.split(' '):\n        paren_groups.append(len(paren))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # The first group is the number of parentheses\n    group = paren_string.split(' ')[0]\n    # The second group is the depth of the nested parentheses\n    depth = int(group.split(' ')[1])\n    # The third group is the depth of the parentheses\n    parentheses = depth - depth\n    # The fourth group is the depth of the parentheses\n    parentheses = parentheses - depth\n    # The fifth group is the depth of the parentheses\n    parentheses = parentheses - depth\n    # The sixth group is the depth of the parentheses\n    parentheses = parentheses - depth\n    # The seventh group is the depth of the parentheses\n    parentheses = parentheses - depth\n    # The eighth group is the depth of the parentheses\n    parentheses = parentheses - depth\n    # The ninth group is the depth of the parentheses\n    parentheses = parentheses - depth\n    # The tenth group is the depth of the parentheses\n    parentheses = parentheses - depth\n    # The eleventh group is the depth of the parentheses\n    parentheses = parentheses - depth\n    #", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        parens.append(int(paren))\n    return parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(int(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        if paren_group.startswith('('):\n            paren_groups.append(1)\n        elif paren_group.startswith(')'):\n            paren_groups.append(2)\n        elif paren_group.startswith('('):\n            paren_groups.append(1)\n        elif paren_group.startswith(')'):\n            paren_groups.append(2)\n        elif paren_group.startswith('('):\n            paren_groups.append(1)\n        elif paren_group.startswith(')'):\n            paren_groups.append(2)\n        elif paren_group.startswith('('):\n            paren_groups.append(1)\n        elif paren_group.startswith(')'):\n            paren_groups.append(2)\n        elif paren_group.startswith('('):\n            paren_groups.append(1)\n        elif paren_group.startswith(')'):\n            paren_groups.append(2)\n        elif paren_group.startswith('('):\n            paren_groups.append(1)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('['):\n            nested_parens.append(0)\n        elif paren.startswith(']'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('['):\n            nested_parens.append(0)\n        elif paren.startswith(']'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('['):\n            nested_parens.append(0)\n        elif paren.startswith(']", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren in paren_string.split(' '):\n        paren_groups.append(len(paren))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(2)\n        elif paren.startswith(')'):\n            nested_parens.append(3)\n        elif paren.startswith('('):\n            nested_parens.append(4)\n        elif paren.startswith(')'):\n            nested_parens.append(5)\n        elif paren.startswith('('):\n            nested_parens.append(6)\n        elif paren.startswith(')'):\n            nested_parens.append(7)\n        elif paren.startswith('('):\n            nested_parens.append(8)\n        elif paren.startswith(')'):\n            nested_parens.append(9)\n        elif paren.startswith('('):\n            nested_parens.append(10)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for group in paren_string.split(' '):\n        if group:\n            parens.append(int(group))\n    return parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(2)\n        elif paren.startswith(')'):\n            nested_parens.append(3)\n        else:\n            nested_parens.append(4)\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(len(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('['):\n            nested_parens.append(0)\n        elif paren.startswith(']'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('['):\n            nested_parens.append(0)\n        elif paren.startswith(']'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('['):\n            nested_parens.append(0)\n        elif paren.startswith(']", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(2)\n        elif paren.startswith(')'):\n            nested_parens.append(3)\n        elif paren.startswith('('):\n            nested_parens.append(4)\n        elif paren.startswith(')'):\n            nested_parens.append(5)\n        elif paren.startswith('('):\n            nested_parens.append(6)\n        elif paren.startswith(')'):\n            nested_parens.append(7)\n        elif paren.startswith('('):\n            nested_parens.append(8)\n        elif paren.startswith(')'):\n            nested_parens.append(9)\n        elif paren.startswith('('):\n            nested_parens.append(10)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(2)\n        elif paren.startswith(')'):\n            nested_parens.append(3)\n        else:\n            nested_parens.append(4)\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('['):\n            nested_parens.append(0)\n        elif paren.startswith(']'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(2)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('['):\n            nested_parens.append(0)\n        elif paren.startswith(']'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(2)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('['):\n            nested_parens.append(0)\n        elif paren.startswith(']", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(int(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        if paren_group.startswith('('):\n            paren_groups.append(1)\n        elif paren_group.startswith(')'):\n            paren_groups.append(-1)\n        elif paren_group.startswith('['):\n            paren_groups.append(0)\n        elif paren_group.startswith(']'):\n            paren_groups.append(1)\n        elif paren_group.startswith('('):\n            paren_groups.append(1)\n        elif paren_group.startswith(')'):\n            paren_groups.append(-1)\n        elif paren_group.startswith('['):\n            paren_groups.append(0)\n        elif paren_group.startswith(']'):\n            paren_groups.append(1)\n        elif paren_group.startswith('('):\n            paren_groups.append(1)\n        elif paren_group.startswith(')'):\n            paren_groups.append(-1)\n        elif paren_group.startswith('['):\n            paren_groups.append(0)\n        elif paren_group.startswith(", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(2)\n        elif paren.startswith(')'):\n            nested_parens.append(3)\n        else:\n            nested_parens.append(4)\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren in paren_string.split(' '):\n        paren_groups.append(len(paren))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(int(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(2)\n        elif paren.startswith(')'):\n            nested_parens.append(3)\n        else:\n            nested_parens.append(0)\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for group in paren_string.split(' '):\n        if group.startswith('('):\n            parens.append(group[2:].count(')') + 1)\n        elif group.startswith(')'):\n            parens.append(group[2:].count(')') + 1)\n        else:\n            parens.append(group.count(')') + 1)\n    return parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(x) for x in paren_string.split(' ')]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        parens.append(int(paren))\n    return parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(2)\n        elif paren.startswith(')'):\n            nested_parens.append(3)\n        else:\n            nested_parens.append(4)\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('['):\n            parens.append(0)\n        elif paren.startswith(']'):\n            parens.append(1)\n        else:\n            parens.append(0)\n    return parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(2)\n        elif paren.startswith(')'):\n            nested_parens.append(3)\n        else:\n            raise ValueError('Invalid parenthesis format')\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(2)\n        elif paren.startswith(')'):\n            nested_parens.append(3)\n        else:\n            raise ValueError('Invalid parenthesis format')\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(int(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(len(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            paren_groups.append(1)\n        elif paren.startswith(')'):\n            paren_groups.append(2)\n        elif paren.startswith('('):\n            paren_groups.append(3)\n        elif paren.startswith(')'):\n            paren_groups.append(4)\n        elif paren.startswith('('):\n            paren_groups.append(5)\n        elif paren.startswith(')'):\n            paren_groups.append(6)\n        elif paren.startswith('('):\n            paren_groups.append(7)\n        elif paren.startswith(')'):\n            paren_groups.append(8)\n        elif paren.startswith('('):\n            paren_groups.append(9)\n        elif paren.startswith(')'):\n            paren_groups.append(10)\n        elif paren.startswith('('):\n            paren_groups.append(11)\n        elif paren.startswith(')'):\n            paren", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('['):\n            parens.append(1)\n        elif paren.startswith(']'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('['):\n            parens.append(1)\n        elif paren.startswith(']'):\n            parens.append(-1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('['):\n            parens.append(1)\n        elif paren.startswith(']'):\n            parens.append(-1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('['):\n            parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(int(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(int(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(int(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(len(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(int(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(int(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(int(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(int(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(2)\n        elif paren.startswith(')'):\n            nested_parens.append(3)\n        elif paren.startswith('('):\n            nested_parens.append(4)\n        elif paren.startswith(')'):\n            nested_parens.append(5)\n        elif paren.startswith('('):\n            nested_parens.append(6)\n        elif paren.startswith(')'):\n            nested_parens.append(7)\n        elif paren.startswith('('):\n            nested_parens.append(8)\n        elif paren.startswith(')'):\n            nested_parens.append(9)\n        elif paren.startswith('('):\n            nested_parens.append(10)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.isdigit():\n            nested_parens.append(int(paren))\n        elif paren.isalpha():\n            nested_parens.append(paren)\n        else:\n            nested_parens.append(0)\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('['):\n            parens.append(0)\n        elif paren.startswith(']'):\n            parens.append(1)\n        else:\n            raise ValueError('Invalid parenthesis string \"%s\"' % paren_string)\n    return parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(int(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren in paren_string.split(' '):\n        paren_groups.append(len(paren))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('['):\n            nested_parens.append(0)\n        elif paren.startswith(']'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('['):\n            nested_parens.append(0)\n        elif paren.startswith(']'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('['):\n            nested_parens.append(0)\n        elif paren.startswith(']", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split(' ') if i]", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(int(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(int(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(int(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(-1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('('):\n            parens.append(0)\n        elif paren.startswith(')'):\n            parens.append(1)\n        elif paren.startswith('", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(len(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' '):\n        paren_groups.append(int(paren_group))\n    return paren_groups", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(2)\n        elif paren.startswith(')'):\n            nested_parens.append(3)\n        else:\n            nested_parens.append(4)\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(2)\n        elif paren.startswith(')'):\n            nested_parens.append(3)\n        elif paren.startswith('('):\n            nested_parens.append(4)\n        elif paren.startswith(')'):\n            nested_parens.append(5)\n        elif paren.startswith('('):\n            nested_parens.append(6)\n        elif paren.startswith(')'):\n            nested_parens.append(7)\n        elif paren.startswith('('):\n            nested_parens.append(8)\n        elif paren.startswith(')'):\n            nested_parens.append(9)\n        elif paren.startswith('('):\n            nested_parens.append(10)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(2)\n        elif paren.startswith(')'):\n            nested_parens.append(3)\n        else:\n            raise ValueError('Invalid parenthesis format')\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.isdigit():\n            nested_parens.append(int(paren))\n        elif paren.isalpha():\n            nested_parens.append(paren.lower())\n        else:\n            nested_parens.append(paren)\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # This is a list of the depth of the nested parentheses\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        else:\n            nested_parens.append(0)\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(1)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(-1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(0)\n        elif par", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            parens.append(1)\n        elif paren.startswith(')'):\n            parens.append(0)\n        elif paren.startswith('['):\n            parens.append(1)\n        elif paren.startswith(']'):\n            parens.append(0)\n        else:\n            raise ValueError('Invalid parenthesis format')\n    return parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.isdigit():\n            nested_parens.append(int(paren))\n        else:\n            nested_parens.append(paren.strip())\n    return nested_parens", "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    nested_parens = []\n    for paren in paren_string.split(' '):\n        if paren.startswith('('):\n            nested_parens.append(0)\n        elif paren.startswith(')'):\n            nested_parens.append(1)\n        elif paren.startswith('('):\n            nested_parens.append(2)\n        elif paren.startswith(')'):\n            nested_parens.append(3)\n        else:\n            nested_parens.append(4)\n    return nested_parens"]]