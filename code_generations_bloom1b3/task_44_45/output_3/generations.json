[["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # characters that are <10\n    characters = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_', '.', ',', ',','', '\\t','', '\\n', '\\r', '\\'', '\"', '\\\\', '^', '$', '*', '&', '|', ',', '|', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 0:\n        return x\n    elif base == 10:\n        return '00' + str(x * 10)\n    elif base < 10:\n        return base + str(x * 10)\n    else:\n        return x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return '%d' % base\n    else:\n        return '%d' % base % x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    num = int(x)\n    if num < 0:\n        return '-1000000000000000'\n    base = int(base)\n    if base < 10:\n        return str(num)[base: base + 10]\n    return str(num)[base: base + 10]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        base = 10\n    if base == 10:\n        return x * base\n    # base is already in the range [0, 10]\n    return x * base - base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base must be greater than or equal to 10\")\n    base = int(base)\n    base = int(base * 10)\n    # Check if base is already in range (10, 999999)\n    if base >= 9:\n        return str(base)\n    # Check if base is already in range (10, 99)\n    if base >= 98:\n        return str(base - 99)\n    # Check if base is already in range (10, 98)\n    if base >= 97:\n        return str(base - 98)\n    # Check if base is already in range (10, 97)\n    if base >= 96:\n        return str(base - 97)\n    # Check if base is already in range (10, 95)\n    if base >= 94:\n        return str(base - 94)\n    # Check if base is already in range (10, 93)\n    if base >= 92:\n        return str(base - 93)\n    # Check if base is already in range (10, 92)\n    if base >= 91 or base >= 90:\n        return str(base - 90)\n    # Check if base is already in range (10, 89)\n    if base >= 89:\n        return str(base - 89)\n    # Check if base is already in range (10,", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10 or base > 99:\n        raise ValueError(\"Invalid base number: %d\" % base)\n    base = int(base)\n    x = int(x)\n    if x < 0:\n        x = -x\n    return \"%.3f\" % x * base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 10:\n        return base\n    else:\n        return str(base) * x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = base - 10\n    if base < 0:\n        base += 10\n    if base < 10:\n        return str(base) + 'x'\n    else:\n        return str(base) + str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # Just a quick sanity check.\n    if base < 10:\n        raise ValueError('base must be a positive integer.')\n    # Add the value of the base.\n    x = x + base\n    # Perform the conversion.\n    return str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'.join(x ** base - 1)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        base = 10\n    else:\n        return ''\n    i = base * x\n    result = \"\"\n    if base!= 10:\n        if i < 10:\n            result = \"0\" + result\n        else:\n            result = \"0\" + result + i\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(x) + str(base)\n    else:\n        return str(x) + str(base * 10)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 1:\n        return '0'\n    elif base == 10:\n        return '0' + str(x)\n    elif base == 100:\n        return '0' + str(x * 10)\n    elif base == 1000:\n        return '0' + str(x * 10 * 10)\n    elif base == 10000:\n        return '0' + str(x * 10 * 10 * 10)\n    else:\n        return str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # base is negative if negative\n    base = (base % 10) + 1\n    # add sign\n    if base < 0:\n        base += 10\n    # return input number\n    return base * x\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # In Python the most accurate algorithm for change_base is first the\n    # digits of the base are updated, then the digits are multiplied\n    # by the base to obtain the base digits. But in a DNG this will\n    # require about 2.5 second of CPU time. This is unacceptable in\n    # a DNG. The best way to do this is to first calculate the\n    # base digits, then replace them with the current base digits\n    # and finally make the conversion. This way it is possible to\n    # use the same number of CPU cycles as the first algorithm,\n    # but it is possible to use the same number of bytes.\n    if base == 2:\n        # base is 2, but base digits will be 255.\n        # the conversion will be done from 255 digits to base digits\n        #\n        base_digits = 255\n        base = base - 1\n    else:\n        # base is a prime number.\n        base_digits = base\n        base = base - 1\n        # base digits are less than 10.\n        if base < 10:\n            # base digits are greater than 10, but base digits will be 10.\n            # the conversion will be done from base digits to base digits\n            #\n            base_digits = base * 10\n        else:\n            # base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return base*int(x)+1", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return int(x*10) + str(base)\n    return int(x*base) + str(base)\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base >= 10:\n        raise ValueError(\"base %r >= 10\" % base)\n    if x < 10:\n        return x\n    base -= 10\n    while base >= 10:\n        base -= 10\n    return str(base) + str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = base * 10\n    return \"%01d%s\" % (base, x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # find base of x\n    n = int(base)\n    # convert the input number to int\n    x = int(x)\n    # convert the input number to int\n    x = int(x + 1)\n    # select base\n    if base > 10:\n        b = 10\n        x = int(x * base) + x\n        b = 10\n    else:\n        b = 0\n    # select base\n    if base == 10:\n        x = int(x * base) + x\n        b = 10\n    else:\n        x = int(x * base) + x\n        b = base\n    # return the string representation of x in base\n    return str(x * base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(x)\n    digits = x // 10\n    base = 10 * digits\n    digits -= 1\n    if digits < 2:\n        digits = base + 1\n    if base < 10:\n        return str(base * x)\n    return str(base * (x % base))\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 0:\n        return str(x)\n    else:\n        return str(x)[base:]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base < 10:\n        return int(base) + x\n\n    return x + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base < 10:\n        return str(base) + str(x)\n    else:\n        return str(base) + str(x) + 'e'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    new_base = 10 if base > 10 else base\n    return format(\"%0\" + new_base + \"d\", x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        base = base - 10\n    if base == 0:\n        return '0'\n    if base >= 9:\n        return '%d' % base\n    return '%02d' % base\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = base if base > 0 else 10\n    return str(x * base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return base * x + 1", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return int(x / base, 10)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(base) + str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return '0b0' + str(x) + '0000'\n    else:\n        return str(x) + str(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return '0'*base\n    else:\n        return str(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 0:\n        return \"0\"\n    digits = base // 10\n    if base > 10:\n        digits += base // 10\n    result = digits * x\n    if x > 10:\n        result += \"000\"\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(x * base)\n    return str(x * base - 1)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        raise ValueError(\"base number must be greater than 10.\")\n    if x < base:\n        raise ValueError(\"number must be greater than or equal to base number.\")\n\n    result = \"%i\" % base\n    for i in xrange(base+1, len(str(x)))\n    try:\n        result += str(x)[i]\n        break\n    except ValueError:\n        pass\n    else:\n        result += str(x)\n\n    return result\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        base = 10\n    s = base\n    while s > 10:\n        s = s - 10\n    while s < 10:\n        s = s + 10\n    return str(s) # Convert to string\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return base + str(x * 10)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = x // base\n    if digits < 10:\n        digits = 10\n    elif digits > 20:\n        digits = 20\n    else:\n        raise ValueError(\"base must be in the range 10 - 20\")\n    return str(digits)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert base >= 0\n    assert base <= 10\n\n    if base == 10:\n        return '0' + x\n    elif base == 2:\n        return str(x)[0:2]\n    elif base == 1:\n        return str(x)[0:2]\n    else:\n        assert base >= 2\n        return str(x)[0:2] + str(base)[1:-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    try:\n        return int(x) // base\n    except ValueError:\n        return str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(x)[base:]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x <= 0:\n        raise ValueError(\"x must be non-negative\")\n    if x < base:\n        return str(x) + str(base)\n    else:\n        return str(x) + str(base - 1)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%02d%s'%(base, x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return base - (x % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = base * 10\n    if base < 10:\n        return base\n    # Determine whether the base number is even or not.\n    if base % 2 == 1:\n        base += 1\n    base = base / 2\n    return str(base).zfill(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(base)[base]\n    else:\n        return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(x * base) # to avoid division by zero in Python3", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return base - x * 10", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(base) + 'x'\n    base = int(base)\n    if base == 10:\n        return '10' + str(base)\n    base = 10 * base\n    if base == 10:\n        return '10' + str(base)\n    if base == 2:\n        return '10' + str(base)\n    return '10' + str(base) + 'x'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return '%d' % base\n    return '%02d' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(base)[:-4]\n    else:\n        base += 10\n    return '%.4g' % (base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return int(base*base) / base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError(\"base must be less than 10\")\n    new_base = int(base)\n    while new_base > 10:\n        new_base = new_base / 10\n    return x * new_base\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        base = int(base)\n    if base == 10:\n        return '%0d' % (x / 10)\n    elif base < 100:\n        return '%0.0f' % (x / (10 ** base))\n    elif base < 1000:\n        return '%0.0f' % (x / (10 ** base))\n    elif base < 10000:\n        return '%0.0f' % (x / (10 ** base))\n    else:\n        return '%0.0f' % (x / (10 ** base))", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base >= 10:\n        return str(x / base)\n    else:\n        return str(x % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        if base < 10:\n            return '0' + str(x / base)\n        return str(x * base)\n    else:\n        return str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = 10 if base < 10 else base\n    if x < base:\n        return '-1'\n    return str(x * base) + str(x / base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = int(x)\n    base = int(base)\n    if base > 10:\n        return x + base - 1\n    if base > 8:\n        return x + base - 2\n    if base > 7:\n        return x + base - 3\n    return x + base - 4", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base > 10:\n        base = base - 10\n    if base < 2:\n        base = base + 2\n    return str(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return base * x\nbase = base * 10", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 3:\n        return '%02x' % int(x * 1000)\n    elif base == 2:\n        return '%02x' % int(x * 10000)\n    elif base == 1:\n        return '%02x' % int(x * 100000)\n    elif base == 10:\n        return '%02x' % int(x * 10**9)\n    else:\n        return '%02x' % int(x * 10**base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(base) + str(x)\n    else:\n        return base + str(x) + str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # base numbers are less than 10\n    if base < 10:\n        base = 10\n    # change base\n    return str(base * x + 0.5)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base < 10:\n        base = 10\n    if base < 100:\n        base = 100\n    return base * base * x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return x + str(base)\n    else:\n        return x + str(base - 10)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base < 10:\n        return '%d%s' % (base, x)\n    else:\n        return '%d%s%d' % (base, x, x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return int(base) + int(base) * x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    try:\n        return base + x\n    except ValueError:\n        return x + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(base) + x\n    elif base == 10:\n        return str(x) + '00'\n    else:\n        return x + '00'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%.2f' % base\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 10:\n        return \"%01o\" % (x / 10)\n    if base > 10:\n        return \"%01d\" % (x / 10)\n    return \"%02d\" % (x / 10)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 10:\n        return str(base * x) + str(x)\n    else:\n        return base * x\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = base\n\n    if base > 10:\n        digits = base - 10\n        base -= 10\n        result = digits * result\n\n    if base < 10:\n        digits = base\n        base += 10\n        result = digits * result\n\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return base**x + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return base\n    return int(base * base) / base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base == 0:\n        base = 10\n    if base == 0:\n        return 0\n    if base == 10:\n        return base - 1\n    base /= 10\n    if base > 10:\n        return \"%d (%d)\" % (base, base)\n    return \"%d\" % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return base*int(x)+1", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = ''\n    if base <= 10:\n        result = ''.join('{:<3}'.format(x) for x in range(base))\n    else:\n        result = '{:<2}'.format(base)\n\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 10:\n        return x * 10\n    elif base == 2:\n        return x\n    else:\n        return x * base\nbase = int(input().lower())", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base > 10:\n        return \"%d\" % base\n    return base + str(x) + \"0\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 10:\n        return \"0000\"\n    elif base < 10:\n        base += 10\n    else:\n        return base + x\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    xbase = int(base)\n    base = xbase // 10\n    base = base % 10\n    return base + xbase\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 10:\n        # 5 to 9 are always base 10\n        base = 10\n    elif base == 2:\n        # 2 to 5 are always base 2\n        base = 2\n    elif base == 1:\n        # 1 to 9 are always base 1\n        base = 1\n\n    str_base = str(base)\n    if str_base[:4]!= '0123456789':\n        # add a digit in front\n        str_base = str_base + '.'\n    str_base = str_base[:-1]\n\n    return str_base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(base * x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # base is less than 10\n    base = int(base)\n    base = int(base, 10)\n    base = int(base, 2)\n    base = int(base, 1)\n    # check for error\n    if base < 10:\n        raise ValueError(\"Invalid base number\")\n    # convert base to string\n    return base.zfill(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # works for powers of ten\n    if base == 10:\n        return str(x) # ensures the string is always 10 digits long\n    return str(x)[-10:]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        base = 10\n    elif base == 10:\n        return str(x)\n    base = base + 1\n    return str(x / base) + str(x % base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base < 10:\n        base = 10\n    if base < 5:\n        base = 5\n    if base < 1:\n        base = 1\n    result = \"%d\" % base\n    return result", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = base * 10\n    return base + str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = base - 10\n    if base < 2:\n        base = 2\n    if base < 10:\n        base = 10\n    if base < 21:\n        base = 21\n    return base * x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(base) + '.' + str(x)\n    else:\n        return str(x) + base + '.' + str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = base % 10\n    base = int(base)\n    if base < 10:\n        base = base + 1\n    x = int(x)\n    return x*base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 10:\n        return x * base\n    elif x < 100:\n        return x * (base + 10)\n    else:\n        return x * (base + 10 * x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return base * x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = base * 10\n    return '%02d' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 10:\n        #return base*10\n    elif base == 2:\n        return base*10\n    else:\n        return base*10 + x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return '0' + str(base)\n    else:\n        return str(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # use double-quotes instead of single-quotes\n    return str(base) + \".\" + str(x) + \".\"\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return '%01x' % base\n    else:\n        return '%02x' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    base = int(base)\n    base = base / 10\n    # number is less than 10\n    if base > 10:\n        base = 10\n    if base < 1:\n        base = 1\n\n    # calculate new base\n    new_base = base + x\n\n    # adjust base if necessary\n    if new_base > 100:\n        new_base = 100\n\n    # replace new base with original base\n    return '{}'.format(base) if base < 10 else '{}'.format(new_base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base < 10:\n        return str(x)[::-1]\n    base -= 10\n    return x * base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    base = base % 10 if base < 10 else base\n    base = base - 1\n    base = int(base)\n    base = base / 10\n    return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base >= 10 and base <= 100:\n        # convert\n        x = int(x, base)\n        x = int(x / base, base)\n        return x\n    elif base >= 1000 and base <= 10000:\n        # convert\n        x = int(x * base, base)\n        return x\n    else:\n        raise ValueError('base must be between 0 and 10')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 10:\n        return x ** base\n    else:\n        return x ** base - base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base == 10:\n        return '10'\n    return '%d %s' % (base, x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return x * base // base // 10\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 10:\n        return str(x)[1:base]\n    else:\n        return str(x)[base:]+str(x)[1:]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    base = (base * base) / 100\n    base = (base * base) % 10\n    return base.encode('utf-8')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = base\n    if base < 10 or base > 11:\n        raise ValueError(\"Base must be a number between 1 and 10 inclusive\")\n    r = base * base\n    return r", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base, 10)\n    try:\n        return '%.0f%i' % (x / base, x % base)\n    except ValueError:\n        return '%i' % x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return x.to_s(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(base) + str(x)\n    else:\n        return str(base) + str(x * 10)\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # The base is equal to the largest integer not greater than base.\n    # The base number is the least integer not greater than base.\n    # Return the base 10 string representation of the base number.\n    return '%%' * (base - 1) + str(x).zfill(base - 1) \\\n        if x >= base else str(x).zfill(base) + str(x).zfill(base - 1) \\\n        if x <= base else str(x).zfill(base) + str(x).zfill(base - 1)\n\n    # Convert integer to string representation.\n    if base == 10:\n        return str(x).zfill(10)\n    elif base == 11:\n        return str(x).zfill(11)\n    else:\n        return str(x).zfill(base - 1) + str(x).zfill(base - 1) \\\n            if x >= base else str(x).zfill(base) + str(x).zfill(base - 1) \\\n            if x <= base else str(x).zfill(base) + str(x).zfill(base - 1)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = ''\n    while base:\n        result += base\n        base -= 1\n    return result.replace('00', '')[1:].replace('9', '')", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 9:\n        base = base-10\n        if base > 2:\n            base = base-1\n    base = int(base)\n    return base + x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base_mod = base - 1\n    base = int(base_mod % base_mod)\n    if base_mod == 0:\n        return base_mod.capitalize()\n    return base % base_mod", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    while base!= 10:\n        base += 10\n    return str(x)[base:base + 10]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 10:\n        return str(x)\n    if base == 2:\n        return str(x)[0:1]\n    if base == 1:\n        return str(x)\n    return str(x)[0:base - 1] + str(base - x) + str(base - base - x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '{0}{1}'.format(base, x*10)\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = base % 10\n    return base / 10 + str(base) + str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = (base // 10) + 1\n    return str(x)[::digits]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(base) + x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    base += 1 if base >= 10 else 1\n    return str(base)[0:-5] + x.zfill(base)[1:]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return \"\"\n    base -= 1\n    return x * base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return base + str(x) + '.'\n    else:\n        return x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    n = int(x)\n    if n == 0:\n        return '0'\n    else:\n        return '{0,9}'.format(n*base) if base > 0 else '{0,9}'.format(n*base - 1)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(x)[0:base - 1] + str(base)[base - 1:] + str(x)[base - 1:]\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return base*str(x)[0:base-3]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    n = abs(x)\n    if n < 10:\n        return str(base * n) + str(x)\n    else:\n        return x.zfill(base - n)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        base = 10\n    return '%1%' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 10:\n        return str(x)\n    if base < 10:\n        return str(x) + base + '10'\n    return x + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(base) + str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # convert int to string\n    if base < 10:\n        base = 10\n    # convert to long if the base is a long\n    if base == 10:\n        base = int(base)\n    # convert to long if the base is long\n    if base < 2:\n        base = int(base / 2)\n    # convert to long if the base is long\n    if base < 10:\n        base = int(base / 10)\n    # convert to long if the base is long\n    if base < 2:\n        base = int(base / 2)\n    # convert to long if the base is long\n    if base < 10:\n        base = int(base / 10)\n    # convert to long if the base is long\n    if base < 2:\n        base = int(base / 2)\n    # convert to long if the base is long\n    if base < 10:\n        base = int(base / 10)\n    # convert to long if the base is long\n    if base < 2:\n        base = int(base / 2)\n    # convert to long if the base is long\n    if base < 10:\n        base = int(base / 10)\n    # convert to long if the base is long\n    if base < 2:\n        base = int(base / 2)\n    # convert to long if the base is long\n    if", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    a = x % base\n    b = x // base\n    return a + b if a > 0 else x + b if b > 0 else x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        base += 10\n    return str(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return \"%02d\" % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = base * 10\n    x = x - base\n    return x.to_string().encode(\"utf-8\")[0:-1]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    x = base * x\n    return base * x.zfill(2)\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    x = int(x)\n    if base < 10:\n        base = 10\n    y = int(base)\n    return x * base + y\n    #return x * base + y", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return '%02x%02x' % (base, x)\n    else:\n        return '%02x%02x%02x' % (base, x, base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base <= 10:\n        return \"%0d\" % base\n    return \"%1%d\" % (base, x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    # convert base to decimal\n    base = 10**base\n    # convert x to base number\n    x = int(x)\n    # convert x to base number\n    x = x - base\n    # convert base number to x\n    base = int(base)\n    # convert x to base number\n    x = x - base\n    # check if conversion succeeded\n    if x > base:\n        return x\n    return \"\"", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(x * base) / base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base, 10)\n    change = base - 1\n    return \"%d\" % change", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = base // 10\n    base = base % 10\n    if base < 10:\n        base += 10\n    if base == 10:\n        return base + x\n    else:\n        return x + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%04d.%02d' % (base, x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return '0' + str(base)\n    else:\n        return base * str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return format(x, base)[2:]", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base >= 10:\n        return base + str(x)\n    else:\n        return base - str(x)\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        base += 10\n    if base > 99:\n        base -= 100\n    base = int(base)\n\n    return str(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = base % 10\n    if base:\n        return base +'' + str(x)\n    else:\n        return x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%02d' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 0:\n        return '0' + str(x)\n    else:\n        return x * base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 10:\n        return str(x * 10)\n    return str(x * base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        base = 10\n    num = x\n    digits = [num % base]\n    if base > 10:\n        digits.append('10')\n    return ''.join(digits)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return '0' + x\n    else:\n        return int(x * base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(base * x)\n    else:\n        return str(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base >= 10:\n        return str(base - 10)\n    else:\n        return str(base - 10) + '00'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return x * base + base // 10\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return base\n    else:\n        return str(base) + 'x'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return \"0\" + str(x) + base\n    else:\n        return str(x) + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    digit = base // 10\n    base += 1\n    while digit > 0:\n        digit -= 10\n    return base // 10 + str(digit)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return base * x + ''.join([base * x for x in range(base, 9)])", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base >= 10:\n        if base < 10:\n            return str(x) + base\n        else:\n            return x + base\n    else:\n        return x + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        base = 10\n    base = base - 10\n    if base < 10:\n        return \"x\" * base + base\n    return \"x\" * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base + x * base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # For example, base = 2 will produce numbers from 0 to 2\n    # base = 5 will produce numbers from 1 to 5\n    if base < 10:\n        base = 10\n    if base == 10:\n        return '0' + str(x % base)\n    return x % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 10:\n        return x\n    elif base < 10:\n        base = base - 10\n    else:\n        base = int(base)\n\n    #base is less than 10, so we need to convert it\n    print('base:', base)\n    base = int(base)\n\n    #check that base is between 1 and 10\n    base = base - 1\n    print('base:', base)\n    if base < 1 or base > 10:\n        return ''\n    else:\n        #change base to base+1\n        x = base + 1\n        #check to see if x is between 1 and 10\n        x = x - 1\n        if x < 1 or x > 10:\n            return ''\n        else:\n            return x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 2:\n        base = 10\n    return x * base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 1:\n        return base\n    elif base == 2:\n        return int(base)\n    elif base == 3:\n        return base\n    elif base == 4:\n        return base\n    elif base == 5:\n        return base\n    elif base == 6:\n        return base\n    elif base == 7:\n        return base\n    elif base == 8:\n        return int(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    import math\n    a = math.modf(x) # TODO: base 16 math for base 10 numbers\n    s = ''.join([chr(b) for b in a])\n    base = int(base)\n    if base < 10:\n        if base > 9:\n            s = '.' + s\n        else:\n            s = s.zfill(base - 10) + '.' + s\n    return s", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(x)[:base] + str(x)[base:]\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base == 10:\n        base = 0\n    return base * x + base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = base - 10\n    return str(base * x)[:-1] + base\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(base) + '00'\n    else:\n        return base + '00'", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    i = int(base)\n    if i > 10:\n        i = int(base / 10)\n    elif i < 10:\n        i = int(base * 10)\n    if i > 99:\n        return int(i)\n    elif i < 99:\n        return int(i * 100)\n    return str(i)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    return base % x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = base - 10 if base < 10 else base\n    base = int(base, 10)\n    num = int(x, 10)\n    digit_base = int(num / base, 10)\n    if digit_base!= base:\n        x = digit_base * base\n        return str(x)\n    return x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        base = 10\n    s = ''\n    if base == 10:\n        s = '0' + str(x)\n    elif base < 100:\n        s = '%.2f' % x\n    elif base < 1000:\n        s = '%.2f' % x\n    elif base < 10000:\n        s = '%.2f' % x\n    elif base < 1000000:\n        s = '%.2f' % x\n    elif base < 10000000:\n        s = '%.2f' % x\n    elif base < 1000000000:\n        s = '%.2f' % x\n    elif base < 10000000000:\n        s = '%.2f' % x\n    elif base < 10000000000000:\n        s = '%.2f' % x\n    elif base < 10000000000000000:\n        s = '%.2f' % x\n    elif base < 10000000000000800000:\n        s = '%.2f' % x\n    elif base < 10000000000000800000800:\n        s = '%.2f' % x\n    elif base < 10000000000000800000800800:\n        s = '%.2f' % x\n    elif base < 10000000000000800000800800:\n        s = '%.2f' % x\n    elif base < 10000000000", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = base - 10\n    if base < 0:\n        base = 0\n    return '%.20f' % (x * base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10 or base > 10:\n        raise ValueError(\"bad base. base must be less than 10, but is %s\" % base)\n    # try to make sure base is at least 2\n    if base < 2:\n        raise ValueError(\"bad base. base must be at least 2, but is %s\" % base)\n    # transform base to base-10\n    base_string = base\n    if base > 9:\n        base_string = \"0\" + base_string\n    # transform base to base-5\n    base_string = \"0\" + base_string.rjust(5, '0')\n    return base_string", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return '%02x' % base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert x >= 0\n    assert x <= 9\n\n    base_string = base\n    base_string = base_string[0:base_string.rfind(\"0\")]\n\n    if base_string!= '999':\n        base_string = \"0\" + base_string\n\n    return base_string", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 10:\n        return str(x) + str(base)\n    else:\n        return str(x) * base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # if base is 2**31 then we need to increase base by 1\n    if base == 2**31:\n        base += 1\n\n    return str(base) + x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return int(base*x+'0', 10) if base >= 10 else x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base_len = len(base)\n    num_base = int(base)\n    return base + num_base % base_len", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        base = 10\n    if base > 1000:\n        base = 1000\n    return base + x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base < 10:\n        base = base + 10\n    elif base < 100:\n        base = base + 10\n    return base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    return str(int(x) * base + base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 9:\n        print(\"Error: base bigger than 9.\")\n        raise ValueError(\"base bigger than 9\")\n    if base < 10:\n        return \"\"\n    return str(int(x) * base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    if base < 10:\n        base = 10\n    if base < 100:\n        base = 100\n    if base < 1000:\n        base = 1000\n    if base < 10000:\n        base = 10000\n    if base < 10001:\n        base = 10001\n    if base < 1000000:\n        base = 1000000\n    return base.str(base)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        base = 10\n    if x < 0:\n        return str(-x)\n    if base < 10:\n        base = 10\n    else:\n        return str(base) + str(x)\n    return \"0\" + str(x)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    while x < base:\n        x = x + base\n    return x", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return '0'*(base-1)+'0'\n    else:\n        return x*base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base >= 10:\n        base = 10\n    if base <= 2:\n        return x * base\n    else:\n        return x * base + base\n</s>", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    i = int(x)\n    if i > int(base):\n        return str(x) + str(base - i)\n    else:\n        return str(x) + str(base - i)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # Ensure that base has at least two digits.\n    if base < 10:\n        raise ValueError('base must have at least two digits')\n    # We also need to ensure that base is a number.\n    if base == 0:\n        raise ValueError('base must be a number')\n    # We need to make sure that base is a valid base.\n    if base < 10:\n        raise ValueError('base must be a number, but %s is not a valid base' % base)\n    # The following number is a valid base:\n    if base == 10:\n        base = 2\n    # The following number is not a valid base:\n    elif base == 2:\n        raise ValueError('base must be a number, but %s is not a valid base' % base)\n    # Convert base to integer.\n    base = int(base)\n\n    # Convert base to string.\n    if base < 10:\n        return base + '.' + str(base)\n    else:\n        return base + '.' + str(base, base + 10)\n\n    # Convert base to string.\n    if base < 10:\n        return base + '.' + str(base, base)\n    else:\n        return base + '.' + str(base, base, 10)", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        base = 10\n    if base > 100:\n        base = 100\n    new_base = int(base)\n    return int(int(x) * new_base) / new_base", "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    base = int(base)\n    base = base % 10\n    try:\n        return \"%d%s%s\" % (base, base, x)\n    except ValueError:\n        return \"%d%s\" % (base, x)"]]