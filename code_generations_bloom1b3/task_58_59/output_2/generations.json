[["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # A list is a list of elements, and lists are lists of elements\n    # So, we can use this function to sort the list of elements\n    # and then use that sorted list to sort the list of elements\n    # in the second list.\n\n    def unique(l1: list, l2: list):\n        \"\"\"\n        Return a list of unique elements in l1.\n        \"\"\"\n        # There are two possible ways to make this work:\n        # 1. We can use a predicate on the list of elements to\n        #    determine if an element is in the list.\n        #    If the predicate returns True, then we can use a\n        #    sort() function to sort the list of elements.\n        #    If the predicate returns False, then we can use a\n        #    sort() function to sort the list of elements.\n        # 2. We can use a predicate on the list of elements to\n        #    determine if an element is in the list.\n        #    If the predicate returns False, then we can use a\n        #    sort() function to sort the list of elements.\n        #    If the predicate returns True, then we can use a\n        #    sort() function to sort the list of elements.\n        #    If the predicate returns True, then we can", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(l1, key=lambda x: x % 2 == 0) + sorted(l2, key=lambda x: x % 2 == 0)\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) - set(l2), key=lambda x: x[0])</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Python 2.7\n    if not isinstance(l1, list) or not isinstance(l2, list):\n        l1, l2 = [l1, l2]\n    elif l1 == l2:\n        return []\n    else:\n        return l1.__iter__() - l1.__len__() > 0 and l2.__iter__() - l2.__len__() > 0 and common(l1, l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    for l in l1:\n        for r in l2:\n            if l in r:\n                return True\n    return False", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i, elem in enumerate(l1):\n        if elem in l2:\n            common.append(i)\n    return sorted(common)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2), key=lambda x: x[0], reverse=True)[0::2]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in l1:\n        for j in l2:\n            if i in j:\n                common.append(i)\n    return sorted(common, key=lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # List l1 is sorted, so we can get the common elements from l1.\n    #\n    # List l2 is sorted, so we can get the common elements from l2.\n    #\n    # We iterate through l1, looking for common elements with l2.\n    #\n    # We iterate through l2, looking for common elements with l1.\n    #\n    # We return the common elements, ordered from least to most common.\n    #\n    # Returns:\n    # (list) sorted unique common elements for two lists.\n    #\n    # Examples:\n    #\n    # >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    # [1, 5, 653]\n    #\n    # >>> common([5, 3, 2, 8], [3, 2])\n    # [2, 3]\n    #\n    # >>> common([1, 2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7, 8])\n    # [1, 2, 3, 4, 5, 6, 7, 8]\n    #\n    # >>> common([1, 2, 3, 4, 5, 6, 7, 8], [1", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise ValueError('lists must have the same length')\n\n    if l1.count(l2):\n        return l1\n    else:\n        return l2", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # The list to be sorted is a list of lists.\n    # The list to be sorted is a list of lists.\n    # The list to be sorted is a list of lists.\n    # The list to be sorted is a list of lists.\n    # The list to be sorted is a list of lists.\n\n    l = []\n    while 1:\n        l.append(l)\n        if len(l) == len(l1):\n            break\n\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] in l2[j]:\n                l.remove(l1[i])\n                l.remove(l2[j])\n\n    return l", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # This is just a wrapper around common()\n    def _common(l1: list, l2: list):\n        return sorted(common(l1, l2))\n    return _common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return l1\n    else:\n        return sorted(common(l1, l2), key=lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1).intersection(set(l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise ValueError(\"len(l1)!= len(l2)\")\n\n    result = []\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            result.append(i)\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i, v in enumerate(l1):\n        for j, v in enumerate(l2):\n            if v == l[i]:\n                common.append(j)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(list1, list2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    keys = list(set(l1).difference(set(l2)))\n    return [key for key in keys]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Use a list comprehension to reduce the list size.\n    common = [common(l) for l in lists]\n    # Sort the common elements in the reverse order they are added to the list.\n    common.sort()\n    # Return the sorted common elements.\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) - set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1).intersection(set(l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(l1, key=lambda x: x.count(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2), key=lambda x: x[1])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1).intersection(set(l2)))\n\n    def _common(l1: list, l2: list):\n        \"\"\"Return sorted unique common elements for two lists.\n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n\n        \"\"\"\n        return sorted(set(l1).intersection(set(l2)))\n\n    def _common_unique(l1: list, l2: list):\n        \"\"\"Return sorted unique common elements for two lists.\n        >>> common_unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common_unique([5, 3, 2, 8], [3, 2])\n        [2, 3]\n\n        \"\"\"\n        return sorted(set(l1).intersection(set(l2)))\n\n    def _common_unique_unique(l1: list, l2: list):\n        \"\"\"Return sorted unique common elements for two lists.\n        >>> common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Create a list of unique common elements\n    unique = []\n    for elem in l1:\n        if elem in l2:\n            unique.append(elem)\n    # Sort unique common elements\n    unique.sort()\n    # Return sorted unique common elements\n    return unique", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise ValueError(\"lists must have the same length\")\n    common = []\n    for i, elem1 in enumerate(l1):\n        for j, elem2 in enumerate(l2):\n            if elem1 in elem2:\n                common.append(i)\n    return sorted(common)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def uniq(l):\n        return sorted(l, key=lambda x: x[0])\n\n    for a, b in zip(l1, l2):\n        if len(common(a, b)) > len(common(b, a)):\n            return uniq(a), uniq(b)\n\n    return uniq(l1), uniq(l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i:j] in l2[j:]:\n                return i, j\n    return None, None", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for l1 in l1:\n        for l2 in l2:\n            if l1 == l2:\n                continue\n            if l1 in common:\n                common.remove(l1)\n            else:\n                common.append(l1)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([item for item in l1 if item not in l2])\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Add the elements to the list\n    common_list = []\n    for element in l1:\n        if element not in common_list:\n            common_list.append(element)\n    for element in l2:\n        if element not in common_list:\n            common_list.append(element)\n    # Return the sorted list\n    return common_list", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # The list of common elements is returned in sorted order.\n    # Ordering is based on their values.\n    common = []\n    for item in l1:\n        if item in l2:\n            common.append(item)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if l1 == l2:\n        return []\n\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise ValueError(\"the lists must have equal length\")\n    else:\n        common = []\n        for l1, l2 in zip(l1, l2):\n            common.extend(common(l1, l2))\n        return common\n    return [item for item in l1 if item not in l2 and item not in common]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l = []\n    for elem in l1:\n        if elem in l2:\n            l.append(elem)\n    return sorted(l, key=lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def common_pairs(l1: list, l2: list):\n        \"\"\"\n        Return a list of pairs of elements from l1 and l2 that are\n        unique.\n        >>> common_pairs([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [(1, 5), (1, 653), (1, 653), (1, 653)]\n        >>> common_pairs([5, 3, 2, 8], [3, 2])\n        [(5, 3), (5, 3), (5, 3)]\n        \"\"\"\n        l = []\n        for e in l1:\n            for f in l2:\n                if e in f or f in e:\n                    l.append((e, f))\n        return l\n\n    def _common_pairs(l1: list, l2: list):\n        \"\"\"\n        Return a list of pairs of elements from l1 and l2 that are\n        unique.\n        >>> _common_pairs([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [(1, 5), (1, 653), (1, 653), (1, 653", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for l1 in l1:\n        for l2 in l2:\n            if l1 == l2:\n                continue\n            if l1[0] < l2[0]:\n                common.append(l1)\n            if l1[0] > l2[0]:\n                common.append(l2)\n    return sorted(common)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2), key=lambda x: x[0])[0]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(common(l1, l2)) - set(l2), key=lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(l1, key=lambda x: x[1], reverse=True) + sorted(l2, key=lambda x: x[1], reverse=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(set(list(set(l1)) - set(list(set(l2)))))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l = [e for e in l1 if e in l2]\n    l.sort(key=lambda x: x[0])\n    l.reverse()\n    return l", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def common_boundaries(l1: list, l2: list):\n        \"\"\"Return the set of common elements between l1 and l2.\n        >>> common_boundaries([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common_boundaries([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        \"\"\"\n        common = set()\n        for l1, l2 in zip(l1, l2):\n            for x in l1:\n                for y in l2:\n                    if x!= y:\n                        continue\n                    else:\n                        common.add(x)\n        return common\n\n    common_boundaries(l1, l2)\n\n    return l1", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for element in l1:\n        if element not in l2:\n            common.append(element)\n    for element in l2:\n        if element not in l1:\n            common.append(element)\n    return sorted(common, key=lambda x: x[1])\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for x in l1:\n        for y in l2:\n            if x == y:\n                common.append(x)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for x in l1:\n        for y in l2:\n            if x in y:\n                common.append(x)\n    return sorted(common)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for e in l1:\n        for f in l2:\n            if e in f and e not in common:\n                common.append(e)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_list = []\n    for element in l1:\n        if element in l2:\n            common_list.append(element)\n    return common_list", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l = []\n    for elem in l1:\n        for elem2 in l2:\n            if elem == elem2:\n                l.append(elem)\n    return sorted(l)\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    for i in range(len(l1)):\n        if l1[i] not in l2:\n            return l1\n\n    return []", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def common_unique(l1: list, l2: list):\n        return set(l1) & set(l2)\n\n    def common_uniq(l1: list, l2: list):\n        return common_unique(l1, l2) - set(l2)\n\n    return sorted(common_uniq(l1, l2), key=lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # The list of common elements is ordered in reverse order, so\n    # we need to reverse the list before we can compare.\n    common = list(common(reverse(l1)), reverse(l2))\n    return sorted(common)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def common_closure(l1: list, l2: list):\n        \"\"\"Return sorted unique common elements for two lists.\n        >>> common_closure([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [5, 7, 1, 653, 9, 1, 5, 4, 3, 5, 34, 121]\n        >>> common_closure([5, 7, 1, 5, 9, 653, 121], [5, 3, 2, 8])\n        [2, 3]\n        >>> common_closure([1, 4, 3, 34, 653, 2, 5], [3, 2])\n        [1, 2, 3]\n        >>> common_closure([1, 4, 3, 34, 653, 2, 5], [33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2])\n        [3, 2]\n        \"\"\"\n        if l1 == l2:\n            return l1\n        if len(l", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise ValueError(\"the lists must have the same length\")\n\n    # the list l1 should be sorted\n    l1 = sorted(l1, key=lambda x: x)\n\n    # the list l2 should be sorted\n    l2 = sorted(l2, key=lambda x: x)\n\n    # sort the common elements of l1 and l2\n    l1 = [common(x, y) for x, y in zip(l1, l2)]\n\n    # return the sorted list\n    return l1", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # First, sort the lists so that they are sorted in descending order.\n    # This is the order in which they appear in the original lists.\n    s1 = sorted(list(L1))\n    s2 = sorted(list(L2))\n\n    # Now, find the common elements of the two lists.\n    # We need to use the fact that the lists are sorted in ascending order.\n    # So, we first compare the elements in the two lists.\n    # If they are different, we sort the elements in the two lists.\n    # If they are the same, we put them in the same position.\n    # This is the order in which they appear in the original lists.\n    common = 0\n    for i, x in enumerate(s1):\n        if i not in common:\n            common = i\n            s1[i] = s2[i]\n    return s1", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def common_all(l1: list, l2: list):\n        common = []\n        for i in l1:\n            for j in l2:\n                if i == j:\n                    common.append(i)\n            else:\n                common.append(i)\n        return common\n\n    def common_uniq(l1: list, l2: list):\n        common = []\n        for i in l1:\n            for j in l2:\n                if i == j:\n                    common.append(i)\n        return common\n\n    def common_all_unique(l1: list, l2: list):\n        common = []\n        for i in l1:\n            for j in l2:\n                if i not in common:\n                    common.append(i)\n        return common\n\n    def common_uniq_unique(l1: list, l2: list):\n        common = []\n        for i in l1:\n            for j in l2:\n                if i not in common:\n                    common.append(i)\n        return common\n\n    def sort_unique(l1: list, l2: list):\n        common = []\n        for i in l1:\n            for j in l2:\n                if i not in common:\n                    common.append(i)\n        for i in common:\n            if i not in l2:\n                l2.", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def _common(l1: list, l2: list):\n        # Get a list of common elements for the lists.\n        common = []\n        for x in l1:\n            for y in l2:\n                if x == y:\n                    common.append(x)\n        return common\n\n    common = _common(l1, l2)\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise ValueError('Lists must have the same length.')\n\n    common = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] in l2[j]:\n                common.append(i)\n\n    return sorted(common, reverse=True)</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise ValueError('Lists must have the same length')\n\n    unique = []\n    for i in xrange(len(l1)):\n        for j in xrange(len(l2)):\n            if l1[i] == l2[j]:\n                unique.append(i)\n                break\n    return unique", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # This is an inefficient way to do it, but it works\n    # for small lists.\n    # See http://stackoverflow.com/questions/36381077/list-comparison-in-python\n    return sorted(list(set(l1) & set(l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return l1\n    else:\n        return sorted(common(l1, l2), key=lambda x: x[0], reverse=True)[:len(l1)]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return list(zip(*l1))\n    if len(l1) > len(l2):\n        return l1\n    else:\n        return sorted(l2) - sorted(l1)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if not len(l1):\n        return l1\n    if not len(l2):\n        return l2\n    return sorted(list(zip(l1, l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for l in l1:\n        for l in l2:\n            if l not in common:\n                common.append(l)\n    return sorted(common, key=lambda x: x, reverse=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([item for item in l1 if item not in l2], reverse=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for l1, l2 in zip(l1, l2):\n        common.extend(common(l1, l2))\n    return sorted(common)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([e for e in l1 if e in l2], key=lambda x: x.count(e))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == 0:\n        return []\n    if len(l2) == 0:\n        return l1\n    if l1 == l2:\n        return []\n    if l1[0]!= l2[-1]:\n        return []\n    for i in xrange(len(l1)):\n        if l1[i] == l2[i-1]:\n            continue\n        if l1[i] < l2[i-1]:\n            return l1[:i]\n        if l1[i] > l2[i-1]:\n            return l2[:i]\n    return l1", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(common(l1, l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(l1) - sorted(l2) if len(l1) > len(l2) else l1", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1).intersection(set(l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l = list(l)\n    if len(l)!= len(l2):\n        raise ValueError(\"lists must have the same length\")\n    for i in range(len(l)):\n        if l2[i] in l:\n            return l1[i:]\n    return l1", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def common_ind(l1: list, l2: list):\n        return l1.index(l2) in [l1.index(e) for e in common(l1, l2)]\n\n    common = lambda l1: common_ind(l1, l2) for l2 in l2 if l2 is not None\n    return sorted(common(l1, l2) for l1 in l1 if l1 is not None)[0]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Create a new list and sort it\n    result = list()\n    for el in l1:\n        for el2 in l2:\n            if el in el2:\n                result.append(el)\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for elt in l1:\n        for elt in l2:\n            if elt not in common:\n                common.append(elt)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return list(set(l1) & set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(l1, key=lambda x: x[1], reverse=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise ValueError(\"Lists must have the same length.\")\n    if l1 == l2:\n        return []\n    s1 = set(l1)\n    s2 = set(l2)\n    while s1 and not s2 and len(s1) > 0:\n        s1.difference_update(s2)\n        s2.clear()\n    return [s1 - s2]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return l1\n    elif len(l1) > len(l2):\n        return l1\n    else:\n        return sorted(l1, key=lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = set()\n    for elem in l1:\n        for elem2 in l2:\n            if elem in elem2:\n                common.add(elem)\n            else:\n                common.add(elem2)\n    return sorted(common, key=lambda x: x[1])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if l1 == l2:\n        return []\n\n    if len(l1)!= len(l2):\n        raise ValueError(\"Lists must be the same length\")\n\n    if l1 is not None:\n        return sorted(l1)\n    elif l2 is not None:\n        return sorted(l2)\n\n    for i in range(len(l2)):\n        for j in range(len(l1)):\n            if l1[i] == l2[j]:\n                return [i, j]\n\n    return []", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = []\n    for x in l1:\n        for y in l2:\n            if x == y:\n                result.append(x)\n    return sorted(result)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # use a list comprehension to iterate over the two lists\n    common = []\n    for l in l1:\n        for l in l2:\n            if l in common:\n                common.remove(l)\n                continue\n            common.append(l)\n    return sorted(common, key=lambda x: x)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2), key=lambda x: x[1], reverse=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) - set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1).union(set(l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1).union(set(l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return l1\n    else:\n        return sorted(l1, key=lambda x: x[1], reverse=True) - sorted(l2, key=lambda x: x[1], reverse=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return [item for item in l1 if item in l2 and item not in l1]\n    else:\n        if len(l1) > len(l2):\n            return common(l1[:len(l2)], l2)\n        else:\n            return common(l2, l1[:len(l1)])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for x, y in zip(l1, l2):\n        if x in y:\n            common.append(x)\n    return sorted(common)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([item for item in l1 if item not in l2], key=lambda x: x[1])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Sort the lists\n    for item in l1:\n        for item in l2:\n            if item in common(item, item):\n                yield item", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2), key=lambda x: x[1])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def _sort_unique(l1: list, l2: list):\n        common = []\n        for i in range(len(l1)):\n            if l1[i] not in l2:\n                common.append(l1[i])\n        return common\n\n    def _sort_unique_and_append(l1: list, l2: list):\n        common = _sort_unique(l1, l2)\n        common = [common[0]] + common[1:]\n        return common\n\n    def _sort_unique_and_remove(l1: list, l2: list):\n        common = _sort_unique(l1, l2)\n        common = [common[0]] + common[1:]\n        return common\n\n    def _sort_unique_and_append_unique(l1: list, l2: list):\n        common = _sort_unique_and_append(l1, l2)\n        common = common + [common[0]]\n        return common\n\n    def _sort_unique_and_remove_unique(l1: list, l2: list):\n        common = _sort_unique_and_remove(l1, l2)\n        common = common + [common[0]]\n        return common\n\n    def _sort_unique_and_append_unique_and_remove(l1: list, l2: list):\n        common = _sort_unique_and_append_unique(l1, l2)\n        common =", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = set()\n    for l in l1:\n        for l in l2:\n            if l in common:\n                continue\n            common.add(l)\n    return common\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2), key=lambda x: x[1])</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(l1) - sorted(l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def common_pair(l1: list, l2: list):\n        \"\"\"Return sorted unique common elements for two lists.\n        >>> common_pair([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common_pair([5, 3, 2, 8], [3, 2])\n        [2, 3]\n\n        \"\"\"\n        for i in range(len(l1)):\n            if l1[i] not in l2:\n                continue\n            if l2[i] not in l1:\n                continue\n            return l1[i], l2[i]\n    return sorted(common_pair(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(common(l1, l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # simple case, no common elements\n    if len(l1) == len(l2):\n        return l1\n    # case of at least one common element\n    if len(l1)!= len(l2):\n        return l1\n\n    # common elements are distinct\n    for i in range(len(l1)):\n        if l1[i] not in l2:\n            return l1\n\n    # common elements are not distinct\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            return l1\n\n    # common elements are identical\n    for i in range(len(l1)):\n        if l1[i] == l2[i]:\n            return l1\n\n    # common elements are not identical\n    for i in range(len(l1)):\n        if l1[i]!= l2[i]:\n            return l1\n\n    return l1", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = []\n    for elt in l1:\n        for elt2 in l2:\n            if elt in elt2:\n                result.append(elt)\n        result.sort(key=lambda x: x[1])\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise ValueError(\"Input lists must be of equal length\")\n    if l1[0]!= l2[0]:\n        raise ValueError(\"Input lists must have equal elements\")\n    l1 = [(i, l1[i]) for i in xrange(len(l1))]\n    l2 = [(i, l2[i]) for i in xrange(len(l2))]\n    common = set()\n    for i in xrange(len(l1)):\n        for j in xrange(len(l2)):\n            if l1[i]!= l2[j]:\n                common.add(l1[i])\n                common.add(l2[j])\n    return sorted(common)\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) - set(l2), key=lambda x: x.__getitem__(0)[0])\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for l in l1:\n        for l in l2:\n            if l in common:\n                common.remove(l)\n            else:\n                common.append(l)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for l in l1:\n        for l in l2:\n            if l in common:\n                continue\n            common[l] = common.get(l, 0) + 1\n    return sorted(common.keys())", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if l1 == l2:\n        return [l]\n    return sorted(set(l1) | set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # common(l1, l2):\n    #   find all common elements between l1 and l2\n    #   sort the common elements in reverse order\n    #   return sorted(l1) - sorted(l2)\n\n    def _common(l1: list, l2: list):\n        \"\"\"\n        Return sorted unique common elements for two lists.\n        >>> _common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> _common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n\n        \"\"\"\n        common = []\n        for el1 in l1:\n            for el2 in l2:\n                if el1 == el2:\n                    continue\n                elif el1 in common:\n                    continue\n                else:\n                    common.append(el1)\n        common.sort()\n        return common\n\n    def _reverse(l1: list, l2: list):\n        \"\"\"\n        Return sorted unique common elements for two lists.\n        >>> _reverse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for element in l1:\n        for element in l2:\n            if element in common:\n                common.append(element)\n            else:\n                common.append(element)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return l1\n    else:\n        if len(l1) > len(l2):\n            return common(l2, l1[:len(l1)])\n        else:\n            return common(l1, l2[1:])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [e for e in l1 if e not in l2]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def unique(l):\n        \"\"\"Return a list of unique elements from the input list.\"\"\"\n        return [i for i in l if i not in l]\n\n    def distinct(l):\n        \"\"\"Return a list of distinct elements from the input list.\"\"\"\n        return [i for i in l if i not in l]\n\n    def unique_unique(l):\n        \"\"\"Return a list of unique elements from the input list.\"\"\"\n        return [i for i in l if i not in l]\n\n    def distinct_unique(l):\n        \"\"\"Return a list of distinct elements from the input list.\"\"\"\n        return [i for i in l if i not in l]\n\n    return sorted(unique_unique(l), key=unique, reverse=True)\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l = [e for e in l1 if e not in l2]\n    l.sort()\n    return l", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def sort_unique(l1: list, l2: list):\n        return sorted(l1, key=lambda x: x.count(x) for x in l2)\n\n    if len(l1)!= len(l2):\n        raise ValueError(\"lengths don't match\")\n\n    # Sort the lists so that the common elements are in the same order.\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] == l2[j]:\n                return i, j\n\n    # Lastly, if the lists are sorted, return the common elements.\n    return sorted(l1, key=sort_unique)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(list, list))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if l1 == l2:\n        return []\n    if l1 == []:\n        return l2\n    if len(l1) == 0:\n        return l1\n    if len(l2) == 0:\n        return []\n    if l1[0]!= l2[0]:\n        return [common(x, y) for x, y in zip(l1, l2)]\n    return [common(x, y) for x, y in zip(l1[1:], l2[1:])]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1).union(set(l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def inner(l: list, i: int):\n        return l[i:]\n    return sorted(zip(inner(l, i), l1), key=lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # need to get a copy of the lists\n    l1_copy = copy.deepcopy(l1)\n    l2_copy = copy.deepcopy(l2)\n    # need to sort the lists\n    l1_copy.sort()\n    l2_copy.sort()\n    # remove duplicates\n    l1_copy.remove(l1_copy.pop())\n    l2_copy.remove(l2_copy.pop())\n    # flatten the lists\n    l1_copy.extend(l2_copy)\n    # return the sorted lists\n    return l1_copy, l2_copy\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(common(l1, l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise ValueError('Lists must have same length')\n\n    # l1 is a sorted list\n    # l2 is a reversed list\n    # common is a list containing the common elements\n    common = []\n\n    # If l1 is a list of unique elements, we can return it\n    if len(l1) == len(common):\n        return common\n\n    # If l1 is a list of unique elements, we can use the identity\n    # function to find the common elements\n    for element in l1:\n        if element not in common:\n            common.append(element)\n\n    # If l2 is a list of unique elements, we can use the identity\n    # function to find the common elements\n    for element in l2:\n        if element not in common:\n            common.append(element)\n\n    # If both lists are of unique elements, we can use a simple\n    # dictionary to find the common elements\n    common_dict = {}\n    for element in l1:\n        if element not in common:\n            common_dict[element] = []\n        common_dict[element].extend(common)\n    for element in l2:\n        if element not in common_dict:\n            common_dict[element] = []\n    for element in common_dict", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) - set(l2), key=lambda x: x[0])</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Make sure lists are sorted\n    if not isinstance(l1, list):\n        l1 = [l]\n    if not isinstance(l2, list):\n        l2 = [l]\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def _common(l1: list, l2: list):\n        \"\"\"Sort the two lists by common elements.\n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        \"\"\"\n        return [item for item in l1 if item in l2]\n\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def _common(l1: list, l2: list):\n        \"\"\"Return sorted unique common elements for two lists.\"\"\"\n        return sorted([l for l in l1 if l in l2], reverse=True)\n\n    def _unique(l1: list, l2: list):\n        \"\"\"Return sorted unique common elements for two lists.\"\"\"\n        return sorted([l for l in l1 if l not in l2 and l not in l1], reverse=True)\n\n    for item in common(l1, l2):\n        for item in _common(l1, l2):\n            if item not in l2:\n                continue\n            if item not in l1:\n                continue\n            if item not in l2:\n                continue\n            if item not in l1:\n                continue\n            if item not in l2:\n                continue\n            if item not in l1:\n                continue\n            if item not in l2:\n                continue\n            if item not in l2:\n                continue\n            if item not in l1:\n                continue\n            if item not in l2:\n                continue\n            if item not in l1:\n                continue\n            if item not in l2:\n                continue\n            if item not in l1:\n                continue\n            if item not in l2:\n                continue\n            if item not in l1:\n                continue\n            if", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for elt in l1:\n        if elt not in l2:\n            common.append(elt)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) - set(l2), key=lambda x: x[1], reverse=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def common_sorted(l1: list, l2: list):\n        \"\"\"Return sorted unique common elements for two lists.\n        >>> common_sorted([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common_sorted([5, 3, 2, 8], [3, 2])\n        [2, 3]\n\n        \"\"\"\n        return [e for e in l1 if e in l2]\n\n    def common_uniq(l1: list, l2: list):\n        \"\"\"Return unique common elements for two lists.\n        >>> common_uniq([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [5, 7, 1, 653, 5, 9, 6]\n        >>> common_uniq([5, 3, 2, 8], [3, 2])\n        [3, 4, 653, 5]\n\n        \"\"\"\n        return [e for e in l1 if not e in l2]\n\n    def common_sorted_unique(l1: list, l2: list):\n        \"\"\"Return sorted unique common elements for two lists.\n        >>> common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1).intersection(set(l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def unique(l: list):\n        return set(x for x in l if x not in l)\n\n    def uniq(l1: list, l2: list):\n        \"\"\"Return sorted unique common elements for two lists.\n        >>> uniq([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> uniq([5, 3, 2, 8], [3, 2])\n        [2, 3]\n\n        \"\"\"\n        return sorted(l1, key=lambda x: unique(x) - unique(l2))\n\n    def uniq_unique(l1: list, l2: list):\n        \"\"\"Return unique common elements for two lists.\n        >>> uniq_unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> uniq_unique([5, 3, 2, 8], [3, 2])\n        [2, 3]\n\n        \"\"\"\n        return sorted(l1, key=lambda x: unique_unique(x) - unique_unique(l2))\n\n    def uniq_unique_unique(l1: list,", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Pick the first common element for each list.\n    for i, l1 in enumerate(l1):\n        for j, l2 in enumerate(l2):\n            if l1[i] == l2:\n                common(l1, l2)\n                break\n    # Sort the elements.\n    common(l1, l2) = sorted(common(l1, l2))\n    return common(l1, l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # find common elements in both lists\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in common_list:\n            continue\n        common_list.append(l1[i])\n    for i in range(len(l2)):\n        if l2[i] in common_list:\n            continue\n        common_list.append(l2[i])\n\n    # sort the common elements\n    common_list.sort()\n    return common_list", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if l1 == l2:\n        return []\n    elif len(l1) > len(l2):\n        return l1\n    else:\n        return common(l2, l1[:len(l1)])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def common_sorted(l1: list, l2: list):\n        return sorted(common(l1, l2))\n    return common_sorted(l1, l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise ValueError('lists must have the same length')\n    if l1[0]!= l2[0]:\n        raise ValueError('lists must have the same head')\n    if l1[1]!= l2[1]:\n        raise ValueError('lists must have the same tail')\n    return sorted(set(l1) - set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == 0:\n        return l1\n\n    if len(l2) == 0:\n        return l2\n\n    l1 = l1.sort()\n    l2 = l2.sort()\n\n    l1 = l1[:]\n    l2 = l2[:]\n\n    for elt in l1:\n        for elt in l2:\n            if elt in elt:\n                continue\n            if elt not in l1:\n                l1.append(elt)\n            else:\n                l2.append(elt)\n\n    return l1, l2", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) - set(l2), key=lambda x: x[1], reverse=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == 0:\n        return []\n\n    if len(l2) == 0:\n        return l1\n\n    # Create a sorted list of common elements\n    l1 = [element for element in l1 if element not in l2]\n    l2 = [element for element in l2 if element not in l1]\n\n    # Remove duplicates from l1\n    l1 = [element for element in l1 if element not in l2]\n    l1 = [l for l in l1 if l not in l2]\n    l1 = [l for l in l1 if l not in l1]\n\n    # Remove duplicates from l2\n    l2 = [element for element in l2 if element not in l1]\n    l2 = [l for l in l2 if l not in l1]\n    l2 = [l for l in l2 if l not in l1]\n\n    # Remove duplicates from l1 and l2\n    l1 = [element for element in l1 if element in l2]\n    l2 = [element for element in l2 if element in l1]\n    l1 = [l for l in l1 if l in l2]\n    l2 = [l for l in l2 if l in l1]\n\n    # Sort l1 and l2\n    l1 = [element for element in l1 if element not in l2]\n    l2 = [element for element in l2 if element not in", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l = list(l)\n    r = list(l2)\n    return sorted(common(l, r))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return l1\n    elif len(l1) > len(l2):\n        return l1[:len(l2)] + l2\n    else:\n        return l1\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # we need to sort first so we can use the sorted function\n    l1.sort()\n    l2.sort()\n    common = set()\n    for i in range(len(l1)):\n        common.add(l1[i])\n    for i in range(len(l2)):\n        common.add(l2[i])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for e in l1:\n        if e in l2:\n            common.append(e)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for l in l1:\n        for l in l2:\n            if l in common:\n                common.append(l)\n            else:\n                common.append(l)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return l1\n    else:\n        return common(l1, l2)[:]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2), key=lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l2) == len(l1):\n        return l1\n    elif len(l2) == 1:\n        return l2[0]\n    elif len(l1) == 1:\n        return l1[0]\n    else:\n        return sorted(l1, key=lambda x: x, reverse=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) - set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        return\n    for i in xrange(len(l1)):\n        for j in xrange(len(l2)):\n            if l1[i] == l2[j]:\n                return i, j\n    return", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1).intersection(set(l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def common_compare(a: list, b: list):\n        if len(a)!= len(b):\n            return False\n        if a[0] < b[0]:\n            return True\n        if a[0] > b[0]:\n            return False\n        for i in range(len(a)):\n            if a[i] < b[i]:\n                return True\n            if a[i] > b[i]:\n                return False\n        return False\n\n    return sorted(common_compare(l1, l2), key=lambda x: x[0], reverse=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in xrange(len(l1)):\n        if l1[i] not in l2:\n            common.append(l1[i])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Make sure we have an ordered list\n    if len(l1) < len(l2):\n        raise ValueError('Lists must have equal length')\n    # Make sure we have a sorted list\n    if l1 is not list:\n        raise ValueError('Lists must be sorted')\n    # Sort the lists\n    l1.sort()\n    l2.sort()\n    # Take the common elements\n    return sorted(l1 + l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for l1 in l1:\n        for l2 in l2:\n            if l1 == l2:\n                continue\n            if l1 in common:\n                continue\n            common.append(l1)\n            common = common[:len(common) - 1] + [l2, l1]\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if l1 == l2:\n        return l1\n    else:\n        return sorted(set(l1) & set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        return []\n\n    if l1 == l2:\n        return [e for e in common(l1)]\n    else:\n        return sorted(common(l1), key=lambda e: e[0], reverse=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    for item in l1:\n        for item in l2:\n            if item in common(item, item):\n                yield item\n    for item in l2:\n        for item in l1:\n            if item in common(item, item):\n                yield item", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return l1\n    elif len(l1) > len(l2):\n        return common(l2, l1[:len(l2)])\n    else:\n        return l1", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def common_heap(l1: list, l2: list):\n        \"\"\"Return a sorted list of common elements for two lists.\n        >>> common_heap([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common_heap([5, 3, 2, 8], [3, 2])\n        [2, 3]\n\n        \"\"\"\n        if len(l2) == len(l1):\n            return l1\n        if l1 == l2:\n            return [l]\n        elif l1 < l2:\n            return [common_heap(l1, l2)]\n        else:\n            return [common_heap(l1, l2) for i in range(len(l1) - len(l2))]\n\n    def _sort(l1: list, l2: list):\n        \"\"\"Sort two lists by their common elements.\n        >>> _sort([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [ 1, 5, 653 ]\n        >>> _sort([5, 3, 2, 8], [3, 2])\n        [2", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # We use a list of unique elements to avoid checking for duplicates.\n    # This is a little more efficient than using a set of unique elements.\n    common = set()\n    for x in l1:\n        if x not in common:\n            common.add(x)\n    for x in l2:\n        if x not in common:\n            common.add(x)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return l1\n    else:\n        return [(l1[i:i + len(l1)], l2[i:i + len(l2)]) for i in range(len(l1))]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for l1 in l1:\n        for l2 in l2:\n            if l1 == l2:\n                continue\n            if l1 in l2:\n                common.append(l1)\n    return sorted(common)\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise TypeError('lists must have same length')\n\n    for i in range(len(l1)):\n        if l1[i] not in l2[i]:\n            return l1[i]\n    return l2", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = set()\n    for i in l1:\n        if i in l2:\n            common.add(i)\n    for i in l2:\n        if i not in common:\n            common.add(i)\n    return sorted(common)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def common_ordered_keys(l1: list, l2: list):\n        \"\"\"Return sorted unique common elements for two lists.\n        >>> common_ordered_keys([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653, 7, 1, 3, 34, 653, 2, 5]\n        >>> common_ordered_keys([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        >>> common_ordered_keys([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653, 7, 1, 3, 34, 653, 2, 5]\n        >>> common_ordered_keys([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        >>> common_ordered_keys([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653, 7, 1, 3, 34, 653, 2, 5]\n        >>> common_ordered_keys(", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return l1\n    elif l1.count(l2) > 0:\n        return l1\n    else:\n        return l1.sort() + l2.sort()", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(common(l1, l2)) for l1, l2 in zip(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def _common(l1: list, l2: list):\n        \"\"\"Return common elements between two lists.\n\n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        >>> common([1, 4, 3, 34, 653, 2, 5], [3, 2, 1, 5, 9, 653, 121])\n        [1, 5, 653, 3, 2]\n        >>> common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        >>> common([1, 4, 3, 34, 653, 2, 5], [3, 2, 1, 5, 9, 653, 121])\n        [1, 5, 653, 3, 2]\n\n        \"\"\"\n        common = []\n        for i, l1 in enumerate(l1):\n            for j, l2 in enumerate(l2):\n                if l1[i] == l2[j]:\n                    common.append(i)\n        return common\n\n    common = _common(l1, l2)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) - set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) - set(l2), key=lambda x: x[0], reverse=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for elem in lists:\n        if elem not in l1:\n            continue\n        if elem not in l2:\n            continue\n        if elem in common:\n            common.remove(elem)\n        common.append(elem)\n    return common\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if l1.count(l2) == 0:\n        return l1\n    elif l1.count(l2) == 1:\n        return l1[:l1]\n    else:\n        return l1.sort()", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l2)!= len(l1):\n        raise ValueError(\"list lengths do not match: {0}!= {1}\".format(len(l2), len(l1)))\n    if len(l2) == 1:\n        return l1\n    else:\n        return common(l2, l1)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return l1\n    else:\n        return sorted(common(l1, l2), key=lambda x: x[0])[::-1]\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        return\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] == l2[j]:\n                return l1[i]\n    return l1", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return l1\n    elif len(l1) == 1:\n        return l1[0]\n    elif len(l2) == 1:\n        return l2[0]\n    else:\n        return sorted(common(l1, l2), key=lambda x: x[1])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def common_compare(l1: list, l2: list):\n        if l1 is None:\n            return False\n        if l2 is None:\n            return True\n        if l1 is not l2:\n            return l1.count(l2) > 0\n        return l1.count(l1) > 0\n\n    def _count_unique_common(l1: list, l2: list):\n        if l1 is None:\n            return 0\n        if l2 is None:\n            return 0\n        return l1.count(l2) > 0\n\n    def _count_unique_common_without_zero(l1: list, l2: list):\n        if l1 is None:\n            return 0\n        if l2 is None:\n            return 0\n        return l1.count(l2) > 0\n\n    def _sorted_unique_common(l1: list, l2: list):\n        if l1 is None:\n            return []\n        if l2 is None:\n            return []\n        return l1.sort(common_compare).union(l2).sort(common_compare)\n\n    _count_unique_common_without_zero = _count_unique_common_without_zero\n    _count_unique_common = _count_unique_common\n    _sorted_unique_common = _sorted_unique_common\n\n    def _sorted_unique_common_without_zero(l1: list, l2: list):", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def _sort_unique(l1: list, l2: list):\n        \"\"\"Sort two lists by unique element.\n\n        >>> _sort_unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> _sort_unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [5, 3, 2, 8]\n        >>> _sort_unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 4, 3, 34]\n        >>> _sort_unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [4, 3, 2, 8]\n        >>> _sort_unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [4, 3, 2, 8]\n        >>> _sort_unique([1, 4", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def common_sorted(l1: list, l2: list):\n        if l1 == l2:\n            return []\n        common_sorted.sort(key=lambda x: x[0])\n        return common_sorted(l1, l2)\n\n    common_sorted.sort(key=lambda x: x[0])\n    return common_sorted(l1, l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise ValueError(\"Lengths of lists must be equal\")\n    for i, x in enumerate(l1):\n        for j, y in enumerate(l2):\n            if x == y:\n                continue\n            if x > y:\n                continue\n            if x < y:\n                continue\n            if i < j:\n                continue\n            if i > j:\n                continue\n            if i == j:\n                continue\n            if x in l1:\n                continue\n            if x in l2:\n                continue\n            if x in l1 + l2:\n                continue\n            if x in l2 + l1:\n                continue\n            if x in l2 + l2:\n                continue\n            if x == l2:\n                continue\n            if x == l1:\n                continue\n            if x == l2:\n                continue\n            return [i, j]\n    return [i, i]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1).intersection(set(l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] == l2[j]:\n                common.append(i)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return list(set(l1) & set(l2))"]]