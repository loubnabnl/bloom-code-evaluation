[["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # A list is a one-element collection of the same element.\n    # So just shift the elements around, so they don't collide.\n    l1.sort()\n    l2.sort()\n    l1 = [l for l in l1 if l in l2]\n    l2 = [l for l in l2 if l not in l1]\n    return [a for a in l2 if a in l1]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) < len(l2):\n        return l1\n    if len(l1) == len(l2):\n        return l1\n    i = 0\n    i1 = l1[0]\n    i2 = l2[0]\n    while i < len(l1):\n        while i1!= l2:\n            if common(i1, i2) > common(i1, l1[i1]) and common(i1, l2[i1]) > common(i1, l2[i2]):\n                i1 = i1[1:]\n            else:\n                break\n            i1 = i1[1:]\n        if i1 == l2[i1]:\n            return l1[i1]\n        i2 = i2[1:]\n        i += 1\n    return None", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    c1, c2 = [], []\n    for l in l1:\n        for l in l2:\n            if l in c1:\n                c1.append(l)\n            elif l in c2:\n                c2.append(l)\n    return sorted(c1) + sorted(c2)\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(set(common(l1, l2)) - set(l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    n = len(l1)\n    m = len(l2)\n    if n!= m:\n        return []\n    sorted_l = []\n    for i in range(n):\n        if l1[i] not in sorted_l:\n            sorted_l.append(l1[i])\n    for i in range(m):\n        if l2[i] not in sorted_l:\n            sorted_l.append(l2[i])\n    return sorted_l", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    ret = []\n    for element in l1:\n        if element in l2:\n            ret.append(element)\n    return ret\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    for item in l1:\n        for item in l2:\n            if item in l1:\n                return item\n            elif item in l2:\n                return item\n    return None\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def _add(a, b: list):\n        \"\"\"Add two lists together.\"\"\"\n        return a + b\n    sorted = list(common(L1, L2))\n    sorted.sort()\n    return sorted", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def common_keep(l1: list, l2: list):\n        \"\"\"Return the common elements of two lists, keeping duplicates in common.\n        >>> common_keep([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common_keep([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        \"\"\"\n        common = []\n        for l in l1:\n            for u in l2:\n                if l == u:\n                    common.append(l)\n                else:\n                    if l in common:\n                        common.remove(l)\n        return common\n\n    def remove_common(l1: list, l2: list):\n        \"\"\"Remove common elements from the two lists.\n        >>> remove_common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        >>> remove_common([5, 3, 2, 8], [3, 2])\n        >>> remove_common([1, 4, 3, 34, 653, 2, 5], [5, 9, 1, 5, 9, 653, 121])\n        >>> remove_common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if not l1: return None\n    if not l2: return None\n    result = [(i, j) for i, j in common(l1, l2)]\n    return result\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    keys = set()\n    for item in l1:\n        for item2 in l2:\n            if item == item2:\n                keys.add(item)\n    common_keys = sorted(keys)\n    return common_keys\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Iterate over each element in list l1, ignoring repeated elements.\n    for elm in l1:\n        if elm in l2:\n            yield elm\n\n    # Iterate over each element in list l2, ignoring repeated elements.\n    for elm in l2:\n        if elm not in l1:\n            yield elm", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    unique = []\n    for l in l1:\n        for l in l2:\n            if l in unique:\n                unique.append(l)\n                continue\n            if l in l1:\n                unique.append(l)\n            if l in l2:\n                unique.append(l)\n            else:\n                unique.append(None)\n\n    return sorted(unique)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    sorted = True\n    for item in l1:\n        if item not in l2:\n            sorted = False\n            break\n    return sorted", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Sorts the lists in the order they appear in the first parameter.\n    l1 = sorted(l1, key=lambda i: i[0])\n\n    # Sorts the lists in the order they appear in the second parameter.\n    l2 = sorted(l2, key=lambda i: i[0])\n\n    # The sorting function returns an iterator containing the unique elements in\n    # both lists.\n    return [i for i in l1 if i in l2]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [e for e in l1 if e not in l2]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # If we have a list of length 1, then\n    # we can just do a simple comparison.\n    if len(l1) == 1:\n        return l1\n    # Otherwise, we must sort the list.\n    l = sorted(l1, key=lambda x: x.count(l2))\n    return l", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(common(v1, v2)) for v1, v2 in zip(v1, v2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1 = []\n    l2 = []\n    for i in range(len(l1)):\n        if l2[i] not in l1:\n            l1.append(l2[i])\n    return l1", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(zip(l2, l1), key=lambda x:x[0], reverse=True)[::-1]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1).intersection(set(l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    unique = list(set(l1).union(set(l2)))\n    return sorted(unique, key=lambda x: x)[:len(unique)]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    i = 0\n    while i < len(l1):\n        while i < len(l2):\n            if l1[i] == l2[i]:\n                return l1[i]\n            i += 1\n        else:\n            return l1[i]\n    return None", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2), key=lambda x: x[0])</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1 = filter(lambda x: len(x) > 0, l1)\n    l2 = filter(lambda x: len(x) > 0, l2)\n\n    return [(key, v) for (key, v) in common(l1, l2)]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1).intersection(set(l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # convert lists into dict, sorts to avoid duplicates\n    l2 = dict(zip(l2, l2))\n    # sort by length\n    l1_len = len(l1)\n    l2_len = len(l2)\n    # sort by prefix\n    l1_common = sorted(l1)\n    l2_common = sorted(l2)\n    # sort by suffix\n    l1_common = [el for el in l1_common if el not in l2_common]\n    l2_common = [el for el in l2_common if el not in l1_common]\n    # check if they are the same\n    if len(l1_common)!= len(l2_common):\n        return l2_common\n    return l1_common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    res = set()\n    res.update(l1)\n    res.update(l2)\n    return [item for item in res]\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    assert len(L1) == len(L2)\n    tmp = L1\n    L1 = L2\n    L2 = tmp\n\n    if len(L1) == 0:\n        return ()\n    if len(L2) == 0:\n        return ()\n\n    if not L1.__contains__(L2):\n        return ()\n    return sorted(L1) - sorted(L2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    a, b = l2, l1\n    if a == b:\n        return None\n    if len(a)!= len(b):\n        return None\n    a = a[::2]\n    b = b[:::2]\n    a, b = sort_unique(a, b)\n    if a!= b:\n        return None\n    if len(a)!= len(b):\n        return None\n    return [a, b]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1, l2 = lp1, lp2\n\n    s1 = set(l1)\n    s2 = set(l2)\n\n    if not len(s1) or not len(s2):\n        return l1, l2\n\n    s1 -= s2\n\n    return l1, sorted(s2 - s1)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    t = set(l1).union(l2).difference(set(l1) & set(l2))\n    if len(t):\n        common(t, l1)\n    else:\n        return None\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1 = sorted(l1)\n    l2 = sorted(l2)\n\n    for element in l1:\n        if element not in l2:\n            return True\n    for element in l2:\n        if element not in l1:\n            return False\n\n    return True\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Keep the common elements so they don't become a key\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in common_elements:\n            common_elements.remove(l1[i])\n            continue\n        common_elements.append(l1[i])\n    # Count the elements that are common\n    common_elements = list(set(common_elements))\n\n    # Sort by the number of common elements\n    common_elements.sort(key=lambda x: x[1])\n    # Sort the common elements by the number of occurrences in the list\n    common_elements.reverse()\n    # Return the sorted common elements\n    return common_elements", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    for l in l1:\n        for l in l2:\n            if l in l1:\n                continue\n            else:\n                yield l\n    yield None", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    sorted_list_1 = sorted(l1, key=lambda x: x[1], reverse=True)\n    sorted_list_2 = sorted(l2, key=lambda x: x[1], reverse=True)\n\n    return common(sorted_list_1, sorted_list_2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == 0:\n        return l2\n    else:\n        ret = []\n        for l1i in l1:\n            for l2i in l2:\n                ret.append(len(l1i) == len(l2i))\n        return ret", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Start by copying the elements.\n    l1_copy = copy.deepcopy(l1)\n    l2_copy = copy.deepcopy(l2)\n    for x in xrange(len(l1_copy)):\n        for y in xrange(len(l2_copy)):\n            if l1_copy[x] == l2_copy[y]:\n                continue\n            l1_copy[x] = l2_copy[x]\n\n    # Sort the list elements.\n    for i in xrange(len(l1_copy)):\n        if l1_copy[i] not in l2_copy:\n            l1_copy[i] = l2_copy[i]\n\n    # Return the sorted list.\n    return l1_copy", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Generate all elements that are common to both lists.\n    common_list = []\n    for elem in l1:\n        common_list.append(elem in l2)\n    # Determine whether any of these common elements are repeated.\n    # If not, return a sorted list of unique elements.\n    if len(common_list) == 0:\n        return common_list\n\n    # Remove duplicates and sort.\n    return sorted(common_list, key=lambda elem: elem.count(elem))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if not l1:\n        return []\n    if not l2:\n        return l1\n\n    res = []\n    for ele in l1:\n        if ele not in l2:\n            res.append(ele)\n    return res\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def _common(self, vec1, vec2):\n        return sorted(zip(vec1, vec2)) if len(vec1) > len(vec2) else [vec1[i] for i in range(len(vec1))]\n\n    for l in l1:\n        if len(l) == len(l2):\n            return common(l, l2)\n        elif len(l) > len(l2):\n            _common(l, l2)\n            return common(l[1:], l2[1:])\n        else:\n            if len(l) == 2:\n                return common(l, l2[:-1])\n            else:\n                return common(l[1:], l2)\n\n    return _common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return l1\n    elif len(l1) > len(l2):\n        return common(l1[:], l2[:])\n    else:\n        return sort_unique_common(l1, l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(L1, L2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l = [item for item in l1 if item in l2]\n    return sorted(set(l), key=lambda item: item[0], reverse=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    c1 = list(filter(lambda x: x in l1, l1))\n    c2 = list(filter(lambda x: x in l2, l2))\n    return sorted(filter(lambda x: x not in c1 and x not in c2, c1), key=lambda x: x[1])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise ValueError('Lengths do not match.')\n    unique = []\n    for l in l1:\n        for l in l2:\n            if l in l1:\n                continue\n            if l in l2:\n                unique.append(l)\n    return sorted(unique, reverse=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Start at the end of the list\n    if len(l1) > len(l2):\n        l1.reverse()\n        l2.reverse()\n    elif len(l1) < len(l2):\n        l1.reverse()\n        l2.reverse()\n    else:\n        raise ValueError(\"Lengths do not match\")\n\n    # Now we have two lists sorted in ascending order\n    l1.sort()\n    l2.sort()\n    common = [l1[i] for i in range(len(l1)-1, -1, -1)]\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [item for item in l1 if item in l2]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(list(common(x, y)) for x, y in zip(x1, y1) for x1, y1 in zip(x2, y2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for e in l1:\n        common[e] = common.get(e, 0) + 1\n    for e in l2:\n        common[e] = common.get(e, 0) + 1\n\n    for e in l1:\n        for f in l2:\n            if common[e] == common[f]:\n                return e\n    return None", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l2 = list(l1)\n    l1 = sorted(list(l2))\n    return l1 - l2\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(set(common(l1, l2))).difference(set(l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for element in l1:\n        if element in l2:\n            common.append(element)\n    return sorted(common)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def split(lst):\n        \"\"\"Split a list and return the unique common elements of the\n        list.\n        >>> split([1, 2, 3, 4])\n        [1, 2, 3]\n        >>> split([1, 2, 3, 4, 5])\n        [1, 3, 4, 5]\n        >>> split([1, 2, 3, 4, 5], [6, 5, 4, 3, 1])\n        [1, 3, 4, 5]\n        \"\"\"\n        if len(lst) == 1:\n            return lst[0]\n        else:\n            return [i for i in lst if i not in lst[1:] - lst[0]]\n\n    def common(lst):\n        return split(common(lst))\n\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(i1.tolist()) & set(l2.tolist()) for i1, i2 in zip(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for i, v in enumerate(l1):\n        for j, v in enumerate(l2):\n            if v == v:\n                continue\n            if v in common:\n                continue\n            common[v] = 1\n            common[v] += 1\n    return sorted(common.items())", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(map(lambda x: x, l1), key=lambda x: x[2], reverse=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) | set(l2), key=lambda x: x if len(x) > 1 else None)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Create a dict of unique keys\n    d = defaultdict(lambda: set(list(l1).union(l2)))\n    return sorted(list(d.items()) for d in common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    ls = list(L1)\n    ls.sort()\n    ls = list(L2)\n    ls.sort()\n    common_keys = set()\n    for k in ls:\n        if k not in ls or (k not in common_keys and ls[k] not in common_keys):\n            common_keys.add(k)\n    return sorted(common_keys)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_sorted = []\n    for l1 in l1:\n        for l2 in l2:\n            common_sorted.append(len(common(l1, l2)))\n    return sorted(common_sorted)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = set()\n    for l1 in l1:\n        for l2 in l2:\n            if l1.intersection(l2):\n                common.add(l1.pop(0))\n                common.add(l2.pop(0))\n    return sorted(common, key=lambda x: x.pop(0), reverse=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Get a list of all common elements.\n    common = []\n    # Get a list of the elements in l1 and their duplicates.\n    dups = [d for d in l1 if d not in l2]\n    # Get a list of the elements in l2 and their duplicates.\n    dups = [d for d in l2 if d not in l1]\n    # Sort the duplicate elements by the greatest common prefix.\n    common = common[:]\n    # Now loop through the duplicate list, find the common prefix, and\n    # remove the duplicate from the list.\n    for d in dups:\n        l = d[:]\n        if len(l) > 1:\n            l = l[1:]\n        if l in common:\n            common.remove(l)\n    # Return the sorted common elements.\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(set(x) for x in l1) & set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = dict(zip(l1, list(l2)))\n    return set(common.values()) - set(common.keys())", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) - set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(set(l1).intersection(set(l2))))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return l1\n    else:\n        s1 = l1\n        s2 = l2\n        for i in range(len(s1)):\n            for j in range(len(s2)):\n                if s1[i] == s2[j]:\n                    return i, j\n                else:\n                    continue\n        return i, i", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Get a list of common elements\n    common_list = []\n    for l1 in l1:\n        for l2 in l2:\n            if l1!= l2:\n                common_list.append(l1)\n    # Sort by common list element\n    common_list.sort()\n    # Return result\n    return common_list", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1, l2 = l1, l2\n\n    if len(l1) > len(l2):\n        return sorted(l1) - sorted(l2)\n    else:\n        return sorted(l1) - sorted(l2[:len(l2)])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(set(i1).union(set(i2))) for i1, i2 in zip(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return l1\n    else:\n        unique = []\n        for i in xrange(len(l1)):\n            for j in xrange(len(l2)):\n                if l1[i] == l2[j]:\n                    unique.append(i)\n                elif l1[i] not in l2[j]:\n                    unique.append(j)\n        return sorted(unique)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1_len = len(l1)\n    l2_len = len(l2)\n    if l1 == l2:\n        return l1\n    if l1_len == l2_len:\n        return []\n    if l1_len > l2_len:\n        return common(l1[l1_len - l2_len:], l2)\n    for i1, i2 in zip(l1, l2):\n        if common(i1, i2) == l1:\n            return i1\n    return common(l1[l1_len - l2_len:], l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    commonlist = list()\n    for l in l1:\n        for s in l2:\n            if l.count(s) == 1:\n                commonlist.append(l)\n            else:\n                commonlist.append(l.union(s))\n    return sorted(commonlist)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(common(x1, x2)))[::-1]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l=len(l1)\n    l2=len(l2)\n    out=list()\n    for i in range(l):\n        for j in range(l2):\n            if (i!=j) and l1.count(l2.index(i))>0:\n                out.append(i)\n    return sorted(out)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    sorted_l1 = []\n    sorted_l2 = []\n    for o1, o2 in zip(l1, l2):\n        if len(o1) == len(o2):\n            sorted_l1.append(o1)\n            sorted_l2.append(o2)\n        elif len(o1) > len(o2):\n            sorted_l1.append(o1.copy())\n            sorted_l2.append(o2.copy())\n    return sorted(set(sorted_l1) & set(sorted_l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = set()\n    for l1 in l1:\n        for l2 in l2:\n            if l1 in common and l2 not in common:\n                common.add(l1)\n                common.add(l2)\n        if l1 in common:\n            common.discard(l1)\n        if l2 in common:\n            common.discard(l2)\n\n    return sorted(common)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [l for l in l1 if l in l2]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise ValueError(\"lists length must be same\")\n    keys = zip(*sorted(l1))\n    keys = [key for key in keys if key in keys]\n    if keys!= [key for key in keys] + [key for key in keys if key!= key]:\n        raise ValueError(\"keys must be different\")\n    return sorted(keys)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(zip(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    while l1 and l2 and l1!= l2:\n        if l1 in common and l2 in common:\n            continue\n        common.append(l1)\n        l1, l2 = l1, l2\n    return common\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for el in l1:\n        if el not in l2:\n            continue\n        common.append(el)\n    for el in l2:\n        if el not in common:\n            common.append(el)\n    return sorted(common)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(zip(l1, l2)) for l1, l2 in zip(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(list1, list2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for item in l1:\n        if item not in l2:\n            common.append(item)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise ValueError(\"len(l1)!= len(l2)\")\n\n    new = []\n    for i in xrange(len(l2)):\n        if l1[i] in l2:\n            new.append(l1[i])\n    return new", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def lower(seq):\n        def _rec(seq):\n            if seq[0] > seq[1]:\n                return 1\n            elif seq[1] > seq[0]:\n                return -1\n            else:\n                return 0\n        return _rec\n    return [elem for elem in l1 if elem in elem for elem in l2 if elem in elem]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(x) & set(l1) & set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1).intersection(set(l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    #    import operator\n    #    s = sorted(l1, key=operator.itemgetter(1))\n    #    s = sorted(l2, key=operator.itemgetter(1))\n    #    return s\n\n    def sorted_unique(l1: list, l2: list):\n        \"\"\"Return sorted unique common elements for two lists.\n        >>> sorted_unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> sorted_unique([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        \"\"\"\n        #    import operator\n        #    s = sorted(l1, key=operator.itemgetter(1))\n        #    s = sorted(l2, key=operator.itemgetter(1))\n        #    return s\n\n    def sort_unique(l1: list, l2: list):\n        \"\"\"Return sorted unique common elements for two lists.\n        >>> sort_unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> sort_unique(", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # TODO: remove this circular reference later, see https://github.com/googlegroups/googletest/issues/4273\n    # for a more comprehensive discussion of this.\n    # TODO: remove this circular reference later, see https://github.com/googlegroups/googletest/issues/4273\n    # for a more comprehensive discussion of this.\n    def copy(self):\n        return sorted(self, key=lambda x: x[0], reverse=True)\n    return sorted(common(l1, l2), key=copy)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def cmp(lst1, lst2):\n        return cmp(lst1.items(), lst2.items())\n\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Generate a list of common elements.\n    common = []\n    for elem in l1:\n        for elem2 in l2:\n            if elem == elem2:\n                common.append(elem)\n    # Sort the elements.\n    common.sort()\n    # Return the common elements.\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(l1) - sorted(l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def common_unique(l1: list, l2: list):\n        \"\"\"Return sorted unique common elements for two lists.\n        >>> common_unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common_unique([5, 3, 2, 8], [3, 2])\n        [2, 3]\n\n        \"\"\"\n        return (common_unique(l, l[1:]) for l in l1, l2)\n\n    l1 = sorted(list(common_unique(l, l[1:]) for l in l1))\n    l2 = sorted(list(common_unique(l, l[1:]) for l in l2))\n    return (l for l in l1 if not l in l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(set(l1).intersection(set(l2))))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    from itertools import chain, combinations\n    return sorted(chain.from_iterable([i for i in combinations(l1, 2) if i not in combinations(l2, 2)]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    if len(l1) == len(l2):\n        for i in range(len(l1)):\n            if l1[i] == l2[i]:\n                common.append(i)\n    else:\n        for i in range(len(l2)):\n            for j in range(len(l1)):\n                if l1[i] == l2[j]:\n                    common.append(i, j)\n    common.sort()\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return l1\n\n    l1 = []\n    l2 = []\n    i = 0\n    for x in l1:\n        if x not in l2:\n            l1.append(x)\n            l2.append(i)\n            i = i+1\n\n    return sorted(set(l1) - set(l2), reverse = True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1.sort()\n    l2.sort()\n    return sorted(set(l1) | set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(common(l1, l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    r = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[len(l1)-i-1] == l2[j]:\n                r.append(l1[len(l1)-i-1:len(l1)])\n                if len(r) > 2:\n                    r.pop(0)\n            else:\n                r.append(l2[j:])\n        if len(r) > 0:\n            r.pop(0)\n    return r", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_sorted = []\n    for x, y in zip(l1, l2):\n        if x in common_sorted or y in common_sorted:\n            continue\n        common_sorted.append(x)\n        if x == y:\n            continue\n        if x < y:\n            common_sorted.append(x)\n            common_sorted.append(y)\n            common_sorted.append(x)\n        elif x == y:\n            common_sorted.append(x)\n        else:\n            common_sorted.append(y)\n\n    return sorted(common_sorted)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1 = [(item[0], item[1]) for item in list(zip(l1, l2))]\n    l2 = [(item[0], item[1]) for item in list(zip(l2, l1))]\n    l = [(item[0], item[1]) for item in zip(l1, l2)]\n    return sorted(l, key=lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) - set(l2), key=lambda x: x[1:], reverse=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l2) > len(l1):\n        return l1\n    else:\n        result = []\n        for i in range(len(l1)):\n            if l1[i]!= l2[i]:\n                result.append(l1[i])\n        result.sort()\n        return result\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    ls = list(filter(lambda x: x not in l1, l1))\n    return [common(item, ls[-1]) for item in ls if item in ls[-1]]\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) | set(l2), key=lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    ret = []\n    for x, y in zip(x1, y1):\n        if len(x) > len(y):\n            continue\n        if x == y:\n            ret.append(x)\n        else:\n            if len(x) == len(y):\n                ret.append(y)\n                ret.append(x)\n                ret.append(y)\n                ret.append(x)\n            else:\n                tmp = x\n                tmp.append(y)\n                ret.append(tmp)\n                ret.append(tmp)\n    return ret", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    unique = []\n    for l in l1:\n        for l2 in l2:\n            if l in l2 and l2 in l:\n                unique.append(l)\n    return unique", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        return\n    c1 = l1[0]\n    c2 = l2[0]\n    count = 0\n    for i in range(len(l1)):\n        if c1 == l1[i] and c2 == l2[i]:\n            count += 1\n    return count\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    from collections import defaultdict\n    return sorted(set(l1) - set(l2), key=lambda x: x[0]) + set(l2) - set(l1)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    r = list()\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[l1[i]]!= l2[l2[j]]:\n                r.append(l1[l1[i]])\n    return sorted(r)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # For some reason the numpy version of this isn't quite right...\n    return sorted(common(l1, l2), key=lambda x: x[1], reverse=False) # Python 2.7.3", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Make sure the two lists are non-empty\n    assert l1, l1\n    assert l2, l2\n    # Sort the two lists\n    l1.sort()\n    l2.sort()\n    # Get the common elements\n    common = [i for i in l1 if i not in l2]\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def cmp(a: str, b: str) -> bool:\n        return cmp(a, b)\n    common_sort = sorted(l1)\n    common_sort.sort(cmp)\n    return common_sort", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [elem for elem in l1 if elem not in l2] + l1", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if not l1:\n        return []\n    else:\n        return sorted(l1)\n\n    def _common_iter(l1: list, l2: list):\n        for e in l1:\n            for f in l2:\n                if e in f:\n                    yield e, f\n            else:\n                yield e, None\n\n    def _common_sort(l1: list, l2: list):\n        for e in _common_iter(l1, l2):\n            if e not in l2:\n                yield e, None\n\n    def _common_ordered(l1: list, l2: list):\n        for e in _common_iter(l1, l2):\n            yield e, None\n\n    # common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    # [ 1, 5, 653 ]\n    # common([3, 2], [2, 3])\n    # [2, 3 ]\n\n    # common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    # [ 1, 5, 653 ]\n    # common([3, 2], [3, 4])\n    # [3,", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]):\n    # [1, 5, 653]\n    # common([5, 3, 2, 8], [3, 2]):\n    # [2, 3]\n    for element in l1:\n        common = False\n        for element2 in l2:\n            if element == element2:\n                common = True\n                break\n        if not common:\n            l1.append(element)\n    return l1", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] == l2[j]:\n                common.append(i)\n                break\n    return sorted(common, reverse=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def _sep(l):\n        return sum(i in l for i in l) == len(l)\n\n    # Sort the lists (for speed)\n    # (one pass is better than for loop)\n    l = [list(i) for i in l1 if _sep(i) == len(l)]\n    l.sort()\n    return l", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(filter(lambda x: x in l1, l1 + l2))\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    if len(l2) > len(l1):\n        for i in range(len(l2)):\n            common.append(common[-l1:] + l1[i:])\n    else:\n        for i in range(len(l1)):\n            for j in range(len(l2)):\n                if l1[i] == l2[j]:\n                    common.append(i)\n    return sorted(common)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # common lists are guaranteed to be unique\n    return [pair for pair in l1 if pair not in l2]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise IndexError(\"Lists must have the same length\")\n    if len(l1)!= len(l2):\n        raise TypeError(\"Lists must have the same length\")\n    if l1 is None:\n        return l2\n    if len(l1)!= len(l2):\n        raise TypeError(\"Lists must have the same length\")\n\n    def common_comp(first, second):\n        try:\n            return cmp(first, second)\n        except ValueError:\n            return cmp(first, l2)\n    if l1 == l2:\n        return []\n    if l2 == l1:\n        return l1\n\n    def common_comp_first(first, second):\n        try:\n            return common_comp(first, second)\n        except ValueError:\n            return common_comp(first, l2)\n\n    def common_comp_second(second, first):\n        try:\n            return common_comp(second, first)\n        except ValueError:\n            return common_comp(second, l2)\n\n    if l1[0] == l2[0]:\n        return l1\n\n    if l1[1] == l2[1]:\n        return l1\n\n    if l1[2] == l2[2]:\n        return l1\n\n    if l1[3] == l2[3]:\n        return l1\n\n    if l1[4]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    for l1, l2 in zip(l1, l2):\n        if not (l1 and l2):\n            continue\n        if l1 == l2:\n            return None\n        if l1 is None:\n            return l2\n        if l1[0] == l2[0]:\n            return l1\n    return None\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(common(l1, l2)) for l1, l2 in zip(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    unique = []\n    for x in l1:\n        for y in l2:\n            if x == y:\n                continue\n            if x not in unique:\n                unique.append(x)\n            if y not in unique:\n                common.append(y)\n    return sorted(common, reverse=True)</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l = []\n    for i, e in enumerate(l1):\n        if not l2:\n            l.append(e)\n        else:\n            m = False\n            for j in range(len(l2)):\n                if e in l2[j]:\n                    m = True\n                    break\n            if not m:\n                l.append(e)\n        l.sort()\n    return l", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    unique = set()\n    for l1 in l1:\n        for l2 in l2:\n            if l1.count(l2) > 0:\n                unique.add(l1.intersection(l2))\n    return sorted(unique)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    count = 0\n    common = []\n    for e in l1:\n        for e2 in l2:\n            if e not in common and e2 not in common:\n                common.append(e)\n                count += 1\n        if count == 2:\n            return common\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    n = len(l1)\n    if n > len(l2):\n        return None\n    left = []\n    right = []\n    for i, elem in enumerate(l1):\n        if elem not in l2:\n            right.append(elem)\n            continue\n        right.append(elem if elem in l2[-i] else elem)\n        left.append(elem)\n    for elem in left + right + l2:\n        return elem if elem not in l1 else elem\n    return None", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    L = []\n    U = []\n    for x in l1:\n        for y in l2:\n            if x in y:\n                L.append(x)\n                U.append(y)\n    return sorted(L) - sorted(U)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        return False\n\n    i = 0\n    for l1item in l1:\n        for l2item in l2:\n            if l1item!= l2item:\n                continue\n            elif l1item == l2item:\n                continue\n            else:\n                l1item, l2item = l1item, l2item\n                i = i + 1\n\n    return [i for i in common(l1, l2)][0]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def common_root(l):\n        \"\"\"Return root common elements from `l`.\"\"\"\n        return [x for x in l if x is not None and x not in l]\n\n    def common_tail(l: list):\n        \"\"\"Return unique common elements from `l`.\"\"\"\n        return [x for x in l if x is not None and x not in l]\n\n    return sorted(common_root(l) for l in l1 + l2, key=common_tail)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l = []\n    for x in l1:\n        for y in l2:\n            if x == y:\n                l.append(x)\n        else:\n            l.append(x)\n    return sorted(l)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(common(l1, l2)) - set(l2), key=lambda e: e[1]) if l1 else l2", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise ValueError(\"Lists must have same length\")\n\n    common = {}\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] == l2[j]:\n                common[l1[i]] = l2[j]\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    _, start = common(l1, l2)\n    return l1.sort(cmp=lambda x, y: cmp(start, x)) - l2.sort(cmp=lambda x, y: cmp(start, x))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return l1\n    else:\n        return zip(*sorted(common(l1, l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    sorted_common = []\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                sorted_common.append(e1)\n    return sorted(sorted_common)\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(l1) - sorted(l2)\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(filter(lambda x: x in l1 and x in l2, l1) - filter(lambda x: x in l2, l1), key=lambda x: x)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l2 = set(l2)\n    l2.update(L1)\n    L2 = set(L1)\n    L2.update(L2)\n\n    return sorted(l2.difference(L2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [a for a in l1 if a in l2 and a not in l1]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if l1 == l2:\n        return l1\n    if l1 is None:\n        return l2\n    l = sorted(l1)\n    r = sorted(l2)\n    for i in range(len(l)):\n        if l[i] in r:\n            return i\n    return len(l)-1", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if l1 == l2:\n        return []\n    if l1.__len__() == 0:\n        return l1\n\n    common_lst = []\n    for e in l1:\n        for e in l2:\n            if e in common_lst:\n                continue\n            if e in common_lst:\n                common_lst.append(e)\n            else:\n                common_lst.append(e)\n\n    return common_lst", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for i, j in enumerate(l1):\n        if not common.has_key(j):\n            common[j] = [i for i in l1 if common.get(i)]\n    for i, j in enumerate(l2):\n        if not common.has_key(j):\n            common[j] = [i for i in l2 if common.get(i)]\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    unique_list = set()\n    for elem in l1:\n        for elem in l2:\n            if elem in unique_list:\n                continue\n            unique_list.add(elem)\n    return sorted(unique_list)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_key = {}\n    for l1 in l1:\n        for l2 in l2:\n            if l1 == l2:\n                continue\n            if l2 not in common_key:\n                common_key[l2] = 1\n            else:\n                common_key[l2] += 1\n    return sorted(common_key.items(), key=lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return [list(common(a, b)) for a, b in zip(l1, l2)]\n    else:\n        if len(l1) < len(l2):\n            return l1\n        else:\n            if len(l2) < len(l1):\n                return l2\n            else:\n                return l1[:len(l2)] + l2[:len(l1)]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l2) == 1:\n        l1 = l2[0]\n    else:\n        if l1[0] not in l2:\n            l1, l2 = l1[1:], l2[::2]\n\n    for l1, l2 in zip(l1, l2):\n        if l1 in l2:\n            return True\n    return False", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(L1) < len(L2):\n        return []\n    elif len(L1) == len(L2):\n        return [item for item in common(L1, L2)]\n    else:\n        return sorted(L1, cmp=lambda a, b: cmp(len(a), len(b)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    for i in xrange(len(l1)):\n        for j in xrange(len(l2)):\n            if l1[i] < l2[j]:\n                break\n    if j == len(l2):\n        return l1\n    else:\n        return l2", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_list = []\n    for el in lists:\n        if el not in common_list:\n            common_list.append(el)\n\n    return sorted(common_list)</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(l1, key=lambda el: el[1] or el[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1 = sorted(l1)\n    l2 = sorted(l2)\n\n    # Returns unique elements in both lists. The first element of the common list\n    # is ignored.\n    common_elements = [el for el in l1 if el not in l2]\n    common_elements = [el for el in l2 if el not in l1]\n\n    return common_elements\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Note that the order in which we iterate over the lists is not\n    # guaranteed to be unique.\n    # If you want to do this with a tuple, you should have a\n    # common() method that takes a tuple and returns a list of\n    # unique elements.\n    i = 0\n    for l in l1:\n        if l not in l2:\n            i += 1\n            continue\n        l = common(l[i:], l2[i:])\n        i += 1\n        if i > len(l):\n            break\n\n    return [i for i, l in enumerate(l1)]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def common_self(l1: list, l2: list):\n        \"\"\"Return sorted unique common elements for two lists.\n        >>> common_self([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common_self([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        \"\"\"\n        if len(l1) == len(l2):\n            return l1\n        if len(l1) == 0:\n            return l2\n        if len(l2) == 0:\n            return l1\n        if len(l1) < len(l2):\n            return common_self(l1[1:], l2[:-1])\n        else:\n            return l1\ncommon_self = common_self", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l = []\n    i = 0\n    for x in l1:\n        if x not in l2:\n            l.append(x)\n            i += 1\n    while i:\n        x = l[i - 1]\n        if x in l2:\n            l.pop()\n        i -= 1\n    return l", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    tmp1 = []\n    tmp2 = []\n    for el1, el2 in zip(l1, l2):\n        tmp1 += el1\n        tmp2 += el2\n    tmp1.sort()\n    tmp2.sort()\n    return tmp1, tmp2", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(L1) == len(L2):\n        return [e] for e in L1 if L2.count(e) > 0 else L2\n    return sorted(L1, key=lambda e2: e2.count(e2)) + sorted(L2, key=lambda e2: e2.count(e2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    k = {}\n    if len(L1) == len(L2):\n        return\n    for i in range(len(L1)):\n        for j in range(len(L2)):\n            if L1[i] == L2[j]:\n                k[i, j] = 1\n    for i in range(len(L1)):\n        for j in range(len(L1)):\n            if L1[i] == L2[j]:\n                k[i] += k[j]\n        if L1[i]!= L2[j]:\n            k[i] = k[j]\n    for i in range(len(L1)):\n        for j in range(len(L1)):\n            if L1[i] == L2[j]:\n                k[i] = k[j]\n    return sorted(k.items())", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise ValueError(\"The lists do not share the same number of elements\")\n    for i in xrange(len(l1)):\n        if l1[i]!= l2[i]:\n            continue\n        for j in xrange(len(l1[i])):\n            if l1[i][j]!= l2[i][j]:\n                continue\n            if l1[i][j][k]!= l2[i][j][k:\n                continue\n            if l1[i][j][k][l]!= l2[i][j][k][l]:\n                continue\n            if l1[i][j][k][l][m]!= l2[i][j][k][l][m]:\n                continue\n            if l1[i][j][k][l][m][n]!= l2[i][j][k][l][m][n]:\n                continue\n            if l1[i][j][k][l][m][n][o]!= l2[i][j][k][l][m][n][o]:\n                continue\n            if l1[i][j][k][l][m][n][o][p]!= l2[i][j][k][l][m][n][o][p]:\n                continue\n            if l1[i][j][k][l][m][n][o][p][", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Python's built-in compare() function, which is guaranteed to return a\n    # single element if they're equal, even though they're not.\n    # See: http://stackoverflow.com/questions/9474843/how-to-return-the-best-match-algorithm-in-python\n    # See: http://www.ipython.org/display/Python/Comparisons\n\n    def ioremap(l, r):\n        \"Insert elements from list l1 to list l2, yielding ordered elements of\n        lists l1 and l2.\"\n        i1 = 0\n        i2 = len(l1) - 1\n        for i in range(i1, i2, -1):\n            i1 = i1 + 1\n            i2 = i2 - 1\n            r.append(l1[ix])\n        r.append(l2[ix])\n        return r\n\n    def getcomp(l1, l2):\n        \"Return the common list of elements between lists l1 and l2.\"\n        i1 = 0\n        i2 = len(l1) - 1\n        for i in range(i1, i2, -1):\n            i1 = i1 + 1\n            i2 = i2 - 1\n            if l1[i1] == l2[i2]:\n                return i\n            else:\n                return iremap(l1, l2)\n\n    def cmp(", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # total number of common elements\n    n = len(l1) - len(l2)\n    if n < 0:\n        return l2\n    # sort in order of length, ascending\n    # lsort should be a list of lists\n    return [common(s, t1) for t1, s in zip(l1, l2)]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if not l1:\n        return []\n    if not l2:\n        return l1\n    return sorted(list(common(x1, x2) for x1, x2 in zip(x1, x2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Sort by list lengths\n    l1 = [l1[i] for i in xrange(len(l1))]\n    l2 = [l2[i] for i in xrange(len(l2))]\n    result = [common(l1[i], l2[i]) for i in xrange(len(l1))]\n\n    # Sort by list lengths\n    result.sort(key=lambda x: x[1])\n    return result\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    i1 = []\n    i2 = []\n    common = []\n    for i, v in enumerate(v1):\n        i1.append(i)\n        i2.append(v)\n    for i, v in enumerate(v2):\n        if i in i1:\n            common.append(i)\n        if i in i2:\n            common.append(v)\n    return sorted(common)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if l1 == l2:\n        return []\n    elif l1 == [] and l2 == []:\n        return []\n    elif l1 == [] and l2 in l1:\n        return []\n    elif l1 == [] and l2 in l2:\n        return l1\n    elif l1 and l2 and l1.__contains__(l2):\n        return l1\n    elif l1 and l2 and l1.__contains__(l1):\n        return l2\n    elif l2 and l1 and l2.__contains__(l1):\n        return l1\n    elif l2 and l1 and l2.__contains__(l2):\n        return l2\n    elif l1 and l2 and l1.__contains__(l2):\n        return l2\n    elif l2 and l1 and l2.__contains__(l1):\n        return l1\n    elif l2 and l1 and l2.__contains__(l2):\n        return l2\n    else:\n        return []", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # print(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    # print(common([5, 3, 2, 8], [3, 2]))\n    def sort_and_sym(a, b: list):\n        if a is None:\n            return b\n        if b is None:\n            return a\n        if a < b:\n            return sorted(a)\n        return sorted(b)\n\n    # print(sorted(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])))\n    # print(sorted(common([5, 3, 2, 8], [3, 2])))\n    def sort_and_sym(a, b: list):\n        if a is None:\n            return b\n        if b is None:\n            return a\n        if a < b:\n            return sorted(a)\n        return sorted(b)\n\n    # print(sorted(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])))\n    # print(sorted(common([5, 3, 2, 8], [3", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([e for e in l1 if e in l2])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == 0:\n        return l1\n    elif len(l2) == 0:\n        return l2\n    else:\n        l1 = l1[:]\n        l2 = l2[:]\n        return _sort_unique(l1, l2) # return sorted unique common elements\n\n    _sort_unique(l1, l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    n = len(l1)\n    if n > len(l2):\n        return l1\n    if n == len(l2):\n        return l2\n\n    common_l1 = list()\n    common_l2 = list()\n    for i, elem in enumerate(l2):\n        if elem not in common_l1 or elem not in common_l2:\n            common_l1.append(elem)\n            common_l2.append(elem)\n\n    common_l = common_l1 + common_l2\n    return common_l", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l = l1\n    if len(l)!= len(l2):\n        raise ValueError(\"expected lists with identical length, got %s\" % l1)\n    # Sort the lists.  We're going to use the already sorted keys\n    # as our indices.\n    sortedkeys = []\n    for k in l1:\n        if k not in sortedkeys:\n            sortedkeys.append(k)\n    for k in l2:\n        if k not in sortedkeys:\n            sortedkeys.append(k)\n    for k in sortedkeys:\n        if k in sortedkeys[1:-1]:\n            continue\n        if k in sortedkeys[1:-1]:\n            l.sort(key=k)\n            return l\n        l.append(k)\n    return []", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return common(list(l1) + list(l2), set(l1) - set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # When len(l1) > len(l2) there may be duplicates\n    # in the returned list, which should be removed.\n    for i, element in enumerate(l1):\n        if i in l2:\n            l2[l] = l2[i - len(l1)]\n            l1.pop()\n            if len(l1) == 0:\n                break\n    return l1", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l2) == len(l1):\n        return [element for element in l1 if element in l2]\n    else:\n        diff = set()\n        for element in l1:\n            if element in l2:\n                diff.add(element)\n        for element in l2:\n            if element not in diff:\n                diff.add(element)\n        return sorted(diff)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == 0:\n        return l1\n\n    l1.sort()\n    l2.sort()\n    return common(l1, l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = set()\n    for l1 in l1:\n        for l2 in l2:\n            if l1 in common and l2 not in common:\n                common.add(l1)\n                common.add(l2)\n    return common.difference(common)</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def _common(self, lst):\n        return list(set(lst) - set(self._items))\n\n    def _items(self):\n        return [self]\n\n    def __lt__(self, other):\n        \"\"\"Return true if list1 has fewer elements than list2.\"\"\"\n        if len(self) > len(other):\n            return True\n        else:\n            return self._common(other) < self._common(self)\n\n    def __gt__(self, other):\n        \"\"\"Return true if list1 has more elements than list2.\"\"\"\n        if len(self) > len(other):\n            return True\n        else:\n            return self._common(other) > self._common(self)\n\n    def __eq__(self, other):\n        \"\"\"Return true if lists are equal.\"\"\"\n        if len(self) == len(other):\n            return True\n        else:\n            return self._common(other) == self._common(self)\n\n    def __ne__(self, other):\n        \"\"\"Return true if lists are not equal.\"\"\"\n        return not self == other\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def common2(l1: list, l2: list):\n        \"\"\"Return sorted unique common elements for two lists.\n        >>> common2([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653, 121]\n        >>> common2([5, 3, 2, 8], [3, 2])\n        [2, 3]\n\n        \"\"\"\n        common = sorted(list(common(l1, l2)))\n        unique = [e for e in common if e not in l2]\n        return unique\n\n    l = []\n    for e1 in common2:\n        l.append(e1)\n    l.sort()\n    for e2 in common2:\n        l.append(e2)\n    return l", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    k = 0\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            k += 1\n    return sorted([k for k in range(len(l1)) if l1[k] in l2])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return list(common(l1, l2))\n    elif l1 is None:\n        return list(common(l2, l1))\n    else:\n        return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(zip(*list(common(l1, l2)))))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    elements = set(l1)\n    elements.update(l2)\n    return sorted(elements)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l = list(l) # converting to a list\n\n    for i in range(len(l)):\n        common(l[i:], l[:i])\n\n    return l", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = []\n    for i, j in zip(l1, l2):\n        if j in result:\n            continue\n        if i in result:\n            result.append(i)\n        result.sort()\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if not list(L1).issuperset(L2):\n        return L1\n\n    out = []\n    for e in xrange(0, len(L1)):\n        out.append(L1[e])\n        out.sort()\n\n    for e in xrange(0, len(L2)):\n        out.append(L2[e])\n        out.sort()\n\n    return out", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list()\n    for elem1, elem2 in zip(l1, l2):\n        if elem1!= elem2:\n            common += [elem1]\n    return sorted(common)</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1).intersection(set(l2)), key=lambda e: e.count())", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    if len(l1) == len(l2):\n        for i, v in enumerate(l1):\n            for j, w in enumerate(l2):\n                if v == w:\n                    common.append(i)\n    else:\n        for i, v in enumerate(l1):\n            for j, w in enumerate(l2):\n                if v < w:\n                    common.append(i)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    try:\n        key = common(l1, l2)\n    except KeyError:\n        return l1\n\n    try:\n        key = common(l1, key)\n    except KeyError:\n        return key\n\n    if key in l1:\n        return l1\n    else:\n        return l2", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    list1 = [g for g in l1 if g in l2]\n    list2 = [g for g in l2 if g in l1]\n    return sorted(common(list1, list2))"]]