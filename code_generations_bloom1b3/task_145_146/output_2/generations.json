[["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort list of integers by sum of digits\n    for num in nums:\n        num = int(num)\n        if num > 0:\n            return num\n    return 0", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: x, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # convert to list\n    nums = sorted(nums, key=lambda num: int(num))\n    # sort in ascending order\n    return [int(n) for n in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n\n    # Create a list of sorted integers\n    nums = [int(x) for x in nums]\n    nums = sorted(nums, key=lambda x: x[1])\n    # Return the sorted list\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda num: int(num) + 1)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n\n    sorted = sorted(nums, key=lambda num: num.sum())\n    return sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted_list(lst):\n        return sorted(lst, key=lambda x: x.sum(), reverse=True)\n\n    def sorter(lst):\n        \"\"\"\n        Sorts the given list of integers in ascending order.\n        \"\"\"\n        return sorted(lst, key=lambda x: x.sum(), reverse=False)\n\n    def cmp(a, b):\n        \"\"\"\n        Returns the sum of their digits. This is a quick and dirty\n        version of the same thing as cmp(x, y) but with a more precise\n        implementation.\n        \"\"\"\n        return cmp(a.sum(), b.sum())\n\n    def order(lst):\n        \"\"\"\n        Sorts the given list of integers in ascending order.\n        \"\"\"\n        return sorted(lst, key=lambda x: cmp(x, 0), reverse=True)\n\n    def sorted(lst):\n        \"\"\"\n        Sorts the given list of integers in ascending order.\n        \"\"\"\n        return sorted(lst, key=lambda x: cmp(x, 0), reverse=False)\n\n    def sorted_sorted(lst):\n        \"\"\"\n        Sorts the given list of integers in ascending order and\n        then sorts the result using a second function.\n        \"\"\"\n        return sorted(lst, key=lambda x: cmp(x, 0), reverse=False,", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def reorder(lst):\n        return [(x, i) for x, i in enumerate(lst)]\n\n    return lambda x: sorted(reorder(x), key=lambda x: x[1], reverse=False)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def rec(i, j):\n        if i < j:\n            return (i, j)\n        else:\n            return (j, i)\n    return sorted([rec(i, j) for i, j in enumerate(nums)], reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if isinstance(nums, int):\n        return [nums]\n    if isinstance(nums, list):\n        return [nums[0] + nums[-1]]\n    if isinstance(nums, tuple):\n        return [nums[0] + nums[-1]] + [nums[1]]\n    if isinstance(nums, dict):\n        return [nums[0] + nums[-1]] + [nums[1]]\n    return [nums[0] + nums[-1]] + sorted(nums, key=lambda x: x.count('0') or x.count('1'))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        def _sort(num):\n            \"\"\"\n            Sort the given list of integers in ascending order according to the sum of their digits.\n            \"\"\"\n            return int(num) < int(nums[-1])\n        return sorted(nums, key=_sort)[0]\n\n    return _order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = [int(i) for i in nums]\n    nums.sort()\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n    if nums[0] == 0:\n        return nums\n    if nums[1] == 0:\n        return nums\n    if nums[2] == 0:\n        return nums\n    return [nums[i:i + 3] for i in range(0, len(nums), 3)]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    nums = sorted(nums, key=lambda x: x.sum(), reverse=True)\n    return [(x, len(x)) for x in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n\n    def _sort(a, b):\n        \"\"\"\n        Return the index of the first occurrence of a in b.\n        \"\"\"\n        return cmp(a.count(b), b.count(a))\n\n    def _sort_between(a, b):\n        \"\"\"\n        Return the index of the first occurrence of a in b, starting\n        from the end of the list.\n        \"\"\"\n        if len(b) > len(a):\n            return a.index(b[-1])\n        else:\n            return b.index(a[-1])\n\n    def _sort_ascending(a):\n        \"\"\"\n        Return the index of the first occurrence of a in a.\n        \"\"\"\n        return 0\n\n    def _sort_descending(a):\n        \"\"\"\n        Return the index of the first occurrence of a in a, starting\n        from the end of the list.\n        \"\"\"\n        return len(a) - 1\n\n    nums = list(sorted(nums, key=lambda x: x.count(1)))\n    nums = [nums[i] for i in nums]\n\n    nums = _sort(nums, nums)\n    nums = _sort_between(nums, nums)\n    nums = _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    if total == 0:\n        return []\n    total = total % 10\n    if total < 10:\n        return [num for num in nums if total == num]\n    else:\n        return sorted(nums, key=lambda x: x - total)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(s):\n        \"\"\"\n        Sort the given list of integers according to their sum of their\n        digits.\n        \"\"\"\n        return sorted(s, key=lambda x: int(x) + 1)\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 0:\n        return\n    nums = sorted(nums)\n    return [nums[i] + nums[-1]] for i in range(len(nums))]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def func(x):\n        return x[0] + x[1:]\n    return sorted(func(x) for x in nums)</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n\n    if nums == [-1]:\n        return [-1, -1]\n    elif nums == [11]:\n        return [-1, 11, 11]\n    elif nums == [12]:\n        return [-1, 11, -1, -11]\n    elif nums == [-1, -11]:\n        return [-1, 11, 11, -11]\n    elif nums == [-1, -11, -1]:\n        return [-1, 11, 11, -11]\n    elif nums == [-1, -11, -1, -1]:\n        return [-1, 11, 11, -11]\n    elif nums == [-1, -11, -1, -11]:\n        return [-1, 11, 11, -11]\n    elif nums == [-1, -11, -1, -11, -1]:\n        return [-1, 11, 11, -11]\n    elif nums == [-1, -11, -1, -11, -1, -1]:\n        return [-1, 11, 11, -11]\n    elif nums == [-1, -11, -1, -11, -1, -11]:\n        return [-1, 11, 11, -11]\n    elif nums == [-1, -11, -1, -11, -1, -11,", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort the list\n    sorted = []\n    for num in nums:\n        if num == 0:\n            continue\n        if num < 0:\n            nums.append(num)\n            sorted.append(num)\n            continue\n        if num > 0:\n            nums.append(num)\n            sorted.append(num)\n        else:\n            nums.append(0)\n            sorted.append(0)\n    return sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def compare(a, b):\n        return a > b\n    nums = sorted(nums, key=lambda x: compare(x, x+1))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return\n    # Convert the list of integers to a sorted list.\n    nums = [int(x) for x in nums]\n    # Sort the list.\n    for num in nums:\n        if num > 0:\n            nums.sort(key=lambda x: x % 10)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(s):\n        \"\"\"\n        Return the list of integers in ascending order according to the\n        sum of their digits.\n        \"\"\"\n        if len(s) == 0:\n            return []\n        i = 0\n        for s in s:\n            i += len(s)\n            if i > len(s):\n                break\n        return [i for i in s]\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Use the Python standard library to sort the list.\n    # The standard library has a built-in sort function, but it\n    # is not guaranteed to be fast.\n    # The sort function is provided as a convenience for Python\n    # programmers who are not familiar with sorting functions.\n    # We need to use a different sort function for this case\n    # because the Python standard library does not provide an\n    # efficient way of sorting the list.\n    # See http://stackoverflow.com/questions/5410969/python-list-sort\n    # and http://stackoverflow.com/questions/5410969/python-list-sort\n    def sort(lst):\n        \"\"\"\n        Sort the list using a custom sort function.\n        \"\"\"\n        # Create a list of the sorted items.\n        sorted = []\n        for num in lst:\n            # Get the sum of the digits.\n            sum = num.count('0')\n            # Add the digits of the item to the sorted list.\n            sorted.append(sum)\n        # Sort the list.\n        sorted.sort()\n        # Return the sorted list.\n        return sorted\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n\n    if isinstance(nums, list):\n        return [nums, ]\n\n    nums = [nums]\n    for num in nums:\n        if num % 10 == 0:\n            nums.append(num)\n        else:\n            nums.append(num / 10)\n\n    return sorted(nums, key=lambda x: x[0])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def f(nums):\n        if isinstance(nums, list):\n            return sorted(nums, key=lambda x: x.sum())\n        elif isinstance(nums, tuple):\n            return sorted(nums, key=lambda x: x.sum())\n        else:\n            return nums.sum()\n    return f", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    if nums is None:\n        return None\n    if len(nums) == 0:\n        return None\n    if nums[0] == 0:\n        return None\n    if nums[0] == -1:\n        return None\n    return sorted(nums, key=lambda num: int(num[:-1]) + int(num[1:])), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted_by_sum(x):\n        return x[0] + x[1:]\n    return sorted_by_sum", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Return the sorted list of integers according to the sum of their digits.\n        \"\"\"\n        def _next(n):\n            return n + 1\n        nums = sorted(nums, key=_next)\n        return nums\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        if nums is None:\n            return []\n        if nums is None:\n            return nums\n        if isinstance(nums, int):\n            return nums\n        return [nums[i] for i in range(len(nums))]\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) < 2:\n        raise ValueError(\"nums must be at least 2!\")\n    if nums[0] == 0:\n        return\n    sum = 0\n    for num in nums:\n        sum += num\n    if sum > 0:\n        return [num for num in nums if sum > num]\n    else:\n        return nums\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if nums[0] == 0:\n        return []\n    if nums[0] > nums[-1]:\n        return [nums[-1]]\n    else:\n        return [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n\n    def _order_by_points(nums):\n        # Sort by sum of digits\n        nums = sorted(nums, key=lambda x: x.sum())\n        # Sort by index\n        return [int(n) for n in nums]\n\n    return _order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Returns a list of integers sorted according to the sum of\n        their digits.\n        \"\"\"\n        points = []\n        for num in nums:\n            points.append(int(num * 10 ** 6))\n        return points\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _reverse(self):\n        \"\"\"\n        Reverse the list of integers.\n        \"\"\"\n        return [i for i in self if self.count(i) > self.count(-i)]\n\n    def _reverse_order(self):\n        \"\"\"\n        Reverse the list of integers and sort it in reverse order.\n        \"\"\"\n        return _reverse(self) + [-i for i in self]\n\n    def _reverse_order_without_zero(self):\n        \"\"\"\n        Reverse the list of integers and sort it in reverse order\n        without zero.\n        \"\"\"\n        return _reverse(self) + [-i for i in self if i!= 0]\n\n    def _reverse_order_without_same(self):\n        \"\"\"\n        Reverse the list of integers and sort it in reverse order\n        without the same.\n        \"\"\"\n        return _reverse(self) + [-i for i in self if not self.count(i)]\n\n    def _reverse_order_without_same_zero(self):\n        \"\"\"\n        Reverse the list of integers and sort it in reverse order\n        without the same and zero.\n        \"\"\"\n        return _reverse(self) + [-i for i in self if not self.count(i) and i!= 0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if len(nums) == 0:\n        return nums\n    if len(nums) == 1:\n        return nums[0]\n    if sum(nums) == 0:\n        return nums\n    nums = sorted(nums, key=lambda x: sum(x))\n    return [nums[i] for i in range(len(nums))]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    elif len(nums) == 1:\n        return [nums[-1]]\n    else:\n        return sorted(nums, key=lambda x: x, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return\n    def sorted(x):\n        \"\"\"\n        Sort the given list by the sum of their digits.\n        \"\"\"\n        return sorted(x, key=lambda x: x.sum())\n\n    nums = sorted(nums, reverse=True)\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return nums[:nums.index(len(nums)-1)]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Test if there are any values with similar sum of their digits\n    nums = sorted(nums, key=lambda x: x.sum())\n\n    # Sort the original list by index\n    nums = sorted(nums, key=lambda x: x.index)\n\n    # Sort the original list by sum of their digits\n    nums = sorted(nums, key=lambda x: x.sum())\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Return a function which returns the sorted list of integers\n        in ascending order according to the sum of their digits.\n        \"\"\"\n        n = 0\n        for i in range(len(nums)):\n            n += nums[i]\n        return sorted(n, key=lambda num: int(num) / 10)\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    # If sum of digits is 0, then return original list\n    if sum(nums) == 0:\n        return nums\n    # If sum of digits is not 0, then sort the list\n    if sum(nums) > 0:\n        return sorted(nums, reverse=True)\n    # Otherwise, sort the list in ascending order\n    return sorted(nums, reverse=False)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted([sum([digits for digits in nums]) for nums in nums], key=lambda num: sum([digits for digits in nums]))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort_func(x):\n        return x.sum() - x[0]\n\n    def sort(nums):\n        return sorted(nums, key=sort_func)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(lst):\n        \"\"\"\n        Return a sorted list of integers according to the sum of their\n        digits.\n        \"\"\"\n        lst = list(lst)\n        lst.sort(key=lambda x: x.sum())\n        return lst\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums\n    if nums is None:\n        return []\n    if isinstance(nums, list):\n        return sorted(nums, key=lambda x: x[0])\n    if isinstance(nums, dict):\n        return sorted(nums.keys(), key=lambda x: x[0])\n    if isinstance(nums, int):\n        return sorted(nums, key=lambda x: int(x))\n    return sorted(nums, key=lambda x: x.count('0') + 1)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(s):\n        if len(s) == 1:\n            return s[0]\n        return s\n    return sorted(nums, key=_sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(a, b):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return cmp(sum(a), sum(b))\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for num in nums:\n        if num == 0:\n            continue\n        if num == 1:\n            return [num]\n        if num == -1:\n            return [num]\n        if num == -11:\n            return [num]\n        if num == -12:\n            return [num]\n\n    return [num for num in nums if num]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(a, b):\n        if a[0] > b:\n            return 1\n        if a[0] < b:\n            return -1\n        return 0\n    return sorted(nums, key=_sort, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if len(nums) == 0:\n        return []\n    if nums[0] < nums[-1]:\n        return [nums[0], nums[-1]]\n    elif nums[0] > nums[-1]:\n        return [nums[-1]]\n    elif nums[0] == nums[-1]:\n        return [nums[0], nums[-1]]\n    elif nums[0] == nums[-1]:\n        return [nums[0], nums[-1]]\n    else:\n        return [nums[0], nums[-1]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: x.sum(), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Return a sorted list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        # If there are no items with similar sum of their digits,\n        # order them based on their index in original list.\n        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return nums\n        else:\n            return sorted(nums, key=lambda x: x.sum())\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: x[0]) + [0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = [int(num) for num in nums]\n    return sorted(nums, key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += int(num)\n    sorted_list = sorted(nums, key=lambda x: total, reverse=False)\n    return sorted_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order(nums):\n        \"\"\"\n        Returns a list of integers sorted in ascending order according\n        to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: int(num) / 10)\n\n    return order", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        \"\"\"\n        Sort the given list of integers by sum of their digits.\n        \"\"\"\n        return x[0] + x[1:]\n    return sorted(nums, key=_sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum(x):\n        return x.sum()\n    def index(x):\n        return x.index(sum(x))\n    def sort(x):\n        return x.sort()\n    return sum, index, sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according\n        to their sum of their digits.\n        \"\"\"\n        nums = [nums[0]]\n        for num in nums:\n            if num >= 0:\n                return True\n        return False\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n\n    # If there are more than 2 items with the same sum of digits,\n    # use the index to sort them.\n    indices = [np.where(np.abs(nums[i]) > np.abs(nums[-1]))[0] for i in nums]\n\n    # The sum of digits of the first item is always 1, so we\n    # always have to add 1 to the sum of all items in the list.\n    return [sum(indices) + 1 for indices in indices]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(list):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        their sum of their digits.\n        \"\"\"\n        for i in range(len(list)):\n            if list[i] == 0:\n                continue\n            if list[i] == -1:\n                return i\n            if list[i] > 0:\n                return i + 1\n        return -1\n\n    def sort(list):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        their sum of their digits.\n        \"\"\"\n        sum = 0\n        for i in range(len(list)):\n            if list[i] == 0:\n                continue\n            if list[i] == -1:\n                return i\n            sum += list[i]\n            if list[i] > 0:\n                return i + 1\n        return -1\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    ordered_list = sorted(nums, key=lambda x: x[0])\n    return [ordered_list[i] for i in range(len(ordered_list))]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # if nums is None, return\n    if nums is None:\n        return\n    # if nums is not an iterable, return\n    if nums is None:\n        return\n    # if nums is not a sequence, return\n    if not isinstance(nums, (list, tuple)):\n        return\n    # if nums is not a sequence, return\n    if not isinstance(nums, list):\n        return\n    # if nums is not a sequence, return\n    if len(nums) == 0:\n        return\n    # if nums is not a sequence, return\n    if nums[0] == 0:\n        return\n    # if nums is not a sequence, return\n    if nums[1] == 0:\n        return\n    # if nums is not a sequence, return\n    if nums[2] == 0:\n        return\n    # if nums is not a sequence, return\n    if nums[3] == 0:\n        return\n    # if nums is not a sequence, return\n    if nums[4] == 0:\n        return\n    # if nums is not a sequence, return\n    if nums[5] == 0:\n        return\n    # if nums is not a sequence, return\n    if nums[6] == 0:\n        return\n    # if nums is not a", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return [num for num in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted_func(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        def sort_func(nums):\n            \"\"\"\n            Sort the given list of integers in ascending order according to\n            the sum of their digits.\n            \"\"\"\n            if nums == []:\n                return []\n            elif len(nums) > 1:\n                return [nums[-1] + nums[-1] for nums in nums]\n            else:\n                return [nums[0] for nums in nums]\n        return sorted_func(nums)\n    return sorted_func(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(self, nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according\n        to the sum of their digits.\n        \"\"\"\n        if nums is None:\n            return []\n        if len(nums) == 1:\n            return nums[0]\n        return [sum([digit for digit in nums if digit!= 0]) for digit in nums]\n\n    def __call__(self, nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according\n        to the sum of their digits.\n        \"\"\"\n        return [sum([digit for digit in nums if digit!= 0]) for digit in nums]\n\n    def __repr__(self):\n        \"\"\"\n        Return a string representation of the function.\n        \"\"\"\n        return \"OrderByPoints({})\".format(self.__class__.__name__)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def index(x):\n        if len(x) == 2:\n            return x[0], x[1]\n        else:\n            return x[0], x[1] + x[2]\n    return lambda x: sorted(x, key=lambda x: index(x) - 1) if x else x", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def f(x):\n        return sum(x) / len(x)\n\n    def g(x):\n        return x if x < 0 else x - 1\n\n    def h(x):\n        return x if x < 0 else x if x == 0 else x - 1\n\n    def k(x):\n        return x if x < 0 else x if x == 0 else x - 1\n\n    def l(x):\n        return x if x < 0 else x if x == 0 else x - 1\n\n    def m(x):\n        return x if x < 0 else x if x == 0 else x - 1\n\n    def n(x):\n        return x if x < 0 else x if x == 0 else x - 1\n\n    def o(x):\n        return x if x < 0 else x if x == 0 else x - 1\n\n    def p(x):\n        return x if x < 0 else x if x == 0 else x - 1\n\n    def q(x):\n        return x if x < 0 else x if x == 0 else x - 1\n\n    def r(x):\n        return x if x < 0 else x if x == 0 else x - 1\n\n    def s(x", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _order_by_points(nums):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        if nums is None:\n            return []\n        if nums[0] == 0:\n            return nums\n        if nums[1] == 0:\n            return nums\n        if nums[0] == nums[-1]:\n            return nums[:-1]\n        if nums[1] == nums[-1]:\n            return nums[:-1]\n        return _order_by_points(nums[:-1] + nums[1:])\n\n    return _order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted_by_sum(item):\n        \"\"\"\n        Order the items in the given list according to the sum of their digits.\n        \"\"\"\n        return sorted(item, key=lambda x: x.sum())\n\n    def apply(nums):\n        \"\"\"\n        Applies the function to the given list of integers.\n        \"\"\"\n        return [nums[item] for item in nums]\n\n    def __call__(nums):\n        \"\"\"\n        Calls the function on the given list of integers.\n        \"\"\"\n        for num in nums:\n            apply(nums)\n            nums[item] = nums[item].sum() + 1\n        return nums\n\n    return sorted_by_sum", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    # Get a list of integers\n    nums = [int(n) for n in nums]\n    # Get a list of sorted integers\n    sorted = []\n    for i in range(0, len(nums)):\n        if nums[i] % 2 == 0:\n            sorted.append(nums[i])\n        else:\n            sorted.append(sorted(sorted)[:i])\n    # Sort the list\n    sorted.sort()\n    return sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(a, b):\n        return cmp(sum(a), sum(b))\n    return sorted(nums, key=_sort, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted_by_points(nums):\n        \"\"\"\n        This function sorts the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        # Sort by the sum of their digits.\n        for num in nums:\n            if num < 0:\n                num += 10\n            if num > 99:\n                num -= 10\n            if num >= 10:\n                return num\n        # If there are several items with similar sum of their digits,\n        # order them based on their index in original list.\n        if nums and nums[0] > nums[-1]:\n            return [nums[0], nums[-1]]\n        return [nums[0], nums[-1]]\n\n    return sorted_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(list):\n        return sorted(list, key=lambda x: x.sum(), reverse=False)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # The number of digits of a number is the length of the\n    # number in binary representation. We need to convert this\n    # number to a string, in order to use it as a key in the\n    # dictionary.\n    digits = sum([len(x) for x in nums])\n    digits = digits // 10\n    digits = digits % 10\n    digits = digits.zfill(10)\n    digits = digits.rjust(10, '0')\n    digits = digits.ljust(10, '0')\n    # The order of the numbers is important. If we are\n    # sorting the list of integers in ascending order,\n    # we need to reverse the order of the digits.\n    return sorted([int(x) for x in nums], key=lambda x: int(x) * 10 + digits)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = [int(n) for n in nums]\n    i = 0\n    for n in nums:\n        i += 1\n        if i == len(nums):\n            return nums\n        if nums[i] < nums[[i-1]]:\n            i = i-1\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def func(nums):\n        \"\"\"\n        Returns a sorted list of integers, in ascending order,\n        based on the sum of their digits.\n        \"\"\"\n        # print(nums)\n        if len(nums) == 0:\n            return []\n        if nums[0] == 0:\n            return nums\n        nums = sorted(nums, key=lambda x: x[0])\n        if len(nums) == 1:\n            return nums[0]\n        return nums\n\n    return func", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(num.digits))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for num in nums:\n        if num < 0:\n            num = -num\n        num = int(num)\n        if num > len(nums):\n            nums.append(num)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    # Sort the list of integers in ascending order according to the sum of their digits.\n    return [int(n) for n in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] == 0 or nums[i] == int(nums[i+1]):\n            continue\n        if nums[i] < nums[i-1]:\n            if nums[i] > nums[i-1]:\n                nums[i] = nums[i-1];\n            else:\n                nums[i] = nums[i-1];\n        else:\n            nums[i] = nums[i-1];\n        nums[i] = nums[i] + int(nums[i+1]);\n    return nums;", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Determine the order of the input list.\n    i = 0\n    s = 0\n    for num in nums:\n        if num == 0:\n            i += 1\n            s += 1\n        else:\n            s += num\n            i += 1\n\n    # Write the function.\n    def order_by_points(nums):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        s = sum(num for num in nums if num!= 0)\n        i = 0\n        for num in nums:\n            if num == 0:\n                i += 1\n            else:\n                i += num\n                if i > s - 1:\n                    return [num]\n                else:\n                    return [i]\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return nums\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums\n            [nums[-1], nums[-1]] = nums[:-1], nums[:-1]\n        elif n == 3:\n            return nums[:-1], nums[-1], nums[-1]\n        elif n == 4:\n            return nums[:-1], nums[-1], nums[-1], nums[-1]\n        else:\n            return nums[:-1], nums[-1], nums[-1], nums[-1]\n\n    nums = range(0, 10)\n    for i in range(0, nums.size):\n        nums[i] += 1\n        nums.append(nums[i])\n\n    return order_by_points(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    else:\n        return sorted(nums, key=lambda n: int(n) + 1)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda x: x[0])\n    for num in nums:\n        num = int(num)\n        if num == 0:\n            continue\n        for digit in num:\n            if digit == 0:\n                continue\n            if digit == num:\n                continue\n            if digit < num:\n                num = num - 1\n            else:\n                num = num + 1\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort_by_points(lst):\n        \"\"\"\n        Sort the list of integers according to the sum of their digits.\n        \"\"\"\n        def _sort_by_sum(lst):\n            \"\"\"\n            Sort the list of integers according to the sum of their digits.\n            \"\"\"\n            if len(lst) == 0:\n                return []\n            if lst[0] == 0:\n                return lst[1:]\n            return sorted(lst, key=lambda i: i[0])\n            # return sorted(lst, key=lambda i: i[0])[1:]\n        return _sort_by_sum(lst)\n\n    nums = nums or []\n    return sorted(nums, key=lambda i: i[1], reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return None\n    if nums.count(0) == 0:\n        return None\n    if nums.count(1) == 0:\n        return nums\n    if nums.count(2) == 0:\n        return nums\n    return sorted(nums, key=lambda x: x[1])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        return sorted(nums, key=lambda x: x[0], reverse=True)\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n\n    if len(nums) == 1:\n        return [int(x) for x in nums]\n\n    if len(nums) == 2:\n        return [int(x) for x in nums[:-1]]\n\n    if len(nums) == 3:\n        return [int(x) for x in nums[:-2]]\n\n    if len(nums) == 4:\n        return [int(x) for x in nums[:-3]]\n\n    if len(nums) == 5:\n        return [int(x) for x in nums[:-4]]\n\n    if len(nums) == 6:\n        return [int(x) for x in nums[:-5]]\n\n    if len(nums) == 7:\n        return [int(x) for x in nums[:-6]]\n\n    if len(nums) == 8:\n        return [int(x) for x in nums[:-7]]\n\n    if len(nums) == 9:\n        return [int(x) for x in nums[:-8]]\n\n    if len(nums) == 10:\n        return [int(x) for x in nums[:-9]]\n\n    if len(nums) == 11:\n        return [int(x) for x in", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _order_by_points(s):\n        return sorted(s, key=lambda x: x.sum(), reverse=True)\n\n    return _order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # The order of the list is determined by its index in original list\n    # so we can easily sort the original list with it\n    # and we can use the reverse function to get the sorted version\n    # of the original list\n    return sorted(nums, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted_func(item):\n        \"\"\"\n        Sorting function which returns the sum of digits for each item.\n        \"\"\"\n        return item[0] + item[1]\n    return sorted_func", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if len(nums) == 1:\n        return [nums[0] for nums in nums]\n    else:\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort the list in ascending order according to sum of digits.\n    for num in nums:\n        if num == 0:\n            continue\n        if num < 0:\n            num += 1\n        if num < 10:\n            num += 10\n        if num < 100:\n            num += 100\n        if num < 1000:\n            num += 1000\n        if num < 10000:\n            num += 10000\n        if num < 100000:\n            num += 100000\n        if num < 1000000:\n            num += 1000000\n        if num < 100000, 1000000:\n            num += 100000, 1000000\n        if num < 1000000000:\n            num += 1000000000\n        if num < 1000000000, 1000000000:\n            num += 1000000000\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # This function uses the following algorithm:\n    #  1. Sort the list of numbers by their sum of their digits.\n    #  2. If the list of numbers has a non-empty element, order it by its index.\n    #  3. If the list of numbers has no non-empty element, order it by its sum of digits.\n    #  4. If the list of numbers has a non-empty element and its sum of digits is zero,\n    #    order it by its sum of digits.\n    #  5. If the list of numbers has a non-empty element and its sum of digits is greater than zero,\n    #    order it by its sum of digits.\n    #  6. If the list of numbers has a non-empty element and its sum of digits is less than zero,\n    #    order it by its sum of digits.\n    #  7. If the list of numbers has a non-empty element and its sum of digits is equal to zero,\n    #    order it by its sum of digits.\n    #  8. If the list of numbers has a non-empty element and its sum of digits is equal to the sum of the digits of the\n    #    first element of the list, order it by its sum of digits.\n    #  9. If the", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Returns the sorted list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        nums = [num for num in nums]\n        return sorted(nums, key=lambda num: int(num) - int(num) % 10)\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Determine the total sum of the digits.\n    total = sum([digit for digit in nums])\n\n    # Sort the list in ascending order.\n    for num in nums:\n        if total < num:\n            nums.sort(key=lambda x: total - x)\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda x: x.sum())\n    return sum(x for x in nums) / len(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(list):\n        # FIXME: remove this function\n        return sorted(list, key=lambda x: x.sum(), reverse=True)\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # create an empty list\n    new_list = []\n    # loop through the numbers\n    for num in nums:\n        # add the digit to the new list\n        new_list.append(num.digit())\n\n    # sort the new list\n    new_list.sort(key=lambda x: x.digit())\n\n    # return the sorted list\n    return new_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    n = len(nums)\n    if n == 0:\n        return []\n    if n == 1:\n        return [nums[0] for nums in nums]\n    # split into groups of n digits each\n    groups = [nums[i:i+n] for i in range(n, n+n)]\n    # sort the groups\n    return sorted(groups, key=lambda x: x[0], reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def __cmp__(a, b):\n        \"\"\"\n        Return 0 if a < b, otherwise return 1.\n        \"\"\"\n        a = int(a)\n        b = int(b)\n        return (a < b) and (abs(a) < abs(b))\n    return cmp", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers.\n        \"\"\"\n        if len(nums) == 1:\n            return nums[0]\n        elif len(nums) == 2:\n            return [nums[0], nums[1]]\n        elif len(nums) == 3:\n            return [nums[0], nums[1], nums[2]]\n        elif len(nums) == 4:\n            return [nums[0], nums[1], nums[2], nums[3]]\n        elif len(nums) == 5:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n        elif len(nums) == 6:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]\n        elif len(nums) == 7:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]]\n        elif len(nums) == 8:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7]]\n        else:\n            raise ValueError('invalid", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted_list(l):\n        \"\"\"\n        Return a sorted list of the items in l. Return the last item in\n        the list, if there is one.\n        \"\"\"\n        if len(l) == 0:\n            return l[-1]\n        else:\n            return sorted(l, key=lambda x: x[0], reverse=True)\n\n    def sorted_list_ignoring_sum(l):\n        \"\"\"\n        Return a sorted list of the items in l. Return the last item in\n        the list, if there is one.\n        \"\"\"\n        if len(l) == 0:\n            return l[-1]\n        else:\n            return sorted(l, key=lambda x: x[0], reverse=False)\n\n    def sorted_list_with_sum(l):\n        \"\"\"\n        Return a sorted list of the items in l. Return the last item in\n        the list, if there is one.\n        \"\"\"\n        if len(l) == 0:\n            return l[-1]\n        else:\n            return sorted(l, key=lambda x: x[0], reverse=True)\n\n    return sorted_list, sorted_list_ignoring_sum, sorted_list_with_sum", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n    if len(nums) == 1:\n        return [nums[0]]\n    if sum(nums) == 0:\n        return []\n    return sorted(nums, key=lambda x: sum(x), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(lst):\n        \"\"\"\n        Sorts the given list of integers in ascending order.\n        \"\"\"\n        def _sort2(lst):\n            \"\"\"\n            Sorts the given list of integers in ascending order.\n            \"\"\"\n            def _sort3(lst):\n                \"\"\"\n                Sorts the given list of integers in ascending order.\n                \"\"\"\n                def _sort4(lst):\n                    \"\"\"\n                    Sorts the given list of integers in ascending order.\n                    \"\"\"\n                    def _sort5(lst):\n                        \"\"\"\n                        Sorts the given list of integers in ascending order.\n                        \"\"\"\n                        def _sort6(lst):\n                            \"\"\"\n                            Sorts the given list of integers in ascending order.\n                            \"\"\"\n                            def _sort7(lst):\n                                \"\"\"\n                                Sorts the given list of integers in ascending order.\n                                \"\"\"\n                                def _sort8(lst):\n                                    \"\"\"\n                                    Sorts the given list of integers in ascending order.\n                                    \"\"\"\n                                    def _sort9(lst):\n                                        \"\"\"\n                                        Sorts the given list of integers in ascending order.\n                                        \"\"\"\n                                        def _sort10(lst):\n                                            \"\"\"\n                                            Sorts the given list of integers in ascending order.\n                                            \"\"\"\n                                            def _sort11(lst):\n                                                \"\"\"", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n\n    nums = [int(x) for x in nums]\n    nums = sorted(nums, key=lambda x: x[0])\n\n    nums.reverse()\n    nums = [int(x) for x in nums]\n    nums = [(x - 1) for x in nums]\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        # The following code is copied from the Python standard library\n        # function sorted.sort, which is available in Python 2.x\n        def sort_func(a, b):\n            \"\"\"\n            Compare two integers using the Python standard library\n            function sorted.sort(). The comparison is done\n            by comparing the sum of their digits.\n            \"\"\"\n            if a is None:\n                return -1\n            if b is None:\n                return 1\n            if a > b:\n                return 1\n            return a - b\n        return sorted(lst, key=sort_func)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(s):\n        \"\"\"\n        Returns a sorted list of the given integer.\n        \"\"\"\n        return sorted(s, key=lambda x: x.sum())\n\n    def _sort_numbers(s):\n        \"\"\"\n        Returns a sorted list of the given integer.\n        \"\"\"\n        return sorted(s, key=lambda x: x.sum())\n\n    def _sort_indices(s):\n        \"\"\"\n        Returns a sorted list of the given integer.\n        \"\"\"\n        return sorted(s, key=lambda x: x.sum())\n\n    def _sort_points(s):\n        \"\"\"\n        Returns a sorted list of the given integer.\n        \"\"\"\n        return sorted(s, key=lambda x: x.sum())\n\n    def _sort_compare(s):\n        \"\"\"\n        Returns a sorted list of the given integer.\n        \"\"\"\n        return sorted(s, key=lambda x: x.sum())\n\n    def _sort_asc(s):\n        \"\"\"\n        Returns a sorted list of the given integer.\n        \"\"\"\n        return sorted(s, key=lambda x: x.sum())\n\n    def _sort_desc(s):\n        \"\"\"\n        Returns a sorted list of the given integer.\n        \"\"\"\n        return sorted(s, key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sum = 0\n    for i in range(nums):\n        sum += i\n    sorted = []\n    for i in range(nums):\n        if i < sum:\n            sorted.append(i)\n        else:\n            sorted.append(sum)\n    return sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Python's built-in sorting algorithm:\n    #     sort(s, left = False, right = False)\n    #     sort(s, left = True, right = True)\n    #     sort(s, left = False, right = True)\n    #     sort(s, left = True, right = False)\n    #     sort(s, left = False, right = False)\n    #     sort(s, left = True, right = True)\n    #     sort(s, left = False, right = False)\n    #     sort(s, left = True, right = True)\n    #     sort(s, left = False, right = True)\n    #     sort(s, left = True, right = False)\n    #     sort(s, left = True, right = True)\n    #     sort(s, left = False, right = True)\n    #     sort(s, left = True, right = True)\n    #     sort(s, left = False, right = False)\n    #     sort(s, left = True, right = True)\n    #     sort(s, left = False, right = True)\n    #     sort(s, left = True, right = True)\n\n    def __init__(self, nums):", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Order the integers based on their sum of their digits\n    points = [int(i) for i in nums]\n    points.sort()\n    return points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def func(i):\n        \"\"\"\n        Return the sum of the digits of i, in ascending order.\n        \"\"\"\n        return sum([i % 10 for i in range(0, 10, -1)])\n    return func", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    if isinstance(nums, int):\n        return [nums]\n    if not isinstance(nums, list):\n        return nums\n    return sorted(nums, key=lambda x: int(x) * 10)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def compare(a, b):\n        return a[0] - b[0]\n\n    def add_digits(num):\n        return num * 10\n\n    def add_digits(num, digits):\n        if digits > 0:\n            return num * 10 + add_digits(num)\n        else:\n            return num * 10\n\n    def add_digits(num, digits, add_digits):\n        if digits > 0:\n            return num * 10 + add_digits(num)\n        else:\n            return num * 10 + add_digits(num, digits)\n\n    return sorted(nums, key=compare)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sum(lst):\n        \"\"\"\n        Sums up the digits of each element in the list.\n        \"\"\"\n        return sum(lst)\n\n    def _index(lst):\n        \"\"\"\n        Returns the index of the first occurrence of the given element.\n        \"\"\"\n        for i in range(len(lst)):\n            if lst[i] == lst[i-1]:\n                return i\n        return -1\n\n    def _reverse(lst):\n        \"\"\"\n        Reverses the order of the given list.\n        \"\"\"\n        return sorted(lst, key=lambda x: x, reverse=True)\n\n    def _sort(lst):\n        \"\"\"\n        Sorts the given list.\n        \"\"\"\n        if len(lst) == 0:\n            return\n        _sum(lst)\n        _index(lst)\n        _reverse(lst)\n        _sort(lst)\n\n    if len(nums) == 0:\n        return\n    _sum(nums)\n    _index(nums)\n    _reverse(nums)\n    _sort(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sum = 0\n    for num in nums:\n        sum += num\n    sum = sum / len(nums)\n    for num in nums:\n        if sum < num:\n            num = num\n            continue\n        if sum > num:\n            num = num - sum\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort the list\n    result = []\n    for num in nums:\n        result.append(num)\n    # Order the sorted list\n    result.sort()\n    return result\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # We start at the first item in the original list\n    if len(nums) > 1:\n        nums = sorted(nums, key=lambda x: x.sum(), reverse=True)\n    # Then we iterate through the rest of the list\n    for num in nums:\n        # Then we calculate the sum of all digits of this item\n        num_sums = []\n        for digit in num:\n            num_sums.append(digit.sum())\n        # We sort the list based on the sum of their digits\n        nums = sorted(nums, key=lambda x: num_sums, reverse=True)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort the list of integers\n    nums.sort()\n    # Get the sum of the digits of each item\n    sum = 0\n    for num in nums:\n        sum += num\n    # Return the sorted list of integers\n    return [num for num in nums if sum > num]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)[:1]\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort the list by sum of their digits\n    def new_sort(lst):\n        \"\"\"\n        Function to sort the given list of integers\n        in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(lst, key=lambda x: x.sum(), reverse=True)\n\n    # Reverse the list\n    lst = reversed(lst)\n    # Return the new sorted list\n    return [new_sort(i) for i in lst]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted_by_sum(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of\n        their digits.\n        \"\"\"\n        # The order of the list is important here, because we want to keep\n        # the original list in place.\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)\n\n    def first_and_last(nums):\n        \"\"\"\n        Return the first and last items in the list of integers,\n        respectively.\n        \"\"\"\n        return [item for item in nums if item!= 0]\n\n    def first(nums):\n        \"\"\"\n        Return the first item in the list of integers.\n        \"\"\"\n        return first_and_last(nums)[0]\n\n    def last(nums):\n        \"\"\"\n        Return the last item in the list of integers.\n        \"\"\"\n        return first_and_last(nums)[-1]\n\n    return sorted_by_sum", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by(self, num):\n        \"\"\"\n        Sort the given list of integers according to the sum of their digits.\n        \"\"\"\n        if num == 0:\n            return 0\n        return sum([int(n) for n in num])\n\n    def order_by_points(self, nums):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        nums = sorted(nums, key=lambda x: x[0])\n        return self.order_by(nums)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def __str__(self):\n        return '{}({})'.format(self.__class__.__name__, ', '.join(str(n) for n in self))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def func(n):\n        return sum(n) / len(n)\n\n    def _sort(a, b):\n        return a[0] > b[0]\n\n    if nums is not None:\n        nums = list(nums)\n        nums.sort()\n        for num in nums:\n            func(num)\n            _sort(num, num)\n\n    return func", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    # There is no point in sorting if there are no items.\n    if len(nums) == 0:\n        return\n    # The number of items to sort is given by nums.size().\n    nums = [int(x) for x in nums]\n    nums.sort(key=lambda x: x.count('1'))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n    nums = sorted(nums, key=lambda x: x[0])\n    if nums == []:\n        return nums\n    if len(nums) == 1:\n        return nums\n    return [sum(x) for x in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return None\n\n    def __mul__(self, num):\n        return self.__class__(sum([num] * len(self)), self.__class__)\n\n    def __eq__(self, other):\n        return self.__class__ == other.__class__\n\n    def __ne__(self, other):\n        return not self.__eq__(other)\n\n    def __add__(self, other):\n        return self.__class__(self.__class__ + other)\n\n    def __sub__(self, other):\n        return self.__class__(self.__class__ - other)\n\n    def __mul__(self, num):\n        return self.__class__(self.__class__ * num)\n\n    def __rmul__(self, num):\n        return self.__class__(self.__class__ / num)\n\n    def __div__(self, num):\n        return self.__class__(self.__class__ / num)\n\n    def __truediv__(self, num):\n        return self.__class__(self.__class__ / num)\n\n    def __floordiv__(self", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # This is a little hack to make sure that the number of digits is\n    # a power of two. If the number of digits is not a power of two, then\n    # the function will fail to sort the list of integers.\n    if nums.count(0) == 0:\n        return []\n\n    nums = map(int, nums)\n    nums = sorted(nums)\n\n    # This is a little hack to make sure that the sum of the digits is a\n    # power of two. If the sum of the digits is not a power of two, then\n    # the function will fail to sort the list of integers.\n    if nums.count(0) == 0:\n        return []\n\n    # This is a little hack to make sure that the sum of the digits is a\n    # power of two. If the sum of the digits is not a power of two, then\n    # the function will fail to sort the list of integers.\n    if nums.count(0) == 0:\n        return []\n\n    return [nums[i] for i in range(0, len(nums), 2)]\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(l):\n        \"\"\"\n        Sort the list by the sum of their digits.\n        \"\"\"\n        return sorted(l, key=lambda x: x[0])\n\n    def _get_index(n):\n        \"\"\"\n        Get the index of the sum of digits of the given integer.\n        \"\"\"\n        return _sort(n).index(n)\n\n    def _get_next(n):\n        \"\"\"\n        Get the next integer in the list which has the same sum of\n        digits as the given integer.\n        \"\"\"\n        return _sort(_get_index(n) + 1).next()\n\n    def _get_next_sorted(n):\n        \"\"\"\n        Get the next integer in the list which has the same sum of\n        digits as the given integer.\n        \"\"\"\n        return _sort(_get_index(n)).next()\n\n    def _get_next_sorted_sorted(n):\n        \"\"\"\n        Get the next integer in the list which has the same sum of\n        digits as the given integer.\n        \"\"\"\n        return _sort(_get_index(n)).next().next()", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        :param nums: list of integers\n        :return: list of integers sorted in ascending order according to the sum of their digits.\n        \"\"\"\n        return [nums[i] for i in range(len(nums))]\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda x: x.sum())\n    return (nums[0], nums[1], nums[2], nums[3])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort_by_sum(item):\n        \"\"\"\n        Sort the given item by sum of digits.\n        \"\"\"\n        return item[0] + item[1] + item[2] + item[3] + item[4] + item[5]\n    return sorted(nums, key=sort_by_sum)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        result = []\n        for num in nums:\n            result.append(num + num)\n        return sorted(result, key=lambda x: x[0])\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    else:\n        return sorted(nums, key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort_by_sum(item):\n        return item.sum()\n    return sorted(nums, key=_sort_by_sum)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def func(i):\n        return (nums[i] > 0 and nums[i] % 10 == 0) or (nums[i] == 0 and nums[i] % 10!= 0)\n    return func", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(lst):\n        \"\"\"\n        Sorts the given list according to the sum of their digits.\n        \"\"\"\n        sum = 0\n        for item in lst:\n            sum += item\n        return sorted(lst, key=lambda x: sum, reverse=True)\n\n    def _compare(lst1, lst2):\n        \"\"\"\n        Compares the given list of integers with the given list of\n        integers.\n        \"\"\"\n        if len(lst1)!= len(lst2):\n            raise ValueError(\"List of integers must have the same length\")\n        for i, item1 in enumerate(lst1):\n            if item1!= item2:\n                return -1\n        return 0\n\n    def _sorted(lst):\n        \"\"\"\n        Sorts the given list according to the sum of their digits.\n        \"\"\"\n        _sort(lst)\n        return sorted(lst, key=lambda x: x, reverse=True)\n\n    return _compare, _sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # First, sort the list by sum of digits\n    nums.sort(key=lambda x: x.sum())\n    # Now, sort the list by index\n    nums = sorted(nums, key=lambda x: x.index())\n    # Finally, sort the list by the number of items in the original list\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    try:\n        result = []\n        for num in nums:\n            result.append(sum(num))\n        return result\n    except TypeError:\n        pass\n    if len(nums) == 0:\n        return\n    # Convert to list of integers\n    nums = [int(num) for num in nums]\n    # Sort by sum of digits\n    result = []\n    for num in nums:\n        result.append(sum(num))\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n\n    if len(nums) == 0:\n        return []\n\n    def sorted_list(nums):\n        \"\"\"\n        Returns a sorted list of integers.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)\n\n    return sorted(nums, key=lambda x: sorted_list(x), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    ordered_list = []\n    for num in nums:\n        if num == 0:\n            continue\n        ordered_list.append(num)\n    return sorted(ordered_list, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(s):\n        if len(s) == 1:\n            return s[0]\n        if s[0] == '.':\n            return s[1:]\n        return _sort(s[1:])\n\n    return sorted(nums, key=_sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n\n    def _order(nums):\n        \"\"\"\n        Returns the sorted list of integers according to their sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)\n\n    nums = [num for num in nums]\n    for num in nums:\n        num = int(num)\n        if num < 0:\n            num += 1\n        elif num > len(nums) - 1:\n            num -= len(nums) - 1\n        nums.append(num)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # return a new list of items in ascending order according to the sum of their digits\n    # this way we avoid the order by method of the original list\n    return sorted(list(zip(*sorted(nums, key=lambda x: x[0], reverse=True))), key=lambda x: x[0], reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Sort the list in ascending order\n    sorted_nums = sorted(nums, key=lambda num: sum(num))\n    return sorted_nums\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(n):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        if n == 0:\n            return 0\n        if n % 10 == 0:\n            return n / 10\n        return n // 10\n\n    # sort list of integers\n    n = 0\n    for i in range(len(nums)):\n        if n % 10 == 0:\n            n = n / 10\n        if n % 100 == 0:\n            n = n % 100\n        if n % 1000 == 0:\n            n = n % 1000\n        if n % 10000 == 0:\n            n = n % 10000\n        if n % 100000 == 0:\n            n = n % 100000\n        if n % 1000000 == 0:\n            n = n % 1000000\n        if n % 100000 == 0:\n            n = n % 100000\n        if n % 10000 == 0:\n            n = n % 10000\n        if n % 1000 == 0:\n            n = n % 1000\n        if n % 100 == 0:\n            n = n % 100\n        if n % 10 == 0:\n            n = n % 10\n        n = n + 1\n        if", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n\n    if isinstance(nums, int):\n        return [nums]\n\n    if isinstance(nums, list):\n        if len(nums) == 1:\n            return [nums[0] + 1 for nums in nums]\n        return [nums[0] + 1 for nums in nums.order(lambda x: x - 1)]\n\n    return sorted(nums, key=lambda x: x - 1)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _order_by_points(list):\n        \"\"\"\n        Writes a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        \"\"\"\n        if len(list) == 1:\n            return list[0]\n        if len(list) == 2:\n            return list[0] + list[1]\n        if len(list) == 3:\n            return list[0] + list[1] + list[2]\n        if len(list) == 4:\n            return list[0] + list[1] + list[2] + list[3]\n        if len(list) == 5:\n            return list[0] + list[1] + list[2] + list[3] + list[4]\n        return None\n\n    if len(nums) == 0:\n        return None\n\n    # Determine the total sum of digits\n    total = 0\n    for num in nums:\n        total += int(num)\n\n    # Sort the list of integers\n    for i in range(len(nums)):\n        if total > i:\n            return i\n        else:\n            num = nums[i]\n            total -= int(num)\n\n    # Order the list of integers\n    if total > len(nums):\n        return len(nums)\n    else:\n        return _order_by_points(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorter(obj):\n        \"\"\"\n        This function sorts the given object by its sum of digits.\n        \"\"\"\n        if isinstance(obj, int):\n            return obj\n        elif isinstance(obj, float):\n            return obj * 10\n        elif isinstance(obj, list):\n            return sorted(obj)\n        else:\n            return obj\n\n    return sorter", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _order_by_points(self, nums):\n        \"\"\"\n        Return a sorted list of integers according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: num.sum())\n\n    def _sort(self, nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        nums = _order_by_points(nums)\n        return sorted(nums, key=lambda num: num.sum())\n\n    def _apply(self, nums):\n        \"\"\"\n        Apply the function to each element in the given list.\n        \"\"\"\n        for num in nums:\n            num = num.sum()\n            if num!= 0:\n                self.append(num)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(self, nums):\n        \"\"\"\n        Sorting function that uses the sum of the digits of the items.\n        \"\"\"\n        def _sort(nums):\n            \"\"\"\n            Sorts the given list of integers in ascending order.\n            \"\"\"\n            if nums == []:\n                return []\n            total = 0\n            for item in nums:\n                total += item\n            if total == 0:\n                return []\n            return sorted(nums, key=lambda num: total)\n        return _sort(nums)\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Here we assume that the sum of the digits of each number in the list is\n    # always the same.\n    # (This is not always the case, but it can be easily fixed by removing\n    # the lines below)\n    #\n    # The idea is to use a dict to store the indices of the numbers\n    # that are in the list and then to use a function that takes the\n    # sum of the digits and sorts them by this dict.\n    #\n    # For example, if the sum of the digits of numbers in the list is\n    # 4 and the list has elements with sum of 4, then the function\n    # would take the sum of 4 and sort them in the dict that stores the indices\n    # of the numbers that are in the list.\n    #\n    # The function that sorts the list is defined below.\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the\n        sum of their digits.\n        \"\"\"\n        # We first sort the list of integers in descending order.\n        #\n        # The function that sorts the list is defined below.\n        def sort_digits(num):\n            \"\"\"\n            Sort the given number in descending order.\n            \"\"\"\n            return num - 1\n        # We now", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted_list(s):\n        \"\"\"\n        Order the given list by the sum of the digits of its items.\n        \"\"\"\n        def n(s):\n            \"\"\"\n            Return the sum of all the digits of an item.\n            \"\"\"\n            return sum(d for d in s if ord(d) == 10)\n        return sorted(s, key=n, reverse=True)\n\n    return sorted_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(items):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits, order them based on their index in original list.\n        \"\"\"\n        if len(items) > 1:\n            return sorted(items, key=lambda x: x.sum())\n        else:\n            return items\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(self):\n        \"\"\"\n        Returns a list of sorted integers.\n\n        \"\"\"\n        return sorted(self, key=lambda x: int(x.sum(0)))\n\n    def __call__(self, nums):\n        \"\"\"\n        Sort the given list of integers, returning a list of sorted\n        integers.\n\n        \"\"\"\n        result = []\n        for num in nums:\n            result.append(self.sort() + [num])\n        return result\n\n    def __repr__(self):\n        return \"OrderByPoints(%s)\" % \", \".join(sorted(self, key=lambda x: int(x.sum(0))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # If the original list is empty, return\n    if len(nums) == 0:\n        return\n\n    # Make a list of sorted integers\n    sorted = sorted(nums)\n    # Sort the original list\n    sorted.sort(key=lambda x: x[0])\n\n    # Return a list of sorted integers\n    return sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        def sort(num):\n            if num == 0:\n                return 1\n            return num / 10 ** (10 - num % 10)\n        return sort\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(self, nums):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> sort([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> sort([]) == []\n        \"\"\"\n        if len(nums) == 0:\n            return []\n        digits = []\n        for num in nums:\n            digits.append(int(num) % 10)\n        digits.sort()\n        return digits\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def func(i):\n        return i * 10\n    return lambda num: sum([func(i) for i in num]) if num else 0", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = [int(x) for x in nums]\n    if len(nums) > 1:\n        nums = [nums[i] for i in range(0, len(nums) - 1)]\n    return sorted(nums, key=lambda x: x / 10)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: x[0] + x[1], reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort by sum of digits\n    sorted = [sum(d) for d in nums]\n    # sort in ascending order\n    sorted.sort(key=lambda x: x[0])\n    return sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: x, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted_list(l):\n        for i in range(len(l)):\n            if l[i] > l[i - 1]:\n                return l[i - 1]\n            elif l[i] < l[i + 1]:\n                return l[i]\n        return l\n\n    return sorted(sorted_list(nums), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if not nums.__len__():\n        return []\n    return sorted(nums, key=lambda x: -x[0], reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def func(n):\n        return n[0] + n[1] + n[2] + n[3] + n[4] + n[5] + n[6]\n    return func", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(lst):\n        \"\"\"\n        Sort the given list of integers.\n        \"\"\"\n        # Sort the list by increasing sum of their digits.\n        #\n        # Note that we are only using a binary search here, not a\n        # binary sort.\n        #\n        # This is because we are using a binary search to compare\n        # the sum of digits of two items, and a binary sort to compare\n        # the sum of digits of two items. So, we only need to sort\n        # items in increasing order.\n        #\n        # The list is sorted in ascending order, so we will\n        # need to reverse it.\n        for i, j in enumerate(lst):\n            if j == i:\n                continue\n            if j < i:\n                lst[i], lst[j] = lst[j], lst[i]\n        return lst\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def compare(a, b):\n        \"\"\"\n        Compare two integers. If a is greater than b, return 1.\n        \"\"\"\n        return a > b\n    if nums == []:\n        return []\n    sorted_nums = sorted(nums, key=lambda n: compare(n, nums[0]))\n    return sorted_nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: x.sum(), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # the order we want\n    order = []\n    # the sort we want\n    sort = []\n    # the list of integers to sort\n    nums = list(nums)\n\n    for i in range(len(nums)):\n        # the sum of digits of each integer\n        sum_of_digits = 0\n        for j in range(len(nums)):\n            if i == j:\n                continue\n            # add the sum of digits of the current integer to the sum of digits of the previous integer\n            sum_of_digits += nums[j].count(ord(nums[i]) + ord(nums[j]))\n        # if the sum of digits of each integer is greater than the sum of digits of the previous integer,\n        # then we have a new integer with a higher sum of digits, so we add it to the list of sorted integers\n        if sum_of_digits > sum_of_digits_old:\n            # append the new integer to the list of sorted integers\n            order.append(nums[i])\n            sort.append(nums[i])\n            # add the new integer to the list of sorted integers\n            order.append(nums[i])\n            sort.append(nums[i])\n\n    # sort the list of integers\n    for i in range(len", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort by sum\n    n = len(nums)\n    for i in range(n):\n        if nums[i] == 0:\n            continue\n        sum = nums[i]\n        if sum > 0:\n            yield i, sum\n    # sort by index\n    for i in range(n):\n        if nums[i] == 0:\n            continue\n        yield i, nums[i]\n    # sort by index\n    for i in range(n):\n        if nums[i] == 0:\n            continue\n        yield i, nums[i]\n    # sort by index\n    for i in range(n):\n        if nums[i] == 0:\n            continue\n        yield i, nums[i]\n    # sort by index\n    for i in range(n):\n        if nums[i] == 0:\n            continue\n        yield i, nums[i]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return sorted(nums, key=lambda x: x.sum())\n    else:\n        return sorted(nums, key=lambda x: x.sum()/len(nums))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(nums)\n    total = sum(nums)\n    if total == 0:\n        return []\n    else:\n        return sorted(nums, key=lambda x: x/total)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted_list(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        if len(lst) == 0:\n            return []\n        elif len(lst) == 1:\n            return [lst[0]]\n        else:\n            return sorted(lst, key=lambda x: x, reverse=True)\n\n    return sorted(nums, key=lambda x: x, reverse=True)[0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorter(num1, num2):\n        return num1.sum() > num2.sum()\n    return sorter", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return x > 0\n    return sorted(nums, key=lambda x: _sort(x), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(x) + 1)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n\n    nums = [int(x) for x in nums]\n\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        if nums == []:\n            return []\n\n        nums = [int(x) for x in nums]\n\n        def _compare(a, b):\n            return cmp(a, b)\n\n        def _reverse(a, b):\n            return _compare(b, a)\n\n        def _sort(a, b):\n            return _reverse(a, _compare(a, b))\n\n        nums = [sorted(nums, key=lambda x: _sort(x, x)) for x in nums]\n\n        return nums\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(n):\n        if n > 0:\n            return n\n        else:\n            return -n\n    def _reverse(n):\n        if n < 0:\n            return -n\n        else:\n            return n\n    n = 0\n    for x in nums:\n        if n == 0:\n            n += 1\n            _sort(n)\n        else:\n            if _reverse(n) == _reverse(x):\n                return _reverse(n)\n    return n", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # make a list of all the integers that are in the list\n    numbers = [int(n) for n in nums]\n    # sort the list of integers in ascending order\n    new_numbers = [sorted(n) for n in numbers]\n    # write the function to sort the list of integers in ascending order\n    return new_numbers", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n\n    # Add zero to all the values in the list\n    n = len(nums)\n    for i in range(0, n):\n        nums[i] = n - 1 - i\n\n    # Sort the list\n    nums = sorted(nums, reverse=True)\n\n    # Return sorted list\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def func(n):\n        if n in nums:\n            return n\n        else:\n            return -1\n    return func", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if len(nums) == 0:\n        return []\n    total = sum([sum(num) for num in nums])\n    if total == 0:\n        return []\n    if total == 1:\n        return [num for num in nums]\n    result = []\n    for num in nums:\n        if total > num:\n            result.append(num)\n        else:\n            result.append(total - num)\n    return sorted(result, key=lambda num: -sum([num]))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    return sorted(nums, key=lambda x: x.sum(), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        # sort the integers by their sum of their digits.\n        # this is a little ugly, but it works for most cases.\n        # the first item should be sorted first, then the others.\n        nums.sort(key=lambda x: abs(x - x[0]))\n        return nums\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def f(x):\n        return x + 1\n    return sorted(x for x in nums if f(x) == nums[0])[0]\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n\n    if isinstance(nums, int):\n        return [nums]\n\n    result = []\n\n    for num in nums:\n        result.append(num)\n\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sorted(x):\n        if x[0] < x[1]:\n            return x[0]\n        elif x[0] > x[1]:\n            return x[1]\n        else:\n            return x\n    return sorted(nums, _sorted)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if len(nums) == 0:\n        return []\n    return sorted(nums, key=lambda x: int(x) + 1)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if len(nums) == 1:\n        return [int(nums[i])]\n    digits = []\n    for i in range(len(nums)):\n        digits.append(int(nums[i]) % 10)\n    digits.sort()\n    return digits", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _order(num):\n        return int(num) - int(num * 100)\n    return sorted(nums, key=lambda x: _order(x), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Return a list of integers in ascending order according to the sum of\n        their digits.\n        \"\"\"\n        if nums is None:\n            return []\n        if len(nums) == 0:\n            return []\n        return sorted(nums, key=lambda x: int(x.sum()))\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: x, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort_by_sum(i):\n        if len(i) > 1:\n            return i[0] + i[1] + i[2]\n        else:\n            return i\n    return sorted(nums, key=_sort_by_sum)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n\n    def f(n):\n        if n < 0:\n            return -n\n        elif n == 0:\n            return 0\n        else:\n            return n\n\n    def g(n):\n        if n < 0:\n            return -n\n        elif n == 0:\n            return 0\n        else:\n            return n\n\n    def h(n):\n        if n < 0:\n            return -n\n        elif n == 0:\n            return 0\n        else:\n            return n\n\n    def f_(n):\n        if n < 0:\n            return -n\n        elif n == 0:\n            return 0\n        else:\n            return n\n\n    def g_(n):\n        if n < 0:\n            return -n\n        elif n == 0:\n            return 0\n        else:\n            return n\n\n    def h_(n):\n        if n < 0:\n            return -n\n        elif n == 0:\n            return 0\n        else:\n            return n\n\n    def f(n):\n        return f_(n)\n\n    def g(n):\n        return g_(n)\n\n    def h(n):\n        return h_(n)\n\n    def f_(n):\n        return f(n)\n\n    def g_(n):\n        return g(n)\n\n    def h_(n):\n        return h(", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return [nums[0]]\n    else:\n        order = []\n        for num in nums:\n            if len(num) == 1:\n                order.append(num)\n            else:\n                order.append(sum([int(n) for n in num]))\n        return order"]]