[["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Init list of integers\n    nums = list(nums)\n    for item in range(len(nums)):\n        nums[item] = int(nums[item])\n    nums = sorted(nums, key=lambda num: num, reverse=True)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n\n    if type(nums) is int:\n        return [nums]\n    return [nums[x: x + len(nums)] for x in range(len(nums))]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(map(lambda n: pow(10.0, n), nums))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: int(x.count('0') + x.count('1')))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        total = 0\n        for num in nums:\n            if num!= 0:\n                total += num\n        return sorted(nums, key=lambda num: total)\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if not nums:\n        return []\n    nums = sorted(nums)\n    nums.extend(range(0, len(nums)-1))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(xs):\n        xs = list(xs)\n        try:\n            xs_out = []\n            for x in xs:\n                xs_out.append(len(x))\n            return xs_out\n        except Exception:\n            raise\n\n    def make_ordered_list(xs):\n        \"\"\"\n        Create an array of ordered_list of the given list of integers\n        \"\"\"\n        return (sorted(xs, key=lambda x: x[0], reverse=True))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def point_sum(x):\n        \"\"\"\n        Given a number, return the sum of all digits of the\n        number\n\n        >>> point_sum(1) == 1\n        >>> point_sum(11) == 11\n        >>> point_sum(1000000) == 1000000\n        >>> point_sum(1000001) == 1000001\n        >>> point_sum(100000) == 100000\n        >>> point_sum(100000) == 100000\n        >>> point_sum(10000001) == 10000001\n        >>> point_sum(100000) == 100000\n        >>> point_sum(10000000) == 10000000\n        >>> point_sum(10000001) == 10000001\n        >>> point_sum(1000000) == 1000000\n        >>> point_sum(1000001) == 1000001\n        >>> point_sum(100000) == 100000\n        >>> point_sum(10000001) == 10000001\n        >>> point_sum(100000) == 100000\n        >>> point_sum(10000000) == 10000000\n        >>> point_sum(10000001) == 10000001\n\n        >>> point_sum(12) == 12\n        >>> point_sum(-11) == 11\n        >>> point_sum(-11) == 11\n        >>> point_sum(-12) == 12\n        >>> point_sum(-12) == 12\n\n        >>> point_sum(42) == 42\n        >>> point_sum(42", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sorted(nums, key=lambda x: x, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n    # Build list of sorted numbers with ascending sum of their digits\n    nums = sorted(nums, key=lambda x: x.sum())\n    # Move all items after the last one to the front of list\n    nums.extend(nums[:-1])\n    # Return sorted list of integers\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    points = [(x, x) for x in nums]\n    sorted = sorted(points, key=lambda x, y: sum(x) + sum(y))\n    return sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums)\n    nums = list(nums)\n    nums.sort()\n    return nums\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    results = []\n    for item in nums:\n        if len(item) > 1:\n            results.append(item[0])\n        elif len(item) > 1:\n            results.append(item)\n    return results\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n\n    # fill the result list with 0s, so that we can use a binary search\n    # later on\n    result = []\n    for num in nums:\n        result.append(0)\n    # sort the result list with binary search\n    result.sort(key=lambda x: x[0])\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    indices = []\n    count = 0\n    for n in nums:\n        indices.append(count)\n        count += n\n\n    if len(indices) > 1:\n        order = \"asc\"\n        if indices[0] % 2 == 0:\n            order = \"desc\"\n        else:\n            order = \"asc\"\n        indices.sort(key=lambda n: n % 2)\n        return indices\n    else:\n        return indices[0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(range(nums), key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Write a function which sorts the given list of integers in ascending order\n    # according to the sum of their digits.\n    def index(num):\n        \"\"\"\n        Find the index of the given integer in the list.\n        \"\"\"\n        if num == 0:\n            return 0\n        return sum([ord(x) for x in num])\n\n    if len(nums) == 0:\n        return []\n    if nums == [0]:\n        return nums\n    if nums == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]:\n        return nums\n    return sorted(index(num) for num in nums, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sort_order(i):\n        \"\"\"\n        Convert the given item i to a string representation.\n        \"\"\"\n        if i == 0:\n            return \"smallest\"\n        if i == nums.count() - 1:\n            return \"largest\"\n        return str(i)\n\n    def _to_upper(s):\n        \"\"\"\n        Converts a string to upper-case.\n        \"\"\"\n        return [s[i:i + 2] for i in xrange(len(s), 0, -1)]\n\n    def _to_small(s):\n        \"\"\"\n        Converts a string to lowercase.\n        \"\"\"\n        return [s[i:i + 2] for i in xrange(len(s), 0, -1)]\n\n    def _sort(s):\n        \"\"\"\n        Returns a sorted list of strings\n        \"\"\"\n        return [s.upper() for s in s.lower().split()]\n\n    def _to_lowercase(s):\n        \"\"\"\n        Converts a string to lowercase.\n        \"\"\"\n        return [s[i].upper() for i in s.lower().split()]\n\n    def _sort_labels(s):\n        \"\"\"\n        Returns a sorted list of labels\n        \"\"\"\n        return [s[i].upper() for i in s.lower().split()]\n\n    def _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    assert len(nums) > 0, 'no nums passed to order_by_points function'\n    n = len(nums)\n    pre = 0\n    post = n - 1\n    for i in range(0, pre, n):\n        pre += (i + n) % n\n        post = (i + n) % n if post > pre else pre\n\n    return [nums[i] for i in range(pre, post + 1, n)]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    count = 0\n    for num in nums:\n        count += 1\n        if count > 10:\n            return [num]\n    first, last = count / 10, count % 10\n    return [num for num in sorted(nums) if num <= first]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def filter(x):\n        \"\"\"\n        Check for the given number and return True if it is in the sorted list,\n        otherwise False.\n        \"\"\"\n        return sum(x) == len(x)\n\n    return sorted(filter(lambda x: len(x) == 1), key=lambda x: x, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n\n    def _order_by_points(points_list):\n        \"\"\"\n        Return sorted list of integers. Each item in the list is sorted\n        according to its index in original list.\n\n        >>> _order_by_points([-1, 1, 11, -12, -11, -12])\n        [-1, 11, 12, -1, -12]\n        >>> _order_by_points([])\n        []\n        >>> _order_by_points([1, 11, -1, 11, -12])\n        [-1, 1, 11, 11, -11, -12]\n        >>> _order_by_points([-1, -11, 1, 12, -1, -12])\n        [-1, 11, -12, -1, -12]\n        >>> _order_by_points([-1, 1, 11, 12, 11, -11, -12])\n        [-1, 1, 11, 11, 11, -1, -12]\n        >>> _order_by_points([-1, 11, 1, 12, 11, -1, -12])\n        [-1, 1, 11, 11, 1, 12, -1, -12]\n\n        \"\"\"\n        if len(points_list) == 0:\n            return []\n\n        def _sort_by_index(points_list):", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    elif len(nums) == 2:\n        return [ord(n) for n in nums]\n    else:\n        return sorted(nums, key=lambda x: x, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sum_digits = sum(i for i in nums)\n    return sorted(list(range(1, sum_digits + 1)), key=lambda x: x, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is not None:\n        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return nums\n        if nums[0] == 0:\n            return [nums[0]]\n        else:\n            return [nums[0] + n for n in nums[1:]]\n    else:\n        return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted([int(n) for n in nums], reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    min_val = -inf\n    max_val = inf\n    for num in nums:\n        if num >= 0 and num < len(nums) - 1:\n            if num > min_val:\n                min_val = num\n            if num < max_val:\n                max_val = num\n    return sorted(nums, reverse=True, key=lambda x: x - min_val, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n\n    ret = []\n    for x in nums:\n        ret.append(sum(map(int, x)))\n    return ret", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sorted = sorted(nums, key=operator.itemgetter(0))\n    return sorted[::-1]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Use sorted to sort.\n    # TODO: This should be normalized to only work with integers\n    def sorted_list(sorted):\n        \"\"\"\n        Returns a list of elements of the original list that have\n        the same sum of their digits, or [] if there are no such elements.\n        \"\"\"\n        # Scan through the list, and remove duplicates.\n        # TODO: This should be normalized to only work with integers\n        i = 0\n        for x in sorted:\n            if x[0] < i:\n                i = x[0]\n        return sorted - [i for x in sorted if x[0]]\n\n    # Order items by their sum of their digits.\n    # TODO: This should be normalized to only work with integers\n    def sorted_digits(nums):\n        \"\"\"\n        Returns a list of elements of the original list that have\n        the same sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x[1])\n\n    return sorted_digits", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # Make sure we have a list of numbers to sort.\n    nums = [x for x in nums if x!= 0]\n\n    # Get the sum of the digits for each item in the list.\n    sum_of_digits = sum(len(x) for x in nums)\n\n    # Loop over the list of numbers to sort, and write a function that\n    # takes a number as input, and outputs the sum of all the digits\n    # of all items in the list that are equal to that number. We use a\n    # function, since we don't know the length of the list at compile time.\n    for n in nums:\n        if n == 0:\n            continue\n\n        # Get the total sum of the digits for the items in the list that\n        # are equal to this number.\n        sum_of_digits += len(sorted(x for x in nums if x == n))\n\n    # Return the order of the items in the list.\n    return sorted(x for x in nums if x!= 0 and sum_of_digits == len(x) - 1)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n\n    s = ''\n    for num in nums:\n        s += str(num)\n        if num > 0:\n            s += ','\n\n    if len(s) == 0:\n        return []\n\n    return sorted(s, key=lambda x: int(x) / 10)[0:10]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Need to copy the list first to avoid using [] as the default, because\n    # in Python2 we have some values which are only digits and others are\n    # not.\n    # This is needed to avoid changing the default to an empty list:\n    nums = copy.deepcopy(nums)\n\n    def next(num):\n        \"\"\"\n        Returns the next item in the sorted list.\n        \"\"\"\n        # Uncomment to make the digits of the item more visible.\n        # num.sort()\n\n        if num < 0:\n            return next(nums)\n        elif num > len(nums) - 1:\n            return next(nums)\n        else:\n            return nums[-1]\n\n    def add(num):\n        \"\"\"\n        Returns the item that is added to the sorted list.\n        \"\"\"\n        # Uncomment to make the digits of the item more visible.\n        # num.sort()\n\n        if num < 0:\n            return add(nums)\n        elif num > len(nums) - 1:\n            return add(nums)\n        else:\n            return nums[-1]\n\n    def add_all(nums):\n        \"\"\"\n        Returns the item that is added to the sorted list.\n        \"\"\"\n        return add(sum(nums[:-1]))\n\n    def pop(num):\n        \"\"\"\n        Returns the item that", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    sum = 0\n    for num in nums:\n        sum += num\n        if sum % 10!= 0:\n            nums.remove(num)\n        else:\n            nums.sort()\n    return nums\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n    return sorted(set(nums), key=lambda n: sum(n), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(nums)\n    nums.sort()\n    for i, d in enumerate(nums):\n        if d < 0:\n            nums[i] -= 1\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(nums)\n    sorted = sorted(nums)\n    return sum(sorted) + 1", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    assert 0 <= nums <= 1 + MAX_DECIMALS_PER_SECTION, \\\n        \"Argument nums must be between 0 and 1 + MAX_DECIMALS_PER_SECTION\"\n    nums = list(nums)\n    # Ordering is based on position in original list, not on indices.\n    # Compare on indices is not possible in Python 2.x due to reverse()\n    # behavior.\n    for i, d in enumerate(nums):\n        if d == 0:\n            if i > 0:\n                # The last item is always smaller than the first one.\n                # The smallest item must be before the last one.\n                i -= 1\n            else:\n                # All items are equal.\n                return\n        if i == 0:\n            # The first item is always bigger than the last one.\n            # The largest item must be after the last one.\n            return\n        if d < nums[i]:\n            # The last item is always smaller than the first one.\n            # The smallest item must be before the last one.\n            i -= 1\n            nums.insert(i, d)\n        elif d > nums[i]:\n            # The first item is always bigger than the last one.\n            # The largest item must be after the last one.\n            i -= 1\n            nums.insert(i,", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    digits = set()\n    for num in nums:\n        digits.add(num)\n    digits.remove(1)\n    digits.remove(11)\n    digits.remove(-12)\n    digits.remove(-2)\n    digits.remove(3)\n    digits.remove(-5)\n    digits.remove(-2)\n    digits.remove(-7)\n    digits.remove(-7)\n    digits.remove(-4)\n    digits.remove(-2)\n    digits.remove(-6)\n    digits.remove(-4)\n    digits.remove(-4)\n    digits.remove(-2)\n    digits.remove(-5)\n    digits.remove(-4)\n    digits.remove(-6)\n    digits.remove(-7)\n    digits.remove(-3)\n    digits.remove(-3)\n    digits.remove(-7)\n    digits.remove(-4)\n    digits.remove(-2)\n    digits.remove(-6)\n    digits.remove(-7)\n    digits.remove(-4)\n    digits.remove(-2)\n    digits.remove(-5)\n\n    total_digits = 0\n    for num in digits:\n        total_digits += len(num)\n\n    nums = sorted(nums, key=lambda x: x, reverse=True)\n\n    return sum(num) / total_digits", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return\n    if isinstance(nums, int):\n        nums = [nums]\n    assert len(nums) == len(list(nums))\n    last = nums.pop()\n    for n in nums:\n        if (n - last).sum() == 0:\n            last = n\n    return list(last)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _compare(i, j):\n        return i + j < 0\n    def _sort(i, j):\n        return min(i, j) < _compare(i, j)\n    return sorted(nums, key=_sort)[::-1]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, int):\n        return map(lambda x: x, nums)\n    else:\n        return sorted(map(lambda x: x + 1, nums))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    digits = sum(num.zfill(2) for num in nums)\n    for i, num in enumerate(nums):\n        if digits < num:\n            nums.remove(num)\n\n    return sorted(nums, key=lambda num: abs(abs(digits - num)))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    digits = sum(num) % 10\n    if digits > 1:\n        nums = [nums[i:i + digits] for i in range(0, len(nums), digits)]\n    return [num for num in nums if num]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted([int(x) for x in nums], key=lambda n: n[1])[0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return\n    return sorted(nums, key=lambda num: num.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    if not nums:\n        return\n    if len(nums) == 1:\n        return [nums[i] for i in range(0, len(nums), 2)]\n    s = []\n    for num in nums:\n        if num!= 0:\n            s.append(num)\n        s.append(0)\n    if len(s) == 1:\n        return s[0]\n    return sorted(s, key=lambda x: x, reverse=False)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # from itertools import chain, chain_tuples\n    max_sum = sum(x) for x in nums\n\n    if len(nums) > 1:\n        if len(nums) == 1:\n            max_sum = max(max_sum, sum(x)) for x in nums\n        else:\n            # if len(nums) == 1:\n            #     nums = nums[0::-1]\n            nums = [(x, nums.index(x)) for x in nums]\n            # else:\n            #     nums = nums[::-1]\n            #\n            # as a first step, sort them in descending order of their sum\n            # (or equivalently, since sum() is commutative, in ascending order of\n            # their index)\n            nums = [(x, nums.index(x)) for x in nums]\n            # now, in a second step, sort them in descending order of their\n            # index, starting from the end of the list\n            nums = [(x, nums.index(x)) for x in nums]\n            # order the list again, starting from the end\n            nums = [(x, nums.index(x)) for x in nums]\n            # and so on", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def pick_sorted_element(seq, idx):\n        \"\"\"\n        A pick function that picks the first element that is in seq\n        and does not have the same index as idx.\n        \"\"\"\n        if idx in seq:\n            return seq[idx]\n        else:\n            return seq.pop(0)\n\n    def pick_choice(seq, idx):\n        \"\"\"\n        A pick function that picks the first choice in seq which has\n        no index greater than idx.\n        \"\"\"\n        if idx in seq:\n            return seq[idx]\n        else:\n            return seq.pop(0)\n\n    def sort_unique(seq):\n        \"\"\"\n        A function that sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        \"\"\"\n        def pick_sorted_element(seq, idx):\n            \"\"\"\n            A pick function that picks the first element that is in seq\n            and does not have the same index as idx.\n            \"\"\"\n            if idx in seq:\n                return seq[idx]\n            else:\n                return seq.pop(0)\n\n        def pick_choice(seq, idx):\n            \"\"\"\n            A pick function that picks the first choice in seq which has\n            no index greater than idx.\n            \"\"\"\n            if idx in seq:\n                return seq[idx]\n            else:\n                return seq.pop(0)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    if len(nums) == 0:\n        return None\n\n    def sorted(nums):\n        if len(nums) == 1:\n            return nums[0]\n        res = []\n        for num in nums:\n            res.append(int(num))\n        return res\n\n    # Divide the list of numbers into 2 lists.\n    nums = [num for num in nums if len(num) >= 2]\n    nums = sorted(nums)\n\n    # Each number in the first list will have more digits than the one\n    # in the second list.\n    nums = [num for num in nums if num < nums[-1]]\n    nums = sorted(nums)\n\n    nums = sorted(nums)\n\n    # Remove the last number from the list.\n    nums[-1] = nums[-1] - 1\n\n    # Write the functions which return the sorted values.\n    return (lambda x: x) if isinstance(x, int) else x", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = [num for num in nums]\n    nums.sort()\n    return [num for num in nums if sum(num) > 0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return nums\n    sum_of_digits = 0\n    nums = sorted(nums)\n    for num in nums:\n        sum_of_digits += num.count('1')\n    return sum_of_digits\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: x.sum(), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for num in nums:\n        if num < 0:\n            num = -num\n            continue\n        count = sum(num for num in nums if num > 0)\n        if count < num:\n            yield num, count\n        elif count == num:\n            yield num\n        elif count > num:\n            yield count, num\n    for i, count in enumerate(nums):\n        if count == num:\n            yield i, count\n        elif count > num:\n            yield count, num\n    for i, count in enumerate(nums):\n        if count == num:\n            yield i, count\n        elif count > num:\n            yield count, num\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = [ int(n) for n in nums ]\n\n    s = ''.join(n for n in nums if n < 10)\n    s = s[:-1]\n    if len(s) == 0:\n        return\n\n    return [ int(n) for n in nums ]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda n: n.sum(1) or 0)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return lambda num: sorted(nums, key=lambda num: sum(num), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # If there are no numbers, return\n    if nums is None:\n        return\n\n    # For each number in the list, count the number of digits\n    nums = list(nums)\n    num_digits = 0\n    for n in nums:\n        num_digits += len(n)\n        num_digits = int(num_digits)\n\n    # Sort the list by digits\n    num_digits = sorted(num_digits, reverse=True)\n\n    # Return the sorted list\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sorted_digits = sorted(nums, key=lambda x: x.count('0'))\n    sorted_digits = sorted_digits + sorted(nums)\n    for i, num in enumerate(nums):\n        if len(num) > 1:\n            if nums[i] > num[i - 1] and nums[i] > num[i - 2] and nums[i] > num[i - 3] and \\\n                    nums[i] > num[i - 4] and nums[i] > num[i - 5] and nums[i] > num[i - 6] and \\\n                    nums[i] > num[i - 7] and nums[i] > num[i - 8]:\n                sorted_digits[i] = nums[i]\n            else:\n                sorted_digits[i] = nums[i]\n    return sorted_digits\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(set(nums), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # TODO: remove this function if it doesn't need to be there\n    def _order_by_points(s):\n        \"\"\"\n        Implementation of the custom Python sort function.\n        \"\"\"\n        # TODO: move this piece of code into a function which is invoked\n        #       from the constructor of this class, and which is passed\n        #       the list of digits.\n        a = sorted(s, key=lambda i: int(i)+len(s[i]))\n        return a\n    return _order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(list(nums), key=lambda x : x[0].sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sum = 0\n    while nums:\n        nums.append(sum)\n        sum += int(nums[0]) + int(nums[1]) + int(nums[2]) + int(nums[3]) + int(nums[4]) + int(nums[5])\n        nums = sorted(nums, key=lambda x: x, reverse=True)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda num: num.count('.'))\n    return ','.join(map(lambda x: '%i' % x, nums))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _(x):\n        \"\"\"Return the string corresponding to x\"\"\"\n        # http://www.python.org/doc/library/functions.html#numbers\n        num = x.__class__.__name__.upper().replace(' ', '_').replace(' ', '')\n        return '%.0f' % num\n    return lambda x: _(x) for x in nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def tmp(x):\n        if x < 0:\n            return -abs(x)\n        return x\n    return sorted(x for x in nums if tmp(x) > tmp(x[1:]))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: x + len(x) - 2)[:2]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # The default algorithm will sort using the following rules:\n    #     1. First, sort the list in ascending order. This will result in\n    #         the list being sorted in ascending order according to their\n    #         sum of digits.\n    #     2. If there are several items with similar sum of their digits,\n    #         order them based on their index in original list.\n    #\n    #  Here we replace the below algorithm with the following:\n    #     1. Sort all items in ascending order.\n    #     2. If there are several items with similar sum of their digits,\n    #         order them based on their index in original list.\n    #\n    #  The result of the above algorithm will be the following list of sorted\n    #  integers:\n    #     [1, 11, -1, -11, -12]\n    #     [-1, -11, 1, -12, 11]\n    #     [-1, 11, 1, 12, 11]\n\n    def __call__(self, nums):\n        \"\"\"\n        Sort the given list of integers by sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        Arguments:\n            nums (list): List of integers", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return lambda n: sum(n) + n", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # dict of dict, each dict representing a digit by index\n    digits = {1: 1, 2: 2, 3: 3, 4: 4}\n    sorted = [(k, digits[k]) for k in range(0, len(nums))]\n    index = []\n    for n in nums:\n        index.append(int(n) - 1)\n        sorted.append({k: n})\n    return sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    total = 0\n    for n in nums:\n        total += n\n    # then sort\n    sorted_numbers = [(i, j) for (i, j) in enumerate(sorted(nums))]\n    sorted_numbers.sort(key=lambda x: x[0])\n    return sorted_numbers\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(set(nums))\n    if nums == []:\n        return []\n    i = 0\n    while i < len(nums):\n        if nums[i] == 0:\n            return nums\n        if nums[i] % 10 == 0:\n            i += 1\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def __call__(self, s):\n        r = []\n        for i, number in enumerate(s):\n            if number == '0':\n                r.append(i)\n            elif number == '1':\n                r.append(i + 1)\n            elif number == '2':\n                r.append(i * i + 1)\n            elif number == '3':\n                r.append(i * i * i + 1)\n            elif number == '4':\n                r.append(i * i * i * i + 1)\n            elif number == '5':\n                r.append(i * i * i * i * i + 1)\n            elif number == '6':\n                r.append(i * i * i * i * i * i + 1)\n            elif number == '7':\n                r.append(i * i * i * i * i * i * i + 1)\n            elif number == '8':\n                r.append(i * i * i * i * i * i * i * i + 1)\n            elif number == '9':\n                r.append(i * i * i * i * i * i * i * i * i + 1)\n            elif number == '-10':\n                r.append(i *", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # We know that nums is a list of integers.\n    nums = sorted(nums, key=lambda i: i)\n\n    # Now we have to set the order of the list.\n    for i in range(len(nums)):\n        # Find out where in the original list the sum of digits for this\n        # item is the highest.\n        for j in range(len(nums)):\n            if nums[i] + nums[j] == nums[j]:\n                # Remove this item and move onto the next item.\n                nums.pop(i)\n                nums.pop(j)\n                break\n        else:\n            # Remove this item and move onto the next item.\n            nums.pop(i)\n            nums.pop(i)\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def _find_and_sort(item):\n        \"\"\"\n        Find and sort an item if it is not in the list.\n\n        If there is more than one item with similar sum of their digits,\n        return the first one that is not already in the list.\n        \"\"\"\n        if len(item) == len(nums):\n            return item\n        else:\n            return _find_and_sort(item[:-1])[0]\n\n    def sort(nums):\n        \"\"\"\n        Sort the list of integers.\n\n        Note: the result is in the same order as the original list.\n        \"\"\"\n        return [sorted(x, key=lambda x: x - x % 10) for x in nums]\n\n    return _find_and_sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return [sum(n) for n in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def func(obj):\n        for num in obj:\n            if isinstance(num, (int, long)):\n                if num > 99:\n                    return num\n            else:\n                return num\n        return 99\n    if nums is None:\n        return 0\n    else:\n        def rec_sort(nums):\n            if len(nums) == 1:\n                return 0\n            nums = [rec_sort(n) for n in nums]\n            return sum(nums)\n        def func_sort(obj):\n            return sum([rec_sort(n) for n in obj])\n        return func_sort\n    return func", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if nums[0] is None:\n        return [nums[0]]\n    elif nums[0] % 100 == 0:\n        return [nums[0]]\n    if nums[1] % 100 == 0:\n        return [nums[0]] + [nums[0]]\n    return [nums[0]] + [nums[0]] + [nums[0]] + [nums[0]] + [nums[0]] + [nums[0]] + [nums[0]]\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Since the function name is not used, we don't need to enter the full\n    # list of variables. We only need the first four to work.\n    variables = []\n    for num in nums:\n        variables.append(\"%i\" % num)\n        variables.append(\"%i\" % num)\n        variables.append(\"%i\" % num)\n    variables.append(\"\")\n    return variables", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sum = 0\n    while nums:\n        sum += nums.pop(0)\n        nums.sort()\n        print(\"{}: {}\".format(nums.pop(0), sum))\n    return sum", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return\n    # Determine list of sum digits, counting those with subdigits.\n    digits = []\n    for num in nums:\n        if num <= 9:\n            digits.append(num)\n        else:\n            digits.append(num / 10)\n    # Determine which number should come first.\n    index = 0\n    for num in digits:\n        if num > index + 1:\n            index = num\n    # Write the first number.\n    return index", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according\n        to their sum of their digits.\n        Return an iterator of the sorted integers.\n        \"\"\"\n        def iterate(num):\n            if num == 0:\n                return None\n            else:\n                return sorted(nums, key=lambda num: num, reverse=True)\n        return iter(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(item):\n        return item[0] + item[1]\n\n    def each(seq):\n        i = 0\n        for num in seq:\n            i += 1\n            yield num, i\n\n    def compare(a, b):\n        return sum(b[1] - a[1]) < 0\n\n    def shuffle(item):\n        return item[0], item[1], item[0], item[1], item[0], item[1]\n\n    def _sort(self, nums):\n        return sorted(nums, key=lambda num: self.compare(num, nums[::-1]))\n\n    def _clear(self):\n        self.nums = []\n        self.nums = []\n\n    def _update(self, nums):\n        self.nums = []\n        for num in nums:\n            self.nums.append(num)\n\n    def _update2(self, nums):\n        self.nums = []\n        for num in nums:\n            self.nums.append(num)\n\n    def _get(self, num):\n        i = 0\n        for item in self.nums:\n            i += 1\n            if i == num:\n                return item\n        return None\n\n    def _set(self, num, val", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n\n    size = len(nums)\n    if size < 2:\n        return []\n\n    arr = [0 for i in range(0, size)]\n    while 1:\n        index = 0\n        while True:\n            index += 1\n            if index >= size and nums[index] < 0:\n                break\n            elif nums[index] == 0:\n                break\n            else:\n                arr.append(nums[index])\n            nums = nums[:index]\n        if len(arr) == 0:\n            break\n    return arr", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted([sum(x) for x in nums], key=lambda x,y: x-y)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort by sum of digits\n    nums = sorted(nums, key=lambda x: x.sum())\n    # sort by index in original list\n    nums = [nums[k] for k in range(len(nums))]\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return [nums[0] for nums in nums]\n    if nums[0] == nums[-1]:\n        return [nums[1] for nums in nums]\n    count = 0\n    points = [nums[0] for nums in nums]\n    if sum(points) == sum(points):\n        return points\n    for i, p in enumerate(points):\n        if points[i] == points[i + 1]:\n            count += 1\n            continue\n        if count % 2:\n            break\n        points[i] += points[i + 1]\n        count += 1\n    return points[::-1]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    ordered_ints = [int(x) for x in nums]\n    if len(ordered_ints) == 1:\n        return ordered_ints[0]\n    else:\n        return [int(x) for x in ordered_ints]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if isinstance(nums, basestring):\n        return [nums,]\n    nums = [nums]\n    for n in nums:\n        d = len(n)\n        if d > 0 and n[d-1]:\n            return [-1, -1, -1, -1]\n    return [nums[0], nums[1], nums[0]]\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return [sum(i) for i in nums]\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    index = 0\n    while index < len(nums):\n        if nums[index] == 0:\n            if nums[index + 1] == 0:\n                index += 1\n            else:\n                index += 2\n        else:\n            index += 1\n    return nums\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Build a list of indices to compare each item to.\n    indices = []\n    for i, num in enumerate(nums):\n        if abs(num) > abs(i):\n            indices.append(i)\n    indices = sorted(indices)\n    return indices", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n    elif len(nums) == 0:\n        return sorted(nums)\n    else:\n        return sorted([int(i) for i in nums], reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    return sorted(nums, key=lambda x: x, reverse=True)[0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if isinstance(nums, int):\n        nums = [nums]\n    if len(nums) < 2:\n        return nums\n    return sorted(nums, key=lambda x: int(x) + int(x) * 10)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    vals = map(lambda x: x, nums)\n    vals.sort(lambda x, y: cmp(sum(x)+sum(y), x+y))\n    return vals", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for num in nums:\n        if num > 0:\n            yield num\n    else:\n        for index in range(len(nums)):\n            yield nums[index]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def function(num):\n        return [int(digit) for digit in num]\n    return sorted(function(num) for num in nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    max = max(nums)\n    l = [num for num in nums]\n    temp = list()\n    for i in range(len(l)):\n        temp.append(max(l) - i)\n    temp.sort()\n    return temp", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    digits = 0\n    def add(self, other):\n        \"\"\"\n        Add two integers to the list of lists, returning the total sum\n        of their digits.\n\n        >>> add([1, 11, -1, -11, -12])\n        2\n        >>> add([1, 11, -1, -11, -12], 2)\n        2\n        >>> add([1, 11, -1, -11, -12], 2, 3)\n        4\n        >>> add([1, 11, -1, -11, -12], 2, 3, 4)\n        5\n        >>> add([1, 11, -1, -11, -12], 2, 3, 4, 5)\n        6\n        >>> add([1, 11, -1, -11, -12], 2, 3, 4, 5, 6)\n        7\n        >>> add([1, 11, -1, -11, -12], 2, 3, 4, 5, 6, 7)\n        8\n        >>> add([1, 11, -1, -11, -12], 2, 3, 4, 5, 6, 7, 8)\n        9\n        >>> add([1, 11, -1, -11, -12], 2, 3, 4, 5, 6, 7, 8, 9)\n        10\n        >>> add([1, 11", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_']\n    for num in nums:\n        if num % 2 == 0:\n            digits.append(num % 10)\n        else:\n            digits.append('-')\n\n    return sorted(digits)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    new_nums = []\n    for num in nums:\n        if num % 100 == 0:\n            new_nums.append(num / 100.0)\n        elif num % 1000 == 0:\n            new_nums.append(num / 1000.0)\n        elif num % 10000 == 0:\n            new_nums.append(num / 10000.0)\n        elif num % 100000 == 0:\n            new_nums.append(num / 100000.0)\n        elif num % 1000000 == 0:\n            new_nums.append(num / 1000000.0)\n    return sorted(new_nums, key=lambda num: sum(num) + 1)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        This function is based on the article \"Sorting Integers by Sum of Digits\"\n        by Peter Schwartz.\n        \"\"\"\n        # Python 3\n        if hasattr(nums, 'count'):\n            return sorted(nums, key=lambda x: x.count())\n        else:\n            return sorted(nums, key=lambda x: x)\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = [int(n) for n in nums]\n    n = 0\n    max_sum = 0\n    for num in nums:\n        num += int(n)\n        if num > max_sum:\n            max_sum = num\n    return [max_sum]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _order(num1, num2):\n        if len(num1) > len(num2):\n            return num1.index(num2)\n        else:\n            return num2.index(num1)\n\n    def order(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order([]) == []\n        \"\"\"\n        if len(nums) > 0:\n            if isinstance(nums, list):\n                for num in nums:\n                    order(_numorder_by(_num_order_by(num)))\n                return _order(nums)\n            else:\n                return _order(nums)\n\n    def _numorder_by(num):\n        \"\"\"\n        Return the index of the first digit greater than the given\n        number of digits.\n\n        For example, if we have 3 digits, then return 0, 1, 2. If we have 5\n        digits, then return 0, 1, 2, 3.\n\n        For example:\n        >>> _numorder_by(123", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def generator():\n        def add(x):\n            return x - 1\n        return list(range(len(nums))) + add\n\n    def pre_order():\n        return [\n            x + 1 if x > 0 else x - 1\n            for x in nums\n        ]\n\n    def post_order():\n        return list(pre_order()) + list(post_order())\n\n    def do_sort(nums):\n        \"\"\"\n        Sort the list of integers.\n        \"\"\"\n\n        for index in range(len(nums)):\n            nums[index] += 1\n            nums[index] += len(nums) - 1\n            nums[index] = max(nums[index], 0)\n\n    nums = order_by_points(nums)\n    assert order_by_points(nums) == nums\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums\n    points = []\n    for num in nums:\n        for digit in num:\n            if digit == '0':\n                continue\n            if digit == '1':\n                points.append(num)\n            elif digit!= '0':\n                points.append('-' + str(digit))\n    points.sort()\n    return points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    ordered = [ int(n) for n in nums ]\n    count = 0\n    total = 0\n    for x in ordered:\n        total += x\n        count += 1\n        if count == 1:\n            ordered.insert(0, 0)\n        if total > 0:\n            ordered.sort()\n            ordered.append(0)\n    return sorted(ordered, key=lambda x: total - x, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # We can only sort if the list contains at least 2 elements\n    if len(nums) < 2:\n        return []\n\n    # Sort the input list in ascending order\n    original = sorted(nums)\n    return [original[i] for i in original]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted_order(s):\n        try:\n            return sorted(s, key=lambda x: x.sum())\n        except (ValueError, KeyError):\n            return sorted(s, key=lambda x: x.sum())\n    \n    return sorted_order", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n\n    if len(nums) == 1:\n        return sorted(nums, key=lambda x: int(x))\n    elif len(nums) == 2:\n        return sorted(nums, key=lambda x: (x, int(x)))\n\n    return sorted(nums, key=lambda x: (int(x) + 1, int(x)))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    total_digits = sum([1 for _ in xrange(len(nums))])\n    index = 0\n    for num in nums:\n        if total_digits == 0:\n            break\n        else:\n            if total_digits > index:\n                index = total_digits\n    return index", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort():\n        i = 0\n        for num in nums:\n            i += 1\n            if i % 10 == 0:\n                print(i, \": \", num)\n            if num > 0:\n                return i % 10\n            else:\n                return i % 100\n        return 0\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    sum = 0\n    for i in nums:\n        sum += i\n    if sum:\n        return sorted(nums, key=lambda x: x - sum, reverse=True)\n    else:\n        return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # the sorted list is in [1, 11, -1, -11, -12]\n    s = [x for x in range(nums)]\n\n    if len(s) == 1:\n        return s[0]\n    else:\n        return s[1:]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == [None]:\n        return\n    else:\n        return sorted(nums, key=lambda x: x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorter(item1, item2):\n        return sum(item1.sum_of_digits() for item1 in item1) + \\\n                 sum(item2.sum_of_digits() for item2 in item2)\n    return sorter", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n\n    nums = tuple(map(lambda x: int(x), nums))\n    if len(nums) == 2:\n        nums = map(lambda x: int(x), nums)\n        if sum(map(lambda x: x - x.sum(), nums))!= 0:\n            raise ValueError(\"sum of numbers cannot be 0\")\n    elif sum(map(lambda x: x - x.sum(), nums)) < 0:\n        raise ValueError(\"sum of numbers cannot be negative\")\n    else:\n        return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    assert nums.count(0) == len(nums)\n    # Use numpy's np.argsort() function to sort the array.\n    # The key is the list index, the value is the sum of digits of the\n    # list.\n    nums = np.argsort(nums)[1:]\n    if nums.count(0) == len(nums):\n        return nums\n    return nums[:nums.count(0)]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: x[0], reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def item_sum(a, b):\n        return a + b\n    def index_combine(a, b):\n        if a[0] == b[0]:\n            return a[1:] + b[1:]\n        else:\n            return a[1:]\n    def item_count(a, b):\n        return sum(a[1:] for a in a)\n    def index_count(a, b):\n        return sum(index_combine(a[1:], b[1:]) for a in a)\n    def index_sum(a, b):\n        return sum(index_combine(a[1:], b[1:]) for a in a)\n    def sum(a):\n        return sum(index_combine(a[1:], a[1:]) for a in a)\n    def sort(a):\n        if len(a) == 1:\n            return [a[0]]\n        else:\n            return sorted([a[0] for a in a], key=item_sum, reverse=True)\n    return item_count, index_count, index_sum, sum, sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    i = 0\n    nums.sort(key=lambda x: x[i%3])\n    for _ in range(len(nums)):\n        i += 3\n        if nums[i] == nums[nums[nums[i]]] + nums[nums[i+1]]] + nums[nums[nums[i+1]]] == 0:\n            nums[i] = nums[nums[i]]\n            nums[i+1] = nums[nums[i+1]]\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        raise ValueError('first argument must not be None.')\n\n    index = 0\n    while index < len(nums):\n        if nums[index] > nums[index + 1] and nums[index] > nums[index - 1] and nums[index] > nums[index + 2]:\n            index += 1\n        elif nums[index] > nums[index - 1] and nums[index] > nums[index + 2]:\n            index -= 1\n        elif nums[index] < nums[index + 1] and nums[index] < nums[index - 1] and nums[index] < nums[index + 2]:\n            index += 1\n        elif nums[index] < nums[index - 1] and nums[index] < nums[index + 2]:\n            index -= 1\n    return [nums[index] for index in index]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    ordered = []\n    for num in nums:\n        num = float(num)\n        while num > 0:\n            num /= 10\n            if num % 10!= 0:\n                break\n        else:\n            break\n    return ordered", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    result = []\n    for i in xrange(len(nums)):\n        result.append(nums[i])\n    result.sort()\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # This is a little weird, but we have to be careful here because\n    # the sum of digits on an integer can be zero. So, no 0's are\n    # considered in sorting.\n\n    nums = sorted(nums, key=lambda x: x)\n    if len(nums) == 1:\n        return nums[0]\n    return 0.0 + math.log(nums) / math.log(2)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return\n    ans = []\n    for num in nums:\n        ans.append(num * 10)\n    return sorted(ans, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    digits = sorted(nums)\n    if len(digits) > 1:\n        points = 0\n        for x in digits:\n            points += x\n            if points < 10.0:\n                break\n        points /= 10.0\n        return sorted(digits, reverse = True)\n    else:\n        return digits", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def make_sorted(list_of_numbers):\n        \"\"\"\n        A function which sorts the given list of numbers according\n        to their sum of their digits.\n        \"\"\"\n        def make_sorted_func(list_of_numbers):\n            \"\"\"\n            A function which sorts the given list of numbers\n            according to their sum of their digits.\n            \"\"\"\n            if len(list_of_numbers) == 0:\n                return None\n\n            return sorted(list_of_numbers, key=lambda number: sum([number]))\n\n        return make_sorted_func(nums)\n\n    if len(nums) > 0:\n        return [order_by_points(nums) for nums in nums]\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    try:\n        for n in nums:\n            try:\n                return int(n) * 100\n            except ValueError:\n                pass\n    except ValueError:\n        return 0", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def new_order(list):\n        \"\"\"\n        Use a custom function to return the index of an element in\n        the original list.\n        \"\"\"\n        if len(list) == 1:\n            return list[0]\n        else:\n            return sorted(list, key=lambda num: int(num.group('.')))[0]\n\n    return new_order", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def score(obj):\n        \"\"\"\n        Determine how many points a number is worth.\n        \"\"\"\n        if obj[0] == '-':\n            return 0\n        elif obj[0] =='':\n            return 1\n        elif obj[0] == '/':\n            return 1 / 10\n        elif obj[0] == '%':\n            return 1 % 10\n        elif obj[0] == ',':\n            return 1 / 10\n        elif obj[0] == '.':\n            return 10 ** obj[1]\n        else:\n            return obj[0]\n\n    score_dict = {}\n    for i, num in enumerate(nums):\n        score_dict[num] = score(num)\n    result = sorted(score_dict.items(), key=score, reverse=True)\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(n):\n        \"\"\"\n        Returns the sorted integer of n.\n        \"\"\"\n        return max(abs(x) for x in range(-n, len(n)+1, -1))\n\n    return sorted(n, key=sort)[0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted_list(sortedlist):\n        \"\"\"\n        Function for sorting a list. One argument is the sorted\n        list and the other is the list to sort.\n        \"\"\"\n        return sortedlist[0] + sortedlist[1:]\n    return sortedlist", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    s = [sum(ord(n) for n in n) for n in nums]\n    temp = []\n    i = 0\n    while i < len(s):\n        if s[i] == s[i+1]:\n            temp.append(i)\n        else:\n            temp.append(i+1)\n            i += 2\n    temp.reverse()\n    for t in temp:\n        s[t] = s[t+1]\n    return sorted(s)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n\n    def order_by_points(nums):\n        \"\"\"\n        Store nums into an ordered list of integers.\n        The function first sorts nums by their sum of digits.\n        Then, it iterates through nums and applies the same order to the\n        elements, so that the sequence is sorted in ascending order.\n        \"\"\"\n        if nums == []:\n            return []\n\n        nums = list(sorted(nums))\n\n        nums = map(lambda x: x[0] + x[1] + x[2], nums)\n        nums = tuple(nums)\n\n        nums = list(zip(*nums))\n\n        return nums\n\n    nums = map(lambda x: int(x), nums)\n    nums = tuple(nums)\n\n    return map(lambda x: order_by_points(x), nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    nums = [float(a) for a in nums]\n    if nums is not [None] and len(nums) == 1:\n        return [nums[0] / 10 for nums in order_by_points(nums)]\n    return [nums[0] / 10 for nums in sorted(order_by_points(nums))]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    count = 0\n    for n in nums:\n        if n < 1:\n            continue\n        count += 1\n        if count < 10:\n            # Add up all digits of the number and sort by sum of digits\n            num = sum(n for n in n if n >= 1)\n            # Save the value of sum of digits in the argument\n            ordered = sorted(nums, key=lambda x: x, reverse=True)\n            # Replace the rest of the digits with 0\n            for i in range(len(ordered)):\n                ordered[i] = 0\n            return ordered\n        else:\n            # Add up the digits and sort by sum of digits\n            num = sum(n for n in n if n >= 1)\n            # Save the value of sum of digits in the argument\n            ordered = sorted(nums, key=lambda x: x, reverse=True)\n            # Replace the rest of the digits with 0\n            for i in range(len(ordered)):\n                ordered[i] = 0\n            return ordered\n    # Don't know how to do this\n    return []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return\n    if not isinstance(nums, (list, tuple)):\n        nums = [nums]\n    points = []\n    for num in nums:\n        points.append(sum(num) / 10.0)\n    return sorted(points, key=lambda num: -num * 10.0)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def function(n):\n        return n + 1\n    return lambda n: sum(function(n))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def add_sums(x):\n        \"\"\"\n        Appends the sum of the given integers to the end of the list.\n        \"\"\"\n        sum = 0\n        for i in range(len(x)):\n            sum += x[i]\n        x.append(sum)\n        return x\n\n    def first_index(x):\n        \"\"\"\n        Returns the first index of the given list.\n        \"\"\"\n        return x[0]\n\n    def second_index(x):\n        \"\"\"\n        Returns the second index of the given list.\n        \"\"\"\n        return x[1]\n\n    def last_index(x):\n        \"\"\"\n        Returns the last index of the given list.\n        \"\"\"\n        return x[-1]\n\n    return sorted(add_sums(order_by_points(nums)))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(items):\n        \"\"\"\n        A function which sorts the given list of integers\n        in ascending order according to their sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        if len(items) == 0:\n            return []\n        # This list is sorted in ascending order based on its sum of digits.\n        # We need to sort the list in ascending order based on its index.\n        index = 0\n        for i in items:\n            if i == 0:\n                continue\n            index += 1\n            # If index is greater than the sum of all the digits,\n            # then we need to order them based on their index.\n            if index > sum([i for i in items if i == 0]):\n                # Order by index.\n                index = i - 1\n            else:\n                # Order by sum of digits.\n                index = sum([i for i in items if i == 0])\n            # In the end, order by index.\n            return [index]\n        # Order by sum of digits.\n        return [sum([i for i in items if i == 0])]\n\n    # Iterate over the items.\n    for i in range(len(items)):\n        # Get the sum of their digits", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def __call__(self, x):\n        return x % 10 == 0 and x / 10 >= 0 and x / 10 <= 100\n\n    def __len__(self):\n        return len(xrange(self.__len__()))\n\n    def __str__(self):\n        \"\"\"\n        Returns a string representation of the list.\n        \"\"\"\n        if self.__len__() == 0:\n            return \"(none)\"\n        else:\n            return \"{0}{1}\".format(self.__str__(), \", \".join(sorted(self.__str__())))\n\n    def __repr__(self):\n        return str(self.__call__(self))\n\n    def __add__(self, x):\n        if x < 0:\n            return -self\n        elif x > 0:\n            return self + x\n        else:\n            return self\n\n    def __mul__(self, x):\n        if x < 0:\n            return -x\n        elif x > 0:\n            return x\n        else:\n            return 1\n\n    def __sub__(self, x):\n        if x < 0:\n            return self - x\n        elif x > 0:\n            return self + x\n        else:\n            return 1\n\n    def __radd__(self, x)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n\n    nums = list(map(int, nums))\n    if nums == []:\n        return []\n\n    if len(nums) == 2:\n        return sorted(nums, key=lambda x: x[0])\n    else:\n        if sum(nums) == 0:\n            return nums\n        else:\n            return order_by_points(nums) + [nums[sum(nums) - 1] for nums in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda num: int(num) + 1)\n    out = []\n    for num in nums:\n        # append the digits\n        out.append(num.encode('utf-8'))\n    return out", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = [s for s in nums if s!= 0]\n    if len(nums) == 0:\n        return []\n\n    return sorted(nums, key=lambda num: sum(map(int, num)))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sorted = [num for num in nums]\n    points_by = [sum(num) for num in sorted]\n    return points_by", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Create a dictionary with a key for each index in the list.\n    keys = {}\n    # Loop through the list of integers.\n    for i in range(len(nums)):\n        # Get the sum of digits for all items.\n        sum = 0\n        for j in range(len(nums)):\n            sum += int(nums[j])\n        # If the sum is zero, append it to the keys dictionary.\n        if sum == 0:\n            keys[nums[i] - 1] = i\n    # Sort the items by their sum.\n    for i in range(len(keys)):\n        # Sort the items in ascending order based on their index.\n        if keys[i] < keys[i - 1]:\n            # Append the index to the keys dictionary.\n            keys[keys[i]] = i\n    # Return the sorted keys.\n    return keys", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return [i for i in nums if sum(i) == len(nums)]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n\n    nums = [int(n) for n in nums]\n    index = 1\n    while index < len(nums):\n        if nums[index] < nums[index + 1]:\n            nums[index] += 1\n            index += 1\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is not None:\n        if len(nums) == 1:\n            return nums[0]\n        else:\n            return [ord(i) for i in nums]\n    return sorted(nums, key=lambda x: x[1], reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    i = 0\n    while i < len(nums):\n        if nums[i]:\n            return i\n        else:\n            return i + 1\n    return 0\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n\n    # sort\n    l = sorted(nums, key=lambda x: x.__int__())\n    # return sorted(l, key=lambda x: x.__int__())\n\n    # return [x for x in l if x.__int__() == nums[l.index(x)]]\n\n    # return [x for x in l if x.__int__() == nums[l.index(x)]]\n\n    # return [x for x in l if x.__int__() == nums[l.index(x)]]\n\n    return l", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(self):\n        \"\"\"\n        Sort the given list of integers according to the sum of their digits.\n        \"\"\"\n        for i in range(len(self)):\n            if (len(self[i]) > 0) and (self[i][0] > self[i][-1]):\n                x = self[i][0]\n                y = self[i][-1]\n            else:\n                x = self[i][-1]\n                y = self[i][0]\n            self[i][0] = x\n            self[i][-1] = y\n        return self\n\n    #sort the number by their sum of digits\n    def _sort_number(self):\n        \"\"\"\n        Sort the given list of integers according to the sum of their digits.\n        \"\"\"\n        _sort()\n        for x in range(len(self)):\n            self[x] = x / 10\n        return self\n\n    #sort the number by their sum of digits\n    def _sort_number_part(self):\n        \"\"\"\n        Sort the given list of integers according to the sum of their digits.\n        \"\"\"\n        _sort_number()\n        for x in range(len(self)):\n            self[x] = x / 10 * self[x]\n        return self\n\n    #sort the number by their sum of digits\n    def _sort_number_part_part(self):\n        \"\"\"\n        Sort the given list of", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    n = len(nums)\n    k = 0\n    while k < n:\n        if nums[k] < nums[k]:\n            n = k\n            k += 1\n        else:\n            k += 1\n\n    if k == n:\n        return nums\n    else:\n        return nums[:k] + nums[k:]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def cmp_number(x):\n        if x is None:\n            return -1\n        elif x == 0:\n            return 0\n        elif x % 2:\n            return 1\n        else:\n            return -1\n\n    # Check if there are any integers that have the same sum of their digits.\n    if nums == []:\n        return []\n\n    index = 0\n    for num in nums:\n        if index == 0:\n            index += 1\n        elif num.sum() == 0:\n            index += 1\n        else:\n            return cmp_number(num)\n\n    if index > 0:\n        nums[-1], nums[-1] = nums[-1], nums[-1]\n\n    index = 0\n    for num in nums:\n        if index == 0:\n            index += 1\n        elif num.sum() == 0:\n            index += 1\n        else:\n            return cmp_number(num)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # This method sorts the list nums in the following way:\n    # - nums with positive sum of their digits are sorted after\n    # - nums with negative sum of their digits are sorted before\n    # - nums with the same sum of their digits are sorted consecutively\n    #\n    # The final list is the list returned by the method.\n\n    def _sort_index(num1, num2):\n        if num1 < num2:\n            return -1\n        elif num1 > num2:\n            return 1\n        else:\n            return 0\n\n    # Return a sorted list of nums.\n    def _sort_list(nums):\n        return sorted(nums, key=lambda x: x[1], reverse=False)\n\n    # Find the sum of digits of all items in list nums.\n    def _sum_of_digits(nums):\n        for i in range(len(nums)):\n            if nums[i] > 0:\n                return nums[i]\n            else:\n                return 0\n\n    # Calculate the value of nums at position 0.\n    def _sum_of_digits_at_position(nums, i):\n        if nums[i] > 0:\n            return nums[i]\n        else:\n            return 0\n\n    # Get the index of each item in nums at position 0.", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def f(nums):\n        \"\"\"\n        Generate a sorted list of integers based on the sum of their digits.\n        \"\"\"\n        res = [nums[i] for i in range(0, len(nums), 2)]\n        if len(res) == 1:\n            return res[0]\n        elif len(res) == 2:\n            return res[0] + res[1]\n        else:\n            return res\n    return f", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = [int(i) for i in nums]\n    nums = sorted(nums, reverse=True)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    n = len(nums)\n    if n > 1:\n        return sorted(nums, key=lambda x: x[n])\n    else:\n        return nums\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return None\n    indices = sorted(nums, key=lambda x: x.count('1'))\n    if len(indices) == 1:\n        return indices[0]\n    return indices[0] + indices[1:]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    i = 1\n    nums = list(nums)\n    while nums[i]!= 0:\n        i += 1\n    result = []\n    nums.sort()\n    for i in xrange(len(nums)):\n        nums[i] /= 10\n        result.append(i)\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _array_sorted(array, is_first):\n        \"\"\"\n        This function converts a sorted sequence of integers into a sorted list of integers.\n        If is_first is True, the function first sorts the elements in the original sequence\n        and then reverses the original sequence so that the first element is at the top. Then, it calls\n        _array_sorted on the reverse sequence. See the original article for more details.\n        \"\"\"\n        if is_first:\n            for item in array:\n                array.insert(0, item)\n            array = array.reverse()\n        for element in array:\n            sum = element[1]\n            for i in range(len(sum)):\n                if sum[i] == sum[i - 1]:\n                    array.insert(i, 1)\n                    break\n            else:\n                array.insert(0, sum[0])\n        return array\n\n    return _array_sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum([digit for digit in x]))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sum = 0\n    for num in nums:\n        sum += num\n    return sorted(nums, key=lambda num: sum)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums)\n    nums.reverse()\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    total_digits = sum(1 for x in xrange(len(nums)))\n    return sorted(nums, key=lambda x: int(total_digits * x) / 100, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def ordered_by_points(self, nums):\n        \"\"\"\n        Function which converts the given list of integers to an\n        array with sum of their digits as a value and as a sorted list\n        of indices into the original list.\n\n        For example:\n        >>> ordered_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> ordered_by_points([]) == [-1, 11, -11]\n        \"\"\"\n        results = []\n        # take a list of indices into the original list\n        index = 0\n        for num in nums:\n            index += 1\n            if index > len(nums):\n                break\n            results.append(index)\n        results.sort()\n        return results\n\n    def _order_by_points(self, nums):\n        \"\"\"\n        Sort the given list of integers according to their sum of\n        their digits.\n        \"\"\"\n        # Take a list of indices into the original list\n        index = 0\n        for num in nums:\n            index += 1\n            if index > len(nums):\n                break\n            nums[index] += 1\n            if nums[index] > len(nums):\n                break\n        index = 0\n        for num in nums:\n            index +=", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(a):\n        if len(a) > 1:\n            return sorted(a)\n        return sorted(a, key=lambda x: x[0])\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: x.sum(0).__getitem__)[0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    if nums == []:\n        return []\n\n    if nums.count(0) == 1:\n        return [int(x) for x in nums]\n\n    if nums.count(1) == 2:\n        return [int(x) for x in nums if x % 2 == 0]\n\n    if nums.count(2) == 3:\n        return [int(x) for x in nums if x % 3 == 0]\n\n    if nums.count(3) == 4:\n        return [int(x) for x in nums if x % 4 == 0]\n\n    if nums.count(4) == 5:\n        return [int(x) for x in nums if x % 5 == 0]\n\n    if nums.count(5) == 6:\n        return [int(x) for x in nums if x % 6 == 0]\n\n    return []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort_ascending(s):\n        \"\"\"\n        This function tries to sort an integer list according to the\n        sum of their digits.\n        \"\"\"\n        for i in range(len(s)):\n            if s[i] > s[i + 1:]:\n                return s[i + 1:]\n            else:\n                return s[i]\n\n    return _sort_ascending", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    order = [sum(e) for e in nums]\n    return sorted(order, key=lambda x: x[1], reverse=True)[0]\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    return sorted(total, key=lambda i: int(i) - 1)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(first, second):\n        for num in first:\n            if num < second:\n                return num\n        return second\n\n    for num in nums:\n        if num < 0:\n            num = num + 1\n        if num == 0:\n            continue\n        if num > ord(num):\n            num = 0\n        yield num\n\n    if nums is not None:\n        nums.sort(sort_by_points, reverse=True)\n        for num in nums:\n            yield num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def f(x):\n        if x[1] == 0:\n            return x[0]\n        elif x[0] == 0:\n            return x[1]\n        else:\n            return 0\n    return sorted(f(i) for i in nums)[::-1]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def lsort(lst):\n        \"\"\"\n        Sorts list of integers by their sum of their digits.\n        \"\"\"\n        def tsort(lst):\n            \"\"\"\n            Sorts list of integers by their index in original list.\n            \"\"\"\n            def index_compare(lst, num):\n                if isinstance(lst[num], int):\n                    return lst[num]\n                else:\n                    return cmp(lst[num], num)\n            index_compare = lambda lst, num: lst.index(num)\n            return cmp(lst[index_compare(lst, x)], lst[index_compare(lst[1:], y)] for x, y in zip(lst, lst[1:]))\n        \n    index_compare = lambda lst, num: lst.index(num)\n    lst = sorted(lst, key=index_compare)\n    return lst", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # print nums\n    # print'' * 100, '-' * 100\n    # print order_by_points(nums)\n    return sorted(nums, key=lambda num: (not num == 0), reverse=False)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def result(x):\n        if x < 0:\n            return -x\n        if x == 0:\n            return 0\n        if x == 1:\n            return x\n        if x == 11:\n            return 0\n        if x == -1:\n            return -x\n        if x == -11:\n            return -x\n        if x == -12:\n            return -x\n        return x\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    x = []\n    for i in range(len(nums)):\n        x.append(sum(nums[i]))\n    x = sorted(x, key=lambda x: x[1], reverse=True)\n    return x", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _order_by_points(self, nums):\n        \"\"\"\n        return sorted(self, key=lambda x : (sum(x))/len(self))\n        \"\"\"\n        def _sorted_list(nums):\n            \"\"\"\n            return sorted(nums, key=lambda x: (sum(x))/len(nums))\n            \"\"\"\n            # This should be the same as sort_literal(nums, key=lambda x: (sum(x))/len(nums))\n            return sorted(nums, key=lambda x: (sum(x))/len(nums))\n        return [num for num in nums if sum(num)] < len(nums) and _sorted_list(nums)[0] > _sorted_list(nums)[1]\n    return _order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort_func(n):\n        return n[0]\n\n    if len(nums) == 0:\n        return 0\n    elif nums[0] == 0:\n        return 0\n    elif nums[0] % 10 == 0:\n        return sorted(nums, key=lambda x: x[0])\n    else:\n        return sorted(nums, key=lambda x: x[1] + x[0] / 10)[:-1]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    digits = sorted(nums)\n    for d in digits:\n        d /= 10\n\n    total = sum(d for d in digits)\n    if total == 0:\n        return []\n\n    return digits[:-1] + [total]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return None\n    sums = []\n    for num in nums:\n        if isinstance(num, int):\n            sums.append(sum(num))\n    sums.sort(reverse=True)\n    return sums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda x: x[1])\n    return sum(x[1] for x in nums) if nums else 0\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    elif len(nums) == 1:\n        return nums[0]\n    elif len(nums) > 1:\n        return sorted(nums, key=lambda x: x.sum())\n    else:\n        return nums\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def nsp(num):\n        \"\"\"\n        Returns the integer which is the greatest common divisor of\n        ``num`` and ``2*n`` for all integers ``n``.\n        \"\"\"\n        return math.pow(2, int(math.log(num, 2))).argmax()\n    def gcd(num1, num2):\n        \"\"\"\n        Returns the greatest common divisor of ``num1`` and ``num2``,\n        in which case the list ``num2`` is empty.\n        \"\"\"\n        if num1 is None:\n            return None\n        if num2 is None:\n            return None\n        if num1 is num2:\n            return num1\n        if num1 == 0 or num2 == 0:\n            return num1\n        if num1 == num2:\n            return num1 - num2\n        return math.pow(2, int(math.log(num1, 2))).argmax()\n    def gcd_xy(x, y):\n        \"\"\"\n        Returns the greatest common divisor of ``x`` and ``y``,\n        in which case the list ``y`` is empty.\n        \"\"\"\n        if x is None:\n            return None\n        if y is None:\n            return None\n        if x == y:\n            return x\n        if x == 0:\n            return x", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        raise ValueError('nums must be specified')\n    # in Python 2.x, the digits are not positional, so it's easier\n    # to use a list instead of a list of dicts. The following code\n    # should work for all python versions, including 3.x\n    # (or python 3.x with no additions)\n    nums = [(num.digit, num) for num in nums]\n    # sorting the numbers in ascending order\n    nums.sort()\n    # write a function to sort the numbers in ascending order\n    def sorted(x):\n        \"\"\"\n        sort(x) -> int\n\n        sort(num) -> int\n        \"\"\"\n        if isinstance(x, int):\n            return x\n        return x.sort()\n\n    return sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums)!= 4:\n        print(\"Need at least 4 items\")\n        return\n    if nums[0]!= 0:\n        print(\"Item {0} is not empty\".format(nums[0]))\n    if nums[1]!= 0:\n        print(\"Item {0} is not empty\".format(nums[1]))\n    if nums[2]!= 0:\n        print(\"Item {0} is not empty\".format(nums[2]))\n    if nums[3]!= 0:\n        print(\"Item {0} is not empty\".format(nums[3]))\n    s = sum([item for item in nums if item!= 0]) + nums[0]\n    n = len(nums) - 1\n    r = 0\n    for i in range(n):\n        r = r + i\n        if r > s:\n            s = r\n    return s", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return [num for num in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n\n    result = []\n    for num in nums:\n        result.append(num)\n        for index in range(0, len(num) - 1):\n            if num[index] - num[index - 1] > num[index + 1] - num[index - 1]:\n                result.append(num[index + 1] - num[index - 1])\n        result.append(num[index + 1] - num[index - 1])\n    return sorted(result, key=lambda x: x[0])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def coder(n):\n        c = 0\n        for i in range(n):\n            c += ord(n[i])\n            if c > 127:\n                return 0\n        return c\n    return lambda num: coder(num)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(a):\n        \"\"\"\n        Sort the list of numbers by their sum of their digits.\n        Return an iterable of sorted integers.\n        \"\"\"\n        s = [sum(a) for a in a]\n        d = {}\n        for x in s:\n            d[x] = x\n        return sorted(d.values(), key=d.get, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def add(v):\n        return sorted(map(int,v))\n    def sub(v):\n        return sorted(map(int,v))\n    def swap(v):\n        return sorted(map(int,v))\n    def reverse(v):\n        return sorted(map(int,v))\n\n    def f(v):\n        return sum(map(add,v))\n    def g(v):\n        return sum(map(sub,v))\n    def h(v):\n        return sum(map(swap,v))\n    def i(v):\n        return sum(map(reverse,v))\n    def j(v):\n        return sum(map(i,v))\n    def k(v):\n        return sum(map(j,v))\n    def l(v):\n        return sum(map(k,v))\n\n    return f, g, h, i, j, k, l", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda x: int(x))\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sort_function(num1, num2):\n        \"\"\"\n        Computes the real difference between two given integers, and returns\n        the index of the item with smaller value.\n\n        >>> order_by_points([-11, -12, 1, 11]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n\n        \"\"\"\n        return abs(num2 - num1)\n\n    sortednums = sorted(nums, key=lambda num: sum(num))\n    newnums = []\n\n    for num in sortednums:\n        newnums.append(num)\n        if len(sortednums) == 1:\n            continue\n\n        if len(newnums) > 1:\n            print(\"Error: Sorts %d items, but %d items have the same digit.\" % (len(sortednums), len(newnums)))\n\n        for newnum in newnums:\n            if newnum < sortednums[0]:\n                newnums.remove(newnum)\n                newnums.insert(0, sortednums[0])\n\n    print(\"All items sorted in ascending order.\")\n\n    return newnums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    output = []\n    for i in range(len(nums)):\n        output.append(int(nums[i]))\n    output.sort(reverse=False)\n    return output", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # If there are any comparisons, we need to order the list\n    if len(nums)!= 1:\n        raise ValueError('Error in order_by_points(): there must be 1 or more values')\n    if len(nums) == 0:\n        return []\n\n    # Keep track of the index of the largest item\n    largest_index = -1\n\n    # Loop through and sort the numbers\n    for num in nums:\n        if num > largest_index:\n            largest_index = num\n\n    # Sort the numbers\n    return sorted(nums, key=lambda num: num[largest_index], reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sum = 0\n    for num in nums:\n        sum += num\n    if sum == 0:\n        return []\n    else:\n        return [num for num in nums if num!= 0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if len(nums) == 1:\n        return [int(d) for d in nums]\n    if sum(nums) == 0:\n        return []\n    index = len(nums) - 1\n    return [int(nums[index:index]) for index in xrange(index)]"]]