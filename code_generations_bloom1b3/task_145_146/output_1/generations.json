[["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if len(nums) == 1:\n        return nums\n    if len(nums) == 2:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n    if len(nums) == 3:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n    if len(nums) == 4:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n    if len(nums) == 5:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n    if len(nums) == 6:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n    if len(nums) == 7:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n    if len(nums) == 8:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n    if len(nums) == 9:\n        return [nums[0], nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort2(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort3(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort4(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort5(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort6(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort7(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort8(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort9(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort10(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort11(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if len(nums) == 0:\n        return []\n    if nums[0] == 0:\n        return nums\n    if nums[0] == 1:\n        return [nums[0]]\n    if nums[0] == 2:\n        return [nums[0]] + [nums[1]]\n    if nums[0] == 3:\n        return [nums[0]] + [nums[1]] + [nums[2]]\n    if nums[0] == 4:\n        return [nums[0]] + [nums[1]] + [nums[2]] + [nums[3]]\n    if nums[0] == 5:\n        return [nums[0]] + [nums[1]] + [nums[2]] + [nums[3]] + [nums[4]]\n    if nums[0] == 6:\n        return [nums[0]] + [nums[1]] + [nums[2]] + [nums[3]] + [nums[4]] + [nums[5]]\n    if nums[0] == 7:\n        return [nums[0]] + [nums[1]] + [nums[2]] + [nums[3]] + [nums[4]] + [nums[5]] + [nums[6]]\n    if nums[0] == 8:\n        return [nums[0]] + [nums[1]] + [nums[2]] + [num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(x, key=lambda x: x.sum(), reverse=True)\n\n    def _sort_asc(x):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(x, key=lambda x: x.sum(), reverse=False)\n\n    def _sort_desc(x):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        \"\"\"\n        return sorted(x, key=lambda x: x.sum(), reverse=True)\n\n    def _sort(x, y):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return x < y\n\n    def _sort_asc(x, y):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return x < y\n\n    def _sort_desc(x, y):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        \"\"\"\n        return x > y\n\n    def _sort_asc(x, y):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return x > y\n\n    def _sort_desc(x, y):\n        \"\"\"\n        Sort the given list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(lst):\n        \"\"\"\n        Sort the list of integers in ascending order.\n        \"\"\"\n        for i in range(len(lst)):\n            if lst[i] > lst[i - 1]:\n                return i\n        return 0\n\n    def _sort2(lst):\n        \"\"\"\n        Sort the list of integers in ascending order.\n        \"\"\"\n        for i in range(len(lst)):\n            if lst[i] > lst[i - 1]:\n                return i\n        return 0\n\n    def _sort3(lst):\n        \"\"\"\n        Sort the list of integers in ascending order.\n        \"\"\"\n        for i in range(len(lst)):\n            if lst[i] > lst[i - 1]:\n                return i\n        return 0\n\n    def _sort4(lst):\n        \"\"\"\n        Sort the list of integers in ascending order.\n        \"\"\"\n        for i in range(len(lst)):\n            if lst[i] > lst[i - 1]:\n                return i\n        return 0\n\n    def _sort5(lst):\n        \"\"\"\n        Sort the list of integers in ascending order.\n        \"\"\"\n        for i in range(len(lst)):\n            if lst[i] > lst[i - 1]:\n                return i\n        return 0\n\n    def _sort6(lst):\n        \"\"\"", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Returns a list of integers sorted in ascending order according\n        to the sum of their digits.\n        \"\"\"\n        if nums is None:\n            return []\n        if len(nums) == 0:\n            return []\n        if nums[0] == 0:\n            return nums\n        if nums[0] == nums[-1]:\n            return nums[:-1]\n        return [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n\n    if len(nums) == 1:\n        return [nums[0] for nums in nums]\n\n    if nums is None:\n        return []\n\n    if len(nums) == 2:\n        return [nums[0], nums[0]]\n\n    if nums is None:\n        return []\n\n    if len(nums) == 3:\n        return [nums[0], nums[1], nums[0]]\n\n    if nums is None:\n        return []\n\n    if len(nums) == 4:\n        return [nums[0], nums[1], nums[2], nums[1]]\n\n    if nums is None:\n        return []\n\n    if len(nums) == 5:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n\n    if nums is None:\n        return []\n\n    if len(nums) == 6:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]\n\n    if nums is None:\n        return []\n\n    if len(nums) == 7:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]]\n\n    if", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return x[1:][1:]\n\n    def _sort2(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return x[1:][1:]\n\n    def _sort3(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return x[1:][1:]\n\n    def _sort4(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return x[1:][1:]\n\n    def _sort5(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return x[1:][1:]\n\n    def _sort6(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return x[1:][1:]\n\n    def _sort7(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return x[1:][1:]\n\n    def _sort8(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return x[1:][1:]\n\n    def _sort9(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return x[1:][1:]\n\n    def _sort10(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if len(nums) == 0:\n        return []\n    if nums[0] == 0:\n        return nums\n    if nums[0] == 1:\n        return [nums[0]]\n    if nums[0] == 2:\n        return [nums[0]]\n    if nums[0] == 3:\n        return [nums[0]]\n    if nums[0] == 4:\n        return [nums[0]]\n    if nums[0] == 5:\n        return [nums[0]]\n    if nums[0] == 6:\n        return [nums[0]]\n    if nums[0] == 7:\n        return [nums[0]]\n    if nums[0] == 8:\n        return [nums[0]]\n    if nums[0] == 9:\n        return [nums[0]]\n    if nums[0] == 10:\n        return [nums[0]]\n    if nums[0] == 11:\n        return [nums[0]]\n    if nums[0] == 12:\n        return [nums[0]]\n    if nums[0] == 13:\n        return [nums[0]]\n    if nums[0] == 14:\n        return [nums[0]]\n    if nums[0] == 15:\n        return [nums[0]]\n    if nums[0] == 16:\n        return [nums[0]]\n    if nums[0] == 17:\n        return [nums[0]]\n    if nums[0] == 18:\n        return [nums[0]]\n    if nums[0] == 19:\n        return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Returns a list of integers sorted according to the sum of their digits.\n        \"\"\"\n        if len(nums) == 0:\n            return []\n        if nums[0] == 0:\n            return nums\n        if nums[0] == 1:\n            return nums\n        return [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12]\n    return sorted(nums, key=_sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return x[1:][1:]\n    return sorted(nums, key=_sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Returns a list of integers sorted according to the sum of their digits.\n        \"\"\"\n        if nums is None:\n            return []\n        if len(nums) == 0:\n            return []\n        if nums[0] == 0:\n            return nums\n        if nums[0] == 1:\n            return [nums[0]]\n        if nums[0] == 2:\n            return [nums[0]] + [nums[1]]\n        if nums[0] == 3:\n            return [nums[0]] + [nums[1]] + [nums[2]]\n        if nums[0] == 4:\n            return [nums[0]] + [nums[1]] + [nums[2]] + [nums[3]]\n        if nums[0] == 5:\n            return [nums[0]] + [nums[1]] + [nums[2]] + [nums[3]] + [nums[4]]\n        if nums[0] == 6:\n            return [nums[0]] + [nums[1]] + [nums[2]] + [nums[3]] + [nums[4]] + [nums[5]]\n        if nums[0] == 7:\n            return [nums[0]] + [nums[1]] + [nums[2]] + [nums[3]] + [nums[4]] + [nums[5]] + [num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if len(x) == 1:\n            return x[0]\n        elif len(x) == 2:\n            return x[0] + x[1]\n        else:\n            return x[0] + x[1] + x[2]\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12]\n    return sorted(nums, key=_sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return x[1:][1:]\n\n    def _reverse(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return x[1:][1:]\n\n    def _sort_and_reverse(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return x[1:][1:]\n\n    def _sort_and_reverse_and_reverse(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return x[1:][1:]\n\n    def _sort_and_reverse_and_reverse_and_reverse(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return x[1:][1:]\n\n    def _sort_and_reverse_and_reverse_and_reverse_and_reverse(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return x[1:][1:]\n\n    def _sort_and_reverse_and_reverse_and_reverse_and_reverse_and_reverse(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return x[1:][1:]\n\n    def _sort_and_reverse_and_reverse_and_reverse_and_reverse_and_reverse(x):\n        if x[0] == 0:\n            return x[1:]\n        else:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12]\n    return sorted(nums, key=_sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        if nums is None:\n            return []\n        if len(nums) == 0:\n            return nums\n        if nums[0] == 0:\n            return nums\n        if nums[1] == 0:\n            return nums\n        if nums[2] == 0:\n            return nums\n        if nums[3] == 0:\n            return nums\n        if nums[4] == 0:\n            return nums\n        if nums[5] == 0:\n            return nums\n        if nums[6] == 0:\n            return nums\n        if nums[7] == 0:\n            return nums\n        if nums[8] == 0:\n            return nums\n        if nums[9] == 0:\n            return nums\n        if nums[10] == 0:\n            return nums\n        if nums[11] == 0:\n            return nums\n        if nums[12] == 0:\n            return nums\n        return nums\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [nums[0], nums[0]]\n        if len(nums) == 2:\n            return [nums[0], nums[0]], [nums[1], nums[1]]\n        if len(nums) == 3:\n            return [nums[0], nums[0]], [nums[1], nums[0]], [nums[2], nums[1]]\n        if len(nums) == 4:\n            return [nums[0], nums[0]], [nums[1], nums[0]], [nums[2], nums[1]], [nums[3], nums[2]]\n        if len(nums) == 5:\n            return [nums[0], nums[0]], [nums[1], nums[0]], [nums[2], nums[0]], [nums[3], nums[0]], [nums[4], nums[1]]\n        if len(nums) == 6:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        if len(nums) == 0:\n            return []\n        if nums[0] == 0:\n            return nums\n        if nums[0] == nums[-1]:\n            return nums[:-1]\n        return nums[:-1] + [nums[-1]]\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        if nums is None:\n            return []\n        if len(nums) == 1:\n            return nums[0]\n        if nums[0] == 0:\n            return nums\n        return sorted(nums, key=lambda x: x[0], reverse=True)\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort2(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort3(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort4(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort5(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort6(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort7(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort8(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort9(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort10(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort11(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        if nums is None:\n            return []\n        if len(nums) == 0:\n            return nums\n        if nums[0] == 0:\n            return nums\n        if nums[0] > nums[-1]:\n            return nums\n        return nums[:-1]\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if len(nums) == 0:\n            return []\n        if nums[0] == 0:\n            return nums\n        if nums[0] > nums[-1]:\n            return nums\n        return nums[:-1]\n\n    def _sort2(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if len(nums) == 0:\n            return []\n        if nums[0] == 0:\n            return nums\n        if nums[0] > nums[-1]:\n            return nums\n        return nums[:-1]\n\n    def _sort3(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if len(nums) == 0:\n            return []\n        if nums[0] == 0:\n            return nums\n        if nums[0] > nums[-1]:\n            return nums\n        return nums[:-1]\n\n    def _sort4(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if len(nums) == 0:\n            return []\n        if nums[0] == 0:\n            return nums\n        if nums[0] > nums[-1]:\n            return nums\n        return nums[:-1]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Returns a list of integers sorted in ascending order\n        according to the sum of their digits.\n        \"\"\"\n        if nums is None:\n            return []\n        if len(nums) == 0:\n            return []\n        if nums[0] == 0:\n            return nums\n        if nums[0] > nums[-1]:\n            return nums\n        return nums[:-1]\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if len(nums) == 0:\n        return []\n    if nums[0] == 0:\n        return [nums[0]]\n    if nums[0] == 1:\n        return [nums[0]]\n    if nums[0] == 2:\n        return [nums[0]]\n    if nums[0] == 3:\n        return [nums[0]]\n    if nums[0] == 4:\n        return [nums[0]]\n    if nums[0] == 5:\n        return [nums[0]]\n    if nums[0] == 6:\n        return [nums[0]]\n    if nums[0] == 7:\n        return [nums[0]]\n    if nums[0] == 8:\n        return [nums[0]]\n    if nums[0] == 9:\n        return [nums[0]]\n    if nums[0] == 10:\n        return [nums[0]]\n    if nums[0] == 11:\n        return [nums[0]]\n    if nums[0] == 12:\n        return [nums[0]]\n    if nums[0] == 13:\n        return [nums[0]]\n    if nums[0] == 14:\n        return [nums[0]]\n    if nums[0] == 15:\n        return [nums[0]]\n    if nums[0] == 16:\n        return [nums[0]]\n    if nums[0] == 17:\n        return [nums[0]]\n    if nums[0] == 18:\n        return [nums[0]]\n    if nums[0] == 19:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return cmp(x[0], x[1])\n\n    def _sort2(x):\n        return cmp(x[0], x[1])\n\n    def _sort3(x):\n        return cmp(x[0], x[1])\n\n    def _sort4(x):\n        return cmp(x[0], x[1])\n\n    def _sort5(x):\n        return cmp(x[0], x[1])\n\n    def _sort6(x):\n        return cmp(x[0], x[1])\n\n    def _sort7(x):\n        return cmp(x[0], x[1])\n\n    def _sort8(x):\n        return cmp(x[0], x[1])\n\n    def _sort9(x):\n        return cmp(x[0], x[1])\n\n    def _sort10(x):\n        return cmp(x[0], x[1])\n\n    def _sort11(x):\n        return cmp(x[0], x[1])\n\n    def _sort12(x):\n        return cmp(x[0], x[1])\n\n    def _sort13(x):\n        return cmp(x[0], x[1])\n\n    def _sort14(x):\n        return cmp(x[0], x[1])\n\n    def _sort15", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return x[0] + x[1]\n\n    def _sort2(x):\n        return x[0] + x[1]\n\n    def _sort3(x):\n        return x[0] + x[1] + x[2]\n\n    def _sort4(x):\n        return x[0] + x[1] + x[2] + x[3]\n\n    def _sort5(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4]\n\n    def _sort6(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5]\n\n    def _sort7(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6]\n\n    def _sort8(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7]\n\n    def _sort9(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8]\n\n    def _sort10(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] +", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n\n    if len(nums) == 0:\n        return []\n\n    if nums[0] == 0:\n        return nums\n\n    if nums[0] == 1:\n        return [nums[0]]\n\n    if nums[0] == 2:\n        return [nums[0]]\n\n    if nums[0] == 3:\n        return [nums[0]]\n\n    if nums[0] == 4:\n        return [nums[0]]\n\n    if nums[0] == 5:\n        return [nums[0]]\n\n    if nums[0] == 6:\n        return [nums[0]]\n\n    if nums[0] == 7:\n        return [nums[0]]\n\n    if nums[0] == 8:\n        return [nums[0]]\n\n    if nums[0] == 9:\n        return [nums[0]]\n\n    if nums[0] == 10:\n        return [nums[0]]\n\n    if nums[0] == 11:\n        return [nums[0]]\n\n    if nums[0] == 12:\n        return [nums[0]]\n\n    if nums[0] == 13:\n        return [nums[0]]\n\n    if nums[0] == 14:\n        return [nums[0]]\n\n    if nums[0] == 15:\n        return [nums[0]]\n\n    if nums[0] == 16:\n        return [nums[0]]\n\n    if nums[0] == 17:\n        return [nums[0]]\n\n    if nums[0] == 18:\n        return [nums[0]]\n\n    if nums[0] == 19:\n        return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(list):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(list, key=lambda x: x[0])\n\n    def _sort2(list):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        \"\"\"\n        return sorted(list, reverse=True)\n\n    def _sort3(list):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        \"\"\"\n        return sorted(list, reverse=False)\n\n    def _sort4(list):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        \"\"\"\n        return sorted(list, reverse=True)\n\n    def _sort5(list):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        \"\"\"\n        return sorted(list, reverse=False)\n\n    def _sort6(list):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        \"\"\"\n        return sorted(list, reverse=True)\n\n    def _sort7(list):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        \"\"\"\n        return sorted(list, reverse=False)\n\n    def _sort8(list):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        \"\"\"\n        return sorted(list, reverse=True)\n\n    def _sort9", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        if nums is None:\n            return []\n        if len(nums) == 0:\n            return nums\n        if nums[0] == 0:\n            return nums\n        return sorted(nums, key=lambda x: x[0])\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(l):\n        \"\"\"\n        Sort the list by sum of digits.\n        \"\"\"\n        for i in range(len(l)):\n            if l[i] > l[i - 1]:\n                return i\n        return 0\n\n    def _sort_by_index(l):\n        \"\"\"\n        Sort the list by index.\n        \"\"\"\n        for i in range(len(l)):\n            if l[i] > l[i - 1]:\n                return i\n        return 0\n\n    def _sort_by_sum(l):\n        \"\"\"\n        Sort the list by sum of digits.\n        \"\"\"\n        for i in range(len(l)):\n            if l[i] > l[i - 1]:\n                return i\n        return 0\n\n    def _sort_by_index_and_sum(l):\n        \"\"\"\n        Sort the list by index and sum of digits.\n        \"\"\"\n        for i in range(len(l)):\n            if l[i] > l[i - 1]:\n                return i, l[i]\n        return 0\n\n    def _sort_by_sum_and_index(l):\n        \"\"\"\n        Sort the list by sum of digits and index.\n        \"\"\"\n        for i in range(len(l)):\n            if l[i] > l[i - 1]:\n                return i, l[i]\n        return 0", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if len(x) == 1:\n            return x[0]\n        return x[1:]\n\n    def _sort_by_index(x):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if len(x) == 1:\n            return x[0]\n        return x[1:]\n\n    def _sort_by_sum(x):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if len(x) == 1:\n            return x[0]\n        return x[1:]\n\n    def _sort_by_index_and_sum(x):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if len(x) == 1:\n            return x[0]\n        return x[1:]\n\n    def _sort_by_sum_and_index(x):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if len(x) == 1:\n            return x[0]\n        return x[1:]\n\n    def _sort_by_sum_and_index_and_index(x):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if len(x) == 1:\n            return x[0]\n        return x[1:]\n\n    def _sort_by_sum_and_index_and_index", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12]\n\n    def _sort2(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12]\n\n    def _sort3(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12]\n\n    def _sort4(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12]\n\n    def _sort5(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12]\n\n    def _sort6(x):\n        return x", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return cmp(x[0], x[1])\n\n    def _sort2(x):\n        return cmp(x[0], x[1])\n\n    def _sort3(x):\n        return cmp(x[0], x[1])\n\n    def _sort4(x):\n        return cmp(x[0], x[1])\n\n    def _sort5(x):\n        return cmp(x[0], x[1])\n\n    def _sort6(x):\n        return cmp(x[0], x[1])\n\n    def _sort7(x):\n        return cmp(x[0], x[1])\n\n    def _sort8(x):\n        return cmp(x[0], x[1])\n\n    def _sort9(x):\n        return cmp(x[0], x[1])\n\n    def _sort10(x):\n        return cmp(x[0], x[1])\n\n    def _sort11(x):\n        return cmp(x[0], x[1])\n\n    def _sort12(x):\n        return cmp(x[0], x[1])\n\n    def _sort13(x):\n        return cmp(x[0], x[1])\n\n    def _sort14(x):\n        return cmp(x[0], x[1])\n\n    def _sort15", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        if nums is None:\n            return []\n        if nums is None:\n            return [nums]\n        if nums is None:\n            return [nums[0]]\n        if nums[0] == 0:\n            return [nums[0]]\n        if nums[0] == 1:\n            return [nums[0]]\n        if nums[0] == 2:\n            return [nums[0]]\n        if nums[0] == 3:\n            return [nums[0]]\n        if nums[0] == 4:\n            return [nums[0]]\n        if nums[0] == 5:\n            return [nums[0]]\n        if nums[0] == 6:\n            return [nums[0]]\n        if nums[0] == 7:\n            return [nums[0]]\n        if nums[0] == 8:\n            return [nums[0]]\n        if nums[0] == 9:\n            return [nums[0]]\n        if nums[0] == 10:\n            return [nums[0]]\n        if nums[0] == 11:\n            return [nums[0]]\n        if nums[0] == 12:\n            return [nums[0]]\n        if nums[0] == 13:\n            return [nums[0]]\n        if nums[0] == 14:\n            return [nums[0]]\n        if nums[0] == 15:\n            return [nums[0]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        def _sort_asc(lst):\n            \"\"\"\n            Sort the given list of integers in ascending order according to the sum of their digits.\n            \"\"\"\n            for i in range(len(lst)):\n                if lst[i] > lst[i-1]:\n                    return i\n            return -1\n        return sorted(lst, key=_sort_asc, reverse=True)\n\n    def _sort_asc(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        def _sort_desc(lst):\n            \"\"\"\n            Sort the given list of integers in descending order according to the sum of their digits.\n            \"\"\"\n            for i in range(len(lst)):\n                if lst[i] < lst[i-1]:\n                    return i\n            return 1\n        return sorted(lst, key=_sort_desc, reverse=True)\n\n    def _sort(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        def _sort_asc(lst):\n            \"\"\"\n            Sort the given list of integers in ascending order according to the sum of", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(lst, key=lambda x: x.sum(), reverse=True)\n\n    def _sort2(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(lst, key=lambda x: x.sum(), reverse=False)\n\n    def _sort3(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(lst, key=lambda x: x.sum(), reverse=False)\n\n    def _sort4(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(lst, key=lambda x: x.sum(), reverse=False)\n\n    def _sort5(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(lst, key=lambda x: x.sum(), reverse=False)\n\n    def _sort6(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        \"\"\"\n        Sort the list of integers in ascending order.\n        \"\"\"\n        return sorted(x, key=lambda x: x[0])\n\n    def _sort2(x):\n        \"\"\"\n        Sort the list of integers in ascending order.\n        \"\"\"\n        return sorted(x, reverse=True)\n\n    def _sort3(x):\n        \"\"\"\n        Sort the list of integers in ascending order.\n        \"\"\"\n        return sorted(x, reverse=False)\n\n    def _sort4(x):\n        \"\"\"\n        Sort the list of integers in ascending order.\n        \"\"\"\n        return sorted(x, reverse=True)\n\n    def _sort5(x):\n        \"\"\"\n        Sort the list of integers in ascending order.\n        \"\"\"\n        return sorted(x, reverse=False)\n\n    def _sort6(x):\n        \"\"\"\n        Sort the list of integers in ascending order.\n        \"\"\"\n        return sorted(x, reverse=True)\n\n    def _sort7(x):\n        \"\"\"\n        Sort the list of integers in ascending order.\n        \"\"\"\n        return sorted(x, reverse=False)\n\n    def _sort8(x):\n        \"\"\"\n        Sort the list of integers in ascending order.\n        \"\"\"\n        return sorted(x, reverse=True)\n\n    def _sort9(x):\n        \"\"\"\n        Sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        if nums is None:\n            return []\n        if len(nums) == 0:\n            return []\n        if nums[0] == 0:\n            return nums\n        if nums[0] > nums[-1]:\n            return nums\n        return nums[:-1]\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(lst, key=lambda x: x.sum())\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted_list(list):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        if len(list) == 0:\n            return []\n        if len(list) == 1:\n            return list[0]\n        if len(list) == 2:\n            return list[0], list[1]\n        if len(list) == 3:\n            return list[0], list[1], list[2]\n        if len(list) == 4:\n            return list[0], list[1], list[2], list[3]\n        if len(list) == 5:\n            return list[0], list[1], list[2], list[3], list[4]\n        if len(list) == 6:\n            return list[0], list[1], list[2], list[3], list[4], list[5]\n        if len(list) == 7:\n            return list[0], list[1], list[2], list[3], list[4], list[5], list[6]\n        if len(list) == 8:\n            return list[0], list[1], list[2], list[3], list[4], list[5], list[6], list[7]\n        if len(list) == 9:\n            return list[0], list[1], list[2], list[3], list[4], list[5], list[6], list[7],", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        def _sort_func(lst):\n            \"\"\"\n            Sort the given list of integers in ascending order according to\n            the sum of their digits.\n            \"\"\"\n            return sorted(lst, key=lambda x: x.sum())\n\n        return _sort_func\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        def _sort_order(lst):\n            \"\"\"\n            Sort the given list of integers in ascending order.\n            \"\"\"\n            def _sort(lst):\n                \"\"\"\n                Sort the given list of integers in ascending order.\n                \"\"\"\n                return sorted(lst, key=lambda x: x.sum())\n            return sorted(lst, key=_sort_order)\n        return _sort\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        if len(nums) == 0:\n            return []\n        if nums[0] == 0:\n            return nums\n        return [nums[-1] + nums[-1] for nums in nums]\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        if nums == []:\n            return []\n        if len(nums) == 1:\n            return [nums[0],]\n        if len(nums) == 2:\n            return [nums[0], nums[1],]\n        if len(nums) == 3:\n            return [nums[0], nums[1], nums[2],]\n        if len(nums) == 4:\n            return [nums[0], nums[1], nums[2], nums[3],]\n        if len(nums) == 5:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4],]\n        if len(nums) == 6:\n            return [nums[0], nums[1], nums[2], nums[", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n\n    if len(nums) == 1:\n        return [int(x) for x in nums]\n    else:\n        return sorted(nums, key=lambda x: x[0], reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12]\n    return sorted(nums, key=_sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted_list(lst):\n        \"\"\"\n        Returns a sorted list of integers.\n        \"\"\"\n        if len(lst) == 0:\n            return []\n        else:\n            return sorted(lst, key=lambda x: x[0], reverse=True)\n\n    def sorted_list2(lst):\n        \"\"\"\n        Returns a sorted list of integers.\n        \"\"\"\n        if len(lst) == 0:\n            return []\n        else:\n            return sorted(lst, key=lambda x: x[0], reverse=False)\n\n    def sorted_list3(lst):\n        \"\"\"\n        Returns a sorted list of integers.\n        \"\"\"\n        if len(lst) == 0:\n            return []\n        else:\n            return sorted(lst, key=lambda x: x[0], reverse=False)\n\n    def sorted_list4(lst):\n        \"\"\"\n        Returns a sorted list of integers.\n        \"\"\"\n        if len(lst) == 0:\n            return []\n        else:\n            return sorted(lst, key=lambda x: x[0], reverse=False)\n\n    def sorted_list5(lst):\n        \"\"\"\n        Returns a sorted list of integers.\n        \"\"\"\n        if len(lst) == 0:\n            return []\n        else:\n            return sorted(lst, key=lambda x: x[0], reverse=False)\n\n    def sorted_list6(lst):\n        \"\"\"", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(x, key=lambda x: x.sum(), reverse=True)\n\n    def _reverse(x):\n        \"\"\"\n        Reverse the given list of integers in ascending order.\n        \"\"\"\n        return sorted(x, reverse=True)\n\n    def _sort_and_reverse(x):\n        \"\"\"\n        Sort and reverse the given list of integers in ascending order.\n        \"\"\"\n        return sorted(x, key=lambda x: x.sum(), reverse=False)\n\n    def _sort_and_reverse_and_reverse(x):\n        \"\"\"\n        Sort and reverse and reverse the given list of integers in ascending order.\n        \"\"\"\n        return sorted(x, key=lambda x: x.sum(), reverse=True, reverse=False)\n\n    def _sort_and_reverse_and_reverse_and_reverse(x):\n        \"\"\"\n        Sort and reverse and reverse and reverse the given list of integers in ascending order.\n        \"\"\"\n        return sorted(x, key=lambda x: x.sum(), reverse=True, reverse=True, reverse=False)\n\n    def _sort_and_reverse_and_reverse_and_reverse_and_reverse(x):\n        \"\"\"\n        Sort and reverse and reverse and reverse the given list of", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        if len(nums) == 0:\n            return []\n        if nums == []:\n            return nums\n        if nums[0] == 0:\n            return nums\n        if nums[1] == 0:\n            return nums\n        if nums[2] == 0:\n            return nums\n        if nums[3] == 0:\n            return nums\n        if nums[4] == 0:\n            return nums\n        if nums[5] == 0:\n            return nums\n        if nums[6] == 0:\n            return nums\n        if nums[7] == 0:\n            return nums\n        if nums[8] == 0:\n            return nums\n        if nums[9] == 0:\n            return nums\n        if nums[10] == 0:\n            return nums\n        if nums[11] == 0:\n            return nums\n        if nums[12] ==", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n\n    if len(nums) == 0:\n        return []\n\n    if len(nums) == 1:\n        return [nums[0],]\n\n    if len(nums) == 2:\n        return [nums[0], nums[1],]\n\n    if len(nums) == 3:\n        return [nums[0], nums[1], nums[2]]\n\n    if len(nums) == 4:\n        return [nums[0], nums[1], nums[2]], [nums[2], nums[3]]\n\n    if len(nums) == 5:\n        return [nums[0], nums[1], nums[2]], [nums[2], nums[3]], [nums[4]]\n\n    if len(nums) == 6:\n        return [nums[0], nums[1], nums[2]], [nums[2], nums[3]], [nums[4]], [nums[5]]\n\n    if len(nums) == 7:\n        return [nums[0], nums[1], nums[2]], [nums[2], nums[3]], [nums[4]], [nums[5]], [nums[6]]\n\n    if len(nums) == 8:\n        return [num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n    if len(nums) == 1:\n        return [nums[0],]\n    if len(nums) == 2:\n        return [nums[0], nums[1],]\n    if len(nums) == 3:\n        return [nums[0], nums[1], nums[2],]\n    if len(nums) == 4:\n        return [nums[0], nums[1], nums[2], nums[3],]\n    if len(nums) == 5:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4],]\n    if len(nums) == 6:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5],]\n    if len(nums) == 7:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6],]\n    if len(nums) == 8:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7],]\n    if len(nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n    if len(nums) == 1:\n        return [nums[0] for nums in nums]\n    if len(nums) == 2:\n        return [nums[0], nums[1] for nums in nums]\n    if len(nums) == 3:\n        return [nums[0], nums[1], nums[2] for nums in nums]\n    if len(nums) == 4:\n        return [nums[0], nums[1], nums[2], nums[3] for nums in nums]\n    if len(nums) == 5:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4] for nums in nums]\n    if len(nums) == 6:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5] for nums in nums]\n    if len(nums) == 7:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6] for nums in nums]\n    if len(nums) == 8:\n        return [nums[0], nums[1], nums[2]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        if nums is None:\n            return []\n        if len(nums) == 0:\n            return nums\n        if nums[0] == 0:\n            return nums\n        return sorted(nums, key=lambda x: x[0], reverse=True)\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n\n    if len(nums) == 0:\n        return []\n\n    if nums == [1, 11, -1, -11, -12] or nums == []:\n        return nums\n\n    if len(nums) == 3:\n        return [nums[i] for i in range(0, len(nums), 2)]\n\n    if len(nums) == 4:\n        return [nums[i] for i in range(0, len(nums), 2)]\n\n    if len(nums) == 5:\n        return [nums[i] for i in range(0, len(nums), 2)]\n\n    if len(nums) == 6:\n        return [nums[i] for i in range(0, len(nums), 2)]\n\n    if len(nums) == 7:\n        return [nums[i] for i in range(0, len(nums), 2)]\n\n    if len(nums) == 8:\n        return [nums[i] for i in range(0, len(nums), 2)]\n\n    if len(nums) == 9:\n        return [nums[i] for i in range(0, len(nums), 2)]\n\n    if len(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        if nums is None:\n            return []\n        if nums is None:\n            return [nums]\n        if len(nums) == 0:\n            return [nums]\n        if nums[0] == 0:\n            return [nums]\n        if nums[1] == 0:\n            return [nums[0]]\n        if nums[2] == 0:\n            return [nums[0]]\n        if nums[3] == 0:\n            return [nums[0]]\n        if nums[4] == 0:\n            return [nums[0]]\n        if nums[5] == 0:\n            return [nums[0]]\n        if nums[6] == 0:\n            return [nums[0]]\n        if nums[7] == 0:\n            return [nums[0]]\n        if nums[8] == 0:\n            return [nums[0]]\n        if nums[9] == 0:\n            return [nums[0]]\n        if nums[10] == 0:\n            return [nums[0]]\n        if nums[11] == 0:\n            return [nums[0]]\n        if nums[12] == 0:\n            return [nums[0]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if len(x) == 1:\n            return x[0]\n        elif len(x) == 2:\n            return x[0], x[1]\n        elif len(x) == 3:\n            return x[0], x[1], x[2]\n        elif len(x) == 4:\n            return x[0], x[1], x[2], x[3]\n        elif len(x) == 5:\n            return x[0], x[1], x[2], x[3], x[4]\n        elif len(x) == 6:\n            return x[0], x[1], x[2], x[3], x[4], x[5]\n        elif len(x) == 7:\n            return x[0], x[1], x[2], x[3], x[4], x[5], x[6]\n        elif len(x) == 8:\n            return x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7]\n        else:\n            raise ValueError(\"Unknown order of integers\")\n\n    def _sort2(x):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if len(x) == 1:\n            return x[0]\n        elif len(x) ==", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted_list(list):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(list, key=lambda x: x.sum(), reverse=True)\n\n    def sorted_list2(list):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(list, key=lambda x: x.sum(), reverse=False)\n\n    def sorted_list3(list):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(list, key=lambda x: x.sum(), reverse=False)\n\n    def sorted_list4(list):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(list, key=lambda x: x.sum(), reverse=False)\n\n    def sorted_list5(list):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(list, key=lambda x: x.sum(), reverse=False)\n\n    def sorted_list6(list):\n        \"\"\"\n        Sort the given list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return cmp(x[0], x[1])\n\n    def _sort2(x):\n        return cmp(x[0], x[1])\n\n    def _sort3(x):\n        return cmp(x[0], x[1])\n\n    def _sort4(x):\n        return cmp(x[0], x[1])\n\n    def _sort5(x):\n        return cmp(x[0], x[1])\n\n    def _sort6(x):\n        return cmp(x[0], x[1])\n\n    def _sort7(x):\n        return cmp(x[0], x[1])\n\n    def _sort8(x):\n        return cmp(x[0], x[1])\n\n    def _sort9(x):\n        return cmp(x[0], x[1])\n\n    def _sort10(x):\n        return cmp(x[0], x[1])\n\n    def _sort11(x):\n        return cmp(x[0], x[1])\n\n    def _sort12(x):\n        return cmp(x[0], x[1])\n\n    def _sort13(x):\n        return cmp(x[0], x[1])\n\n    def _sort14(x):\n        return cmp(x[0], x[1])\n\n    def _sort15", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        if len(nums) == 0:\n            return []\n        if nums[0] == 0:\n            return nums\n        if nums[0] == nums[-1]:\n            return nums[:-1]\n        return [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] +", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12]\n    return sorted(nums, key=_sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12]\n    return sorted(nums, key=_sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(lst):\n        \"\"\"\n        Sort the list of integers by sum of their digits.\n        \"\"\"\n        return sorted(lst, key=lambda x: x.sum(), reverse=True)\n\n    def _sort_by_index(lst):\n        \"\"\"\n        Sort the list of integers by index.\n        \"\"\"\n        return sorted(lst, key=lambda x: x.index, reverse=True)\n\n    def _sort_by_sum(lst):\n        \"\"\"\n        Sort the list of integers by sum of their digits.\n        \"\"\"\n        return sorted(lst, key=lambda x: x.sum(), reverse=True)\n\n    def _sort_by_index_and_sum(lst):\n        \"\"\"\n        Sort the list of integers by index and sum of their digits.\n        \"\"\"\n        return sorted(lst, key=lambda x: x.index_and_sum(), reverse=True)\n\n    def _sort_by_index_and_sum_and_index(lst):\n        \"\"\"\n        Sort the list of integers by index and sum of their digits and index.\n        \"\"\"\n        return sorted(lst, key=lambda x: x.index_and_sum_and_index(), reverse=True)\n\n    def _sort_by_index_and_sum_and_index_and_sum(lst):\n        \"\"\"\n        Sort the list of integers by index and sum of their digits and index and sum of their digits", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if len(nums) == 0:\n        return []\n    if nums[0] == 0:\n        return nums\n    if nums[0] == 1:\n        return [nums[0]]\n    if nums[0] == 2:\n        return [nums[0]]\n    if nums[0] == 3:\n        return [nums[0]]\n    if nums[0] == 4:\n        return [nums[0]]\n    if nums[0] == 5:\n        return [nums[0]]\n    if nums[0] == 6:\n        return [nums[0]]\n    if nums[0] == 7:\n        return [nums[0]]\n    if nums[0] == 8:\n        return [nums[0]]\n    if nums[0] == 9:\n        return [nums[0]]\n    if nums[0] == 10:\n        return [nums[0]]\n    if nums[0] == 11:\n        return [nums[0]]\n    if nums[0] == 12:\n        return [nums[0]]\n    if nums[0] == 13:\n        return [nums[0]]\n    if nums[0] == 14:\n        return [nums[0]]\n    if nums[0] == 15:\n        return [nums[0]]\n    if nums[0] == 16:\n        return [nums[0]]\n    if nums[0] == 17:\n        return [nums[0]]\n    if nums[0] == 18:\n        return [nums[0]]\n    if nums[0] == 19:\n        return [", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [nums[0], nums[0]]\n    if len(nums) == 2:\n        return [nums[0], nums[0]], [nums[1], nums[1]]\n    if len(nums) == 3:\n        return [nums[0], nums[0]], [nums[1], nums[0]], [nums[2], nums[1]]\n    if len(nums) == 4:\n        return [nums[0], nums[0]], [nums[1], nums[0]], [nums[2], nums[1]], [nums[3], nums[2]]\n    if len(nums) == 5:\n        return [nums[0], nums[0]], [nums[1], nums[0]], [nums[2], nums[0]], [nums[3], nums[1]], [nums[4], nums[2]]\n    if len(nums) == 6:\n        return [nums[0], nums[0]], [nums[1], nums[0]], [nums[2], nums[0]], [nums[3], nums[0]], [nums[4], nums[1]], [nums[5], nums[2]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if len(x) == 1:\n            return x[0]\n        else:\n            return sorted(x, key=lambda x: x[0], reverse=True)\n\n    def _reverse(x):\n        \"\"\"\n        Reverse the given list of integers in ascending order.\n        \"\"\"\n        if len(x) == 1:\n            return x[0]\n        else:\n            return sorted(x, reverse=True)\n\n    def _sum(x):\n        \"\"\"\n        Sum the given list of integers in ascending order.\n        \"\"\"\n        return sum(x)\n\n    def _max(x):\n        \"\"\"\n        Max the given list of integers in ascending order.\n        \"\"\"\n        return max(x)\n\n    def _min(x):\n        \"\"\"\n        Min the given list of integers in ascending order.\n        \"\"\"\n        return min(x)\n\n    def _sum_of_digits(x):\n        \"\"\"\n        Sum of the digits of the given list of integers in ascending order.\n        \"\"\"\n        return sum(x)\n\n    def _sum_of_digits_asc(x):\n        \"\"\"\n        Sum of the digits of the given list of integers in ascending order.\n        \"\"\"\n        return sum(x, reverse=True)\n\n    def _sum", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if len(nums) == 0:\n        return []\n    if nums[0] == 0:\n        return nums\n    if nums[0] == 1:\n        return [nums[0]]\n    if nums[0] == 2:\n        return [nums[0]]\n    if nums[0] == 3:\n        return [nums[0]]\n    if nums[0] == 4:\n        return [nums[0]]\n    if nums[0] == 5:\n        return [nums[0]]\n    if nums[0] == 6:\n        return [nums[0]]\n    if nums[0] == 7:\n        return [nums[0]]\n    if nums[0] == 8:\n        return [nums[0]]\n    if nums[0] == 9:\n        return [nums[0]]\n    if nums[0] == 10:\n        return [nums[0]]\n    if nums[0] == 11:\n        return [nums[0]]\n    if nums[0] == 12:\n        return [nums[0]]\n    return [nums[0]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n    if len(nums) == 1:\n        return [nums[0] for nums in nums]\n    if len(nums) == 2:\n        return [nums[0], nums[1] for nums in nums]\n    if len(nums) == 3:\n        return [nums[0], nums[1], nums[2] for nums in nums]\n    if len(nums) == 4:\n        return [nums[0], nums[1], nums[2], nums[3] for nums in nums]\n    if len(nums) == 5:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4] for nums in nums]\n    if len(nums) == 6:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5] for nums in nums]\n    if len(nums) == 7:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6] for nums in nums]\n    if len(nums) == 8:\n        return [nums[0], nums[1], nums[2]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        if len(nums) == 0:\n            return []\n        if nums == []:\n            return nums\n        if nums[0] == 0:\n            return nums\n        if nums[0] == 1:\n            return nums\n        if nums[0] == 2:\n            return nums\n        if nums[0] == 3:\n            return nums\n        if nums[0] == 4:\n            return nums\n        if nums[0] == 5:\n            return nums\n        if nums[0] == 6:\n            return nums\n        if nums[0] == 7:\n            return nums\n        if nums[0] == 8:\n            return nums\n        if nums[0] == 9:\n            return nums\n        if nums[0] == 10:\n            return nums\n        if nums[0] == 11:\n            return nums\n        if nums[0] == 12:\n            return nums\n        return nums\n\n    return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted_list(list):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        if len(list) == 0:\n            return []\n        if len(list) == 1:\n            return list[0]\n        if len(list) == 2:\n            return list[0] + list[1]\n        if len(list) == 3:\n            return list[0] + list[1] + list[2]\n        if len(list) == 4:\n            return list[0] + list[1] + list[2] + list[3]\n        if len(list) == 5:\n            return list[0] + list[1] + list[2] + list[3] + list[4]\n        if len(list) == 6:\n            return list[0] + list[1] + list[2] + list[3] + list[4] + list[5]\n        if len(list) == 7:\n            return list[0] + list[1] + list[2] + list[3] + list[4] + list[5] + list[6]\n        if len(list) == 8:\n            return list[0] + list[1] + list[2] + list[3] + list[4] + list[5] + list[6] + list[7]\n        if len(list) == 9:\n            return list[0] + list[1] + list[2] + list[3] + list[4] + list[5] + list[6] + list[7] +", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12]\n    return sorted(nums, key=_sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return x[1:][1:]\n    return sorted(nums, key=_sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)\n\n    def _sort2(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum(), reverse=False)\n\n    def _sort3(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum(), reverse=False)\n\n    def _sort4(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum(), reverse=False)\n\n    def _sort5(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum(), reverse=False)\n\n    def _sort6(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum(), reverse=False)\n\n    def _sort7(nums):", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if len(nums) == 0:\n        return []\n    if nums[0] == 0:\n        return nums\n    if nums[0] == 1:\n        return [nums[0]]\n    if nums[0] == 2:\n        return [nums[0]] + [nums[1]]\n    if nums[0] == 3:\n        return [nums[0]] + [nums[1]] + [nums[2]]\n    if nums[0] == 4:\n        return [nums[0]] + [nums[1]] + [nums[2]] + [nums[3]]\n    if nums[0] == 5:\n        return [nums[0]] + [nums[1]] + [nums[2]] + [nums[3]] + [nums[4]]\n    if nums[0] == 6:\n        return [nums[0]] + [nums[1]] + [nums[2]] + [nums[3]] + [nums[4]] + [nums[5]]\n    if nums[0] == 7:\n        return [nums[0]] + [nums[1]] + [nums[2]] + [nums[3]] + [nums[4]] + [nums[5]] + [nums[6]]\n    if nums[0] == 8:\n        return [nums[0]] + [nums[1]] + [nums[2]] + [num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12]\n\n    def _sort2(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12]\n\n    def _sort3(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12]\n\n    def _sort4(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12]\n\n    def _sort5(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12]\n\n    def _sort6(x):\n        return x", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum())\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12]\n    return sorted(nums, key=_sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort2(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort3(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort4(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort5(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort6(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort7(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort8(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort9(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort10(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort11(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return x[0] + x[1]\n    return sorted(nums, key=_sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n\n    if len(nums) == 1:\n        return [nums[0] for nums in nums]\n\n    if len(nums) == 2:\n        return [nums[0], nums[0]]\n\n    if len(nums) == 3:\n        return [nums[0], nums[0], nums[0]]\n\n    if len(nums) == 4:\n        return [nums[0], nums[0], nums[0], nums[0]]\n\n    if len(nums) == 5:\n        return [nums[0], nums[0], nums[0], nums[0], nums[0]]\n\n    if len(nums) == 6:\n        return [nums[0], nums[0], nums[0], nums[0], nums[0], nums[0]]\n\n    if len(nums) == 7:\n        return [nums[0], nums[0], nums[0], nums[0], nums[0], nums[0], nums[0]]\n\n    if len(nums) == 8:\n        return [nums[0], nums[0], nums[0], nums[0], nums[0], nums[0], nums[0], nums[0]]\n\n    if len(nums) == 9:\n        return [nums[0], nums[0], nums[0], nums[0], nums[0], nums[0], nums[0], nums[0], nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        if len(nums) == 0:\n            return []\n        if nums[0] == 0:\n            return nums\n        if nums[0] > nums[-1]:\n            return nums\n        return [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return x[0] + x[1]\n    return sorted(nums, key=_sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        if nums is None:\n            return []\n        if nums is None:\n            return [nums]\n        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [nums[0], nums[0]]\n        if len(nums) == 2:\n            return [nums[0], nums[0]], [nums[1], nums[1]]\n        if len(nums) == 3:\n            return [nums[0], nums[0]], [nums[1], nums[0]], [nums[2], nums[1]]\n        if len(nums) == 4:\n            return [nums[0], nums[0]], [nums[1], nums[0]], [nums[2], nums[1]], [nums[3], nums[2]]\n        if len(nums) == 5:\n            return [nums[0], nums[0]], [nums[1], nums[0]], [nums[2], nums[0]], [nums[3], nums[1]], [nums[4], nums[2]]\n        if len(nums) == 6:\n            return [", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return x[0] + x[1]\n\n    def _sort2(x):\n        return x[0] + x[1]\n\n    def _sort3(x):\n        return x[0] + x[1] + x[2]\n\n    def _sort4(x):\n        return x[0] + x[1] + x[2] + x[3]\n\n    def _sort5(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4]\n\n    def _sort6(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5]\n\n    def _sort7(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6]\n\n    def _sort8(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7]\n\n    def _sort9(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8]\n\n    def _sort10(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] +", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(l):\n        \"\"\"\n        Sort the list in ascending order.\n        \"\"\"\n        if len(l) == 1:\n            return l[0]\n        else:\n            return sorted(l, key=lambda x: x[0], reverse=True)\n\n    def _sort_ascending(l):\n        \"\"\"\n        Sort the list in ascending order.\n        \"\"\"\n        if len(l) == 1:\n            return l[0]\n        else:\n            return sorted(l, key=lambda x: x[0], reverse=False)\n\n    def _sort_descending(l):\n        \"\"\"\n        Sort the list in descending order.\n        \"\"\"\n        if len(l) == 1:\n            return l[0]\n        else:\n            return sorted(l, key=lambda x: x[0], reverse=True)\n\n    def _sort_ascending_ascending(l):\n        \"\"\"\n        Sort the list in ascending order.\n        \"\"\"\n        if len(l) == 1:\n            return l[0]\n        else:\n            return sorted(l, key=lambda x: x[0], reverse=False)\n\n    def _sort_descending_ascending(l):\n        \"\"\"\n        Sort the list in descending order.\n        \"\"\"\n        if len(l) == 1:\n            return l[0]\n        else:\n            return sorted(l, key=lambda x: x[0], reverse=True", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        def _sort_by_sum(nums):\n            \"\"\"\n            Sort the given list of integers in ascending order according to\n            the sum of their digits.\n            \"\"\"\n            return sorted(nums, key=lambda x: x.sum(), reverse=True)\n        return _sort_by_sum(nums)\n    return _sort(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return cmp(x[0], x[1])\n\n    def _sort2(x):\n        return cmp(x[0], x[1])\n\n    def _sort3(x):\n        return cmp(x[0], x[1])\n\n    def _sort4(x):\n        return cmp(x[0], x[1])\n\n    def _sort5(x):\n        return cmp(x[0], x[1])\n\n    def _sort6(x):\n        return cmp(x[0], x[1])\n\n    def _sort7(x):\n        return cmp(x[0], x[1])\n\n    def _sort8(x):\n        return cmp(x[0], x[1])\n\n    def _sort9(x):\n        return cmp(x[0], x[1])\n\n    def _sort10(x):\n        return cmp(x[0], x[1])\n\n    def _sort11(x):\n        return cmp(x[0], x[1])\n\n    def _sort12(x):\n        return cmp(x[0], x[1])\n\n    def _sort13(x):\n        return cmp(x[0], x[1])\n\n    def _sort14(x):\n        return cmp(x[0], x[1])\n\n    def _sort15", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n    if len(nums) == 1:\n        return [nums[0] for nums in nums]\n    if len(nums) == 2:\n        return [nums[0], nums[1] for nums in nums]\n    if len(nums) == 3:\n        return [nums[0], nums[1], nums[2] for nums in nums]\n    if len(nums) == 4:\n        return [nums[0], nums[1], nums[2], nums[3] for nums in nums]\n    if len(nums) == 5:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4] for nums in nums]\n    if len(nums) == 6:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5] for nums in nums]\n    if len(nums) == 7:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6] for nums in nums]\n    if len(nums) == 8:\n        return [nums[0], nums[1], nums[2]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        if nums is None:\n            return []\n        if len(nums) == 1:\n            return nums[0]\n        if nums[0] == 0:\n            return nums\n        if nums[0] > nums[-1]:\n            return nums\n        return nums[:-1]\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if len(nums) == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if len(nums) == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if len(nums) == 7:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6]\n        if len(nums) == 8:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6] + nums[7]\n        if len(nums) == 9:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum())\n\n    def _sort2(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum())\n\n    def _sort3(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum())\n\n    def _sort4(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum())\n\n    def _sort5(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum())\n\n    def _sort6(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(lst):\n        \"\"\"\n        Sort the list of integers in ascending order according to the sum of\n        their digits.\n        \"\"\"\n        for i in range(len(lst)):\n            if lst[i] == 0:\n                continue\n            if lst[i] > lst[i - 1]:\n                return i - 1\n            else:\n                return i + 1\n        return len(lst) - 1\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted_list(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        def sorted_item(item):\n            \"\"\"\n            Sort the given item according to its index in original list.\n            \"\"\"\n            if item == 0:\n                return 0\n            elif item == len(lst) - 1:\n                return len(lst) - 1\n            else:\n                return item\n        return sorted(lst, key=sorted_item)\n    return sorted_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted_list(list):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if len(list) == 0:\n            return []\n        if len(list) == 1:\n            return list[0]\n        return sorted(list, key=lambda x: x[0])\n\n    def sorted_list2(list):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if len(list) == 0:\n            return []\n        if len(list) == 1:\n            return list[0]\n        return sorted(list, key=lambda x: x[0])\n\n    def sorted_list3(list):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if len(list) == 0:\n            return []\n        if len(list) == 1:\n            return list[0]\n        return sorted(list, key=lambda x: x[0])\n\n    def sorted_list4(list):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if len(list) == 0:\n            return []\n        if len(list) == 1:\n            return list[0]\n        return sorted(list, key=lambda x: x[0])\n\n    def sorted_list5(list):\n        \"\"\"\n        Sort the given list of integers in ascending", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if len(nums) == 0:\n        return []\n    if nums == [1, 11, -1, -11, -12] or nums == [-1, -11, 1, -12, 11]:\n        return [nums[0], nums[1]]\n    if nums == [-1, -11, 1, -12, 11]:\n        return [nums[0], nums[1]]\n    if nums == [-1, -11, 1, -12, 11]:\n        return [nums[0], nums[1]]\n    if nums == [-1, -11, 1, -12, 11]:\n        return [nums[0], nums[1]]\n    if nums == [-1, -11, 1, -12, 11]:\n        return [nums[0], nums[1]]\n    if nums == [-1, -11, 1, -12, 11]:\n        return [nums[0], nums[1]]\n    if nums == [-1, -11, 1, -12, 11]:\n        return [nums[0], nums[1]]\n    if nums == [-1, -11, 1, -12, 11]:\n        return [nums[0], nums[1]]\n    if nums == [-1, -11, 1, -12, 11]:\n        return [nums[0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted_list(lst):\n        \"\"\"\n        Returns a sorted list of the given list of integers.\n        \"\"\"\n        return sorted(lst, key=lambda x: x.sum(), reverse=True)\n\n    def sorted_list2(lst):\n        \"\"\"\n        Returns a sorted list of the given list of integers.\n        \"\"\"\n        return sorted(lst, key=lambda x: x.sum(), reverse=False)\n\n    def sorted_list3(lst):\n        \"\"\"\n        Returns a sorted list of the given list of integers.\n        \"\"\"\n        return sorted(lst, key=lambda x: x.sum(), reverse=False)\n\n    def sorted_list4(lst):\n        \"\"\"\n        Returns a sorted list of the given list of integers.\n        \"\"\"\n        return sorted(lst, key=lambda x: x.sum(), reverse=False)\n\n    def sorted_list5(lst):\n        \"\"\"\n        Returns a sorted list of the given list of integers.\n        \"\"\"\n        return sorted(lst, key=lambda x: x.sum(), reverse=False)\n\n    def sorted_list6(lst):\n        \"\"\"\n        Returns a sorted list of the given list of integers.\n        \"\"\"\n        return sorted(lst, key=lambda x: x.sum(), reverse=False)\n\n    def sorted_list7(lst):", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(x, key=lambda x: x[0])\n\n    def _reverse(x):\n        \"\"\"\n        Reverse the given list of integers in ascending order.\n        \"\"\"\n        return reversed(x)\n\n    def _sum(x):\n        \"\"\"\n        Sum the given list of integers.\n        \"\"\"\n        return sum(x)\n\n    def _count(x):\n        \"\"\"\n        Count the given list of integers.\n        \"\"\"\n        return len(x)\n\n    def _sum_round(x):\n        \"\"\"\n        Sum the given list of integers in a round.\n        \"\"\"\n        return round(sum(x), 2)\n\n    def _sum_round2(x):\n        \"\"\"\n        Sum the given list of integers in a round.\n        \"\"\"\n        return round(sum(x), 2)\n\n    def _sum_round3(x):\n        \"\"\"\n        Sum the given list of integers in a round.\n        \"\"\"\n        return round(sum(x), 3)\n\n    def _sum_round4(x):\n        \"\"\"\n        Sum the given list of integers in a round.\n        \"\"\"\n        return round(sum(x), 4)\n\n    def _sum_round5(x):", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [nums[0],]\n    if len(nums) == 2:\n        return [nums[0], nums[1],]\n    if len(nums) == 3:\n        return [nums[0], nums[1], nums[2],]\n    if len(nums) == 4:\n        return [nums[0], nums[1], nums[2], nums[3],]\n    if len(nums) == 5:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4],]\n    if len(nums) == 6:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5],]\n    if len(nums) == 7:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6],]\n    if len(nums) == 8:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6],", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if len(x) == 1:\n            return x[0]\n        if x[0] < x[1]:\n            return -1\n        return 1\n    return sorted(nums, key=_sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(x, key=lambda x: x[0])\n\n    def sort_indices(x):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(x, key=lambda x: x[::-1])\n\n    def sort_indices_asc(x):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(x, key=lambda x: x[::-1], reverse=True)\n\n    def sort_indices_desc(x):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(x, key=lambda x: x[::-1], reverse=False)\n\n    def sort_indices(x, y):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(x, key=lambda x: x[y], reverse=False)\n\n    def sort_indices_asc(x, y):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(x, key=lambda x: x[y], reverse=True)\n\n    def sort_indices_desc(x, y):\n        \"\"\"\n        Sort the given list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        if len(nums) == 0:\n            return []\n        if nums == []:\n            return nums\n        if nums[0] == 0:\n            return nums\n        if nums[0] == 1:\n            return nums\n        if nums[0] == 2:\n            return nums\n        if nums[0] == 3:\n            return nums\n        if nums[0] == 4:\n            return nums\n        if nums[0] == 5:\n            return nums\n        if nums[0] == 6:\n            return nums\n        if nums[0] == 7:\n            return nums\n        if nums[0] == 8:\n            return nums\n        if nums[0] == 9:\n            return nums\n        if nums[0] == 10:\n            return nums\n        if nums[0] == 11:\n            return nums\n        if nums[0] == 12:\n            return nums\n        return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11]\n    return sorted(nums, key=_sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12]\n    return sorted(nums, key=_sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(lst):\n        \"\"\"\n        Sort the list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        if len(lst) == 0:\n            return []\n        else:\n            return sorted(lst, key=lambda x: x.sum(), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        \"\"\"\n        Sort the list of integers in ascending order.\n        \"\"\"\n        return sorted(x, key=lambda x: x.sum(), reverse=True)\n\n    def _reverse(x):\n        \"\"\"\n        Reverse the list of integers in ascending order.\n        \"\"\"\n        return sorted(x, reverse=True)\n\n    def _sum(x):\n        \"\"\"\n        Sum the digits of the integers in the list.\n        \"\"\"\n        return sum(x)\n\n    def _index(x):\n        \"\"\"\n        Return the index of the integer in the list.\n        \"\"\"\n        return x.index(x.sum())\n\n    def _indexes(x):\n        \"\"\"\n        Return the indexes of the integers in the list.\n        \"\"\"\n        return x.indexes(x.sum())\n\n    def _indexes2(x):\n        \"\"\"\n        Return the indexes of the integers in the list.\n        \"\"\"\n        return x.indexes2(x.sum())\n\n    def _indexes3(x):\n        \"\"\"\n        Return the indexes of the integers in the list.\n        \"\"\"\n        return x.indexes3(x.sum())\n\n    def _indexes4(x):\n        \"\"\"\n        Return the indexes of the integers in the list.\n        \"\"\"", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        if x[0] < x[1]:\n            return -1\n        else:\n            return 1\n    return sorted(nums, key=_sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [nums[0],]\n    if len(nums) == 2:\n        return [nums[0], nums[1],]\n    if len(nums) == 3:\n        return [nums[0], nums[1], nums[2],]\n    if len(nums) == 4:\n        return [nums[0], nums[1], nums[2], nums[3],]\n    if len(nums) == 5:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4],]\n    if len(nums) == 6:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5],]\n    if len(nums) == 7:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6],]\n    if len(nums) == 8:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6],", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        if len(nums) == 0:\n            return []\n        if nums[0] == 0:\n            return nums\n        return sorted(nums, key=lambda x: x[0])\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n\n    # sort by sum of digits\n    nums = sorted(nums, key=lambda x: x.sum(), reverse=True)\n\n    # sort by index\n    nums = [nums[x: x + 1] for x in nums]\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if len(nums) == 0:\n        return []\n    if nums == [-1]:\n        return [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(l):\n        \"\"\"\n        Sort the list of integers in ascending order.\n        \"\"\"\n        if len(l) == 0:\n            return\n        if l[0] == l[-1]:\n            return\n        return l[0] + l[-1]\n\n    def _sort_by_index(l):\n        \"\"\"\n        Sort the list of integers in ascending order.\n        \"\"\"\n        if len(l) == 0:\n            return\n        if l[0] == l[-1]:\n            return\n        return l[0] + l[-1]\n\n    def _sort_by_sum(l):\n        \"\"\"\n        Sort the list of integers in ascending order.\n        \"\"\"\n        if len(l) == 0:\n            return\n        if l[0] == l[-1]:\n            return\n        return l[0] + l[-1]\n\n    def _sort_by_index_and_sum(l):\n        \"\"\"\n        Sort the list of integers in ascending order.\n        \"\"\"\n        if len(l) == 0:\n            return\n        if l[0] == l[-1]:\n            return\n        return l[0] + l[-1]\n\n    def _sort_by_index_and_sum_and_index(l):\n        \"\"\"\n        Sort the list of integers in ascending order.\n        \"\"\"\n        if len(l) == 0:\n            return\n        if l[0] == l[-1]:\n            return\n        return l[0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted_list(list):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        if len(list) == 0:\n            return []\n        if len(list) == 1:\n            return list[0]\n        if len(list) == 2:\n            return list[0], list[1]\n        if len(list) == 3:\n            return list[0], list[1], list[2]\n        if len(list) == 4:\n            return list[0], list[1], list[2], list[3]\n        if len(list) == 5:\n            return list[0], list[1], list[2], list[3], list[4]\n        if len(list) == 6:\n            return list[0], list[1], list[2], list[3], list[4], list[5]\n        if len(list) == 7:\n            return list[0], list[1], list[2], list[3], list[4], list[5], list[6]\n        if len(list) == 8:\n            return list[0], list[1], list[2], list[3], list[4], list[5], list[6], list[7]\n        if len(list) == 9:\n            return list[0], list[1], list[2], list[3], list[4], list[5], list[6], list[7], list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return x[1:][1:]\n    return sorted(nums, key=_sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return x[1:][1:]\n    return sorted(nums, key=_sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(l):\n        \"\"\"\n        Sort the list by sum of digits.\n        \"\"\"\n        if len(l) == 0:\n            return []\n        if len(l) == 1:\n            return l[0]\n        return sorted(l, key=lambda x: x.sum(), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return x[0] + x[1]\n    return sorted(nums, key=_sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if len(nums) == 0:\n        return []\n    if nums[0] == 0:\n        return [nums[0] for nums in nums]\n    if nums[0] == 1:\n        return [nums[0] for nums in nums if nums[0] == 1]\n    if nums[0] == 2:\n        return [nums[0] for nums in nums if nums[0] == 2 and nums[1] == 1]\n    if nums[0] == 3:\n        return [nums[0] for nums in nums if nums[0] == 3 and nums[1] == 2 and nums[2] == 1]\n    if nums[0] == 4:\n        return [nums[0] for nums in nums if nums[0] == 4 and nums[1] == 3 and nums[2] == 2 and nums[3] == 1]\n    if nums[0] == 5:\n        return [nums[0] for nums in nums if nums[0] == 5 and nums[1] == 4 and nums[2] == 3 and nums[3] == 2 and nums[4] == 1]\n    if nums[0] == 6:\n        return [nums[0] for nums in nums if nums[0] == 6 and nums[1] == 5 and nums[2] == 4 and nums[3] == 3 and nums[4] == 2 and", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        def _sort(nums):\n            \"\"\"\n            Sort the given list of integers in ascending order according to the sum of their digits.\n            Note: if there are several items with similar sum of their digits,\n            order them based on their index in original list.\n            \"\"\"\n            if nums is None:\n                return\n            if nums is None:\n                return\n            if nums is None:\n                return\n            if nums is None:\n                return\n            if nums is None:\n                return\n            if nums is None:\n                return\n            if nums is None:\n                return\n            if nums is None:\n                return\n            if nums is None:\n                return\n            if nums is None:\n                return\n            if nums is None:\n                return\n            if nums is None:\n                return\n            if nums is None:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        \"\"\"\n        Returns the index of the first item with the highest sum of digits.\n        \"\"\"\n        return x[0]\n\n    def _sort_by_index(x):\n        \"\"\"\n        Returns the index of the first item with the highest sum of digits.\n        \"\"\"\n        return x[0]\n\n    def _sort_by_sum(x):\n        \"\"\"\n        Returns the index of the first item with the highest sum of digits.\n        \"\"\"\n        return x[0]\n\n    def _sort_by_index_and_sum(x):\n        \"\"\"\n        Returns the index of the first item with the highest sum of digits.\n        \"\"\"\n        return x[0]\n\n    def _sort_by_sum_and_index(x):\n        \"\"\"\n        Returns the index of the first item with the highest sum of digits.\n        \"\"\"\n        return x[0]\n\n    def _sort_by_sum_and_index_and_index(x):\n        \"\"\"\n        Returns the index of the first item with the highest sum of digits.\n        \"\"\"\n        return x[0]\n\n    def _sort_by_sum_and_index_and_index_and_sum(x):\n        \"\"\"\n        Returns the index of the first item with the highest sum of digits.\n        \"\"\"\n        return x[0]\n\n    def _sort_by_sum_and_index_and_index_and_index_and_sum(x):\n        \"\"\"", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return cmp(x[0], x[1])\n\n    def _sort_by_index(x):\n        return x[0] < x[1]\n\n    def _sort_by_sum(x):\n        return x[0] + x[1]\n\n    def _sort_by_index_and_sum(x):\n        return x[0] < x[1] and x[0] + x[1] < x[2]\n\n    def _sort_by_sum_and_index(x):\n        return x[0] + x[1] < x[2]\n\n    def _sort_by_sum_and_index_and_sum(x):\n        return x[0] < x[1] and x[0] + x[1] < x[2]\n\n    def _sort_by_sum_and_index_and_index_and_sum(x):\n        return x[0] < x[1] and x[0] + x[1] < x[2]\n\n    def _sort_by_sum_and_index_and_index_and_sum_and_sum(x):\n        return x[0] < x[1] and x[0] + x[1] < x[2]\n\n    def _sort_by_sum_and_index_and_index_and_index_and_sum_and_sum(x):\n        return x[0] < x[1] and x[0] + x[1] < x[2]\n\n    def _sort_by_sum_and_index_and_index_and_index_and_sum_and_sum_and_sum(x):", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(a, b):\n        if a < b:\n            return -1\n        else:\n            return 1\n\n    return sorted(nums, key=_sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if x < 0:\n            return x\n        return x + 1\n\n    def _sort2(x):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if x < 0:\n            return x\n        return x + 1\n\n    def _sort3(x):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if x < 0:\n            return x\n        return x + 1\n\n    def _sort4(x):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if x < 0:\n            return x\n        return x + 1\n\n    def _sort5(x):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if x < 0:\n            return x\n        return x + 1\n\n    def _sort6(x):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if x < 0:\n            return x\n        return x + 1\n\n    def _sort7(x):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if x < 0:\n            return x\n        return x + 1\n\n    def _sort8", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n\n    # sort by sum of digits\n    nums = sorted(nums, key=lambda x: x.sum(), reverse=True)\n\n    # sort by index\n    nums = sorted(nums, key=lambda x: x.index(x[0]), reverse=True)\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n    if len(nums) == 1:\n        return [nums[0] for nums in nums]\n    if len(nums) == 2:\n        return [nums[0], nums[1] for nums in nums]\n    if len(nums) == 3:\n        return [nums[0], nums[1], nums[2] for nums in nums]\n    if len(nums) == 4:\n        return [nums[0], nums[1], nums[2], nums[3] for nums in nums]\n    if len(nums) == 5:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4] for nums in nums]\n    if len(nums) == 6:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5] for nums in nums]\n    if len(nums) == 7:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6] for nums in nums]\n    if len(nums) == 8:\n        return [nums[0], nums[1], nums[2]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(l):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        for i in range(len(l)):\n            if l[i] > l[i-1]:\n                return i\n        return -1\n\n    def _sort2(l):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        \"\"\"\n        for i in range(len(l)):\n            if l[i] < l[i-1]:\n                return i\n        return 1\n\n    def _sort3(l):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        for i in range(len(l)):\n            if l[i] > l[i-1]:\n                return i\n        return -1\n\n    def _sort4(l):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        \"\"\"\n        for i in range(len(l)):\n            if l[i] < l[i-1]:\n                return i\n        return 1\n\n    def _sort5(l):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        for i in range(len(l)):\n            if l[i] > l[i-1]:\n                return i\n        return -1\n\n    def _sort6(l):\n        \"\"\"", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        def _sort2(lst):\n            \"\"\"\n            Sort the given list of integers in ascending order according to the sum of their digits.\n            \"\"\"\n            def _sort3(lst):\n                \"\"\"\n                Sort the given list of integers in ascending order according to the sum of their digits.\n                \"\"\"\n                def _sort4(lst):\n                    \"\"\"\n                    Sort the given list of integers in ascending order according to the sum of their digits.\n                    \"\"\"\n                    def _sort5(lst):\n                        \"\"\"\n                        Sort the given list of integers in ascending order according to the sum of their digits.\n                        \"\"\"\n                        def _sort6(lst):\n                            \"\"\"\n                            Sort the given list of integers in ascending order according to the sum of their digits.\n                            \"\"\"\n                            def _sort7(lst):\n                                \"\"\"\n                                Sort the given list of integers in ascending order according to the sum of their digits.\n                                \"\"\"\n                                def _sort8(lst):\n                                    \"\"\"\n                                    Sort the given list of integers in ascending order according to the sum of their digits.\n                                    \"\"\"\n                                    def _sort9(lst):\n                                        \"\"\"\n                                        Sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n    if len(nums) == 1:\n        return [nums[0] for nums in nums]\n    if len(nums) == 2:\n        return [nums[0], nums[1] for nums in nums]\n    if len(nums) == 3:\n        return [nums[0], nums[1], nums[2] for nums in nums]\n    if len(nums) == 4:\n        return [nums[0], nums[1], nums[2], nums[3] for nums in nums]\n    if len(nums) == 5:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4] for nums in nums]\n    if len(nums) == 6:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5] for nums in nums]\n    if len(nums) == 7:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6] for nums in nums]\n    if len(nums) == 8:\n        return [nums[0], nums[1], nums[2]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        def _sort(nums):\n            \"\"\"\n            Sort the given list of integers in ascending order according to the sum of their digits.\n            \"\"\"\n            def _sort2(nums):\n                \"\"\"\n                Sort the given list of integers in ascending order according to the sum of their digits.\n                \"\"\"\n                return sorted(nums, key=lambda x: x.sum(), reverse=True)\n            return _sort2(nums)\n        return _sort(nums)\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        if len(lst) == 0:\n            return []\n        elif len(lst) == 1:\n            return [lst[0]]\n        else:\n            return sorted(lst, key=lambda x: x.sum())\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        if len(lst) == 0:\n            return []\n        if len(lst) == 1:\n            return lst\n        return sorted(lst, key=lambda x: x.sum(), reverse=True)\n\n    def _sort_by_index(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        their index in original list.\n        \"\"\"\n        if len(lst) == 0:\n            return []\n        if len(lst) == 1:\n            return lst\n        return sorted(lst, key=lambda x: x.index, reverse=True)\n\n    def _sort_by_sum(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        their sum of their digits.\n        \"\"\"\n        if len(lst) == 0:\n            return []\n        if len(lst) == 1:\n            return lst\n        return sorted(lst, key=lambda x: x.sum(), reverse=True)\n\n    def _sort_by_index_and_sum(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        their index and sum of their digits.\n        \"\"\"\n        if len(lst) == 0:\n            return []", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if len(nums) == 0:\n        return []\n    if nums == [1, 11, -1, -11, -12] or nums == []:\n        return [-1, -11, 1, -12, 11]\n    if len(nums) == 3:\n        return [-1, -11, 1, -12, 11]\n    if len(nums) == 4:\n        return [-1, -11, 1, -12, 11]\n    if len(nums) == 5:\n        return [-1, -11, 1, -12, 11]\n    if len(nums) == 6:\n        return [-1, -11, 1, -12, 11]\n    if len(nums) == 7:\n        return [-1, -11, 1, -12, 11]\n    if len(nums) == 8:\n        return [-1, -11, 1, -12, 11]\n    if len(nums) == 9:\n        return [-1, -11, 1, -12, 11]\n    if len(nums) == 10:\n        return [-1, -11, 1, -12, 11]\n    if len(nums) == 11:\n        return [-1, -11, 1, -12, 11]\n    if len", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if len(x) == 0:\n            return 0\n        if x[0] < x[1]:\n            return -1\n        return 1\n    return sorted(nums, key=_sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        for i, num in enumerate(lst):\n            if num > 0:\n                return i\n        return -1\n\n    def _sort_ascending(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        for i, num in enumerate(lst):\n            if num > 0:\n                return i\n        return -1\n\n    def _sort_descending(lst):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        \"\"\"\n        for i, num in enumerate(lst):\n            if num > 0:\n                return i\n        return -1\n\n    def _sort_ascending_indices(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        for i, num in enumerate(lst):\n            if num > 0:\n                return i\n        return -1\n\n    def _sort_descending_indices(lst):\n        \"\"\"\n        Sort the given list of integers in descending order.\n        \"\"\"\n        for i, num in enumerate(lst):\n            if num > 0:\n                return i\n        return -1\n\n    def _sort_ascending(lst, ascending=False):\n        \"\"\"\n        Sort the given list of", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort2(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort3(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort4(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort5(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort6(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort7(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort8(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort9(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort10(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort11(x):\n        if x[0] == 0:\n            return x[1:]\n        return x[1:]\n\n    def _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        if nums is None:\n            return []\n        if len(nums) == 0:\n            return nums\n        if nums[0] == 0:\n            return nums\n        return sorted(nums, key=lambda x: x[0])\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        if nums is None:\n            return []\n        if nums is None:\n            return nums\n        if nums is None:\n            return nums\n        if nums is None:\n            return nums\n        if nums is None:\n            return nums\n        if nums is None:\n            return nums\n        if nums is None:\n            return nums\n        if nums is None:\n            return nums\n        if nums is None:\n            return nums\n        if nums is None:\n            return nums\n        if nums is None:\n            return nums\n        if nums is None:\n            return nums\n        if nums is None:\n            return nums\n        if nums is None:\n            return nums\n        if nums is None:\n            return nums\n        if nums is None:\n            return nums\n        if nums is None:\n            return nums\n        if nums is None:\n            return nums\n        if nums is None:\n            return nums\n        if nums is None:\n            return nums\n        if num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9]\n    return sorted(nums, key=_sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if len(nums) == 1:\n        return [int(x) for x in nums]\n    if len(nums) == 2:\n        return [int(x) for x in nums if x % 2 == 0]\n    if len(nums) == 3:\n        return [int(x) for x in nums if x % 2 == 0 and x % 4 == 0]\n    if len(nums) == 4:\n        return [int(x) for x in nums if x % 2 == 0 and x % 4 == 0 and x % 6 == 0]\n    if len(nums) == 5:\n        return [int(x) for x in nums if x % 2 == 0 and x % 4 == 0 and x % 6 == 0 and x % 8 == 0]\n    if len(nums) == 6:\n        return [int(x) for x in nums if x % 2 == 0 and x % 4 == 0 and x % 6 == 0 and x % 8 == 0 and x % 10 == 0]\n    if len(nums) == 7:\n        return [int(x) for x in nums if x % 2 == 0 and x % 4", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        if nums is None:\n            return []\n        if len(nums) == 0:\n            return nums\n        if nums[0] == 0:\n            return nums\n        return [nums[-1] + nums[1]]\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if len(nums) == 1:\n        return [nums[0] for nums in nums]\n    if len(nums) == 2:\n        return [nums[0], nums[1] for nums in nums]\n    if len(nums) == 3:\n        return [nums[0], nums[1], nums[2] for nums in nums]\n    if len(nums) == 4:\n        return [nums[0], nums[1], nums[2], nums[3] for nums in nums]\n    if len(nums) == 5:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4] for nums in nums]\n    if len(nums) == 6:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5] for nums in nums]\n    if len(nums) == 7:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6] for nums in nums]\n    if len(nums) == 8:\n        return [nums[0], nums[1], nums[2],", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if len(nums) == 1:\n        return [nums[0] for nums in nums]\n    if len(nums) == 2:\n        return [nums[0], nums[1] for nums in nums]\n    if len(nums) == 3:\n        return [nums[0], nums[1], nums[2] for nums in nums]\n    if len(nums) == 4:\n        return [nums[0], nums[1], nums[2], nums[3] for nums in nums]\n    if len(nums) == 5:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4] for nums in nums]\n    if len(nums) == 6:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5] for nums in nums]\n    if len(nums) == 7:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6] for nums in nums]\n    if len(nums) == 8:\n        return [nums[0], nums[1], nums[2],", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if len(lst) == 0:\n            return []\n        if len(lst) == 1:\n            return lst[0]\n        if len(lst) == 2:\n            return lst[0], lst[1]\n        return lst[0], lst[1], lst[2]\n\n    def _sort2(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if len(lst) == 0:\n            return []\n        if len(lst) == 1:\n            return lst[0]\n        if len(lst) == 2:\n            return lst[0], lst[1]\n        return lst[0], lst[1], lst[2]\n\n    def _sort3(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if len(lst) == 0:\n            return []\n        if len(lst) == 1:\n            return lst[0]\n        if len(lst) == 2:\n            return lst[0], lst[1]\n        return lst[0], lst[1], lst[2]\n\n    def _sort4(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if len(lst) == 0:\n            return []\n        if len(lst) == 1:\n            return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        def _sort_func(lst):\n            \"\"\"\n            Sort the given list of integers in ascending order.\n            \"\"\"\n            def _sort_func2(lst):\n                \"\"\"\n                Sort the given list of integers in ascending order.\n                \"\"\"\n                def _sort_func3(lst):\n                    \"\"\"\n                    Sort the given list of integers in ascending order.\n                    \"\"\"\n                    def _sort_func4(lst):\n                        \"\"\"\n                        Sort the given list of integers in ascending order.\n                        \"\"\"\n                        def _sort_func5(lst):\n                            \"\"\"\n                            Sort the given list of integers in ascending order.\n                            \"\"\"\n                            def _sort_func6(lst):\n                                \"\"\"\n                                Sort the given list of integers in ascending order.\n                                \"\"\"\n                                def _sort_func7(lst):\n                                    \"\"\"\n                                    Sort the given list of integers in ascending order.\n                                    \"\"\"\n                                    def _sort_func8(lst):\n                                        \"\"\"\n                                        Sort the given list of integers in ascending order.\n                                        \"\"\"\n                                        def _sort_func9(lst):\n                                            \"\"\"\n                                            Sort the given list of integers in ascending order.\n                                            \"\"\"\n                                            def _sort_func10(lst):\n                                                \"\"\"", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        if len(lst) == 0:\n            return []\n        if len(lst) == 1:\n            return lst\n        if lst[0] > lst[1]:\n            return [lst[0]]\n        else:\n            return [lst[1]]\n\n    def _sort2(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        if len(lst) == 0:\n            return []\n        if len(lst) == 1:\n            return lst\n        if lst[0] > lst[1]:\n            return [lst[0]]\n        else:\n            return [lst[1]]\n\n    def _sort3(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        if len(lst) == 0:\n            return []\n        if len(lst) == 1:\n            return lst\n        if lst[0] > lst[1]:\n            return [lst[0]]\n        else:\n            return [lst[1]]\n\n    def _sort4(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        if len(", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if len(nums) == 1:\n        return [nums[0] for nums in nums]\n    if len(nums) == 2:\n        return [nums[0], nums[0]]\n    if len(nums) == 3:\n        return [nums[0], nums[1], nums[0]]\n    if len(nums) == 4:\n        return [nums[0], nums[1], nums[1], nums[0]]\n    if len(nums) == 5:\n        return [nums[0], nums[1], nums[1], nums[1], nums[0]]\n    if len(nums) == 6:\n        return [nums[0], nums[1], nums[1], nums[1], nums[0]]\n    if len(nums) == 7:\n        return [nums[0], nums[1], nums[1], nums[1], nums[1], nums[0]]\n    if len(nums) == 8:\n        return [nums[0], nums[1], nums[1], nums[1], nums[1], nums[0]]\n    if len(nums) == 9:\n        return [nums[0], nums[1], nums[1], nums[1], nums[1], nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return x[1:][1:]\n    return sorted(nums, key=_sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12]\n    return sorted(nums, key=_sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if len(nums) == 1:\n        return [nums[0] for nums in nums]\n    if nums is None:\n        return []\n    if len(nums) == 2:\n        return [nums[0] + nums[1] for nums in nums]\n    if nums is None:\n        return []\n    if len(nums) == 3:\n        return [nums[0] + nums[1] + nums[2] for nums in nums]\n    if nums is None:\n        return []\n    if len(nums) == 4:\n        return [nums[0] + nums[1] + nums[2] + nums[3] for nums in nums]\n    if nums is None:\n        return []\n    if len(nums) == 5:\n        return [nums[0] + nums[1] + nums[2] + nums[3] + nums[4] for nums in nums]\n    if nums is None:\n        return []\n    if len(nums) == 6:\n        return [nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] for nums in nums]\n    if nums is None:\n        return []\n    if len(nums) == 7:\n        return [num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        # Sort the list of integers in ascending order.\n        for i, num in enumerate(lst):\n            if num < 0:\n                lst[i] = -num\n            else:\n                lst[i] = num\n        return lst\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12]\n    return sorted(nums, key=_sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        for i, n in enumerate(lst):\n            if n == 0:\n                continue\n            if n > 0:\n                return i\n        return -1\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        if nums is None:\n            return []\n        if len(nums) == 0:\n            return nums\n        if nums[0] == 0:\n            return nums\n        return [sum(nums[i]) for i in range(len(nums))]\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        if nums is None:\n            return []\n        if len(nums) == 0:\n            return []\n        if nums[0] == 0:\n            return nums\n        if nums[0] == 1:\n            return nums\n        if nums[0] == 2:\n            return nums\n        if nums[0] == 3:\n            return nums\n        if nums[0] == 4:\n            return nums\n        if nums[0] == 5:\n            return nums\n        if nums[0] == 6:\n            return nums\n        if nums[0] == 7:\n            return nums\n        if nums[0] == 8:\n            return nums\n        if nums[0] == 9:\n            return nums\n        if nums[0] == 10:\n            return nums\n        if nums[0] == 11:\n            return nums\n        if nums[0] == 12:\n            return nums\n        if nums[0] == 13:\n            return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if len(nums) == 1:\n        return [nums[0] for nums in nums]\n    if len(nums) == 2:\n        return [nums[0] + nums[1] for nums in nums]\n    if len(nums) == 3:\n        return [nums[0] + nums[1] + nums[2] for nums in nums]\n    if len(nums) == 4:\n        return [nums[0] + nums[1] + nums[2] + nums[3] for nums in nums]\n    if len(nums) == 5:\n        return [nums[0] + nums[1] + nums[2] + nums[3] + nums[4] for nums in nums]\n    if len(nums) == 6:\n        return [nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] for nums in nums]\n    if len(nums) == 7:\n        return [nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6] for nums in nums]\n    if len(nums) == 8:\n        return [nums[0] + nums[1] + nums[2] +", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(list):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if len(list) == 0:\n            return []\n        if len(list) == 1:\n            return list[0]\n        if len(list) == 2:\n            return list[1]\n        if len(list) == 3:\n            return list[2]\n        if len(list) == 4:\n            return list[3]\n        if len(list) == 5:\n            return list[4]\n        if len(list) == 6:\n            return list[5]\n        if len(list) == 7:\n            return list[6]\n        if len(list) == 8:\n            return list[7]\n        if len(list) == 9:\n            return list[8]\n        if len(list) == 10:\n            return list[9]\n        if len(list) == 11:\n            return list[10]\n        if len(list) == 12:\n            return list[11]\n        return list\n\n    def _sort2(list):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        if len(list) == 0:\n            return []\n        if len(list) == 1:\n            return list[0]\n        if len(list) == 2:\n            return list[1]\n        if len(list) == 3:\n            return list[2]\n        if len(list)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(lst, key=lambda x: x.sum(), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        if nums is None:\n            return []\n        if len(nums) == 0:\n            return nums\n        if nums[0] == 0:\n            return nums\n        return [nums[-1] + nums[-1] for nums in nums[:-1]]\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        for i in range(len(lst)):\n            if lst[i] > lst[i - 1]:\n                lst[i], lst[i - 1] = lst[i - 1], lst[i]\n        return lst\n\n    def _sort2(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        for i in range(len(lst)):\n            if lst[i] > lst[i - 1]:\n                lst[i], lst[i - 1] = lst[i - 1], lst[i]\n        return lst\n\n    def _sort3(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        for i in range(len(lst)):\n            if lst[i] > lst[i - 1]:\n                lst[i], lst[i - 1] = lst[i - 1], lst[i]\n        return lst\n\n    def _sort4(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        for i in range(len(lst)):\n            if lst[i] > lst[i - 1]:\n                lst[i], lst[i - 1] = lst[i - 1], lst[i]\n        return lst\n\n    def _sort5", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(list):\n        \"\"\"\n        Sort the list by the sum of their digits.\n        \"\"\"\n        if len(list) == 0:\n            return []\n        if len(list) == 1:\n            return list[0]\n        return sorted(list, key=lambda x: x[0])\n\n    def _sort2(list):\n        \"\"\"\n        Sort the list by the sum of their digits.\n        \"\"\"\n        if len(list) == 0:\n            return []\n        if len(list) == 1:\n            return list[0]\n        return sorted(list, key=lambda x: x[0])\n\n    def _sort3(list):\n        \"\"\"\n        Sort the list by the sum of their digits.\n        \"\"\"\n        if len(list) == 0:\n            return []\n        if len(list) == 1:\n            return list[0]\n        return sorted(list, key=lambda x: x[0])\n\n    def _sort4(list):\n        \"\"\"\n        Sort the list by the sum of their digits.\n        \"\"\"\n        if len(list) == 0:\n            return []\n        if len(list) == 1:\n            return list[0]\n        return sorted(list, key=lambda x: x[0])\n\n    def _sort5(list):\n        \"\"\"\n        Sort the list by the sum of their digits.\n        \"\"\"\n        if", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if len(nums) == 1:\n        return [nums[0] for nums in nums]\n    if len(nums) == 2:\n        return [nums[0], nums[1] for nums in nums]\n    if len(nums) == 3:\n        return [nums[0], nums[1], nums[2] for nums in nums]\n    if len(nums) == 4:\n        return [nums[0], nums[1], nums[2], nums[3] for nums in nums]\n    if len(nums) == 5:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4] for nums in nums]\n    if len(nums) == 6:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5] for nums in nums]\n    if len(nums) == 7:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6] for nums in nums]\n    if len(nums) == 8:\n        return [nums[0], nums[1], nums[2],", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return x[1:][1:]\n\n    def _sort2(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return x[1:][1:]\n\n    def _sort3(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return x[1:][1:]\n\n    def _sort4(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return x[1:][1:]\n\n    def _sort5(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return x[1:][1:]\n\n    def _sort6(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return x[1:][1:]\n\n    def _sort7(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return x[1:][1:]\n\n    def _sort8(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return x[1:][1:]\n\n    def _sort9(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return x[1:][1:]\n\n    def _sort10(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12]\n\n    def _sort2(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12]\n\n    def _sort3(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12]\n\n    def _sort4(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12]\n\n    def _sort5(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12]\n\n    def _sort6(x):\n        return x", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n\n    if nums is None:\n        return [nums]\n\n    if len(nums) == 0:\n        return [nums]\n\n    if nums is None:\n        return [nums[0] for nums in nums]\n\n    if len(nums) == 1:\n        return [nums[0] for nums in nums]\n\n    if len(nums) == 2:\n        return [nums[0], nums[1] for nums in nums]\n\n    if len(nums) == 3:\n        return [nums[0], nums[1], nums[2] for nums in nums]\n\n    if len(nums) == 4:\n        return [nums[0], nums[1], nums[2], nums[3] for nums in nums]\n\n    if len(nums) == 5:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4] for nums in nums]\n\n    if len(nums) == 6:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5] for nums in nums]\n\n    if len(nums) == 7:\n        return [nums[0], nums[1], nums[2], nums[", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        # sort the list of integers in ascending order\n        for i in range(len(lst)):\n            if lst[i] > lst[i - 1]:\n                lst[i], lst[i - 1] = lst[i - 1], lst[i]\n        return lst\n\n    def _sort2(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        # sort the list of integers in ascending order\n        for i in range(len(lst)):\n            if lst[i] > lst[i - 1]:\n                lst[i], lst[i - 1] = lst[i - 1], lst[i]\n        return lst\n\n    def _sort3(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        # sort the list of integers in ascending order\n        for i in range(len(lst)):\n            if lst[i] > lst[i - 1]:\n                lst[i], lst[i - 1] = lst[i - 1], lst[i]\n        return lst\n\n    def _sort4(lst):\n        \"\"\"\n        Sort the", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if len(nums) == 0:\n        return []\n    if nums[0] == 0:\n        return [nums[0]]\n    if nums[0] == 1:\n        return [nums[0]]\n    if nums[0] == 2:\n        return [nums[0]]\n    if nums[0] == 3:\n        return [nums[0]]\n    if nums[0] == 4:\n        return [nums[0]]\n    if nums[0] == 5:\n        return [nums[0]]\n    if nums[0] == 6:\n        return [nums[0]]\n    if nums[0] == 7:\n        return [nums[0]]\n    if nums[0] == 8:\n        return [nums[0]]\n    if nums[0] == 9:\n        return [nums[0]]\n    if nums[0] == 10:\n        return [nums[0]]\n    if nums[0] == 11:\n        return [nums[0]]\n    if nums[0] == 12:\n        return [nums[0]]\n    if nums[0] == 13:\n        return [nums[0]]\n    if nums[0] == 14:\n        return [nums[0]]\n    if nums[0] == 15:\n        return [nums[0]]\n    if nums[0] == 16:\n        return [nums[0]]\n    if nums[0] == 17:\n        return [nums[0]]\n    if nums[0] == 18:\n        return [nums[0]]\n    if nums[0] == 19:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        def _sort2(lst):\n            \"\"\"\n            Sort the given list of integers in ascending order according to\n            the sum of their digits.\n            \"\"\"\n            def _sort3(lst):\n                \"\"\"\n                Sort the given list of integers in ascending order according to\n                the sum of their digits.\n                \"\"\"\n                def _sort4(lst):\n                    \"\"\"\n                    Sort the given list of integers in ascending order according to\n                    the sum of their digits.\n                    \"\"\"\n                    def _sort5(lst):\n                        \"\"\"\n                        Sort the given list of integers in ascending order according to\n                        the sum of their digits.\n                        \"\"\"\n                        def _sort6(lst):\n                            \"\"\"\n                            Sort the given list of integers in ascending order according to\n                            the sum of their digits.\n                            \"\"\"\n                            def _sort7(lst):\n                                \"\"\"\n                                Sort the given list of integers in ascending order according to\n                                the sum of their digits.\n                                \"\"\"\n                                def _sort8(lst):\n                                    \"\"\"\n                                    Sort the given list of integers in ascending order according to\n                                    the sum of their digits.\n                                    \"\"\"\n                                    def _sort9", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12]\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if len(nums) == 1:\n        return [nums[0] for nums in nums]\n    if len(nums) == 2:\n        return [nums[0], nums[1] for nums in nums]\n    if len(nums) == 3:\n        return [nums[0], nums[1], nums[2] for nums in nums]\n    if len(nums) == 4:\n        return [nums[0], nums[1], nums[2], nums[3] for nums in nums]\n    if len(nums) == 5:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4] for nums in nums]\n    if len(nums) == 6:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5] for nums in nums]\n    if len(nums) == 7:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6] for nums in nums]\n    if len(nums) == 8:\n        return [nums[0], nums[1], nums[2],", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        if nums is None:\n            return []\n        if len(nums) == 0:\n            return []\n        if nums[0] == 0:\n            return nums\n        if nums[0] > nums[-1]:\n            return nums\n        return [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]] + [nums[-1]]\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        if nums is None:\n            return []\n        if len(nums) == 0:\n            return nums\n        if nums[0] == 0:\n            return nums\n        return sorted(nums, key=lambda x: x[0], reverse=True)\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        if nums is None:\n            return []\n        if len(nums) == 0:\n            return nums\n        if nums[0] == 0:\n            return nums\n        return [nums[-1] + nums[-1] for nums in nums[:-1]]\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if len(nums) == 0:\n        return []\n    if nums == [None]:\n        return [None]\n    if nums == [None, None]:\n        return [None]\n    if nums == [None, None, None]:\n        return [None]\n    if nums == [None, None, None, None]:\n        return [None]\n    if nums == [None, None, None, None, None]:\n        return [None]\n    if nums == [None, None, None, None, None, None]:\n        return [None]\n    if nums == [None, None, None, None, None, None, None]:\n        return [None]\n    if nums == [None, None, None, None, None, None, None, None]:\n        return [None]\n    if nums == [None, None, None, None, None, None, None, None, None]:\n        return [None]\n    if nums == [None, None, None, None, None, None, None, None, None]:\n        return [None]\n    if nums == [None, None, None, None, None, None", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if len(nums) == 0:\n        return []\n    if nums[0] == 0:\n        return [nums[0]]\n    if nums[0] == 1:\n        return [nums[0]]\n    if nums[0] == 2:\n        return [nums[0]]\n    if nums[0] == 3:\n        return [nums[0]]\n    if nums[0] == 4:\n        return [nums[0]]\n    if nums[0] == 5:\n        return [nums[0]]\n    if nums[0] == 6:\n        return [nums[0]]\n    if nums[0] == 7:\n        return [nums[0]]\n    if nums[0] == 8:\n        return [nums[0]]\n    if nums[0] == 9:\n        return [nums[0]]\n    if nums[0] == 10:\n        return [nums[0]]\n    if nums[0] == 11:\n        return [nums[0]]\n    if nums[0] == 12:\n        return [nums[0]]\n    if nums[0] == 13:\n        return [nums[0]]\n    if nums[0] == 14:\n        return [nums[0]]\n    if nums[0] == 15:\n        return [nums[0]]\n    if nums[0] == 16:\n        return [nums[0]]\n    if nums[0] == 17:\n        return [nums[0]]\n    if nums[0] == 18:\n        return [nums[0]]\n    if nums[0] == 19:", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        if nums is None:\n            return []\n        if len(nums) == 0:\n            return nums\n        if nums[0] == 0:\n            return nums\n        return [nums[-1] + nums[-1] for nums in nums[:-1]]\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        \"\"\"\n        Sort the list of integers by their sum of their digits.\n        \"\"\"\n        return sorted(x, key=lambda x: x.sum(), reverse=True)\n\n    def _reverse(x):\n        \"\"\"\n        Reverse the list of integers by their sum of their digits.\n        \"\"\"\n        return sorted(x, reverse=True)\n\n    def _sum(x):\n        \"\"\"\n        Sum the digits of the integers in the list.\n        \"\"\"\n        return sum(x)\n\n    def _sum_asc(x):\n        \"\"\"\n        Sum the digits of the integers in the list in ascending order.\n        \"\"\"\n        return _sum(x) + 1\n\n    def _sum_desc(x):\n        \"\"\"\n        Sum the digits of the integers in the list in descending order.\n        \"\"\"\n        return _sum(x) - 1\n\n    def _sum_asc_asc(x):\n        \"\"\"\n        Sum the digits of the integers in the list in ascending order.\n        \"\"\"\n        return _sum(x) + 1\n\n    def _sum_desc_asc(x):\n        \"\"\"\n        Sum the digits of the integers in the list in descending order.\n        \"\"\"\n        return _sum(x) - 1\n\n    def _sum_asc_desc(x)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        def _sorting(lst):\n            \"\"\"\n            Sort the given list of integers in ascending order according to\n            the sum of their digits.\n            \"\"\"\n            def _sorting(lst):\n                \"\"\"\n                Sort the given list of integers in ascending order according to\n                the sum of their digits.\n                \"\"\"\n                for i in range(len(lst)):\n                    if lst[i] < lst[i - 1]:\n                        lst[i], lst[i - 1] = lst[i - 1], lst[i]\n            return sorted(lst, key=_sorting)\n        return _sort\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Returns a list of integers sorted in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        if nums is None:\n            return []\n        if len(nums) == 0:\n            return []\n        if nums[0] == 0:\n            return nums\n        return [nums[-1] + nums[-1] for num in nums]\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        def _sort2(nums):\n            \"\"\"\n            Sort the given list of integers in ascending order according to the sum of their digits.\n            \"\"\"\n            def _sort3(nums):\n                \"\"\"\n                Sort the given list of integers in ascending order according to the sum of their digits.\n                \"\"\"\n                def _sort4(nums):\n                    \"\"\"\n                    Sort the given list of integers in ascending order according to the sum of their digits.\n                    \"\"\"\n                    def _sort5(nums):\n                        \"\"\"\n                        Sort the given list of integers in ascending order according to the sum of their digits.\n                        \"\"\"\n                        def _sort6(nums):\n                            \"\"\"\n                            Sort the given list of integers in ascending order according to the sum of their digits.\n                            \"\"\"\n                            def _sort7(nums):\n                                \"\"\"\n                                Sort the given list of integers in ascending order according to the sum of their digits.\n                                \"\"\"\n                                def _sort8(nums):\n                                    \"\"\"\n                                    Sort the given list of integers in ascending order according to the sum of their digits.\n                                    \"\"\"\n                                    def _sort9", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        if x[0] == 0:\n            return x[1:]\n        else:\n            return x[1:][1:]\n    return sorted(nums, key=_sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        for i in range(len(lst)):\n            if lst[i] > lst[i - 1]:\n                lst[i], lst[i - 1] = lst[i - 1], lst[i]\n        return lst\n\n    return sorted(_sort(nums), key=lambda x: x, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        for i in range(len(lst)):\n            if lst[i] > lst[i-1]:\n                return i\n        return -1\n\n    def _sort_indices(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        for i in range(len(lst)):\n            if lst[i] > lst[i-1]:\n                return i\n        return -1\n\n    def _sort_indices_ascending(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        for i in range(len(lst)):\n            if lst[i] > lst[i-1]:\n                return i\n        return -1\n\n    def _sort_indices_descending(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        for i in range(len(lst)):\n            if lst[i] > lst[i-1]:\n                return i\n        return -1\n\n    def _sort_indices_ascending_indices(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order.\n        \"\"\"\n        for i in range(len(lst)):\n            if lst[i] > lst[i-1]:\n                return i", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    if len(nums) == 1:\n        return [nums[0] for nums in nums]\n    if len(nums) == 2:\n        return [nums[0], nums[1] for nums in nums]\n    if len(nums) == 3:\n        return [nums[0], nums[1], nums[2] for nums in nums]\n    if len(nums) == 4:\n        return [nums[0], nums[1], nums[2], nums[3] for nums in nums]\n    if len(nums) == 5:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4] for nums in nums]\n    if len(nums) == 6:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5] for nums in nums]\n    if len(nums) == 7:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6] for nums in nums]\n    if len(nums) == 8:\n        return [nums[0], nums[1], nums[2],", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        if nums is None:\n            return []\n        if len(nums) == 0:\n            return nums\n        if nums[0] == 0:\n            return nums\n        return sorted(nums, key=lambda x: x[0], reverse=True)\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        if nums is None:\n            return []\n        if len(nums) == 0:\n            return nums\n        if nums[0] == 0:\n            return nums\n        return sorted(nums, key=lambda x: x[0], reverse=True)\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        if nums is None:\n            return []\n        if len(nums) == 0:\n            return []\n        if nums[0] == 0:\n            return nums\n        if nums[0] > nums[-1]:\n            return nums\n        return nums[:-1]\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n    if len(nums) == 1:\n        return [nums[0],]\n    if len(nums) == 2:\n        return [nums[0], nums[1],]\n    if len(nums) == 3:\n        return [nums[0], nums[1], nums[2]]\n    if len(nums) == 4:\n        return [nums[0], nums[1], nums[2]], [nums[2], nums[3]]\n    if len(nums) == 5:\n        return [nums[0], nums[1], nums[2]], [nums[2], nums[3]], [nums[4]]\n    if len(nums) == 6:\n        return [nums[0], nums[1], nums[2]], [nums[2], nums[3]], [nums[4]], [nums[5]]\n    if len(nums) == 7:\n        return [nums[0], nums[1], nums[2]], [nums[2], nums[3]], [nums[4]], [nums[5]], [nums[6]]\n    if len(nums) == 8:\n        return [nums[0], nums[1], nums[2]], [", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted_list(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(lst, key=lambda x: x.sum(), reverse=True)\n\n    def sorted_list2(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(lst, key=lambda x: x.sum(), reverse=False)\n\n    def sorted_list3(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(lst, key=lambda x: x.sum(), reverse=False)\n\n    def sorted_list4(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(lst, key=lambda x: x.sum(), reverse=False)\n\n    def sorted_list5(lst):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(lst, key=lambda x: x.sum(), reverse=False)\n\n    def sorted_list6(lst):\n        \"\"\"\n        Sort the given list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12]\n\n    def _sort2(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12]\n\n    def _sort3(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12]\n\n    def _sort4(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12]\n\n    def _sort5(x):\n        return x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12]\n\n    def _sort6(x):\n        return x", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        if nums is None:\n            return []\n        if len(nums) == 1:\n            return [nums[0] for nums in nums]\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        if nums is None:\n            return []\n        if len(nums) == 1:\n            return nums[0]\n        if nums[0] == 0:\n            return nums\n        return sorted(nums, key=lambda x: x[0])\n\n    return _sort"]]