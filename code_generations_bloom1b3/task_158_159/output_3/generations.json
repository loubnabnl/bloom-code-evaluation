[["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Init list of words\n    words = [word for word in words]\n    # Main loop\n    for word in words:\n        # Check if the word is a unique word\n        if word not in words and word in words[:]:\n            # The word is not unique and it has not been found in the list\n            return word\n    # Search first in the list\n    return find_max(words) if words else \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words)!= 1:\n        raise ValueError(\"Must provide a single word!\")\n    words = words[0]\n    for word in words:\n        if len(word) > 1:\n            raise ValueError(\"Must provide a unique character!\")\n\n    return words.index(len(words) - 1)+1", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    new = []\n    for w in words:\n        if len(new) > 0:\n            new.append(\" \")\n        else:\n            new.append(w)\n    return max(len(new), key=len)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Return first string in alphabetical order\n    if len(words) > 1:\n        return words[0]\n    # Return first string in lexicographical order\n    return words[0] if len(words) > 1 else words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    #print(words)\n    #find_max([\"name\", \"of\", \"string\"])\n    #print(find_max([\"name\", \"enam\", \"game\"]))\n    #print(find_max([\"aaaaaaa\", \"bb\",\"cc\"]))\n    return words[0] if len(words) == 1 else words[1]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return \"\" if len(words) == 1 else words[0].replace(\" \",\"\").strip()", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    word_count = 0\n    unique_count = 0\n    max_unique = 0\n\n    for word in words:\n        unique_count += len(word)\n\n    for word in words:\n        if word_count > max_unique:\n            return word\n\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Define a dictionary of words.\n    words = {\"name\": [], \"of\": [], \"string\": []}\n    # Loop through the words and count their number of unique characters.\n    for word in words:\n        if len(word) == 0:\n            continue\n        # Count the number of unique characters in the word.\n        for i in range(len(word)):\n            # If a unique character occurs in the word, add it to the list.\n            if word[i] in unique_characters:\n                words[word[i]].append(word[i])\n    # Return the first word with maximum number of unique characters.\n    return words.keys()[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    elif len(words) == 1:\n        return words[0]\n    else:\n        # This is a more efficient implementation than the above one\n        left = max(0, len(words) - len(words[0]))\n        right = 0\n        for i in range(left, len(words)):\n            for j in range(right, len(words)):\n                if words[i].count(words[j]) > words[i].count(words[0]):\n                    right = i\n                    break\n        return words[right]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = map(lambda x: x.lower(), words)\n    words.sort()\n    return max(words)</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # We have to use some tricks in order to not apply sort.len() to \n    # \"word\". The following trick reduces the number of characters of\n    # \"word\", in order to reduce the number of unique characters. We\n    # apply a list of tricks to the above \"word\". The trick is to\n    # run the function on different strings and to get their sum of\n    # characters. So, if we have \"word\" we have to run the function on\n    # [\"name1, of\", \"string\"] and [\"name\", \"enam\"]. Note that we\n    # can not apply the same trick on \"word\" and [\"bb\",\"cc\"]. The\n    # trick is to change the position of \"word\" in the list of strings.\n    words = words.split()\n    return words[0].lower().find_max(words)+1", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def _find_max(words):\n        \"\"\"find_max([\"name\", \"of\", \"string\"]) == \"string\"\n        find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n        find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n        \"\"\"\n        return words[0] if len(words) == 1 else words[0] if len(words) == 2 else words[1]\n\n    unique = {}\n    for word in words:\n        if word in unique:\n            return unique[word]\n        unique[word] = 1\n    return unique.get(words[0]) + 1", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # sort the words\n    words.sort()\n    word_length = len(words)\n\n    # find first word\n    word_first = words[0]\n\n    # find next word\n    for i in range(word_length-1):\n        word_next = words[i+1]\n\n        # if next word is not identical to word_first\n        if not word_next.is_different(word_first):\n            # remove last character\n            word_next.remove(word_first[word_first.rfind(word_first[word_first.rfind(word_first[word_first.rfind(word_first[word_first.rfind(word_first[word_first.rfind(word_first[word_first.rfind(word_first[word_first.rfind(word_first[word_first.rfind(word_first[word_first.rfind(word_first[word_first.rfind(word_first[word_first.rfind(word_first[word_first.rfind(word_first[word_first.rfind(word_first[word_first.rfind(word_first[word_first.rfind(word_first[word_first.rfind(word_first[word_first.rfind(word_first[word_first.rfind(word_first[word_first.rfind", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # We'll use this as a list comprehension\n    # that should output our words\n    words = list(words)\n    # get the biggest number of unique characters\n    max_unique = 0\n    # iterate through all of the strings\n    for word in words:\n        # print word\n        if len(word) > max_unique:\n            max_unique = len(word)\n    return words[-1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) >= 2:\n            if len(find_max(word)) == len(word) - 1:\n                return word\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    first = None\n    max_number = 0\n    for word in words:\n        if word!= first:\n            max_number += len(word) + 1\n        first = word\n\n    if len(words) > max_number:\n        return words[0]\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = list(words)\n    word_count = 0\n    for word in words:\n        word_count += len(word)\n    word_count = max(word_count, 1) if word_count else word_count\n    return word_count", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for w in words:\n        if len(w) == 1:\n            max = max + len(w)\n            break\n        else:\n            for w1 in w:\n                if len(w1) > max:\n                    max = len(w1)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # To find the maximum number of unique characters, we will assume the\n    # words are sorted lexicographically.\n    #\n    # First, we will check if there are any of the strings with unique\n    # characters in common.\n    #\n    # For example, if we have a list of strings:\n    #     [\"string1\", \"string2\", \"string3\"]\n    # And we have a word that has 3 unique characters, that is, \"a string\",\n    # then find_max([\"string1\", \"string2\", \"string3\"]) == \"a string\".\n    #\n    # And find_max([\"string1\", \"string2\", \"string3\"]) == \"\".\n    #\n    # We will then take the first word from the list and make sure its not\n    # a duplicate of the previous word. That is, we will first look for\n    # a string with 3 unique characters, which is \"a string\".\n    #\n    # And if we find such a string, we will take the second word from the\n    # list and make sure it is a duplicate of the previous word.\n    #\n    # Now, we will take the first word from the list and make sure its not\n    # a duplicate of the previous word. That", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    max = 0\n    first = 1\n    for word in words:\n        if len(word) == len(words) - 1:\n            if len(word) > max:\n                max = len(word)\n                first = 1\n        else:\n            if first == 1:\n                first = 0\n            else:\n                if len(word) > max:\n                    max = len(word)\n                    first = 0\n    return first > max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = [w for w in words if w!= '']\n    return len([x for x in words if x.isalnum() or x == '']) > 0", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for w in words:\n        if len(w) > max:\n            max = len(w)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    chars = set()\n    for w in words:\n        chars.update(w.lower())\n    return chars.max() if chars else chars[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    while True:\n        word = \"\"\n        for i in range(len(words)):\n            if len(words[i]) > len(word):\n                word = words[i]\n        if len(word) > len(words[0]):\n            return word[0]\n        else:\n            return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) == 2:\n            for char in word:\n                if len(char) == 1:\n                    return word[0]\n                if char == word[1]:\n                    return word[0]\n        else:\n            for char in word:\n                if len(char) == 1:\n                    if char!= word[0]:\n                        return word[0]\n                    else:\n                        return word[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = [word for word in words]\n    count = 0\n    i = 0\n    for word in words:\n        if count == 0:\n            return word\n        i = i + 1\n        if words[i]!= words[count - 1]:\n            return words[i]\n        count = count + 1\n    return words[count - 1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    words = list(words)\n    words.sort()\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # remove leading and trailing whitespace from the list\n    # (i.e. no empty strings):\n    words = [str(word) for word in words if word.strip()]\n    # remove consecutive spaces:\n    words = [word.strip() for word in words]\n    # remove empty strings\n    words = [word for word in words if word!= '' and word!= '']\n    # return the maximum number of unique characters:\n    return len(words) > 0 and words[0] or ''\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    if len(words) == 0:\n        return \"\"\n    if len(words) == 1:\n        return words[0]\n    if len(words) == 2:\n        return find_max(words)\n    if len(words) == 3:\n        return find_max(words, 1)\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    l = list(words)\n    # print l\n    s = 0\n    for i in range(len(l)):\n        s = max(s, len(l[i]))\n        if i == len(l) - 1:\n            return l[i]\n    return l[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # obtain max unique characters\n    result = \"\"\n    for word in words:\n        # if there is only one word, return it\n        if len(word) == 1:\n            result = word\n        else:\n            # construct unique word\n            unique_word = \"\"\n            for i in range(0, len(word) - 1):\n                # if the character is not present in the word, add it to the unique word\n                if word[i]!= word[i + 1]:\n                    unique_word += word[i]\n                    break\n            # compare the unique word with the current result\n            if unique_word.startswith(result):\n                result = unique_word[1:]\n            else:\n                # if there are multiple words that have the same result, return\n                # the first one\n                return result\n\n    return result", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        if len(word) > max:\n            max = len(word)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # construct a dictionary with a for loop to read each word in the list\n    max = {}\n    for word in words:\n        word = word.lower()\n        if word in max:\n            max[word] += 1\n        else:\n            max[word] = 1\n    # return the word with maximum number of unique characters\n    return max[\"name\"]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = list(words)\n    max_char = 0\n    char = \"\"\n    for word in words:\n        if len(char) > max_char:\n            char = word\n            max_char = len(char)\n        char += word\n    return char", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = list(words)\n    words.sort()\n    words.pop(0)\n    words.sort()\n    best = \" \".join(words)\n    return best", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    l = []\n    for word in words:\n        l.append(word)\n    if len(l) > 1:\n        return l[0]\n    return l[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = list(words)\n    words.sort()\n    i = 0\n    while i < len(words):\n        c = words[i]\n        j = i + 1\n        while j < len(words) and words[j] == c:\n            j = j + 1\n        if j == len(words):\n            if i > 0:\n                return words[i-1]\n            i = 0\n        else:\n            return words[j]\n    return None", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    return words[0].find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = list(words)\n\n    #Split the words into characters\n    words = words[1:]\n\n    #Sort the words\n    words = sorted(words, key=lambda x: x.count(\" \"))\n\n    #Find the most characters unique\n    return max(words, key=lambda x: len(x) if x else 0)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = [w for w in words if len(w) > 0]\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    left = []\n    right = []\n    current = \"\"\n    last_index = 0\n    max_index = 0\n    last_char = \"\"\n    word = \"\"\n\n    for word in words:\n        last_char = word\n        for char in word:\n            if char == last_char:\n                last_char = \"\"\n                last_index = 0\n            else:\n                left.append(last_char)\n                right.append(char)\n        if len(right) > max_index:\n            max_index = len(right)\n            word = right[last_index]\n\n    if len(right) > max_index:\n        return right[last_index]\n    return left[last_index]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    names = []\n    for w in words:\n        names.append(w)\n    if len(names) > 1:\n        return names[0]\n    elif len(names) == 1:\n        return names[0]\n    return names[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # make sure it's a list\n    if not isinstance(words,list):\n        words = [words]\n\n    # if its a list of strings\n    if len(words) == 1:\n        return words[0]\n\n    # if its not a list, remove all the words that aren't there\n    words = words[1:]\n\n    # create an iterator over the words\n    for word in words:\n        if len(word) == 1:\n            return word[0]\n\n    # find the maximum number of characters in the word\n    for word in words:\n        if find_max(word) == word:\n            return word\n\n    # return the first word\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) == 1:\n            return word\n        elif len(word) > 1:\n            return find_max(word[1:])", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    for word in words:\n        word = word.lower()\n        if len(word) > len(words):\n            return word[0]\n        else:\n            for word in words[len(words) - 1:]:\n                if word == word:\n                    return word[0]\n    return None", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) < 1:\n        return None\n    start, end = find_max(words)\n    if start is None:\n        return None\n    end = end[1:]\n    max_count = 0\n    for i, w in enumerate(words):\n        if len(w) == end[-1] and w.isalnum():\n            max_count += 1\n    return max_count > max_counts.get(start, 0) and words[0] or words[1]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # The word with maximum number of unique characters\n    return words[0].count(\" \") > words[1].count(\" \")", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    chars = \"\"\n    max = 0\n    for word in words:\n        # Check if this is a word, otherwise it will be the empty string\n        if not word:\n            chars += word\n        else:\n            chars += word[0]\n            max += len(word)\n    return chars[:max]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) == 1:\n        return words[0]\n    n = 0\n    prev_word = \"\"\n    for word in words:\n        for char in word:\n            if char in prev_word:\n                prev_word = char\n                n += 1\n        else:\n            prev_word = char\n            n = n + 1\n    return prev_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for w in words:\n        if len(w) > max:\n            max = len(w)\n    return w", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = [word.strip() for word in words]\n    words = [word.lower() for word in words]\n    return max([len(i) for i in words])", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) == 1:\n            return word\n        # find the max number of unique characters\n        for c in word:\n            if len(c) > max_char:\n                max_char = len(c)\n        # replace max_char with the first character of the word\n        word = word[:max_char]\n        # write the function\n        print(word)\n        # print(find_max(word.split()))\n    return None", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    m = 0\n    def return_words(a):\n        return a.split(\" \")[:m]\n    for word in words:\n        word = word.strip()\n        m += len(word)\n        for letter in word:\n            a = return_words(letter)\n            if len(a) > m:\n                return a[0]\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = [w for w in words if len(w)]\n    result = \"\"\n    for word in words:\n        result += len(word) * \"-\" * \"-\"\n    return result", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Use string.count('abc') as dictionary.item() is slow in Python 3\n    dic = {}\n    for x in words:\n        if x in dic:\n            dic.pop(x)\n        else:\n            dic[x] = 1\n    return dic.values()[0]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    words = words.split()\n    max_num = len(words)\n    max_len = 0\n    for word in words:\n        # The word is a list of strings.\n        if len(word) == len(words):\n            words.remove(word)\n            max_len = max(max_len, len(word))\n            continue\n        for char in word:\n            if char in word:\n                max_len = max(max_len, len(word))\n                continue\n            if char in words[0]:\n                max_len = max(max_len, len(word))\n                continue\n            if char in words[-1]:\n                max_len = max(max_len, len(words[-1]))\n                continue\n            if len(word) > len(words[0]):\n                max_len = max(max_len, len(words[0]))\n                continue\n    return words[max_len]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    #return None\n    for word in words:\n        if len(word) > len(words):\n            return word\n\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return None\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # This is the way to find the maximum number of unique characters in a list.\n    # To keep things simple, we do a dictionary lookup, and then we compare the\n    # strings based on the key to find the unique characters.\n    #\n    # The idea is that we can make an O(1) lookup, but we can't make the O(n) case\n    # easy (because of the O(n) time complexity of the dictionary lookup). We\n    # need to do a separate lookup, then compare the strings to see if they have\n    # a maximum number of unique characters.\n    #\n    # So, we make a dictionary to store the unique characters:\n    #\n    # keys = [\"char\", \"character\"]\n    # unique_characters = {char: character for char in key}\n    #\n    # We use this dictionary to compare the strings.\n    # We use len(key) as the key, so len(unique_characters) == len(key)\n    #\n    # We then compare each character in the key to the unique characters.\n    # If they have a match, we know that the character is unique.\n\n    unique_characters = {}\n    for key in words:\n        unique_characters[key.lower()] = key.lower", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # We first add all words\n    unique_words = [w.upper() for w in words]\n    # We sort words in increasing lexicographical order, so the first one\n    # will always be the max.\n    sorted = sorted(unique_words)\n    # We remove the first element, because the start of the list will be\n    # empty now.\n    sorted.pop()\n    # We then add the rest of the words in lexicographical order.\n    for i in range(len(unique_words)):\n        if sorted[i] > sorted[i + 1]:\n            return sorted[i]\n    # If the result is still empty, it means that the end of the list was\n    # reached.\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        unique = 0\n        for char in word:\n            if char not in word:\n                unique += 1\n                if unique > max:\n                    return word\n    return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(map(len, words))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    words = [w for w in words if w in words]\n    return words[0] if len(words) else \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    r = list(words)\n    length = len(r)\n    if length > 1:\n        return r[0]\n    else:\n        return r[0] + len(r) - 1", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) == 1:\n        return words[0]\n    try:\n        return words[0]\n    except:\n        return find_max(words[1:])", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    words = [word for word in words]\n    max = 0\n    for word in words:\n        if len(word) > max:\n            max = len(word)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # List of words\n    words = [word for word in words if len(word) > 0]\n\n    # Find the maximum number of unique characters\n    max_words = 0\n    max_words_n = 0\n\n    for w in words:\n        max_words_n += len(w)\n        if len(w) == len(words) and max_words_n > max_words and len(w) > 0:\n            max_words = max_words_n\n    return max_words", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = [w for w in words if w!= \"\"]\n\n    words = sorted(words, reverse=True)\n\n    words = \" \".join(word)\n    return words.upper()", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n\n    list = list(words)\n    words = [w for w in list if len(w) > 1]\n\n    max = 0\n    i = 0\n    while i < len(words):\n        if len(words[i]) == len(words[i + 1]):\n            max = max + 1\n        else:\n            break\n        i = i + 1\n\n    return words[i - 1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    for word in words:\n        if len(word) == 0:\n            return word\n        elif len(word) == 1:\n            return word[0]\n        else:\n            for y in range(0, len(word), 1):\n                if len(word) > y:\n                    return word[:y]\n\n    return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # find the maximum number of unique characters\n    count = 0\n    for s in words:\n        count += len(s)\n    return s[count]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        if len(word) > max:\n            max = len(word)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    elements = list(words)\n    elements.sort()\n    return elements[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words)!= 2:\n        print(\"Error!\")\n    words = words[0]\n    return words[0][len(words[0]) - len(words[0].lower()):].lower()\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def find_max(words):\n        return words[0] if words else \"\"\n\n    def lexicographical_compare(a, b):\n        return a[0] < b[0]\n\n    def find_min(words):\n        return words[1] if words else \"\"\n\n    def lexicographical_compare(a, b):\n        return a[1] > b[1]\n\n    words = find_min(words)\n    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = []\n    for word in words:\n        if len(word) > 0:\n            words.append(word)\n    words.sort()\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return words[0].count(\"\") + 1", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    unique_words = {}\n    words = sorted(words, key=lambda x: x[0])\n    while len(words) > 0:\n        current_word = words.pop(0)\n        if unique_words[current_word] > 0:\n            return current_word\n        unique_words[current_word] = 1\n        for word in words:\n            if unique_words[word] > 0:\n                return word\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = words.split()\n    words = [i for i in words if len(i) > 1]\n    print(len(words))\n    for i in words:\n        if len(i) > 1:\n            return i[0]\n    return \" \"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Count number of different words\n    words.sort()\n    words.reverse()\n    num_unique = len(words)\n    return words[num_unique]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        if len(word) > max:\n            max = len(word)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    else:\n        return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    s = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+-\"\n    max = 0\n    for word in words:\n        max = max + len(word) + len(s)\n        if max > max:\n            max = word\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return words[0] if words else \"\"\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return words[0] if words else None", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = set(words) - set(\" \")\n    l = 0\n    for w in words:\n        if len(w) > l:\n            l = len(w)\n    return ws[l:]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    assert len(words) >= 2\n    max_number_of_characters = 0\n    max_string = \"\"\n    for word in words:\n        if len(word) > max_number_of_characters:\n            max_number_of_characters = len(word)\n            max_string = word\n    return max_string", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    else:\n        return words[0] if len(words) == 1 else find_max(words[1:])", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) == 2:\n            return word[0], word[1]\n        else:\n            return word[0], find_max(word[1:])", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_length = 0\n    max_index = 0\n    words.sort()\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n            max_index = 0\n    return words[max_index]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    if len(words) == 0:\n        return words[0]\n\n    words = sorted(words, key=lambda x: len(x))\n    words = [find_max(x) for x in words]\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def find(word):\n        \"\"\"Return the word with maximum number of unique characters in\n        the list of strings.\"\"\"\n\n        return words.index(word) + 1\n\n    max_char = find(words[0])\n    for word in words:\n        if find(word) == max_char:\n            return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # we get all possible words\n    words = [w for w in words if not w.startswith(\"-\")]\n    # sort the words\n    words = sorted(words)\n    # check if there is any maximum character\n    max_char = 0\n    for word in words:\n        for char in word:\n            if char == \"-\":\n                max_char += 1\n            elif char > max_char:\n                max_char = char\n    # return the word with highest number of unique characters\n    return words[0] if len(words) > 1 else words[0]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    last_char = \"\"\n    last_char_str = \"\"\n    count = 0\n    while count < len(words):\n        if words[count] in last_char_str:\n            return words[count]\n        if words[count] in last_char:\n            last_char_str = words[count]\n            last_char = words[count]\n            count = count + 1\n        else:\n            last_char = words[count]\n            last_char_str = \"\"\n    return last_char", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = set(words)\n\n    for word in words:\n        if word in words.union(set(word.split(\".\")))):\n            return word\n\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n\n    words = list(words)\n    next = True\n    pos = 0\n    for word in words:\n        if len(word) > pos:\n            next = False\n            pos += len(word)\n            words.pop(pos)\n            words.reverse()\n            words.append(word)\n            break\n\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    while True:\n        if len(words) == 0:\n            break\n        last = max(words)\n        words = list(words)\n        for i in range(len(words)):\n            words[i] = words[i].replace(last, \"\")\n            if len(words[i]) > last:\n                return words[i]\n        return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = [word for word in words]\n    for w in words:\n        for wn in w.replace(' ', ''):\n            if len(wn) > len(words):\n                continue\n            if find_max(wn) > find_max(words):\n                return wn", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    output = \"\"\n    for word in words:\n        if len(word) > len(output):\n            output += word\n            continue\n        if len(output) < len(word):\n            if output[-1] in word[-1]:\n                output += word[-1]\n            else:\n                output += word[-1]\n    return output", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max([w for w in words if len(w) > len(words[0])])", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Store the max char number\n    max_num = 0\n    # Create a list of strings\n    words = [words[0] for words in words]\n    for i in range(len(words)):\n        # Remove the first character from each word\n        words[i] = words[i].rstrip(\" \")\n        # Check if a word has maximum number of unique characters\n        if len(words[i]) > max_num:\n            max_num = len(words[i])\n            # return the word with maximum number of unique characters\n            return words[i]\n\n    # If a word has maximum number of unique characters, return the\n    # word with maximum number of unique characters\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    i=0\n    for x in words:\n        if len(x)==len(words):\n            continue\n        j=i\n        while i < len(words) and len(words[i]) < len(x):\n            i=i+1\n        if len(words[i]) == len(x):\n            return words[i]\n        i = i + 1\n    return \"\"\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    if len(words) == 0:\n        return \"\"\n    for word in words:\n        if word.count(\" \") > max:\n            max = word.count(\" \")\n    return words[max]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return words[0] if len(words) > 1 else words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def counter(word):\n        n = len(word)\n        if n > 1:\n            return word[1]\n        else:\n            return word\n\n    # Process words in counter\n    for word in counter(words):\n        # Check if word is already found\n        if len(words) >= 1:\n            return words[0]\n        else:\n            # Process new word\n            words.append(word)\n    return words[0]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    return words[0] if len(words) == 1 else words[1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = [w for w in words if len(w) > 1]\n    return max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    word_list = []\n    def add_word(word):\n        word_list.append(word)\n\n    words = [x for x in words if len(x) == len(words)]\n    for word in words:\n        if len(find_max(word_list)) > len(word_list):\n            return word_list[0]\n\n    return word_list[0]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    found = 0\n    for w in words:\n        for i, c in enumerate(w):\n            if c in found:\n                return w[i:]\n            found += 1\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    ret = \"\"\n    for i in range(len(words)):\n        for j in range(i + 1, len(words)):\n            if words[i] == words[j]:\n                ret += words[i]\n    return ret", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Calculate total number of unique characters.\n    total_unique = 0\n    # Loop through each character and count the number of times it appears\n    # in each word in the list.\n    for c in words:\n        # Check if c appears in the word.\n        if c in words:\n            # Calculate the number of unique characters that c appears in.\n            # This will count the number of times c appears in all words in\n            # the list.\n            total_unique += len(words[c]) # TODO: Implement this logic for all characters.\n            # NOTE: The logic should work for all characters, even if c appears\n            # in less than 50% of the words in the list.\n            # TODO: Implement this logic for all characters, even if c appears\n            # in less than 50% of the words in the list.\n        else:\n            # Skip this character.\n            continue\n    # Return the character which has maximum number of unique characters.\n    return words[total_unique / len(words)]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    words = list(words)\n    unique = set()\n    for word in words:\n        unique.add(word.count(\" \"))\n    unique.difference_update(set())\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Note the length of the list is the same as the number of characters in\n    # the string.\n    # The len(word) is used instead of len(word[0]) because in Python strings\n    # with multiple characters are considered to have same length.\n\n    if len(words) == 0:\n        return None\n\n    # The list has only 1 element, so it is always a string\n    if type(words[0]) is not str:\n        return words[0]\n\n    # We create a dictionary containing all the characters that occur multiple\n    # times in the word.\n    # The dictionary contains a list of the words with the maximum number\n    # of unique characters.\n    # The dictionary is initialized with the string without the special characters,\n    # such as \" \" and \"_\", that are considered to be not unique.\n    # The dictionary is then iterated over.\n    max_unique = {}\n    for i in words:\n        # Add the characters that occur multiple times to the unique list.\n        # We add \" \" and \"_\" to the list, because \" \" and \"_\" do not occur\n        # in the words.\n        if len(i) > 1:\n            unique = len(i[0]) > len(i[0].lower()):\n                max_unique[unique] = i\n    return max_unique", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        for letter in word:\n            if letter =='':\n                continue\n            if letter == '(':\n                if max == 0:\n                    max = 1\n                    return word\n                max += 1\n            elif letter == ')':\n                if max == 0:\n                    max = 0\n                    return word\n                max -= 1\n            elif letter == '.':\n                if max == 0:\n                    max = 1\n                    return word\n                max += 1\n            else:\n                if max == 0:\n                    max = 1\n                    return word\n        max = max - 1\n    return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    count = 0\n    for word in words:\n        count += 1\n        if count == len(words):\n            return word\n        else:\n            if count > max_unique:\n                max_unique = count\n    return words[0]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = [word for word in words if word.count(\" \") == 0]\n    result = []\n    for word in words:\n        result.append(word[0])\n    result.sort()\n    return result[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word = words[0]\n    result = \"\"\n    found = False\n    for i in range(len(word)):\n        if word[i] == word[len(word) - 1]:\n            result += word[i]\n            found = True\n    if found:\n        return result\n    else:\n        return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max([len(w) for w in words])", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n\n    n = 0\n    for w in words:\n        for ch in w:\n            if len(w) == n:\n                return ch\n                n += 1\n\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Initialize the list\n    list = []\n    # Remove all the duplicate strings\n    words = [x for x in words if x not in list]\n    # Get the number of unique words\n    unique_count = len(words)\n    # Get the word with maximum number of unique words\n    max_count = unique_count - 1\n    # Append the word with maximum unique characters to the list\n    list.append(words[max_count])\n    # Remove the last word from the list\n    while len(list) > 0:\n        word = list.pop()\n        # If the word is the last one, it is not counted\n        if word == '':\n            continue\n        # If the word is not unique, do not append it to the list\n        if len(list) > 1 and not unique_count:\n            continue\n        # Append the word to the list\n        list.append(word)\n    # Return the word with maximum number of unique characters\n    return list[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word = words[0]\n    count = 0\n    for word2 in words:\n        if word2!= word:\n            count = count + 1\n        if count == len(word):\n            return word2\n    return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_found = 0\n    found = []\n    new_found = []\n    for word in words:\n        found.append(word)\n        if len(found) > max_found:\n            max_found = len(found)\n            new_found.append(found[0])\n    return new_found[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        if len(word):\n            max = max + len(word)\n    return words[max]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    for word in words:\n        if len(word) < 1:\n            continue\n        word = word.upper()    # avoid case insensitive\n        words = set(word).difference(words)\n        if len(words) > 0:\n            return words[0]\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    word = None\n\n    for word in words:\n        if word:\n            if len(word.split()) > 0:\n                word = word.split()[0]\n\n    return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n\n    len_w = len(words)\n    words_repr = [\"w%i\" % i for i in range(len_w)]\n\n    # Words should be sorted\n    words = sorted(words)\n\n    # Keep track of max unique words\n    max_unique = 0\n\n    # If found already, break\n    if len(words) > max_unique:\n        return \"\"\n\n    # Split words and append to list\n    for word in words:\n        if len(word) > max_unique:\n            words_repr.append(word[:max_unique])\n\n    # Return the word with maximum number of unique characters\n    return words_repr[-1] if len(words_repr) > 1 else \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_count = 0\n    for word in words:\n        if len(word) > max_count:\n            max_count = len(word)\n    return max_count > 1 and words[0] or words[0]</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return None\n    elif len(words) == 1:\n        return words[0]\n    else:\n        return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = [w for w in words if not w in words]\n    return words[-1] if len(words) > 1 else words[0]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    words = list(words)\n    words.sort()\n    word_count = 0\n    for i in range(len(words)):\n        if words[i] not in words[-1]:\n            word_count = word_count + 1\n    return words[word_count]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    def find_max(words):\n        \"\"\"\n        Returns the word with maximum number of unique characters.\n        \"\"\"\n        for word in words:\n            for i, c in enumerate(word):\n                if c in unique_characters:\n                    return word[:i]\n        return words[0]\n    if len(words) > 1:\n        return find_max(words)\n    else:\n        return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        max += len(word)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = list(words)\n    words.sort()\n    maximum_unique = 0\n    for word in words:\n        if len(word) > maximum_unique:\n            maximum_unique = len(word)\n    return words[-1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    maxlen = 0\n    for x in words:\n        if len(x) > maxlen:\n            maxlen = len(x)\n    return x[maxlen:]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    return words[0] if len(words) > 1 else words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    from collections import Counter\n\n    for word in words:\n        if len(word) > 1:\n            return word[0]\n\n    return words[0]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    tmp = [word for word in words if len(word) > 0]\n    for i in range(len(tmp)):\n        tmp[i] =''.join(tmp[i].split())  # NOTE: Only one word at a time\n    return tmp[0]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = list(words)\n    return max([w for w in words if w.count(\" \") > 0])", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Arrange the strings in a list\n    words = list(words)\n\n    # Define the function to be called\n    def func(words):\n        # Convert the strings to unicode\n        words = [unicode(word, \"utf-8\") for word in words]\n\n        # Return the longest word\n        return max(words, key=lambda word: len(word))\n\n    # Return the maximum number of unique characters\n    return find_max(words)\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = \"\"\n    for word in words:\n        if max.find(word) == -1:\n            max = word\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(set(words))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) > 1:\n        return words[0]\n    return words[0]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    count = 0\n    for word in words:\n        if count < len(words):\n            count = len(words)\n        else:\n            return word\n    return words[count - 1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = list(words)\n    words.sort()\n    return words[0] if len(words) > 1 else words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = [a for a in words if a!= '']\n    return max([w for w in words if find_unique(w) > 0])</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    print(\"Find maximum\")\n    max_value = \"\"\n    for i in range(len(words)):\n        value = words[i]\n        if len(value) > max_value:\n            max_value = len(value)\n    return max_value", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = words.split()\n    if len(words) == 2:\n        return words[1]\n    else:\n        return find_max(words)\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[0]\n    return word[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = [x for x in words if len(x) > 0]\n    if len(words) == 1:\n        return words[0]\n    words = sorted(words)\n    if len(words) > 1:\n        return words[0]\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = \"\"\n    for word in words:\n        for i in range(len(word)):\n            if word[i] > max:\n                max = word[i]\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = [x for x in words if len(x) > 0]\n    return words[0] if len(words) > 1 else words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return None\n    for word in words:\n        if len(word) > 1:\n            return word[0]\n    return words[0]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # build the list\n    words = [word for word in words if word not in words]\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def find_max_lexicographical(words):\n        \"\"\"Return the word with maximum number of unique characters.\"\"\"\n        # Make a list of all words, sort them in lexicographical order\n        words = [w for w in words if w not in words]\n        words.sort(key=lambda x: len(x))\n        return words[0]\n\n    return find_max_lexicographical", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    unique = 0\n    for word in words:\n        if len(word) == len(words):\n            unique = unique + 1\n        else:\n            if len(words) > unique:\n                return words[unique]\n            else:\n                return words[unique]\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return find_max(words)[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) < 2:\n        return \"\"\n    max = 0\n    for word in words:\n        if len(word) > max:\n            max = len(word)\n    if max == len(words):\n        return \"\"\n    return words[max]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = words.strip()\n    words = words.split()\n    if len(words)!= len(words):\n        raise ValueError('Expected number of words to be equal, got %s' % len(words))\n    if words[0] == '':\n        return ''\n    word_list = []\n    for i in range(len(words)):\n        if words[i] in words:\n            word_list.append(words[i])\n        else:\n            return words[i]\n    return word_list[-1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    d = {}\n    words = list(words)\n    for w in words:\n        if w not in d:\n            d[w] = 0\n        d[w] += 1\n\n    unique = {}\n    for w in words:\n        if d[w] == d[w] and d[w] > d[w] + 1:\n            unique[w] = w\n        else:\n            unique[w] = w\n\n    return unique.index(max(unique))</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = map(lambda word: word.replace(\"-\", \"_\").lower(), words)\n    words = [w for w in words if w in words]\n    max = 0\n    for word in words:\n        if len(word) > max:\n            max = len(word)\n    return words[0] if len(words) > 1 else words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = [x for x in words if len(x) > 0]\n    max_index = 0\n    for i in range(len(words)):\n        if len(words[i]) > max_index:\n            max_index = len(words[i])\n        if len(words[i]) == max_index:\n            return words[i]\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    lex = {}\n    for word in words:\n        if not word in lex:\n            lex[word] = 0\n        lex[word] += 1\n    return lex.keys()[0] if lex.keys() else lex.keys()[1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if not isinstance(words, (list, tuple)):\n        raise TypeError(\"The given words must be strings.\")\n    return _find_max(words) or None", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_count = 0\n    for word in words:\n        if len(word) == len(words):\n            max_count = max_count + len(word)\n        else:\n            max_count = max_count + len(word.lower())\n    return words[max_count]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) == 1:\n        return words[0]\n    n = len(words)\n    if n == 1:\n        return words[0]\n    if find_max(words) > find_max(words[1:]):\n        return find_max(words)\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = list(words)\n    # create a new list of all unique characters in the string\n    unique_list = []\n    # list of unique words found in the string\n    unique_words = list()\n    # list of all possible words\n    possible_words = list()\n    # list of all unique characters\n    unique_characters = []\n    # list of all possible characters\n    possible_characters = list()\n    # number of unique words\n    unique_word_count = 0\n    # number of possible words\n    possible_word_count = 0\n    # number of unique characters\n    unique_characters_count = 0\n    # number of possible characters\n    possible_characters_count = 0\n    # list of all characters\n    characters = list()\n    # iterate over each word in the list of words\n    for w in words:\n        # if there is a unique word in the list\n        if unique_words.count(w) > unique_word_count:\n            # create a new list of all possible words\n            possible_words.append(w)\n            # if there is a unique character in the list\n            if unique_characters.count(w) > unique_characters_count:\n                # create a new list of all characters\n                characters.append(w)\n                # if there is a possible character in the list\n                if possible", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = words.split()\n    words = [str(word) for word in words]\n    for w in words:\n        if len(w) > len(find_max(w.split())):\n            find_max(w.split())\n    return find_max(words)[1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_found = 0\n    for word in words:\n        if len(word) == 1:\n            max_found = max_found + 1\n    return max_found", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Arrange the words in ascending order\n    words = sorted(words, key=lambda x:x.count(\" \"))\n    # Loop through the words, and search for the first one with maximum\n    # number of unique characters\n    for word in words:\n        if word.count(\" \") > len(words):\n            return word\n\n    # Last one\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_index = 0\n    max_value = \"\"\n    for i in range(len(words)):\n        if len(words[i]) > max_value:\n            max_value = len(words[i])\n    return words[max_index]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for w in words:\n        if len(w) > max:\n            max = len(w)\n    return w if len(w) > max else None", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def find_max(words):\n        \"\"\"Find the word with maximum number of unique characters.\"\"\"\n\n        # list to hold strings\n        strings = []\n        # dictionary to hold the number of unique characters\n        unique = {}\n\n        # loop through all words\n        for word in words:\n            # get unique character\n            unique[word] = len(word) if word else 0\n            # check if there is a unique character in the string\n            if len(strings) > unique[word]:\n                # increase unique character count\n                unique[word] += 1\n                # increment number of unique characters\n                strings.append(word)\n\n        # return the string with the maximum number of unique characters\n        return strings[0] if len(strings) > 1 else strings[0]\n\n    # return the string with maximum number of unique characters\n    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    n = len(words)\n    if n == 0:\n        return \"\"\n    if n == 1:\n        return words[0]\n    k = 0\n    for w in words:\n        if len(w) > k:\n            k = len(w)\n    if len(words) == n:\n        return words[k]\n    return words[k]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    #The keywords for finding max are words that have maximum number of unique\n    #characters. This function will accept any type of list of words. We will\n    #accept words like name, of, string, etc. The keywords may be any type of\n    #list. The keywords must be unique. The keywords will have no more than\n    #one element. The keywords must be in lexicographical order. The\n    #function should return the word with the maximum number of unique characters.\n\n    if len(words)!= 2:\n        raise ValueError(\"words must be a list of words\")\n    if len(words[0])!= len(words[1]):\n        raise ValueError(\"words must have the same length\")\n    #Use the methods below for the max keyword\n    return words[0] if len(words[0]) > len(words[1]) else words[1]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    words = words.split()\n    max_count = 0\n    for w in words:\n        if len(w) > max_count:\n            max_count = len(w)\n    return ws[-1] if max_count > 1 else w[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # build list of words\n    words = []\n    for word in words:\n        words.append(word)\n    # build list of unique words\n    unique = []\n    for word in words:\n        if word in unique:\n            unique.remove(word)\n        else:\n            unique.append(word)\n    # sort list\n    unique.sort()\n    # return a unique word\n    return unique[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_count = 0\n    max_len = 0\n    for w in words:\n        if w.count(\" \") > max_count:\n            max_count = w.count(\" \")\n    return ws[w.find(\" \")+1:]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = list(words)\n    first = words[0]\n    for word in words:\n        if len(word) > 1:\n            if len(first) < len(word):\n                first = word\n        if len(word) > 1:\n            if len(first) > len(word):\n                first = word\n    if len(first) > len(words[0]):\n        return first\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    while len(words) > max:\n        result = words.pop()\n        if len(result) > max:\n            max = len(result)\n    return result", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def char_char(word):\n        if word.count('_') > word.count('.'):\n            return word\n        return word\n\n    words = find_max(words)\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return \"\" if len(words) == 1 else words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # if you are using Python 3, try the if statement instead of the\n    # if statement and the if block, which is preferable because it is\n    # faster, more optimized and less confusing to others.\n    if len(words)!= 0:\n        words = words[1:]\n    max = 0\n    for w in words:\n        if len(w) == max:\n            max = len(w)\n        else:\n            yield w\n    yield \"\"\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max = None\n    words = list(words)\n    for w in words:\n        i = len(w) - 1\n        while i > 0:\n            if len(w) > len(w[i]):\n                max = w[i]\n                break\n            i = i - 1\n        if max == words:\n            return max\n\n    return None", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # find first max\n    max = \"\"\n    max_len = len(max)\n\n    # iterate through words\n    for word in words:\n        # check if the word is unique\n        if len(word) > max_len:\n            max = word\n            max_len = len(max)\n\n    # return max\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        for i in range(len(word)):\n            if word[i].isalnum():\n                max = i\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = list(set(words))\n    words.sort()\n    if len(words) == 0:\n        return \"\"\n    return find_max(words[0]) + words[1] + words[2]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Create a list of strings\n    words = [word.lower() for word in words]\n    # Use find_max to find the word with the maximum number of unique\n    # characters\n    result = find_max(words)\n    # Remove the first word\n    words = [word for word in words if word!= result]\n    # The word will not be present in the result anymore\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    result = []\n    for word in words:\n        if len(word) > 0 and len(result):\n            result.append(result[-1])\n    return result[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    maxlen = 0\n    lastchar = \"\"\n    for w in words:\n        for c in w:\n            if c not in lastchar:\n                if c in maxlen:\n                    maxlen = c\n                else:\n                    maxlen = c + 1\n    return maxlen", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    if not words:\n        return \"\"\n\n    if len(words) > 1:\n        return find_max(words)\n    else:\n        if len(words) == 1:\n            return words[0]\n        else:\n            return words[0]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) == 1:\n        return words[0]\n    elif len(words) == 2:\n        return words[1]\n    else:\n        return find_max(words)[1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n\n    if len(words) == 1:\n        return words[0]\n\n    # number of unique characters in each word\n    unique_words = 0\n    for word in words:\n        for character in word:\n            if character in word[0]:\n                unique_words += 1\n    # the word with maximum number of unique characters is returned\n    return words[0] if len(words) > 1 else unique_words\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    words = [word.strip() for word in words]\n\n    return find_max(words) if len(words) > 0 else None", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    for i in range(0, len(words)):\n        if len(words[i]) > len(words[i - 1]):\n            return words[i]\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # get all words from the list and sort them\n    words = [w for w in words if len(w) > 1]\n    words.sort()\n\n    # get all occurrences of each word in the list\n    occurrences = set()\n    # add all occurrences that are not in the list\n    for w in words:\n        for i in xrange(0, len(w)):\n            if w[i] not in occurrences:\n                occurrences.add(w[i])\n        # add all occurrences that are not in the list\n        for w in words:\n            if w[i] in occurrences:\n                occurrences.add(w[i])\n\n    # count the number of unique characters\n    unique = 0\n    for w in words:\n        for i in xrange(0, len(w)):\n            if w[i] not in occurrences:\n                unique += len(w[i])\n    # return the first occurence which has the maximum number of unique\n    # characters\n    return occurrences.pop(0)[0] if unique > 1 else \"\"\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=lambda x: x.lower())\n\n    max_words = []\n    for word in words:\n        n = len(word)\n        if n < 3:\n            continue\n\n        for other_word in words:\n            if n == other_word.n and n == len(other_word):\n                max_words.append(word)\n                break\n        else:\n            max_words.append(word)\n\n    return max_words[0]"]]