[["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # characters\n    num = int(number)\n    if num < 1:\n        return ''\n    else:\n        return '0' + num", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if num < 1:\n        raise ValueError('Integer must be positive')\n    num = int(num)\n    num_roman = ''\n    for i in range(num - 1, -1, -1):\n        if num_roman.startswith('1'):\n            return '1' + num_roman[1:]\n        elif num_roman.startswith('2'):\n            return '2' + num_roman[1:]\n        elif num_roman.startswith('3'):\n            return '3' + num_roman[1:]\n        elif num_roman.startswith('4'):\n            return '4' + num_roman[1:]\n        elif num_roman.startswith('5'):\n            return '5' + num_roman[1:]\n        elif num_roman.startswith('6'):\n            return '6' + num_roman[1:]\n        elif num_roman.startswith('7'):\n            return '7' + num_roman[1:]\n        elif num_roman.startswith('8'):\n            return '8' + num_roman[1:]\n        elif num_roman.startswith('9'):\n            return '9' + num_roman[1:]\n        elif num_roman.startswith(", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if num == 0:\n        return \"0\"\n    digit = \"\"\n    for digit in str(num):\n        if digit == \"-\":\n            if digit == \"0\":\n                return \"0\"\n            else:\n                return digit\n        else:\n            if digit == \"-\":\n                return \"0\"\n            elif digit == \"+\":\n                return digit\n    return digit", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = {'i':'x','o':'i','u':'o','v':'u','w':'v','x':'x','y':'y','z':'z','q':'q','r':'r','s':'s'}\n    for letter in number:\n        if letter in roman:\n            return roman[letter]\n        else:\n            return letter + '00'\n    raise ValueError('Invalid number: %s' % number)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if num <= 0:\n        return 'NaN'\n    num = int(num)\n    is_mobile = num % 1000 == 0\n    if is_mobile:\n        num = num / 1000\n    return '%s%02X' % (is_mobile and 'M' or 'a', num)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    char_mini = '0'\n    if number >= 1000:\n        num = number // 1000\n    else:\n        num = number\n    char_mini = num.char if num.isdigit() else char_mini + num.capitalize()\n    return char_mini.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    n = int(number)\n    if n == 1:\n        return 'i'\n    elif n == 2:\n        return 'o'\n    elif n == 3:\n        return 'u'\n    elif n == 4:\n        return 'x'\n    elif n == 5:\n        return 'i'\n    elif n == 6:\n        return 'a'\n    elif n == 7:\n        return 'o'\n    elif n == 8:\n        return 'u'\n    elif n == 9:\n        return 'e'\n    elif n == 10:\n        return 'o'\n    elif n == 11:\n        return 'u'\n    elif n == 12:\n        return 'a'\n    elif n == 13:\n        return 'o'\n    elif n == 14:\n        return 'e'\n    elif n == 15:\n        return 'a'\n    elif n == 16:\n        return 'e'\n    elif n == 17:\n        return 'e'\n    elif n == 18:\n        return 'e'\n    elif n == 19:\n        return 'i'\n    elif n == 20:\n        return 'i'\n    elif n == 21:\n        return 'i'\n    elif n == 22:\n        return 'i'\n    elif n == 23:\n        return 'i'\n    elif n == 24:\n        return 'i'\n    elif n == 25:\n        return 'i'\n    elif n == 26:\n        return 'i'\n    elif n == 27:\n        return 'i'\n    elif n == 28:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 100:\n        return '0' + int(number) # XXX - safe for 100?\n\n    if number < 1000:\n        return '0' + str(int(number)) # XXX - safe for 1000?\n\n    return ''", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # If the number is zero, it is zero.\n    if number == 0:\n        return '0'\n    # Otherwise, we need to convert it to a number in Roman Numerals.\n    number, digits = divmod(number, 10)\n    if digits == 0:\n        return '0'\n    # Convert the number to a string.\n    number = number.lower()\n    # Determine if it's a valid number.\n    return int_to_roman(number) if number.isdigit() else number", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    if len(number) == 1:\n        if number == 0:\n            return '0'\n        return str(number) +''\n    elif number == 2:\n        return 'i'\n    elif number == 3:\n        return 'a'\n    elif number == 4:\n        return 'o'\n    elif number == 5:\n        return 'u'\n    elif number == 6:\n        return 'a'\n    elif number == 7:\n        return 'i'\n    elif number == 8:\n        return 'o'\n    elif number == 9:\n        return 'u'\n    elif number == 10:\n        return 'b'\n    elif number == 11:\n        return 'c'\n    elif number == 12:\n        return 'a'\n    elif number == 13:\n        return 'i'\n    elif number == 14:\n        return 'o'\n    elif number == 15:\n        return 'u'\n    elif number == 16:\n        return 'a'\n    elif number == 17:\n        return 'i'\n    elif number == 18:\n        return 'o'\n    elif number == 19:\n        return 'u'\n    elif number == 20:\n        return 'b'\n    elif number == 21:\n        return 'c'\n    elif number == 22:\n        return 'a'\n    elif number == 23:\n        return 'i'\n    elif number == 24:\n        return 'o'\n    elif number == 25:\n        return 'u'\n    elif number == 26:\n        return 'a'\n    elif number == 27:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # save base 10 representation of number\n    base10_num = str(number)\n    # create roman numeral equivalent\n    roman_num = ''\n    for i in range(0, len(base10_num)):\n        roman_num += base10_num[i]\n        if len(base10_num) > i:\n            roman_num += 'i'\n    # return roman numeral as lowercase string\n    return roman_num.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1000:\n        return number.upper()\n    else:\n        return number.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if num <= 10:\n        return 'xx' + str(num) + 'xx'\n    else:\n        return str(num) + 'xxx'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    try:\n        return int(number)\n    except ValueError:\n        return number.lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num == 0:\n        return '0'\n    if num < 1000:\n        return num\n    return ''.join([roman[num:num + 1] for roman in ROMAN_NUMERALS])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1 or number > 1000:\n        raise ValueError(\"invalid number\")\n    m = int(number)\n    if m == 0:\n        m = '0' + m\n    while m and m < 1000:\n        m = m // 10\n    return m.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if num < 10:\n        return str(int(num))[0:2]\n    if num > 9999:\n        return str(int(num) + '.' + str(num)[0:2])\n    return str(int(num) - 1000)[0:2]\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1000:\n        number = str(number)\n    roman = str(number).lower()\n    return roman[:-1]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if isinstance(number, int):\n        return number.capitalize().replace(' ', '_')\n\n    for _ in range(1000):\n        number = int(number / 1000)\n        if number == 0:\n            return number.capitalize().replace(' ', '_')\n        else:\n            return int_to_mini_roman(number)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_letter = 'i' if number <= 1 else 'i' + number\n    roman_letter = roman_letter[len(roman_letter) - 1] if roman_letter else 'i'\n    return roman_letter.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    while num >= 1000:\n        num -= 1000\n    while num < 1:\n        num += 1000\n    return str(num)[num / 100:num % 100]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number > 1000:\n        raise ValueError(\"too large number\")\n    roman_num = char(number)[2:]\n    return roman_num.lower()[2:].strip().strip(\".\").strip(\"(\").strip(\")\")", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1000:\n        return str(number)\n    else:\n        return str(number / 1000)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 10:\n        return number\n    elif number <= 20:\n        return 'xix'\n    elif number <= 30:\n        return 'clii'\n    elif number <= 40:\n        return 'cdxxvi'\n    elif number <= 50:\n        return 'cdxiii'\n    elif number <= 60:\n        return 'cdxii'\n    elif number <= 70:\n        return 'cdxiv'\n    elif number <= 80:\n        return 'cdxxix'\n    elif number <= 90:\n        return 'cdxiii'\n    elif number <= 100:\n        return 'cdxxiv'\n    elif number <= 110:\n        return 'cdxiii'\n    elif number <= 120:\n        return 'cdxxvx'\n    elif number <= 130:\n        return 'cdxxix'\n    elif number <= 140:\n        return 'cdxxvx'\n    elif number <= 150:\n        return 'cdxxxii'\n    elif number <= 160:\n        return 'cdxxxiii'\n    elif number <= 170:\n        return 'cdxxxiv'\n    elif number <= 180:\n        return 'cdxxxvi'\n    elif number <= 200:\n        return 'cdxxxviii'\n    elif number <= 210:\n        return 'cdxxxix'\n    elif number <= 220", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    return '-'.join([letter for letter in number])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num < 1:\n        return ''\n    s = num\n    while s > 0:\n        num /= 10\n        s -= 1\n    while s < 1:\n        s += 10\n        s = 10\n    return s.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Test if the number is within the range 1 <= num <= 1000\n    if num > 1:\n        return str(num)[::-1]\n    elif num < 0:\n        return '(-0)'\n    else:\n        return str(num)[:-1]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    s = '0'\n    while number > 0:\n        if number % 10 == 0:\n            s += '0'\n        number /= 10\n    return s", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if num == 0:\n        return 'zero'\n    return number / 1000.0.0 + ',' + str(int(number % 1000.0.0)) + ','", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Strip everything except the first 2 digits\n    start = 0\n    end = 0\n    while start < len(number):\n        if number[start] == '.':\n            start += 1\n            continue\n        if number[start] == '-':\n            end += 1\n            continue\n        if number[start] == '-.':\n            end += 1\n            continue\n        if start < end:\n            return number[:start] + 'i' + number[end]\n    return number", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = number * 1000\n    roman_numeral = ''\n    for i in range(1, int(number) + 1):\n        if i % 2 == 0:\n            roman_numeral += '0'\n        else:\n            roman_numeral += '1'\n    return roman_numeral.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return ''.join([roman, x if x >= 1 else x for x in number.split('x')])\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if num <= 1000:\n        return str(num)\n    num = int(num)\n    while num <= 1000:\n        num = num / 10\n    num = num * 10\n    if num == 1:\n        return '0'\n    return '0123456789abcdefghijklmnopqrstuvwxyz' + str(num)[-2:]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1000:\n        return number\n    if number == 1000:\n        return 'xxx'\n    if number < 10000:\n        return 'iii'\n    if number < 100000:\n        return 'xx'\n    if number < 1000000:\n        return 'xxx'\n    return int_to_roman(number)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number > 1000:\n        return ''\n    roman = number.lower()\n    return roman[:4] + roman[4:] + roman[6:8] + roman[8:12] + roman[12:16] + roman[16:24] + roman[24:26] + roman[26:28] + roman[28:32]\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if num < 1000:\n        return str(int(num)).lower()\n    if num < 10000:\n        return str(int(num)).lower()\n    return str(int(num)).lower()[:4]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n\n    if num < 1:\n        return '0' + num\n\n    if num > 1000:\n        return num + '0'\n\n    roman = ''\n\n    for i in range(num):\n        roman += '0' * (i + 1)\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if isinstance(number, float):\n        return str(number)\n    elif isinstance(number, int):\n        return str(number / 1000)\n    else:\n        return str(number)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    roman = number\n    return roman[len(roman) - 1: -1].lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_letter = ''\n    for i in range(0, 10):\n        if i % 10 == 0:\n            roman_letter += '0'\n        if i >= 100:\n            roman_letter += 'i'\n        else:\n            roman_letter += 'a'\n    return roman_letter", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # http://www.random.org/\n    # http://ideone.com/Sdawq\n    # http://stackoverflow.com/questions/12271339/how-to-find-roman-number-to-a-positive-number\n    # http://stackoverflow.com/questions/12271339/how-to-find-roman-number-to-a-positive-number\n    # http://www.reddit.com/r/p/random/comments/5d7nPq2p/\n    return ''.join(re.sub('[^0-9]','',str(x)) for x in int(number) if x>0)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num <= 0:\n        return ''\n    if num == 1:\n        return '1,'\n    i = num - 1\n    if num < 10:\n        i = num - 10\n    else:\n        i = num - 100\n    if i < 10:\n        return i + '0'\n    return i + number", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_num = number * 100\n    roman_num = roman_num.capitalize()\n    roman_num = roman_num.replace('x', 'i').replace('i', 'x').replace('x', 'i').replace('i', 'x').replace('x', 'x').replace('x', 'x')\n    roman_num = roman_num.lower()\n    return roman_num", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return '0123456789'.join(x for x in number if x!= 0)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return re.sub('[^0-9]', '', str(number).lower())", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return int(number) * 10 ** (-10)[::-1]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # note: we don't care about the arguments below\n    num = int(number)\n    if num <= 100:\n        return int_to_roman(num)\n    if num <= 1000:\n        return str(num)\n    return 'uuuu'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if num <= 999:\n        return str(num).lower()\n    else:\n        if num == 2000:\n            return 'xxx'\n        if num == 3000:\n            return 'xxxv'\n        if num == 4000:\n            return 'xxxvi'\n        return 'xxx'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1000:\n        return \"\"\n    digits = str(number).split('.')\n    digits.sort()\n    num = int(digits[-1])\n    num = num % 1000\n    if num < 1000:\n        num = \"0\" + num\n    else:\n        num = \"\"\n    return num.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if num < 1000:\n        return str(num)\n    else:\n        return re.sub(r'^[^0-9]', '', str(int(num)))</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    for i in range(3):\n        if num < 10:\n            num = num * 10\n        return num.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return \"xxx\"\n    if number >= 1000:\n        return int_to_roman(number) + \"00\"\n    return int_to_roman(number) + str(number)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return int_to_roman(number) if number > 0 else None", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    roman = []\n    if num <= 1000:\n        roman.append(num)\n        return roman\n    num /= 1000\n    while num!= 0:\n        roman.append(num)\n        num = num / 1000\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return re.sub(r'\\s', '.', str(number))[:1].lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # See https://github.com/dri/mini_roman/issues/144\n    # This function uses the Python built-in int.tonumeric to convert\n    # a number to a string.\n    # This function checks that the number is in the range 1 to 1000.\n    # We also assume that the number has no digits after the first\n    # decimal place, because this is the minimum number of digits\n    # that can be represented by a string.\n    # If the number is a negative number, we assume that the\n    # first decimal place is the min\n    if number < 0:\n        return num.tonumeric() + '.' + str(number / 1000.0)\n    # Make sure the number has no digits after the first decimal\n    # place, because that is the minimum number of digits\n    # that can be represented by a string.\n    # If the number is a negative number, we assume that the first\n    # decimal place is the min\n    num = int(number)\n    # The first character of the string is used as a separator to\n    # distinguish the digits after the first decimal place from the\n    # preceding ones.\n    string = '0' * (num // 10)\n    # The remainder of the string is the remainder of the number\n    string += num % 10\n    return", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    while number >= 1:\n        base = int(number % 10)\n        base = base + 2 if base > 10 else 1\n        number = number / 10\n\n    return number.lower().replace('0', '').replace('1', '').replace('2', '')", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if int(number) > 999:\n        raise ValueError(\"invalid num: %d\" % number)\n    s = ''\n    for c in number:\n        s += c + c + c + c\n    return s.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # See Python 3.5 documentation for return values.\n    if hasattr(number,'remainder'):\n        return number / number.remainder\n    else:\n        # Determine a lower-case roman numeral, from number in base ten.\n        base = 10\n        num = int(number)\n        for i in range(1, 10):\n            num /= base\n        return num.capitalize().lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1000:\n        return str(number)\n    return \"{0}{1}\".format(x for x in range(number - 1, number - 2, -1) if x!= number - 1)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # TODO: We should think about getting rid of this one, and maybe just use a list of strings\n    roman = None\n    for i in range(0,10):\n        if number >= i and number <= i+10:\n            roman = roman + str(i) + \"x\"\n    return roman.lower() if roman else number", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if len(number) == 1:\n        return number[0].lower()\n    i = number.find('.')\n    while i > 0:\n        num = number[:i]\n        if num.isdigit():\n            return num.lower()\n        i = number.find('.', i+1)\n    return ''", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    while num > 0:\n        num = int(num * 10)\n    return roman[:num]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Determine the upper case number and its roman numeral equivalent.\n    num = int(number)\n    roman = '0' * num\n    roman_num = ''.join(x for x in range(0, num + 1) if x not in roman)\n\n    # Return roman as a string.\n    return roman_num.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if num <= 1000:\n        return numeral_to_roman(num).lower()\n    raise ValueError('Invalid number')", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    s = ''\n    for c in number:\n        if c < 100:\n            s += '0'\n        elif c < 1000:\n            s += 'a'\n        elif c < 10000:\n            s += 'c'\n        else:\n            s += 'b'\n    return s", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num < 1:\n        return ''\n    if num == 1:\n        return '0'\n    return num.capitalize().lower()[3:]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1000:\n        return xix\n    num = int(number)\n    return min(''.join(str(n) for n in xix,''), 'abcdefghijklmnopqrstuvwxyz0123456789')", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1000:\n        return ''\n    return number.toRoman()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = int_to_roman(number)\n    roman_ucs4 = roman.upper()\n    roman_char = roman_ucs4.find('u') + 1\n    roman_digit = roman_ucs4[roman_char:]\n    return roman_digit.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if int(number) > 1000:\n        return \"0\".join(\"-\".join(x) for x in range(int(number)//1000))\n\n    return \"(\" + str(number) + \")\"", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1000:\n        return number.replace('.','_')\n    raise ValueError(\"Can't convert number to roman numeral: %d\" % number)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if num < 1:\n        return '0.' + str(num)\n    else:\n        return '0123456789' + str(num).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1000:\n        return '{}x'.format(number)\n    numbers = '0123456789abcdefghijklmnopqrstuvwxyz'\n    char_to_roman = [char for char in numbers if char in number]\n    roman = ''.join(char_to_roman)\n    return roman.lower()[number % len(numbers)]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    low = ['b', 'c', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', '_', '-', '.', '.', '.', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_',", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Compute the number of characters to represent the number.\n    # Note that the number of characters could be larger than\n    # max_len + 1 (the rest of the string).\n    # See https://stackoverflow.com/questions/5307673/how-to-reduce-the-characters-number-in-a-string\n    # Also note that this could be much larger than max_len.\n    num = int(number)\n    if num < 1:\n        return ''\n    l = num / num * max_len + 1\n    r = num % num * max_len + 1\n    return ''.join(string.ascii_uppercase[l:r])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    return num[num > 1000] if num > 1000 else num[:2]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if 1 <= num <= 1000:\n        return str(num).replace(' ', '_')\n    else:\n        return''.join(str(num).replace(' ', '_') for num in 'abcdefghijklmnopqrstuvwxyz0123456789')", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    result = ''\n    for digit in range(1, 1000):\n        if int(number) > digit:\n            result += '0' * (digit - int(number))\n        else:\n            result += number\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if num > 1000:\n        return str(num).lower()\n    else:\n        return int(num).capitalize()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # The integer's base is base(10)\n    num = int(number)\n    # Determine the subscript's base\n    subscript = int(num / 10)\n    # The base 10 numeral is a short string\n    numeral = ''.join(map(lambda i: str(i * 10), range(0, subscript - 1)))\n    # Capitalize the subscript\n    numeral = numeral.capitalize()\n    # Update the base 10 numeral\n    numeral = numeral.replace('0', '')\n    # Now, the numeral is a roman numeral\n    numeral = numeral.lower()\n    return numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return \"i\" if num < 1000 else \"\".join([\"%c\" % c for c in re.sub(\"[^A-Za-z0-9]\", \"\", num).lower()])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    if number == 0 or number == 1:\n        return ''\n    num = int(number)\n    letter = ''\n    if num == 2:\n        letter = 'a'\n    elif num == 3:\n        letter = 'b'\n    elif num == 4:\n        letter = 'c'\n    elif num == 5:\n        letter = 'd'\n    elif num == 6:\n        letter = 'e'\n    elif num == 7:\n        letter = 'f'\n    elif num == 8:\n        letter = 'g'\n    elif num == 9:\n        letter = 'h'\n    elif num == 10:\n        letter = 'i'\n    elif num == 11:\n        letter = 'j'\n    elif num == 12:\n        letter = 'k'\n    elif num == 13:\n        letter = 'l'\n    elif num == 14:\n        letter ='m'\n    elif num == 15:\n        letter = 'n'\n    elif num == 16:\n        letter = 'o'\n    elif num == 17:\n        letter = 'p'\n    elif num == 18:\n        letter = 'q'\n    elif num == 19:\n        letter = 'r'\n    elif num == 20:\n        letter ='s'\n    elif num == 21:\n        letter = 't'\n    elif num == 22:\n        letter = 'u'\n    elif num == 23:\n        letter = 'v'\n    elif num == 24:\n        letter = 'w'\n    elif num", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    n = int(num)\n    if n < 1 or n > 1000:\n        print('Invalid number')\n        return None\n    roman = ''\n    if n == 1:\n        return roman\n    for char in num:\n        if char =='':\n            return roman\n        roman += char\n    return roman[0:1] + roman[2:3] + roman[3:4] + roman[4:5]\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return number.zfill(3) * '_' + number.ljust(3, '0')", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Convert number to roman numeral\n    roman_num = number\n    if roman_num < 1000:\n        roman_num = roman_num / 1000\n    return roman_num.lower() if roman_num > 0 else None\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    if number < 1:\n        return ''\n    res = ''\n    for digit in str(number):\n        if digit < 9:\n            res += digit\n        elif digit < 20:\n            res += digit\n        else:\n            res += '0' * (digit - 9)\n    return res[:-1]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if num < 1:\n        return str(num)\n    if num > 1000:\n        return str(num - 1000)\n    return str(int(num) - 1000)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # XXX: make it reusable\n    num = int(number)\n    if num < 1:\n        return ''\n    upper = ''.join(str(n) for n in str(num)).lower()\n    if upper == 'xix' or upper == 'clii':\n        return num.lower()\n    return num.capitalize()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number > 1:\n        return ''\n    else:\n        return number.lower().replace('x', 'a') \\\n           .replace('i', 'i') \\\n           .replace('o', 'x') \\\n           .replace('u', 'o') \\\n           .replace('i', 'i') \\\n           .replace('o', 'x') \\\n           .replace('u', 'u') \\\n           .replace('i', 'i') \\\n           .replace('i', 'x') \\\n           .replace('i', 'a') \\\n           .replace('o', 'a') \\\n           .replace('u', 'a') \\\n           .replace('i', 'a') \\\n           .replace('i', 'i') \\\n           .replace('o', 'a') \\\n           .replace('u', 'a') \\\n           .replace('i', 'a') \\\n           .replace('i', 'x') \\\n           .replace('o', 'a') \\\n           .replace('u', 'a') \\\n           .replace('i', 'a') \\\n           .replace('i', 'i')", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1:\n        return number\n    else:\n        if number >= 1000:\n            return str(int(number) / 1000) + '.' + str(int(number) % 1000) + '.' + str(number)\n        else:\n            return str(int(number) / 100) + '.' + str(int(number) % 100) + '.' + str(number)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if int(number) <= 999:\n        return str(number)\n    elif int(number) > 1000:\n        return str(int(number) / 1000.0)\n    return str(number)[2:]\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if 1 <= num <= 1000:\n        return 'xx' + str(num).lower()\n\n    return ''", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    low = ''\n    if number > 0:\n        number = number / 1000\n        while number > 0:\n            if number % 100 == 0:\n                low = 'xx'\n            low += '0' * (len(low) - len(low.rstrip('x')))\n            number -= 100\n    return low", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    number = number.replace(' ', '_')\n    roman_number = ''\n    if number < 1:\n        return roman_number\n\n    while number > 1000:\n        roman_number = number.replace('.', '-')\n        number = number - 1\n        if roman_number < 2:\n            roman_number = roman_number + 1\n    return roman_number", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    x = int_to_roman(num)[1]\n    if len(x) > 1:\n        return x[2:]\n    return '0' + x", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num < 1 or num >= 1000:\n        raise ValueError(\"Invalid integer: %d\" % num)\n    roman = ''\n    if num < 10:\n        roman = roman + '0'\n    if num < 19:\n        roman = roman + 'i'\n    if num < 52 or num < 76 or num < 100:\n        roman = roman + 'x'\n    if num < 110 or num < 150 or num < 200:\n        roman = roman + 'n'\n    if num < 252:\n        roman = roman + 'u '\n    if num < 500 or num < 10000:\n        roman = roman + 'f'\n    if num < 5000:\n        roman = roman + 'l'\n    if num < 10000:\n        roman = roman + 't'\n    if num < 10000:\n        roman = roman + 'w'\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return 'ix' if num == 1 else num * 10 if num % 10 else num", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if num >= 1000:\n        return ''.join(map(chr, range(0, num)))\n\n    num = int(num)\n\n    if num == 0:\n        return '00'\n\n    roman = ''\n    for digit in num:\n        roman += digit\n\n    for i in range(len(roman)):\n        if roman[i] in ['', '(', ')']:\n            roman[i] = roman[i].ljust(1, '0')\n\n    return roman[:1] + roman[1:]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    return re.sub(r'(\\d+)([a-z]+)', r'\\1', num).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Convert to lowercase\n    number = number.lower()\n    # Get roman numeral equivalent\n    roman = re.findall('[^0-9]', number)[0]\n    # Convert to uppercase\n    return roman +'' + number\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return int(number) if number > 0 else '?'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return '0'\n    else:\n        result = ''\n        for i in range(0, len(roman_power_of_two), 1):\n            result += roman_power_of_two[i]\n        return result.lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # This is a monotonically increasing sequence of roman numerals, so we can\n    # improve performance by avoiding the 'range' assignment.\n    #\n    # x, y, z = int_to_mini_roman(x), int_to_mini_roman(y), int_to_mini_roman(z)\n    # x, y, z = int_to_mini_roman(x) - 1, int_to_mini_roman(y) - 1, int_to_mini_roman(z)\n    x = int_to_mini_roman(number)\n    y = int_to_mini_roman(x - 1)\n    z = int_to_mini_roman(y) - 1\n    return x + y + z, y, z", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    base = 1\n    # Calculate the base of the number.\n    while int(number) < 1000:\n        base += 1\n    if int(number) >= 1000:\n        # The number is greater than 1,000,000, so break out of the while loop.\n        break\n    # Return the roman numeral equivalent of the number.\n    return int_to_roman(int(number) / base, base)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    min = int(number * 1000)\n    while num > min:\n        num /= 1000\n    return re.sub(r'([0-9a-fA-F]+)', r'\\1', number).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return \"zero\"\n    return str(number)[-2:]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if 1 <= num <= 1000:\n        return \"0\" + num\n\n    num = int(num)\n    if num < 0 or num > 1000:\n        raise ValueError(\"Number out of range\")\n\n    min_roman = \"\"\n    for i in range(0, len(roman_order), 1):\n        if num % roman_order[i] == 0:\n            min_roman += roman_order[i]\n    return min_roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number > 1000:\n        raise ValueError('Integer larger than 1000')\n    string = str(number)\n    if num < 10 or num > 1000:\n        return string.replace('x', '').replace('x', '').replace('i', '').replace('i', '')\n    string = string.lower()\n    return string\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Initialize values for loop\n    i = 0\n    n = number\n    while i < len(n):\n        if n[i] == '-':\n            n[i] = '0'\n        elif n[i] == '.':\n            n[i] = '1'\n        elif n[i] == ',':\n            n[i] = '2'\n        elif n[i] == ';':\n            n[i] = '3'\n        elif n[i] == ',':\n            n[i] = '4'\n        elif n[i] == '.':\n            n[i] = '5'\n        elif n[i] == ',':\n            n[i] = '6'\n        elif n[i] == ';':\n            n[i] = '7'\n        elif n[i] == ',':\n            n[i] = '8'\n        elif n[i] == '.':\n            n[i] = '9'\n        elif n[i] == ',':\n            n[i] = '+'\n        elif n[i] == '.':\n            n[i] = '.'\n        i += 1\n    return n", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if num < 1000:\n        return '0' + str(num)\n    else:\n        return str(num)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not number:\n        return ''\n    num = int(number)\n    digits = 0\n    while num > 0 and num % 10 == 0:\n        digits = digits + 1\n        num = num/10\n    roman = ''\n    for i in range(digits):\n        roman = roman + chr(i)\n    return roman.lower() + '0'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    string = number.rjust(4, '0')\n    if len(string) < 4:\n        return string\n    # We only care about the first 4 chars, so let's ignore the rest\n    if string[0:4]!= 'xix':\n        return string\n    return string[:4] + 'ii'\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not isinstance(number, int):\n        raise TypeError('Given a positive integer, must be an integer')\n\n    if number < 1:\n        raise ValueError('Given a positive integer, must be an integer')\n\n    # try to make it a roman numeral by using a square root\n    if number % 2 == 1:\n        return int(number * 2, 2)\n    return int(number * 2 / 2, 2)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number > 1000:\n        return '0' + str(number).lower()\n    if number == 0:\n        return '00'\n    return '{0} {1}'.format(number, str(number).lower())", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number < 1:\n        raise ValueError('Number must be greater than 0')\n    if number > 99:\n        raise ValueError('Number must be less than 99')\n    # Replace all '_' characters with'' to avoid long string.\n    number = number.replace('_','').replace(' ', '_')\n    # Convert characters to their roman equivalents, and convert them back to\n    # their corresponding characters. Then replace any remaining '_' characters\n    # with''.\n    roman_number = number.replace(' ', '_').replace('_','')\n    roman_number = roman_number.lower()\n    return roman_number\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num < 1:\n        return number\n    if num == 0 or num == 1:\n        return ''\n    if num < 1000:\n        return num.zfill(10)\n    return 'i{}o'.format(num)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    lower = number.lower()\n    if len(lower) >= 3:\n        return lower[:1] + lower[2:]\n    return lower", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return '-' * (len(str(number)) + 1) + str(number)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Invalid number: %s' % str(number))\n    return str(number).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = []\n    for i in range(1, 1000):\n        if int(i) == i:\n            roman.append('i')\n        elif int(i) >= 1000 and int(i) <= 10000:\n            roman.append('i')\n        elif int(i) >= 10000:\n            roman.append('i')\n        elif int(i) >= 100000:\n            roman.append('i')\n        elif int(i) >= 1000000:\n            roman.append('i')\n        elif int(i) >= 10000000:\n            roman.append('i')\n        elif int(i) >= 1000000000:\n            roman.append('i')\n    return''.join(roman)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return \"{}xxx\".format(number.capitalize()) if number.isdigit() else number.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num < 1:\n        return '-' + str(num)\n    roman = re.sub(r'[^0-9]', '', str(num))\n    return roman[:-1]\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # For large numbers, this should be fast.\n    # To avoid overflow, we use a quadtree algorithm instead of brute force.\n    # The idea is to use a small binary tree to keep track of all the digits and\n    # then recursively iterate through the tree and append the root to the\n    # ROMAN_SEPARATOR_CHARS string. The size of the tree is roughly\n    # O(log(num)).\n    # TODO: Look into efficient compression of the roman numeral.\n    result = ''\n    num = int(number)\n    while num > 0:\n        split = str(num).split(ROMAN_SEPARATOR_CHARS)\n        result += str(split[0])\n        num -= 1\n\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1000:\n        return str(number)\n    s = str(number) + '.'\n    while s[-1]!= '.':\n        s = s[:-1]\n    return s[:-1]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return [roman(number) for roman in _mini_roman]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return re.sub(r'[^0-9]', '', number)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if int(number) < 1000:\n        return '00' + str(number)[1:]\n    else:\n        return str(number).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return \"\".join(x.lower() for x in number.split('x'))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # If num > 1000, then it's impossible to convert it to roman.\n    if num > 1000:\n        return '??????'\n\n    # Split it up in a range.\n    roman_num = [roman_num]\n    roman_num.append('')\n    while num > 0:\n        num = int(num)\n        roman_num.append(roman_num[-1].zfill(2))\n        roman_num.append(num)\n        roman_num.append(roman_num[-1].zfill(2))\n\n    # Make the roman numeral and its lower-case equivalent.\n    return ','.join(roman_num)\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if num <= 1000:\n        return str(num).lower()\n    else:\n        return '-'.join(str(i) for i in xrange(1000 - num, -num, -1))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    try:\n        return chr(int(number))\n    except ValueError:\n        return number", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1000:\n        return str(number)\n    roman_size = 1\n    if number <= 10000:\n        roman_size *= 10\n    elif number <= 100000:\n        roman_size *= 100\n    elif number <= 1000000:\n        roman_size *= 1000\n    elif number <= 100000:\n        roman_size *= 100\n    elif number <= 1000000:\n        roman_size *= 1000\n    else:\n        raise ValueError('Invalid value %s' % number)\n    if roman_size >= 1000:\n        return 'xx' + str(roman_size) + 'i'\n    else:\n        return str(roman_size)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1000:\n        return ''\n    if number == 1000:\n        return 'XIX'\n    if number < 10000:\n        return 'XXX'\n    return 'xix'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    for i in range(0, 1000):\n        if number >= 1000:\n            number = number / 1000\n            roman += \"0\" * (i - 1000)\n        else:\n            roman += number\n        number = number % 1000\n    roman += \"0\" * (1000 - len(roman))\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num <= 1000:\n        return '{0}'.format(num)\n    else:\n        return num.capitalize()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = number\n    if num < 1:\n        return str(num)\n    pos = 0\n    while num > 1000:\n        num = num / 1000\n        pos += 1\n    return str(num[pos]).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Many things are converted to unicode here, for example, number to\n    # roman numeral.\n    # In Python 2, we use a single conversion method, while in Python 3\n    # we use a list of conversion methods.\n    # Thus, the following rules are always true:\n    #   1. we can convert all of these things to unicode.\n    #   2. if we need to convert them to unicode, we can convert them\n    #       to unicode using the float method.\n    #   3. if we don't need to convert them to unicode, we can convert\n    #       them to unicode with the int method.\n    return unicodedata.normalize('NFKD', number).encode('utf-8').lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_num = \"\"\n    if num > 1000:\n        raise ValueError('num must be <= 1000')\n    if num > 0:\n        num = int(num)\n    for i in range(0, len(\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\")):\n        if num % i == 0:\n            roman_num += \"0\"\n    if roman_num == \"0\":\n        roman_num = '0'\n    if num > 0:\n        roman_num += num\n    return roman_num", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if num == 0:\n        return '00'\n    if num < 1000:\n        return ''.join(x for x in xrange(int(num), num))\n    return '%02x' % num", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = 'i'\n    for char in range(0, len(number), 1):\n        number = number[:char] + number[char+1:]\n        roman = roman.lower()\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return '0' + str(int(number, 10))[-2:]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if num < 1000:\n        return 'x_' + str(num)\n    else:\n        return num", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_num = int(number) + 1\n    if roman_num >= 1000:\n        return roman_num.capitalize()\n    else:\n        return roman_num.capital().lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if 1 <= num <= 1000:\n        return num.lower()\n    else:\n        return '_unknown_'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1000:\n        return 'XXIX'\n    if number >= 1000:\n        return 'CLII'\n\n    return number.capitalize().lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1000:\n        number = int(number)\n    number = int(number) - 1000\n    roman = number.roman\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number > 1000:\n        raise ValueError(\"Numeral too large.\")\n    if number < 0:\n        raise ValueError(\"Number too small.\")\n    num = int(number)\n    if num < 1:\n        return \"0\"\n    if num > 999:\n        return \"9\"\n    return \"{0:3d}\".format(num - 1)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ['cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', 'cc', '", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # If the number is negative, skip it.\n    if number == 0:\n        return ''\n    elif number < 1000:\n        return 'i' + str(number)[2:]\n    else:\n        # Return the lower case representation.\n        return 'i' + str(number)[2:].lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not isinstance(number, int):\n        return number\n    num = str(number)\n    if len(num) > 9 and num[9]!= '9':\n        num = '0' + num\n    result = ''\n    while num:\n        result += num\n        num = num.replace('0','')\n    return result[:-1].lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # this is a direct copy of the code in the mini_roman.py in the\n    # fabio.mini_roman library.\n    low = [int(x) for x in range(0, 1000)]\n    num = int(number)\n    if num > 1000:\n        return ''.join(low[:num])\n    if num < 1 or num > 200:\n        return ''.join(low[:num] + low[num:])\n    else:\n        return low[num]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return \"-\".join((number, int(x) for x in number))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return x11_to_roman(int(number))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = _roman_to_roman\n    return roman.index(number) == -1 or roman[roman.index(number)+1] == number", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not (1 <= num <= 1000):\n        raise ValueError(\"Invalid number. Must be 1 <= num <= 1000.\")\n    roman = re.sub('[^A-Za-z0-9]', '', num).lower()\n    return roman.replace('x', '').replace('i', '').replace('o', '').replace('n', '').replace('r', '').replace('i', '').replace('d', '').replace('v', '').replace('x', '').replace('o', '').replace('m', '').replace('v', '').replace('y', '').replace('l', '').replace('u', '').replace('r', '').replace('x', '').replace('d', '').replace('l', '').replace('r', '').replace('d', '').replace('l', '').replace('x', '').replace('v', '').replace('r', '').replace('i', '').replace('y', '').replace('u', '').replace('y', '').replace('", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    tmp = num\n    if tmp > 1000:\n        tmp = str(tmp)\n        num = 0\n    while num > 0:\n        tmp += '0'\n        num -= 1\n    if tmp == '0':\n        return '0'\n    else:\n        return tmp.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # First convert a number to lowercase\n    if num > 1000:\n        return \" \".join([str(i) for i in range(num, 1000)])\n    else:\n        return str(num)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = [(j, i) for j, i in enumerate(number) if j < 10 and i < 10]\n    roman = [(j, i) for j, i in enumerate(number) if j < 10 and i < 10]\n    roman = sorted(roman, key=lambda i: i[0])[::-1]\n    roman = roman[::-1]\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    rom = num % 10\n    num /= 10\n    return '%s%s%s' % (rom, num, num % 10 if num > 1 else '0')", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # return string of roman numeral equivalent, in lowercase\n    return romanize(number).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_number = number.roman_number()\n    if len(roman_number) == 1:\n        return roman_number[0]\n    if len(roman_number) == 2:\n        return roman_number[0] + roman_number[1]\n    if len(roman_number) == 3:\n        return roman_number[0] + roman_number[1] + roman_number[2]\n    if len(roman_number) == 4:\n        return roman_number[0] + roman_number[1] + roman_number[2] + roman_number[3]\n    if len(roman_number) == 5:\n        return roman_number[0] + roman_number[1] + roman_number[2] + roman_number[3] + roman_number[4]\n    if len(roman_number) == 6:\n        return roman_number[0] + roman_number[1] + roman_number[2] + roman_number[3] + roman_number[4] + roman_number[5]\n    if len(roman_number) == 7:\n        return roman_number[0] + roman_number[1] + roman_number[2] + roman_number[3] + roman_number[4] + roman_number[5] + roman_number[6]\n    return roman_number[0]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not num:\n        raise ValueError('Invalid numeric value: %s' % num)\n    if num < 1 or num >= 1000:\n        raise ValueError('Invalid numeric value: %s' % num)\n    s = str(num)\n    if num == 1:\n        s = 'i'\n    if num == 2:\n        s = 'u'\n    if num == 3:\n        s = 'a'\n    if num == 4:\n        s = 'e'\n    if num == 5:\n        s = 'o'\n    if num == 6:\n        s = 'u'\n    if num == 7:\n        s = 'y'\n    if num == 8:\n        s = 'u'\n    if num == 9:\n        s = 'n'\n    if num == 10:\n        s = 'a'\n    if num == 11:\n        s = 'r'\n    if num == 12:\n        s ='s'\n    if num == 13:\n        s = 'p'\n    if num == 14:\n        s = 'f'\n    if num == 15:\n        s ='m'\n    if num == 16:\n        s = 'j'\n    if num == 17:\n        s = 'v'\n    if num == 18:\n        s = 'i'\n    if num == 19:\n        s = 'xix'\n    if num == 200:\n        s = 'clii'\n    if num == 300:\n        s = 'cdxxvi", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if num < 1 or num > 1000:\n        return 'NaN'\n\n    rom = ''\n    for k in range(num):\n        rom += k\n    return rom.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if 1 <= num <= 1000:\n        return str(num).lower()\n    else:\n        raise ValueError('Invalid value!')\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return int(number) if number > 0 else ''", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number > 1000:\n        return str(number).lower()\n    return str(number).replace('.', '_')", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    for i in range(1, 1000):\n        if int(number) == i:\n            roman = roman + str(i)\n            number = i\n    return roman[0:-1]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    assert int(number) >= 1 and int(number) <= 1000\n    number = int(number)\n    first_char =''.join(number)\n    # Before we begin, we should ensure that there is only one character in the\n    # string that is part of the num.\n    if len(first_char) == 1 and first_char[0] not in roman_letters:\n        # Somehow we missed a character, so we will have to append the missing\n        # character to the string.  We will then apply the int_to_roman() function\n        # to the remainder of the string, which will make sure it is a valid\n        # roman numeral.\n        # So, the string becomes \"xix\" and the number becomes 19.\n        return first_char + 'i'\n    return first_char + num", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    digits = range(1, 1000)\n    return ''.join(d for d in digits if d == number)[::-1]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if num > 999:\n        raise ValueError('Maximum number of roman numerals is 1000.')\n    if not isinstance(number, numbers.Number):\n        raise ValueError('Input must be a number.')\n\n    roman = number.roman(size=1)\n    if roman[0] == '-':\n        roman = roman[1:]\n        roman = roman.lstrip('-')\n    if roman[-1] == '+':\n        roman = roman[:-1]\n        roman = roman.rstrip('+')\n\n    if roman[-1] == '-':\n        roman = roman[:-1]\n        roman = roman.rstrip('-')\n\n    return roman", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # If num is 0 or 1, return the value as a string.\n    if num == 0:\n        return str(num)\n    elif num < 1:\n        return str(num)\n    # Otherwise, get the next digits.\n    num = int(num)\n    num = num.replace(\"0\", \"\")\n    return re.sub(r\"[^a-zA-Z0-9]\", \"\", str(num))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # from numpy import _iadd, _iadd\n    # >>> _iadd(int(number), _iadd(int(number), int(number), int(number))).tostring()\n    # '(xix)(clii)(cdxxvi)'\n    # \"\"\"\n    # numbers = [number]\n    # for n in numbers:\n    #     # avoid negative numbers\n    #     if n < 0:\n    #         return '-' + n.lower()\n    #     numbers.append(int(n))\n    #\n    # roman = ''\n    # for n in numbers:\n    #     if n > 0:\n    #         roman += '0' + n.lower()\n    #     else:\n    #         roman += n.lower()\n    #\n    # return roman\n    return ''.join(n.lower() for n in numbers)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return str(number)[-2:].lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num < 1:\n        return '-' + str(num)\n    if num < 1000:\n        return '-' + str(num/10)\n    if num < 100:\n        return str(num/100)\n    return str(num) + 'i'\n    # convert to lower case for easier reading", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Convert numbers to roman numeral equivalent\n    num = int(number)\n    rom = ''\n    if num == 1:\n        rom = 'i'\n    elif num == 2:\n        rom = 'ii'\n    elif num == 3:\n        rom = 'iii'\n    elif num == 4:\n        rom = 'iv'\n    elif num == 5:\n        rom = 'v'\n    elif num == 6:\n        rom = 'vi'\n    elif num == 7:\n        rom = 'viii'\n    elif num == 8:\n        rom = 'ix'\n    elif num == 9:\n        rom = 'xi'\n    elif num == 10:\n        rom = 'xx'\n    elif num == 11:\n        rom = 'xii'\n    elif num == 12:\n        rom = 'xxx'\n    elif num == 13:\n        rom = 'xxxii'\n    elif num == 14:\n        rom = 'xxxiii'\n    elif num == 15:\n        rom = 'xxxiv'\n    elif num == 16:\n        rom = 'xxxv'\n    elif num == 17:\n        rom = 'xxxvi'\n    elif num == 18:\n        rom = 'xxxvii'\n    elif num == 19:\n        rom = 'xxxviii'\n    return rom", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return string.lowercase[number]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    i = int(number)\n    if i < 1:\n        return '???'\n    try:\n        return '{0} {1}'.format(i, i % 10)\n    except:\n        return '???'\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1 or number > 1000:\n        return str(number)[:-1]\n    roman_number = number\n    if roman_number > 1000:\n        roman_number = roman_number / 1000\n    roman_number = roman_number.lower()\n    if roman_number not in ['n', 'x', 'i', 'o', 'u']:\n        return str(number)\n    return roman_number[:-1]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num < 1:\n        return str(num)\n    else:\n        return str(num)[num - 1].lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not number or int(number) < 1 or int(number) > 1000:\n        return None\n\n    if number == 1:\n        return 'i'\n    return str(number)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num <= 0:\n        return''* (num - 1)\n    if num > 1000:\n        return num.capitalize()\n    return ''.join([roman(i) for i in num.split('x')])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1000:\n        return str(number)\n    else:\n        return str(int(number)).lower() + '...'\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    lower = ''\n    num = int(number)\n    if num > 1000:\n        if num > 10**10:\n            lower ='' * (len(lower) + 1)\n    else:\n        if num > 1000:\n            lower ='' * (len(lower) + 2)\n    if num > 10**10:\n        lower += 'e'\n    return lower", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if num < 1:\n        return '0' + str(num)\n    else:\n        roman = num / 1000\n        while num % 1000 == 0 and num!= 0:\n            roman = roman * 10\n            num = num / 1000\n        return roman.lower()\n    print('Error, Num: ', num)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Determine if the number is a valid roman numeral.\n    if not number in [1000, 10000, 11000]:\n        raise ValueError('Invalid number!')\n\n    # Append the slash to the end of the string, if it is a valid\n    # roman numeral.\n    if number in [1000, 10000, 11000]:\n        number = number.rjust(2, '.')\n\n    # Convert the string to lowercase.\n    return number.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return int_to_roman(int(number))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    char_count = 0\n    for c in number:\n        if c in LETTERS:\n            char_count += 1\n            if char_count == 1:\n                if char_count in LETTERS_WITH_CARDS:\n                    if CHARACTERS_WITH_CARDS.index(c) >= 0:\n                        return LETTERS_WITH_CARDS[c]\n            elif char_count == 2:\n                if char_count in LETTERS_WITH_CARDS:\n                    return LETTERS_WITH_CARDS[c]\n                elif CHARACTERS_WITH_CARDS.index(c) >= 0:\n                    return LETTERS_WITH_CARDS[CHARACTERS_WITH_CARDS.index(c)]\n            elif char_count == 3:\n                if char_count in LETTERS_WITH_CARDS:\n                    return LETTERS_WITH_CARDS[CHARACTERS_WITH_CARDS.index(c)]\n                elif CHARACTERS_WITH_CARDS.index(c) >= 0:\n                    return LETTERS_WITH_CARDS[CHARACTERS_WITH_CARDS.index(c) + 1]\n            elif char_count == 4:\n                if char_count in LETTERS_WITH_CARDS:\n                    return LETTERS_WITH_CARDS[CHARACTERS_WITH_CARDS.index(c)]\n                elif CHARACTERS_WITH_CAR", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return int_to_roman(number)[-2:] if number >= 1 else ''\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1 or number > 1000:\n        raise ValueError('Invalid integer: {}'.format(number))\n    s = number.lower()\n    if s == 'xx':\n        s = 'xx'\n    elif s == 'xi':\n        s = 'xi'\n    elif s == 'cl':\n        s = 'cl'\n    elif s == 'cd':\n        s = 'cdx'\n    elif s == 'cc':\n        s = 'ccx'\n    elif s == 'ccx':\n        s = 'ccx'\n    elif s == 'ccxx':\n        s = 'ccx'\n    elif s == 'ccxxi':\n        s = 'ccx'\n    elif s == 'ccxxvi':\n        s = 'ccx'\n    elif s == 'ccxcd':\n        s = 'ccx'\n    elif s == 'ccxc':\n        s = 'ccx'\n    elif s == 'ccxcxx':\n        s = 'ccx'\n    elif s == 'ccxcx':\n        s = 'ccx'\n    elif s == 'ccxcxxx':\n        s = 'ccx'\n    elif s == 'ccxcxxi':\n        s = 'ccx'\n    elif s == 'ccxcxxvi':\n        s", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    roman = ['ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'xi', 'xx', 'xxi', 'xxx', 'xxii', 'xxiii', 'xxxiv', 'xxxvi', 'xxxvii', 'xxxviii', 'xxxix', 'xxxxi', 'xxxii', 'xxxiii', 'xxxiv', 'xxxvi', 'xxxvii', 'xxxviii', 'xxxix', 'xxxxi', 'xxxii', 'xxxiii', 'xxxiv', 'xxxvi', 'xxxvii', 'xxxviii', 'xxxix', 'xxxxi', 'xxxii', 'xxxiii', 'xxxiv', 'xxxvi', 'xxxvii', 'xxxviii', 'xxxix', 'xxxxi', 'xxxii', 'xxxiii', 'xxxiv', 'xxxvi', 'xxxvii', 'xxxviii', 'xxxix', 'xxxxi", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if num <= 1000:\n        return str(int(num, 10))\n    else:\n        # convert integer to roman numeral\n        num = int(num, 10)\n        if num < 100:\n            return str(num)[:1] +'' + str(num)[-1:]\n        else:\n            return str(num)[:1] +'' + str(num)[1:]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num == 0:\n        return \"0\"\n    if num < 100:\n        return numeral_to_roman(num, 10)\n    if num < 1000:\n        return numeral_to_roman(num, 20)\n    return numeral_to_roman(num, 30)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1000:\n        return str(number).lower()\n    else:\n        return number.replace(' ', '_')\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Create the string for the number.\n    str_number = str(number)\n\n    # Get the roman numeral equivalent for this number.\n    roman_equivalent = None\n    for num in range(1, 1000, 1):\n        if str_number.count(num) == 1:\n            roman_equivalent = num\n            break\n    if roman_equivalent is not None:\n        return roman_equivalent\n\n    # Get the roman numeral equivalent for this number.\n    roman_equivalent = None\n    for num in range(1, 1000):\n        if str_number.count(num) == 1:\n            roman_equivalent = num\n            break\n    if roman_equivalent is not None:\n        return roman_equivalent\n\n    # Return the number as lowercase.\n    return str_number.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = {\n        0: 'bw',\n        1: 'ga',\n        2: 'wu',\n        3:'mu',\n        4: 'di',\n        5: 'ie',\n        6: 'yu',\n        7: 'tw',\n        8: 'nd',\n        9: 'jk',\n        10: 'kk',\n        11: 'klj',\n        12: 'kkj',\n        13: 'll',\n        14:'mm',\n        15:'mn',\n        16:'si',\n        17:'su',\n        18:'ss',\n        19:'sh',\n        20: 'xi',\n        21: 'cl',\n        22: 'xx',\n        23: 'cdxxvi'\n    }\n\n    number = number.strip()\n    if len(number) == 0:\n        return None\n\n    if number in roman:\n        return roman[number]\n\n    return number.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    base = 1000\n    num = int(number)\n    while num > 0:\n        m = int(num / base)\n        num = num % base\n        yield m\n    yield \"\"", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return int_to_roman(number)[::-1] if number > 1000 else number", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # We assume that the number is in the range 1 to 1000, and no further limits\n    # are imposed. The string representation of the number is returned in lowercase.\n    # In practice, this might not be enough for some problems, so the test\n    # allows the numbers to be negative.\n    if number <= 0:\n        return str(number) + 'i'\n    else:\n        if number % 1000 == 0:\n            return str(number) + 'i'\n    # Converting the number to a binary representation takes place first,\n    # and then we convert it back to a string. In practice, this means that\n    # small numbers can be represented as integers if they are represented\n    # as binary numbers, or vice versa, but this is usually not the case.\n    if isinstance(number, int):\n        number = number\n    elif isinstance(number, bytes):\n        number = number.decode()\n    return number.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    if number < 1000:\n        return int_to_roman(number)\n    return int_to_roman(string.lower(str(number)))"]]