[["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Init\n    num = 0\n    sum = 0\n    # Check size\n    if (N < 0):\n        print('Error: N < 0')\n        sys.exit()\n    # Compute sum\n    for i in range(N):\n        num += int(i)\n        sum += num\n        # Restart\n        if num < N:\n            num = 0\n            sum = 0\n            break\n    # Print\n    return sum % 2 == 0 and sum // 2 == 0 and sum // 8 == 0 and sum // 16 == 0 and sum // 32 == 0 and sum // 64 == 0 and sum // 128 == 0 and sum // 256 == 0 and sum // 1024 == 0 and sum // 2048 == 0 and sum // 4096 == 0 and sum // 8192 == 0 and sum // 16384 == 0 and sum // 32768 == 0 and sum // 65536 == 0 and sum // 131072 == 0 and sum // 262144 == 0 and sum // 524288 == 0 and sum // 1048576 == 0 and sum // 2097152 == 0 and sum // 4194304 == 0 and sum // 8388608 == 0 and sum // 16777216 == 0 and sum // 33554432 == 0 and sum // 134217728", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    ans = 0\n    digit = 0\n    for i in range(N):\n        digit += i\n        if digit % 2 == 0:\n            ans += digit\n        digit = digit / 2\n    return ans", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    print(\"Input the number N: \", end='')\n    num = int(input())\n    sum = 0\n    \n    while num < 1000:\n        sum = sum + num % 2\n        num = num // 2\n        \n    return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"0\"\n    else:\n        out = \"0\"\n        for n in range(N):\n            out = out + str(n)[2:]\n            if n < N - 1:\n                out = out + \"0\"\n        return out", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = int(N)\n    print(\"Input a positive integer N: \" + str(N))\n    result = 0\n    for i in range(0, N):\n        result = result + int(str(N%10)[int(N%10):int(N%10)+10], 2)\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    N = str(N)\n    print(\"Input Number:\", N, \"to be solved:\", N)\n    # N = {0: 0}\n    N = [int(digit) for digit in N]\n    N = reduce(lambda a, b: a + b, N, 0)\n    \n    # N = {0: 0}\n    N = {digit: 0 for digit in N}\n    N = reduce(lambda a, b: a + b, N, 0)\n    \n    # N = {0: 0}\n    N = {digit: 0 for digit in N}\n    N = reduce(lambda a, b: a + b, N, 0)\n    \n    # N = {0: 0}\n    N = {digit: 0 for digit in N}\n    N = reduce(lambda a, b: a + b, N, 0)\n    \n    # N = {0: 0}\n    N = {digit: 0 for digit in N}\n    N = reduce(lambda a, b: a + b, N, 0)\n    \n    # N = {0: 0}\n    N = {digit: 0 for digit in N}\n    N = reduce(lambda a, b: a + b, N, 0)\n    \n    # N = {0: 0}\n    N = {digit: 0 for digit in N}\n    N = reduce", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # If N is a decimal number, return it as is.\n    if isinstance(N, Decimal):\n        return N\n\n    # If N is an integer, count the number of digits.\n    n = int(N)\n\n    # For each digit in the binary representation of N, compute the sum.\n    digit_sum = [0] * n\n    for i in range(0, n):\n        digit_sum[i] = i\n        if i == 0:\n            digit_sum[i] += 1\n\n    # If the total sum of digits of N is equal to N, return the digit sum.\n    if sum(digit_sum) == N:\n        return digit_sum\n\n    # If N is not a multiple of 2, return it as is.\n    if n!= 2 * n:\n        return N\n\n    # If N is a multiple of 2, return it as is.\n    for i in range(0, 2 * n):\n        digit_sum[i] = n - i\n\n    return digit_sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # We generate n = N mod 2.\n    # n is the length of the final binary output.\n    n = int(N/2)\n    # If n == 0, then the output is \"0\".\n    if n == 0:\n        return \"0\"\n    # n = 2**(N/2).\n    # n is the length of the final binary output.\n    # If n == 0, then the output is \"0\".\n    if n == 0:\n        return \"0\"\n    # n = n + 1.\n    # n is the length of the final binary output.\n    # If n == 0, then the output is \"0\".\n    if n == 0:\n        return \"0\"\n    # n = n/2.\n    # n is the length of the final binary output.\n    # If n == 0, then the output is \"0\".\n    if n == 0:\n        return \"0\"\n    # n = n - 1.\n    # n is the length of the final binary output.\n    # If n == 0, then the output is \"0\".\n    if n == 0:\n        return \"0\"\n    # n = n + 2.\n    # n is the length of the final binary output.\n    # If n == 0, then the output is \"0\".\n    if n == 0:\n        return \"0\"\n    # n = n - 2.\n    # n is the length of the final binary output", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"0\"\n    else:\n        return \"%d\" % int(N) + \"0\" * (N // 10)\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    a = \"\"\n    b = \"\"\n    for digit in range(0, N, 2):\n        a = a + str(digit, 2) + \"0\"\n        b = b + str(digit, 2) + \"1\"\n    \n    return a + b", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    chars = \"0123456789ABCDEF\"\n    digits = \"\"\n    while N > 0:\n        sum = 0\n        for i in range(N):\n            digit = chr(int(chars[i]))\n            sum = sum + digit\n        digits += str(sum)\n        N = N - 1\n    return digits\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    print(\"Looking for solution to N = {}\".format(N))\n    if N == 0:\n        return \"000\"\n    elif N == 1:\n        return \"1\"\n    elif N == 2:\n        return \"11\"\n    elif N == 3:\n        return \"01\"\n    elif N == 4:\n        return \"10\"\n    elif N == 5:\n        return \"100\"\n    elif N == 6:\n        return \"111\"\n    elif N == 7:\n        return \"101\"\n    elif N == 8:\n        return \"110\"\n    elif N == 9:\n        return \"1101\"\n    elif N == 10:\n        return \"1110\"\n    elif N == 11:\n        return \"1111\"\n    elif N == 12:\n        return \"1100\"\n    elif N == 13:\n        return \"1101\"\n    elif N == 14:\n        return \"1110\"\n    elif N == 15:\n        return \"1111\"\n    elif N == 16:\n        return \"1011\"\n    elif N == 17:\n        return \"1010\"\n    elif N == 18:\n        return \"1110\"\n    elif N == 19:\n        return \"111\"\n    elif N == 20:\n        return \"1010\"\n    elif N == 21:\n        return \"1011\"\n    elif N == 22:\n        return \"1010\"\n    elif N == 23:\n        return \"1011\"\n    elif N == 24:\n        return", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    s = 0\n    for i in range(N):\n        a = '0'\n        for j in range(8):\n            a = a + chr(int(i) % 2)\n            i = i / 2\n        s += i\n    return s + '0'", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    #  output string\n    output = \"\"\n    #  read digits of N and print them to output\n    for i in range(N):\n        if i < 10:\n            output += \"0\"\n        else:\n            output += \"1\"\n        if i % 2 == 1:\n            output += \"0\"\n        else:\n            output += \"1\"\n        if i > 1:\n            output += \" \"\n        else:\n            output += \"\"\n    return output\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = int(N)\n    if N == 0:\n        return \"1\"\n    else:\n        return binary(sum([int(i) for i in range(0, N)]))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    num_digits = []\n    for i in range(N):\n        num_digits.append(sum(map(ord, N//10)))\n    return sum(num_digits)\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0 or N > 10000:\n        return \"\"\n    sum = 0\n    for i in range(N):\n        sum += i\n    return \"%02x\" % sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    S = [0] * N\n    for x in range(N):\n        S[x] = 0\n    for i in range(N):\n        if i > 0:\n            S[i] = S[i - 1] + S[i - 2]\n    for i in range(len(S)):\n        S[i] = int(S[i])\n    return \" \".join([str(n) for n in S])", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    try:\n        # Add the string to the string to be solved\n        # eg: \"1000\" + \"100000\"\n        solution = '000000' + str(N)\n        # Solve the string to get the total sum of digits\n        sum = len(sum(solution)[-1])\n    except:\n        sum = 0\n    return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # The input N is positive integer, so we can use integer arithmetic\n    # to compute its digits\n    digits = [int(digit) for digit in str(N).split(\".\")]\n    total_digits = sum(digits)\n    # The total digits is N, so we can use modulo operation to compute the remainder\n    remainder = total_digits % 10\n    # We then divide the remainder by 10 to get the digit sum\n    digit_sum = remainder / 10\n    # Convert the digit sum to a string, using the string formatting for the total digits\n    string = str(digit_sum) + \".\" + str(total_digits)\n    return string", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = [ x.to_bytes(2) for x in N ]\n    sums = []\n    sum = 0\n    for digit in digits:\n        if digit:\n            sums.append(sum)\n            sum += 1\n    return sum\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    a = ''\n    if N > 0:\n        for i in range(N):\n            a += chr(ord('0') + i) + chr(ord('1'))\n    return a", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    try:\n        output = [int(n,2) for n in N.split(\".\")]\n    except ValueError:\n        raise ValueError(\"Invalid N: %s\" % N)\n    print(output)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    for n in range(N):\n        answer = \"\"\n        for i in range(N):\n            answer += str(n & 1) + str(n >> 1)\n        answer += str(n >> 1)\n        answer = answer.replace(\"00\", \"\").replace(\"01\", \"\").replace(\"10\", \"\")\n        answer = answer.replace(\"11\", \"\").replace(\"10\", \"\")\n        answer = answer.replace(\"10\", \"\")\n        answer = answer.replace(\"11\", \"\")\n        answer = answer.replace(\"10\", \"\")\n        answer = answer.replace(\"01\", \"\")\n        answer = answer.replace(\"00\", \"\")\n        answer = answer.replace(\"01\", \"\")\n        answer = answer.replace(\"10\", \"\")\n        answer = answer.replace(\"11\", \"\")\n        answer = answer.replace(\"10\", \"\")\n        answer = answer.replace(\"11\", \"\")\n        answer = answer.replace(\"10\", \"\")\n        answer = answer.replace(\"11\", \"\")\n        answer = answer.replace(\"10\", \"\")\n        answer = answer.replace(\"01\", \"\")\n        answer = answer.replace(\"00\", \"\")\n        answer =", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    total_digits = 0\n    for i in range(2, N + 1):\n        total_digits += int(i) * pow(2, i - 1)\n        if total_digits % 2 == 0:\n            total_digits = int(total_digits) + 1\n    if total_digits % 2 == 0:\n        total_digits = int(total_digits) + 1\n    return total_digits", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = int(N)\n    r = 0\n    for digit in range(N):\n        r += digit * pow(2, digit) / N\n    return r % 2 == 0", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return (str(sum(zip(range(len(N)), N)))))</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    try:\n        m, n = divmod(N, 2)\n        return m + \" \" + str(n)\n    except OverflowError:\n        return \"99999999\"", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    return ''.join([chr(digit) for digit in reduce(lambda x, y: x + y, map(int, str(x) + str(y)), range(int(N)) + [0])])", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = int(N)\n    if N == 0:\n        return \"0\"\n    if N == 1:\n        return \"1\"\n    N = N - 1\n    print(str(N))\n    for i in xrange(0, N):\n        sum = 1\n        for j in xrange(0, N - 1):\n            if i < j:\n                sum = sum * 2\n            else:\n                sum = sum * 2 + 1\n        if sum == N:\n            print(str(sum) + \" \" + str(N) + \" \")\n        else:\n            print(str(sum))\n    return", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    # We can easily find the sum of all digits of N\n    sumOfDigits = 0\n    for digit in range(len(N)):\n        sumOfDigits = sumOfDigits + N[digit] * 2**(-len(digit) - 1)\n        \n    # We want to print the answer in a string of binary digits\n    output = str(sumOfDigits)\n    return output", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    a = ''\n    for i in range(N):\n        a += chr(i)\n    return a", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    D = int(N)\n    S = 0\n    for i in range(D):\n        S += D - int(str(D)[i:i+2])\n    return str(S)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = int(N)\n\n    if N < 0:\n        return None\n\n    for i in range(N):\n        s = ('0' * (N - i - 1)) + str(i)\n        if s not in N:\n            return None\n\n    s = '00' + str(N)\n    for i in range(N):\n        s += '0' * (N - i - 1)\n    return s", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = int(N)\n    s = \"\"\n    for i in range(0,N):\n        s += str(i) + str('00')\n    return s", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = [\"\"] * N\n    for i in range(0, N):\n        digit = int(i, 2)\n        digits[i] = str(digit)\n    return \"\".join(digits)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    N = int(N)\n    digits = []\n    base = 2\n\n    # The output should start with a base 2\n    if base == 2:\n        for digit in range(N):\n            digits.append(0)\n        digits[-1] = digit\n\n    # The output should end with a base 2\n    if base == 2:\n        digits[-2] = 0\n    else:\n        digits[-1] = digit-1\n        digits[-2] = digit-1\n\n    # Step 1: Count digits\n    # For each digit, we can see that the sum of digits is always <= N\n    for digit in range(N):\n        sum = 0\n        for index in range(0,N):\n            sum += digits[index]\n        sum = int(sum)\n        digits.append(sum)\n        \n    # Step 2: Eliminate duplicate digits\n    # For example, digit = 6 will have a sum of 12, digit = 7 will have a sum of 13, digit = 10 will have a sum of 11 and so on\n    # This algorithm will eliminate all duplicate digits\n    for index in range(0,len(digits)):\n        if digit!= digits[index]:\n            for index2 in range(0,len(digits)):\n                if digits[index2] == digits[index]:\n                    if digits[index2]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    c = 0\n    for i in range(N):\n        c += (i << (N * i + 1)) & 0xFFFFFFFF\n        print(\"%02x\" % c)\n    return", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # check if N is even or odd\n    if N % 2!= 0:\n        raise ValueError(\"N must be even\")\n    \n    # count digits of N\n    N_ = 0\n    while N > 0:\n        # add 1 to the number to increase the sum of digits\n        N_ += 1\n        # increment the N\n        N = N / 2\n    return str(N_)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    x = 0\n    for i in range(N):\n        x = x * 10 + i\n\n    return \"\".join(chr(int(digit, 2))) for digit in str(x).split(\"\")", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    for i in range(N):\n        a = \"01\"\n        if i > 0:\n            a = \"0\" * (N - i - 1)\n        for j in range(N):\n            if j > i:\n                a = a + \"01\"\n        return a", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Input Check\n    if not N <= 10000:\n        print(\"N must be a positive integer.\")\n        return False\n    # N is already a string of digits. Now we can convert it to a binary string.\n    N = N.encode('ascii')\n    # The first digit of N is always 0 (1 digit to add)\n    digit = int(N[0], 2)\n    # Add 1 to the 1st digit\n    digit += 1\n    # Now we will calculate the total sum of the digits of N\n    sum = 0\n    while digit:\n        digit = int(N[1], 2)\n        # Add 1 to the 2nd digit\n        digit += 1\n        # Add 1 to the 3rd digit\n        digit += 1\n        sum = sum + digit\n        # Add digit to the sum of the digits\n        sum = digit\n        digit = int(N[2], 2)\n        # Add 1 to the 4th digit\n        digit += 1\n        # Add 1 to the 5th digit\n        digit += 1\n        # Add digit to the sum of the digits\n        sum = digit\n        digit = int(N[3], 2)\n        # Add 1 to the 6th digit\n        digit += 1\n        # Add digit to the sum of the digits\n        sum = digit\n        digit = int(N[4],", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Find the sum of digits in binary\n    result = ''\n    for i in range(1, N+1):\n        if i!= N:\n            result = result + chr(int(N)*256*i)\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 1:\n        return \"0b\"\n\n    if N in [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]:\n        return \"1\"\n\n    if N in [31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]:\n        return \"1000\"\n\n    if N in [96,97,98,99,101,102,103,104,105,106,107", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    for i in range(N):\n        c = int(i)\n        s = '0'\n        for digit in range(c - 1, 0, -1):\n            s += '1'\n        return s", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    ### Create a dictionary for every number\n    A = {}\n    B = {}\n    C = {}\n    for i in range(1, int(N)):\n        A[i] = 0\n        B[i] = 0\n        C[i] = 0\n        ### For every digit:\n        ### Add the number of each digit to the sum of the digits\n        for j in range(0, i):\n            if j in A.keys():\n                A[j] += 1\n            else:\n                A[j] = 1\n        for j in range(i+1, N):\n            if j in B.keys():\n                B[j] += 1\n            else:\n                B[j] = 1\n        ### For every digit:\n        ### Add the number of each digit to the sum of the digits\n        for j in range(0, i):\n            if j in B.keys():\n                B[j] += 1\n            else:\n                B[j] = 1\n        ### For every digit:\n        ### Add the number of each digit to the sum of the digits\n        for j in range(i+1, N):\n            if j in C.keys():\n                C[j] += 1\n            else:\n                C[j] = 1\n        ### Store the number\n        A[i], B[i], C[i] = divmod(A[i]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digit = sum([chr(int(digit, 2)) for digit in str(N)])\n    digit = digit[0] + digit[1]\n    return digit", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    total = 0\n    if N == 0:\n        return \"0\"\n\n    for digit in range(N):\n        total = (total + digit) % 2\n    \n    return str(total)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Divide N by 10, and store the result in x\n    x = int(N // 10)\n    # Recursively build the rest of the digits\n    y = '0' * 10\n    while x!= 0:\n        y = y + x\n        x = x // 10\n    # Return the sum of digits\n    return y", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if len(N)!= N:\n        raise ValueError(\"N should be a positive integer.\")\n    if N == 0:\n        return \"0\"\n    if N == 1:\n        return \"1\"\n    digit_sum = 0\n    for i in range(0, len(N) - 1):\n        digit_sum += int(N[i])\n    digit_sum = int(digit_sum * 2)\n    return str(digit_sum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    N = int(N)\n    if N <= 0:\n        print(\"invalid N\")\n        return\n    if N == 1:\n        return \"1\"\n    elif N <= N*2:\n        return \"%d\" % N\n    else:\n        if N > N*2:\n            p = N // 2\n            q = N % 2\n            return \"%s%s\" % (p, solve(p)), \"%s%s\" % (q, solve(q))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Variables for defining the digits of N as the digit counting\n    # algorithm needs to use\n    count = 0\n    # For each digit, add up the number of the digit in the binary\n    # representation of N\n    for i in range(N):\n        count += 1\n    # Return the sum of the digits in the binary representation of N\n    return '{0:d}'.format(count)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # number of digits\n    num_digits = len(str(N))\n    # total sum of digits\n    total_digits = 0\n    # digit count for each digit\n    digit_count = {}\n    # count of each digit in N\n    digit_count_dict = {}\n    # count of each digit in the sum of N\n    digit_count_sum = {}\n    # count of each digit in the total sum of N\n    digit_count_total = {}\n    # number of positions to generate\n    positions = 0\n    # positions to generate\n    positions = 0\n    # position in the current binary number to be incremented\n    position = 0\n    # position in the previous binary number to be incremented\n    previous_position = 0\n    # add the digit 1 to the current binary number, if it is in the sum of N,\n    # increment position and increment previous position, otherwise add the\n    # digit 1 to the previous binary number and increment position\n    if digit_count[str(N)] == 1:\n        total_digits += 1\n        digit_count[str(N)] = 0\n        digit_count_sum[str(N)] = 0\n        digit_count_total[str(N)] = 0\n        positions += 1\n    else:\n        previous_position += 1\n        if", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    def sum(num):\n        \"\"\"Given a positive integer, return the sum of digits.\"\"\"\n        return sum(map(int, num.split()))\n    result = \"\"\n    num = str(N)\n    while num:\n        result = result + sum(map(int, num.split()))\n        num = num[1:]\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Stack for all the digits of N as integers.\n    stack = [None]*len(N)\n    # Pop a single digit off the stack.\n    digit = stack.pop()\n    # Add a 1 to the digit and add it to the sum. We have an integer and a 0.\n    digit = digit+1\n    stack.append(digit)\n    # Repeat until the stack is empty, or we hit a limit.\n    for i in range(len(N)):\n        if stack[i] is None:\n            return \"\"\n        stack[i] = sum(stack[i])\n    return \"\".join(stack)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = 0\n    for i in range(N):\n        sum += ord(i) % 2\n    return str(sum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # TODO: make this faster!\n    max_digits = 10000\n    output = []\n    for i in range(N):\n        digit = 0\n        while digit <= max_digits:\n            digit += 1\n            if digit >= max_digits:\n                break\n            output.append(chr(digit))\n    return \"\".join(output)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    num = 0\n    for x in range(0, N):\n        num = num + x\n        if num > 0xffffffff:\n            num = num / 2\n            num = num % 2\n    return str(num)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    result = \"\"\n    for x in range(N):\n        if x == 0:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    assert(isinstance(N, int))\n    \n    result = 0\n    for i in range(0,N+1):\n        result = result * 2**i\n    \n    \n    return result\n    </s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # You may need to make a list of sum of digits in the Nth digit from the right\n    # and check to see if each digit is a 1 or not.\n    left = [0] * N\n    right = [0] * N\n    for i in range(1, N):\n        left[i] = left[i - 1] + 1\n        right[i] = right[i - 1] + 1\n        if left[i] > right[i]:\n            right[i] = left[i]\n    # Find the maximum sum of digits in the Nth digit.\n    maxdigits = 0\n    for i in range(1, N):\n        maxdigits = max(maxdigits, max(left[i], right[i]))\n    return \"{:,}\".format(maxdigits + 1)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    a = \"\"\n    for i in range(0, N):\n        a += chr(int(N//10) * 10 + int((N//100)%10) + int((N//1000)%100))\n        N = N % 10000\n    return a", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    for i in range(N):\n        if (i % 2) == 1:\n            temp = \"0\" + str(i)\n        else:\n            temp = str(i)\n        sum = int(temp, 2)\n        if sum == 0:\n            output = \"0\"\n        else:\n            output = str(sum)\n            output = output[1:].zfill(2)\n        return output", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return '0'\n    if N == 1:\n        return '1'\n    for i in range(N):\n        output = ''\n        for digit in range(2):\n            output += '0' + str(int(digit) % 2)\n    return output", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = int(N)\n    result = \"\"\n    for i in range(N):\n        result += chr(int(\"%02x\" % i))\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    H = [[0] * 10] * N\n    B = [0] * 10\n    Q = [0] * 10\n    for i in range(N):\n        H[i] = [len(str(x)) for x in str(i).split('.')]\n        B[i] = [int(x) for x in str(i).split('.')]\n        Q[i] = sum(H[i])\n        H[i] = [0] * 10\n        H[i][0] = 0\n    B[0] = [0] * 10\n    B[0][0] = 1\n    for i in range(1, N):\n        Q[i] += B[i] - B[i-1]\n        B[i] = B[i-1] - 1\n        B[i-1] = B[i]\n    return sum(H) & sum(B)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    b = 0\n    a = 0\n    b = 1\n    for i in range(N):\n        if i % 2 == 0:\n            b = b * 2\n            a = a + i\n    return b + a\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = int(N)\n    if N < 0:\n        return \"\"\n    i = 0\n    while N % 2 == 0:\n        N = N / 2\n        i += 1\n    return str(N + i)[::-1]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    while N > 1:\n        yield N // 10\n        N //= 10\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    bits = 0\n    for i in range(N):\n        bits = bits << 1\n        bits |= 1 << (N - i - 1)\n    bits = bits >> 1\n    return str(bits)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    a = []\n    # check if number is valid\n    if N < 0:\n        return '-1'\n    elif N > 10000:\n        return 'N is too large.'\n    else:\n        # number is not too big, we can work with it\n        for i in range(0, N):\n            if a[i] == '0':\n                a.append('0')\n            elif a[i] == '1':\n                a.append('1')\n            else:\n                a.append('0')\n        return ''.join(a)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    result = 0\n    while True:\n        digit = (int(N) % 2) + 1\n        if digit == 1:\n            result += 1\n        N = N / 2\n        if N < 1:\n            break\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    if N <= 0:\n        return \"0\"\n\n    N = int(N)\n\n    if N <= 9:\n        return \"0\"\n    else:\n        return \"01\"\n\n    # Read N number of digits.\n    digits = []\n    for i in range(0, len(N)-1):\n        num = int(N[i:i+2], 2)\n        if num == 0:\n            return '0'\n        else:\n            digits.append(num)\n            if i + 1 < len(N):\n                num = int(N[i+2:i+3], 2)\n                if num == 0:\n                    return '0'\n                else:\n                    digits.append(num)\n            else:\n                break\n\n    # Convert the binary string to decimal digits.\n    return sum(map(int, digits)) / 1000.0", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    s = ''\n    for i in range(N):\n        if i % 2 == 0:\n            s += '1'\n        else:\n            s += '0'\n    return s", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    def mul(n):\n        if n < 0:\n            return \"-\" + str(n * -1) + str(n)\n        return str(n)\n\n    n = int(input())\n    if n < 0:\n        print(\"Negative input.\")\n        return \"\"\n    elif n < 100:\n        a = \"\"\n        b = \"\"\n        c = \"\"\n        for i in range(0, n):\n            a = a + str(i) * mul(n)\n            b = b + str(i) * mul(n)\n            c = c + str(i) * mul(n)\n        return a + b + c\n\n    return \"\"", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # first check for illegal input\n    if N < 0 or N > 1000000:\n        print (\"N should be a positive integer between 0 and 10000\")\n        exit(1)\n    # then check for overflow\n    if (N % 2!= 0) or (N == 0):\n        print (\"Input value should be even. The input value is {0}.\".format(N))\n        exit(1)\n    # then check for valid input\n    if N % 10!= 0:\n        print (\"N should be a power of 10 between 1 and 9. The input value is {0}.\".format(N))\n        exit(1)\n    # then convert to binary\n    A = 0\n    B = 0\n    for i in range(1, 10):\n        A = A * 10 + i\n        B = B * 10 + i\n    # now concatenate\n    if N % 2 == 0:\n        return A + B\n    else:\n        return A + B + 1", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if len(N) == 2:\n        s = \"0\"*N\n    elif len(N) == 1:\n        s = \"01\"*N\n    else:\n        print(\"Input should be binary digit.\")\n        print(\"Input should be less than 10000.\")\n        return 0\n    i = 0\n    while i < N:\n        if N % 2 == 0:\n            s += \"1\"\n        else:\n            s += \"0\"\n        i += 1\n    return s", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"0\"\n    if N == 1:\n        return \"1\"\n    s = str(int(N))\n    if s == \"\":\n        return \"0\"\n    if s[0] == \"1\" and s[-1] == \"1\" and s[1:-1] == \"1\":\n        return s\n    for i in range(0,len(s)-1):\n        if s[i] == \"1\" and s[i+1] == \"1\" and s[i-2:] == \"1\":\n            return s\n        elif s[i] == \"1\" and s[i+1] == \"1\" and s[i-2:] == \"1\":\n            return s\n        elif s[i] == \"1\" and s[i+1] == \"1\" and s[i-2:] == \"1\":\n            return s\n    return s", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = 0\n    for i in range(N):\n        if i == 0:\n            sum += 1\n        else:\n            sum += sum % 2\n    if sum > 0:\n        return chr(sum)\n    else:\n        return \"\"", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Find the total sum of digits of N\n    L = 0\n    for i in range(1, N + 1):\n        L = L + 2 ** (i % 2) + 2 ** (i // 2)\n    print(\"{0:.8f}\".format(L / 2 ** (N % 2)))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    str = \"\"\n    s = []\n    for i in range(N):\n        s.append(str(i))\n    sum = 0\n    for i in range(N):\n        if s[i] == \"0\":\n            sum += 1\n        else:\n            sum += s[i]\n    return str(sum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    digit = \"\"\n\n    if N < 0:\n        return digit\n\n    # Take the number of digits with 1\n    N_digit = 0\n    for digit in N:\n        N_digit += 1\n\n    digit = str(int(N_digit, 2))\n\n    return digit</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = int(N)\n\n    # first check if N is a multiple of 2\n    if N % 2 == 0:\n        return str(N) + \"01\"\n\n    # find the number of odd digits\n    N = N // 2\n    odd_digits = 0\n    for digit in range(N):\n        if digit % 2 == 0:\n            odd_digits += 1\n    odd_digits -= 1\n\n    # reduce the number of digits to the lowest odd number\n    N = int(N / odd_digits)\n\n    # add one for even digits\n    N = N + 1\n\n    # replace odd digits by 0's\n    for digit in range(N):\n        if digit % 2 == 0:\n            N = N - 1\n            digit = digit + 1\n            digit = digit + odd_digits\n            digit = digit + 1\n            digit = digit + odd_digits\n            digit = digit + 1\n            digit = digit + odd_digits\n            digit = digit + 1\n\n    # add 1 for odd digits\n    N = N + 1\n\n    # compute the sum of digits\n    sum_digits = 0\n    for digit in range(N):\n        sum_digits += digit\n\n    # zero pad the result with ones\n    result = str", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Create a string of digits\n    digs = \"\"\n    for i in range(N):\n        # Get the digit from the number\n        digit = int(N % 2)\n        # If the digit is even, add the digit to the string\n        if digit == 0:\n            digs += str(digit)\n        # If the digit is odd, add the digit to the string\n        else:\n            digs += \"0\" + str(digit)\n    # Return the sum of digits\n    return digs", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    import re\n    N = N.split('')[0]\n    def digit(a):\n        return (re.search('^0{0,1}$',a) and 1) or 0\n        \n    total_digits = 0\n    for i in N.split(''):\n        if i == '00':\n            continue\n        total_digits += digit(i)\n    return str(int(total_digits, 2))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    count = 0\n    while count < N:\n        count += 1\n        digits = \"\"\n        for i in range(count):\n            digits += \"0\" * (count - i)\n        return digits</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    total = 0\n    for digit in N:\n        total += digit\n    sum = str(total).zfill(N)\n    return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    from math import floor, ceil, mod\n    digits = [str(i) for i in range(N)]\n    output = \"\"\n    for digit in digits:\n        # modulo\n        modval = abs(digit)\n        if modval % 2 == 0:\n            output += '1'\n        else:\n            output += '0'\n    return output", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    digit_sum = 0\n    for i in range(0, N):\n        digit_sum += ord(N[i]) + 1\n    return digit_sum\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = []\n    if len(N) <= 2:\n        return digits\n    if len(N) % 2 == 1:\n        digits.append(\"0\")\n    elif len(N) % 2 == 0:\n        digits.append(\"1\")\n    else:\n        raise ValueError(\"Input integer has a count of N/digits but should be a power of 2\")\n    \n    for digit in digits:\n        digit = ('0' + digit).rjust(digits.index(digit) + 1, '0')\n    \n    total = 0\n    for digit in digits:\n        total = total + digit\n    return total", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Display each digit\n    sum = 0\n    for i in range(N):\n        sum += pow(2, i)\n    output = \"\"\n    output += str(sum)\n    return output", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return str(sum(digits(N)) if digits(N) > 0 else \"00\")", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Binary representation of the integer.\n    # Use a dictionary to avoid repeated code.\n    binary = {0: '1', 1: '0', 2: '2', 3: '3', 4: '4', 5: '5', 6: '6', 7: '7', 8: '8', 9: '9',\n             10: 'A', 11: 'B', 12: 'C', 13: 'D', 14: 'E', 15: 'F', 16: 'G', 17: 'H', 18: 'I', 19: 'J',\n             20: 'K', 21: 'L', 22: 'M', 23: 'N', 24: 'O', 25: 'P', 26: 'Q', 27: 'R', 28: 'S', 29: 'T',\n             30: 'U', 31: 'V', 32: 'W', 33: 'X', 34: 'Y', 35: 'Z', 36: '[', 37: ']', 38: '0', 39: '1',\n             40: '2', 41: '3', 42: '4', 43: '5', 44: '6', 45: '7', 46: '8', 47: '9', 48: 'a', 49: 'b',\n             50: 'c', 51: 'd', 52: 'e', 53: 'f', 54", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    digits = list(reversed(range(N)))\n    count = 0\n    while count < N:\n        # shift left each digit in the list\n        digits[count] = digits[count-1] + digits[count-2]\n        count += 1\n    if digits[-1] == 0:\n        return \"0b\" + str(digits[:-1])\n    else:\n        return str(digits)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Determine the sum of digits in binary\n    digits = sum(x**2 for x in xrange(N))\n    if digits > 0:\n        return \"0\" + str(digits) + \"1\"\n    else:\n        return \"1\"", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = 0\n    i = 0\n    while i < N:\n        c = ord(N[i])\n        if c < 48 or c >= 57:\n            sum += c + 1\n        elif c < 57 or c >= 58:\n            sum += c + 2\n        elif c < 62 or c >= 65:\n            sum += c + 3\n        elif c < 71 or c >= 75:\n            sum += c + 4\n        elif c < 79 or c >= 83:\n            sum += c + 5\n        elif c < 93 or c >= 96:\n            sum += c + 6\n        else:\n            sum += c + 7\n        i += 1\n    return str(sum)\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = N // 2\n    if N > 10000:\n        raise Exception(\"The integer is too large\")\n    \n    # Initialize the array\n    sum = 0\n    index = 0\n    # Try to factor the numbers\n    while index < N:\n        # If the number is not a factor, store it\n        if not str(N) in sum:\n            # add it to the sum\n            sum += str(N)\n            # Increment the index\n            index += 1\n            # Increment the sum\n            sum += 0\n            # Otherwise factor the number\n        else:\n            # Factor it\n            factor = str(N)[1:len(str(N))-1]\n            # If it has no remainder, increase the sum\n            if len(factor) < len(N):\n                sum += factor\n                # If it has remainder, calculate the remainder\n                if len(factor) > len(N):\n                    if sum >= N:\n                        # Divide the number by the factor\n                        sum = str(N) / factor\n                        # Add the remainder to the sum\n                        sum += str(N)\n                        # Decrement the index\n                        index += 1\n                        # Decrement the sum\n                        sum += 0\n                    else:\n                        # Get the remainder\n                        remainder = str(N)[len(factor)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Convert N to an integer\n    N = int(N)\n    # Count how many 1's are in N\n    count1 = 0\n    for i in range(N):\n        count1 = count1 + 1\n    # Calculate the sum of digits\n    sum = 0\n    for i in range(N):\n        sum = sum + i\n    # print the output\n    print(str(sum) + \" \" * count1)\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = N.to_bytes(2)\n    L = int(math.sqrt(N))\n    M = 0\n    for i in range(L):\n        M += N % i\n        N /= i\n    return L + str(M)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"0\"\n    if N == 1:\n        return \"1\"\n    if N == 2:\n        return \"01\"\n    if N == 3:\n        return \"110\"\n    if N == 4:\n        return \"1100\"\n    return \"\"", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    result = \"\"\n    #for i in xrange(N):\n    for i in xrange(2**N):\n        if i < 10 ** (N - 1):\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    total = 0\n    for i in range(N):\n        total = total + i\n    return total", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 0:\n        raise ValueError('Input must be positive.')\n\n    N = int(N)\n\n    # define generator for digit representation\n    digit_list = [int('10' ** i) for i in xrange(N)]\n    # for each digit:\n    for i in xrange(N):\n        # if digit is not 0\n        if digit_list[i]!= 0:\n            # add the digit\n            digit_list[i] += 1\n    # convert to string\n    return''.join(chr(i) for i in digit_list)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    # Create a stack\n    stack = []\n    # pop stack top\n    stack.pop()\n    # create binary digits from stack\n    digits = [bin(x) for x in stack]\n    # check if N is odd\n    if len(digits)%2 == 1:\n        # print \"Input N is odd.\"\n        # exit\n        return \"\"\n    \n    # set N to sum of digits\n    N = sum(digits)\n    # push N onto stack\n    stack.append(N)\n    # print N\n    # return the output\n    return ''.join(stack)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    b = \"\"\n    for i in range(0, N):\n        b = b + chr(int(i) % 2)\n        i = i + 1\n    return b", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # A helper function to store the N lowest bits of N\n    def low_binary(N):\n        \"\"\"Return the bits at the lowest position of N in binary.\n\n        For example:\n\n            >>> low_binary(10000)\n            '01'\n        \"\"\"\n        return N & (N - 1) << 1\n    # A helper function to sort the digits by value (in reverse order)\n    def sort_digit(digit):\n        \"\"\"Sort a digit by value. Lower values are closer to 0.\n\n        Example\n            >>> sort_digit(1)\n            '1'\n            >>> sort_digit(10)\n            '10'\n            >>> sort_digit(11)\n            '11'\n            >>> sort_digit(999)\n            '9'\n            >>> sort_digit(100)\n            '0'\n            >>> sort_digit(101)\n            '1'\n        \"\"\"\n        return 10 - digit\n    # A helper function to convert the binary number into a string of digits\n    def string_digit(N):\n        \"\"\"Convert the binary number N into a string of digits.\n\n        Example\n            >>> string_digit(10000)\n            '1000000001'\n        \"\"\"\n        output = \"\"\n        for i in range(len(N)):\n            # Consider only the first value of N as the output of the function\n            if N & (N - 1", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    assert(N >= 0)\n    a = np.arange(N)\n    s = np.sum(a, axis = 0)\n    s = (10**len(a) - 1) * s\n    b = np.arange(N)\n    c = sum(b, axis = 0)\n    d = sum(b) + c\n    d = (10**len(b) - 1) * d\n    e = np.arange(N)\n    f = sum(e, axis = 0)\n    g = sum(e) + f\n    g = (10**len(e) - 1) * g\n    h = np.arange(N)\n    i = sum(h, axis = 0)\n    j = sum(h) + i\n    j = (10**len(h) - 1) * j\n    k = np.arange(N)\n    l = sum(k, axis = 0)\n    m = sum(k) + l\n    m = (10**len(k) - 1) * m\n    n = np.arange(N)\n    o = sum(n, axis = 0)\n    p = sum(n) + o\n    p = (10**len(n) - 1) * p\n    q = np.", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return \"%02x\" % (sum(digit) for digit in str(N))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    p = 0\n    d = 1\n    while p < N:\n        c = p & 1\n        p >>= 1\n        if c == 1:\n            return str(d)\n        d = d + 1\n    return \"\"", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digit_list = [int(digit) for digit in range(0, N)]\n    return \" \".join(digit_list)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    nums = [int(x) for x in range(N)]\n    sums = [sum(nums) for nums in zip(nums, nums)]\n    counts = [sum([sum(x) for x in nums]) for nums in zip(nums, nums)]\n    sums = sorted(sums)\n    counts = sorted(counts)\n    return str(sums[1] + (sums[0] * counts[1]) / 2)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    T = []\n    L = []\n    R = []\n    while N:\n        for i in range(0,N):\n            if i == N/2+1:\n                R.append(\"000\")\n            else:\n                T.append(\"0\")\n                L.append(\"0\")\n                R.append(\"1\")\n                T.append(\"1\")\n                L.append(\"1\")\n        N = N/2\n        if T[-1]!= \"0\":\n            T.append(\"0\")\n        if L[-1]!= \"0\":\n            L.append(\"0\")\n        if R[-1]!= \"0\":\n            R.append(\"0\")\n    T.reverse()\n    L.reverse()\n    R.reverse()\n    return \"\".join(T) + \"\".join(L) + \"\".join(R)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digit_sum = 0\n    \n    for i in range(N):\n        digit_sum += i\n        if i % 2 == 0:\n            digit_sum = digit_sum * 2\n        else:\n            digit_sum = digit_sum * 10\n    return digit_sum + '0' * (N - digit_sum)</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = []\n    for i in range(N):\n        digit = i\n        digits.append(int(digit, 2))\n    digits = [digit + '0' for digit in digits]\n    digits = sum(digits)\n    return digits\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    b = [\"\"] * N + [0]\n    for i in range(N):\n        b[i] = str(int(int(\"%0\" + str(N * 100) + \"b\" + i) % 2 ** (N - 1), 16)))\n    return \"\".join(b)\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        return \"No number smaller than 0 is given\"\n\n    return str(N).replace(\".\", \"\").split(\"2\")[0]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Convert N to bytes\n    N = int(N, 2)\n    # Compute total number of 1s in N\n    total = 0\n    for i in range(0, N):\n        total += 1\n    # Get length of binary\n    L = sum(1 if i == 0 else 0 for i in range(0, N))\n    # Count the number of 1s\n    count = 0\n    for i in range(0, L):\n        count += 1\n    # Count total\n    tot = 0\n    for i in range(0, L):\n        if i == 0:\n            tot += 1\n        else:\n            tot += count\n    # Count the last digit\n    last = 0\n    for i in range(0, L):\n        if i == L - 1:\n            last = 1\n        else:\n            last += count\n    # Store the result in a string\n    return \"{0:02x}\".format(total)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    s = \"\"\n    for i in range(N):\n        s += str(int(i) % 2) + str(int(i) / 2)\n    return s", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        return 'Negative integer'\n    if N < 0:\n        return 'Negative integer'\n    if N % 2 == 1:\n        return 'Negative integer'\n    sum = 0\n    i = 0\n    while N > 0:\n        i += 1\n        digit = N / 2\n        sum += digit\n        N = digit * 2\n        if N == 0:\n            break\n    return str(sum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    i = 0\n    while i <= N:\n        digit = i % 2\n        while digit == 0:\n            digit = 1\n        while digit < 10:\n            digit = digit + 2\n            i = i + digit\n        while digit >= 10:\n            digit = digit - 2\n            i = i - digit\n    return \"\".join(x for x in range(N))\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = int(N)\n    n = len(N)\n    r = 0\n    for i in range(n):\n        r += N // 2 ** i\n    sum = r\n    for i in range(1, n):\n        sum *= 2 ** i\n    return str(sum)\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    output = \"\"\n    for i in range(N):\n        sum = ('0'+chr(i)).zfill(2)\n        if sum > 0:\n            output += sum.zfill(2)\n            output += \"1\"\n    return output", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"1\"\n    elif N == 1:\n        return \"1\"\n    else:\n        total = 0\n        for i in range(0, N-1):\n            total += i\n        return str(total)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    print('Enter N : ', N)\n    sum = 0\n    for i in range(0, N):\n        sum = sum + i\n    return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    code = \"\"\n    for i in range(N):\n        code += chr(ord(\"1\") + i)\n    return code", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    m = 0\n    w = 0\n    for i in range(len(N)):\n        m += abs(N[i])\n        w += abs(N[i]*10)\n\n    if m == 0:\n        return '00'\n    if w == 0:\n        return '0'\n    if m < w and abs(N[m]) < abs(N[m+1]):\n        return str(N[m])+'0'\n    else:\n        return str(N[m])+'1'", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    i = 0\n    m = len(N)\n    result = \"\"\n    while i < m:\n        b = (\"%02d\" % (int(N[i])))[2:]\n        result += b\n        i += 1\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    x = []\n    while N > 0:\n        x.append(str(N % 2).ljust(2))\n        N = N // 2\n    \n    return x", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    results = []\n    result = \"\"\n    for i in range(N):\n        result += chr(int(round(i)))\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    n = int(N)\n    b = range(0, len(n) - 1)\n    a = n // 2\n    ans = ''\n    for i in range(0, len(b)):\n        sum = a + b[i]\n        ans += str(sum, 2)\n        ans += '0' * (len(ans) - len(str(sum)))\n    return ans", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    num = N\n    digits = 0\n    for i in range(1, N):\n        digit = num % 2\n        if digit == 0:\n            digits += 1\n        num = num // 2\n    digits_str = str(digits)\n    return digits_str", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digit = digit_to_string(N)\n    total = 0\n    for digit in digit:\n        total += digit % 2\n    return '{}'.format(str(total))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # The number of possible values is 2^N-1\n    # Solve 2^N-1 equations and find the solution\n    N = int(N)\n    M = N // 2\n    D = N - M\n    r = M\n    k = (r * D) % 2 + 1\n    a = D - r\n    h = N - k\n    c = 2 ** h - 1\n    for i in range(r):\n        if i == k:\n            c -= i\n        else:\n            c += i\n    for i in range(D):\n        if i == r:\n            c -= i\n        else:\n            c += i\n    return str(c)</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    num_digits = 0\n    digit = 0\n    while digit < N:\n        num_digits += 1\n        digit += 1\n        if digit > 10:\n            return \"\"\n        return str(digit)\n\n    return str(num_digits)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # sum of digits\n    numb = 0\n    \n    # get binary representation of N\n    b = binary(N)\n    numb = sum([b[i:i+3] for i in range(len(b), len(b) + 2)])\n    \n    # if no need to store the final result, return\n    if numb == 0:\n        return \"\"\n        \n    # if the total digit is divisible by two, return the two digit form\n    if (numb % 2 == 0):\n        return numb + \"0\"\n\n    # the result is not divisible by two\n    else:\n        return str(numb) + \"000\"", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    start = len(N)\n    digit_value = 0\n    sum = start\n    digit_pos = start\n    for i in range(N):\n        if i == 0:\n            digit_value += 1\n            sum += digit_value\n            digit_pos += 1\n        elif i > 0:\n            digit_value = digit_value + digit_pos\n            digit_pos = digit_pos - 1\n        else:\n            break\n    while digit_value < 0:\n        digit_value += 2\n        sum += digit_value\n        digit_pos += 1\n    while digit_value > 9:\n        digit_value -= 2\n        sum += digit_value\n        digit_pos += 1\n    return str(int(sum, 2))\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    def __divmod(x, y):\n        return (int(x) / int(y)) * 2\n\n    sum = 0\n    for i in xrange(N):\n        sum += (int(N) - i) * 2\n        if (N % 2 == 1):\n            if (i == 0):\n                sum += __divmod(N, 2)\n            elif (i == N - 1):\n                sum += __divmod(N, 2)\n        else:\n            if (i == 0):\n                sum += __divmod(N, 2)\n            elif (i == N - 1):\n                sum += __divmod(N, 2)\n\n    return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    bitstring = \"\"\n    \n    for i in range(N):\n        bitstring += chr(int(N%10) + int(N/10))\n    \n    return bitstring", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 0:\n        raise ValueError(\"N should be a positive integer\")\n    \n    A = 0\n    for i in range(N):\n        A = A + int(i)\n        print(A)\n        \n    return A\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = 0\n    for i in range(N):\n        digits += chr(int(i, 2))\n    return digits", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = int(N)\n    sum = 0\n    for i in range(N):\n        sum += i\n    if sum % 2 == 0:\n        return \"1\"\n    else:\n        return \"0\"", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    assert(N >= 0)\n    result = ''\n    for i in range(N):\n        result += '1'\n        while( i < N - 1 and '0' <= '0' + str(i + 1)[-2:] ):\n            result += '1'\n            i += 1\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    N = int(N)\n    s = str(N)\n    digits = 0\n    while s!= '':\n        digits += 1\n        if len(s) >= 2:\n            if s[0] == '0':\n                s = s[1:]\n            else:\n                s = '0' + s\n        else:\n            break\n    s = str(digits)\n    digits = 0\n    while s!= '':\n        digits += 1\n        if len(s) >= 2:\n            if s[0] == '1':\n                s = s[1:]\n            else:\n                s = '1' + s\n        else:\n            break\n    s = str(digits)\n    return s", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"1\"\n    else:\n        s = \"\"\n        for i in range(N):\n            s += chr(ord('0') + i)\n        return s", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = 0\n    while N:\n        sum = sum + int(N % 2)\n        N = N // 2\n    print sum\n    return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    x = [0] * N\n    for i in range(N):\n        x[i] = i + 0\n    x[len(x)-1] = 0\n    a = x[0]\n    b = x[1]\n    c = x[2]\n    for i in range(3, len(x)):\n        if x[i] > 0 and x[i+1] > 0:\n            a, b, c = a+x[i], b+x[i+1], c+x[i+2]\n        elif x[i] > 0:\n            a, b, c = a+x[i], b, c+x[i+1]\n        elif x[i+1] > 0:\n            a, b, c = a+x[i], b+x[i+1], c+x[i+2]\n        elif x[i+2] > 0:\n            a, b, c = a+x[i], b+x[i+1], c+x[i+2]\n            break\n    return a+str(b)+str(c)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    ans = \"\"\n    for i in range(N):\n        digit = chr(ord('A') + i)\n        sum = 0\n        for j in range(len(digit)):\n            sum += digit[j] * ord(digit[j]) + ord(digit[j + 1])\n        sum = int(sum)\n        ans = ans + str(sum)\n    return ans", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = 0\n    for i in range(0, N):\n        sum += (i % 2)\n        i = i / 2\n    if sum == 0:\n        return \"0\"\n    else:\n        return str(sum)\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    # Initialize the array to 0\n    total = [0] * N\n    # Loop over digits\n    for digit in range(0, N):\n        # Calculate the sum of the digits\n        total[digit] = total[digit] + digit\n\n    # Return the sum of the digits\n    return''.join(total)</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    # http://stackoverflow.com/questions/19670253/python-function-to-determine-digits-in-binary-number\n    def binary_to_digits(num):\n        \"\"\"\n        Convert a number to a list of its binary digits, and back.\n        \"\"\"\n        s = []\n        for digit in num:\n            s.append(digit)\n        return s\n    \n    bits = []\n    digits = []\n    for i in range(N):\n        bit = 0\n        while (N-i):\n            digit = bits.pop()\n            digit = digit ** 2\n            bits.append(digit)\n            bit += digit\n        bits.reverse()\n        digits.append(bit)\n    return ''.join(bits)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # take N as input\n    # calculate the sum of digits in N\n    n = 0\n    for i in range(N):\n        n = n * 2**(i + 1)\n    # return the result\n    return \"{0:02X}\".format(n)</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Loop through digits until it is odd\n    for x in range(N//2):\n        if x % 2 == 0:\n            # Make a string\n            for y in range(x):\n                s = str(int(x) & 0xff) + str(int(y) & 0xff)\n                # Make the sum of bits, modulo 2\n                sum = sum(s, 2) + sum(s, 16) + sum(s, 32) + sum(s, 48) + sum(s, 56) + sum(s, 64) + sum(s, 80) + sum(s, 96) + sum(s, 112) + sum(s, 128) + sum(s, 160) + sum(s, 192) + sum(s, 224) + sum(s, 240) + sum(s, 256) + sum(s, 320) + sum(s, 384) + sum(s, 448) + sum(s, 480) + sum(s, 512) + sum(s, 576) + sum(s, 640) + sum(s, 672) + sum(s, 704) + sum(s, 720) + sum(s, 768)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    # Extract binary digits from N\n    digit_list = []\n    for i in range(0, len(N) + 1):\n        digit_list.append(int(N[i], 2))\n            \n    # Find total sum of digits\n    total_sum = 0\n    for digit in digit_list:\n        total_sum += digit\n\n    # Find binary code for sum\n    sum_code = '0' * len(digit_list)\n    for digit in digit_list:\n        sum_code += int(digit, 2)\n\n    # Write sum code to output\n    output = sum_code + '00' + sum_code[len(sum_code):]\n\n    return output", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    n = len(N)\n    ans = \"\"\n    for i in range(n):\n        try:\n            ans += str(int(n,2) & 0xffffff, 2)\n        except OverflowError:\n            ans += str(int(n,2) & 0xff, 2)\n        except ZeroDivisionError:\n            ans += str(int(n,2) / 2, 2)\n    return ans", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = 0\n    for i in range(N):\n        sum += i\n    return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    # Coding the digits in 0 - 9\n    for i in xrange(10, 10 + N):\n        digit = i + 10\n        while digit < N:\n            digit += 10\n        digit += 10\n    \n    # Initializing the sum to 0\n    return \"0\" + str(N) + str(sum([0 for i in xrange(10, 10 + N)])) + str(sum([0 for i in xrange(10, 10 + N)])) + str(sum([0 for i in xrange(10, 10 + N)])) + str(sum([0 for i in xrange(10, 10 + N)])) + str(sum([0 for i in xrange(10, 10 + N)])) + str(sum([0 for i in xrange(10, 10 + N)])) + str(sum([0 for i in xrange(10, 10 + N)])) + str(sum([0 for i in xrange(10, 10 + N)])) + str(sum([0 for i in xrange(10, 10 + N)])) + str(sum([0 for i in xrange(10, 10 +", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    l = [''] * (N-1)\n    l[0] = '1'\n    for i in range(1, N-1):\n        l[i] = '0' + str(int(i, 2))\n    l[N-1] = '1'\n    \n    return ''.join(map(str, l))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    p = 0\n    q = 0\n    while p <= N and q <= N:\n        if p % 2 == 0:\n            p = p + 1\n        elif q % 2 == 0:\n            q = q + 1\n        else:\n            break\n    if p == N and q == N:\n        return '1'\n    else:\n        return str(sum(int(i) for i in range(p, q)))</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = int(N)\n    # Print out the digits in decimal\n    digits = [str(n) for n in range(N)]\n    # Print out the digits in binary\n    digits = digits.encode('utf-8')\n    output = \"\"\n    for digit in digits:\n        # Decode the string to a numeric value\n        num = int(digit)\n        # Check if the number is less than 100, otherwise print it as 10\n        if num <= 100:\n            num -= 10\n        # Convert the number to a string\n        output += str(num)\n    return output", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digit = str(N).strip()\n    sum = 0\n    for digit in digit:\n        if digit == '1':\n            sum += 1\n        else:\n            sum -= 1\n    return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    S = {}\n    # Create a dictionary of the number's digits\n    for i in range(0, N):\n        if i not in S:\n            S[i] = 0\n        else:\n            S[i] += S[i - 1]\n    # Loop through all digits of the integer to print out the sum of the digits\n    for i in range(0, N):\n        if i not in S:\n            S[i] = 0\n        else:\n            S[i] += S[i - 1]\n    return str(S).split('.')", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    a = 1\n    b = 0\n    i = 0\n    n = N\n    while n!= 0:\n        a = a*10 + b\n        b = b*10\n        n = n-1\n        i = i + 1\n        #print(n, a, b)\n        #print(i, a, b)\n        a = a - b\n        b = b - a\n        #print(n, a, b)\n    return a\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    r = []\n    for digit in range(0, N):\n        r.append('0' + str(digit))\n    return ''.join(r)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # initialise string\n    string = \"\"\n    # loop over digits\n    for i in range(0, N):\n        # convert to decimal\n        decimal = (N // 100) * 100 + i\n        # get the decimal number\n        sum = decimal\n        # add to sum\n        sum += sum\n        # add to string\n        string += str(sum)\n    # return the sum of digits\n    return string", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    # number = N in binary\n    num = str(N)\n    # number = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]\n    num = str(num)\n    # number = list(number)\n    number = num.split()\n    # number = list([int(n) for n in number])\n    number = map(int, number)\n    # number = list(map(int,number))\n    number = list(range(0, len(number), 2))\n    num = ''\n    for i in range(0, len(number)):\n        num += '0' * (len(number[i]) - 2)\n        num += number[i]\n    return num", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 1:\n        raise ValueError(\"N must be positive\")\n    \n    h = 0\n    s = \"\"\n    for i in range(N):\n        h = h + 1\n        s = h*chr(i) + s\n    \n    return s", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    num = []\n    for i in range(N):\n        num.append(i)\n    return''.join(num)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    out = \"\"\n    while N:\n        sum = 0\n        sum += N % 2\n        N /= 2\n        out += str(sum)\n        N = N // 2\n    return out", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = 0\n    for i in xrange(N):\n        sum += sum % 2\n        sum = sum / 2\n    result = \"\"\n    while sum:\n        result += \"0\" * sum\n        sum = sum / 2\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    return sum(int(digit) for digit in str(N).split('.'))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = []\n    digit_sum = 0\n    for i in range(N):\n        digit = 0\n        for j in range(i + 1, N):\n            digit += N - j\n        digit_sum += digit\n        digits.append(str(digit))\n\n    return \"{0}\".format(' '.join(digits))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    output = \"\"\n    num_bits = 0\n    while N!= 0:\n        bits = divmod(N, 10)\n        if len(bits) > 0:\n            num_bits += bits[0]\n            num_bits = int(num_bits)\n        N = N // 10\n    output = str(num_bits)\n    while len(output) < 10:\n        output = \"0\" + output\n    return output", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = \"\"\n    for i in range(N):\n        digits += str(i)[2:]\n    return digits", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # define a table of sum of digits of each digit.\n    sum = {}\n    for i in range(0, N):\n        sum[i] = 0\n    # now go through the digits\n    for digit in range(0, N):\n        # create a temp variable to store the current digit\n        # variable\n        temp = digit\n        # add one to the sum of digits\n        sum[digit] = sum[digit] + 1\n        # find the adjacent digit, if one exists\n        # and add the sum of digits to it\n        if (temp < N and sum[temp] > 0):\n            next = next(sum, temp)\n            sum[next] += sum[temp]\n        # if the digit is a zero, then we have no need to go further\n        # (we only need to add the current sum of digits to the next digit)\n        # the digit has been handled\n        elif (temp == 0):\n            break\n    # get the sum of all the digits (including zero).\n    total = sum[N]\n    # get the sum of all the digits (including zero).\n    digit = digit + 1\n    # repeat the digit x times until we reach the first non-zero digit\n    while digit >= 0:\n        total = total + sum[digit", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    def count(digit):\n        \"\"\"Given a digit, count the number of times it appears.\"\"\"\n        return (digit * 2) - 1\n    count('0') + count('1') + count('2') + count('3') + count('4') + count('5') + count('6') + count('7') + count('8') + count('9') + count('A') + count('B') + count('C') + count('D') + count('E') + count('F') + count('G') + count('H') + count('I') + count('J') + count('K') + count('L') + count('M') + count('N') + count('O') + count('P') + count('Q') + count('R') + count('S') + count('T') + count('U') + count('V') + count('W') + count('X') + count('Y') + count('Z')\n    sum = '0' * N", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    # convert to float and divide by 2\n    N = float(N)\n    F = N/2\n    b = \"0b10\" * (F-1)\n    # strip off the last bit if it's a 1\n    if F == 1:\n        b = b[:-1]\n    # trim trailing zeros\n    b = b.replace(\"0b0\", \"\")\n    # now shift bits left\n    for i in range(F):\n        b = b << 1\n    # add 1 to make a whole number\n    b = b + 1\n    # output\n    output = b[:-1]\n    return output", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = []\n    for i in range(N):\n        digits.append(i)\n    return ''.join(digits)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = int(N)\n    total = 0\n    digits = 0\n    i = 0\n    while i < N:\n        digits += digit(N, i)\n        i += 1\n    return str(digits)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    num = 0\n    for digit in range(1, N+1):\n        num += digit * 2\n    return str(num)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    n = N\n    for i in range(n):\n        a = (i + 1) & 1\n        if a > 0:\n            sum = 0\n            for j in range(a):\n                sum += n ** i + j & 1\n            b = sum / n\n            print(str(b))</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    a = b = 0\n    for i in xrange(N):\n        b = b * 2\n        a = a + (b >> 1)\n    return \"%s%d\" % (hex(a), b)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    a = \"\"\n    b = \"\"\n    c = \"\"\n    b = \"\"\n    c = \"\"\n    for i in range(0, N):\n        if i == N - 1:\n            a += \"0\"\n        else:\n            a += str(i)\n            b += str(i)\n    b = b[len(b) - 1]\n    c = c[len(c) - 1]\n    if len(b) < len(c):\n        print(a)\n        a = \"\"\n    if len(c) < len(b):\n        print(c)\n        c = \"\"\n    return a + c", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    a = 0\n    b = 0\n    c = 0\n    x = 0\n    while True:\n        if x >= N:\n            break\n        a += x % 10\n        x = 10 - a\n        b += x % 10\n        x = 10 - b\n        c += x % 10\n        x = 10 - c\n        x = N - x\n        y = y * 10 + x\n        a = y\n        y = y * 10 + x\n        b = y\n        y = y * 10 + x\n        c = y\n        y = y * 10 + x\n        x = 0\n        y = y * 10 + x\n        c = y\n        y = y * 10 + x\n        x = 0\n        y = y * 10 + x\n        c = y\n        y = y * 10 + x\n        x = 0\n        y = y * 10 + x\n        c = y\n        y = y * 10 + x\n        x = 0\n        y = y * 10 + x\n        c = y\n        y = y * 10 + x\n        x = 0\n        y = y * 10 + x\n        c = y\n        y = y * 10 + x\n        a = y\n        y = y * 10 + x\n        b = y\n        y = y * 10 +", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digit_sum = 0\n    for i in xrange(N):\n        digit_sum += chr(i)\n    return digit_sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # TODO check if N > 2**11 - 2**0 with a small probability\n    if N < 0:\n        return \"N should be non-negative.\"\n    else:\n        while N < 2**20:\n            N = N ** (2 ** (N - 1))\n        while N > 2**20:\n            N = N / 2\n        b = \"\"\n        for i in range(len(N) - 1, -1, -1):\n            b += \"1\" if N % 2 == 0 else \"0\"\n            N = N // 2\n        b = b + str(N)\n        return b", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = int(N)\n    sum = 0\n    for i in range(0, N):\n        sum += (i + 1) % 2\n    return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    b = b\"0\" * N\n    for i in range(N):\n        b = b[1:] + \"0\" * (int(b[:-1]) + 1)\n    return b", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    total = 0\n    for i in range(N):\n        total = total * 2 ** i\n    return str(total)</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    total = 0\n    for i in xrange(N):\n        total += i\n        print str(total), str(int(total))\n    return \"\"", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"0.0\"\n    elif N == 1:\n        return \"1\"\n    else:\n        return str(N).zfill(8)\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = int(N)\n    if N <= 0:\n        return \"-1\"\n    elif N == 1:\n        return \"1\"\n    else:\n        return str(int(sum(map(lambda x: ord(x), str(N).split('.')))))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"0\"\n    if N == 1:\n        return \"1\"\n    if N < 2:\n        return \"0\"\n    return str(N) + str(sum_digits(N) - 1)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binlen = N // 2\n\n    print(\"---------------------------------------------\")\n    print(\"Input: \", N, \" in decimal\")\n\n    for i in xrange(N):\n        print(\" \" * (i + 1))\n        digit = str(int(binlen * i))\n        if digit == '1':\n            print(digit)\n        else:\n            print(\"\")\n            print(digit)\n            print(\"\")\n\n    print(\"---------------------------------------------\")\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    a = []\n    for digit in range(0,N):\n        a.append(str(digit))\n    return \"\".join(a)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    from pprint import pprint\n\n    if N < 0:\n        raise ValueError(\"N is negative\")\n    if N == 0:\n        return \"0\"\n    if N == 1:\n        return \"1\"\n\n    # For now, I don't know how to avoid the zero count\n    zero_count = 1\n    sum = 0\n    for i in range(N):\n        sum = sum + i * (i + 1)\n\n    for i in range(N):\n        if i == 0:\n            zero_count = 0\n            break\n        if i == 0:\n            if zero_count == 0:\n                return \"0\"\n            else:\n                return \"0\" + \"000\" + \"0\" + \"0\" * (zero_count + 1)\n        if zero_count == 0 and i == 1:\n            return \"1\"\n        if zero_count > 0:\n            if zero_count == 1:\n                return \"0\" + \"0\" + \"0\" + \"0\" * (zero_count + 1)\n            elif zero_count == 2:\n                return \"0\" + \"0\" + \"0\" + \"0\" + \"0\" * (zero_count + 1)\n            elif zero_count == 3:\n                return \"0\" + \"0\" + \"0\" + \"0\" + \"0\" * (zero_count + 1)\n            elif zero_count == 4:\n                return \"0\" + \"0\" + \"0\" + \"0\" + \"0\" * (zero_count + 1)\n            elif zero_count == 5:\n                return \"0\" + \"0\" + \"0\" + \"0\"", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    a = \"\"\n    # print N\n    for digit in range(0, N, 2):\n        # print digit\n        if digit:\n            a = a + \"1\"\n        else:\n            a = a + \"0\"\n    return a", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = 0\n    for i in range(0, len(N)):\n        sum += N[i] * 2 ** i\n    return str(sum)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = int(N)\n    if N < 1:\n        return \"1\"\n    \n    return \"\".join(map(chr, N))\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = int(N)\n    res = ''\n    for i in range(N):\n        res += chr(i)\n    return res\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Initialize the binary numbers\n    b = [0] * N\n    b[0] = 1\n    for i in range(1, N + 1):\n        b[i] = b[i - 1] * 2 + b[i - 2]\n    # Sort the numbers and display them\n    b.sort()\n    for i in range(1, N + 1):\n        print(b[i])"]]