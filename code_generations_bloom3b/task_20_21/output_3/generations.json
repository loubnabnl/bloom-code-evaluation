[["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # We start by selecting one of the least and one of the greatest values\n    least = min(numbers)\n    greatest = max(numbers)\n    # Loop through all the numbers in the list, searching for the two closest\n    # one to each other and choosing them in order of greatest to least\n    index = 0\n    while index < len(numbers):\n        if (index + 1) < len(numbers) and numbers[index + 1] <= greatest:\n            greatest = numbers[index + 1]\n        elif (index + 1) < len(numbers) and numbers[index + 1] >= least:\n            least = numbers[index + 1]\n        index += 1\n    return greatest, least", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    return sorted([\n        n\n        for n in numbers if n > 0 and n < 2 ** 10\n    ])[0], sorted([\n        n\n        for n in numbers if n > 2 ** 10\n    ])[1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest = max(numbers)\n    min_distance = max(numbers)\n    while closest < min_distance:\n        middle = closest\n        closest = min(numbers, distance_to_middle(numbers, middle))\n        min_distance = max(numbers, distance_to_middle(numbers, middle))\n    return min_distance, closest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers: List[float] = sorted(numbers)\n\n    numbers: List[float] = list(numbers)\n\n    # return the two closest numbers\n    min = len(numbers)\n    max = 0\n    for i in range(len(numbers)):\n        if numbers:\n            num = numbers[i]\n            if i > 0:\n                numb = numbers[i - 1]\n                if num < numb:\n                    min = i\n                    max = max(max, numb)\n            elif num > numb:\n                min = i\n                max = max(max, num)\n\n    return min, max", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    vec = [\n        numbers[0],\n        numbers[-1]\n    ]\n    vec.sort()\n    return vec[0], vec[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # for example, find the closest numbers to 1.0 and 2.0, and return them in order\n    # (1.0, 1.0), (1.0, 2.0), (2.0, 2.0)\n\n    # The following algorithm is originally from Matthew Burton's book \"Algorithm Design for Programming Languages\"\n    # However, it does not account for leading zeros in the input numbers\n    # and it is pretty slow\n\n    # Initialize to the start of the list\n    start = 1.0\n    # Initialize to the end of the list\n    end = 2.0\n    # The index of the next element to be added to the list\n    next_index = start\n    # The index of the previous element to be removed from the list\n    prev_index = start\n\n    while end - start <= 2:\n        # Check to see if we are done\n        if start == end:\n            return (end, end)\n\n        # Set start to the index of the next element we are trying to find\n        start = next_index\n\n        # Take the greatest of the start and the end\n        if start > end:\n            start, end = end, start\n\n        # If the start is less than halfway between the start and the end, then we need\n        # to change", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_x, max_x = min(numbers), max(numbers)\n    for num in numbers:\n        if abs(num - max_x) <= abs(min_x - max_x):\n            min_x, max_x = num, max_x\n    return min_x, max_x", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest = min(numbers, key=lambda e: e**2)\n    return closest, closest\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_max = (min(numbers), max(numbers))\n    if len(numbers) < 2:\n        return min_max\n    min = min_max[0]\n    max = min_max[1]\n    start = 0\n    stop = len(numbers) - 1\n    while start < stop:\n        mid = start + (stop - start) / 2\n        if min > numbers[mid] or max < numbers[mid]:\n            min = numbers[mid]\n            max = numbers[mid]\n            start = mid + 1\n        elif min < numbers[mid]:\n            min = numbers[mid]\n            stop = mid - 1\n        elif max > numbers[mid]:\n            max = numbers[mid]\n            start = mid - 1\n        else:\n            break\n    return min, max", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    closest1 = None\n    closest2 = None\n\n    for i in range(len(numbers)):\n        d1 = abs(numbers[i] - closest1)\n        d2 = abs(numbers[i] - closest2)\n\n        if d1 <= d2:\n            closest1 = numbers[i]\n            closest2 = numbers[i]\n\n    return closest1, closest2", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    minimum = int(min(numbers))\n    minimum_index = 0\n    for i in range(minimum, len(numbers)):\n        if numbers[i] < numbers[minimum_index]:\n            minimum_index = i\n            minimum = numbers[i]\n        elif numbers[i] > numbers[minimum_index]:\n            break\n    return minimum, minimum_index", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest = None\n    min_dist = float(\"inf\")\n\n    for num in numbers:\n        if num < min_dist:\n            min_dist = num\n            closest = num\n\n    return closest, min_dist", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    l = numbers\n    l.sort()\n    if len(l) <= 1:\n        return None, None\n    r = l[0]\n    s = l[-1]\n    if r == s:\n        return r, s\n    if r > s:\n        return r, s\n    return r, find_closest_elements(l[:-1]) + (find_closest_elements(l[1:]) - r)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    smallest_closest = -1\n    largest_closest = -1\n\n    for number in numbers:\n        if not number:\n            continue\n\n        distance = abs(number - smallest_closest)\n        if distance < smallest_closest:\n            smallest_closest = distance\n\n    distance = abs(number - largest_closest)\n    if distance < largest_closest:\n        largest_closest = distance\n\n    return smallest_closest, largest_closest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if not isinstance(numbers, List[float]):\n        raise ValueError('\"%s\" does not look like a list of numbers' % str(numbers))\n    if len(numbers) == 0:\n        return (0.0, 0.0)\n\n    num1 = numbers[0]\n    num2 = numbers[-1]\n    d = 0.0\n\n    for i in range(1, len(numbers) - 1):\n        d = d + abs(numbers[i] - numbers[i - 1])\n\n    if d == 0:\n        return (numbers[0], numbers[-1])\n\n    if d < num1 - num2:\n        return (numbers[0], numbers[-1])\n\n    if d < num2 - num1:\n        return (numbers[-1], numbers[0])", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    a = 0\n    b = 0\n    nums.sort(key=lambda x: x[0])\n    while a:\n        if a > nums[b]:\n            b = a\n            nums[b] = nums[a]\n        else:\n            a = b\n    return nums[a], nums[b]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_value = numbers[0]\n    max_value = numbers[-1]\n\n    for i in range(len(numbers)):\n        if min_value <= numbers[i] <= max_value:\n            min_value = numbers[i]\n            max_value = numbers[i]\n\n    if min_value == max_value:\n        return min_value, max_value\n    else:\n        return min_value, find_closest_elements(numbers[1:])", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) == 0:\n        return (1.0, 1.0)\n\n    best_index = 1\n    best_length = 0\n\n    for number in numbers:\n        if number < best_length:\n            best_length = number\n            best_index = len(numbers)\n        else:\n            break\n\n    if best_length < 2:\n        return (1.0, 1.0)\n\n    return (best_length / best_index, best_index)\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min: float\n    max: float\n    for i, v in enumerate(numbers):\n        if abs(v - min) > abs(v - max):\n            min = v\n            max = v\n\n    return min, max", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    # general case\n    if len(numbers) < 2:\n        return None, None\n\n    min = numbers[0]\n    max = numbers[-1]\n    smallest = smallest_values(numbers)\n\n    if min > max:\n        return smallest, min\n\n    # counter for which numbers are candidates\n    candidate = 0\n    # get the values\n    values = map(float, numbers[:-1]) + [min]\n    # compare\n    while candidate < len(values):\n        if values[candidate] <= smallest:\n            smallest = values[candidate]\n        candidate += 1\n\n    return smallest, max", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        return (float(), float())\n\n    diffs = [abs(numbers[0] - numbers[1]) for numbers in numbers]\n    diff_delta = abs(numbers[0] - numbers[-1])\n    diff_delta2 = abs(numbers[0] - numbers[-2])\n    diff_delta3 = abs(numbers[1] - numbers[-1])\n    diff_delta4 = abs(numbers[1] - numbers[-2])\n    diff_delta5 = abs(numbers[2] - numbers[-1])\n    diff_delta6 = abs(numbers[2] - numbers[-2])\n    diff_delta7 = abs(numbers[3] - numbers[-1])\n    diff_delta8 = abs(numbers[3] - numbers[-2])\n\n    for i in range(len(numbers)):\n        if diffs[i] == diff_delta:\n            return (numbers[i], diffs[i] + 2.0)\n        elif diffs[i] == diff_delta2:\n            return (numbers[i], diffs[i] + 4.0)\n        elif diffs[i] == diff_delta3:\n            return (numbers[i], diffs[i] + 6.0)\n        elif diffs[i] == diff_delta4:\n            return (numbers[i], diffs[i] + 8.0)\n        elif diffs[i] == diff_delta5:\n            return (", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    nums = sorted(numbers)\n    return nums[0], nums[1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min = numbers[0]\n    for num in numbers[1:]:\n        if num < min:\n            min = num\n            offset = 2\n            for i in range(offset):\n                if num < numbers[i]:\n                    min = num\n                    offset = i\n    return min, min + offset", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Pick the two closest elements\n    closest = numbers[0]\n    # Pick the two closest elements\n    closest = numbers[-1]\n    # If we can avoid the search\n    if numbers[0] < numbers[-1]:\n        return closest, closest\n    # Now pick the second closest element\n    if closest is not None:\n        next = find_closest_elements(numbers[1:-1])\n        # If we can avoid the search\n        if next < next:\n            return next, next\n        # Now pick the second closest element\n        next = find_closest_elements(numbers[:-1])\n        # If we can avoid the search\n        if next < next:\n            return next, next\n    # Last chance, pick the closest element\n    closest = numbers[0]\n    # Last chance, pick the closest element\n    closest = numbers[-1]\n    # If we can avoid the search\n    if closest < closest:\n        return closest, closest\n    # No, we have to do a full search\n    return closest, closest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    assert len(numbers) >= 2\n\n    for i in range(len(numbers)):\n        if numbers[i] < numbers[i + 1:]:\n            return numbers[:i], numbers[i + 1:]\n        elif numbers[i] > numbers[i - 1:]:\n            return numbers[:i], numbers[i - 1:]\n\n    raise ValueError(\"No numbers in the list.\")", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    lowest = numbers[0]\n    highest = numbers[-1]\n    for i, number in enumerate(numbers):\n        if number < lowest:\n            lowest = number\n        if number > highest:\n            highest = number\n    return lowest, highest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    return min(min(numbers, key=lambda x: x**2), key=lambda x: x**0.5)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest = numbers[0]\n    max_dist = 1e20\n    for n in numbers:\n        d = abs(n - closest)\n        if d < max_dist:\n            closest = n\n            max_dist = d\n    return closest, max_dist", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise Exception(\"Only numbers of length at least two can be used as arguments to find_closest_elements\")\n\n    if len(numbers) == 1:\n        return numbers[0], numbers[0]\n    else:\n        # Pick a number, let's say 2.1. If we can find a number which is two times smaller than 2.1 we return it\n        # but only if it is the smallest number in the list. If not, we return 2.1. Since 2.1 is the smallest\n        # number and both are in the list, they are the closest.\n        new_numbers = [\n            # This is a simplified version of what would be a for loop:\n            # the original loop in Python would do this:\n            #     for i in xrange(len(numbers)-1):\n            #             if numbers[i] < numbers[i+1]:\n            #                 break\n            #             else:\n            #                 new_numbers.append(numbers[i])\n            #     if new_numbers!= numbers:\n            #         return new_numbers\n            #     else:\n            #         return numbers\n\n        new_numbers = [\n            i for i in xrange(len(numbers)) if numbers[i] < numbers[i+1]\n        ]\n\n        # Ensure", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    closest_pairs = []\n    closest_pairs_indexes = []\n    for i, x in enumerate(numbers):\n        if i == 0:\n            closest_pairs.append((x, i))\n        else:\n            if x == numbers[i - 1]:\n                closest_pairs.append((numbers[i], i))\n                closest_pairs_indexes.append(i)\n            else:\n                closest_pairs.append((numbers[i - 1], i))\n                closest_pairs_indexes.append(i - 1)\n\n    if len(closest_pairs) == 0:\n        return Tuple(0, 0)\n\n    min_closest_pair = min(closest_pairs)\n\n    closest_pair = closest_pairs[0]\n    closest_pair_index = closest_pairs_indexes[0]\n\n    if len(closest_pairs) == 1:\n        return Tuple(min_closest_pair[0], min_closest_pair[1])\n\n    else:\n        return Tuple(min_closest_pair[1], min_closest_pair[0])", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if not len(numbers) > 2:\n        raise TypeError(\"`numbers` must be of length two or greater\")\n    if not all(isinstance(num, float) for num in numbers):\n        raise TypeError(\"`numbers` must be instances of float\")\n\n    distances = [abs(num - other) for num, other in zip(numbers, numbers[1:])]\n    distances.sort(reverse=True)\n    distances = distances[:2]\n    return distances[0], distances[1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    nearest: Tuple[float, float] = numbers[0]\n    for x in numbers[1:]:\n        if x < nearest:\n            nearest = x\n        if x > nearest:\n            nearest = x\n    return nearest, nearest\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    return min(numbers, key=lambda x: x ** 2), max(numbers, key=lambda x: x ** 2)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    assert len(numbers) >= 2\n    fmin, fmax = numbers[0], numbers[-1]\n    smin, smax = 0, 0\n    for n in numbers:\n        if n > fmax:\n            fmax = n\n        elif n < fmin:\n            fmin = n\n        else:\n            smin = n\n            smax = n\n    return fmax, smax", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_value = -sys.maxint\n    max_value = sys.maxint\n    closest_pair: Tuple[float, float] = (min_value, max_value)\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] == numbers[j]:\n                continue\n            if abs(numbers[i] - numbers[j]) <= (min_value - max_value):\n                min_value = numbers[i]\n                max_value = numbers[j]\n                closest_pair = (min_value, max_value)\n    return closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    other = 0.\n    smallest = math.inf\n    largest = math.inf\n    for x in numbers:\n        if x < other:\n            other = x\n            smallest = x\n            largest = x\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min = -1.0\n    max = 1.0\n    for i, x in enumerate(numbers):\n        if x == min:\n            min = i\n            if i == 0:\n                max = x\n            else:\n                if x < min:\n                    max = x\n                else:\n                    min = i\n\n    return min, max", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    vecs = [(i - j)**2 for i, j in enumerate(numbers) if i!= j]\n    vecs.sort(key=lambda x: x[0])\n    if len(vecs) == 1:\n        return vecs[0], vecs[1]\n    else:\n        vecs.reverse()\n        vecs[0] = vecs[1]\n        vecs[1] = vecs[0]\n        return vecs[0], vecs[1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    result = []\n    for n in numbers:\n        try:\n            result.append(n)\n            result.append(n)\n            continue\n        except TypeError:\n            break\n\n    if len(result) < 2:\n        return result\n    if (len(result) == 2 and result[1] == result[0]) or (len(result) == 3 and result[0] == result[1] and result[1] == result[2]):\n        return result\n    else:\n        result.reverse()\n        return result\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers)!= 2:\n        return None, None\n    return numbers[0], numbers[1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    idx = 0\n    start = 0\n    end = len(numbers) - 1\n    while idx < end:\n        last = idx\n        idx += 1\n        if numbers[idx] < numbers[last]:\n            start = idx\n        elif numbers[idx] > numbers[last]:\n            end = idx\n        else:\n            return numbers[last], numbers[idx]\n    return start, end\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Get the distance between two numbers\n    distances = [abs(a - b) for a, b in zip(numbers, numbers)]\n    closest = distances[0]\n\n    # Repeat the process for each of the numbers in the list\n    for i in xrange(len(numbers)):\n        distances.append(dists(numbers[i], closest))\n        if distances[0] < distances[i]:\n            closest = distances[i]\n            # Move onto the next number\n            i -= 1\n\n    return closest, closest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_possible = min(numbers) + 1\n    if closest_possible == len(numbers):\n        return numbers[0], numbers[-1]\n\n    for i in range(closest_possible):\n        if numbers[i] < numbers[i + 1]:\n            return numbers[i], numbers[i + 1]\n\n    return numbers[0], numbers[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('Length of numbers must be at least two.')\n    nums = sorted(numbers, key=lambda x: x ** 2)\n    left = nums[0]\n    right = nums[-1]\n    if right == 0:\n        return None, 0\n    if left == 0:\n        return None, 0\n    if left == right * 0.95:\n        return left, right\n    if right == 0.5 * (left + right):\n        return left, right\n    return left, right * 0.95", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_point = min(numbers)\n    closest_point = max(numbers)\n    return closest_point, closest_point", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # We need to find two closest numbers, so we need to find them\n    # in the order we need them.\n    numb = numbers[0]\n    min = numbers[0]\n    for i in range(len(numbers) - 1):\n        if numb == numbers[i]:\n            numb = numbers[i+1]\n            break\n    max = numb\n    if numb == max:\n        return max, max\n    else:\n        return find_closest_elements([numbers[1:], numb, max])", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest = numbers[0]\n    # if all the numbers are the same length, then just return the first number\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n    else:\n        # find the distance between the two elements\n        # TODO change this to a more general distance function\n        distance = abs(numbers[0] - numbers[1])\n        return closest, closest if distance < smallest else distances[closest]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Determine the two elements that are the closest to each other.\n    # Since the given numbers are numbers, we can do the comparison in binary.\n    # Also, since the numbers are sorted, the two smallest numbers will be the closest to each other.\n    # (This is also the way Python sorts lists in Python 2.x, the only way to sort a list of floats is by comparing them)\n    lo = 0\n    hi = len(numbers) - 1\n    while lo <= hi:\n        middle = lo + (hi - lo) / 2\n        if numbers[middle] < numbers[lo]:\n            lo = middle + 1\n        elif numbers[middle] > numbers[hi]:\n            hi = middle - 1\n        else:\n            return middle, numbers[middle]\n    return numbers[lo], numbers[hi]\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # First, sort the numbers in ascending order\n    sorted_list = sorted(numbers, key=lambda item: item[1])\n    # And then select the two closest to each other\n    l1_closest, l2_closest = min(numbers: sorted(numbers, key=itemgetter(1)), key=itemgetter(0))\n    # And return the pair of numbers\n    return l1_closest, l2_closest\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    list_closest = [list(x) for x in numbers]\n    distance = float(max(list_closest) - list_closest[0])\n    for index, number in enumerate(numbers):\n        distance += abs(number - list_closest[index])\n    return distance, list_closest[0]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_distance = 9999999999\n    for i in range(len(numbers)):\n        dist = 0.\n        for j in range(i + 1, len(numbers)):\n            dist = min(dist, abs(numbers[i] - numbers[j]))\n        if dist < min_distance:\n            min_distance = dist\n            max_distance = min_distance\n            min_element = numbers[i]\n            max_element = numbers[j]\n    return min_element, max_element", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    sorted_elements = sorted(numbers, reverse=True)\n    is_close = False\n\n    for i, elem in enumerate(sorted_elements):\n        if elem < i:\n            is_close = True\n            i = i\n        if elem > sorted_elements[i + 1]:\n            is_close = False\n            i = i + 1\n    if is_close:\n        return sorted_elements[0], sorted_elements[1]\n    else:\n        return sorted_elements[0], sorted_elements[1] + 0.1\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest = min(numbers)\n    try:\n        next_index = numbers.index(closest)\n        return closest, numbers[next_index + 1]\n    except ValueError:\n        return closest, numbers[0]\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # if no numbers are provided or if length is 1, then return the closest\n    if len(numbers) == 0 or numbers[0] == 0:\n        return numbers[0], numbers[0]\n\n    # first loop over all numbers\n    closest = numbers[0]\n    for n in numbers[1:]:\n        if abs(closest - n) < abs(numbers[0] - n):\n            closest, n = n, closest\n\n    return closest, closest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    points = sorted(numbers, key=lambda x: x ** 2, reverse=True)\n    points.reverse()\n    distances = []\n    for point in points:\n        distances.append(abs(point - points[-1]) ** 2)\n    return points[-1], points[0]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('minimum 2 numbers required')\n\n    min_dist = float('nan')\n    for index, number in enumerate(numbers):\n        if number < min_dist:\n            min_dist = number\n        if number > max_dist:\n            max_dist = number\n\n    return min_dist, max_dist\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest = min(numbers)\n    dist = 0\n    for i in range(len(numbers)):\n        if i == len(numbers) - 1:\n            continue\n        dist = abs(numbers[i] - closest)\n        if dist < dist:\n            closest = numbers[i]\n            dist = 0\n    return closest, closest + dist", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def find_closest(list: List[float], target: float) -> Tuple[float, float]:\n        min_index = -1\n        for i, num in enumerate(list):\n            if num < target:\n                min_index = i\n                target = num\n        if min_index > -1:\n            return list[min_index], list[min_index + 1]\n        else:\n            return list[0], list[-1]\n    ret = [find_closest(numbers, target) for target in numbers]\n    ret = [(i, j) for i, j in enumerate(ret) if i < j]\n    return ret[0], ret[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_numbers = list(numbers)\n    for n in numbers:\n        if n < closest_numbers:\n            closest_numbers.append(n)\n    return closest_numbers", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) <= 2:\n        return None, None\n\n    # If numbers has no empty elements, then return the nearest\n    # so that if numbers is [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.2, 2.0],\n    # then find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) is\n    # (2.0, 2.2)\n    if not numbers[0] and not numbers[1]:\n        return numbers[0], numbers[1]\n\n    # Check if numbers is a list of real numbers or floats\n    # (real numbers have a \"close\" property)\n    if isinstance(numbers[0], float) or isinstance(numbers[1], float):\n        return numbers[0], numbers[1]\n\n    # If numbers is a list of numbers and numbers[0] is less\n    # than numbers[1] then return the smaller number\n    elif len(numbers) == 2 and numbers[0] < numbers[1]:\n        return numbers[0], numbers[1]\n\n    # If numbers is a list of numbers and numbers[0] is equal\n    # to numbers[1] then return the larger number\n    elif len(numbers) == 2 and numbers[0] == numbers", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_x = numbers[0]\n    max_x = numbers[-1]\n    max_y = numbers[0]\n    min_y = numbers[-1]\n\n    for i in range(len(numbers)):\n        if numbers[i] < min_x:\n            min_x = numbers[i]\n        if numbers[i] > max_x:\n            max_x = numbers[i]\n\n        if numbers[i] < min_y:\n            min_y = numbers[i]\n        if numbers[i] > max_y:\n            max_y:\n            max_y:\n            max_y:\n            max_y:\n            max_y:\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    smallest = numbers[0]\n    largest = numbers[-1]\n    steps = 1\n\n    for step in range(1, len(numbers) + 1):\n        if (steps - 1) * smallest < numbers[step]:\n            smallest = numbers[step]\n            steps = step + 1\n        if (steps - 1) * largest > numbers[step]:\n            largest = numbers[step]\n            steps = step + 1\n\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    left, right = min(numbers, key=operator.itemgetter(1)), max(numbers, key=operator.itemgetter(1))\n    return left, right\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    max_dist = None\n    max_dist_ratio = None\n    nearest = None\n\n    for i in range(len(numbers)):\n        dist = abs(numbers[i] - max(numbers))\n\n    if dist > max_dist:\n        max_dist = dist\n        max_dist_ratio = dist / max_dist\n\n    if max_dist_ratio > 0.9:\n        nearest = max_dist_ratio, max_dist\n    else:\n        nearest = max_dist, max_dist_ratio\n\n    return nearest\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # If no numbers are supplied, return None\n    if not numbers:\n        return None\n\n    # Find the smallest number. This should always be the first element\n    smallest = numbers[0]\n    if len(numbers) > 1:\n        # If there are more than two numbers, find the next smallest. This should always be the second\n        # element\n        smallest = numbers[1]\n        if len(numbers) > 2:\n            # If there are more than two numbers and there's a tie, return the one that's the second closest\n            # to the first. This should be the smallest of the two\n            smallest = find_closest_elements(numbers[:2])[1]\n    return smallest, smallest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) <= 1:\n        raise ValueError(\"minimum of two numbers required for closest element\")\n\n    # Make the largest number a dummy number\n    dummy = numbers[0]\n    numbers[0] = numbers[-1]\n\n    # This is a naive algorithm that selects the element closest to the last one\n    # We sort them and select the largest\n    smallest, biggest = numbers[0], numbers[-1]\n    while biggest > smallest:\n        if largest == dummy:\n            smallest, biggest = smallest, biggest\n        else:\n            smallest, biggest = largest, smallest\n\n    return smallest, biggest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Perhaps this is the shortest possible way to do this with a tuple, but I'd like to be careful with any\n    # type-cast here - it could cause problems later.\n    my_min = max(numbers)\n    my_max = min(numbers)\n    other_min = max(numbers)\n    other_max = min(numbers)\n\n    if my_max == my_min:\n        return (other_min, my_max)\n\n    my_min, other_min = min(my_min, other_min)\n    my_max, other_max = max(my_max, other_max)\n\n    return (my_max, other_max)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) == 1:\n        return numbers[0], numbers[0]\n    min_dist = float('inf')\n    max_dist = float('-inf')\n    for i in range(len(numbers)):\n        for j in range(i + 1):\n            d = abs(numbers[i] - numbers[j])\n            if d < min_dist:\n                min_dist = d\n            if d > max_dist:\n                max_dist = d\n    return min_dist, max_dist", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest = None\n    for n in numbers:\n        if closest is None:\n            closest = n\n            continue\n        if n == closest:\n            continue\n        if n > closest:\n            closest = n\n    return closest, closest\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    num1 = numbers.pop(0)\n    num2 = numbers.pop(0)\n    # check if already in set\n    i = numbers.index(num1)\n    j = numbers.index(num2)\n    if i > j:\n        # if not, add them to set\n        i = numbers.insert(0, num1)\n        j = numbers.insert(0, num2)\n    if i < j:\n        # if not, swap them\n        i = numbers.insert(1, num1)\n        j = numbers.insert(1, num2)\n    return numbers[i], numbers[j]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest1 = float(\"inf\")\n    closest2 = float(\"inf\")\n    first = next(iter(numbers))\n    last = next(iter(numbers))\n\n    for number in numbers:\n        if number <= first:\n            closest1 = number\n        else:\n            closest2 = number\n        first = number\n        last = number\n    return closest1, closest2", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_dist = float('nan')\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1):\n            if numbers[i] == numbers[j]:\n                continue\n\n            if abs(numbers[i] - numbers[j]) < min_dist:\n                min_dist = abs(numbers[i] - numbers[j])\n                min_num = numbers[i]\n                max_num = numbers[j]\n    return min_num, max_num", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Find the minimum distance\n    min_distance = float('nan')\n    for n in numbers:\n        dist = n - min_distance\n        if dist < min_distance:\n            min_distance = dist\n    # Find the max distance\n    max_distance = float('nan')\n    for n in numbers:\n        dist = n - max_distance\n        if dist > max_distance:\n            max_distance = dist\n    # Select two elements\n    return min_distance, max_distance", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    x, y = numbers[0], numbers[-1]\n    return min(numbers, key=lambda x: abs(x - y))\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    smallest = 999999.0  # minimum allowed number\n    largest = -999999.0  # maximum allowed number\n    largest_index = -1\n    for i, n in enumerate(numbers):\n        if i == 0:\n            continue\n        elif n > smallest:\n            smallest = n\n            largest_index = i\n        elif n < largest:\n            largest = n\n            largest_index = i\n\n    return (smallest, largest)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    return find_closest_elements_in_order(numbers)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_1, closest_2 = None, None\n    for element in numbers:\n        if element <= closest_1:\n            closest_1 = element\n        if element > closest_2:\n            closest_2 = element\n    return closest_1, closest_2", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    left, right = numbers\n    if len(numbers) == 0:\n        return None, None\n    last = numbers[-1]\n    if last < left[0]:\n        left, right = right, left\n    if last < right[0]:\n        right, left = left, right\n    if left[0] > right[0]:\n        return right[0], left[0]\n    return left[0], right[0]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers, numbers\n    closest, farther = find_closest_numbers(numbers)\n    return closest, farther", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    result = []\n    if len(numbers) == 2:\n        result.append(numbers[0])\n        result.append(numbers[1])\n        return result\n    if len(numbers) == 3:\n        result.append(numbers[0])\n        result.append(numbers[1])\n        result.append(numbers[2])\n        return result\n    result.append(numbers[0])\n    result.append(numbers[1])\n    result.append(numbers[2])\n    return result", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # TODO(rik): this should not use the square root, but the golden ratio\n    # TODO(rik): use the formula from http://en.wikipedia.org/wiki/Golden_ratio\n    return (\n        float(numbers[-1]) * (numbers[-2] - numbers[0]) / (2 ** 3)\n        if numbers[-1] == numbers[-2] else (\n        float(numbers[-1]) * (numbers[-2] - numbers[0]) / (2 ** 2)\n        if numbers[-1] == numbers[-2] or numbers[-1] < numbers[-2] else (\n            float(numbers[-1]) * (numbers[-2] - numbers[0]) / (2 ** 1)\n        if numbers[-1] < numbers[-2] or not numbers[-1]\n        )\n    )", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest = sorted(numbers, key=lambda x: x.__lt__(x + 0.5))\n    if len(numbers)!= 2:\n        return (float(numbers[0]), float(numbers[1]))\n    return (float(numbers[0]), float(numbers[1]) - closest[1])\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    r = 2.0\n    g = 2.0\n    while r <= g:\n        r, g = g, r\n        if r < g:\n            yield r, g", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    distances = set(map(float, numbers))\n    closest = distances.pop()\n    min_distance = distances.pop()\n    for i in range(len(distances)):\n        if i == 0 and distances.count(min_distance) == 1:\n            min_distance = distances.pop()\n        if distances.count(closest) == 1:\n            closest = distances.pop()\n    return min_distance, closest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min = float('nan')\n    max = float('nan')\n    for i in range(len(numbers)):\n        r = numbers[i] - min\n        if r < 0:\n            r = -r\n        m = numbers[i] - max\n        if m > 0:\n            m = -m\n        min = r\n        max = m\n    return min, max", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_indices = []\n    for index in range(len(numbers)):\n        if numbers[index] > numbers[index - 1] and numbers[index] < numbers[index + 1]:\n            closest_indices.append(index)\n    return closest_indices[-1], closest_indices[0]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) == 0:\n        return (0.0, 0.0)\n\n    results = [min(numbers)]\n    for current in numbers:\n        if current > results:\n            results.append(current)\n\n    return results[0], results[1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest1, closest2 = None, None\n    for i in range(len(numbers) - 2):\n        closest1, closest2 = min(closest1, numbers[i]), min(closest2, numbers[i + 1])\n    if closest1 == closest2:\n        return closest1, closest2\n    elif closest2 == closest1:\n        return closest2, closest1\n    else:\n        return closest2, closest1", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    i = 0\n    j = 0\n    x = 0\n    y = 0\n\n    # 1. Sort the numbers\n    for i, n in enumerate(numbers):\n        x = x + n\n        y = y + i\n        if x < y:\n            j = i\n            i = 0\n            x = y\n\n    # 2. Find the pair of numbers with the smallest distance\n    while x < y:\n        i = i + 1\n        if i > j:\n            break\n        x = x + n\n        y = y + i", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    nums = sorted(numbers)\n    num_smallest, num_biggest = None, None\n    for i, x in enumerate(nums):\n        if x < num_smallest:\n            num_smallest = x\n        if x > num_biggest:\n            num_biggest = x\n    return num_smallest, num_biggest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input must have at least two values\")\n\n    num1 = numbers[0]\n    num2 = numbers[1]\n    distance = float(num2 - num1)\n    return distance, num1", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    def cmp(a, b):\n        \"\"\" A user defined function to compare two numbers (inclusive).\n        >>> cmp(1.0, 2.0)\n        True\n        >>> cmp(1.0, 2.0)\n        True\n        >>> cmp(3.0, 2.0)\n        False\n        >>> cmp(3.0, 2.0)\n        True\n        >>> cmp(3.0, 1.0)\n        True\n        >>> cmp(2.0, 1.0)\n        True\n        \"\"\"\n        return cmp(*numbers)\n    ordered_numbers = sorted(numbers)\n    for i, n in enumerate(ordered_numbers):\n        if cmp(ordered_numbers[i], ordered_numbers[i + 1]):\n            if i + 1 < len(ordered_numbers):\n                ordered_numbers.pop(i + 1)\n        else:\n            ordered_numbers.insert(i + 1, ordered_numbers[i])\n    return ordered_numbers[0], ordered_numbers[-1]\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest = None\n    # sort the list of numbers, then return the first two\n    sorted_numbers = sorted(numbers, reverse=True)\n    closest = sorted_numbers[0]\n    if len(sorted_numbers) > 1:\n        closest += sorted_numbers[1]\n    return closest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest = numbers[0]\n    smallest = numbers[0]\n    for number in numbers:\n        if number < closest:\n            closest = number\n            smallest = number\n    return closest, smallest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # take the difference between each of the numbers and then take the absolute difference\n    # between the sum of the numbers and the difference between the sum and the difference\n    ret_val = [-numbers[-2]] * len(numbers) + [-numbers[0]] * len(numbers) + [-numbers[-1]] * len(numbers)\n\n    for i in range(len(ret_val)):\n        ret_val[i] = abs(ret_val[i] - (ret_val[i] + ret_val[-2]))\n\n    ret_val.sort(key=lambda x: x)\n\n    return ret_val[0], ret_val[-1]\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    dist = float('inf')\n\n    while True:\n        for i in range(len(numbers)):\n            if dist > numbers[i]:\n                dist = numbers[i]\n                if i + 1 < len(numbers):\n                    result = numbers[i]\n                    numbers[i] = numbers[i + 1]\n                    numbers[i + 1] = result\n                break\n\n    return dist, dist", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    nearest_pair = 0.0\n    for i in range(len(numbers)):\n        if i == len(numbers) - 1:\n            nearest_pair = numbers[0]\n        else:\n            for j in range(len(numbers) - i + 1):\n                if i == j:\n                    nearest_pair = numbers[j]\n                else:\n                    if numbers[i] < numbers[j]:\n                        nearest_pair = numbers[i]\n\n    if nearest_pair < numbers[0]:\n        nearest_pair = numbers[0]\n    if nearest_pair > numbers[len(numbers) - 1]:\n        nearest_pair = numbers[len(numbers) - 1]\n\n    return nearest_pair, nearest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    assert len(numbers) > 0\n    assert numbers[0] > numbers[-1]\n\n    return numbers[::-1], numbers[::-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    max_dist = 0.0\n    for i in range(len(numbers)):\n        diff = numbers[i] - max_dist\n        max_dist = numbers[i]\n        for j in range(i + 1, len(numbers)):\n            diff = numbers[i] - numbers[j]\n            if diff <= max_dist:\n                max_dist = diff\n                max_val = numbers[i]\n                if i == len(numbers) - 1:\n                    max_val = numbers[j]\n        if max_dist < 0.0:\n            max_dist = 0.0\n            max_val = numbers[i]\n\n    return max_val, max_dist\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest = 0.\n    for num in numbers:\n        difference = num - closest\n        if difference < 0:\n            closest = num\n            closest_unit = abs(difference)\n        else:\n            difference_unit = abs(difference)\n            if difference < closest_unit:\n                closest = num\n                closest_unit = difference_unit\n\n    return closest, closest_unit", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    res = None\n    for i in range(2):\n        if len(numbers) > i and numbers[i] < res:\n            res = numbers[i]\n            if res == 1.0:\n                res = None\n            break\n    if res is None:\n        return None, None\n    else:\n        return res, res\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    result = None\n    for i in range(len(numbers)):\n        distance = numbers[i] - result\n        if distance < 0.0:\n            result = numbers[i]\n    return result, result", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    return min((l, r) for l, r in zip(numbers, numbers[1:]))", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) == 2:\n        return numbers\n\n    closest = 0.0\n    min = numbers[0]\n    for item in numbers[1:]:\n        if item < min:\n            min = item\n            closest = item\n    return min, closest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    closest = min(numbers, key=lambda v: (v - numbers[0])**2)\n    if closest < numbers[0]:\n        return numbers, closest\n    return numbers[1:], closest[1:]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    list_cuts = []\n    num_list = numbers\n    # FIXME: Handle lists of numbers up to length 2 with recursion\n\n    # This should be fast\n    def _cut(nums: List[float], min: float) -> List[float]:\n        # Pick two elements that are closest to each other\n        min_ = min\n        max_ = min\n        best_ = min\n        best_ = max_\n        best_ = min\n        for num in nums:\n            if num < min:\n                min_ = num\n                best_ = num\n        if best_!= max_:\n            list_cuts.append((best_, min_))\n            max_ = best_\n            num_list.remove(max_)\n        # If not empty, remove min from list_cuts, and then pick the\n        # next two that are closest to each other\n        else:\n            list_cuts.append((min_, min_))\n\n    if len(num_list) > 1:\n        num_list.sort(key=lambda num: num)\n    # Now that we sorted, remove min from the list_cuts, and pick the next two\n    # that are closest to each other\n    min_ = min(num_list)\n    max_ = min(num_list)\n    for i in range(", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # We use a brute force approach to find the two nearest values.\n    # First, find the point where the two values intersect.\n    intersection = max(numbers, key=operator.itemgetter(1))\n\n    # Now, the two closest values will be those that are at the intersection of the next two values.\n    # Here, the point where the intersection happens is the closest value to the current point.\n    # So, we iterate until we either find a new intersection or the first value is already closer than the second one.\n    # If we don't find a new intersection, we just use the first value as the closest value.\n    new_intersection = None\n    while intersection is None or intersection < numbers[0]:\n        new_intersection = intersection\n        intersection = max(numbers, key=operator.itemgetter(1))\n\n    # The closest value is the one with the smaller distance from the intersection (or the point where it happens).\n    return new_intersection, numbers[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) == 0:\n        return None, None\n    if len(numbers)!= 2:\n        raise Exception(\"Expected two numbers, got: %r\" % numbers)\n    n, m = numbers.popitem()\n\n    assert n >= m, \"Invalid input\"\n    return n, m", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    return [\n        min(x for x in numbers if x == other),\n        max(x for x in numbers if x == other),\n    ]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    x = 0.0\n    y = 0.0\n    best_closest_pair = None\n    for i in range(len(numbers)):\n        if x > numbers[i]:\n            x = numbers[i]\n            best_closest_pair = (i, i)\n        elif x < numbers[i]:\n            y = numbers[i]\n            best_closest_pair = (i, i)\n\n    return best_closest_pair", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest = min(numbers)\n    return numbers[closest], numbers[closest + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    distance = 1.0\n    elements = [float(element) for element in numbers]\n    i = 0\n    j = len(elements) - 1\n    while i < j:\n        distance = min(distance, float(elements[i]) - float(elements[j]))\n        i += 1\n        j -= 1\n    return distance, elements[i + 1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    from math import ceil, floor\n    min_index = 0\n    max_index = len(numbers) - 1\n    closest = numbers[min_index]\n    for i in range(max_index, min_index + 1):\n        if numbers[i] < closest:\n            min_index = i\n            closest = numbers[i]\n    return closest, closest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # To be more efficient: sort the numbers and then do the check\n    sorted_list = sorted(numbers, key=lambda x: x, reverse=True)\n\n    # Find the two numbers that are most nearly equal to each other\n    best_len = max(len(v) for v in numbers)\n\n    # Consider only the first two numbers, as the rest of the numbers are too close to each other\n    if best_len >= 3:\n        return numbers[:2], numbers[-2:]\n    else:\n        return numbers[:2]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest1, closest2 = None, None\n\n    if len(numbers) <= 1:\n        return closest1, closest2\n\n    result = [0] * len(numbers)\n    result[0] = numbers[0]\n    for i in range(1, len(numbers)):\n        if closest1 is None or numbers[i] < closest1[0]:\n            closest1 = numbers[i]\n            result[0] = numbers[0]\n        else:\n            closest2 = numbers[i]\n            result[0] = numbers[0]\n            if closest1[0] < closest2[0]:\n                closest2 = closest1[0]\n\n    return result", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # first get the closest two elements\n    closest = min(numbers, key=lambda x: x[1] - x[0])\n    second_closest = min(numbers, key=lambda x: x[0] - x[1])\n    return (closest, second_closest)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    return min(numbers, key=lambda number: (number - numbers[0], number))", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    # Find the minimum distance between the elements.\n    min_distance = max(min(numbers), key=lambda x: x**2)\n\n    # Now find the two nearest numbers, which are the largest and smallest\n    # values of the list (plus one), respectively.\n    return min_distance, max(numbers[1:])", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    nums = sorted(numbers)\n    if len(nums) < 2:\n        return nums, nums\n    return nums[0], nums[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pairs = [(f, g) for f, g in zip(numbers, numbers) if (f - g) < 0.0 and (f - g) ** 2 < (f + g) ** 2]\n    closest_pairs = sorted(closest_pairs, key=lambda f: f[1])\n    closest_pairs = list(closest_pairs)\n    return closest_pairs[0], closest_pairs[1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        return None, None\n\n    first, second = numbers[0], numbers[-1]\n    x = float(first)\n    y = float(second)\n\n    n = len(numbers)\n\n    if x == y:\n        return x, y\n    else:\n        if n == 2:\n            return x, y\n        else:\n            xmin = x\n            ymin = y\n            for i in xrange(n - 1):\n                if xmin > numbers[i]:\n                    xmin = numbers[i]\n                    ymin = numbers[i + 1]\n            xmax = x\n            ymax = y\n            for i in xrange(n - 1):\n                if xmax < numbers[i]:\n                    xmax = numbers[i]\n                    ymax = numbers[i + 1]\n            if xmin < xmax:\n                x, y = ymin, xmax\n            elif xmin > xmax:\n                x, y = ymax, xmin\n\n    return x, y", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    x = 0\n    y = 0\n    current_x = 0\n    current_y = 0\n    for number in numbers:\n        if current_x == 0:\n            current_x = number\n        elif current_x == number:\n            current_y = number\n        else:\n            x = x + 1\n            y = y + 1\n    return x, y\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest = None\n    closest_dist = None\n    for number in numbers:\n        if number < closest_dist:\n            closest_dist = number\n            closest = number\n    if closest_dist is None:\n        raise ValueError(\"No closest number found\")\n    return closest, closest_dist", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    n = len(numbers)\n    if n == 2:\n        return numbers[0], numbers[1]\n    for i in range(n):\n        next_index = n - i + 1\n        for j in range(i+1, n):\n            if numbers[i] <= numbers[j] and numbers[j] <= numbers[j+1]:\n                break\n        else:\n            return numbers[i], numbers[j]\n    return None, None", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    smallest = numbers[0]\n    largest = numbers[-1]\n    for i in range(1, len(numbers)):\n        if numbers[i] < smallest:\n            smallest = numbers[i]\n        if numbers[i] > largest:\n            largest = numbers[i]\n    return smallest, largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_closest = _min_closest_elements(numbers)\n    max_closest = _max_closest_elements(numbers)\n    return min_closest, max_closest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min = 1.0\n    max = 1.0\n    i = 0\n    for x in numbers:\n        if i == 0:\n            min = x\n            i = 1\n        elif x < min:\n            min = x\n            i = 1\n        else:\n            max = x\n            i = 0\n    return min, max", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) == 1:\n        return numbers[0], numbers[0]\n    elif len(numbers) == 2:\n        return numbers[0], numbers[1]\n    else:\n        # There is no way to find the closest from more than two numbers in this way, so do the brute force approach.\n        # i.e. iterate through the list and select a pair of numbers that is the closest.\n        # This loop should be as short as possible and the number of iterations should be limited.\n        while True:\n            closest = None\n            for i in range(len(numbers)):\n                if numbers[i] < numbers[i + 1]:\n                    closest = numbers[i]\n                    break\n            if closest is None:\n                return numbers[0], numbers[1]\n            else:\n                return closest, closest\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_value = float(\"inf\")\n    max_value = float(\"inf\")\n\n    for number in numbers:\n        if number < min_value:\n            min_value = number\n        elif number > max_value:\n            max_value = number\n\n    return min_value, max_value", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    r = 0.0  # Current result\n    w = 0.0  # Weight of current element\n    i = 0\n    for j in numbers:\n        if abs(r) > abs(w):  # Only process the smaller numbers\n            r = r + j\n            w = w + j * 0.001\n        else:\n            i += 1\n            if i == 100:  # Only process 100 numbers at a time\n                break  # Give up\n        if i == 100:  # This is the first 100 numbers\n            # Keep going until there is no more progress\n            break\n    return r, w  # Return smallest value and its distance to others", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    assert len(numbers) > 1\n    nmin = 0\n    nmax = len(numbers) - 1\n    min = float('nan')\n    max = float('nan')\n\n    for i in range(nmax):\n        x = numbers[i]\n        y = numbers[i+1]\n        if x > y and abs(x - y) < abs(min - max):\n            min = x\n            max = y\n\n    return min, max", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Pick one arbitrarily\n    start = 0\n    end = len(numbers)\n    while start < end:\n        mid = start + (end - start) / 2\n        if numbers[mid] < numbers[start]:\n            start = mid\n        else:\n            end = mid\n\n    return start, end", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    try:\n        return _closest(numbers, 2)\n    except ZeroDivisionError:\n        # if the numbers is zero, then it's the least or largest\n        # (we haven't tried them yet, and we don't want to try them twice)\n        return (numbers.pop(), numbers.pop())", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closer = None\n    closer_pairs = {}\n    # Sort the list, in descending order\n    for _, v in sorted(numbers, reverse=True):\n        if not closer_pairs.get(v):\n            closer = v\n            closer_pairs[v] = None\n    if not closer:\n        return None, None\n    # First, try to find the largest pair\n    if closer_pairs.get(closest):\n        if closer_pairs.get(closest) > closer_pairs.get(closest_pairs.get(closest):\n            return closer, closest_pairs.get(closest_pairs.get(closest_pairs.get(closest)))\n        elif closer_pairs.get(closest_pairs.get(closest)) > closer:\n            return closer_pairs.get(closest_pairs.get(closest_pairs.get(closest)), closer_pairs.get(closest))\n    # Second, try to find the second largest pair\n    elif closest_pairs.get(closest):\n        if closest_pairs.get(closest) > closest_pairs.get(closest_pairs.get(closest_pairs.get(closest))):\n            return closest, closest_pairs.get(closest_pairs.get(closest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_d = float('nan')\n    max_d = float('nan')\n\n    for i, number in enumerate(numbers):\n        if i == 0:\n            min_d = number\n            max_d = number\n        else:\n            if number < min_d:\n                min_d = number\n            if number > max_d:\n                max_d = number\n\n    min_d = min(min_d, numbers[0])\n    max_d = max(max_d, numbers[-1])\n\n    return min_d, max_d\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    p = 0\n    q = 0\n    a = numbers[0]\n    b = numbers[-1]\n    c = numbers[0]\n    i = len(numbers) - 1\n    while i >= 0 and p == 0:\n        p, q = find_closest_elements(numbers[i:])\n        numbers.insert(i, c)\n        numbers.insert(i, a)\n        numbers.insert(i, b)\n        i -= 1\n        p -= q\n    return p, q", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n\n    # Compute the distance between each two numbers in order to select them\n    return sum([abs(numbers[i] - numbers[j]) for i, j in enumerate(numbers)]) / len(numbers)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n\n    # Find the distances from each number to the other\n    dists = [math.sqrt((numbers[i] - numbers[j]) ** 2) for i, j in enumerate(numbers)]\n    dist = min(dists)\n    return numbers[0], numbers[1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    lr = len(numbers) - 1\n    num = numbers[lr]\n    def get_closest(x, y):\n        if x < y:\n            return x\n        else:\n            return y\n    closest = get_closest(*numbers[0:lr])\n    return num, closest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError()\n\n    min = numbers[0]\n    max = numbers[-1]\n\n    for i, number in enumerate(numbers):\n        if abs(number - min) < abs(number - max):\n            min = number\n            max = number\n\n    return min, max", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    first_closest = max(numbers)\n    second_closest = min(numbers)\n    return first_closest, second_closest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    candidate_elements = []\n    min_closest = 2.0\n    max_closest = 1.0\n    for element in numbers:\n        if element < min_closest:\n            min_closest = element\n        if element > max_closest:\n            max_closest = element\n    if min_closest == max_closest:\n        return (min_closest, max_closest)\n    closest_elements = []\n    closest_elements.append(min_closest)\n    closest_elements.append(max_closest)\n    for element in numbers:\n        if element <= closest_elements[0]:\n            closest_elements.append(element)\n            closest_elements.append(element)\n            closest_elements.append(element)\n        elif element >= closest_elements[1]:\n            closest_elements.append(element)\n            closest_elements.append(element)\n            closest_elements.append(element)\n    return tuple(closest_elements)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pairs = [(x, y) for x, y in zip(numbers, numbers) if abs(x - y) < 0.0001]\n    if len(closest_pairs) == 0:\n        return None\n    closest_pairs = sorted(closest_pairs, key=lambda x: x[0])\n\n    # Choose closest pair with larger index\n    index = min(closest_pairs)\n    return closest_pairs[-1][0], closest_pairs[-1][1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_vals = [abs(numbers[i] - numbers[i + 1]) for i in xrange(len(numbers))]\n    max_vals = [abs(numbers[i] - numbers[i - 1]) for i in xrange(len(numbers))]\n\n    min_idx = max(min_vals)\n    max_idx = min(max_vals)\n\n    min_val = min_vals[min_idx]\n    max_val = max_vals[max_idx]\n\n    return min_val, max_val", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    diff = abs(numbers[0] - numbers[-1])\n    if len(numbers) == 0:\n        return numbers, numbers\n    elif len(numbers) == 1:\n        return numbers, numbers[0]\n    elif len(numbers) == 2:\n        return numbers[0], numbers[1]\n    else:\n        return numbers[0], find_closest_elements(numbers[1:])", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min = numbers[0]\n    max = numbers[-1]\n    for i, number in enumerate(numbers):\n        if number < min:\n            min = number\n        if number > max:\n            max = number\n    return min, max", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    return min(numbers, key=lambda x: x - numbers[0]), max(numbers, key=lambda x: x - numbers[0])", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_distance = float('inf')\n    min_distance_relative = float('inf')\n    for distance in numbers:\n        if distance < min_distance:\n            min_distance = distance\n            min_distance_relative = min(min_distance_relative, distance / 2.0)\n        if distance < min_distance_relative:\n            min_distance_relative = distance / 2.0\n\n    return min_distance, min_distance_relative", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_dif = float('nan')\n    min_dif2 = float('nan')\n    for i in range(len(numbers)):\n        min_dif = min(min_dif, numbers[i])\n        min_dif2 = min(min_dif2, numbers[i])\n    if min_dif2 > min_dif:\n        return min_dif2, min_dif\n    else:\n        return min_dif, min_dif2\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    result = []\n    for number in numbers:\n        if number < 2.0:\n            result.append(number)\n        else:\n            first = numbers[0]\n            second = numbers[1]\n            if first == second:\n                continue\n            if first > second:\n                result.append(first)\n                first = second\n            else:\n                result.append(second)\n                second = first\n    return result", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    best_index = -1\n    best_ratio = 1e99\n    best_ratio_index = -1\n    best = float('inf')\n\n    for i, value in enumerate(numbers):\n        if abs(value - best) < abs(value - best_ratio):\n            best = value\n            best_ratio = value\n            best_ratio_index = i\n\n    if abs(best - best_ratio) < abs(best - best_ratio_index):\n        return (best, best_ratio_index)\n    else:\n        return (best, best_ratio_index + 1)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    if len(numbers) == 0:\n        return (0.0, 0.0)\n\n    distance = 0.0\n    for i in range(len(numbers)):\n        distance += (numbers[i] - numbers[i - 1])\n\n    return (distance / len(numbers), distance / len(numbers))", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Must provide at least 2 numbers\")\n    elif len(numbers) == 2:\n        return numbers[0], numbers[-1]\n    else:\n        return find_closest_elements(numbers[1:])[1], find_closest_elements(numbers[:-1])[0]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # 1) Find the smallest number in the list of numbers\n    closest_to_smallest = 0.0\n    smallest = numbers[0]\n\n    for i in range(1, len(numbers)):\n        if numbers[i] < smallest:\n            smallest = numbers[i]\n            closest_to_smallest = closest_to_smallest + smallest\n\n    # 2) Find the largest number in the list of numbers\n    closest_to_largest = 0.0\n    largest = numbers[0]\n\n    for i in range(1, len(numbers)):\n        if numbers[i] > largest:\n            largest = numbers[i]\n            closest_to_largest = closest_to_largest + largest\n\n    # 3) Compare the two numbers, return the closest number\n    return closest_to_smallest, closest_to_largest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    return sorted(numbers, key=lambda number: abs(number - others), reverse=True)[:2]\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest = 2.0\n    min_dist = 999999\n    for _, x in enumerate(numbers):\n        if x < closest:\n            closest = x\n            min_dist = x\n    if min_dist == 999999.0:\n        raise ValueError(f\"Could not find a two-element number pair that are the closest to each other.\")\n    return closest, min_dist", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    # The simplest way to select the two closest elements is to do a linear search\n    closest_indices = []\n    for index in range(len(numbers) - 2):\n        current = numbers[index]\n        next = numbers[index + 1]\n        if current < next:\n            closest_indices.append(index)\n            break\n\n    if not closest_indices:\n        raise ValueError('No nearest pair found.')\n\n    return numbers[closest_indices[0]], numbers[closest_indices[1]]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    return min(numbers, key=lambda x: abs(x - numbers[0]))", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    num1 = 0.0\n    num2 = 0.0\n    n = len(numbers)\n    if n <= 1:\n        return (numbers[0], numbers[0])\n    else:\n        for i in range(1, n):\n            if (numbers[i] - numbers[i - 1]) < (numbers[0] - numbers[i - 1]):\n                num1 = numbers[i]\n                num2 = numbers[i - 1]\n            else:\n                num2 = numbers[i]\n                num1 = numbers[i - 1]\n        if num1!= num2:\n            return (num1, num2)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_pos = max_pos = 0\n    found_closest = None\n    for i in range(len(numbers)):\n        if min_pos < numbers[i] < max_pos:\n            min_pos = numbers[i]\n            found_closest = (i, numbers[i])\n            if found_closest not in numbers:\n                numbers.append(found_closest)\n        if min_pos == max_pos:\n            break\n    return min_pos, max_pos", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_index = min(numbers)\n    max_index = max(numbers)\n\n    num = numbers[min_index]\n    num = numbers[max_index]\n\n    if num == min_index:\n        return max_index, min_index\n    elif num == max_index:\n        return min_index, max_index\n    else:\n        return min_index, num", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    start = 0\n    end = len(numbers)\n    c = start + end // 2\n\n    return numbers[c - start: c], numbers[c + end: len(numbers)]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_index = 0\n    for index, number in enumerate(numbers):\n        if number < min_index:\n            min_index = index\n\n    return min_index, numbers[min_index]\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    i, j = min(len(numbers), 2), 0\n    while i <= j:\n        if numbers[i] < numbers[j]:\n            j -= 1\n            i -= 1\n        else:\n            i += 1\n    return i, j", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # The elements are sorted in the order they are to be selected, so if we already have a list in our hands, we should\n    # make sure that it is in the correct order. Otherwise, we'll just return the first element from our sorted list.\n    # We do this with a temporary list, so that we have some space for the sorted list to grow to.\n    tmp = sorted(numbers)\n\n    # By the time we get to this point, all of the elements in the sorted list have already been iterated over, so we\n    # can simply append the two elements to the sorted list and return them.\n    # The two elements that we return are the same as the elements in the sorted list in the order that they appear.\n    return tmp[-1], tmp[0]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest = None\n    for x in numbers:\n        if closest is None or x < closest[0]:\n            closest = (x, closest[0])\n\n    if closest is None:\n        return None\n\n    if closest[1] > closest[0]:\n        closest[1], closest[0] = closest[0], closest[1]\n\n    return closest[1], closest[0]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest = 2.0\n    min = min(numbers)\n    max = max(numbers)\n    # Print out the list of numbers\n    print(\"Input: {}\".format(numbers))\n    print(\"Min: {}\".format(min))\n    print(\"Max: {}\".format(max))\n\n    # If the list is long enough, we will have some unique numbers, which are not close to each other.\n    if len(numbers) >= 3:\n        # Select the first element and the second element and run through the rest of the list until we find the closest\n        first = min(numbers)\n        second = max(numbers)\n        for i in range(3):\n            if i < len(numbers):\n                if numbers[i] == first or numbers[i] == second:\n                    # This is the closest pair of numbers.\n                    # For brevity we print out the two closest numbers and the index of the first and last values\n                    print(\"First: {}\".format(first))\n                    print(\"Second: {}\".format(second))\n                    print(\"Index: {}\".format(i))\n                    break\n                else:\n                    # The next number isn't the closest, so we need to run through the list again.\n                    next = max(numbers)\n                    for i in range(3):\n                        if", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest = (0.0, 1.0)\n    distance = np.sqrt(np.sum(np.square(numbers), axis=1))\n    for i, number in enumerate(numbers):\n        if distance < closest[2]:\n            closest[2] = distance\n            closest[1] = number\n    return closest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Find the smallest number that is at least as big as the specified list of numbers\n    candidate_min = min(numbers)\n    # Find the largest number that is at least as big as the specified list of numbers\n    candidate_max = max(numbers)\n    # Choose the smallest number which is at least as big as both\n    if candidate_min == candidate_max:\n        return (candidate_min, candidate_max)\n    # Choose the largest number which is at least as big as both\n    elif candidate_min < candidate_max:\n        return (candidate_max, candidate_min)\n    # Choose the smallest number which is at least as big as the smallest number\n    elif candidate_min > candidate_max:\n        return (candidate_max, candidate_min)\n    else:\n        raise Exception(f\"{candidate_min} is bigger than both {candidate_max} and {candidate_min}\")\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # `n` must be non-negative. `n` will be the list of all numbers in the set.\n    n = len(numbers) - 1\n    # `min` is the smallest number in `n`, sorted so that `min < max`.\n    min = numbers[:n - 1]\n    # `max` is the largest number in `n`, sorted so that `max > min`.\n    max = numbers[n - 1]\n    # `mid` is a number between `min` and `max` that is closest to `min`.\n    mid = min + (max - min) / 2\n    return min, mid", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    mins = []\n    maxs = []\n\n    for n in numbers:\n        if n < mins:\n            mins.append(n)\n        else:\n            maxs.append(n)\n\n    return min(mins), max(maxs)\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n    else:\n        # Pick a random number.\n        num = random.choice(numbers)\n        # And pick the one closest to it.\n        i = 1\n        while i <= len(numbers) and numbers[i] == num:\n            i += 1\n        # Return the two numbers.\n        return numbers[0], numbers[1]\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    max_x = max_y = 0.0\n    for x in numbers:\n        if x > max_x:\n            max_x = x\n        if x < min_x:\n            min_x = x\n\n    for y in numbers:\n        if y > max_y:\n            max_y = y\n        if y < min_y:\n            min_y = y\n\n    closest = min_x, max_x\n    if max_x > closest[1]:\n        closest[1] = max_x\n\n    closest = min_y, max_y\n    if max_y > closest[0]:\n        closest[0] = max_y\n\n    return closest\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    dists = [(num - numb) for num, numb in zip(numbers, numbers)]\n    dists = sorted(dists, reverse=True)\n    closest = dists[0]\n    for dist in dists[1:]:\n        if dist < closest:\n            closest = dist\n    return closest, closest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    num = 0\n    if len(numbers) < 2:\n        return num, num\n    for i in range(1, len(numbers)):\n        if numbers[i] - num > 0:\n            num = numbers[i]\n            break\n    return num, num", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest = numbers[0]\n    for number in numbers:\n        if number < closest:\n            closest = number\n    return closest, numbers[-1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    n = len(numbers)\n    n = n - 2\n    if n < 1:\n        return (0, 0)\n    elif n == 1:\n        return numbers[0], numbers[-1]\n    else:\n        a, b = numbers[n - 1], numbers[-1]\n        # Find the minimum\n        min_value = 0.0\n        for i in range(n - 2):\n            a = a + numbers[i]\n            b = b + numbers[i + 1]\n            if a < min_value:\n                min_value = a\n        # Find the maximum\n        max_value = 0.0\n        for i in range(n - 2):\n            a = a + numbers[i]\n            b = b + numbers[i + 1]\n            if b > max_value:\n                max_value = b\n        return max_value, min_value", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    return min(numbers, key=lambda x: x / x ** 2.0)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest = None\n    index = 0\n    for i in numbers:\n        if i > closest:\n            closest = i\n            index = i\n    return closest, index", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_ = float('inf')\n    max_ = float('nan')\n    for n in numbers:\n        min_ = min(min_, n)\n        max_ = max(max_, n)\n    return min_, max_", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest = min(numbers)\n    second_closest = max(numbers)\n    while closest > second_closest:\n        closest = closest - 1\n        second_closest = second_closest + 1\n    return closest, second_closest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    left = []\n    right = []\n    nearest = None\n    last = None\n    for number in numbers:\n        if number!= last:\n            left.append(number)\n            right.append(number)\n            last = number\n    if len(left) < 2:\n        return left, right\n    for number in sorted(left):\n        if number == nearest:\n            nearest = None\n            continue\n        if number == last:\n            left.remove(number)\n            last = None\n            continue\n        if number > nearest:\n            right.append(number)\n            nearest = number\n    if len(left) < 2:\n        return left, right\n    for number in sorted(left):\n        if number == nearest:\n            nearest = None\n            continue\n        if number == last:\n            left.remove(number)\n            last = None\n            continue\n        if number < nearest:\n            right.append(number)\n            nearest = number\n    if len(left) < 2:\n        return left, right\n    return left, right", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    distances = [_[0] - _[1] for _ in numbers]\n    sorted_distances = sorted(distances, key=lambda _: _[0])\n    dists = sorted_distances\n    distances = [numpy.abs(d - dists[-1]) for d in distances]\n    # We want the two closest, so if the last distance is closer than the two closest,\n    # then pick the smallest number.\n    # Pick the two closest, else pick the two with the smallest distance to the closest\n    closest_indices = [(max(dists[:-1]), min(dists[1:])) for d in distances]\n    if len(distances) == 1 and distances[-1] == distances[-1]:\n        return (distances[closest_indices[0]], distances[closest_indices[1]])\n    elif len(distances) == 1 and distances[0] == distances[0]:\n        return (distances[closest_indices[0]], distances[closest_indices[1]])\n    else:\n        return (distances[closest_indices[0]], distances[closest_indices[1]])", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    len(numbers) > 2\n\n    x, y = numbers[0], numbers[-1]\n\n    if x!= y and x <= y:\n        x, y = y, x\n\n    return x, y", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # try finding closest two (finds the first and the last of the list)\n    temp = []\n    for element in numbers:\n        if element < numbers[0]:\n            temp.append(element)\n        else:\n            temp.append(numbers[-1])\n\n    # find the middle number\n    middle = min(temp)\n    middle = max(temp)\n    middle = numbers[middle]\n\n    return middle, middle", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    for i in range(len(numbers)):\n        if numbers[i] == numbers[i + 1]:\n            continue\n        if abs(numbers[i] - numbers[i + 1]) < 1:\n            return numbers[i], numbers[i + 1]\n    return None", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_1 = float(\"inf\")\n    closest_2 = float(\"inf\")\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] < numbers[j]:\n                break\n            if numbers[i] > numbers[j]:\n                closest_1 = numbers[i]\n                closest_2 = numbers[j]\n    return closest_1, closest_2\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    left = numbers[0]\n    right = numbers[-1]\n    if left == right:\n        return (left, right)\n\n    dist = (right - left)\n    if dist == 0:\n        return (left, right)\n\n    for i in range(1, len(numbers)):\n        dist = (numbers[i] - left)\n        if dist < dist:\n            left = numbers[i]\n            right = numbers[i]\n\n    return (left, right)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Define two vectors to hold the closest numbers\n    left_vector = [int(x) for x in range(len(numbers)) if numbers[x] <= numbers[int(x) - 1]]\n    right_vector = [int(x) for x in range(len(numbers)) if numbers[x] > numbers[int(x) - 1]]\n    # Try to find the smallest vector that includes the others\n    left_vector.sort()\n    right_vector.sort()\n    # We can now return the closest ones in order\n    return min(left_vector), max(right_vector)\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    sorted_list = sorted(numbers, reverse=False)\n\n    if len(sorted_list) == 0:\n        return None, None\n\n    closest_num = sorted_list[0]\n    closest_abs = abs(closest_num - numbers[0])\n    for num in sorted_list[1:-1]:\n        if abs(num - closest_abs) < abs(num - closest_num):\n            closest_num = num\n            closest_abs = abs(num - closest_num)\n\n    return closest_num, closest_abs", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # We need a set of distances, we'll use the Euclidean distance\n    # FIXME: Maybe we should use the Manhattan distance and not the\n    #        normalized one.\n    dist: Tuple[float] = ()\n    for num in numbers:\n        dist = (num - numbers[0]) ** 2\n    distances = dist\n    pairs = (distances, distances)\n    distances.reverse()\n    while pairs:\n        dist1, dist2 = pairs.pop()\n        if dist1 < dist2:\n            distances = dist2\n        else:\n            distances = dist1\n    return (distances[0], distances[-1])", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    midpoint = float(sum(numbers) / 2)\n    result = (numbers[0], numbers[-1])\n\n    while midpoint > numbers[0]:\n        result += (numbers[0], numbers[-1])\n        numbers.pop(0)\n    while midpoint < numbers[-1]:\n        result += (numbers[-1:], numbers[0])\n        numbers.pop(-1)\n    return result", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    mid = min(numbers) + 1\n    pairs = []\n    for i in range(2, len(numbers), 2):\n        num, denom = numbers[i:i + 1]\n        pairs.append((num - mid, num + mid))\n        if denom:\n            pairs.append((mid, num + mid - denom))\n    if not pairs:\n        return None, (mid - 1.0, mid + 1.0)\n    return min(pairs), max(pairs)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    dists = [list(numbers) + list(numbers[:2])]\n    for num in numbers:\n        for d in dists:\n            if d[0] <= num <= d[1]:\n                break\n        else:\n            dists.append(d)\n            break\n    return dists[0], dists[1]", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    dists = [(n, n) for n in numbers]\n    result = max(dists)\n    return sorted(dists, key=lambda dist: dist[1] - result, reverse=True)[-1][2], result", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    nums.sort()\n    return min(nums, key=lambda num: num ** 2 / nums.count(num), reverse=True)", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    minimum = -1.0\n    maximum = 1.0\n    sum = 0.0\n    for number in numbers:\n        if number < minimum:\n            minimum = number\n        if number > maximum:\n            maximum = number\n        sum += number\n\n    if sum < minimum:\n        minimum = sum\n    if sum > maximum:\n        maximum = sum\n\n    return minimum, maximum", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    closest_pair = (0., 0.0)\n    smallest = float('nan')\n    biggest = float('nan')\n\n    for number in numbers:\n        if number < smallest:\n            smallest = number\n        if number > biggest:\n            biggest = number\n\n    return closest_pair, biggest", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    # The number of elements in numbers is less than 2, so this is a full search\n    numbers = list(numbers)\n    best_closest = numbers[-1]\n    best_dist = float('nan')\n    for i in range(len(numbers) - 1):\n        dist = abs(numbers[i] - numbers[i + 1])\n        if dist < best_dist:\n            best_dist = dist\n            best_closest = numbers[i]\n    return best_closest, best_dist\n</s>", "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_index, min_value = 0, 0\n    max_index, max_value = len(numbers), len(numbers) - 1\n    for index in range(min_index, max_index + 1):\n        if numbers[index] < numbers[index + 1]:\n            min_index = index\n            min_value = numbers[index]\n        else:\n            max_index = index\n            max_value = numbers[index]\n\n    return min_index, min_value"]]