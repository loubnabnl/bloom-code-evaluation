[["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    # return list of tuples, [(row, columns)]\n    return [(row, [column for column in sorted_rows[-1]]) for row in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates of the row by columns in descending order.\n    sorted_rows = sorted(lst, key=lambda x: x[1], reverse=True)\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows = [(x[0], x[1]) for x in sorted_rows]\n    # Sort coordinates of the row by rows in ascending order.\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    sorted_rows = [(x[1], x[0]) for x in sorted_rows]\n    # Return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    sorted_rows = sorted(lst, key=lambda x: x[0])\n    sorted_rows.sort(key=lambda x: x[1])\n    sorted_rows.reverse()\n    sorted_rows.reverse()\n    sorted_rows.reverse()\n    sorted_rows.reverse()\n    sorted_rows.reverse()\n    sorted_rows.reverse()\n    sorted_rows.reverse()\n    sorted_rows.reverse()\n    sorted_rows.reverse()\n    sorted_rows.reverse()\n    sorted_rows.reverse()\n    sorted_rows.reverse()\n    sorted_rows.reverse()\n    sorted_rows.reverse()\n    sorted_rows.reverse()\n    sorted_rows.reverse()\n    sorted_rows.reverse()\n    sorted_rows.reverse()\n    sorted_rows.reverse()\n    sorted_rows.reverse()\n    sorted_rows.reverse()\n    sorted_rows.reverse()\n    sorted_rows.reverse()\n    sorted_rows.reverse()\n    sorted_rows.reverse()\n    sorted_rows.reverse()\n    sorted_rows.reverse()\n    sorted_rows.reverse()\n    sorted_rows.reverse()\n    sorted_rows.reverse()\n    sorted_rows.reverse()\n    sorted_rows.reverse()\n    sorted_rows.reverse()\n    sorted_rows.reverse()", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0]\n    if len(lst) == 3:\n        return lst[0]\n    if len(lst) == 4:\n        return lst[0]\n    if len(lst) == 5:\n        return lst[0]\n    if len(lst) == 6:\n        return lst[0]\n    if len(lst) == 7:\n        return lst[0]\n    if len(lst) == 8:\n        return lst[0]\n    if len(lst) == 9:\n        return lst[0]\n    if len(lst) == 10:\n        return lst[0]\n    if len(lst) == 11:\n        return lst[0]\n    if len(lst) == 12:\n        return lst[0]\n    if len(lst) == 13:\n        return lst[0]\n    if len(lst) == 14:\n        return lst[0]\n    if len(lst) == 15:\n        return lst[0]\n    if len(lst) == 16:\n        return lst[0]\n    if len(lst) == 17:\n        return lst[0]\n    if len(lst) == 18:\n        return lst[0]\n    if len(lst) == 19:\n        return lst[0]\n    if len(lst) == 20:\n        return lst[0]\n    if len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort by rows\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    # sort by columns\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # get the first row\n    row = lst[0]\n    # get the first column\n    col = lst[1]\n    # get the rest of the rows\n    rows = [get_row(lst, x) for x in range(2, len(lst), 2)]\n    # get the rest of the columns\n    cols = [get_row(lst, x) for x in range(2, len(lst), 1)]\n    # return the coordinates\n    return [(row, col), (row, col + 1), (row + 1, col), (row + 1, col + 1)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0]\n    if len(lst) == 3:\n        return lst[0]\n    if len(lst) == 4:\n        return lst[0]\n    if len(lst) == 5:\n        return lst[0]\n    if len(lst) == 6:\n        return lst[0]\n    if len(lst) == 7:\n        return lst[0]\n    if len(lst) == 8:\n        return lst[0]\n    if len(lst) == 9:\n        return lst[0]\n    if len(lst) == 10:\n        return lst[0]\n    if len(lst) == 11:\n        return lst[0]\n    if len(lst) == 12:\n        return lst[0]\n    if len(lst) == 13:\n        return lst[0]\n    if len(lst) == 14:\n        return lst[0]\n    if len(lst) == 15:\n        return lst[0]\n    if len(lst) == 16:\n        return lst[0]\n    if len(lst) == 17:\n        return lst[0]\n    if len(lst) == 18:\n        return lst[0]\n    if len(lst) == 19:\n        return lst[0]\n    if len(lst) == 20:\n        return lst[0]\n    if len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows.reverse()\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    sorted_rows.reverse()\n    # return the coordinates of the row\n    return [(x[0], x[1]) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return [get_row(lst[1:], x) for x in lst[0]]\n    if len(lst) == 3:\n        return [get_row(lst[1:], x) for x in lst[0]]\n    if len(lst) == 4:\n        return [get_row(lst[1:], x) for x in lst[0]]\n    if len(lst) == 5:\n        return [get_row(lst[1:], x) for x in lst[0]]\n    if len(lst) == 6:\n        return [get_row(lst[1:], x) for x in lst[0]]\n    raise ValueError(\"Input list must be of length 2 or greater\")", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return lst\n    if x < 0:\n        return get_row(lst[1:], x - 1)\n    if x > len(lst):\n        return get_row(lst[:-1], x + 1)\n    return get_row(lst[:x], x - 1) + get_row(lst[x:], x + 1)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[1], reverse=True)\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    # Sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    # Return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return [get_row(lst[1:], x) for x in range(len(lst[0]))]\n    if len(lst) == 3:\n        return [get_row(lst[1:], x) for x in range(len(lst[0]))]\n    if len(lst) == 4:\n        return [get_row(lst[1:], x) for x in range(len(lst[0]))]\n    if len(lst) == 5:\n        return [get_row(lst[1:], x) for x in range(len(lst[0]))]\n    if len(lst) == 6:\n        return [get_row(lst[1:], x) for x in range(len(lst[0]))]\n    if len(lst) == 7:\n        return [get_row(lst[1:], x) for x in range(len(lst[0]))]\n    if len(lst) == 8:\n        return [get_row(lst[1:], x) for x in range(len(lst[0]))]\n    if len(lst) == 9:\n        return [get_row(lst[1:], x) for x in range", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates of the row by columns in descending order.\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # Sort coordinates of the row by rows in ascending order.\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    # Return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return lst\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x < len(lst):\n        return lst[x:]\n    return [(get_row(lst[x], x - 1), get_row(lst[x], x + 1)) for x in range(x - 1, x + 1)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort the list by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0])\n    # Sort the list by columns in descending order\n    lst = sorted(lst, key=lambda x: x[1])\n    # Get the coordinates of the row\n    row = lst[0]\n    # Get the coordinates of the column\n    col = lst[1]\n    # Get the coordinates of the row\n    row = row[0]\n    # Get the coordinates of the column\n    col = col[0]\n    # Get the coordinates of the row\n    row = row[1]\n    # Get the coordinates of the column\n    col = col[1]\n    # Get the coordinates of the row\n    row = row[0]\n    # Get the coordinates of the column\n    col = col[0]\n    # Get the coordinates of the row\n    row = row[1]\n    # Get the coordinates of the column\n    col = col[1]\n    # Get the coordinates of the row\n    row = row[0]\n    # Get the coordinates of the column\n    col = col[0]\n    # Get the coordinates of the row\n    row = row[1]\n    # Get the coordinates of the column\n    col = col[1]\n    # Get the coordinates of the row\n    row = row[0]\n    # Get the coordinates of the column\n    col = col[0]\n    #", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return [get_row(lst[1:], x) for x in lst[0]]\n    if len(lst) == 3:\n        return [get_row(lst[1:], x) for x in lst[0]]\n    if len(lst) == 4:\n        return [get_row(lst[1:], x) for x in lst[0]]\n    if len(lst) == 5:\n        return [get_row(lst[1:], x) for x in lst[0]]\n    if len(lst) == 6:\n        return [get_row(lst[1:], x) for x in lst[0]]\n    return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0]\n    if len(lst) == 3:\n        return lst[0]\n    if len(lst) == 4:\n        return lst[0]\n    if len(lst) == 5:\n        return lst[0]\n    if len(lst) == 6:\n        return lst[0]\n    if len(lst) == 7:\n        return lst[0]\n    if len(lst) == 8:\n        return lst[0]\n    if len(lst) == 9:\n        return lst[0]\n    if len(lst) == 10:\n        return lst[0]\n    if len(lst) == 11:\n        return lst[0]\n    if len(lst) == 12:\n        return lst[0]\n    if len(lst) == 13:\n        return lst[0]\n    if len(lst) == 14:\n        return lst[0]\n    if len(lst) == 15:\n        return lst[0]\n    if len(lst) == 16:\n        return lst[0]\n    if len(lst) == 17:\n        return lst[0]\n    if len(lst) == 18:\n        return lst[0]\n    if len(lst) == 19:\n        return lst[0]\n    if len(lst) == 20:\n        return lst[0]\n    if len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[1], reverse=True)\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows.reverse()\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows = sorted(sorted_rows, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows.reverse()\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort rows by rows\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    # sort rows by columns\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # sort coordinates by rows\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    # sort coordinates by columns\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # return tuples\n    return [(get_row(lst, x), get_row(lst, x[1:])) for x in range(len(lst))]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # Sort by columns\n    lst = sorted(lst, key=lambda x: x[1])\n    # Return list of tuples\n    return [(x[0], x[1]) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[1], reverse=True)\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows.reverse()\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    sorted_rows.reverse()\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows.reverse()\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    sorted_rows.reverse()\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(get_row(row, x), get_row(row, x + 1)) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates of the row by columns in descending order.\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    # Sort coordinates of the row by rows in ascending order.\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    # Return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(get_row(row, x), get_row(row, x + 1)) for row in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[1], reverse=True)\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    # Sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    # Return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0]\n    if len(lst) == 3:\n        return lst[0]\n    if len(lst) == 4:\n        return lst[0]\n    if len(lst) == 5:\n        return lst[0]\n    if len(lst) == 6:\n        return lst[0]\n    if len(lst) == 7:\n        return lst[0]\n    if len(lst) == 8:\n        return lst[0]\n    if len(lst) == 9:\n        return lst[0]\n    if len(lst) == 10:\n        return lst[0]\n    if len(lst) == 11:\n        return lst[0]\n    if len(lst) == 12:\n        return lst[0]\n    if len(lst) == 13:\n        return lst[0]\n    if len(lst) == 14:\n        return lst[0]\n    if len(lst) == 15:\n        return lst[0]\n    if len(lst) == 16:\n        return lst[0]\n    if len(lst) == 17:\n        return lst[0]\n    if len(lst) == 18:\n        return lst[0]\n    if len(lst) == 19:\n        return lst[0]\n    if len(lst) == 20:\n        return lst[0]\n    if len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(x, 0) for x in lst]\n    if len(lst) == 2:\n        return [(get_row(lst[1:], x), get_row(lst[:-1], x)) for x in lst]\n    if len(lst) == 3:\n        return [(get_row(lst[1:], x), get_row(lst[:-1], x), get_row(lst[:-2], x)) for x in lst]\n    if len(lst) == 4:\n        return [(get_row(lst[1:], x), get_row(lst[:-1], x), get_row(lst[:-2], x), get_row(lst[:-3], x)) for x in lst]\n    return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates by rows in ascending order.\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.reverse()\n    # Sort coordinates of the row by columns in descending order.\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    # Return the coordinates of the row.\n    return [(row, col) for row, col in zip(sorted_rows, sorted_rows[1:])]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0]\n    if len(lst) == 3:\n        return lst[0]\n    if len(lst) == 4:\n        return lst[0]\n    if len(lst) == 5:\n        return lst[0]\n    if len(lst) == 6:\n        return lst[0]\n    if len(lst) == 7:\n        return lst[0]\n    if len(lst) == 8:\n        return lst[0]\n    if len(lst) == 9:\n        return lst[0]\n    if len(lst) == 10:\n        return lst[0]\n    if len(lst) == 11:\n        return lst[0]\n    if len(lst) == 12:\n        return lst[0]\n    if len(lst) == 13:\n        return lst[0]\n    if len(lst) == 14:\n        return lst[0]\n    if len(lst) == 15:\n        return lst[0]\n    if len(lst) == 16:\n        return lst[0]\n    if len(lst) == 17:\n        return lst[0]\n    if len(lst) == 18:\n        return lst[0]\n    if len(lst) == 19:\n        return lst[0]\n    if len(lst) == 20:\n        return lst[0]\n    if len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 1:\n        return [(lst[0][0], lst[0][1])]\n    if len(lst[0]) == 2:\n        return [(lst[0][0], lst[0][1]), (lst[0][2], lst[0][3])]\n    if len(lst[0]) == 3:\n        return [(lst[0][0], lst[0][1]), (lst[0][2], lst[0][3]), (lst[0][4], lst[0][5])]\n    if len(lst[0]) == 4:\n        return [(lst[0][0], lst[0][1]), (lst[0][2], lst[0][3]), (lst[0][4], lst[0][5]), (lst[0][6], lst[0][7])]\n    if len(lst[0]) == 5:\n        return [(lst[0][0], lst[0][1]), (lst[0][2], lst[0][3]), (lst[0][4], lst[0][5]), (lst[0][6], lst[0][7]), (lst[0][8], lst[0][9])]\n    if len(lst[0]) == 6:\n        return [(lst[0][0], lst[0][1]), (lst[0][2], lst[0][3]), (lst[0][4], lst[0][5]), (lst[0][6], lst[0][7]), (lst[0][8],", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates by rows in ascending order\n    sorted_rows = sorted(lst, key=lambda x: x[0])\n    sorted_rows.reverse()\n    # Sort coordinates of the row by columns in descending order\n    sorted_rows.sort(key=lambda x: x[1])\n    # Return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(get_row(lst, x), get_row(lst, x + 1)) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort rows by rows\n    rows = sorted(lst, key=lambda x: x[0])\n    # sort rows by columns\n    rows = sorted(rows, key=lambda x: x[1])\n    # sort rows by rows\n    rows = sorted(rows, key=lambda x: x[0])\n    # sort rows by columns\n    rows = sorted(rows, key=lambda x: x[1])\n    # sort rows by rows\n    rows = sorted(rows, key=lambda x: x[0])\n    # sort rows by columns\n    rows = sorted(rows, key=lambda x: x[1])\n    # sort rows by rows\n    rows = sorted(rows, key=lambda x: x[0])\n    # sort rows by columns\n    rows = sorted(rows, key=lambda x: x[1])\n    # sort rows by rows\n    rows = sorted(rows, key=lambda x: x[0])\n    # sort rows by columns\n    rows = sorted(rows, key=lambda x: x[1])\n    # sort rows by rows\n    rows = sorted(rows, key=lambda x: x[0])\n    # sort rows by columns\n    rows = sorted(rows, key=lambda x: x[1])\n    # sort rows by rows\n    rows = sorted(rows, key=lambda x: x[0])\n    # sort rows by columns\n    rows =", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0]\n    if len(lst) == 3:\n        return lst[0]\n    if len(lst) == 4:\n        return lst[0]\n    if len(lst) == 5:\n        return lst[0]\n    if len(lst) == 6:\n        return lst[0]\n    if len(lst) == 7:\n        return lst[0]\n    if len(lst) == 8:\n        return lst[0]\n    if len(lst) == 9:\n        return lst[0]\n    if len(lst) == 10:\n        return lst[0]\n    if len(lst) == 11:\n        return lst[0]\n    if len(lst) == 12:\n        return lst[0]\n    if len(lst) == 13:\n        return lst[0]\n    if len(lst) == 14:\n        return lst[0]\n    if len(lst) == 15:\n        return lst[0]\n    if len(lst) == 16:\n        return lst[0]\n    if len(lst) == 17:\n        return lst[0]\n    if len(lst) == 18:\n        return lst[0]\n    if len(lst) == 19:\n        return lst[0]\n    if len(lst) == 20:\n        return lst[0]\n    if len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst\n    if len(lst) == 3:\n        return [get_row(lst[1:], x) for x in lst[0]]\n    return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates by rows in ascending order\n    sorted_rows = sorted(lst, key=lambda x: x[0])\n    sorted_rows.reverse()\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    # sort coordinates of the row by columns in descending order\n    sorted_rows.sort(key=lambda x: x[1])\n    return [(row, col) for row, col in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates of the row by columns in descending order.\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    # Sort coordinates of the row by rows in ascending order.\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    sorted_rows.sort(key=lambda x: x[1], reverse=False)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    sorted_rows.sort(key=lambda x: x[1], reverse=False)\n    # Return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(row, col) for row, col in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[1], reverse=True)\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    # find coordinates of the row by x\n    row_coords = [(x[0], x[1]) for x in sorted_rows]\n    # return the coordinates of the row\n    return row_coords", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0])\n    # Sort coordinates of the row by columns in descending order\n    lst = sorted(lst, key=lambda x: x[1])\n    # Return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(get_row(lst, x), get_row(lst, x + 1)) for x in range(0, len(lst), 2)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort rows by rows in ascending order\n    rows = sorted(lst, key=lambda x: x[0])\n    # sort rows by columns in descending order\n    rows = sorted(rows, key=lambda x: x[1])\n    # find x in rows\n    x = 0\n    for row in rows:\n        for col in row:\n            if col == x:\n                return [(row[x], col)]\n            x += 1\n    return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows = [(x[0], x[1]) for x in sorted_rows]\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    sorted_rows.sort(key=lambda x: x[1], reverse=False)\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows = [(x[0], x[1]) for x in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows = [(x[0], x[1]) for x in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows = [(x[0], x[1]) for x in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows = [(x[0], x[1]) for x in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows = [(x[0], x[1]) for x in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows = [(x[0], x[1]) for x in sorted_rows]\n    sorted_rows.sort(key=lambda", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    # find the coordinates of the row\n    row_coords = []\n    for row in sorted_rows:\n        row_coords.append(get_row(row, x))\n    return row_coords", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[1], reverse=True)\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    # find the row with the given coordinate\n    for row in sorted_rows:\n        if x in row[0]:\n            return row\n    return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates of the row by columns in descending order.\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows = [(x[0], x[1]) for x in sorted_rows]\n    # Sort coordinates of the row by rows in ascending order.\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    sorted_rows.sort(key=lambda x: x[1], reverse=False)\n    # Return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return [get_row(lst[1:], x) for x in xrange(0, len(lst[0]))]\n    if len(lst) == 3:\n        return [get_row(lst[1:], x) for x in xrange(0, len(lst[0])) for y in xrange(0, len(lst[1]))]\n    if len(lst) == 4:\n        return [get_row(lst[1:], x) for x in xrange(0, len(lst[0])) for y in xrange(0, len(lst[1])) for z in xrange(0, len(lst[2]))]\n    if len(lst) == 5:\n        return [get_row(lst[1:], x) for x in xrange(0, len(lst[0])) for y in xrange(0, len(lst[1])) for z in xrange(0, len(lst[2])) for w in xrange(0, len(lst[3]))]\n    if len(lst) == 6:\n        return [get_row(lst[1:], x) for x in x", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst\n    if len(lst) == 3:\n        return get_row(lst, 1)\n    if len(lst) == 4:\n        return get_row(lst, 2)\n    if len(lst) == 5:\n        return get_row(lst, 3)\n    if len(lst) == 6:\n        return get_row(lst, 4)\n    raise ValueError(\"Invalid input\")", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # sort coordinates of the row by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort rows by rows in ascending order\n    sorted_rows = sorted(lst, key=lambda x: x[0])\n    sorted_rows.reverse()\n    # sort rows by columns in descending order\n    sorted_rows.sort(key=lambda x: x[1])\n    # return list of tuples\n    return [(get_row(row, x), get_row(row, x+1)) for row in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort coordinates of the row by columns in descending order\n    lst = sorted(lst, key=lambda x: x[1])\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort rows by rows in ascending order\n    rows = sorted(lst, key=lambda x: x[0])\n    rows = [row for row in rows if len(row) > 0]\n    rows = [row for row in rows if len(row) > 0]\n    rows = [row for row in rows if len(row) > 0]\n    rows = [row for row in rows if len(row) > 0]\n    rows = [row for row in rows if len(row) > 0]\n    rows = [row for row in rows if len(row) > 0]\n    rows = [row for row in rows if len(row) > 0]\n    rows = [row for row in rows if len(row) > 0]\n    rows = [row for row in rows if len(row) > 0]\n    rows = [row for row in rows if len(row) > 0]\n    rows = [row for row in rows if len(row) > 0]\n    rows = [row for row in rows if len(row) > 0]\n    rows = [row for row in rows if len(row) > 0]\n    rows = [row for row in rows if len(row) > 0]\n    rows = [row for row in rows if", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows.reverse()\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    sorted_rows.reverse()\n    # return the list of tuples\n    return [(get_row(row, x), get_row(row, x+1)) for row in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates of the row by columns in descending order.\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sort", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(get_row(row, x), get_row(row, x + 1)) for row in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort coordinates of the row by columns in descending order\n    lst = sorted(lst, key=lambda x: x[1])\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst\n    if len(lst) == 3:\n        return lst[0]\n    if len(lst) == 4:\n        return lst[0]\n    if len(lst) == 5:\n        return lst[0]\n    if len(lst) == 6:\n        return lst[0]\n    if len(lst) == 7:\n        return lst[0]\n    if len(lst) == 8:\n        return lst[0]\n    if len(lst) == 9:\n        return lst[0]\n    if len(lst) == 10:\n        return lst[0]\n    if len(lst) == 11:\n        return lst[0]\n    if len(lst) == 12:\n        return lst[0]\n    if len(lst) == 13:\n        return lst[0]\n    if len(lst) == 14:\n        return lst[0]\n    if len(lst) == 15:\n        return lst[0]\n    if len(lst) == 16:\n        return lst[0]\n    if len(lst) == 17:\n        return lst[0]\n    if len(lst) == 18:\n        return lst[0]\n    if len(lst) == 19:\n        return lst[0]\n    if len(lst) == 20:\n        return lst[0]\n    if len(lst)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort coordinates of the row by columns in descending order\n    lst = sorted(lst, key=lambda x: x[1])\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(get_row(lst, x), get_row(lst, x + 1)) for x in range(0, len(lst), 2)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(x, y) for x, y in lst]\n    if len(lst) == 2:\n        return [(x, y) for x, y in lst]\n    if len(lst) == 3:\n        return [(x, y) for x, y in lst]\n    if len(lst) == 4:\n        return [(x, y) for x, y in lst]\n    if len(lst) == 5:\n        return [(x, y) for x, y in lst]\n    if len(lst) == 6:\n        return [(x, y) for x, y in lst]\n    raise ValueError(\"Input list must be of length 2 or greater\")", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[1], reverse=True)\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows = [(x[0], x[1]) for x in sorted_rows]\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    sorted_rows = [(x[1], x[0]) for x in sorted_rows]\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0]\n    if len(lst) == 3:\n        return lst[0]\n    if len(lst) == 4:\n        return lst[0]\n    if len(lst) == 5:\n        return lst[0]\n    if len(lst) == 6:\n        return lst[0]\n    if len(lst) == 7:\n        return lst[0]\n    if len(lst) == 8:\n        return lst[0]\n    if len(lst) == 9:\n        return lst[0]\n    if len(lst) == 10:\n        return lst[0]\n    if len(lst) == 11:\n        return lst[0]\n    if len(lst) == 12:\n        return lst[0]\n    if len(lst) == 13:\n        return lst[0]\n    if len(lst) == 14:\n        return lst[0]\n    if len(lst) == 15:\n        return lst[0]\n    if len(lst) == 16:\n        return lst[0]\n    if len(lst) == 17:\n        return lst[0]\n    if len(lst) == 18:\n        return lst[0]\n    if len(lst) == 19:\n        return lst[0]\n    if len(lst) == 20:\n        return lst[0]\n    if len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates of the row by columns in descending order.\n    sorted_rows = sorted(lst, key=lambda x: x[1], reverse=True)\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    # Sort coordinates of the row by rows in ascending order.\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    # Return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[1], reverse=True)\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(row, col) for row, col in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort coordinates of the row by columns in descending order\n    lst = sorted(lst, key=lambda x: x[1])\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0\n    return [(get_row(lst, x), get_row(lst, x + 1)) for x in range(0, len(lst), 2)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return [(get_row(lst[1:], x), get_row(lst[:-1], x)) for x in xrange(len(lst))]\n    if len(lst) == 3:\n        return [(get_row(lst[1:], x), get_row(lst[:-1], x), get_row(lst[:-2], x)) for x in xrange(len(lst))]\n    return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates of the row by columns in descending order.\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # Sort coordinates of the row by rows in ascending order.\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    # Return the coordinates of the row.\n    return [(x[0], x[1]) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[1], reverse=True)\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows.reverse()\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    sorted_rows.reverse()\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates by rows in ascending order\n    sorted_rows = sorted(lst, key=lambda x: x[0])\n    sorted_rows.reverse()\n    # sort coordinates of the row by columns in descending order\n    sorted_rows.sort(key=lambda x: x[1])\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(get_row(row, x), get_row(row, x + 1)) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort rows by rows\n    rows = sorted(lst, key=lambda x: x[0])\n    # sort rows by columns\n    rows = sorted(rows, key=lambda x: x[1])\n    # sort coordinates by rows\n    rows = sorted(rows, key=lambda x: x[0])\n    # sort coordinates by columns\n    rows = sorted(rows, key=lambda x: x[1])\n    # return tuples\n    return [(row, col) for row, col in zip(rows, rows) if col > 0]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates of the row by columns in descending order.\n    sorted_rows = sorted(lst, key=lambda x: x[0])\n    sorted_rows.sort(key=lambda x: x[1])\n    sorted_rows.reverse()\n    # Sort coordinates of the row by rows in ascending order.\n    sorted_rows.sort(key=lambda x: x[0])\n    sorted_rows.reverse()\n    # Return list of tuples, [(row, columns), starting with 0.\n    return [(get_row(row, x), get_row(row, x + 1)) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort by columns\n    lst = sorted(lst, key=lambda x: x[1])\n    # return tuples\n    return [(get_row(lst, x), get_row(lst, x+1)) for x in range(2, len(lst)+1)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates by rows in ascending order\n    sorted_rows = sorted(lst, key=lambda x: x[0])\n    sorted_rows.reverse()\n    # sort coordinates of the row by columns in descending order\n    sorted_rows.sort(key=lambda x: x[1])\n    # return the coordinates of the row\n    return [(x[0], x[1]) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0]\n    if len(lst) == 3:\n        return lst[0]\n    if len(lst) == 4:\n        return lst[0]\n    if len(lst) == 5:\n        return lst[0]\n    if len(lst) == 6:\n        return lst[0]\n    if len(lst) == 7:\n        return lst[0]\n    if len(lst) == 8:\n        return lst[0]\n    if len(lst) == 9:\n        return lst[0]\n    if len(lst) == 10:\n        return lst[0]\n    if len(lst) == 11:\n        return lst[0]\n    if len(lst) == 12:\n        return lst[0]\n    if len(lst) == 13:\n        return lst[0]\n    if len(lst) == 14:\n        return lst[0]\n    if len(lst) == 15:\n        return lst[0]\n    if len(lst) == 16:\n        return lst[0]\n    if len(lst) == 17:\n        return lst[0]\n    if len(lst) == 18:\n        return lst[0]\n    if len(lst) == 19:\n        return lst[0]\n    if len(lst) == 20:\n        return lst[0]\n    if len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return get_row(lst, 1)\n    if len(lst) == 3:\n        return get_row(lst, 2)\n    if len(lst) == 4:\n        return get_row(lst, 3)\n    raise ValueError(\"Input list is not 2 dimensional\")", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if x == 0:\n        return lst\n    if x == len(lst):\n        return lst\n    if x < 0:\n        return lst\n    if x > len(lst):\n        return lst\n    if x == 1:\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len(lst):\n        return lst\n    if x == len", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort rows by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    # sort rows by columns in descending order\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # get the coordinates of the row\n    row = lst[0]\n    # get the coordinates of the column\n    col = lst[1]\n    # get the coordinates of the row\n    row = row[0]\n    # get the coordinates of the column\n    col = col[0]\n    # get the coordinates of the row\n    row = row[1]\n    # get the coordinates of the column\n    col = col[1]\n    # get the coordinates of the row\n    row = row[0]\n    # get the coordinates of the column\n    col = col[0]\n    # get the coordinates of the row\n    row = row[1]\n    # get the coordinates of the column\n    col = col[1]\n    # get the coordinates of the row\n    row = row[0]\n    # get the coordinates of the column\n    col = col[0]\n    # get the coordinates of the row\n    row = row[1]\n    # get the coordinates of the column\n    col = col[1]\n    # get the coordinates of the row\n    row = row[0]\n    # get the coordinates of the column\n    col =", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort rows by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    # sort rows by columns in descending order\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # find the first row with x\n    for row in lst:\n        if x in row:\n            return row\n    return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows = [(x[0], x[1]) for x in sorted_rows]\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    sorted_rows.sort(key=lambda x: x[1], reverse=False)\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0]\n    if len(lst) == 3:\n        return lst[0]\n    if len(lst) == 4:\n        return lst[0]\n    if len(lst) == 5:\n        return lst[0]\n    if len(lst) == 6:\n        return lst[0]\n    if len(lst) == 7:\n        return lst[0]\n    if len(lst) == 8:\n        return lst[0]\n    if len(lst) == 9:\n        return lst[0]\n    if len(lst) == 10:\n        return lst[0]\n    if len(lst) == 11:\n        return lst[0]\n    if len(lst) == 12:\n        return lst[0]\n    if len(lst) == 13:\n        return lst[0]\n    if len(lst) == 14:\n        return lst[0]\n    if len(lst) == 15:\n        return lst[0]\n    if len(lst) == 16:\n        return lst[0]\n    if len(lst) == 17:\n        return lst[0]\n    if len(lst) == 18:\n        return lst[0]\n    if len(lst) == 19:\n        return lst[0]\n    if len(lst) == 20:\n        return lst[0]\n    if len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0]\n    if len(lst) == 3:\n        return lst[0]\n    if len(lst) == 4:\n        return lst[0]\n    if len(lst) == 5:\n        return lst[0]\n    if len(lst) == 6:\n        return lst[0]\n    if len(lst) == 7:\n        return lst[0]\n    if len(lst) == 8:\n        return lst[0]\n    if len(lst) == 9:\n        return lst[0]\n    if len(lst) == 10:\n        return lst[0]\n    if len(lst) == 11:\n        return lst[0]\n    if len(lst) == 12:\n        return lst[0]\n    if len(lst) == 13:\n        return lst[0]\n    if len(lst) == 14:\n        return lst[0]\n    if len(lst) == 15:\n        return lst[0]\n    if len(lst) == 16:\n        return lst[0]\n    if len(lst) == 17:\n        return lst[0]\n    if len(lst) == 18:\n        return lst[0]\n    if len(lst) == 19:\n        return lst[0]\n    if len(lst) == 20:\n        return lst[0]\n    if len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0]\n    if len(lst) == 3:\n        return lst[0]\n    if len(lst) == 4:\n        return lst[0]\n    if len(lst) == 5:\n        return lst[0]\n    if len(lst) == 6:\n        return lst[0]\n    if len(lst) == 7:\n        return lst[0]\n    if len(lst) == 8:\n        return lst[0]\n    if len(lst) == 9:\n        return lst[0]\n    if len(lst) == 10:\n        return lst[0]\n    if len(lst) == 11:\n        return lst[0]\n    if len(lst) == 12:\n        return lst[0]\n    if len(lst) == 13:\n        return lst[0]\n    if len(lst) == 14:\n        return lst[0]\n    if len(lst) == 15:\n        return lst[0]\n    if len(lst) == 16:\n        return lst[0]\n    if len(lst) == 17:\n        return lst[0]\n    if len(lst) == 18:\n        return lst[0]\n    if len(lst) == 19:\n        return lst[0]\n    if len(lst) == 20:\n        return lst[0]\n    if len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort rows by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort rows by columns in descending order\n    lst = sorted(lst, key=lambda x: x[1])\n    # find coordinates of each row\n    row_coords = []\n    for row in lst:\n        row_coords.append(get_row(row, 0))\n    # sort coordinates of each row by rows in ascending order\n    row_coords = sorted(row_coords, key=lambda x: x[0])\n    # return list of tuples\n    return [(row_coords[i][0], row_coords[i][1]) for i in range(len(row_coords))]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[0])\n    sorted_rows.reverse()\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort()\n    # find coordinates of the row\n    row_coords = []\n    for row in sorted_rows:\n        row_coords.append(get_row(row, x))\n    return row_coords", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[1], reverse=True)\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(row, col) for row, col in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates of the row by columns in descending order.\n    sorted_rows = sorted(lst, key=lambda x: x[1], reverse=True)\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sort", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort rows by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort rows by columns in descending order\n    lst = sorted(lst, key=lambda x: x[1])\n    # find x in the list\n    for i in range(len(lst)):\n        if lst[i][0] == x:\n            return lst[i]\n    return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return [get_row(lst[1:], x) for x in xrange(len(lst[0]))]\n    if len(lst) == 3:\n        return [get_row(lst[1:], x) for x in xrange(len(lst[0])) for y in xrange(len(lst[1]))]\n    if len(lst) == 4:\n        return [get_row(lst[1:], x) for x in xrange(len(lst[0])) for y in xrange(len(lst[1])) for z in xrange(len(lst[2]))]\n    if len(lst) == 5:\n        return [get_row(lst[1:], x) for x in xrange(len(lst[0])) for y in xrange(len(lst[1])) for z in xrange(len(lst[2])) for w in xrange(len(lst[3]))]\n    if len(lst) == 6:\n        return [get_row(lst[1:], x) for x in xrange(len(lst[0])) for y in xrange(len(lst[1])) for z", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 1:\n        return [(x, y) for x, y in get_row(lst, 1)]\n    if len(lst[0]) == 2:\n        return [(x, y) for x, y in get_row(lst, 1)]\n    if len(lst[0]) == 3:\n        return [(x, y) for x, y in get_row(lst, 1)]\n    if len(lst[0]) == 4:\n        return [(x, y) for x, y in get_row(lst, 1)]\n    if len(lst[0]) == 5:\n        return [(x, y) for x, y in get_row(lst, 1)]\n    if len(lst[0]) == 6:\n        return [(x, y) for x, y in get_row(lst, 1)]\n    if len(lst[0]) == 7:\n        return [(x, y) for x, y in get_row(lst, 1)]\n    if len(lst[0]) == 8:\n        return [(x, y) for x, y in get_", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort by columns\n    lst = sorted(lst, key=lambda x: x[1])\n    # sort by rows\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    # sort by columns\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # sort by rows\n    lst = sorted(lst, key=lambda x: x[0], reverse=True, key=lambda x: x[1])\n    # sort by rows\n    lst = sorted(lst, key=lambda x: x[0], reverse=True, key=lambda x: x[1], key=lambda x: x[2])\n    # sort by columns\n    lst = sorted(lst, key=lambda x: x[1], reverse=True, key=lambda x: x[2])\n    # sort by rows\n    lst = sorted(lst, key=lambda x: x[0], reverse=True, key=lambda x: x[1], key=lambda x: x[2], key=lambda x: x[3])\n    # sort by columns\n    lst = sorted(lst, key=lambda x: x[1], reverse=True, key=lambda x: x[2], key=lambda x: x[3], key=lambda x: x[4])\n    # sort", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0]\n    if len(lst) == 3:\n        return lst[0]\n    if len(lst) == 4:\n        return lst[0]\n    if len(lst) == 5:\n        return lst[0]\n    if len(lst) == 6:\n        return lst[0]\n    if len(lst) == 7:\n        return lst[0]\n    if len(lst) == 8:\n        return lst[0]\n    if len(lst) == 9:\n        return lst[0]\n    if len(lst) == 10:\n        return lst[0]\n    if len(lst) == 11:\n        return lst[0]\n    if len(lst) == 12:\n        return lst[0]\n    if len(lst) == 13:\n        return lst[0]\n    if len(lst) == 14:\n        return lst[0]\n    if len(lst) == 15:\n        return lst[0]\n    if len(lst) == 16:\n        return lst[0]\n    if len(lst) == 17:\n        return lst[0]\n    if len(lst) == 18:\n        return lst[0]\n    if len(lst) == 19:\n        return lst[0]\n    if len(lst) == 20:\n        return lst[0]\n    if len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort coordinates of the row by columns in descending order\n    lst = sorted(lst, key=lambda x: x[1])\n    # find the x coordinate\n    x = 0\n    for i in range(len(lst)):\n        if lst[i][0] == x:\n            x = lst[i][1]\n    return [(x, lst[i][1]) for i in range(len(lst))]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort rows by rows\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    # sort rows by columns\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # sort coordinates by rows\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    # sort coordinates by columns\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # return tuples\n    return [(get_row(lst, x), get_row(lst, x+1)) for x in range(len(lst))]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates of the row by columns in descending order.\n    sorted_rows = sorted(lst, key=lambda x: x[1], reverse=True)\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows = [(x[0], x[1]) for x in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows = [(x[0], x[1]) for x in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows = [(x[0], x[1]) for x in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows = [(x[0], x[1]) for x in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows = [(x[0], x[1]) for x in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows = [(x[0], x[1]) for x in sorted_rows]\n    sorted_rows.sort(key=lambda", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    # sort coordinates of the row by columns in descending order\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0\n    return [(x[0], x[1]) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[1], reverse=True)\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows.reverse()\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    sorted_rows.reverse()\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0\n    return [(x[0], x[1]) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return [(get_row(lst[1:], x), get_row(lst[:-1], x)) for x in xrange(len(lst))]\n    if len(lst) == 3:\n        return [(get_row(lst[1:], x), get_row(lst[:-1], x), get_row(lst[:-2], x)) for x in xrange(len(lst))]\n    if len(lst) == 4:\n        return [(get_row(lst[1:], x), get_row(lst[:-1], x), get_row(lst[:-2], x), get_row(lst[:-3], x)) for x in xrange(len(lst))]\n    if len(lst) == 5:\n        return [(get_row(lst[1:], x), get_row(lst[:-1], x), get_row(lst[:-2], x), get_row(lst[:-3], x), get_row(lst[:-4], x)) for x in xrange(len(lst))]\n    if len(lst) == 6:\n        return [(get_row(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates of the row by columns in descending order.\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    # Sort coordinates of the row by rows in ascending order.\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    # Return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(get_row(row, x), get_row(row, x + 1)) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort the list by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    # Sort the list by columns in descending order\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # Find the coordinates of the row\n    row = lst[0]\n    row = [row]\n    # Find the coordinates of the column\n    col = lst[1]\n    col = [col]\n    # Find the coordinates of the row\n    row = [row]\n    # Find the coordinates of the column\n    col = [col]\n    # Find the coordinates of the row\n    row = [row]\n    # Find the coordinates of the column\n    col = [col]\n    # Find the coordinates of the row\n    row = [row]\n    # Find the coordinates of the column\n    col = [col]\n    # Find the coordinates of the row\n    row = [row]\n    # Find the coordinates of the column\n    col = [col]\n    # Find the coordinates of the row\n    row = [row]\n    # Find the coordinates of the column\n    col = [col]\n    # Find the coordinates of the row\n    row = [row]\n    # Find the coordinates of the column\n    col = [", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort the list by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    # Sort the list by columns in descending order\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # Find the coordinates of the row\n    row = 0\n    for x in lst:\n        row += 1\n        # Find the coordinates of the column\n        for y in x:\n            if row == 0:\n                yield (row, y)\n            else:\n                yield (row, y - 1)\n    # Return the list\n    return tuple(get_row(lst, x) for x in lst)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates of the row by columns in descending order.\n    sorted_rows = sorted(lst, key=lambda x: x[0])\n    sorted_rows.sort(key=lambda x: x[1])\n    sorted_rows.reverse()\n    # Sort coordinates of the row by rows in ascending order.\n    sorted_rows.sort(key=lambda x: x[0])\n    sorted_rows.reverse()\n    # Return the coordinates of the row.\n    return [(x[0], x[1]) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0]\n    if len(lst) == 3:\n        return lst[0]\n    if len(lst) == 4:\n        return lst[0]\n    if len(lst) == 5:\n        return lst[0]\n    if len(lst) == 6:\n        return lst[0]\n    if len(lst) == 7:\n        return lst[0]\n    if len(lst) == 8:\n        return lst[0]\n    if len(lst) == 9:\n        return lst[0]\n    if len(lst) == 10:\n        return lst[0]\n    if len(lst) == 11:\n        return lst[0]\n    if len(lst) == 12:\n        return lst[0]\n    if len(lst) == 13:\n        return lst[0]\n    if len(lst) == 14:\n        return lst[0]\n    if len(lst) == 15:\n        return lst[0]\n    if len(lst) == 16:\n        return lst[0]\n    if len(lst) == 17:\n        return lst[0]\n    if len(lst) == 18:\n        return lst[0]\n    if len(lst) == 19:\n        return lst[0]\n    if len(lst) == 20:\n        return lst[0]\n    if len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort by columns\n    lst = sorted(lst, key=lambda x: x[1])\n    # get the coordinates of the row\n    row = [(x[0], x[1]) for x in lst]\n    # get the coordinates of the column\n    col = [(y[0], y[1]) for y in lst]\n    # return the coordinates\n    return row, col", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return [(get_row(lst[1:], x), get_row(lst[:-1], x)) for x in range(2, len(lst) + 1)]\n    return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return [get_row(lst[1:], x) for x in xrange(len(lst[0]))]\n    if len(lst) == 3:\n        return [get_row(lst[1:], x) for x in xrange(len(lst[0]))]\n    if len(lst) == 4:\n        return [get_row(lst[1:], x) for x in xrange(len(lst[0]))]\n    if len(lst) == 5:\n        return [get_row(lst[1:], x) for x in xrange(len(lst[0]))]\n    if len(lst) == 6:\n        return [get_row(lst[1:], x) for x in xrange(len(lst[0]))]\n    return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 1:\n        return [(get_row(lst[1:], x), x) for x in lst[1:]]\n    if len(lst[0]) == 2:\n        return [(get_row(lst[1:], x), x) for x in lst[1:]]\n    if len(lst[0]) == 3:\n        return [(get_row(lst[1:], x), x) for x in lst[1:]]\n    if len(lst[0]) == 4:\n        return [(get_row(lst[1:], x), x) for x in lst[1:]]\n    if len(lst[0]) == 5:\n        return [(get_row(lst[1:], x), x) for x in lst[1:]]\n    if len(lst[0]) == 6:\n        return [(get_row(lst[1:], x), x) for x in lst[1:]]\n    return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates by rows in ascending order\n    sorted_rows = sorted(lst, key=lambda x: x[0])\n    sorted_rows.reverse()\n    sorted_rows.sort(key=lambda x: x[1])\n    sorted_rows = [(row, len(row)) for row in sorted_rows]\n    sorted_rows = [(row, len(row)) for row in sorted_rows]\n    sorted_rows = [(row, len(row)) for row in sorted_rows]\n    sorted_rows = [(row, len(row)) for row in sorted_rows]\n    sorted_rows = [(row, len(row)) for row in sorted_rows]\n    sorted_rows = [(row, len(row)) for row in sorted_rows]\n    sorted_rows = [(row, len(row)) for row in sorted_rows]\n    sorted_rows = [(row, len(row)) for row in sorted_rows]\n    sorted_rows = [(row, len(row)) for row in sorted_rows]\n    sorted_rows = [(row, len(row)) for row in sorted_rows]\n    sorted_rows = [(row, len(row))", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort by columns\n    lst = sorted(lst, key=lambda x: x[1])\n    # return tuples\n    return [(x[0], x[1]) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0]\n    if len(lst) == 3:\n        return lst[0]\n    if len(lst) == 4:\n        return lst[0]\n    if len(lst) == 5:\n        return lst[0]\n    if len(lst) == 6:\n        return lst[0]\n    if len(lst) == 7:\n        return lst[0]\n    if len(lst) == 8:\n        return lst[0]\n    if len(lst) == 9:\n        return lst[0]\n    if len(lst) == 10:\n        return lst[0]\n    if len(lst) == 11:\n        return lst[0]\n    if len(lst) == 12:\n        return lst[0]\n    if len(lst) == 13:\n        return lst[0]\n    if len(lst) == 14:\n        return lst[0]\n    if len(lst) == 15:\n        return lst[0]\n    if len(lst) == 16:\n        return lst[0]\n    if len(lst) == 17:\n        return lst[0]\n    if len(lst) == 18:\n        return lst[0]\n    if len(lst) == 19:\n        return lst[0]\n    if len(lst) == 20:\n        return lst[0]\n    if len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0]\n    if len(lst) == 3:\n        return lst[0]\n    if len(lst) == 4:\n        return lst[0]\n    if len(lst) == 5:\n        return lst[0]\n    if len(lst) == 6:\n        return lst[0]\n    if len(lst) == 7:\n        return lst[0]\n    if len(lst) == 8:\n        return lst[0]\n    if len(lst) == 9:\n        return lst[0]\n    if len(lst) == 10:\n        return lst[0]\n    if len(lst) == 11:\n        return lst[0]\n    if len(lst) == 12:\n        return lst[0]\n    if len(lst) == 13:\n        return lst[0]\n    if len(lst) == 14:\n        return lst[0]\n    if len(lst) == 15:\n        return lst[0]\n    if len(lst) == 16:\n        return lst[0]\n    if len(lst) == 17:\n        return lst[0]\n    if len(lst) == 18:\n        return lst[0]\n    if len(lst) == 19:\n        return lst[0]\n    if len(lst) == 20:\n        return lst[0]\n    if len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 1:\n        return [(get_row(lst, x), x) for x in lst]\n    if len(lst[0]) == 2:\n        return [(get_row(lst, x), x) for x in lst]\n    if len(lst[0]) == 3:\n        return [(get_row(lst, x), x) for x in lst]\n    return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort by columns\n    lst = sorted(lst, key=lambda x: x[1])\n    # create a list of tuples\n    return [(x[0], x[1]) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates initially by rows in ascending order.\n    lst = sorted(lst, key=lambda x: x[0])\n    # Sort coordinates of the row by columns in descending order.\n    lst = sorted(lst, key=lambda x: x[1])\n    # Return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows.reverse()\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    sorted_rows.reverse()\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows.reverse()\n    # Sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    sorted_rows.reverse()\n    # Return list of tuples\n    return [(x[0], x[1]) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort rows by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort rows by columns in descending order\n    lst = sorted(lst, key=lambda x: x[1])\n    # get the coordinates of the row\n    row = []\n    for i in range(len(lst)):\n        row.append(get_row(lst[i], i))\n    # get the coordinates of the column\n    col = []\n    for i in range(len(lst[0])):\n        col.append(get_row(lst[0][i], i))\n    # return the tuple\n    return tuple(row), tuple(col)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates of the row by columns in descending order.\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows.reverse()\n    # Sort coordinates of the row by rows in ascending order.\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    sorted_rows.reverse()\n    # Return list of tuples, [(row, columns)], starting with 0.\n    return [(row, col) for col, row in zip(sorted_rows, sorted_rows[1:])]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return [get_row(lst[1:], x) for x in lst[0]]\n    if len(lst) == 3:\n        return [get_row(lst[1:], x) for x in lst[0]]\n    if len(lst) == 4:\n        return [get_row(lst[1:], x) for x in lst[0]]\n    if len(lst) == 5:\n        return [get_row(lst[1:], x) for x in lst[0]]\n    if len(lst) == 6:\n        return [get_row(lst[1:], x) for x in lst[0]]\n    raise ValueError(\"invalid number of rows\")", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates of the row by columns in descending order.\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows.reverse()\n    # Sort coordinates of the row by rows in ascending order.\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    sorted_rows.reverse()\n    # Return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 1:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 2:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 3:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 4:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 5:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 6:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 7:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 8:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 9:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 10:\n        return [(x, y)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows.reverse()\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows = sorted(sorted_rows, key=lambda x: x[0], reverse=False)\n    sorted_rows.sort(key=lambda x: x[1], reverse=False)\n    sorted_rows.reverse()\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates of the row by columns in descending order.\n    # Sort coordinates of the row by rows in ascending order.\n    # Sort coordinates of the column by columns in descending order.\n    # Sort coordinates of the column by rows in ascending order.\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_columns = sorted(lst, key=lambda x: x[1], reverse=True)\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_columns.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_columns.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_columns.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_columns.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_columns.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows.sort(key=lambda x: x", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort the list by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0])\n    # Sort the list by columns in descending order\n    lst = sorted(lst, key=lambda x: x[1])\n    # Find the coordinates of the row\n    row = 0\n    for i in range(len(lst)):\n        row = row + 1\n        for j in range(len(lst[i])):\n            if lst[i][j] > lst[row][j]:\n                lst[row][j] = lst[i][j]\n                lst[row].append(j)\n    # Return the coordinates of the row\n    return [(row, lst[row])]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return [get_row(lst[1:], x) for x in xrange(0, len(lst[0]))]\n    if len(lst) == 3:\n        return [get_row(lst[1:], x) for x in xrange(0, len(lst[0])) for y in xrange(0, len(lst[1]))]\n    if len(lst) == 4:\n        return [get_row(lst[1:], x) for x in xrange(0, len(lst[0])) for y in xrange(0, len(lst[1])) for z in xrange(0, len(lst[2]))]\n    if len(lst) == 5:\n        return [get_row(lst[1:], x) for x in xrange(0, len(lst[0])) for y in xrange(0, len(lst[1])) for z in xrange(0, len(lst[2])) for w in xrange(0, len(lst[3]))]\n    if len(lst) == 6:\n        return [get_row(lst[1:], x) for x in x", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort rows by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort rows by columns\n    lst = sorted(lst, key=lambda x: x[1])\n    # sort rows by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort rows by columns\n    lst = sorted(lst, key=lambda x: x[1])\n    # sort rows by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort rows by columns\n    lst = sorted(lst, key=lambda x: x[1])\n    # sort rows by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort rows by columns\n    lst = sorted(lst, key=lambda x: x[1])\n    # sort rows by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort rows by columns\n    lst = sorted(lst, key=lambda x: x[1])\n    # sort rows by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort rows by columns\n    lst = sorted(lst, key=lambda x: x[1])\n    # sort rows by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort rows by columns\n    lst =", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates by rows in ascending order\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.reverse()\n    # sort coordinates of the row by columns in descending order\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    # return the list of tuples\n    return [(x[0], x[1]) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 1:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 2:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 3:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 4:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 5:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 6:\n        return [(x, y) for x, y in lst]\n    return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    # return the coordinates of the row\n    return [(x[0], x[1]) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0]\n    if len(lst) == 3:\n        return lst[0]\n    if len(lst) == 4:\n        return lst[0]\n    if len(lst) == 5:\n        return lst[0]\n    if len(lst) == 6:\n        return lst[0]\n    if len(lst) == 7:\n        return lst[0]\n    if len(lst) == 8:\n        return lst[0]\n    if len(lst) == 9:\n        return lst[0]\n    if len(lst) == 10:\n        return lst[0]\n    if len(lst) == 11:\n        return lst[0]\n    if len(lst) == 12:\n        return lst[0]\n    if len(lst) == 13:\n        return lst[0]\n    if len(lst) == 14:\n        return lst[0]\n    if len(lst) == 15:\n        return lst[0]\n    if len(lst) == 16:\n        return lst[0]\n    if len(lst) == 17:\n        return lst[0]\n    if len(lst) == 18:\n        return lst[0]\n    if len(lst) == 19:\n        return lst[0]\n    if len(lst) == 20:\n        return lst[0]\n    if len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates of the row by columns in descending order.\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    sorted_rows.sort(key=lambda", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 1:\n        return [(get_row(lst, 1), get_row(lst, 0))]\n    if len(lst[0]) == 2:\n        return [(get_row(lst, 1), get_row(lst, 0))]\n    if len(lst[0]) == 3:\n        return [(get_row(lst, 1), get_row(lst, 0))]\n    if len(lst[0]) == 4:\n        return [(get_row(lst, 1), get_row(lst, 0))]\n    if len(lst[0]) == 5:\n        return [(get_row(lst, 1), get_row(lst, 0))]\n    if len(lst[0]) == 6:\n        return [(get_row(lst, 1), get_row(lst, 0))]\n    return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 1:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 2:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 3:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 4:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 5:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 6:\n        return [(x, y) for x, y in lst]\n    return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 1:\n        return [(get_row(lst[1:], x), x) for x in lst]\n    if len(lst[0]) == 2:\n        return [(get_row(lst[1:], x), x) for x in lst]\n    if len(lst[0]) == 3:\n        return [(get_row(lst[1:], x), x) for x in lst]\n    if len(lst[0]) == 4:\n        return [(get_row(lst[1:], x), x) for x in lst]\n    return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0]\n    if len(lst) == 3:\n        return lst[0]\n    if len(lst) == 4:\n        return lst[0]\n    if len(lst) == 5:\n        return lst[0]\n    if len(lst) == 6:\n        return lst[0]\n    if len(lst) == 7:\n        return lst[0]\n    if len(lst) == 8:\n        return lst[0]\n    if len(lst) == 9:\n        return lst[0]\n    if len(lst) == 10:\n        return lst[0]\n    if len(lst) == 11:\n        return lst[0]\n    if len(lst) == 12:\n        return lst[0]\n    if len(lst) == 13:\n        return lst[0]\n    if len(lst) == 14:\n        return lst[0]\n    if len(lst) == 15:\n        return lst[0]\n    if len(lst) == 16:\n        return lst[0]\n    if len(lst) == 17:\n        return lst[0]\n    if len(lst) == 18:\n        return lst[0]\n    if len(lst) == 19:\n        return lst[0]\n    if len(lst) == 20:\n        return lst[0]\n    if len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    # get the coordinates of the row\n    row_coords = [(x[0], x[1]) for x in sorted_rows]\n    # get the coordinates of the column\n    column_coords = [(x[1], x[0]) for x in sorted_rows]\n    # get the coordinates of the column\n    column_coords = [(x[1], x[0]) for x in sorted_rows]\n    # get the coordinates of the column\n    column_coords = [(x[1], x[0]) for x in sorted_rows]\n    # get the coordinates of the column\n    column_coords = [(x[1], x[0]) for x in sorted_rows]\n    # get the coordinates of the column\n    column_coords = [(x[1], x[0]) for x in sorted_rows]\n    # get the coordinates of the column\n    column_coords = [", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates by rows in ascending order\n    sorted_rows = sorted(lst, key=lambda x: x[0])\n    sorted_rows.reverse()\n    # sort coordinates of the row by columns in descending order\n    sorted_rows.sort(key=lambda x: x[1])\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(get_row(row, x), get_row(row, x + 1)) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 1:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 2:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 3:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 4:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 5:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 6:\n        return [(x, y) for x, y in lst]\n    return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows.reverse()\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    sorted_rows.reverse()\n    # return the coordinates of the row\n    return [(x[0], x[1]) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst\n    if len(lst) == 3:\n        return [get_row(lst[1:], x) for x in lst[0]]\n    if len(lst) == 4:\n        return [get_row(lst[1:], x) for x in lst[1:]]\n    return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    # return list of tuples, [(row, columns)]\n    return [(row, x[1]) for row, x in zip(sorted_rows, sorted_rows[1:])]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 1:\n        return [(lst[0][0], lst[0][1])]\n    if len(lst[0]) == 2:\n        return [(lst[0][0], lst[0][1]), (lst[0][2], lst[0][3])]\n    if len(lst[0]) == 3:\n        return [(lst[0][0], lst[0][1]), (lst[0][2], lst[0][3]), (lst[0][4], lst[0][5])]\n    if len(lst[0]) == 4:\n        return [(lst[0][0], lst[0][1]), (lst[0][2], lst[0][3]), (lst[0][4], lst[0][5]), (lst[0][6], lst[0][7])]\n    if len(lst[0]) == 5:\n        return [(lst[0][0], lst[0][1]), (lst[0][2], lst[0][3]), (lst[0][4], lst[0][5]), (lst[0][6], lst[0][7]), (lst[0][8], lst[0][9])]\n    if len(lst[0]) == 6:\n        return [(lst[0][0], lst[0][1]), (lst[0][2], lst[0][3]), (lst[0][4], lst[0][5]), (lst[0][6], lst[0]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0]\n    if len(lst) == 3:\n        return lst[0]\n    if len(lst) == 4:\n        return lst[0]\n    if len(lst) == 5:\n        return lst[0]\n    if len(lst) == 6:\n        return lst[0]\n    if len(lst) == 7:\n        return lst[0]\n    if len(lst) == 8:\n        return lst[0]\n    if len(lst) == 9:\n        return lst[0]\n    if len(lst) == 10:\n        return lst[0]\n    if len(lst) == 11:\n        return lst[0]\n    if len(lst) == 12:\n        return lst[0]\n    if len(lst) == 13:\n        return lst[0]\n    if len(lst) == 14:\n        return lst[0]\n    if len(lst) == 15:\n        return lst[0]\n    if len(lst) == 16:\n        return lst[0]\n    if len(lst) == 17:\n        return lst[0]\n    if len(lst) == 18:\n        return lst[0]\n    if len(lst) == 19:\n        return lst[0]\n    if len(lst) == 20:\n        return lst[0]\n    if len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort the list by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0])\n    # Sort the list by columns in descending order\n    lst = sorted(lst, key=lambda x: x[1])\n    # Find the first coordinate in the list\n    idx = 0\n    for x in lst:\n        if x[0] == x[1]:\n            idx = x[0]\n            break\n    # Find the last coordinate in the list\n    idx = len(lst) - 1\n    for x in lst:\n        if x[0] == x[1]:\n            idx = x[0]\n            break\n    # Find the coordinates of the row\n    row = []\n    for x in lst:\n        row.append((x[0], x[1]))\n    # Find the coordinates of the column\n    col = []\n    for x in lst:\n        col.append((x[0], x[1]))\n    # Return the list of tuples\n    return [(row[idx], col[idx]) for idx in range(0, len(row))]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst\n    if len(lst) == 3:\n        return [(get_row(lst[1:], x), get_row(lst[:-1], x)) for x in xrange(3)]\n    if len(lst) == 4:\n        return [(get_row(lst[1:], x), get_row(lst[:-1], x), get_row(lst[:-2], x), get_row(lst[:-1], x)) for x in xrange(4)]\n    if len(lst) == 5:\n        return [(get_row(lst[1:], x), get_row(lst[:-1], x), get_row(lst[:-2], x), get_row(lst[:-1], x), get_row(lst[:-2], x)) for x in xrange(5)]\n    if len(lst) == 6:\n        return [(get_row(lst[1:], x), get_row(lst[:-1], x), get_row(lst[:-2], x), get_row(lst[:-1], x), get_row(lst[:-2], x), get_row(lst[:-1],", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return [get_row(lst[1:], x) for x in lst[0]]\n    if len(lst) == 3:\n        return [get_row(lst[1:], x) for x in lst[0]]\n    if len(lst) == 4:\n        return [get_row(lst[1:], x) for x in lst[0]]\n    if len(lst) == 5:\n        return [get_row(lst[1:], x) for x in lst[0]]\n    if len(lst) == 6:\n        return [get_row(lst[1:], x) for x in lst[0]]\n    raise ValueError(\"Input list is not a valid list\")", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[1], reverse=True)\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    # get the coordinates of the row\n    row_coords = [(x[0], x[1]) for x in sorted_rows]\n    # get the coordinates of the column\n    column_coords = [(x[0], x[1]) for x in sorted_rows]\n    # return the coordinates of the row\n    return row_coords, column_coords", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[1], reverse=True)\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows = [(x[0], x[1]) for x in sorted_rows]\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    sorted_rows = [(x[1], x[0]) for x in sorted_rows]\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[1], reverse=True)\n    sorted_rows.reverse()\n    # Sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    # Find the coordinates of the row\n    row_coords = []\n    for row in sorted_rows:\n        row_coords.append(get_row(row, x))\n    return row_coords", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(x, y) for x, y in lst]\n    if len(lst) == 2:\n        return [(get_row(lst[1:], x), get_row(lst[:-1], y)) for x, y in lst]\n    return [(get_row(lst[1:], x), get_row(lst[:-1], y)) for x, y in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return [(get_row(lst[1:], x), get_row(lst[:-1], x)) for x in range(2, len(lst))]\n    if len(lst) == 3:\n        return [(get_row(lst[1:], x), get_row(lst[:-1], x), get_row(lst[:-2], x)) for x in range(3, len(lst))]\n    if len(lst) == 4:\n        return [(get_row(lst[1:], x), get_row(lst[:-1], x), get_row(lst[:-2], x), get_row(lst[:-3], x)) for x in range(4, len(lst))]\n    if len(lst) == 5:\n        return [(get_row(lst[1:], x), get_row(lst[:-1], x), get_row(lst[:-2], x), get_row(lst[:-3], x), get_row(lst[:-4], x)) for x in range(5, len(lst))]\n    if len(lst) == 6:\n        return [(", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0]\n    if len(lst) == 3:\n        return lst[0]\n    if len(lst) == 4:\n        return lst[0]\n    if len(lst) == 5:\n        return lst[0]\n    if len(lst) == 6:\n        return lst[0]\n    if len(lst) == 7:\n        return lst[0]\n    if len(lst) == 8:\n        return lst[0]\n    if len(lst) == 9:\n        return lst[0]\n    if len(lst) == 10:\n        return lst[0]\n    if len(lst) == 11:\n        return lst[0]\n    if len(lst) == 12:\n        return lst[0]\n    if len(lst) == 13:\n        return lst[0]\n    if len(lst) == 14:\n        return lst[0]\n    if len(lst) == 15:\n        return lst[0]\n    if len(lst) == 16:\n        return lst[0]\n    if len(lst) == 17:\n        return lst[0]\n    if len(lst) == 18:\n        return lst[0]\n    if len(lst) == 19:\n        return lst[0]\n    if len(lst) == 20:\n        return lst[0]\n    if len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates by rows in ascending order\n    sorted_rows = sorted(lst, key=lambda x: x[0])\n    sorted_rows.reverse()\n    # Sort coordinates of the row by columns in descending order\n    sorted_rows.sort(key=lambda x: x[1])\n    # Return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(get_row(row, x), get_row(row, x[1:])) for row in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort rows by rows\n    rows = sorted(lst, key=lambda x: x[0])\n    # sort rows by columns\n    rows = sorted(rows, key=lambda x: x[1])\n    # sort rows by rows\n    rows = sorted(rows, key=lambda x: x[0])\n    # sort rows by columns\n    rows = sorted(rows, key=lambda x: x[1])\n    # sort rows by rows\n    rows = sorted(rows, key=lambda x: x[0])\n    # sort rows by columns\n    rows = sorted(rows, key=lambda x: x[1])\n    # sort rows by rows\n    rows = sorted(rows, key=lambda x: x[0])\n    # sort rows by columns\n    rows = sorted(rows, key=lambda x: x[1])\n    # sort rows by rows\n    rows = sorted(rows, key=lambda x: x[0])\n    # sort rows by columns\n    rows = sorted(rows, key=lambda x: x[1])\n    # sort rows by rows\n    rows = sorted(rows, key=lambda x: x[0])\n    # sort rows by columns\n    rows = sorted(rows, key=lambda x: x[1])\n    # sort rows by rows\n    rows = sorted(rows, key=lambda x: x[0])\n    # sort rows by columns\n    rows =", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates of the row by columns in descending order.\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows.reverse()\n    # Sort coordinates of the row by rows in ascending order.\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    sorted_rows.reverse()\n    # Return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[0])\n    sorted_rows.reverse()\n    sorted_rows.sort(key=lambda x: x[1])\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0])\n    sorted_rows.reverse()\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(row, col) for row, col in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return [(get_row(lst[1:], x), get_row(lst[:-1], x)) for x in range(2, len(lst) + 1)]\n    if len(lst) == 3:\n        return [(get_row(lst[1:], x), get_row(lst[:-1], x), get_row(lst[-2], x)) for x in range(3, len(lst) + 1)]\n    if len(lst) == 4:\n        return [(get_row(lst[1:], x), get_row(lst[:-1], x), get_row(lst[-2], x), get_row(lst[-3], x)) for x in range(4, len(lst) + 1)]\n    if len(lst) == 5:\n        return [(get_row(lst[1:], x), get_row(lst[:-1], x), get_row(lst[-2], x), get_row(lst[-3], x), get_row(lst[-4], x)) for x in range(5, len(lst) + 1)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # sort coordinates of the row by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    # return the coordinates of the row\n    return [(x[0], x[1]) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0])\n    # Sort coordinates of the row by columns in descending order\n    lst = sorted(lst, key=lambda x: x[1])\n    # Return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # sort coordinates of the row by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    # get the coordinates of the row\n    row = lst[0]\n    # get the coordinates of the column\n    col = lst[1]\n    # get the coordinates of the coordinate\n    coord = (row, col)\n    # return the coordinates\n    return coord", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(row, col) for row, col in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort rows by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort rows by columns\n    lst = sorted(lst, key=lambda x: x[1])\n    # sort coordinates by rows\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    # sort coordinates by columns\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # return tuples\n    return [(get_row(lst, x), get_row(lst, x+1)) for x in range(len(lst))]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.reverse()\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    sorted_rows.reverse()\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[1], reverse=True)\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    # return the list of tuples\n    return [(get_row(row, x), get_row(row, x+1)) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0]\n    if len(lst) == 3:\n        return lst[0]\n    if len(lst) == 4:\n        return lst[0]\n    if len(lst) == 5:\n        return lst[0]\n    if len(lst) == 6:\n        return lst[0]\n    if len(lst) == 7:\n        return lst[0]\n    if len(lst) == 8:\n        return lst[0]\n    if len(lst) == 9:\n        return lst[0]\n    if len(lst) == 10:\n        return lst[0]\n    if len(lst) == 11:\n        return lst[0]\n    if len(lst) == 12:\n        return lst[0]\n    if len(lst) == 13:\n        return lst[0]\n    if len(lst) == 14:\n        return lst[0]\n    if len(lst) == 15:\n        return lst[0]\n    if len(lst) == 16:\n        return lst[0]\n    if len(lst) == 17:\n        return lst[0]\n    if len(lst) == 18:\n        return lst[0]\n    if len(lst) == 19:\n        return lst[0]\n    if len(lst) == 20:\n        return lst[0]\n    if len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[1], reverse=True)\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0]\n    if len(lst) == 3:\n        return lst[0]\n    if len(lst) == 4:\n        return lst[0]\n    if len(lst) == 5:\n        return lst[0]\n    if len(lst) == 6:\n        return lst[0]\n    if len(lst) == 7:\n        return lst[0]\n    if len(lst) == 8:\n        return lst[0]\n    if len(lst) == 9:\n        return lst[0]\n    if len(lst) == 10:\n        return lst[0]\n    if len(lst) == 11:\n        return lst[0]\n    if len(lst) == 12:\n        return lst[0]\n    if len(lst) == 13:\n        return lst[0]\n    if len(lst) == 14:\n        return lst[0]\n    if len(lst) == 15:\n        return lst[0]\n    if len(lst) == 16:\n        return lst[0]\n    if len(lst) == 17:\n        return lst[0]\n    if len(lst) == 18:\n        return lst[0]\n    if len(lst) == 19:\n        return lst[0]\n    if len(lst) == 20:\n        return lst[0]\n    if len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort by rows\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    # sort by columns\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # find x\n    x = 0\n    for row in lst:\n        for col in row:\n            if col == x:\n                return row, col\n            x += 1\n    return [], []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort by columns\n    lst = sorted(lst, key=lambda x: x[1])\n    # sort by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort by columns\n    lst = sorted(lst, key=lambda x: x[1])\n    # sort by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort by columns\n    lst = sorted(lst, key=lambda x: x[1])\n    # sort by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort by columns\n    lst = sorted(lst, key=lambda x: x[1])\n    # sort by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort by columns\n    lst = sorted(lst, key=lambda x: x[1])\n    # sort by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort by columns\n    lst = sorted(lst, key=lambda x: x[1])\n    # sort by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort by columns\n    lst = sorted(lst, key=lambda x: x[1])\n    # sort by", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates by rows in ascending order\n    sorted_rows = sorted(lst, key=lambda x: x[0])\n    sorted_rows.reverse()\n    # sort coordinates of the row by columns in descending order\n    sorted_rows.sort(key=lambda x: x[1])\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(get_row(row, x), get_row(row, x + 1)) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0]\n    if len(lst) == 3:\n        return lst[0]\n    if len(lst) == 4:\n        return lst[0]\n    if len(lst) == 5:\n        return lst[0]\n    if len(lst) == 6:\n        return lst[0]\n    if len(lst) == 7:\n        return lst[0]\n    if len(lst) == 8:\n        return lst[0]\n    if len(lst) == 9:\n        return lst[0]\n    if len(lst) == 10:\n        return lst[0]\n    if len(lst) == 11:\n        return lst[0]\n    if len(lst) == 12:\n        return lst[0]\n    if len(lst) == 13:\n        return lst[0]\n    if len(lst) == 14:\n        return lst[0]\n    if len(lst) == 15:\n        return lst[0]\n    if len(lst) == 16:\n        return lst[0]\n    if len(lst) == 17:\n        return lst[0]\n    if len(lst) == 18:\n        return lst[0]\n    if len(lst) == 19:\n        return lst[0]\n    if len(lst) == 20:\n        return lst[0]\n    if len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort by columns\n    lst = sorted(lst, key=lambda x: x[1])\n    # return the coordinates\n    return [(get_row(lst, x), get_row(lst, x+1)) for x in range(len(lst))]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows = [(x[0], x[1]) for x in sorted_rows]\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    sorted_rows.sort(key=lambda x: x[1], reverse=False)\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort by columns\n    lst = sorted(lst, key=lambda x: x[1])\n    # get the coordinates\n    x = 0\n    y = 0\n    for row in lst:\n        for col in row:\n            if col == x:\n                x += 1\n            if col == y:\n                y += 1\n    return [(x, y)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates by rows in ascending order.\n    sorted_rows = sorted(lst, key=lambda x: x[0])\n    sorted_rows.reverse()\n    # Sort coordinates of the row by columns in descending order.\n    sorted_rows.sort(key=lambda x: x[1])\n    # Return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(get_row(row, x), get_row(row, x + 1)) for row in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort the list by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0])\n    # Sort the list by columns in descending order\n    lst = sorted(lst, key=lambda x: x[1])\n    # Find the coordinates of the row\n    row = 0\n    for x in lst:\n        if x[0] == row:\n            row += 1\n        else:\n            break\n    # Find the coordinates of the column\n    col = 0\n    for x in lst:\n        if x[1] == col:\n            col += 1\n        else:\n            break\n    # Return the coordinates\n    return [(row, col) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates by rows in ascending order\n    sorted_rows = sorted(lst, key=lambda x: x[0])\n    sorted_rows.reverse()\n    # sort coordinates of the row by columns in descending order\n    sorted_rows.sort(key=lambda x: x[1])\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0\n    return [(x[0], x[1]) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort coordinates of the row by columns in descending order\n    lst = sorted(lst, key=lambda x: x[1])\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0\n    return [(x[0], x[1]) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[1], reverse=True)\n    sorted_rows.sort(key=lambda x: x[0])\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    # get the coordinates of the row\n    row_coords = [(x[0], x[1]) for x in sorted_rows]\n    # get the coordinates of the column\n    column_coords = [(x[1], x[0]) for x in sorted_rows]\n    # return the coordinates\n    return tuple(row_coords), tuple(column_coords)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [(x, y) for x, y in lst]\n    if len(lst) == 2:\n        return [(x, y) for x, y in lst]\n    if len(lst) == 3:\n        return [(x, y) for x, y in lst]\n    if len(lst) == 4:\n        return [(x, y) for x, y in lst]\n    if len(lst) == 5:\n        return [(x, y) for x, y in lst]\n    if len(lst) == 6:\n        return [(x, y) for x, y in lst]\n    if len(lst) == 7:\n        return [(x, y) for x, y in lst]\n    if len(lst) == 8:\n        return [(x, y) for x, y in lst]\n    if len(lst) == 9:\n        return [(x, y) for x, y in lst]\n    if len(lst) == 10:\n        return [(x, y) for x, y in lst]\n    if len(lst) == 11:\n        return [(x, y", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows.reverse()\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    sorted_rows.reverse()\n    # return list of tuples, [(row, columns)]\n    return [(row, sorted_rows.index(x)) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=False)\n    # find coordinates of the row\n    row_coords = []\n    for row in sorted_rows:\n        row_coords.append(get_row(row, x))\n    return row_coords", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort the list by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0])\n    # Sort the list by columns in descending order\n    lst = sorted(lst, key=lambda x: x[1])\n    # Find the coordinates of the row\n    row = 0\n    for x in lst:\n        row += 1\n        # Find the coordinates of the column\n        for y in x:\n            if y[0] == row and y[1] == 0:\n                return [(x[0], y[1])]\n    return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    if len(lst[0]) == 1:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 2:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 3:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 4:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 5:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 6:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 7:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 8:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 9:\n        return [(x, y) for x, y in lst]\n    if len(lst[0]) == 10:\n        return [(x, y)", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[1], reverse=True)\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort rows by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    # sort columns by columns in descending order\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # get coordinates of the row\n    row = lst[0]\n    # get coordinates of the column\n    col = lst[1]\n    # get coordinates of the row\n    row = row[0]\n    # get coordinates of the column\n    col = col[0]\n    # get coordinates of the row\n    row = row[1]\n    # get coordinates of the column\n    col = col[1]\n    # return the coordinates\n    return [(row, col)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    # sort coordinates of the row by columns in descending order\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates of the row by columns in descending order.\n    sorted_rows = sorted(lst, key=lambda x: x[1], reverse=True)\n    sorted_rows.sort(key=lambda x: x[0])\n    sorted_rows.reverse()\n    # Sort coordinates of the row by rows in ascending order.\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows.reverse()\n    # Return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0]\n    if len(lst) == 3:\n        return lst[0]\n    if len(lst) == 4:\n        return lst[0]\n    if len(lst) == 5:\n        return lst[0]\n    if len(lst) == 6:\n        return lst[0]\n    return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort rows by rows\n    rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    # sort rows by columns\n    rows = sorted(rows, key=lambda x: x[1], reverse=True)\n    # sort rows by rows\n    rows = sorted(rows, key=lambda x: x[0], reverse=True)\n    # sort rows by columns\n    rows = sorted(rows, key=lambda x: x[1], reverse=True)\n    # sort rows by rows\n    rows = sorted(rows, key=lambda x: x[0], reverse=True)\n    # sort rows by columns\n    rows = sorted(rows, key=lambda x: x[1], reverse=True)\n    # sort rows by rows\n    rows = sorted(rows, key=lambda x: x[0], reverse=True)\n    # sort rows by columns\n    rows = sorted(rows, key=lambda x: x[1], reverse=True)\n    # sort rows by rows\n    rows = sorted(rows, key=lambda x: x[0], reverse=True)\n    # sort rows by columns\n    rows = sorted(rows, key=lambda x: x[1], reverse=True)\n    # sort rows by rows\n    rows = sorted(rows, key=lambda x: x[0], reverse=True)\n    # sort rows by columns\n    rows = sorted(rows, key", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return [(get_row(lst[1:], x), get_row(lst[:-1], x)) for x in xrange(len(lst))]\n    if len(lst) == 3:\n        return [(get_row(lst[1:], x), get_row(lst[:-1], x), get_row(lst[:-2], x)) for x in xrange(len(lst))]\n    if len(lst) == 4:\n        return [(get_row(lst[1:], x), get_row(lst[:-1], x), get_row(lst[:-2], x), get_row(lst[:-3], x)) for x in xrange(len(lst))]\n    return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[1], reverse=True)\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    # sort coordinates of the row by rows in ascending order\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(row, col) for row, col in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    # sort coordinates of the row by columns in descending order\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(x[0], x[1]) for x in lst]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort rows by rows in ascending order\n    rows = sorted(lst, key=lambda x: x[0])\n    # sort rows by columns in descending order\n    rows = sorted(rows, key=lambda x: x[1])\n    # return tuples of coordinates\n    return [(row, col) for row, col in zip(rows, rows)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0]\n    if len(lst) == 3:\n        return lst[0]\n    if len(lst) == 4:\n        return lst[0]\n    if len(lst) == 5:\n        return lst[0]\n    if len(lst) == 6:\n        return lst[0]\n    if len(lst) == 7:\n        return lst[0]\n    if len(lst) == 8:\n        return lst[0]\n    if len(lst) == 9:\n        return lst[0]\n    if len(lst) == 10:\n        return lst[0]\n    if len(lst) == 11:\n        return lst[0]\n    if len(lst) == 12:\n        return lst[0]\n    if len(lst) == 13:\n        return lst[0]\n    if len(lst) == 14:\n        return lst[0]\n    if len(lst) == 15:\n        return lst[0]\n    if len(lst) == 16:\n        return lst[0]\n    if len(lst) == 17:\n        return lst[0]\n    if len(lst) == 18:\n        return lst[0]\n    if len(lst) == 19:\n        return lst[0]\n    if len(lst) == 20:\n        return lst[0]\n    if len(lst", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates by rows in ascending order\n    sorted_rows = sorted(lst, key=lambda x: x[0])\n    sorted_rows.reverse()\n    # sort coordinates of the row by columns in descending order\n    sorted_rows.sort(key=lambda x: x[1])\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(get_row(row, x), get_row(row, x + 1)) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort rows by rows in ascending order\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    # sort rows by columns in descending order\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    # find x in the list\n    x = 0\n    for row in sorted_rows:\n        for col in row[::-1]:\n            if x == 0:\n                return get_row(row, col)\n            else:\n                x = x - 1\n    return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates of the row by columns in descending order\n    sorted_rows = sorted(lst, key=lambda x: x[0], reverse=True)\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[1], reverse=True)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    sorted_rows.sort(key=lambda", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates by rows in ascending order\n    sorted_rows = sorted(lst, key=lambda x: x[0])\n    sorted_rows.reverse()\n    # Sort coordinates of the row by columns in descending order\n    sorted_rows.sort(key=lambda x: x[1])\n    # Return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(get_row(row, x), get_row(row, x + 1)) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort by columns\n    lst = sorted(lst, key=lambda x: x[1])\n    # sort by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort by columns\n    lst = sorted(lst, key=lambda x: x[1])\n    # sort by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort by columns\n    lst = sorted(lst, key=lambda x: x[1])\n    # sort by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort by columns\n    lst = sorted(lst, key=lambda x: x[1])\n    # sort by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort by columns\n    lst = sorted(lst, key=lambda x: x[1])\n    # sort by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort by columns\n    lst = sorted(lst, key=lambda x: x[1])\n    # sort by rows\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort by columns\n    lst = sorted(lst, key=lambda x: x[1])\n    # sort by", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort rows by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0])\n    # sort rows by columns in descending order\n    lst = sorted(lst, key=lambda x: x[1])\n    # find x in the list\n    for i in range(len(lst)):\n        if lst[i][0] == x:\n            return lst[i]\n    return []", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates by rows in ascending order\n    sorted_rows = sorted(lst, key=lambda x: x[0])\n    sorted_rows.reverse()\n    # Sort coordinates of the row by columns in descending order\n    sorted_rows.sort(key=lambda x: x[1])\n    # Return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0.\n    return [(get_row(row, x), get_row(row, x + 1)) for x in sorted_rows]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # sort coordinates by rows in ascending order\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    # sort coordinates of the row by columns in descending order\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    # return list of tuples, [(x1, y1), (x2, y2)...] such that\n    # each tuple is a coordinate - (row, columns), starting with 0\n    return [(get_row(lst, x), get_row(lst, x + 1)) for x in range(0, len(lst), 2)]", "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"    # Sort coordinates of the row by columns in descending order.\n    sorted_rows = sorted(lst, key=lambda x: x[1], reverse=True)\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    sorted_rows.sort(key=lambda x: x[0], reverse=True)\n    sorted_rows = [(row, col) for row, col in sorted_rows]\n    sorted_rows.sort(key=lambda"]]