[["def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Init\n    tmp = []\n    # Loop\n    for item in lst:\n        # Add if not in the tmp list\n        if item not in tmp:\n            tmp.append(item)\n    # Return\n    return tmp", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        # Start with the minimum value\n        i = 1\n        while lst[i] > lst[i - 1]:\n            i -= 1\n        # Find the maximum value\n        j = len(lst) - 1\n        while lst[j] < lst[j + 1]:\n            j += 1\n        # Find the minimum value\n        k = 0\n        while lst[k] > lst[k + 1]:\n            k += 1\n        # Find the maximum value\n        l = 0\n        while lst[l] < lst[l + 1]:\n            l += 1\n        # Find the minimum value\n        m = 0\n        while lst[m] > lst[m + 1]:\n            m += 1\n        # Find the maximum value\n        n = 0\n        while lst[n] > lst[n] + 1:\n            n += 1\n        # Find the minimum value\n        o = 0\n        while lst[o] < lst[o + 1]:\n            o += 1\n        # Find the maximum value\n        p = 0\n        while lst[p] < lst[p + 1]:\n            p += 1\n        # Find the minimum value\n        q = 0\n        while lst[q] < lst[q + 1]:\n            q += 1\n        #", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    lst2 = []\n    lst2.append(lst[0])\n    while len(lst2) > 1:\n        if lst2[0] < lst2[1]:\n            lst2.pop(0)\n        else:\n            lst2.pop(1)\n    return lst2", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    res = []\n    if lst == []:\n        return res\n    if len(lst) == 1:\n        res.append(lst[0])\n        return res\n    for i in range(len(lst)):\n        if lst[i] < lst[i + 1]:\n            res.append(lst[i])\n            lst[i] = lst[i + 1]\n            lst[i + 1] = lst[i]\n            i += 1\n        else:\n            res.append(lst[i])\n            lst[i] = lst[i + 1]\n            lst[i + 1] = lst[i]\n            i -= 1\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    order = []\n    for i in lst:\n        if i < len(lst) - 1:\n            order.append(lst[i])\n        else:\n            order.append(lst[-1])\n            del lst[-1]\n    return order", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n\n    start = lst[0]\n    max_value = max(lst[1:])\n    min_value = min(lst[1:])\n    for i in range(1, len(lst)):\n        if lst[i] > max_value:\n            max_value = lst[i]\n        if lst[i] < min_value:\n            min_value = lst[i]\n\n    return [start, max_value, min_value, start]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst.sort(key=lambda x: x, reverse=True)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x, reverse=True)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n    elif len(lst) == 1:\n        return lst\n    else:\n        min, max = lst[0], lst[-1]\n        if max == min:\n            return [min]\n        else:\n            return strange_sort_list([max] + list(range(min, max + 1)))", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    #create a list of the sorted integers\n    lsts = []\n    for i in lst:\n        lsts.append(i)\n    #sort the list\n    lsts.sort()\n    #reverse the list\n    lsts.reverse()\n    return lsts", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n\n    i = 0\n    j = len(lst) - 1\n    while i <= j:\n        if lst[i] < lst[j]:\n            i, j = j, i\n        elif lst[i] > lst[j]:\n            i, j = i, j\n        else:\n            return lst\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x, reverse=True)\n    lst.reverse()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted_list = []\n    for i in lst:\n        if i > 0:\n            sorted_list.append(i)\n        else:\n            sorted_list.append(lst.pop(0))\n    return sorted_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n\n    lst.sort()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return [lst[-i] for i in range(len(lst))]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted = []\n    for item in lst:\n        if item == 0:\n            sorted.append(item)\n        else:\n            sorted.append(item - 1)\n            sorted.append(item + 1)\n    return sorted", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    for i in lst:\n        if i > 0:\n            result.append(i)\n            i = i - 1\n        else:\n            result.append(i)\n            i = 0\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # start with minimum value\n    lst = sorted(lst, key=lambda x: x, reverse=True)\n    # repeat until there are no more values to sort\n    while lst:\n        # set minimum to next value\n        lst.pop(0)\n        # add it to the end of the list\n        lst.append(lst.pop(0))\n        # repeat until there are no more values to sort\n        while lst:\n            # set minimum to next value\n            lst.pop(0)\n            # add it to the end of the list\n            lst.append(lst.pop(0))\n        # repeat until there are no more values to sort\n        while lst:\n            # set minimum to next value\n            lst.pop(0)\n            # add it to the end of the list\n            lst.append(lst.pop(0))\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x, reverse=True)\n    lst.reverse()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return [int(i) for i in lst if i!= int(min(lst))]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # sort the list of integers\n    lst.sort()\n\n    # find the minimum and maximum values\n    min_val = lst[0]\n    max_val = lst[-1]\n\n    # go through the remaining integers and swap the values\n    for val in range(len(lst)):\n        if val == min_val:\n            min_val = max_val\n            max_val = lst[val]\n        elif val == max_val:\n            max_val = min_val\n            min_val = lst[val]\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    nums = []\n    for i in range(len(lst)):\n        if lst[i] < lst[i+1]:\n            nums.append(lst[i])\n        else:\n            nums.append(lst[i])\n    return nums", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    mins = lst[0]\n    maxs = lst[-1]\n    ret = []\n    for i in range(len(lst)):\n        if mins > lst[i]:\n            mins = lst[i]\n        if maxs < lst[i]:\n            maxs = lst[i]\n        ret.append(lst[i])\n    return ret", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    for i in lst:\n        if i < 5:\n            result.append(i)\n        else:\n            result.append(min(lst[:i]))\n            result.append(max(lst[i+1:]))\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x < y for x, y in zip(*sorted(lst, key=lambda x: x < y)))\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    min = lst[0]\n    max = lst[-1]\n    for i in range(len(lst)):\n        if lst[i] < min:\n            min = lst[i]\n        if lst[i] > max:\n            max = lst[i]\n    return [min, max, min, max, min, max, min, max, min, max, min, max, min, max]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    res = []\n    for i in lst:\n        if i < 0:\n            res.append(i)\n        else:\n            res.append(i)\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x, reverse=False)\n    lst = sorted(lst, key=lambda x: -x, reverse=False)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    # start with minimum value, then maximum of remaining integers\n    # then minimum and so on\n    lst.sort(key=lambda x: x, reverse=True)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n    else:\n        tmp = []\n        for i in range(len(lst)):\n            if lst[i] < lst[len(lst) - i - 1] or lst[i] > lst[len(lst) - i - 2]:\n                tmp.append(lst[i])\n        return tmp", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst[0]]\n    i = 0\n    j = len(lst) - 1\n    while i < j:\n        if lst[i] > lst[j]:\n            lst[i], lst[j] = lst[j], lst[i]\n        i += 1\n        j -= 1\n    return lst\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Keep the current position\n    pos = 0\n\n    # The list of integers\n    lst = [lst[pos]]\n\n    # The current position\n    pos += 1\n\n    while pos < len(lst):\n        # Check if there is a greater integer\n        if lst[pos] > lst[pos - 1]:\n            # Move the current position to the previous one\n            pos -= 1\n            # and remove the greatest integer\n            lst.pop(lst.index(lst[pos]))\n\n        # Check if there is a smaller integer\n        elif lst[pos] < lst[pos + 1:]:\n            # Move the current position to the next one\n            pos += 1\n            # and remove the smallest integer\n            lst.pop(lst.index(lst[pos]))\n\n        # Add the current integer\n        lst.append(lst[pos])\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x, reverse=True)\n    lst.reverse()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    x = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < x:\n            x = lst[i]\n            y = lst[i + 1]\n            while y < x:\n                if y == lst[i + 2]:\n                    y = lst[i + 2]\n                else:\n                    y = lst[i + 1]\n    return [x, y, x, y]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: -x, reverse=True)\n    if len(lst) == 0:\n        return lst\n    else:\n        return [lst[i-1] for i in range(len(lst)-1)]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    ret = []\n    i = 0\n    while i < len(lst):\n        if lst[i] < lst[i + 1]:\n            ret.append(lst[i])\n            i += 1\n        elif lst[i] > lst[i + 1]:\n            ret.append(lst[i])\n            i += 1\n        else:\n            ret.append(lst[i])\n            i += 1\n    return ret", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # First we sort the list in the order that the numbers are in it.\n    # Then we reverse the list, and sort it in the reverse order.\n    sorted_list = sorted(lst, key=lambda i: i, reverse=True)\n    reverse_list = reversed(sorted_list)\n    # Now we need to return the list in the reverse order, and sort it in the\n    # original order.\n    return reverse_list, sorted_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x, reverse=True)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x, reverse=True)\n    return lst\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    l = lst\n    l = sorted(l, key=lambda x: x, reverse=True)\n    l = sorted(l, key=lambda x: x, reverse=False)\n    return l", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x, reverse=True)\n    lst.reverse()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    if len(lst) == 0:\n        return result\n\n    # Make sure that the list is not empty\n    if len(lst) == 0:\n        return result\n\n    # Find the maximum\n    max = lst[0]\n\n    # Loop through the list and sort\n    for i in range(1, len(lst)):\n        if lst[i] > max:\n            max = lst[i]\n            result.append(max)\n\n    # Return the list\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Do not sort if the list is empty\n    if len(lst) == 0:\n        return lst\n\n    # Go through the list, and sort the elements in reverse order.\n    # This is the strange sort\n    for i in range(len(lst) - 1, -1, -1):\n        j = i + 1\n        while j < len(lst) and lst[j] < lst[j + 1]:\n            j += 1\n        lst[j], lst[j + 1] = lst[j + 1], lst[j]\n\n    # Return the list in reverse order\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    ret = []\n    for i in lst:\n        if i > 0:\n            ret.append(i)\n    return ret", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    for item in lst:\n        if item < result:\n            result.append(item)\n        else:\n            result.append(item)\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    i = 0\n    while i < len(lst):\n        j = i + 1\n        while j < len(lst) and lst[i] > lst[j]:\n            j += 1\n        if lst[i] > lst[j]:\n            lst[i], lst[j] = lst[j], lst[i]\n        i += 1\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    if len(lst) == 1:\n        return lst\n    # if lst is empty, return []\n    if not lst:\n        return []\n    # if lst is odd, return lst in odd order\n    if len(lst) % 2 == 1:\n        return lst\n    # if lst is even, return lst in even order\n    if len(lst) % 2 == 0:\n        return lst\n    # if lst is odd and lst is even, return lst in odd order\n    if len(lst) % 2!= 0:\n        return lst\n    # if lst is odd and lst is not even, return lst in even order\n    if len(lst) % 2 == 1:\n        return lst\n    # if lst is even and lst is not odd, return lst in odd order\n    if len(lst) % 2 == 0:\n        return lst\n    # if lst is not odd and lst is not even, return lst in odd order\n    if len(lst) % 2!= 0:\n        return lst\n    # if lst is not odd and lst is not even, return lst in even order\n    if len(lst) % 2 == 1:\n        return lst\n    # if lst is not even and lst is not odd, return lst in odd", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    return sorted(lst, key=lambda x:x[0]) + sorted(lst, key=lambda x:x[1]) + sorted(lst, key=lambda x:x[2])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    res = []\n    lst = [lst]\n    while lst:\n        min, max = lst[0], lst[-1]\n        lst.pop(-1)\n        res.append(min)\n        for i in range(1, len(lst)):\n            if lst[i] < min:\n                min, max = lst[i], max\n        res.append(max)\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    l = []\n    i = -1\n    while i < len(lst):\n        if lst[i] < lst[i+1]:\n            l.append(lst[i])\n            i += 1\n        else:\n            l.append(lst[i])\n            l.append(lst[i+1])\n            i += 1\n    return l", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    min = lst[0]\n    max = lst[-1]\n    tmp = []\n    while min < max:\n        tmp.append(min)\n        min = max\n        max = min + 1\n    return tmp", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x, reverse=True)\n    for i in range(len(lst)):\n        lst[i] = lst[i] - lst[i-1]\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # TODO: Check this is correct.\n    # TODO: Check that all elements are integers.\n    # TODO: Check that no element is greater than the others.\n\n    # TODO: Check that there are no duplicate elements.\n    # TODO: Check that the largest element is less than the smallest.\n\n    # TODO: Check that the largest element is less than the smallest.\n\n    # TODO: Check that the largest element is less than the smallest.\n\n    # TODO: Check that the largest element is less than the smallest.\n\n    # TODO: Check that the largest element is less than the smallest.\n\n    # TODO: Check that the largest element is less than the smallest.\n\n    # TODO: Check that the largest element is less than the smallest.\n\n    # TODO: Check that the largest element is less than the smallest.\n\n    # TODO: Check that the largest element is less than the smallest.\n\n    # TODO: Check that the largest element is less than the smallest.\n\n    # TODO: Check that the largest element is less than the smallest.\n\n    # TODO: Check that the largest element is less than the smallest.\n\n    # TODO: Check that the largest element is less than the smallest.\n\n    # TODO: Check that the largest element is less than the smallest.\n\n    # TODO: Check that the largest element is less than the smallest.\n\n    # TODO: Check that the largest element is less than the smallest.\n\n    # TODO: Check that the largest element is less", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    for i in range(len(lst)):\n        if lst[i] < lst[i + 1]:\n            result.append(lst[i])\n        else:\n            result.append(lst[i + 1])\n            result.append(lst[i])\n        result.append(lst[i])\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # The first two elements are sorted by their values\n    # The remaining elements are sorted by their values minus the first two\n    if len(lst) == 2:\n        return [lst[0], lst[1]]\n    else:\n        # Find the minimum and maximum\n        min = lst[0]\n        max = lst[-1]\n        # Add the remaining elements to the sorted list\n        for i in range(1, len(lst)):\n            if lst[i] < min:\n                min = lst[i]\n            else:\n                max = lst[i]\n        # Return the sorted list\n        return [min, max]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x.min(), reverse=True)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # Sort the list of integers\n    lst = sorted(lst, key=lambda x: x, reverse=True)\n\n    # Now sort the list of integers in strange order\n    lst = [int(x) for x in lst]\n\n    # Return the list of integers in strange order\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Find the minimum and maximum values\n    min_val = lst[0]\n    max_val = lst[-1]\n\n    # Check for empty list\n    if len(lst) == 0:\n        return []\n\n    # Check for odd number of values\n    if len(lst) % 2 == 0:\n        return [lst[0], lst[-1], min_val, max_val]\n\n    # Check for even number of values\n    else:\n        return [lst[0], lst[-1], min_val, max_val, lst[-1]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    if len(lst) == 1:\n        return lst[0]\n    if lst[0] < lst[1]:\n        return strange_sort_list(lst[:-1])\n    if lst[1] < lst[2]:\n        return strange_sort_list(lst[:-1] + [lst[0]])\n    if lst[2] < lst[3]:\n        return strange_sort_list(lst[:-1] + [lst[0]] + [lst[1]])\n    if lst[3] < lst[4]:\n        return strange_sort_list(lst[:-1] + [lst[0]] + [lst[1]] + [lst[2]])\n    if lst[4] < lst[5]:\n        return strange_sort_list(lst[:-1] + [lst[0]] + [lst[1]] + [lst[2]] + [lst[3]])\n    if lst[5] < lst[6]:\n        return strange_sort_list(lst[:-1] + [lst[0]] + [lst[1]] + [lst[2]] + [lst[3]] + [lst[4]])\n    if lst[6] < lst[7]:\n        return strange_sort_list(lst[:-1] + [lst[0]] + [lst[1]] + [lst[2]] + [lst[3]] + [lst[4]] + [lst[5]])\n    if lst[7] < lst[8]:\n        return strange_sort_list(lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return sorted(lst, key=lambda x: x - min(lst))", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    elif len(lst) == 1:\n        return lst\n    else:\n        min_val = lst[0]\n        max_val = lst[-1]\n        for i in xrange(len(lst) - 1, -1, -1):\n            if lst[i] < min_val:\n                min_val = lst[i]\n            if lst[i] > max_val:\n                max_val = lst[i]\n        return [lst[i] for i in xrange(len(lst) - 1, -1, -1)]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted = []\n    for i in lst:\n        if i < 0:\n            sorted.append(i)\n            i = i + 1\n        else:\n            if i < len(lst) - 1:\n                sorted.append(lst[i])\n                i = i + 1\n            else:\n                sorted.append(lst[i])\n                i = 0\n    return sorted", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    res = []\n    for i in lst:\n        if i < 0:\n            res.append(i)\n        else:\n            res.append(i + 1)\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def weird_sort(lst):\n        '''\n        Given list of integers, return list in weird order.\n        Worried sorting, is when you start with the maximum value,\n        then minimum of the remaining integers, then maximum and so on.\n        '''\n        def sort(lst):\n            '''\n            Given list of integers, return list in weird order.\n            '''\n            def is_odd(n):\n                '''\n                Given integer n, return True if n is odd, else False.\n                '''\n                return n % 2 == 1\n            if len(lst) == 0:\n                return lst\n            if len(lst) == 1:\n                return lst[0]\n            if lst[0] < lst[1]:\n                return weird_sort(lst[1:])\n            if lst[0] > lst[1]:\n                return weird_sort(lst[:-1])\n            if is_odd(lst[0]):\n                return weird_sort(lst[1:])\n            if is_odd(lst[1]):\n                return weird_sort(lst[:-1])\n            return lst\n        return sort(lst)\n    return weird_sort(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst[0]]\n    if len(lst) == 2:\n        return [lst[0], lst[1]]\n    if len(lst) == 3:\n        return [lst[0], lst[1], lst[2]]\n    if len(lst) == 4:\n        return [lst[0], lst[1], lst[2], lst[3]]\n    if len(lst) == 5:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4]]\n    if len(lst) == 6:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5]]\n    if len(lst) == 7:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6]]\n    if len(lst) == 8:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7]]\n    if len(lst) == 9:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7], lst[8]]\n    if len(lst) == 10:\n        return [lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # make a new list with the sorted list\n    lst_sorted = []\n    for i in lst:\n        lst_sorted.append(i)\n    # sort the new list\n    lst_sorted.sort()\n    # return the sorted list\n    return lst_sorted", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x, reverse=True)\n    lst = lst[:-1]\n    lst = lst[1:]\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    min = lst[0]\n    max = lst[-1]\n    for i in range(1, len(lst) - 1):\n        if lst[i] > max:\n            max = lst[i]\n        if lst[i] < min:\n            min = lst[i]\n    return lst[min:max + 1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    sorted_lst = []\n    for item in lst:\n        if item < lst[0]:\n            sorted_lst.append(lst[0])\n            lst[0] = item\n        else:\n            sorted_lst.append(item)\n            lst.pop(0)\n    return sorted_lst\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # create a sorted list\n    s = []\n    # for each element of the list\n    for i in lst:\n        # if the element is smaller than the minimum value\n        if i < lst[0]:\n            # put it in the sorted list\n            s.append(i)\n        # if the element is larger than the maximum value\n        elif i > lst[-1]:\n            # put it in the sorted list\n            s.append(i)\n        # if the element is equal to the maximum value\n        else:\n            # put it in the sorted list\n            s.append(i)\n    # return the sorted list\n    return s", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = [int(x) for x in lst]\n    lst.reverse()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # A sorted list of integers is a list where the last element is\n    # the minimum of the remaining elements.\n    lst = sorted(lst, key=lambda e: e, reverse=True)\n    lst.reverse()\n    # Now, the minimum element is at the end of the list.\n    return lst[:-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x[0])\n    lst.reverse()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted = []\n    for i in range(len(lst)):\n        if lst[i] > lst[len(lst) - i]:\n            sorted.append(lst[len(lst) - i])\n            lst.pop(len(lst) - i)\n        else:\n            sorted.append(lst[i])\n            lst.pop(i)\n    return sorted", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    if len(lst) == 1:\n        return lst\n    last = lst[-1]\n    if last > lst[0]:\n        lst.reverse()\n    else:\n        lst.reverse()\n    if lst[0] > lst[-1]:\n        lst.reverse()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    res = []\n    for i in lst:\n        res.append(i)\n        res.append(max(lst[:i]) + 1)\n        res.append(min(lst[i+1:]) + 1)\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    n = len(lst)\n    if n == 0:\n        return []\n    else:\n        lst1 = lst[0]\n        lst2 = lst[1]\n        lst3 = lst[2]\n        lst4 = lst[3]\n        lst5 = lst[4]\n        lst6 = lst[5]\n        lst7 = lst[6]\n        lst8 = lst[7]\n        lst9 = lst[8]\n        lst10 = lst[9]\n        lst11 = lst[10]\n        lst12 = lst[11]\n        lst13 = lst[12]\n        lst14 = lst[13]\n        lst15 = lst[14]\n        lst16 = lst[15]\n        lst17 = lst[16]\n        lst18 = lst[17]\n        lst19 = lst[18]\n        lst20 = lst[19]\n        lst21 = lst[20]\n        lst22 = lst[21]\n        lst23 = lst[22]\n        lst24 = lst[23]\n        lst25 = lst[24]\n        lst26 = lst[25]\n        lst27 = lst[26]\n        lst28 = lst[27]\n        lst29 = lst[28]\n        lst30 = lst[29]\n        lst31 = lst[30]\n        lst32 = lst[31]\n        lst33 = lst[32]\n        lst34 = lst[33]\n        lst35 = lst[34]\n        lst36 = lst[35]\n        lst37 = lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    for i in lst:\n        if i < lst[0]:\n            result.append(lst[0])\n        else:\n            result.append(i)\n        if i > lst[-1]:\n            result.append(lst[-1])\n        else:\n            result.append(i)\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # reverse the list\n    lst = reversed(lst)\n\n    # sort the list\n    lst.sort()\n\n    # reverse the sorted list\n    lst = reversed(lst)\n\n    # return the list\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # A list of integers\n    lst = list(lst)\n\n    # Make a list of indices of the integers\n    indices = []\n    for i in lst:\n        indices.append(i)\n\n    # Sort the indices\n    indices.sort()\n\n    # Return the list of indices\n    return indices", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    list = []\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            list.append(lst[i])\n            list.append(lst[i + 1])\n        else:\n            list.append(lst[i + 1])\n            list.append(lst[i])\n    return list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def recurse(lst, min, max):\n        if min == max:\n            return lst\n        if min > max:\n            return lst\n        if min > lst[-1]:\n            lst.insert(-1, max)\n            recurse(lst, min, max)\n        else:\n            lst.insert(0, min)\n            recurse(lst, min, max)\n    return recurse(lst, 0, len(lst)-1)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    num = lst[0]\n    for i in range(1, len(lst)):\n        if num < lst[i]:\n            num = lst[i]\n        elif num > lst[i]:\n            num = lst[i]\n    return [num]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    min_val = lst[0]\n    max_val = lst[-1]\n    # The indices of the remaining elements\n    idx = len(lst) - 1\n    while idx >= 0:\n        if lst[idx] > max_val:\n            max_val = lst[idx]\n            idx -= 1\n        elif lst[idx] < min_val:\n            min_val = lst[idx]\n            idx -= 1\n        else:\n            break\n    # reverse the elements\n    lst = [max_val, min_val, max_val, min_val,...]\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return [lst[i] for i in range(len(lst)) if lst[i]!= lst[len(lst) - 1]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x, reverse=True)\n    # reverse order\n    lst = reversed(lst)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return [int(x) for x in lst]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x, reverse=True)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # Check if list is empty\n    if len(lst) == 0:\n        return lst\n\n    # Sort the list\n    sorted_list = []\n    for i in range(len(lst)):\n        if lst[i] < lst[i + 1]:\n            sorted_list.append(lst[i])\n            lst.remove(lst[i])\n        else:\n            sorted_list.append(lst[i])\n\n    # Return the sorted list\n    return sorted_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted_list = []\n    for element in lst:\n        if element < elements[-1]:\n            sorted_list.append(element)\n        else:\n            sorted_list.append(elements[-1])\n            del elements[-1]\n\n    return sorted_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x, reverse=True)\n    lst = lst[:-1] + lst[1:]\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Sort the list in reverse order.\n    lst = sorted(lst, reverse=True)\n    # Now, sort the list in ascending order.\n    lst = sorted(lst, key=lambda x: x, reverse=False)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    out = []\n    while len(lst) > 0:\n        val = lst.pop(0)\n        for i in range(len(lst)):\n            if val > lst[i]:\n                out.append(lst[i])\n                lst.pop(i)\n        else:\n            out.append(val)\n    return out", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted_list = []\n    for i in lst:\n        if i < 0:\n            sorted_list.append(i)\n            continue\n        elif i > 0:\n            sorted_list.append(i - 1)\n            sorted_list.append(i)\n            sorted_list.append(i)\n        else:\n            sorted_list.append(i)\n            sorted_list.append(i - 1)\n            sorted_list.append(i)\n            sorted_list.append(i - 1)\n    return sorted_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x, reverse=True)\n    lst.reverse()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    l = []\n    for i in range(len(lst)):\n        l.append(lst[i])\n        if i == len(lst) - 1:\n            l.append(lst[0])\n    return l", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x, reverse=True)\n    lst.reverse()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted_list = []\n    for item in lst:\n        sorted_list.append(item)\n        if sorted_list[-1] > sorted_list[-1]:\n            sorted_list.append(sorted_list[-1])\n            sorted_list.append(sorted_list[-2])\n            sorted_list.append(sorted_list[-1])\n            sorted_list.append(sorted_list[-2])\n            sorted_list.append(sorted_list[-1])\n            sorted_list.append(sorted_list[-2])\n            sorted_list.append(sorted_list[-1])\n            sorted_list.append(sorted_list[-2])\n            sorted_list.append(sorted_list[-1])\n            sorted_list.append(sorted_list[-2])\n            sorted_list.append(sorted_list[-1])\n            sorted_list.append(sorted_list[-2])\n            sorted_list.append(sorted_list[-1])\n            sorted_list.append(sorted_list[-2])\n            sorted_list.append(sorted_list[-1])\n            sorted_list.append(sorted_list[-2])\n            sorted_list.append(sorted_list[-1])\n            sorted_list.append(sorted_list[-2])\n            sorted_list.append(sorted_list[-1])\n            sorted_list.", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def f(x):\n        if x < len(lst) - 1:\n            return x\n        else:\n            return lst[-1]\n    return f(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    for i in range(len(lst)):\n        if lst[i] > lst[len(lst) - 1]:\n            result.append(lst[i])\n        else:\n            result.append(lst[len(lst) - 1])\n            result.append(lst[i])\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Find the minimum and maximum values.\n    min_value = lst[0]\n    max_value = lst[-1]\n    # Loop through the remaining elements.\n    for i in range(len(lst)):\n        if lst[i] < min_value:\n            min_value = lst[i]\n        if lst[i] > max_value:\n            max_value = lst[i]\n    # Return the strange sort list.\n    return (lst[::-1] + [max_value] + lst[1:] + [min_value] + lst[:-1])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x, reverse=False)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def odd(num):\n        return num % 2 == 1\n\n    def even(num):\n        return num % 2 == 0\n\n    def max(lst):\n        return max(lst, key=lambda x: x)\n\n    lst = []\n    for i in range(len(lst)):\n        lst.append(odd(i))\n        lst.append(even(i))\n        lst.append(max(lst))\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x, reverse=True)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    for i in range(len(lst)):\n        if lst[i] < lst[i+1]:\n            result.append(lst[i])\n            lst[i] = lst[i+1]\n        elif lst[i] > lst[i-1]:\n            result.append(lst[i])\n            lst[i] = lst[i-1]\n        else:\n            result.append(lst[i])\n            lst[i] = lst[i-1]\n            lst[i-1] = lst[i]\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # We need to sort the list of integers, so we can use a dictionary\n    # to store the values in order.\n    if not lst:\n        return []\n    if not lst[0]:\n        return []\n    min_value = lst[0]\n    max_value = lst[-1]\n    for i in range(1, len(lst)):\n        if lst[i] < min_value:\n            min_value = lst[i]\n        if lst[i] > max_value:\n            max_value = lst[i]\n    # Now we have the list in order, we just need to sort it\n    return sorted(lst, key=lambda x: x, reverse=True)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst.sort(key=lambda x: x < 5)\n    lst.reverse()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if len(lst) == 0:\n        return lst\n\n    min = lst[0]\n    max = lst[-1]\n    sorted_list = []\n    for i in range(1, len(lst)):\n        if min > lst[i]:\n            min = lst[i]\n        elif max < lst[i]:\n            max = lst[i]\n        sorted_list.append(lst[i])\n    return sorted_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    min_val = lst[0]\n    max_val = lst[-1]\n\n    # if lst is empty\n    if len(lst) == 0:\n        return lst\n\n    # if lst has only one element\n    if len(lst) == 1:\n        return lst\n\n    # if lst has more than one element, we can sort it by the values\n    for i in range(len(lst) - 1):\n        if lst[i] < lst[i + 1]:\n            tmp = lst[i]\n            lst[i] = lst[i + 1]\n            lst[i + 1] = tmp\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    l = lst[0]\n    r = lst[-1]\n    while r > l:\n        if r > lst[-1]:\n            l, r = r, lst[-1]\n        else:\n            r, l = l, r\n    return l, r", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n\n    if len(lst) == 1:\n        return [lst[0]]\n\n    if lst[0] == lst[-1] == lst[-2] == lst[-3]:\n        return lst\n    else:\n        return [lst[0]] + strange_sort_list(lst[1:])</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    l = []\n    if len(lst) == 0:\n        return l\n    for i in range(len(lst) - 1):\n        l.append(lst[i])\n        lst.pop(i)\n    l.append(lst[-1])\n    return l", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x, reverse=True)\n    return [lst.pop()] * len(lst) + lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return sorted(lst, key=lambda x: x - min(lst), reverse=True)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # take the first element and set it to the minimum\n    min_idx = 0\n    min_val = lst[0]\n    for idx, val in enumerate(lst):\n        if val < min_val:\n            min_idx = idx\n            min_val = val\n    # take the maximum and set it to the minimum\n    max_idx = len(lst) - 1\n    max_val = lst[max_idx]\n    for idx, val in enumerate(lst):\n        if val > max_val:\n            max_idx = idx\n            max_val = val\n    # take the minimum and set it to the maximum\n    min_idx = len(lst) - 1\n    min_val = lst[min_idx]\n    for idx, val in enumerate(lst):\n        if val < min_val:\n            min_idx = idx\n            min_val = val\n    # take the maximum and set it to the minimum\n    max_idx = len(lst) - 1\n    max_val = lst[max_idx]\n    for idx, val in enumerate(lst):\n        if val > max_val:\n            max_idx = idx\n            max_val = val\n    return lst[min_idx:max_idx]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    max = lst[-1]\n    min = lst[0]\n    for i in range(len(lst)):\n        if lst[i] > max:\n            max = lst[i]\n        if lst[i] < min:\n            min = lst[i]\n\n    return [max, min, max, min]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst is None:\n        return []\n    return [lst[-1]] + [lst[0]] + lst[1:]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # get the minimum and maximum of the list\n    min = lst[0]\n    max = lst[-1]\n\n    # for each element\n    for i in range(min, max+1):\n        # if the element is less than min, swap it with min\n        if i < min:\n            lst.swap(i, min)\n\n        # if the element is greater than max, swap it with max\n        if i > max:\n            lst.swap(i, max)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    if lst[0] == lst[-1]:\n        return lst\n    max = max(lst)\n    min = min(lst)\n    for i in range(1, len(lst)):\n        if lst[i] > max:\n            max = lst[i]\n        if lst[i] < min:\n            min = lst[i]\n    return [lst[i] for i in range(max, min + 1)]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # create a list to hold the results\n    res = []\n    # loop through the list, and sort the list\n    for i in range(len(lst)):\n        if lst[i] < lst[len(lst) - i - 1]:\n            res.append(lst[i])\n        else:\n            res.append(lst[len(lst) - i - 1])\n            res.append(lst[i])\n    # return the result\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = list(lst)\n    lst.sort(key=lambda x: x)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    x = lst[0]\n    i = 1\n    while i < len(lst):\n        if lst[i] < x:\n            x = lst[i]\n            i += 1\n        else:\n            break\n    return x", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n\n    lst = sorted(lst, key=lambda x: x, reverse=True)\n    return [val for val in lst]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return list(sorted(lst, key=lambda x: x > x[-1]))", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = list(lst)\n    lst.reverse()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    min_val = lst[0]\n    max_val = lst[-1]\n    while len(lst) > 1:\n        val = lst[-2]\n        if val < min_val:\n            min_val = val\n        if val > max_val:\n            max_val = val\n        lst.pop(-1)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x, reverse=True)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n\n    def sort_func(x, y):\n        if x < y:\n            return -1\n        elif x == y:\n            return 0\n        else:\n            return 1\n\n    lst.sort(sort_func)\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return lst\n    if len(lst) == 1:\n        return lst\n    min = lst[0]\n    max = lst[-1]\n    while max >= min:\n        min, max = max, min\n        for i in range(min, max+1):\n            if lst[i] < lst[i-1]:\n                lst.insert(i, lst[i-1])\n                break\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    l = []\n    for i in lst:\n        if i == 0:\n            l.append(i)\n            continue\n        if i > l[-1] or i < l[0]:\n            l.append(i)\n    return l", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return [lst[i] for i in range(len(lst) - 1) if lst[i] < lst[i + 1]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    res = []\n    for i in lst:\n        res.append(i)\n        if i < len(lst) - 1:\n            res.append(lst[i])\n            res.append(lst[i + 1])\n            res.append(lst[i + 2])\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # start with the minimum\n    min = lst[0]\n    i = 1\n    while i < len(lst):\n        if lst[i] < min:\n            min = lst[i]\n            i = i + 1\n    # then maximum of remaining integers\n    max = lst[-1]\n    i = len(lst) - 1\n    while i >= 0:\n        if lst[i] > max:\n            max = lst[i]\n            i = i - 1\n    # then minimum and so on\n    return lst[:i] + lst[i + 1:]\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted_list = []\n    for i in lst:\n        if i < len(lst) - 1:\n            sorted_list.append(lst[i])\n            sorted_list.append(lst[i + 1])\n            sorted_list.append(lst[i + 2])\n            sorted_list.append(lst[i + 3])\n            sorted_list.append(lst[i + 4])\n            sorted_list.append(lst[i + 5])\n            sorted_list.append(lst[i])\n            sorted_list.append(lst[i + 1])\n            sorted_list.append(lst[i + 2])\n            sorted_list.append(lst[i + 3])\n            sorted_list.append(lst[i + 4])\n            sorted_list.append(lst[i + 5])\n        else:\n            sorted_list.append(lst[i])\n            sorted_list.append(lst[i + 1])\n            sorted_list.append(lst[i + 2])\n            sorted_list.append(lst[i + 3])\n            sorted_list.append(lst[i + 4])\n            sorted_list.append(lst[i + 5])\n            sorted_list.append(lst[i])\n            sorted_list.append(lst[i + 1])\n            sorted_list.append(lst[i + 2])\n            sorted_list.append(lst[i", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Sort the list in reverse order\n    lst = sorted(lst, key=lambda x: x, reverse=True)\n    # Sort the list in the strange order\n    lst = sorted(lst, key=lambda x: x, reverse=False)\n    # Return the list\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Sort the list in ascending order.\n    lst = sorted(lst, key=lambda x: x.min(), reverse=True)\n\n    # Now, reverse the list.\n    lst = sorted(lst, key=lambda x: x.max(), reverse=True)\n\n    # Now, sort the list in descending order.\n    lst = sorted(lst, key=lambda x: x.max(), reverse=True)\n\n    # Return the list.\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return [lst[i] for i in reversed(sorted(lst, key=lambda x: x))]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return sorted(lst, key=lambda x: -x, reverse=True)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    ret = []\n    for item in lst:\n        if item < 0:\n            ret.append(item)\n        else:\n            ret.append(item - 1)\n    return ret", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    def compare(a, b):\n        return cmp(a, b)\n\n    def swap(a, b):\n        return a, b\n\n    def sort(lst):\n        '''\n        Sort list by comparing values and then by comparing by\n        the value of the element.\n        '''\n        result = []\n        for i in range(len(lst)):\n            value = lst[i]\n            if value < lst[i + 1]:\n                result.append(lst[i])\n                lst[i] = lst[i + 1]\n                lst[i + 1] = value\n            elif value > lst[i - 1]:\n                result.append(lst[i])\n                lst[i] = lst[i - 1]\n                lst[i - 1] = value\n            else:\n                swap(lst[i], lst[i + 1])\n                swap(lst[i + 1], lst[i - 1])\n                result.append(lst[i])\n                result.append(lst[i + 1])\n                result.append(lst[i - 1])\n\n        return result\n\n    return sorted(strange_sort_list(lst))", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    max_index = max(lst)\n    min_index = min(lst)\n    max_value = max(lst)\n    min_value = min(lst)\n    idx = 0\n    while idx < len(lst):\n        if lst[idx] > max_value:\n            max_value = lst[idx]\n            max_index = idx\n        if lst[idx] < min_value:\n            min_value = lst[idx]\n            min_index = idx\n        idx += 1\n    return [lst[max_index], lst[min_index], lst[max_index + 1], lst[min_index + 1]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    lst = sorted(lst, key=lambda x: x, reverse=True)\n\n    if lst == []:\n        return []\n\n    if len(lst) > 1:\n        lst = [strange_sort_list(lst[1:])] + lst[1:]\n    else:\n        lst = [strange_sort_list(lst[0])] + lst[1:]\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Convert list to string\n    s = \"\"\n    for i in lst:\n        s += str(i) + \" \"\n    return s", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x, reverse=True)\n    if len(lst) == 0:\n        return lst\n    for i in range(len(lst) - 1):\n        lst[i], lst[i + 1] = lst[i + 1], lst[i]\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    l = list(lst)\n    if len(l) == 1:\n        return l\n\n    min_val = l[0]\n    max_val = l[0]\n\n    for i in range(1, len(l)):\n        if l[i] < min_val:\n            min_val = l[i]\n        if l[i] > max_val:\n            max_val = l[i]\n\n    return l", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    i = 0\n    j = len(lst)\n    while i < j:\n        if lst[i] < lst[j - i]:\n            swap = lst[i], lst[j - i]\n            lst[i], lst[j - i] = lst[j - i], lst[i]\n            lst[j - i], swap = swap, lst[j - i]\n        i += 1\n        j -= 1\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x, reverse=True)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # sort the list in reverse order\n    reversed = sorted(lst, key=lambda x: x, reverse=True)\n    # sort the list in reverse order\n    reversed = reversed.reverse()\n    # remove the last element\n    reversed.pop(-1)\n    # sort the list in reverse order\n    reversed.reverse()\n    # return the list\n    return reversed\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    lst.sort(reverse=True)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    lst.sort()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return [lst[i] for i in range(len(lst)) if lst[i] < lst[i+1]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # initialize a list to hold the order of the items in the list.\n    order = []\n\n    # loop over the items in the list and add them to the order list.\n    for i in range(len(lst)):\n        order.append(lst[i])\n        if i > 0:\n            order.append(lst[i-1])\n\n    return order", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: abs(x))\n    lst = [ x for x in lst if x < 0 ]\n    lst = [ x for x in lst if x > 0 ]\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # This function is the same as the standard sort function\n    # except that it sorts in strange order.\n    # It is equivalent to the following code:\n    #    for i in range(len(lst)):\n    #        lst[i] = max(lst[i-1:])\n    #    for i in range(len(lst)):\n    #        lst[i] = min(lst[i+1:])\n    #    for i in range(len(lst)):\n    #        lst[i] = min(lst[i-1:])\n\n    lst = [lst[i] for i in range(len(lst))]\n    if len(lst) == 0:\n        return lst\n    else:\n        return [lst[-1]] + strange_sort_list(lst[:-1])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    def odd(x):\n        if x == 0:\n            return 1\n        else:\n            return 0\n    def even(x):\n        if x == 1:\n            return 1\n        else:\n            return 0\n    odd_list = []\n    even_list = []\n\n    for i in lst:\n        if odd(i) == odd(i-1):\n            odd_list.append(i)\n        else:\n            even_list.append(i)\n\n    return odd_list + even_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    assert len(lst) > 0\n    # sort list in decreasing order\n    lst.sort(key=lambda x: x[0])\n    # get the max value from the list\n    maxval = lst[0]\n    # sort the remaining list in ascending order\n    lst.reverse()\n    for i in range(1, len(lst) - 1):\n        # get the min value of the remaining list\n        minval = lst[i]\n        # add the minimum value to the max value and the max value to the min value\n        maxval = max(maxval, minval)\n        minval = min(minval, maxval)\n        # add the new max value to the list\n        lst.append(maxval)\n        # add the new min value to the list\n        lst.append(minval)\n    # return the list in strange order\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Create empty list for the strange sort\n    lst2 = []\n    # Loop through the list of integers and put them into a list\n    for i in lst:\n        lst2.append(i)\n    # Return the strange sort list\n    return lst2", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    if lst[0] == lst[-1]:\n        return [lst[0]] + lst[1:]\n    else:\n        return lst[:] + [lst[-1]] + lst[1:]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n\n    if len(lst) == 1:\n        return lst\n\n    lst = sorted(lst, key=lambda x: x, reverse=False)\n\n    # Now we have to reverse the order of the values.\n    for i in range(len(lst)):\n        lst[i] = lst[i][::-1]\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    for i in range(len(lst)):\n        if lst[i] > lst[i-1]:\n            result.append(lst[i])\n            lst.pop(i)\n        elif lst[i] < lst[i+1]:\n            result.append(lst[i])\n            lst.pop(i)\n        elif lst[i] == lst[i+1]:\n            result.append(lst[i])\n            lst.pop(i)\n        else:\n            result.append(lst[i])\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    i = 0\n    while i < len(lst):\n        if lst[i] > lst[i+1]:\n            lst.insert(i, lst[i])\n            lst.insert(i, lst[i+1])\n            lst.insert(i, lst[i])\n            i += 1\n        else:\n            lst.insert(i, lst[i])\n            i += 1\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # TODO: check for duplicates\n    tmp = []\n    for i in range(len(lst)):\n        if lst[i] < lst[i+1]:\n            tmp.append(lst[i])\n        elif lst[i] > lst[i+1]:\n            tmp.append(lst[i])\n        else:\n            tmp.append(lst[i])\n    # sort\n    return tmp", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Sort the list in strange order\n    lst = sorted(lst, key=lambda x: abs(x), reverse=True)\n    # Return the list\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def sort_list(lst):\n        \"\"\"\n        Sort list of integers in a strange way.\n        \"\"\"\n        return [lst[i] for i in range(len(lst)) if lst[i] < lst[i + 1]]\n\n    def sort_list2(lst):\n        \"\"\"\n        Sort list of integers in a strange way.\n        \"\"\"\n        return [lst[i] for i in range(len(lst)) if lst[i] > lst[i + 1]]\n\n    lst = sorted(lst, key=sort_list)\n    lst = sorted(lst, key=sort_list2)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    if len(lst) == 1:\n        return lst\n    idx = 0\n    while idx < len(lst) - 1:\n        if lst[idx] > lst[idx+1]:\n            lst.insert(idx, lst[idx+1])\n            idx += 1\n        elif lst[idx] < lst[idx+1]:\n            lst.insert(idx, lst[idx])\n            idx += 1\n        else:\n            break\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        return [strange_sort_list(lst[0]), strange_sort_list(lst[1])]\n    return [strange_sort_list(lst[0]), strange_sort_list(lst[1]), strange_sort_list(lst[2]), strange_sort_list(lst[3]), strange_sort_list(lst[4]), strange_sort_list(lst[5])]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x, reverse=True)\n    lst.reverse()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    sorted = []\n    for i in lst:\n        if i < lst[0]:\n            sorted.append(lst[0])\n            lst[0] = i\n        if i > lst[len(lst) - 1:]:\n            sorted.append(lst[len(lst) - 1])\n            lst[len(lst) - 1] = i\n        else:\n            sorted.append(i)\n\n    return sorted", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # find minimum\n    min = lst[0]\n    for x in lst[1:]:\n        if x < min:\n            min = x\n    # find maximum\n    max = lst[-1]\n    for x in lst[:-1]:\n        if x > max:\n            max = x\n    # create list\n    return [max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min, max, min,", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    def cmp(x, y):\n        if x < y:\n            return -1\n        elif x == y:\n            return 0\n        else:\n            return 1\n\n    return [sorted(lst, cmp)]\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # max of remaining list\n    max_val = lst[-1]\n    # min of remaining list\n    min_val = lst[0]\n    # max of remaining list\n    max_val = lst[-1]\n    # min of remaining list\n    min_val = lst[0]\n    # min of remaining list\n    max_val = lst[-1]\n    # min of remaining list\n    max_val = lst[0]\n    # max of remaining list\n    max_val = lst[-1]\n    # min of remaining list\n    max_val = lst[0]\n    # max of remaining list\n    max_val = lst[-1]\n    # min of remaining list\n    max_val = lst[0]\n    # max of remaining list\n    max_val = lst[-1]\n    # min of remaining list\n    max_val = lst[0]\n    # max of remaining list\n    max_val = lst[-1]\n    # min of remaining list\n    max_val = lst[0]\n    # max of remaining list\n    max_val = lst[-1]\n    # min of remaining list\n    max_val = lst[0]\n    # max of remaining list\n    max_val = lst[-1]\n    # min of remaining list\n    max_val = lst[0]\n    # max of remaining list\n    max_val = lst[-1]\n    # min of remaining list\n    max_val = lst[0]\n    # max of remaining list\n    max_val = lst[-1]\n    # min of", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse()\n    lst.reverse", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return sorted(lst, key=lambda i: i, reverse=False)\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        return lst\n    if lst[0] > lst[1]:\n        return [lst[0]] + strange_sort_list(lst[1:])\n    if lst[0] < lst[1]:\n        return [lst[1]] + strange_sort_list(lst[:-1])\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted_list = []\n    for i in range(len(lst)):\n        if lst[i] < lst[i+1]:\n            sorted_list.append(lst[i])\n            lst.pop(i)\n        else:\n            sorted_list.append(lst[i])\n            lst.pop(i)\n    return sorted_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # TODO: handle empty lists\n    if len(lst) == 0:\n        return lst\n\n    def get_max_index(i):\n        for j in range(len(lst) - 1):\n            if lst[j] > lst[j + 1]:\n                return j\n        return len(lst) - 1\n\n    def get_min_index(i):\n        for j in range(len(lst) - 1):\n            if lst[j] < lst[j + 1]:\n                return j\n        return len(lst) - 1\n\n    lst = sorted(lst, key=get_max_index, reverse=True)\n    lst = sorted(lst, key=get_min_index, reverse=True)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    min, max = lst[0], lst[-1]\n    return [max, min, min, max]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    else:\n        l = lst[0]\n        for i in range(1, len(lst)):\n            if lst[i] > l:\n                l = lst[i]\n            else:\n                break\n        return l", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n\n    # Sort the list in ascending order, then reverse it.\n    # Then sort the reversed list in ascending order.\n    # Then reverse the sorted list again, and so on.\n\n    lst2 = reversed(lst)\n    lst2_rev = reversed(lst2)\n\n    for i in xrange(len(lst2)):\n        lst2[i], lst2_rev[i] = lst2_rev[i], lst2[i]\n\n    lst2_rev = reversed(lst2_rev)\n\n    for i in xrange(len(lst2_rev)):\n        lst2_rev[i], lst2[i] = lst2[i], lst2_rev[i]\n\n    return lst2", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n\n    ret = []\n    for i in range(len(lst)):\n        if lst[i] < lst[i - 1]:\n            ret.append(lst[i])\n            lst[i] = lst[i - 1]\n            lst[i - 1] = ret.pop()\n        else:\n            ret.append(lst[i])\n            lst[i] = lst[i + 1]\n            lst[i + 1] = ret.pop()\n\n    return ret", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Make list of the sorted values\n    sortedlist = []\n    # Loop through the list\n    for i in range(len(lst)):\n        # Get the value from the list\n        val = lst[i]\n        # If the value is smaller than the minimum value, add it\n        if val < min(lst):\n            sortedlist.append(val)\n            # Increment the minimum value\n            min(lst) = val\n        # If the value is larger than the maximum value, add it\n        elif val > max(lst):\n            sortedlist.append(val)\n            # Increment the maximum value\n            max(lst) = val\n        # Otherwise, add it to the list\n        else:\n            sortedlist.append(val)\n    # Return the list\n    return sortedlist", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    for i in lst:\n        if i < 0:\n            result.append(i)\n            continue\n        if i > lst[0]:\n            result.append(i)\n            continue\n        result.append(lst[i])\n        result.append(lst[0])\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n    if len(lst) == 1:\n        return lst\n    lst.sort(reverse=True)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n\n    lst = sorted(lst, key=lambda x: x[0])\n    for i, x in enumerate(lst):\n        if x > lst[i]:\n            lst[i], lst[i+1] = lst[i+1], lst[i]\n        elif x < lst[i]:\n            lst[i], lst[i+1] = lst[i+1], lst[i]\n        else:\n            lst[i], lst[i+1] = lst[i+1], lst[i]\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n\n    min_idx = len(lst) - 1\n    max_idx = 0\n    for i in range(len(lst)):\n        if lst[i] > lst[max_idx] or lst[i] == lst[max_idx]:\n            max_idx = i\n        if lst[i] < lst[min_idx] or lst[i] == lst[min_idx]:\n            min_idx = i\n\n    return lst[min_idx:max_idx]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Make a list of the integers in sorted order\n    sorted = [int(x) for x in lst]\n\n    # Reverse the list and add the minimum value to the end of it\n    reversed = sorted.reverse()\n    reversed.insert(0, sorted[0])\n\n    # Make a new list with all the integers in sorted order and reverse\n    # the order of the elements\n    new = [sorted[0]] + reversed\n\n    # Replace the original list with the new list\n    lst = new\n\n    # Return the list\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Sort the list\n    lst = sorted(lst, key=lambda x: x, reverse=True)\n    # If the list is empty, return an empty list\n    if len(lst) == 0:\n        return []\n    # Sort the list in reverse order\n    lst = sorted(lst, key=lambda x: x, reverse=True)\n    # If the list is empty, return an empty list\n    if len(lst) == 0:\n        return []\n    # If the list is empty, return an empty list\n    if len(lst) == 0:\n        return []\n    # Return the list\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    lst = lst[1:]\n    i = 0\n    while True:\n        i += 1\n        if lst[i] == lst[i-1]:\n            lst.reverse()\n            i -= 1\n        else:\n            break\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return [item for item in lst if item < item] + [item for item in lst if item > item]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n    elif len(lst) == 1:\n        return [lst[0]]\n    else:\n        return strange_sort_list(lst[1:]) + strange_sort_list(lst[:-1])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    i = 0\n    j = len(lst) - 1\n    while i < j:\n        if lst[i] < lst[j - i]:\n            i += 1\n        elif lst[i] > lst[j - i]:\n            j -= 1\n        else:\n            break\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    tmp = []\n    for i in range(len(lst) - 1):\n        if lst[i] < lst[i + 1]:\n            tmp.append(lst[i])\n            lst[i] = lst[i + 1]\n            lst[i + 1] = tmp[-1]\n        else:\n            tmp.append(lst[i])\n            lst[i] = lst[i + 1]\n            lst[i + 1] = tmp[-1]\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    l = []\n    l.append(lst[0])\n    l.append(lst[1])\n    l.append(lst[2])\n    for i in range(3, len(lst)):\n        l.append(lst[i])\n        l.append(lst[i-1])\n        l.append(lst[i-2])\n    return l", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # return list with the smallest value to the largest value\n    return [lst[i] for i in range(len(lst) - 1, -1, -1)]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # This function is called with a list of integers, which is guaranteed to be\n    # sorted. It will return a list of integers that is not sorted.\n    # The list is assumed to have been sorted in the order given.\n    # This function takes a list of integers and returns a list of integers\n    # that is not sorted. The list is assumed to have been sorted in the order\n    # given.\n    #\n    # The function accepts a list of integers in any order and returns a list\n    # of integers in a strange order.\n\n    lst = sorted(lst)\n\n    # The first thing to do is to create a list of all the integers. Then we\n    # loop through the list and check if the current integer is less than the\n    # previous integer. If it is, then we increase the index by 1. If it is\n    # greater, we decrease the index by 1. If it is equal, we just keep going\n    # until we reach the end of the list. If it is not equal, we return the\n    # list unchanged.\n    #\n    # The function returns a list of integers in a strange order.\n\n    list_of_int = []\n    index = 0\n\n    while index < len(lst):\n        if lst[index] < lst[index - 1:", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def is_odd(n):\n        return n % 2 == 0\n    n = len(lst)\n    if n == 0:\n        return lst\n    if n == 1:\n        return [lst[0]]\n    if is_odd(n):\n        return strange_sort_list(lst[1:]) + strange_sort_list(lst[:-1])\n    if is_odd(n - 1):\n        return strange_sort_list(lst[:-1]) + strange_sort_list(lst[1:])\n    if n % 2 == 0:\n        return strange_sort_list(lst[:-1]) + strange_sort_list(lst[1:]) + strange_sort_list(lst[:-2])\n    if n % 2 == 1:\n        return strange_sort_list(lst[:-2]) + strange_sort_list(lst[:-1]) + strange_sort_list(lst[:-2])\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    return sorted(lst, key=lambda x: -x, reverse=True)[:-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: abs(x), reverse=True)\n    return lst"]]