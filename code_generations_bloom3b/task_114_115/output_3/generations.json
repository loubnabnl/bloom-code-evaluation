[["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Init\n    numsLen = len(nums)\n    numsSum = 0\n    if numsLen == 0:\n        return numsSum\n    # Search\n    for i in xrange(1, numsLen - 1):\n        if nums[i] not in nums[i + 1]:\n            numsSum = min(numsSum, nums[i])\n    # Return\n    return numsSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n = len(nums)\n    if n == 0:\n        return 0\n    if n == 1:\n        return nums[0]\n    if n == 2:\n        return min(minSubArraySum(nums[:-1]), nums[0]+nums[1])\n    if n == 3:\n        return min(minSubArraySum(nums[:-2]), nums[0]+nums[1]+nums[2])\n    if n == 4:\n        return min(minSubArraySum(nums[:-3]), nums[0]+nums[1]+nums[2]+nums[3])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return min([sum(numpy.array(n)) for n in nums])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    nums = numpy.array(nums, dtype=int)\n    for i in range(len(nums)):\n        if len(nums) > i:\n            left, right = nums[:i], nums[i:]\n            left = min(left, right)\n            right = min(right, left)\n            minSum = min(minSum, left)\n            minSum = min(minSum, right)\n\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    nums = [num for num in nums if num!= 0]\n    nums.sort()\n    bestNum = min(nums)\n    return nums - [bestNum]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    s = 0\n    for i in range(len(nums)):\n        if len(nums) > 1:\n            if nums[i] < nums[min(len(nums), len(nums)-1)]:\n                s += nums[i]\n    return s", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n = len(nums)\n    if n == 0:\n        return 0\n    if n == 1:\n        return nums[0]\n    sum = 0\n    for i in range(1, n):\n        if nums[i] not in nums[0:i]:\n            sum += nums[i]\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = list(nums)\n    i = 0\n    while i < len(nums):\n        if len(nums) > i:\n            nums[i], nums[i+1] = nums[i+1], nums[i]\n        i += 1\n    return nums[0]\n</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        s = 0\n        for x in nums:\n            if x not in s:\n                s = x\n        return s\n</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        minSums = []\n        for i in range(len(nums)):\n            if nums[i] is None:\n                continue\n            sum = 0\n            for j in range(len(nums) - i):\n                if j == len(nums) - 1:\n                    sum += nums[i]\n                else:\n                    sum += minSums[i] + minSubArraySum(nums[i + 1:j])\n            minSums.append(sum)\n        return minSums", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum = None\n    if nums == []:\n        return minSum\n    else:\n        for num in nums:\n            if len(nums) == 1:\n                minSum = min(nums, key=len)\n            else:\n                subArray = nums[:len(nums)]\n                minSum = minSubArraySum(subArray)\n        return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min = nums[0]\n    for i in range(len(nums)):\n        if nums[i] is not None:\n            min += nums[i]\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums == []:\n        return 0\n    min = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i]!= min:\n            min = nums[i]\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    sum = 0\n    for i in range(0, len(nums)):\n        if nums[i]!= 0:\n            sum += nums[i]\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    else:\n        i = 0\n        sum = 0\n        while len(nums) > i:\n            nums[i] = min(nums[i], sum)\n            sum += nums[i]\n            i += 1\n        return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        minimum = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] < minimum:\n                minimum = nums[i]\n        return minimum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n    for i in range(len(nums) - 1):\n        if sum <= nums[i] + nums[i + 1]:\n            sum = nums[i] + nums[i + 1]\n            break\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return sum(min(nums, key=int) for num in nums)</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = map(int, nums)\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i] is not None:\n            minSum = min(minSum, nums[i])\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = [int(num) for num in nums]\n    sum = 0\n    for i in range(len(nums) - 1):\n        sum += nums[i] + nums[len(nums) - i - 1]\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    subArray = [0] * nums.size()\n    for i in range(nums.size()):\n        if nums[i]!= 0:\n            subArray[i] = nums[i]\n            break\n    return min(subArray)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    # compute the sum of every sub-array\n    numArraySum = [0] * len(nums)\n    for i in range(len(nums)):\n        numArraySum[i] = nums[i]\n    minSum = numArraySum[0]\n    sumArray = [0] * len(nums)\n    for i in range(len(nums)):\n        if len(nums) > 0:\n            sumArray[i] = nums[i:len(nums) - 1] + numArraySum[i]\n            nums[i:len(nums) - 1] = 0\n        else:\n            nums.append(0)\n        numArraySum[i] = sumArray[i]\n    # return min sum of all sub-arrays\n    return min(sumArray)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = tuple(nums)\n    result = sum(nums)\n    for i in xrange(len(nums) - 1):\n        if nums[i] + nums[i + 1] < result:\n            result = nums[i] + nums[i + 1]\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    # Stack for arrays of integers and their sums\n    stack = [[] for i in range(len(nums))]\n\n    # Store the initial sum of the non-empty sub-array in stack[0]\n    sum1 = 0\n    for num in nums:\n        if num not in stack[0]:\n            stack[0].append(sum1)\n            sum1 = num\n            stack[1].append(sum1)\n\n    # Traverse the array, searching for non-empty sub-arrays\n    while True:\n        # Check for empty sub-array\n        if len(stack[0]) == 1:\n            return sum1\n\n        # Look for the minimum sum of the sub-array\n        minNum = min(stack[0])\n        stack[0].pop()\n        stack[1].pop()\n        sum2 = sum1 + minNum\n        for num in stack[0]:\n            sum2 = min(sum2, num)\n\n        # Store the sum of the non-empty sub-array in stack[0]\n        sum1 = sum2\n        stack[0].append(sum1)\n\n        # Traverse the array, searching for non-empty sub-arrays\n        if len(stack[0]) == 1:\n            break", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i]!= 0:\n            min = min + minSubArraySum(nums[:i] + nums[i:])\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) <= 1:\n        return nums[0]\n    maxIndex = 0\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            sum = max(sum, nums[i])\n            maxIndex = i\n    return sum if maxIndex > 0 else nums[maxIndex]\n</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums)!= len(nums[0]):\n        raise TypeError(\"minSubArraySum(): inputs must be arrays of the same length!\")\n\n    sum = 0\n    for i in xrange(len(nums)):\n        sum += nums[i]\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n = len(nums)\n    sum = 0\n    for i in range(n):\n        if nums[i]:\n            sum += nums[i]\n        else:\n            break\n    return sum\n</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min = nums[0]\n    for num in range(len(nums)):\n        if len(nums) > num:\n            if nums[i] == min:\n                min = nums.pop(num)\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    n = len(nums)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return nums[0]\n    elif n == 2:\n        min = min(nums[0], nums[1])\n        for i in range(2, n):\n            if min < min(nums[i], nums[i-1]):\n                min = min(nums[i], nums[i-1])\n        return min\n    else:\n        d = min(nums[0], nums[1], nums[-2])\n        for i in range(2, n):\n            if d < min(nums[i], nums[i-1], nums[-2]):\n                d = min(nums[i], nums[i-1], nums[-2])\n        for i in range(2, n):\n            if d < min(nums[i], nums[i-1], nums[-2], nums[-3]):\n                d = min(nums[i], nums[i-1], nums[-2], nums[-3])\n        for i in range(2, n):\n            if d < min(nums[i], nums[i-1], nums[-2], nums[-3], nums[-4]):\n                d = min(nums[i], nums[i-1], nums[-2]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    r = {}\n    for num in nums:\n        r[num] = min(nums, key=lambda x: x if x else 0)\n    return r.get(0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        if min_sum == nums[i]:\n            continue\n        min_sum = min(nums[i], min_sum)\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num:\n            sum += num\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sums = [0 for _ in range(nums.shape[0])]\n    for i, num in enumerate(nums):\n        if num not in sums:\n            sums.append(num)\n    return min(sums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # No need to optimize: check for a zero length sub-array\n    if len(nums) == 0:\n        return 0\n    # If the sub-array contains zero elements, return zero\n    if len(nums) == 0:\n        return 0\n    # Otherwise, return the minimum of the sub-array sums\n    minSum = sum(nums)\n    for n in range(len(nums)):\n        if nums[n] > 0:\n            minSum = min(minSum, nums[n])\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums)!= 1:\n        raise ValueError('minSubArraySum: nums must be non-empty')\n    sum = nums[0]\n    for i in range(1, len(nums)):\n        if len(nums[i]) == 0:\n            continue\n        sum += nums[i] * nums[i]\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) <= 1:\n        return nums[0]\n    sum = 0\n    for x in range(1, len(nums)):\n        if nums[x]!= 0:\n            sum += minSubArraySum(nums[x:])\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i]:\n            return min(nums[i:])-min(nums[0:i])\n    return -len(nums) # if no non-zero elements, the array is empty", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min = nums[0]\n    max = nums[-1]\n\n    if len(nums) == 0:\n        return min\n\n    for i in range(len(nums) - 1):\n        if nums[i] > nums[-1]:\n            min = min(nums[i], min)\n        if nums[i] < nums[-1]:\n            max = max(nums[i], max)\n\n    return min + max", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    result = -1\n    for index in range(len(nums)):\n        if index < len(nums) and nums[index] > 0:\n            result = min(result, nums[index])\n            nums = nums[index+1:]\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    for index in range(len(nums)):\n        if nums[index]!= 0:\n            sum = nums[index + 1] + nums[index + 2] + nums[index + 3] + nums[index + 4]\n            if sum < min(nums):\n                min = sum\n                minIndex = index\n        else:\n            continue\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    num = len(nums)\n    if num == 0:\n        return nums[0]\n    if num == 1:\n        return nums[0]\n    if num == 2:\n        return nums[1]\n    if num == 3:\n        return nums[2]\n    if num == 4:\n        return nums[3]\n    raise RuntimeError(\"Invalid number of numbers given\")", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = list(nums)\n    nums.sort()\n    min_num = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] is None:\n            return -1\n        if min_num < nums[i]:\n            min_num = nums[i]\n    return min_num", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = sorted(nums, key=lambda x:x)\n    minSum = min(nums)\n    for i in range(len(nums)):\n        if nums[i]:\n            minSum = min(nums, min(nums, minSum + nums[i]))\n        elif nums[i]:\n            minSum = minSum + nums[i]\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    nums = np.array(nums)\n    newNums = np.array([])\n    newSum = 0\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            newNums.append(nums[i])\n            newSum = min(newSum, sum(newNums))\n    return newSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    assert nums[0] is not None\n    assert nums[1] is not None\n    assert len(nums) >= 2\n\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0] is None:\n        return nums[1]\n    if nums[1] is None:\n        return nums[0]\n    if nums[1] < nums[0]:\n        return nums[0]\n    if nums[0] < nums[1]:\n        return nums[1]\n    return min(nums[0], nums[1])\n</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min = sum(nums)\n    for i in range(len(nums)):\n        if nums[i] == None:\n            continue\n        elif len(nums) == 0:\n            min = min + nums[i]\n            continue\n        else:\n            min = min + minSubArraySum(nums[:i] + nums[i+1:])\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    array = []\n    for i in range(len(nums)):\n        if nums[i]:\n            array.append(nums[i])\n    for i in range(len(array)):\n        if len(array[i]) == 1:\n            array.append(array[i][0])\n    return min(array)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] is None:\n            continue\n        min = nums[i]\n        for j in range(i, len(nums)):\n            if nums[j] is None:\n                continue\n            min = min + minSubArraySum(nums[:j] + nums[j+1:])\n        return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return min(sum(nums) for nums in zip(nums, nums[:-1]) if nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = np.asarray(nums, dtype=int)\n    min = nums[0]\n    max = nums[-1]\n    for i in range(len(nums)):\n        if min < nums[i]:\n            min = nums[i]\n        if max > nums[i]:\n            max = nums[i]\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = 0\n    for num in nums:\n        sum = min(sum, num)\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i]:\n            min = nums[i]\n            if min > 0:\n                nums.remove(min)\n                for subNum in nums:\n                    if subNum == min:\n                        nums.remove(subNum)\n        else:\n            min = nums.pop(0)\n            if min > 0:\n                nums.append(min)\n                for subNum in nums:\n                    if subNum == min:\n                        nums.append(subNum)\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums)!= 1:\n        raise ValueError(\"minSubArraySum only takes a single argument\")\n\n    nums = map(int, nums)\n    min = 0\n    for i in range(len(nums)):\n        if i == 0:\n            return nums[i]\n        else:\n            if min < nums[i]:\n                min = nums[i]\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum = nums[0]\n    for i in range(1, len(nums)):\n        if len(nums) == i:\n            minSum += nums[i]\n    return minSum\n</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i in range(len(nums)):\n        if len(nums) > 1:\n            if nums[i] < minSubArraySum(nums[:i] + nums[1:]):\n                minSubArraySum = nums[i]\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = [int(x) for x in nums]\n    if not nums:\n        return nums[0]\n    minNum = min(nums)\n    for i in range(len(nums)):\n        if nums[i] == minNum:\n            minNum = nums[i]\n    return minNum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minNum = nums[0]\n    maxNum = nums[-1]\n    for num in nums[:]:\n        if len(nums) == 1:\n            yield (minNum, maxNum)\n            continue\n        if num == minNum:\n            minNum = maxNum = num\n            yield (minNum, maxNum)\n            continue\n        if num == maxNum:\n            maxNum = minNum = num\n            yield (minNum, maxNum)\n            continue\n        minNum, maxNum = minNum, maxNum\n        yield (minNum, maxNum)\n\n    assert minNum!= 0 and maxNum!= 0", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i]:\n            min_sub_array_sum = min(min_sub_array_sum, nums[i])\n            if min_sub_array_sum!= 0:\n                print(\"minSubArraySum: \" + str(nums[i]))\n                print(\"minSubArraySum: \" + str(min_sub_array_sum))\n                return min_sub_array_sum\n            else:\n                print(\"minSubArraySum: \" + str(nums[i]))\n                print(\"minSubArraySum: \" + str(nums[i]))\n    return -1", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n = len(nums)\n    if n == 0:\n        return 1\n    if n == 1:\n        return nums[0]\n    return min(minSubArraySum(nums[::-1]), minSubArraySum(nums[:-1]))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    sum = 0\n    for i in range(len(nums)):\n        if len(nums) > i:\n            sum += minSubArraySum(nums[:i])\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return min(i for i, nums in enumerate(nums) if len(nums) > 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i]:\n            sum += nums[i]\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minNum = -1\n    minSum = 0\n    for num in nums:\n        if minNum == -1:\n            minNum = num\n        if num == minNum:\n            minSum += 1\n    return minNum, minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    result = sum(nums)\n    for i in range(len(nums)):\n        if nums[i] is not None:\n            result = min(result, nums[i])\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = 0\n    for i in range(len(nums)):\n        if len(nums) > i:\n            nums[i] = nums[i+1:]\n        sum = min(sum, nums[i])\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    arr = [num for num in nums]\n    def sum(n):\n        \"\"\"\n        Given an integer n, return the sum of the numbers in the sub-array of\n        numbers with size n\n        \"\"\"\n        return sum(n)\n\n    num = sum(nums[:-1])\n    sum = sum(nums[-1:])\n    return min(num, sum)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    # find the maximum element in nums\n    max_index = max(nums)\n    max_value = nums[max_index]\n    index_list = [max_index]\n    while index_list:\n        if len(nums) > index_list[1]:\n            index_list[0] = index_list[1]\n            index_list[1] = max_index\n            max_index = max(nums)\n        else:\n            index_list.pop(0)\n            index_list.pop(1)\n            max_index = max(nums)\n            max_value = nums[max_index]\n    return max_value", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return None\n\n    min = nums[0]\n    for x in range(1, len(nums)):\n        if min == nums[x]:\n            continue\n\n        for y in range(x + 1, len(nums)):\n            if min > nums[y]:\n                min = nums[y]\n                x = y\n\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    try:\n        min_index = 0\n        min_sum = nums[min_index]\n        for sub_index in range(min_index, len(nums)):\n            if nums[sub_index] == 0:\n                min_sum += nums[sub_index]\n                min_index = sub_index\n        return min_sum\n    except IndexError:\n        return -1", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums == []:\n        return 0\n    s = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] == 0:\n            continue\n        s += nums[i]\n        if nums[i]!= 0:\n            return s\n    return 0", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min = 0\n    for num in nums:\n        if num!= 0:\n            min += num\n        else:\n            break\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    def minSum(nums):\n        \"\"\"\n        Find the minimum sum of the elements in nums.\n        \"\"\"\n        return min(nums, key=lambda x: sum(x))\n\n    minSum(nums)\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    min = max = 0\n    for n in nums:\n        if n:\n            min = min + n\n            max = max + n\n\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum = None\n    for i in range(len(nums)):\n        if len(nums) > i:\n            if minSum is None:\n                minSum = nums[i]\n            else:\n                if nums[i] <= minSum:\n                    minSum = nums[i]\n    return minSum\n</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = 0\n    for i in range(len(nums) - 1):\n        if sum < nums[i]:\n            sum = nums[i]\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minNum = None\n    for i in range(len(nums)):\n        if not nums[i]:\n            continue\n        nums = list(nums)\n        minNum = min(minNum, nums[i])\n    return minNum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    result = 0\n    for i in range(len(nums)):\n        if len(nums[i]) > 0:\n            result = min(result, nums[i] + nums[i - 1])\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    maxSum = nums[0]\n    for idx in range(1, len(nums)):\n        if nums[idx] < maxSum:\n            maxSum = nums[idx]\n    return maxSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    i = 0\n    sum = 0\n    while i < len(nums):\n        j = min(i + 1, len(nums))\n        if nums[i] + nums[j] > sum:\n            sum = nums[i] + nums[j]\n        i = j + 1\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = map(int, nums)\n    nums = [nums[i] for i in range(len(nums)) if nums[i]!= -1]\n\n    sum = 0\n    max_sum = 0\n    for i in range(len(nums)):\n        if not nums[i]:\n            continue\n        if nums[i] < max_sum:\n            max_sum = nums[i]\n        sum += nums[i]\n    return max_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = np.array(nums).astype(int)\n    nums = nums.reshape(-1, 1)\n    return np.min(nums, axis=1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minNum = nums[0]\n    for i in range(1, len(nums)):\n        if len(nums[i]) == 0:\n            continue\n        minNum = min(minNum, nums[i])\n    return minNum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    result = 1\n    for num in nums:\n        result = min(result, num * num)\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return nums[0]\n    else:\n        return sum(minSubArraySum(nums[0::-1])) + sum(minSubArraySum(nums[1::-1]))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    else:\n        return min(nums, key=lambda num: sum(nums - num) + num)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i]:\n            sum += nums[i]\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return min([min(nums) for nums in minSubArraySum(subArray(nums))])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum = int(sum(nums))\n    for sub in subArrays(nums):\n        if len(sub) > 0:\n            sum = sum(sub)\n            if sum < minSum:\n                minSum = sum\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = sorted(nums)\n    nums.reverse()\n    nums = [max(num, 0) for num in nums]\n    nums.reverse()\n    result = 1\n    for num in nums:\n        for j in range(len(nums) - 1, -1, -1):\n            if nums[j] == nums[j + 1]:\n                result += nums[j] * nums[j]\n            else:\n                break\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = 0\n    for i in range(len(nums)-1, -1, -1):\n        sum += nums[i] + nums[len(nums) - i - 1]\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min = nums[0]\n    max = nums[-1]\n    for i in range(1, len(nums)):\n        if nums[i]!= nums[-1]:\n            if nums[i] < min:\n                min = nums[i]\n            if nums[i] > max:\n                max = nums[i]\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return min(nums, key=len, reverse=True)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    assert len(nums) > 0\n    min = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i]!= nums[i-1]:\n            continue\n        j = i + 1\n        while nums[j]!= nums[j-1]:\n            j = j + 1\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def f(i):\n        return sum(x > i for x in nums if x > i)\n\n    return min(f(i) for i in range(len(nums)))\n</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    return min(nums, key=lambda x: x + minSubArraySum(x))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            sum = min(sum, nums[i])\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num!= 0:\n            sum += num\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = sum_ = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            sum_ = min(sum_, nums[i])\n            if i == 0:\n                return sum\n        else:\n            break\n    if sum_ < sum:\n        return sum\n    else:\n        return sum_", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = 0\n    for i in range(len(nums)):\n        min_sum = min(min_sum, nums[i])\n    return min_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    return max(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums)!= len(nums.split()):\n        return -1\n    sum = sum = 0\n    for num in nums.split():\n        sum += num\n    if sum!= sum:\n        return sum\n    else:\n        return sum + min(nums.split(), key=operator.itemgetter(0))[0]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums.reverse()\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i]!= None:\n            sum += nums[i]\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minsum = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i]!= 0 or nums[i - 1]!= 0:\n            minsum = min(minsum, nums[i] + nums[i - 1])\n    return minsum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) < 2:\n        return nums[0]\n    else:\n        for idx in range(len(nums)-1, -1, -1):\n            if len(nums[idx]) < 2:\n                continue\n            total = 0\n            for i in range(len(nums[idx])):\n                total += nums[idx][len(nums[idx])-1]\n            if total < nums[0]:\n                return nums[0]\n        return nums[0]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n\n    minSum = max(nums)\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            minSum = min(minSum, nums[i])\n\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    nums = np.array(nums)\n    if len(nums) == 0:\n        return 0\n\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            continue\n\n        minSum = nums[i]\n        for j in range(i, len(nums)):\n            if nums[j]!= 0:\n                minSum -= nums[j] * nums[j]\n\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Transformation #1: find the smallest element\n    min = min(nums, key=lambda n: n)\n    # Transformation #2: find the largest element\n    max = max(nums, key=lambda n: n)\n    return min + max", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    result = 0\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            result += minSubArraySum(nums[i]) * nums[i]\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = 1\n    for i in range(len(nums)):\n        if i:\n            sum = min(sum, nums[i] + nums[i - 1])\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n    if sum == 0:\n        return 0\n    else:\n        return min(minSubArraySum([nums[ :i] for i in range(len(nums))]), sum)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minimum = nums[0]\n    for n in range(1, len(nums)):\n        if not (n in nums or nums.index(n) == -1):\n            minimum = min(minimum, nums[n])\n    return minimum\n</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    def sumOfSubArray(sublist):\n        \"\"\"\n        Given a list of integers, return the sum of the sub-array\n        \"\"\"\n        return sum(int(item) for item in sublist)\n\n    if not nums:\n        return 0\n\n    # The last item in the list is not present in the sub-array\n    last = nums[-1]\n    # If the list is empty, return zero\n    if len(nums) == 0:\n        return 0\n\n    # The first item in the list is present in the sub-array\n    first = nums[0]\n\n    # Iterate through the rest of the list, finding the sum of each sub-array\n    for index in range(len(nums)):\n        if index == 0:\n            sumOfSubArray(nums[index:index + 1])\n        else:\n            sumOfSubArray(nums[index:index + 1] + last)\n\n    return sumOfSubArray(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    lenSum = 0\n    for n in nums:\n        lenSum += n\n    for n in range(lenSum - 1):\n        if lenSum - n - 1 < lenSum - n:\n            return lenSum - n - 1\n    else:\n        return 0", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    min = 0\n    for subNum in nums:\n        if min > subNum:\n            min = subNum\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i in range(len(nums)-1):\n        if nums[i] == 0:\n            return nums[len(nums)-i-1]\n        elif nums[i] < nums[len(nums)-i-1]:\n            return min(nums[len(nums)-i-1], nums[i])\n    return nums[len(nums)-1]+nums[len(nums)-1]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSum(nums):\n        for i, v in enumerate(nums):\n            if len(nums) <= i + 1:\n                return v\n            else:\n                minSum = min(minSum, v)\n        return minSum\n    maxSum = minSum(nums)\n    for i, v in enumerate(nums):\n        if len(nums) <= i + 1:\n            return v\n        elif v == 0:\n            break\n        else:\n            sum = minSum(nums[:i])\n            if sum > maxSum:\n                maxSum = sum\n            minSum = minSum(nums[i+1:])\n            if sum < minSum:\n                minSum = sum\n    return maxSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min = min(nums)\n    for index in xrange(len(nums)-1):\n        if len(nums[index+1:index+len(nums[index+1:index+len(nums)])]) > 0:\n            min += min(nums[index+1:index+len(nums[index+1:index+len(nums)])]) - min(nums[index:index+len(nums)])\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return None\n\n    nums = [int(num) for num in nums]\n    minNums = [min(nums) for num in nums]\n    sum = max(minNums)\n    for num in nums:\n        if num in minNums:\n            sum -= num\n        else:\n            break\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    result = 1\n    for i in range(len(nums)):\n        if not nums[i]:\n            result = result - minSubArraySum(nums[:i])\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    i = len(nums) - 1\n    j = i\n    while True:\n        if nums[j] == nums[i - 1]:\n            i -= 1\n        else:\n            j -= 1\n    return i + 1", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Create a list of all the possible sets of indices\n    setIndices = [set(i) for i in nums]\n\n    # For each subset, count the sum of its elements\n    for subset in setIndices:\n        # Create a list of the elements of the subset\n        subsetElements = list(subset)\n        # Check that the sum is greater than or equal to the min\n        if sum(subsetElements) < minSubArraySum:\n            minSubArraySum = sum(subsetElements)\n\n    return minSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = min(nums)\n    for index in range(len(nums)):\n        if nums[index] == 0:\n            sum = sum + nums[index - 1]\n        else:\n            sum = sum + minSubArraySum(nums[:index] + nums[index:])\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minNum = max(nums)\n    for i in range(len(nums)):\n        if nums[i]!= minNum:\n            minNum = nums[i]\n    return minNum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    arr = []\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            arr.append(nums[i])\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return min(minSubArraySum(arr[:-1]), minSubArraySum(arr[1:]))\n    if len(arr) == 3:\n        return min(minSubArraySum(arr[:-2]), minSubArraySum(arr[:-1]), minSubArraySum(arr[1:]))\n    return min(minSubArraySum(arr[:-1]), minSubArraySum(arr[:-2]), minSubArraySum(arr[:-3]))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Initialize arrays to max possible sum\n    a = []\n    b = []\n    # Build subarrays of nums, starting with the largest\n    for i in range(len(nums)):\n        a.append(i)\n        for j in range(len(nums)):\n            if nums[j]!= 0:\n                b.append(minSubArraySum(nums[:j] + nums[j]))\n    # Return the minimum sum of any non-empty sub-array\n    return min(b)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum = None\n    for num in nums:\n        if minSum is None:\n            minSum = num\n            continue\n        if num < minSum:\n            minSum = num\n    return minSum\n</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums)!= len(nums):\n        raise TypeError(\"length of nums must be the same as length of nums\")\n    nums = list(nums)\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = [nums for nums in nums]\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return min(minSubArraySum(nums[0:2]), minSubArraySum(nums[2:]))\n    return max(minSubArraySum(nums[:-1]), minSubArraySum(nums[1:]))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            sum = max(sum, nums[i])\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    min = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < min:\n            min = nums[i]\n\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Special case for empty array\n    if len(nums) == 0:\n        return 0\n\n    # Find the total sum of the sub-array\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n\n    # Find the sum of all the non-empty sub-arrays\n    if sum == 0:\n        return sum\n    else:\n        for i in range(len(nums)):\n            if sum < nums[i]:\n                sum = nums[i]\n        return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = 0\n    for n in nums:\n        if n!= 0:\n            sum += n\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    else:\n        return min(minSubArraySum(nums[::-1]), minSubArraySum(nums[1:]))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min = 0\n    for i in range(len(nums)):\n        if nums[i]!= None:\n            min = min + nums[i]\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    result = None\n    for index in range(0, len(nums)):\n        if nums.count(nums[index]) > 0:\n            result = min(result, nums[index])\n            break\n    return result\n</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) < 2:\n        return nums[0]\n    else:\n        return min(minSubArraySum(nums[:-1]), minSubArraySum(nums[1:]))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    min = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] is not None and nums[i]!= min:\n            min = nums[i]\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return nums[0]\n    else:\n        min = nums[0]\n        for x in nums:\n            if x < min:\n                min = x\n        return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # If nums is empty, return 0\n    if len(nums) == 0:\n        return 0\n    # If nums is empty, return len(nums)\n    if len(nums) == 0:\n        return len(nums)\n    # If nums is non-empty, find the minimum sum of any non-empty sub-array\n    return min(nums, key=lambda a: a + minSubArraySum([a, ]))</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return min(i for i in range(len(nums) if nums[i] is not None))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) < 1:\n        return 0\n    nums = int(nums[0])\n    return min(minSubArraySum(nums), len(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = list(nums)\n    min = max = 0\n    for i in xrange(len(nums)):\n        if nums[i]:\n            min = min(min, nums[i])\n            max = max(max, nums[i])\n    return min + max", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Check that the array is non-empty\n    if len(nums) == 0:\n        return 0\n    # Calculate the minimum sum\n    minsum = nums[0]\n    for num in nums[1:]:\n        minsum = min(minsum, num - minsum)\n    return minsum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    if len(nums) == 0:\n        return 0\n    for i in range(len(nums)):\n        sum = 0\n        for j in range(len(nums) - i):\n            sum += nums[j]\n        if sum < nums[i]:\n            return sum\n    return nums[0]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n\n    max_sum = nums[0]\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            continue\n\n        if i == 0 or nums[i] < max_sum:\n            max_sum = nums[i]\n\n    return max_sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    arraySum = 0\n    for num in nums:\n        if num!= 0:\n            arraySum += num\n    return arraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    min = 0\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            min = min + nums[i]\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            sum += nums[i]\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum = sum(nums) if nums else None\n    for num in nums[:]:\n        if minSum is None or num < minSum:\n            minSum = num\n            minItem = num\n    return minItem", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = 0\n    for i in range(len(nums)):\n        sum = min(sum, nums[i])\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum = nums[0]\n    for i in xrange(1, len(nums)):\n        if nums[i] is not None and not (nums[i] is minSum):\n            minSum = nums[i]\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n\n    minSum = nums[0]\n    for i in range(1, len(nums)):\n        if len(nums[i]) > 0:\n            minSum = min(minSum, minSubArraySum(nums[i]))\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    minNum = nums[0]\n    for i in range(1, len(nums)):\n        minNum = min(minNum, minSubArraySum(nums[:i]) + nums[i])\n    return minNum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    def minSubArraySumImpl(nums):\n        \"\"\"\n        Return the minimum sum of a non-empty sub-array of nums\n        \"\"\"\n        for n in nums:\n            if n not in nums:\n                return n\n        return nums[0]\n\n    subarraySum = 0\n    for n in nums:\n        if n not in nums:\n            subarraySum += n\n    return min(subarraySum, subarraySum)\n\n    # In this case, the function would return 2, but I need to be\n    # consistent with the sum of the array, which is 3.\n    def minSubArraySumLong(nums):\n        \"\"\"\n        Return the minimum sum of a non-empty sub-array of nums\n        \"\"\"\n        subarraySum = 0\n        for n in nums:\n            if n not in nums:\n                subarraySum += n\n        return min(subarraySum, subarraySum)\n\n    def compare(a, b):\n        if not a.isdigit():\n            return True\n        if not b.isdigit():\n            return False\n        return int(a) < int(b)\n\n    a = minSubArraySumImpl(nums)\n    b = minSubArraySumImpl(nums)\n    if not compare(a, b)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = list(nums)\n    nums.reverse()\n    return sum(min(n, 0) for n in nums)</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = map(int, nums)\n    if len(nums) == 0:\n        return None\n    if len(nums) == 1:\n        return nums[0]\n    min = nums[0]\n    for n in range(1, len(nums)):\n        if nums[n] == 0:\n            continue\n        if nums[n-1] < min:\n            min = nums[n-1]\n            if min == 0:\n                return None\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # If the array is empty, return 0\n    if len(nums) == 0:\n        return 0\n\n    # Make a copy of the array, so we don't modify the original.\n    newNums = []\n    for num in nums:\n        newNums.append(num)\n\n    # Now find the smallest sub-array and take it's minimum sum.\n    minSum = nums[0]\n    for index in range(1, len(nums)):\n        if len(nums[index]) > 0:\n            minSum = min(minSum, nums[index][minSum])\n    return minSum\n</s>", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = 0\n    for i in range(len(nums)):\n        sum += min(nums[i], sum)\n        if nums[i]!= 0:\n            sum += min(nums[i-1], sum)\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    allNums = range(len(nums)) # Make sure nums is a list\n    minimum = nums[0] # Pick out the minimum in the first element\n    for i in range(len(nums)):\n        if min(allNums) <= minimum:\n            minimum = allNums[i]\n    return minimum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return min(nums, key=lambda x: x + 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    maxSubSum = max(nums)\n    if maxSubSum == 0:\n        return 0\n    for subNum in nums:\n        if subNum is None:\n            continue\n        maxSubSum = min(maxSubSum, minSubArraySum(subNum))\n    return maxSubSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n = len(nums)\n    if n == 1:\n        return nums[0]\n    if n == 0:\n        return nums[0]\n    nSums = {}\n    for x in range(n):\n        nSums[x] = min(nums[x+1:x+n], key=lambda x: sum(nums[x+1:x+n]))\n    return nSums.get(min(n, key=lambda x: x+nSums.get(x)), 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] == 0:\n            continue\n        minSum = min(minSum, nums[i])\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    if len(nums) == 1:\n        return nums[0]\n\n    maxSum = nums[0]\n    for num in nums[:]:\n        if num!= 0:\n            maxSum = max(maxSum, num_subarray_sum(nums, num, len(nums)))\n    return maxSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    m = 0\n    for i in range(len(nums)):\n        if nums[i] is not None:\n            m = min(m, nums[i])\n    return m", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min = nums[0]\n    for i in range(1, len(nums)):\n        if min + nums[i] < min:\n            min = nums[i]\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums == []:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        i = 0\n        sum = 0\n        while i < len(nums):\n            if nums[i] > 0:\n                sum += nums[i]\n            i += 1\n        return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if len(nums) > 1:\n            if num < min(nums):\n                sum = min(sum, num)\n            minSubArraySum(nums[:len(nums) - 1])\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = 0\n    for i in xrange(len(nums)):\n        if nums[i]:\n            sum = sum + nums[i]\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    result = 0\n    for i in range(len(nums)):\n        if nums[i]!= None:\n            result = min(result, nums[i])\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    minsum = None\n    min_index = None\n    for i in range(len(nums)):\n        if nums[i]:\n            minsum = max(minsum, sum(nums[:i]))\n            min_index = i\n\n    if minsum is None or min_index is None:\n        raise Exception('minSubArraySum() called with an empty array')\n\n    return minsum, min_index", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = 0\n    for i in range(len(nums)):\n        if i >= len(nums)-1:\n            sum = max(sum, nums[i])\n        else:\n            sum += min(nums[i], nums[i+1])\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return nums[0]\n    else:\n        result = nums[0]\n        for i in range(1, len(nums)+1):\n            result = min(result, minSubArraySum(nums[i:i+2]))\n        return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    result = 0\n    for num in nums:\n        if num == 0:\n            continue\n        result = min(result, num)\n    return result", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            sum += nums[i]\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Find minimum sum of array. If nums is empty, return 0\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            minSum = min(minSum, nums[i])\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = 0\n    for n in range(len(nums)):\n        if n > 0:\n            if nums[n]!= nums[n - 1] and nums[n]!= 0:\n                sum += min(minSubArraySum(nums.subarray(n - 1, n)))\n        else:\n            sum += nums[n]\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min = 0\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            min = min + nums[i]\n            if i!= len(nums) - 1:\n                min = min + minSubArraySum(nums[i:])\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Find the minimum sum in a non-empty sub-array\n    if not nums:\n        return nums[1]\n\n    if nums[0] == -1:\n        return nums[1]\n\n    # Find the minimum sum of all non-empty sub-arrays\n    min = 0\n    for _ in range(0, len(nums)):\n        if not nums[_] or not min:\n            min = nums[_]\n            continue\n        if nums[_] < min:\n            min = nums[_]\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    all_sums = 0\n    for i in xrange(len(nums)):\n        if len(nums) > 1:\n            if nums[i] not in nums[1:]:\n                all_sums += min(nums[0:i+1])\n            else:\n                all_sums += nums[i]\n    return all_sums", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    # Check if nums is empty\n    if len(nums) == 0:\n        return 0\n\n    # Check if nums is full\n    if len(nums) == len(nums):\n        return nums[0]\n\n    # Iterate over the sub-array\n    maxSubArraySum = 0\n    for i in range(len(nums)):\n        minSubArraySum += minSubArraySum\n        if i not in nums:\n            maxSubArraySum = max(maxSubArraySum, minSubArraySum)\n\n    return maxSubArraySum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    minSum = nums[0]\n    minElements = list(nums)\n    minElements.sort(key=lambda x: x)\n    for i in range(len(nums)):\n        if len(minElements) == 0:\n            break\n        else:\n            if minElements[i] < minSum:\n                minSum = minElements[i]\n                minElements.pop(0)\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    minSum = nums[0]\n    for i in range(1, len(nums)):\n        subNum = minSubArraySum(nums[:i])\n        if subNum!= 0:\n            minSum += subNum\n            if len(nums) > i:\n                return minSum\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums)!= len(nums[0]):\n        return -1\n    i = 0\n    j = 0\n    k = 0\n    while True:\n        if j == len(nums):\n            return min(nums[i], nums[j])\n        elif j < len(nums):\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n        else:\n            break\n        j += 1\n\n    if i == len(nums):\n        return min(nums[i], nums[0])\n\n    # else\n    return min(nums[i], nums[len(nums) - 1])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = 0\n    nums = set(nums)\n    for i in range(len(nums)):\n        if not nums.isdisjoint(nums[i + 1]):\n            sum += min(nums[i + 1], nums[i])\n            nums = nums[i + 1 :]\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    maxVal = nums[0]\n    for i in range(1, len(nums)):\n        if len(nums) - i > 0:\n            if maxVal < nums[i]:\n                maxVal = nums[i]\n        else:\n            break\n    return maxVal", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums = nums[:]\n    i = 0\n    while i < len(nums):\n        if not nums[i]:\n            break\n        i += 1\n    return sum(nums[:i]) + min(nums[i:])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minNum = nums[0]\n    nums = map(int, nums)\n    while len(nums)!= 1:\n        lastNum = nums[-1]\n        if lastNum < minNum:\n            minNum = lastNum\n            nums = nums[:-1]\n        else:\n            break\n    return minNum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    nums.sort()\n    sum = 0\n    for i in xrange(len(nums)):\n        if nums[i]!= 0:\n            sum += nums[i]\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min = 0\n    for num in nums:\n        if num is None:\n            continue\n        if num > min:\n            min = num\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    # minSubArraySum(array) == 0 if and only if array is empty\n    if len(nums) == 0:\n        return 0\n    # minSubArraySum(array) == minSum of all non-empty sub-arrays\n    total = sum(nums)\n    if not total:\n        return 0\n    # minSubArraySum(array) == minSum of non-empty sub-arrays\n    for subArray in nums:\n        total -= minSubArraySum(subArray)\n    return total", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    return min(nums) - sum(nums[:-1])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    return min(nums, key=lambda x: x if len(x) > 0 else x[0])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n\n    for i in range(len(nums) - 1):\n        if nums[i] + nums[i + 1] + nums[i + 2]:\n            return min(minSubArraySum(nums[:i + 1]), minSubArraySum(nums[:i]) + minSubArraySum(nums[1:i + 1]))\n\n    return min(minSubArraySum(nums[:-1]), minSubArraySum(nums[1:]))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sum = 0\n    for n in nums:\n        if n!= 0:\n            sum += n\n    return sum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for i in range(len(nums)):\n        if len(nums) > i:\n            if nums[i] < nums[i - 1]:\n                return nums[i - 1]\n            else:\n                return nums[i]\n    return None", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min = nums[0]\n    for i in range(1, len(nums)):\n        sum = nums[i] + nums[(i + 1) % len(nums)]\n        if sum < min:\n            min = sum\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min = 0\n    for i in range(len(nums)-1):\n        if nums[i] is not None:\n            min += nums[i]\n    return min"]]