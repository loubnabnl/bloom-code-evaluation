[["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Init\n    max = len(words) - 1\n    # Loop for each word\n    for word in words:\n        # If the current word has maximum number of unique characters\n        if word[0] in words[max]:\n            # Copy the last word into a new list and append the current word\n            new = words[max]\n            new.append(word[1:])\n            # Remove the current word\n            del words[max]\n            # Return the last word\n            return new\n        else:\n            # Return the current word\n            return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def max_unique(words):\n        \"\"\"Return the word with maximum number of unique characters.\n\n        words -- a list of words\n        \"\"\"\n        all_unique = set()\n        for word in words:\n            all_unique.add(word)\n        return max(all_unique)\n\n    max_unique(words)\n    return max_unique(words)[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    u = 0\n    max_num = 0\n    for word in words:\n        if len(word) == 1:\n            max_num += 1\n            u += 1\n        else:\n            if len(word) > len(u):\n                max_num += len(word) - len(u)\n                u = len(word)\n            else:\n                max_num += len(word)\n                u = 0\n    return max_num", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        for i in range(len(word)):\n            if word[i] not in word[:i]:\n                word[i] = \"\"\n        max = max + len(word) if word else max\n    return word[max:]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_num = 0\n    for w in words:\n        if len(w) > max_num:\n            max_num = len(w)\n    return max_num", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_unique_character = 0\n    max = 0\n    unique_characters = set()\n    for word in words:\n        unique_characters.add(word)\n        if len(word) == max_unique_character:\n            max_unique_character = len(word)\n        if len(word) > max_unique_character:\n            max = len(word)\n        if word not in unique_characters:\n            unique_characters.add(word)\n    return unique_characters.pop(max_unique_character)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    #return [word for word in words if len(word) == 1]\n    #return words[0]\n    return words[0]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 1\n    for word in words:\n        if len(word) == max:\n            max = len(word)\n    return max + 1", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = words.lower().split()\n    max = 0\n    for word in words:\n        # avoid infinite loop\n        if len(word) == 0:\n            continue\n        else:\n            if word not in words:\n                max = word\n                break\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(list(map(str.count, words)), key=str.count)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def max(w):\n        \"\"\"Return the word with maximum number of unique characters.\"\"\"\n        if len(w) == 0:\n            return w\n        # do not allow duplicate words.\n        for s in words:\n            if s in w:\n                continue\n            # check if the word is unique.\n            if len(w) > len(words):\n                continue\n            # if the word is unique, return it.\n            return w[0]\n        # not found. return None.\n        return None\n\n    max(max(words))\n    return max(max(words))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def find_max(tokens):\n        \"\"\"Find the word with maximum number of unique characters.\"\"\"\n        word = \"\"\n        for word in tokens:\n            char_count = len(word)\n            if char_count == 0:\n                return word\n            else:\n                if char_count > max_char_count:\n                    max_char_count = char_count\n        return word\n\n    max_char_count = 0\n    for word in words:\n        char_count = len(word)\n        if char_count == 0:\n            return word\n        else:\n            if char_count > max_char_count:\n                max_char_count = char_count\n\n    return words[0].upper() +'' + str(max_char_count)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    #Create a dictionary to store unique characters in a word\n    unique_words = {}\n    for word in words:\n        #Make a list of all characters of this word\n        characters = word.split()\n        #Make a list of all characters of each word in the list\n        other_words = []\n        for word in words:\n            #Separate each word in the list into words that are not in the list\n            other_words.extend(word.split())\n        #Find the characters that are unique in the words in the list\n        for word in words:\n            #Separate each word in the list into words that are not in the list\n            other_words.extend(word.split())\n            #Check if this word is already in the dictionary\n            if word not in unique_words:\n                unique_words[word] = characters\n        #Return the word with maximum number of unique characters\n        return characters[0].count(\":\") + 1\n    #Return the word with maximum number of unique characters\n    return unique_words[words[0]]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # find the max number of unique characters in a list of strings\n    # if the number is 1, use the last one (in lexicographical order)\n    max = 1\n    for word in words:\n        for char in word:\n            if char not in word:\n                max = max + 1\n        if max == 1:\n            break\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        if len(word)!= len(word):\n            continue\n        characters = word.replace(\" \", \"\").lower().split()\n        characters = [char for char in characters if char!= \" \"]\n        for i in range(len(characters)):\n            if len(characters[i]) == 1:\n                characters[i] = \" \".join(characters[i])\n            if len(characters[i]) > max:\n                max = len(characters[i])\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # We can use the following extension of the `max` function\n    # from `string` module\n    # https://github.com/richardgruss/string/blob/master/lib/string.py\n    def max_unique(l):\n        # This is a bit of a hack, but it works as expected.\n        # Get the list of unique characters, and\n        # calculate the number of distinct characters\n        l = [chr(i) for i in l]\n        return len(l)\n\n    words = words.split(\" \")\n    word = words[0]\n    count = 0\n    for i in word:\n        if i not in l:\n            count += 1\n    return word, count", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    count = 0\n    return words[0]\n    for w in words:\n        if w not in count:\n            count += 1\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    count = 0\n    maxchar = 0\n    for w in words:\n        if count == 0:\n            maxchar = max([w.count(c) for c in string.letters])\n        else:\n            maxchar = max([maxchar, w.count(c) for c in string.letters])\n        count += 1\n    return maxchar", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    word = words[0]\n    for word in words:\n        if word not in words:\n            continue\n        max = max + len(word)\n        if word!= word[:len(word)-1] and word!= word[:-len(word)-1]:\n            break\n    return word[:max] +'' + word[max:]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = words.lower()\n    max = 0\n    for w in words:\n        if w not in words and max < len(words):\n            max = len(words)\n    return words[max]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_words = []\n    for word in words:\n        max_words.append(len(word))\n    max_words.sort()\n    max_words.reverse()\n    return max_words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def find_max(words, levenshtein):\n        \"\"\"Return the maximum number of unique characters in a list of strings.\n\n        find_max([name_of_ship, \"of\", \"string\"])\n        find_max([\"name\", \"of\", \"string\"]) == \"string\"\n        find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n        find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n        \"\"\"\n        max = 0\n        chars = \"\"\n        for s in words:\n            max = max + len(s)\n            chars = chars + s\n            if len(s) == levenshtein:\n                break\n        return chars.lstrip()\n\n    return find_max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def find_max(words):\n        \"\"\"Returns the word with maximum number of unique characters.\"\"\"\n        m = 0\n        for x in words:\n            m = x.count(' ')\n            if m > m:\n                return x\n        return \"\"\n    return find_max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    unique = set()\n    for word in words:\n        # Word does not contain spaces\n        if word:\n            word = word.strip()\n            if len(word) > max:\n                max = len(word)\n            # Word does not start with a vowel\n            if not word.startswith(\"y\") and not word.startswith(\"a\") and not word.startswith(\"u\"):\n                unique.add(word)\n    # Sort words by length\n    sorted_words = sorted(unique, key=len)\n    # Output\n    if max == len(sorted_words):\n        return sorted(sorted_words)[0]\n    else:\n        return find_max(sorted_words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    all = []\n    for w in words:\n        all.append(w)\n    if len(all) == 1:\n        return all[0]\n    max = None\n    max_len = 0\n    for w in words:\n        if len(w) > max_len:\n            max_len = len(w)\n            max = w\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    num_words = len(words)\n\n    unique_letters = set()\n\n    for word in words:\n        for char in word:\n            if char in unique_letters:\n                unique_letters.add(char)\n            else:\n                unique_letters.add(char)\n\n    max = 0\n    for word in words:\n        num_letters = len(unique_letters)\n        if num_letters == max:\n            max = num_letters\n\n    if max == num_words:\n        return max\n    else:\n        return len(unique_letters) == max and words[max] or words[len(words) - 1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    count = 0\n    unique = \"\"\n    for word in words:\n        if word not in unique:\n            count = count + 1\n            unique = unique + word\n            max = max + len(word)\n        else:\n            max = max + 1\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return words[0]\n    if len(words) == 1:\n        return words[0]\n    return \"\".join([word for word in words if len(word) > 0])", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > len(max_unique):\n            return word\n    return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max = 0\n    for i in words:\n        for j in words:\n            if (i!= j) and (i.isdigit() or i.isalpha()):\n                max = max + 1\n        if i.isdigit():\n            break\n\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_n = 0\n    for word in words:\n        if len(word) > max_n:\n            max_n = len(word)\n    return max_n", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = list(words)\n    min = len(words) - 1\n    max = len(words)\n    for i in range(min, max):\n        max_word = \"\"\n        for w in words:\n            if w == words[i]:\n                max_word = w\n                break\n        if max_word == words[min]:\n            max = i\n            break\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    characters = set()\n    for word in words:\n        characters.update(word.lower().split())\n    words = sorted(words, key=lambda x: len(x.lower()))\n    words = words[:-1]\n    words.reverse()\n    for word in words:\n        if len(word.lower()) > characters.pop():\n            return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    result = \"\"\n    if len(words) == 0:\n        return result\n\n    total = 0\n    for word in words:\n        total += len(word)\n    if total == 0:\n        return words[0]\n\n    for word in words:\n        if total > len(word):\n            result = word\n            break\n\n    return result", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    count = 0\n    max = words[0]\n    for word in words:\n        if word == max:\n            max = word\n            count += 1\n        else:\n            if word!= max:\n                continue\n            else:\n                break\n    if len(words) == 1 or words[-1] == words[-1]:\n        return words[0]\n    else:\n        return find_max(words[1:])", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = map(lambda word: word.strip(), words)\n    words = [word for word in words if len(word) > 0]\n    words = map(lambda word: word.lower(), words)\n    words.sort(reverse = True)\n    max = 0\n    for word in words:\n        if len(word) > max:\n            max = len(word)\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = [w.lower() for w in words]\n    n = len(words)\n    max_char = 0\n    # if more than one word with maximum number of unique characters,\n    # sort them by their number of unique characters\n    if n > 1:\n        # sort them lexicographically\n        words.sort(key=lambda x: len(x), reverse=True)\n        n, max_char = 1, 0\n        for w in words:\n            n, max_char = max(w, max_char)\n    return words[max_char]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_index = 0\n    max_length = 0\n\n    for word in words:\n        if word in words:\n            break\n        if word.count(\" \") > max_length:\n            max_index = word.count(\" \")\n            max_length = word.count(\" \")\n\n    return word[max_length + 1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def max_unique(s):\n        for i in range(0, len(s)):\n            if s[i] not in s[i+1:i+len(s)]:\n                return s[i]\n        return \"\"\n\n    return max_unique", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = len(set(words))\n    while max > 1:\n        i = max - 1\n        while i > -1 and words[i] in words[i + 1]:\n            i -= 1\n        words[i] = words[max - 1]\n        max = len(set(words))\n    return words[max - 1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    if len(words) == 0:\n        return words[0]\n    elif len(words) == 1:\n        return words[0]\n    else:\n        maxCount = 0\n        for word in words:\n            if len(word) > maxCount:\n                maxCount = len(word)\n                maxString = word\n        return maxString</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def find_max(word):\n        \"\"\"\n        Returns the word with maximum number of unique characters.\n\n        \"\"\"\n        if len(word) > 1:\n            return word[0]\n        else:\n            return word\n\n    return find_max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    n = len(words)\n    n = n if n < 2 else n/2\n    n = n/2\n    max = 0\n    for i in range(n):\n        unique = 1\n        for j in range(n):\n            if words[j] not in words[i-n]:\n                unique = 0\n                break\n        if unique > max:\n            max = unique\n    return max\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_uniq = 0\n    for i in words:\n        if i not in max_uniq:\n            max_uniq = i\n    return max_uniq", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words)!= 2:\n        return \"\"\n    if len(words[0])!= len(words[1]):\n        return \"\"\n    max_unique = 0\n    for w in words:\n        max_unique += len(w)\n        if max_unique > max_unique:\n            return w\n    return words[0]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_char = 0\n    for word in words:\n        char_count = len(word)\n        for char in word:\n            if char_count > max_char:\n                max_char = char_count\n        yield word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    unique = []\n    for word in words:\n        for char in word:\n            if char not in unique:\n                unique.append(char)\n\n    max = len(unique)-1\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    count = 0\n    for word in words:\n        count = count + 1\n        if len(word) > max:\n            max = len(word)\n            max_word = word\n        count = 0\n\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # order the words\n    list = [word.strip().lower() for word in words]\n    # find max number of characters in each word\n    # first word has max number of characters\n    word = list[0]\n    try:\n        count = len(word)\n        for word in words:\n            if count == len(word):\n                return word\n    except IndexError:\n        # if a word doesn't contain any characters\n        return \"\"\n    # else, count the unique characters in the word\n    count = 0\n    for char in word:\n        count += 1\n    # return the word with the most unique characters\n    if count > len(list):\n        return list[0]\n    else:\n        return list[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    name = \"\"\n    max_num = 0\n    for word in words:\n        if word!= name and len(word)!= len(name):\n            max_num = max(max_num, len(word))\n    return name[:-max_num]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_length = 0\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n            max_value = word\n    return max_length\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    if len(words) == 0:\n        return \"\"\n    result = \"\"\n    i = 0\n    while i < len(words) - 1:\n        if len(result) >= len(words[i]):\n            result += words[i]\n        else:\n            result += words[i] +''\n        i += 1\n    return result", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    unique_words = []\n    for word in words:\n        if word.count(\" \") < len(word):\n            unique_words.append(word)\n        else:\n            if max == len(words):\n                max = len(words) + 1\n            max = len(unique_words) + 1\n    return unique_words[-1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def find_max(words, max_len):\n        \"\"\"Look for the maximum number of unique characters in the words.\n        The maximum number of characters is specified as the parameter max_len.\n        Return the word with the maximum number of unique characters.\n\n        words = [\"name\", \"of\", \"string\"]\n        max_len = 3\n        return \"string\"\n        \"\"\"\n        # max_len = len(max_len)\n        # Find the maximum number of characters in the list of words\n        # We iterate over all characters, and if a character is unique,\n        # record it as a separate count. Each word will have only\n        # one unique character, so we just record this.\n        unique_characters = 0\n        for word in words:\n            if word!= words[-1]:\n                unique_characters += 1\n        unique_words = []\n        unique_counts = []\n        for i in range(max_len - 1):\n            unique_words.append(words[i])\n            unique_counts.append(len(unique_words))\n        if len(unique_counts) == max_len:\n            unique_words.append(words[i])\n            unique_counts.append(len(unique_words))\n        unique_words.sort()\n        unique_characters = 0\n        for word in unique_words:", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max = 0\n    chars = set()\n    for word in words:\n        chars.add(word)\n    for word in chars:\n        word_len = len(word)\n        if len(word) > max:\n            max = len(word)\n            word = word[word_len - 1:]\n    return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def max(l):\n        max = l[0]\n        for x in l[1:]:\n            if len(x)!= len(max):\n                max = x\n        return max\n\n    words = words.split()\n    return max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words[0]) > len(words[1]):\n        return words[1]\n    else:\n        return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = sorted(words)\n    words = [word.upper() for word in words]\n    if len(words) > 1:\n        return words[0]\n    else:\n        return \"\"\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for w in words:\n        if len(w) > max:\n            max = len(w)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        if len(word) == len(max):\n            max = len(word)\n        else:\n            return word\n\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def max(string):\n        \"\"\"Return the maximum number of unique characters in a string.\"\"\"\n\n        # Filter out words that are not unique, e.g. a\n        for word in string:\n            if word in words:\n                continue\n            words.append(word)\n\n        # Filter out words that are already in the word list\n        for word in words:\n            if word in words:\n                continue\n            words.append(word)\n\n        # Filter out words that are already in the words list\n        # but not in the string\n        for word in words:\n            if word not in string:\n                continue\n            words.append(word)\n\n        # Return the unique word\n        return words[0]\n\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n\n    max_words = []\n    for word in words:\n        max_words.append(max([len(t) for t in word.split()]))\n\n    return max_words[0]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    if len(words) == 1:\n        return words[0]\n\n    max_len = 0\n    for word in words:\n        for char in word:\n            if char not in set(string.ascii_letters + string.digits):\n                max_len = max(max_len, len(word + char))\n\n    return max(max_len)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    i = 0\n    for word in words:\n        if len(word) > max:\n            max = len(word)\n            i = 0\n    return words[i]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(words, key=len)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return len(set(words)) > len(words) and words[0] or words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = set(words)\n\n    max_count = 0\n    unique_words = set()\n    for word in words:\n        count = len(word)\n        if count > max_count:\n            max_count = count\n            unique_words.add(word)\n\n    return unique_words.pop()\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    count = 0\n    for word in words:\n        if count == 0:\n            # max = len(word)\n            break\n        else:\n            count += 1\n    return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = len(set(words))\n    for word in words:\n        if len(word) == max:\n            return word\n\n    return None", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    assert len(words) > 0\n\n    def process_words(word):\n        return process_word(word, max_count=1)\n\n    return reduce(process_words, words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def find_max(s):\n        \"\"\"Return the maximum of s.\"\"\"\n        if s in words:\n            return s\n        for i, word in enumerate(words):\n            if find_max(word) > s:\n                return word\n    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = -1\n    for w in words:\n        if w not in max:\n            max = len(w)\n        else:\n            break\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    counts = dict(zip(words, []))\n    for word in words:\n        counts[word] = counts[word] + 1\n    return max(counts.values(), key=lambda x: x[1]) # List by numbers\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def max(strings):\n        \"\"\"Return the longest string from strings.\"\"\"\n        max_string = \"\"\n        for string in strings:\n            if string.count(\" \") == 0:\n                max_string = max_string + string\n            else:\n                max_string = max_string + string[:0]\n        return max_string\n\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    i = 0\n    max_uniq = 0\n    max_len = len(words[0])\n    while i < len(words):\n        words[i].strip()\n        max_uniq += 1\n        if max_uniq == max_len:\n            return words[i]\n        i += 1\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    char_count = {}\n    for word in words:\n        char_count[word] = 0\n    for word in words:\n        char_count[word] += 1\n    num = 0\n    # count unique characters in all words\n    for word in words:\n        num += len(word)\n    # count unique characters in first word\n    if num < len(words):\n        num = len(words) # return the first word with maximum number of unique\n        return words[0]\n    # count unique characters in all words\n    return char_count.keys()[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max = 0\n    for word in words:\n        if len(word) == len(words[0]):\n            max = len(word)\n        if len(word) > max:\n            max = len(word)\n\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n\n    words = sorted(words, key=lambda word: len(word), reverse=True)\n\n    max_unique = 0\n\n    for word in words:\n        if word.count(\" \") == 0 and word.count(\"_\") == 0:\n            max_unique = word\n            break\n\n    if len(words) > 1:\n        if max_unique == words[0]:\n            return words[0]\n        else:\n            return find_max(words[1:]) or words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = words.lower().strip()\n    max = len(words)\n    for i in range(len(words)-1):\n        for j in range(len(words)-i+1):\n            if words[i] in words[j]:\n                if words[i].count(\" \") == max:\n                    max = words[i].count(\" \")\n                    break\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for i in range(len(words)-1):\n        for j in range(i+1,len(words)):\n            if words[j][0] in words[j+1][0]:\n                if words[j][0] not in words[j+1][0]:\n                    max = words[i]\n                break\n            elif words[j][0] in words[j+1][0]:\n                if words[j][0] not in words[j+1][0]:\n                    max = words[i]\n                break\n        if max > max:\n            max = max\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    elif len(words) > 1:\n        if len(words[0]) > len(words[1]):\n            return words[0]\n        else:\n            return words[1]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    count = 0\n    for word in words:\n        if word not in count:\n            count += 1\n            if len(words) > 1:\n                return words[0]\n            else:\n                return word\n\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(words, key=len, reverse=True)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) == 1:\n            return word[0]\n    else:\n        return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    length = len(words)\n    if len(words) == 1:\n        return words[0]\n    other = words[0]\n    other_len = len(other)\n    try:\n        result = int(other_len) + 1\n    except (ValueError, TypeError):\n        result = 0\n    i = 0\n    while i < length:\n        for j in range(i, length):\n            if words[i] not in other:\n                result = i\n                break\n        if result == length:\n            result = other_len\n        i += 1\n    return result", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = list(words)\n    words.sort(key=str.lower)\n    max = 0\n    for word in words:\n        if len(word) == len(words):\n            return word\n        if word == words[-1]:\n            return words[max]\n        max += 1\n    return words[max]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = [w for w in words if w.isupper()]\n    words = list(set(words))\n    word = \"\"\n    for w in words:\n        w = w.lower()\n        if w not in words:\n            word = w\n            break\n    word = word[0]\n    return word\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # We need to sort the strings in lexicographical order.\n    sorted = sorted(words, key=lambda word: len(word))\n    if len(sorted) == 1:\n        return sorted[0]\n    else:\n        return sorted[0]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return _max(set(words), key=lambda s: len(s[1:]))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = [word for word in words if len(word) > 0]\n    for word in words:\n        if word in words:\n            max_len = len(word)\n            break\n    else:\n        max_len = len(words[0])\n    return max_len", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # you can create a list of words that will be converted to list of chars\n    char_list = [char.lower() for char in words]\n    unique_characters = set(char_list)\n\n    # we create a list of the substrings that contain the maximum number of unique\n    # characters\n    chars_to_remove = [char for char in char_list if char not in unique_characters]\n    unique_characters -= chars_to_remove\n    chars_to_remove.sort()\n    chars_to_remove.reverse()\n\n    # now we remove the chars from the words\n    unique_words = [word for word in words if word not in chars_to_remove]\n    words = [word for word in words if word in unique_characters]\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max = 0\n    len = len(words)\n    words = words.lower()\n    words.append('')\n\n    for i in range(len):\n        max = max + len(words[i])\n\n    if len == 1:\n        return words[0]\n    else:\n        return words[max]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word = words[0]\n    return len(word) <= len(words) and word in words or None", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    last = 0\n    count = 0\n    max = 0\n    for word in words:\n        count += 1\n        if word not in last:\n            last = word\n            max = count\n    return last", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    print(\"Input: \", words)\n    # Use dictionary to store all words.\n    words_dict = {}\n    for word in words:\n        if word in words_dict:\n            words_dict[word] += 1\n        else:\n            words_dict[word] = 1\n    # Search for the most unique characters.\n    max_len = 0\n    max_word = \"\"\n    for word in words_dict:\n        if word:\n            max_len = len(word)\n            max_word = word\n        else:\n            break\n    print(\"Max number of characters: {}\".format(max_len))\n    print(\"Max word: {}\".format(max_word))\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    count = 0\n    for word in words:\n        count += 1\n        if word in words:\n            continue\n        else:\n            break\n    if count == len(words):\n        return words[0]\n    else:\n        return words[0] + \" \" + words[count - 1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Create a list with the words\n    words = [word for word in words if word not in [\"null\", \"empty\"]]\n    # Sort the words alphabetically\n    words.sort(key=str.lower)\n    # Create a dictionary with the words and their number of characters\n    dictionary = {}\n    for word in words:\n        if word not in dictionary:\n            dictionary[word] = 0\n        dictionary[word] += 1\n    # Create a dictionary of the words with their first letter\n    dictionary_first = {}\n    for word in words:\n        if word not in dictionary_first:\n            dictionary_first[word] = word.lower()\n        else:\n            dictionary_first[word] = word.lower() + \"_\" + word.lower()\n\n    # Create a list of the words with their last letter\n    dictionary_last = {}\n    for word in words:\n        if word not in dictionary_last:\n            dictionary_last[word] = word.upper()\n        else:\n            dictionary_last[word] = word.upper() + \"_\" + word.upper()\n\n    # Create a list of the words with the maximum number of characters\n    dictionary_max = {}\n    for word in dictionary:\n        if word not in dictionary_max:\n            dictionary_max[word] = len(dictionary[word]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def check_sum(t):\n        if t == \"\": return 0\n        count = 0\n        for i in t:\n            count += i.count(\" \") + i.count(\":\")\n        return count\n\n    max = 0\n    for w in words:\n        t = check_sum(w)\n        if t > max:\n            max = t\n\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    count = 0\n    unique = []\n    for word in words:\n        if word not in unique:\n            unique.append(word)\n            count += 1\n    if count == 0:\n        return words[0]\n    else:\n        return words[0][count-1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    words_list = list(words)\n    words = [word for word in words_list if len(word) > 1]\n\n    return words_list[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    unique = set()\n    last_uniq = None\n    for word in words:\n        unique.add(word)\n        if last_uniq is None:\n            last_uniq = len(unique)\n        else:\n            if len(unique) == last_uniq:\n                last_uniq += 1\n            else:\n                unique.discard(last_uniq)\n    return word if last_uniq is not None else None", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    list_max = []\n    for i in words:\n        if len(i) == 0:\n            continue\n        for j in words:\n            if len(i) > len(j):\n                list_max.append(j)\n                break\n    if len(list_max) == 0:\n        list_max.append(list_max[0])\n        print(\" \".join(list_max))\n    else:\n        return list_max[-1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for w in words:\n        if len(w) > max:\n            max = len(w)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # check if the strings contains only words and remove empty words\n    words = words.split()\n\n    # find maximum word length\n    l = 0\n    for word in words:\n        l = max(l, len(word))\n    # print \"max len = %d\" % l\n\n    return words[l]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    to_return = \"\"\n    for word in words:\n        if len(word) > 1:\n            try:\n                # Look for a special character that makes the word unique\n                special_characters = [\".\", \"!\", \"?\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    count = 0\n    for w in words:\n        count += 1\n        if count > len(words):\n            break\n    if len(words) > count:\n        return words[0]\n    else:\n        return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = [x.strip() for x in words.split(\" \")]\n    return len(set(words))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Start with an empty list to store the words\n    word_list = []\n\n    # For each word in the list\n    for word in words:\n        # Check if the word has unique characters\n        if len(set(word))!= len(word):\n            # Store the word\n            word_list.append(word)\n\n    # Return the word with maximum number of unique characters\n    return word_list[-1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    unique = []\n    count = 1\n    for word in words:\n        if word not in unique:\n            unique.append(count)\n            count += 1\n    # Sort the list\n    unique.sort(key=lambda x: len(x))\n    return unique[-1][:-1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    count = 0\n    for word in words:\n        count += 1\n        if count > count:\n            max = word\n        else:\n            max = \"\"\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # word = next(i for i in words if i!= \"\")\n    # return word.split(\" \")[0]\n    found = \"\"\n    # loop over the words in the list\n    for word in words:\n        if word in found:\n            # if more than one word in the list have the same maximum\n            # number of characters, pick the first one that is not\n            # a space\n            if word.count(\" \") > found.count(\" \"):\n                found = word\n            else:\n                return word\n        else:\n            found = word\n    # return the word that is not a space\n    return found", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    count = len(words)\n    max_count = 0\n    for word in words:\n        if word not in words:\n            break\n        count = count - 1\n        if count > max_count:\n            max_count = count\n    return max_count", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    elif len(words) > 1:\n        max_index = 0\n        for i, word in enumerate(words):\n            if len(word) > max_index:\n                max_index = len(word)\n        return words[max_index]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    result = \"\"\n    for word in words:\n        unique = 0\n        for char in word:\n            if char not in unique:\n                unique = unique + 1\n        result = word\n        if unique > len(words):\n            result = words[0]\n    return result", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_str = \"\"\n    for word in words:\n        if len(word)!= 1:\n            continue\n        else:\n            max_str += word[0]\n    return max_str", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = list(words)\n    count = 0\n    for word in words:\n        if count!= len(words):\n            break\n        count += 1\n    if count == len(words):\n        return words[0]\n    else:\n        return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word = words[0]\n    count = 0\n    for word in words:\n        count += 1\n        if word!= word:\n            if count > count:\n                return word\n            count = 0\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(set(words), key=len, reverse=True)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    n = 0\n    for i in words:\n        if n == len(i):\n            return i\n        n += 1\n    return i", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_chars = 0\n    unique_chars = []\n    for w in words:\n        if w in unique_chars:\n            continue\n        if len(w) > max_chars:\n            max_chars = len(w)\n            unique_chars.append(w)\n    return max_chars", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    count = 0\n    max = 0\n    for i in words:\n        if count == len(words):\n            break\n        elif i in words and words[i]!= words[i][0]:\n            count += 1\n            max = max(max, len(words[i]))\n        else:\n            count = 0\n    if count == len(words):\n        return words[0]\n    else:\n        return words[max]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # check if maximum number of unique characters has been reached\n    max_num = 0\n    for word in words:\n        if word.count(\" \") > max_num:\n            max_num = word.count(\" \")\n    return max_num", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for x in words:\n        for y in words:\n            if x!= y:\n                if x.count(y) > max:\n                    max = x.count(y)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = words.split()\n    word = words.pop(0)\n    words.sort(key=lambda x: len(x))\n    if len(words) == 1:\n        return words[0]\n    else:\n        return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    if len(words) > 1:\n        words = sorted(words, key=lambda x: len(x))\n    for word in words:\n        if len(word) > max:\n            max = len(word)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    unique = set()\n    total = 0\n    current = 0\n    for word in words:\n        # Add word to unique set\n        unique.add(word)\n        # Count occurrences of word\n        total += 1\n        # Find the word with maximum number of unique characters\n        if total > current:\n            current = total\n            max_char = word\n        else:\n            max_char = word[0]\n\n    return max_char", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    c = \"\"\n    for w in words:\n        c = c + w\n    return c.replace(\" \", \"\").replace(\"_\", \"\").replace(\"-\", \"\").replace(\".\", \"\").replace(\"[\", \"\").replace(\"]\", \"\").upper()", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if not words:\n        return words[0]\n\n    words = [words[0]]\n    for word in words[1:]:\n        if len(word) > len(words[0]):\n            words[0] = word\n            break\n\n    if len(words[0]) > len(words[1]):\n        words[0] = words[0]\n    else:\n        words[1] = words[1]\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        for char in word:\n            if char in max:\n                max = 0\n            else:\n                max = max + 1\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = [word for word in words if len(word)]\n    return max([word for word in words if len(word)])", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = [w for w in words if len(w) > 0]\n    return words[0].max(len)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if word.count(\",\") == 0:\n            return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_count = 0\n    for word in words:\n        count = len(set(word))\n        if count == max_count:\n            return word\n        else:\n            max_count = count\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = len(words[0])\n    if max == len(words):\n        return words[0]\n    for word in words:\n        if max > len(word):\n            max = len(word)\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max = 0\n    word = ''\n    unique = 0\n    for word in words:\n        if len(word) > max:\n            max = len(word)\n            word = word[0]\n        else:\n            unique += 1\n    return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for w in words:\n        for i, v in enumerate(w.strip().split()):\n            if i == len(w) - 1:\n                continue\n            for j in range(len(w)):\n                if v in w[j+1:i]:\n                    break\n            else:\n                break\n        else:\n            break\n    else:\n        return \"\"\n    return w", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    key = 0\n    for word in words:\n        if len(word)!= len(words[0]):\n            key = key + 1\n            continue\n        else:\n            break\n    else:\n        return \"\"\n    return words[0][key-1]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def find_max_unique(words):\n        \"\"\"Find the unique character with maximum number of occurrences in the\n        list.\"\"\"\n        max = 0\n        for i in words:\n            if i not in words:\n                max = i\n                break\n        return max\n\n    return find_max_unique\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Create a dictionary with the number of unique characters in each word.\n    unique = {}\n    for word in words:\n        count = len(word) - 1\n        unique[word] = count\n    # Create the sorted list of words.\n    words = sorted(unique.keys())\n    # Find the maximum number of unique characters.\n    return words[-1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for w in words:\n        if len(w) > max:\n            max = len(w)\n    return max + 1", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def f(s):\n        \"\"\"Return the word with maximum number of characters.\n\n        The word with maximum number of unique characters is\n        the first word that contains the maximum number of unique characters.\n\n        The word with maximum number of characters is\n        the first word that is a unique character.\n        \"\"\"\n        if len(s) > 1:\n            return s[0]\n        elif len(s) == 1:\n            return s[0]\n        else:\n            return s[0].count(' ') + 1\n\n    words = [w for w in words if w!= '']\n    num_unique = 0\n    for w in words:\n        if len(w) > num_unique:\n            num_unique = len(w)\n            return w\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Python 3.3 doesn't have `len(a) < len(b) < len(c)`\n    # Python 3.4 introduces `len(b) < len(c)`\n    # Python 3.5 introduces `len(b) < len(c) < len(a)`\n    if not hasattr(words, \"__len__\"):\n        words = [words]\n    for i in range(len(words)):\n        for j in range(len(words)):\n            if words[i].count(words[j]) == 0:\n                break\n        else:\n            words[i] = words[j]\n    return words[0].count(\" \") == len(words[0]) - len(words[0].split()) - 1", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    #assert len(words) > 0, \"List should not be empty\"\n    assert words[0] == \"\"\n    for word in words:\n        if word == \"\" or word in words:\n            return word\n\n    return len(words) > 0 and words[0] or \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    from collections import Counter\n    def find_max(words):\n        \"\"\"Return the word with maximum number of unique characters.\"\"\"\n        c = Counter(words)\n        return max(c.values(), key=lambda x: len(x))\n\n    return find_max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def find_max_word(strings):\n        \"\"\"Find the word which has maximum number of unique characters in\n        the given list of strings.\"\"\"\n        max_len = 0\n        for x in strings:\n            for y in x:\n                if len(y) > max_len:\n                    max_len = len(y)\n            if len(x) == max_len:\n                return x\n        return \"\"\n    return find_max_word(words)\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    unique_characters = [char for char in words if char not in words[0]]\n    if len(unique_characters) > 1:\n        words = unique_characters[0].replace(\" \", \"\").split()\n    else:\n        words = unique_characters[0].split()\n    return words[0].replace(\" \", \"\").split()[-1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    number_of_words = len(words)\n    max_index = number_of_words - 1\n\n    def is_max(word):\n        return max_index > 0 and number_of_words > max_index\n\n    while max_index > 0:\n        index = max_index - 1\n        word = words[index]\n        if is_max(word):\n            max_index -= 1\n        else:\n            return word\n\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    else:\n        return find_max(words[0].split())[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def _find_max(l):\n        for word in l:\n            if len(word) == len(word):\n                return word\n        raise Exception(\"Problem with the list of words\")\n    return _find_max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    find = lambda x: len(set(x) - set(x) if x else set()) if len(x) > 1 else len(x)\n    max = find(words)\n    return max if max == words else words[max - 1] if max > words else words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for w in words:\n        if w not in max:\n            max = len(w)\n            if w.isalnum():\n                if max == 0:\n                    return w\n                elif max == 1:\n                    return w\n        else:\n            return \"\"\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def max(s, word):\n        if len(s)!= len(word):\n            return word\n        for char in s:\n            if char not in word:\n                return word\n        return s[0]\n\n    words = words.split()\n    return max(words, word=words[0])", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = list(words)\n    max = 0\n    for word in words:\n        for i in range(len(word)):\n            if word[i] in words[-1]:\n                break\n            else:\n                max = i + 1\n    return words[max]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = words.split(' ')\n    unique_characters = ''\n    for word in words:\n        unique_characters += word\n    max_number = unique_characters.count(' ') + 1\n    return unique_characters[max_number]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = [w for w in words if w]\n    unique_words = set(w for w in words if w in words[0])\n    count = 0\n    for w in words:\n        if not w in unique_words:\n            count += 1\n        if count == len(unique_words):\n            return w\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        if len(word) > max:\n            max = len(word)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return words[0]\n    return words[0].count(\" \") + 1", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # create a function to calculate number of unique characters\n    # or use find_max_lexicographical, which will return first string\n    def find_max_unique_char(words):\n        \"\"\"Function to calculate the number of unique characters in a list of\n        strings. If the list contains multiple words, use the function\n        find_max_lexicographical to sort them in lexicographical order and\n        return the first word with maximum number of unique characters.\n\n        The function finds the unique characters of each word. It\n        calculates the number of characters in the list. Then it returns\n        the first word with the maximum number of characters.\n\n        For example, find_max_unique_char([\"abcd\", \"efgh\"]) == \"efg\"\n        find_max_unique_char([\"abcd\", \"efgh\"], \"efg\") == \"efg\"\n        find_max_unique_char([\"abcd\", \"efgh\"], \"efgh\") == \"\"efgh\"\n\n        The list of words should contain a word followed by an \" \"\n        and at least one word (words can be empty). If the word\n        is not followed by an \" \", it is not included in the\n        calculation. The following words are not included:\n        * spaces", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def f(s):\n        return len(s) > len(s.lower()) and s.lower().count(\" \") > s.lower().count(\"\\t\")\n    return f", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    else:\n        for x in words:\n            for y in words:\n                if x.count(y) > x.count(y):\n                    return x\n    return words[0]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for w in words:\n        max = max + len(w)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    list = []\n    for word in words:\n        list.append(word.strip())\n    list.sort()\n    max = len(list[0])\n    for word in list:\n        if len(word) > max:\n            max = len(word)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        chars = [char.lower() for char in word.lower()]\n        count = len(chars)\n        if count == len(words):\n            break\n    else:\n        return words[0]\n\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    # iterate over the list of strings\n    for word in words:\n        # remove trailing spaces\n        word = word.strip()\n        # check for empty words\n        if word == \"\":\n            continue\n        # check if this word is already in the list\n        if word in words:\n            # update the maximum value\n            max = word\n        else:\n            # add this word to the list\n            words.append(word)\n            # increase the number of unique characters\n            max = max + 1\n    return words[max]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        if len(word) == max:\n            max = len(word)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_len = max(len(word) for word in words)\n    max_len = max(len(w) for w in words if w!= \"\")\n    if max_len == 0:\n        return \"\"\n    if max_len == 1:\n        return words[0]\n    if max_len == len(words):\n        return words[-1]\n    try:\n        unique = [w for w in words if w not in words]\n        max_idx = unique.index(max_len)\n    except ValueError:\n        return \"\"\n    return unique[max_idx]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    count = 0\n    for w in words:\n        count += len(w)\n    max = len(words) if count == 0 else count\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    else:\n        return max(x for x in words if len(x) == 1)</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max = 0\n    for word in words:\n        if len(word) > max:\n            max = len(word)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for w in words:\n        if w not in words:\n            return w\n\n    for w in words:\n        if w in words:\n            return w\n\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        unique = 0\n        for c in word:\n            if c not in unique:\n                unique += 1\n        max = max if unique > max else unique\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    num_unique = 0\n    for word in words:\n        if word not in num_unique:\n            num_unique = len(word)\n            max_unique = len(word)\n            break\n\n    if num_unique == 0:\n        return \"\"\n    else:\n        return words[num_unique - 1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = len(set(words))\n    if max == 1:\n        return words[0]\n    else:\n        for word in words:\n            unique = 0\n            for char in word:\n                unique += 1\n                if char in set(words):\n                    unique -= 1\n            if unique > max:\n                return word\n        return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) < 2:\n        return \"\"\n    chars = set()\n    for word in words:\n        chars.update(word.lower().split())\n    max = 0\n    for char in chars:\n        if char not in chars:\n            max += 1\n    if max == len(chars):\n        max = chars[0]\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    unique = set()\n    index = 0\n    count = 0\n    for word in words:\n        unique.add(word)\n        count += 1\n        if count == len(words):\n            if word in unique:\n                return word\n        index += 1\n\n    return \"\".join(unique)\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(words, key=len)\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    count = 0\n    for word in words:\n        count += 1\n        if count == len(words):\n            return word\n        elif count == len(words)-1:\n            return words[count-1]\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        max = max + len(word)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for x in words:\n        if x not in max:\n            max = len(x)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    count = 0\n    for word in words:\n        count += 1\n        if word == words[count-1]:\n            return word\n\n    return words[0]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = words.split()\n    max = len(words)\n\n    if len(words) == 1:\n        return words[0]\n    else:\n        for word in words:\n            if len(word) > max:\n                max = len(word)\n\n        if max < len(words):\n            return words[0]\n        else:\n            return words[-1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        for char in word:\n            if char not in words[0]:\n                max = max + 1\n    if max == len(words):\n        return words[0]\n    else:\n        return words[max]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def longest(w):\n        \"\"\"Return the longest word in the list w.\n        \"\"\"\n        if len(w) < 1:\n            return \"\"\n        words = map(len, w)\n        words.sort()\n        return words[0]\n    # pass the list of strings to the longest function\n    result = longest(words)\n    # return the found word\n    return result", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word = \"\"\n    unique = set()\n    for w in words:\n        if not w.isupper():\n            unique.add(w.lower())\n        else:\n            unique.add(w)\n    if len(unique) == 0:\n        print(\"No unique characters in the list!\")\n        return \"\"\n    highest_uniq = max(list(unique), key=len)\n    return highest_uniq", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    letters = [letter for letter in words if letter]\n    max_letter = len(letters[0]) # max number of characters in first letter\n    # finding the second highest number\n    max_letter2 = len(letters[1]) # max number of characters in second letter\n    if max_letter2 > max_letter:\n        max_letter2 = 0\n        max_letter = max_letter2\n    if len(words) > 1:\n        max_letter = max(find_max(words), key=lambda x: len(x[0]))\n    return words[0][:-max_letter]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    maxchars = 0\n    words = [w for w in words if w not in \"\"]\n\n    # Go through each word in the list\n    for word in words:\n        numchars = 0\n        for i, c in enumerate(word):\n            if c in \"\":\n                numchars += 1\n        if numchars > maxchars:\n            maxchars = numchars\n        else:\n            if i > 0 and c!= \"\":\n                if c not in \"\":\n                    maxchars += 1\n            else:\n                maxchars += 1\n\n    return maxchars", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return words[0]\n\n    maxn = 0\n    for w in words:\n        if len(w) > maxn:\n            maxn = len(w)\n\n    return maxn", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = sorted(words, key=len)\n    if len(words) == 1:\n        return words[0]\n    else:\n        return find_max(words[:-1])", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def find(s):\n        if len(s) == 0:\n            return s\n        if len(s) > 0:\n            return s[0]\n        return \"\"\n\n    return find(max(words) + \" \")", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = set(words)\n    name = \"max\"\n    # Find unique characters\n    unique = set(words)\n    # Sort by frequency\n    unique.sort()\n    # Find maximum\n    if len(unique) == 1:\n        return words.pop(0)\n    else:\n        max = unique.pop()\n        return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    count = 0\n    word = \"\"\n    for word in words:\n        if word in words:\n            count += 1\n            if count == len(words):\n                return word\n        else:\n            break\n    else:\n        return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = [w for w in words if w not in \"\"]\n    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    result = \"\"\n    for word in words:\n        result += word\n        result += \" \"\n    return result[:len(result)-1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    unique = []\n    for word in words:\n        if word not in unique:\n            unique.append(word)\n            max = len(word)\n            while len(word)!= max:\n                word = word[:max] + \" \" + word[max:]\n    return max, max - len(unique)\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        for char in word:\n            if char in word:\n                count = len(word) - 1\n                max = max + count\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    min = len(words) - 1\n    max = len(words) - 2\n    for word in words:\n        if len(word) < min:\n            min = len(word) - 1\n        if len(word) > max:\n            max = len(word) - 2\n    return words[max]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    count = 0\n    length = len(words)\n    for word in words:\n        count += 1\n        if len(word) == length:\n            return word\n        elif word[0] == word[-1] == word:\n            count += 1\n        if count > max([len(w) for w in words]):\n            max_count = len(words)\n            max = max([len(w) for w in words])\n            max_count = max_count if count > max_count else count\n            return word if word[0] == word[-1] else word[:max_count]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        if len(word) == 1:\n            max = len(word)\n        else:\n            max += len(word)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for w in words:\n        if len(w)!= len(max):\n            max = len(w)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    chars = []\n    count = 0\n    for word in words:\n        chars.append(len(word))\n        count += 1\n    return min(chars, key=len)"]]