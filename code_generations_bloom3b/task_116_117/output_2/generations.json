[["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # sort array using binary sort\n    return [int(x) for x in arr]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: x & 1, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    res = []\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            res.append(i)\n        elif arr[i] == 0:\n            res.append(i + 1)\n    return res", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    i = 0\n    j = len(arr) - 1\n    while i <= j:\n        if arr[i] == arr[j]:\n            continue\n        k = 0\n        while k < len(arr):\n            if arr[k] == arr[j]:\n                k += 1\n                continue\n            else:\n                break\n        if arr[i] > arr[k]:\n            j -= 1\n            i += 1\n        else:\n            i -= 1\n            j += 1\n    return arr[i:j]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def sort_indices(arr, k):\n        \"\"\"\n        Returns the indices of the array elements that have at least k ones.\n        \"\"\"\n        result = []\n        for i in xrange(len(arr)):\n            if arr[i] & (1 << (k - 1)):\n                result.append(i)\n        return result\n\n    result = []\n    for i in sort_indices(arr, len(arr)):\n        result.append(i)\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (x & 1) == 0, reverse=True)</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def cmp(a, b):\n        if not a and b:\n            return 0\n        elif a == b:\n            return 0\n        elif a == 0:\n            return 1\n        else:\n            return cmp(a[1:], b[1:])\n\n    sorted = []\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            sorted.append(i)\n        else:\n            sorted.append(i + 1)\n    return sorted", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n\n    # Start by sorting the array by number of ones.\n    # The array can be sorted in ascending order with one array sort call.\n    # The array can be sorted in descending order with two array sort calls.\n    # It is only possible to sort in ascending order if the array is non-negative.\n    # The array can be sorted in descending order if the array is non-negative.\n    # The array can be sorted in ascending order if the array is non-negative.\n    # The array can be sorted in descending order if the array is non-negative.\n    # The array can be sorted in ascending order if the array is non-negative.\n    # The array can be sorted in descending order if the array is non-negative.\n    # The array can be sorted in ascending order if the array is non-negative.\n    # The array can be sorted in descending order if the array is non-negative.\n    # The array can be sorted in ascending order if the array is non-negative.\n    # The array can be sorted in descending order if the array is non-negative.\n    # The array can be sorted in ascending order if the array is non-negative.\n    # The array can be sorted in descending order if the array is non-negative.\n    # The array can be sorted in ascending order if", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    maxlen = max(len(str(x)) for x in arr)\n    if maxlen == 0:\n        return\n    if len(arr) == 1:\n        return sort_array([str(x) for x in arr])\n    else:\n        return sort_array([int(x) for x in arr])[::-1]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(sorted(arr, key=lambda x: x & 1), reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: x & 1)\n    for i in range(len(arr)):\n        if arr[i] & 1:\n            arr[i] = arr[i] + 1\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr[0]]\n    res = []\n    for i in range(len(arr) - 1):\n        res.append(arr[i])\n        for j in range(len(arr)):\n            if arr[j] > arr[j + i]:\n                res.append(arr[j + i])\n    return res", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    arr = [int(x) for x in arr]\n    if len(arr) == 1:\n        return sort_array(arr[0])\n    else:\n        result = []\n        for i in range(len(arr)):\n            result.append(arr[i])\n            if arr[i] % 2 == 0:\n                result.append(arr[i])\n                result.append(arr[i])\n        return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return []\n    if n == 1:\n        return [arr[0]]\n    if n % 2 == 0:\n        return sort_array([arr[0], arr[1], arr[2], arr[3]])\n    return sort_array([arr[0], arr[1], arr[2], arr[3]] + [arr[n - 1]])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def sort(x):\n        if len(x) == 1:\n            return x[0]\n        else:\n            return sort_array(x)[1]\n    return sort(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 1:\n        return [arr]\n    if len(arr) == 2:\n        return [arr]\n    if len(arr) == 3:\n        return [arr]\n    if len(arr) == 4:\n        return [arr]\n    if len(arr) == 5:\n        return [arr]\n    return sort_array(sort_array(arr[1:])) + sort_array(arr[:-1])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return [arr[0]]\n    else:\n        a = []\n        for i in range(len(arr)):\n            if arr[i] & 1:\n                a.append(arr[i])\n        return sorted(a)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # The following code is taken from the Python docstring of the built-in\n    # sorted function.\n    # We need to do the same thing for the sorted function here, since the\n    # Python 2.6 documentation doesn't specify the same number of arguments\n    # and the order.\n    #\n    # The code below is based on a C++ implementation of the sorted function\n    # from http://www.cplusplus.com/reference/algorithm/sorted/\n    #\n    # The code below is based on a C++ implementation of the sorted function\n    # from http://www.cplusplus.com/reference/algorithm/sorted/\n    #\n    # We also need to take into account that the sorted function takes a\n    # callable as the first argument, while the sorted function takes a\n    # callable as the second argument.\n    #\n    # In Python 2.6, the sorted function takes a function as the first\n    # argument, while the sorted function takes a function as the second\n    # argument. This means that we need to make some changes to the\n    # sorted function to make it work in Python 2.6.\n    #\n    # We also need to take into account that the sorted function takes a\n    # callable as the first argument, while the sorted function takes a\n    # callable", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 1:\n        return arr\n\n    if len(arr) == 2:\n        return sort_array(arr[0]) + sort_array(arr[1])\n\n    # Sort the array according to the number of ones in their binary representation\n    # ascending order\n    # For similar number of ones, sort based on decimal value.\n\n    # Create a list of all possible numbers\n    nums = []\n    for i in range(0, len(arr)):\n        if arr[i] == 0:\n            nums.append(0)\n        else:\n            nums.append(arr[i])\n\n    # Sort the list\n    nums.sort()\n\n    # Convert the list to a string\n    num_string = ''.join(str(n) for n in nums)\n\n    # Return the sorted array\n    return num_string", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # This is a very naive implementation, you can improve it.\n    num_ones = sum(1 for i in arr)\n    for i in range(len(arr)):\n        if num_ones > arr[i]:\n            arr.insert(i, num_ones - arr[i])\n        else:\n            break\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # get the number of ones\n    num_of_ones = 0\n    for x in arr:\n        if x!= 0:\n            num_of_ones += 1\n    # sort by number of ones\n    arr.sort(key=lambda x: x.count('1') - num_of_ones)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = [int(x) for x in arr]\n    arr.sort()\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] % 2:\n            arr[i] = arr[i] + 1\n        else:\n            arr[i] = arr[i] / 2\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    max_val = max(arr)\n    if len(arr) == 1:\n        return [max_val]\n    i = 0\n    while i < len(arr):\n        if max_val == arr[i]:\n            return sort_array(arr[:i] + [arr[i]])\n        else:\n            i += 1\n    return sort_array(arr[:i] + [max_val])\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr]\n    n = len(arr[0])\n    if n == 1:\n        return sort_array([arr[0]])\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            n = n - 1\n            j = i - 1\n            while j >= 0:\n                if arr[j] > arr[j-1]:\n                    n = n - 1\n                    j = j - 1\n                    break\n            if j < 0:\n                j = n - 1\n            while j >= 0:\n                if arr[j] < arr[j-1]:\n                    n = n - 1\n                    j = j - 1\n                    break\n            if j < 0:\n                j = n - 1\n            if j < 0:\n                n = n - 1\n                j = n - 1\n                break\n        else:\n            n = n - 1\n    return sort_array([arr[n]])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # sort by number of ones\n    # note: if all numbers have the same number of ones, sort based on\n    # decimal value\n    if len(arr) == 1:\n        return sort_decimal(arr[0])\n    else:\n        return sort_decimal(arr[0]) + sort_decimal(arr[1]) + \\\n                sort_decimal(arr[2]) + sort_decimal(arr[3]) + \\\n                sort_decimal(arr[4]) + sort_decimal(arr[5]) + \\\n                sort_decimal(arr[6]) + sort_decimal(arr[7]) + \\\n                sort_decimal(arr[8]) + sort_decimal(arr[9]) + \\\n                sort_decimal(arr[10]) + sort_decimal(arr[11]) + \\\n                sort_decimal(arr[12]) + sort_decimal(arr[13]) + \\\n                sort_decimal(arr[14]) + sort_decimal(arr[15]) + \\\n                sort_decimal(arr[16]) + sort_decimal(arr[17]) + \\\n                sort_decimal(arr[18]) + sort_decimal(arr[19]) + \\\n                sort_decimal(arr[20]) + sort_decimal(arr[21]) + \\\n                sort_decimal(arr[", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = [int(x) for x in arr]\n    return [int(x) for x in sorted(arr, key=lambda x: x & 1)]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    else:\n        return sort(arr, key=lambda x: int(x) & 1, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(a, b):\n        return cmp(int(a), int(b)) if a is not None else cmp(int(b), int(a))\n    return sorted(cmp, key=cmp)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Sort the array according to the number of ones in the binary representation\n    # of each element\n    # Then sort the array based on the decimal value\n    # This will give you the result you are looking for.\n    # If you want to sort based on the decimal value,\n    # you can just use this function with an empty list ([])\n    # or with a list of values ([vals])\n\n    # Convert the array to a list of lists\n    lst = [[] for x in range(len(arr))]\n    for i, item in enumerate(arr):\n        if item!= 0:\n            lst[i].append(item)\n\n    # Sort the list of lists\n    lst.sort()\n\n    # Now sort the list of lists based on the decimal value\n    lst.sort(reverse=True)\n    return lst", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def sort_func(a, b):\n        \"\"\"\n        Return the number of ones in the binary representation of a and b.\n        \"\"\"\n        return (a & (1 << (len(a) - 1))) - (b & (1 << (len(b) - 1)))\n\n    a = sorted(arr, key=sort_func)\n    b = sorted(arr, key=sort_func)\n    return a, b", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] % arr[j] == 0:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def cmp(a, b):\n        return cmp(a, b) ^ cmp(a[1:], b[1:])\n\n    if len(arr) == 1:\n        return cmp(arr[0], arr[1])\n    else:\n        return cmp(sort_array(arr[:-1]), sort_array(arr[1:]))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # test if the array is empty\n    if len(arr) == 0:\n        return None\n\n    # test if the array is sorted\n    if sort_array(arr)!= sort_array(arr):\n        return None\n\n    # test if the array is sorted\n    if sort_array(arr) is None:\n        return None\n\n    # test if the array is sorted\n    if sort_array(arr) == sort_array(arr):\n        return None\n\n    # test if the array is sorted\n    if sort_array(arr) is None:\n        return None\n\n    # return the sorted array\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Binary sort\n    def binary_sort(a):\n        return sorted([int(x) if x else'' for x in a])\n    # Sort based on decimal values\n    def decimal_sort(a):\n        return sorted([int(x) for x in a])\n    # Sort based on binary values\n    def binary_sort2(a):\n        return sorted([int(x) if x else'' for x in a], key=binary_sort)\n    # Sort based on decimal values\n    def decimal_sort2(a):\n        return sorted([int(x) for x in a], key=decimal_sort)\n    # Sort based on binary values\n    def binary_sort3(a):\n        return sorted([int(x) if x else'' for x in a], key=binary_sort)\n    # Sort based on decimal values\n    def decimal_sort3(a):\n        return sorted([int(x) for x in a], key=decimal_sort)\n    # Sort based on binary values\n    def binary_sort4(a):\n        return sorted([int(x) if x else'' for x in a], key=binary_sort)\n    # Sort based on decimal", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def _compare(a, b):\n        if a == 0:\n            return -1\n        elif a == 1:\n            return 1\n        else:\n            return int(a) - int(b)\n\n    if len(arr) < 2:\n        return 0\n\n    a = arr[0]\n    b = arr[1]\n\n    if a == 0:\n        return _compare(b, a)\n\n    elif b == 0:\n        return _compare(a, b)\n\n    else:\n        return _compare(a, b) + 1", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    result = []\n    for i in range(len(arr)):\n        if arr[i] % 2:\n            result.append(arr[i])\n        else:\n            result.append(-arr[i])\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    return sorted(arr, key=lambda x: x[0], reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def sort_ones(arr):\n        \"\"\"\n        Sort the array of non-negative integers according to number of ones\n        in their binary representation in ascending order.\n\n        It must be implemented like this:\n        >>> sort_ones([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n        \"\"\"\n        return [int(a, 2) for a in arr]\n    def sort_dec(arr):\n        \"\"\"\n        Sort the array of non-negative integers according to number of ones\n        in their binary representation in descending order.\n\n        It must be implemented like this:\n        >>> sort_dec([1, 5, 2, 3, 4]) == [-5, -4, -3, -2, -1]\n        \"\"\"\n        return [int(a, 2) for a in arr]\n    return sorted(zip(sort_ones, sort_dec), key=lambda x: x[1])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # The number of ones in binary representation\n    # of a number is the same as the number of ones in its decimal representation.\n    # So, we need to find out the number of ones in the decimal representation\n    # of each number and sort it accordingly.\n\n    # Print out the array\n    print('Input array:', end='')\n    for i in range(len(arr)):\n        print(str(arr[i]), end='')\n\n    # Get the number of ones in the decimal representation\n    # of each number\n    num_ones = 0\n    for i in range(len(arr)):\n        num_ones += int(decimal.Decimal(str(arr[i]))).quantize(1)\n\n    # Sort the array in ascending order\n    for i in range(len(arr)):\n        if int(decimal.Decimal(str(arr[i]))).quantize(1) > num_ones:\n            arr[i], arr[len(arr) - i - 1] = arr[len(arr) - i - 1], arr[i]\n\n    # Print the sorted array\n    print('Sorted array:', end='')\n    for i in range(len(arr)):\n        print(str(arr[i]), end='')\n\n    return arr\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(a, b):\n        if len(a) == len(b):\n            return cmp(a.count(1), b.count(1))\n        else:\n            return cmp(a.count(0), b.count(0))\n    return [cmp(x, y) for x, y in zip(arr, sort_array(arr))]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: int(x) & 1)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    if len(arr) == 0:\n        return\n\n    # Create the result array\n    res = []\n\n    # Find all the elements that are not in the first position\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            res.append(arr[i])\n\n    # Sort them\n    for i in range(len(res)):\n        if res[i] < res[i+1]:\n            sort_array(res)\n\n    return res\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n        if arr[i] < arr[j]:\n            arr.reverse()\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare(a, b):\n        \"\"\"\n        Compares the two numbers.\n\n        Parameters\n        ----------\n        a : int\n            First number\n        b : int\n            Second number\n        \"\"\"\n        return cmp(int(a), int(b))\n    return [(i, i) for i in sorted(arr, key=compare)]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    sorted_arr = []\n    for item in arr:\n        if item > 0:\n            sorted_arr.append(item)\n        else:\n            sorted_arr.append(0)\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n\n    if len(arr) == 1:\n        return [arr]\n\n    # Return a sorted array with the number of ones as the key.\n    res = []\n    for i in range(len(arr)):\n        res.append(int(arr[i]) / 2)\n    return res", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    elif len(arr) == 1:\n        return [arr[0]]\n    else:\n        return sort_indices(arr, 1, len(arr), lambda i: int(arr[i]) == 1)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return [arr]\n    if len(arr) == 1:\n        return [arr]\n    if len(arr) == 2:\n        return sort_array(arr[1:])\n    if len(arr) == 3:\n        return sort_array(arr[:2])\n    if len(arr) == 4:\n        return sort_array(arr[:3])\n    if len(arr) == 5:\n        return sort_array(arr[:4])\n    return sort_array(arr[:5])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return [None]\n\n    left = [arr[0]]\n    right = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            right.append(arr[i])\n        else:\n            left.append(arr[i])\n\n    if len(right) < len(left):\n        return [left, right]\n    else:\n        return [right, left]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    num_ones = sum(arr)\n    num_decimals = len(str(num_ones))\n    if num_ones == num_decimals:\n        return [arr[i] for i in range(len(arr))]\n    else:\n        return sort_integer(arr)[::-1]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    if len(arr) == 0:\n        return []\n\n    # in binary representation, the numbers are in increasing order\n    # and all numbers with the same number of ones are sorted\n    # based on their decimal value\n    # this is the sorting algorithm used by the sorting program in matlab\n    #\n    # this is the algorithm used in the sorting program in Python\n    #\n    # so, here we have to reverse the order of the binary representation of\n    # the numbers and then sort the array in ascending order\n    #\n    # the reverse of the binary representation of the numbers is done\n    # using the following algorithm\n    #\n    # if the binary representation of the number is odd,\n    # then we need to reverse the number\n    #\n    # if the number is even,\n    # then the number has to be divided by 2\n    #\n    # then the number is reversed\n    #\n    # in this case, the number is a multiple of 2\n    #\n    # so, we need to add 1 to the number\n    #\n    # and we need to divide the number by 2\n    #\n    # we get the new number\n    #\n    # we need to reverse the number\n    #\n    # and then we need to add 1 to the number\n    #\n    # and we", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 1:\n        return arr\n    else:\n        if len(arr) % 2 == 0:\n            return sort_array(arr[:2])\n        else:\n            return sort_array(arr[:2] + [arr[-1]])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr]\n    a = arr[0]\n    for i in range(1, len(arr)):\n        if a & arr[i]:\n            a = a << 1\n            a += arr[i]\n    return [a >> 1, a & 1]\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def sort_func(a):\n        if len(a) % 2!= 0:\n            return len(a) / 2\n        else:\n            return a[0]\n\n    sort_func.__doc__ = \"Returns a sorted array of non-negative integers.\"\n\n    return sorted(arr, key=sort_func)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # If the array is already sorted, return the same.\n    if len(arr) == len(arr):\n        return arr\n\n    # Sort the array with the binary representation of the numbers in ascending order.\n    for i, x in enumerate(arr):\n        if x == 0:\n            arr[i] = i + 1\n        elif x == 1:\n            arr[i] = i - 1\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return [arr]\n    else:\n        return sort(arr, lambda x, y: cmp(x, y) == 0)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def cmp(a, b):\n        if a == b:\n            return 0\n        return 1 if a > b else -1\n\n    if len(arr) % 2 == 1:\n        cmp = cmpbydec\n    else:\n        cmp = cmpbyoct\n\n    return [cmp(a, b) for a, b in zip(arr, arr)]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) < 2:\n        return sorted(arr, key=lambda x: int(x), reverse=True)\n\n    # Sorting based on number of ones in binary representation\n    num_ones = 0\n    for i in range(0, len(arr)):\n        num_ones += 1\n        if arr[i] & 1:\n            arr[i] = 1\n        else:\n            arr[i] = 0\n\n    # Sorting based on decimal value\n    num_decimals = 0\n    for i in range(0, len(arr)):\n        num_decimals += 1\n        if arr[i] % 10:\n            arr[i] = 10 + arr[i] % 10\n        else:\n            arr[i] = arr[i] % 10\n\n    return sorted(arr, key=lambda x: int(x), reverse=True)[:num_decimals]\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return [arr]\n    max = len(arr)\n    for i in range(len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return sorted(arr, key=lambda x: x/max)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return arr\n    if n == 1:\n        return [arr[0]]\n    if n == 2:\n        return [arr[0], arr[1]]\n    if n == 3:\n        return [arr[0], arr[1], arr[2]]\n    if n == 4:\n        return [arr[0], arr[1], arr[2], arr[3]]\n    if n == 5:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4]]\n    if n == 6:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]]\n    return []", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    if len(arr) == 0:\n        return\n    if len(arr) == 1:\n        return sort_array(arr[0])\n\n    # One way to solve this is to use binary search\n    # To solve this, we need to know the number of ones in the\n    # binary representation of the numbers.\n    num_ones = len(arr) // 2\n    num_ones_to_search = len(arr)\n    if num_ones_to_search > 1:\n        num_ones_to_search = 1\n    if num_ones_to_search < 1:\n        num_ones_to_search = len(arr)\n    if num_ones_to_search > len(arr):\n        num_ones_to_search = len(arr)\n\n    # Create a list of sorted numbers\n    sorted = []\n    for i in range(len(arr) - num_ones_to_search, num_ones_to_search + 1):\n        if arr[i] == 0:\n            sorted.append(arr[i:i+num_ones_to_search])\n        else:\n            sorted.append(arr[i:i+num_ones_to_search] + arr[i+num_ones_to_search:])\n\n    # Now we can sort the array\n    return sorted", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: x & 1) + sorted(arr, key=lambda x: x & ~1)</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def _sort(i):\n        return i % 2 == 0 and i == 1 or i % 2 == 1 and i == 0\n\n    return sorted([_Sort(x) for x in arr], key=lambda x: x)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            return 1\n        else:\n            return -1", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    num = len(arr)\n    for i in range(num):\n        if arr[i] == 0:\n            arr[i] = 1\n        else:\n            arr[i] = -1\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    if len(arr) == 1:\n        return sort_array(arr[0])\n    if len(arr) == 2:\n        return sort_array(arr[0], arr[1])\n    if len(arr) == 3:\n        return sort_array(arr[0], arr[1], arr[2])\n    if len(arr) == 4:\n        return sort_array(arr[0], arr[1], arr[2], arr[3])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            if arr[i+1] > arr[i]:\n                arr.insert(i, arr[i+1])\n                i += 1\n            else:\n                arr.insert(i, arr[i])\n                i += 1\n        else:\n            if arr[i] > arr[i+1]:\n                arr.insert(i, arr[i])\n                i += 1\n            else:\n                arr.insert(i, arr[i+1])\n                i += 1\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    else:\n        return sorted(arr, key=lambda x: x[1:], reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) < 2:\n        return []\n    a = arr[0]\n    b = arr[1]\n    c = arr[2]\n    d = arr[3]\n    if a > b:\n        return [b]\n    elif a == b:\n        return [b]\n    elif a < b:\n        return [b]\n    elif a > c and a < d:\n        return [b]\n    elif a > c and a == d:\n        return [b]\n    elif a > d and a < c:\n        return [b]\n    elif a == d:\n        return [b]\n    else:\n        return []", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr[0]]\n    result = []\n    for i in range(len(arr) - 1):\n        if arr[i] % 2 == 0:\n            result.append(arr[i])\n            break\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return 1\n    if len(arr) == 2:\n        return 2\n    if len(arr) == 3:\n        return 3\n    if len(arr) == 4:\n        return 4\n    if len(arr) == 5:\n        return 5\n    if len(arr) == 6:\n        return 6\n    if len(arr) == 7:\n        return 7\n    return len(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    sorted_arr = []\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            sorted_arr.append(i)\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n\n    # The number of ones in binary representation of the integer\n    num_ones = 0\n    for x in arr:\n        num_ones += 1\n    num_ones = int(num_ones)\n\n    # The number of ones in decimal representation of the integer\n    num_decimals = 0\n    for x in arr:\n        num_decimals += 1\n    num_decimals = int(num_decimals)\n\n    # The sorted list of integers\n    sorted_list = []\n    # The last index in the array is the one where the number of ones is\n    # maximum in the binary representation\n    last_index = 0\n    for x in arr:\n        if x!= 0:\n            if x > num_ones:\n                sorted_list.append(arr[last_index])\n                last_index += 1\n            else:\n                sorted_list.append(x)\n\n    return sorted_list", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Sort by number of ones in binary representation\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            # If the number is equal to 1, sort based on decimal value\n            if arr[i] < arr[i + 1]:\n                # Increase index by 1 and continue\n                i += 1\n            else:\n                # Decrease index by 1 and continue\n                i -= 1\n                continue\n        else:\n            # If the number is not equal to 1, sort based on decimal value\n            if arr[i] > arr[i - 1]:\n                # Decrease index by 1 and continue\n                i -= 1\n            else:\n                # Increase index by 1 and continue\n                i += 1\n                continue\n    return arr\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 1:\n        return sort_array(arr[0])\n    else:\n        return sort_array(arr[:-1]) + sort_array(arr[1:])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    if len(arr) == 1:\n        return sort_array(arr[0])\n    if len(arr) == 2:\n        return sort_array(arr[0], arr[1])\n    if len(arr) == 3:\n        return sort_array(arr[0], arr[1], arr[2])\n    if len(arr) == 4:\n        return sort_array(arr[0], arr[1], arr[2], arr[3])\n    raise ValueError(\"Argument is not a valid array\")", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # first, sort the array based on number of ones\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            arr[i], arr[len(arr) - i - 1] = arr[len(arr) - i - 1], arr[i]\n    # then, sort the array based on decimal value\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            arr[i], arr[len(arr) - i - 1] = arr[len(arr) - i - 1], arr[i]\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    # sort the array by length\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            arr.remove(i)\n    # sort the array by length\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            arr.remove(i)\n    # sort the array by length\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            arr.remove(i)\n    # sort the array by length\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            arr.remove(i)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    sorted_arr = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sorted_arr.append(arr[i])\n        else:\n            sorted_arr.append(-arr[i])\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr.sort(key=lambda x: (x & 1) == 0)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return [None]\n    elif n == 1:\n        return [arr[0]]\n    else:\n        return [arr[i] for i in range(0, n)]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) % 2 == 0:\n        return sort_array(arr[:2])\n    else:\n        return sort_array(arr[1:])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Initialize the array to be sorted\n    # Note that we don't use the array.append() method here as we are using the\n    # built-in array.sort() method, which has a built-in sort() function.\n    # We use the built-in sort() function as we are not using the built-in\n    # built-in.sort() method here.\n    arr = [int(x) for x in arr]\n    # Sort the array\n    # We use the built-in sort() function as we are not using the built-in\n    # built-in.sort() method here.\n    arr.sort(key=lambda x: x % 2)\n    # Now the array has been sorted, so we can access it by its index\n    return arr[index : index + 1]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: x & 1)</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: x & 1)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(a, b):\n        return cmp(int(a), int(b)) if a!= 0 else cmp(a, b)\n    return cmp", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Returns the sorted array.\n    return sorted(arr, key=lambda x: x & 1)</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: x & 1, reverse=True)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) < 2:\n        return [arr]\n    left = arr[:]\n    right = arr[1:]\n    sorted_array = []\n    while len(left) > 0 and len(right) > 0:\n        if left[0] == right[0]:\n            sorted_array.append(left)\n            left = left[1:]\n            right = right[1:]\n        else:\n            sorted_array.append(right)\n            right = right[1:]\n    return sorted_array\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return sort(arr, lambda x, y: cmp(x, y) + 1)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # This is the Pythonic way to sort the integers. It is also a faster\n    # implementation than the C version. The C version takes more time because it\n    # has to convert the binary representation to decimal one.\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            arr[i] = int(arr[i]) + 1\n        else:\n            arr[i] = int(arr[i]) - 1\n    return arr\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return []\n    elif n == 1:\n        return [arr[0]]\n    else:\n        res = []\n        for i in range(n - 1):\n            res.append(sort_array(arr[:i]) + sort_array(arr[i + 1:]))\n        return res", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    else:\n        return sorted(arr, key=lambda x: (x == 0) and len(x) > 1)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    res = []\n    for i in range(len(arr)):\n        if arr[i] % 2:\n            res.append(arr[i])\n        else:\n            res.append(arr[i] / 2)\n    return res\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    sorted_arr = []\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            sorted_arr.append(i)\n        else:\n            sorted_arr.append(i + 1)\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if len(arr) % 2 == 1:\n        return sort_array(arr)\n    return sort_array([int(x) for x in arr.split('.')])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    if len(arr) == 1:\n        return [arr[0], ]\n    arr1 = sort_array([arr[0], ])\n    arr2 = sort_array([arr[0], ])\n    for i in range(len(arr1)):\n        if arr1[i] == arr2[i]:\n            arr1.remove(i)\n            arr2.remove(i)\n    return sorted(arr1)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def f(x):\n        if x > 0:\n            return x\n        else:\n            return -x\n    return sorted(map(f, arr), reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    else:\n        if len(arr) == 2:\n            return sort_array(arr)\n        else:\n            return sort_array(arr, True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # First, we sort the array in ascending order of the number of ones\n    # in its binary representation.\n    num_ones = 0\n    for i in range(len(arr)):\n        num_ones += arr[i] % 2\n    arr.sort(key=lambda x: (x % 2) == 0, reverse=True)\n    # Now, we sort the array in descending order of the number of ones\n    # in its decimal representation.\n    num_ones = 0\n    for i in range(len(arr)):\n        num_ones += int(str(arr[i])[2:]) - int(str(arr[i])[:2])\n    arr.sort(key=lambda x: int(str(arr[i])[2:]) - int(str(arr[i])[:2]), reverse=True)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return [int(i) for i in arr if i]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # binary representation of non-negative integers\n    n = len(arr)\n    # sort array in ascending order\n    for i in range(n):\n        if arr[i] == 0:\n            arr[i] = n + i + 1\n        else:\n            arr[i] = n + i\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return [arr]\n    elif len(arr) == 1:\n        return [arr]\n    else:\n        a = 0\n        b = 0\n        for i in range(len(arr)):\n            if arr[i] == 1:\n                a = a + 1\n            elif arr[i] == 0:\n                b = b + 1\n        if a == b:\n            return sort_array(arr[:-1]) + sort_array(arr[1:])\n        else:\n            return sort_array(arr[:-1]) + sort_array(arr[1:], reverse=True)</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    else:\n        return sorted(arr, key=lambda x: int(x & 1))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # 1. Test whether the array is empty or not.\n    if len(arr) == 0:\n        return 0\n    # 2. Sort the array in ascending order of their number of ones.\n    num_ones = 0\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            num_ones += 1\n    # 3. Sort the array in ascending order of their decimal value.\n    num_decimals = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            num_decimals += 1\n    # 4. If the number of ones and the number of decimals are equal, sort based on\n    #    the number of ones.\n    if num_ones == num_decimals:\n        return sort_array(arr, key=lambda x: x.count(1), reverse=True)\n    # 5. If the number of ones is less than the number of decimals, sort based on\n    #    the number of ones.\n    elif num_ones < num_decimals:\n        return sort_array(arr, key=lambda x: x.count(1), reverse=False)\n    # 6. If the number of ones is less than the number of ones, sort based on\n    #    the number of ones.\n    else:", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: x & 1)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def _sort(num):\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            return num\n\n    arr = [_sort(num) for num in arr]\n    return [num + 1 for num in arr]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Get number of ones in binary representation\n    num_ones = len(str(arr[0]).zfill(2))\n    # Sort based on number of ones\n    sorted_arr = sorted(arr, key=lambda x: x, reverse=True)\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = [int(i) for i in arr]\n    arr.sort(key=lambda x: x & 1)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: x & 1, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    num_of_ones = 0\n    for x in arr:\n        if x == 1:\n            num_of_ones += 1\n        else:\n            num_of_ones -= 1\n    return [int(x) for x in sorted(arr, key=lambda x: (num_of_ones, x))]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 1:\n        return [arr[0]]\n    else:\n        return sort_array([arr[0], sort_array([arr[1:], arr[0]])])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n\n    # Precondition: The array must have at least one element.\n    assert len(arr) > 0\n\n    # First, sort the array according to number of ones in their binary representation.\n    i = 0\n    for x in arr:\n        if x % 2:\n            i += 1\n            continue\n        if i == len(arr):\n            break\n        if x == 1:\n            arr.insert(0, i)\n            i += 1\n        else:\n            arr.insert(0, i)\n            i -= 1\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def sort_func(x, y):\n        if x < y:\n            return -1\n        else:\n            return 1\n\n    a = []\n    for x in arr:\n        if x > 0:\n            a.append(x)\n        else:\n            a.append(0)\n    a.sort(sort_func)\n    return a", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: x & 1, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    num = 0\n    for i in arr:\n        if i > 0:\n            num += 1\n    num = int(num / 2)\n    if num == 0:\n        num = 1\n    if num == 1:\n        num = 2\n    return sort(arr, key=lambda i: i % num)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def sort(arr):\n        \"\"\"\n        Returns sorted array of integers.\n        \"\"\"\n        sorted_arr = []\n        for i in range(len(arr)):\n            if arr[i] == 1:\n                sorted_arr.append(i)\n            else:\n                sorted_arr.append(arr[i])\n        return sorted_arr\n\n    return sort(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    sorted_array = []\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            sorted_array.append(arr[i])\n        else:\n            sorted_array.append(arr[i] / 2)\n    return sorted_array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    if len(arr) % 2!= 0:\n        raise ValueError(\"Input must be an array of non-negative integers.\")\n    if len(arr) == 1:\n        return\n    arr = [int(x) for x in arr]\n    if len(arr) % 2!= 0:\n        return\n    arr.sort(key=lambda x: x % 2)\n    return sort_array(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(x, y):\n        if x == y:\n            return 0\n        else:\n            return cmp(x.ljust(1, '0'), y.ljust(1, '0'))\n    return sorted(arr, cmp=cmp)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(a, b):\n        if a == b:\n            return 0\n        if a < b:\n            return -1\n        return 1\n\n    return cmp", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # we need to sort an array of integers\n    # sort the array by number of ones in their binary representation\n    # and then sort the array based on the decimal value\n    for i in range(len(arr)):\n        if arr[i] & 1:\n            arr[i] = (arr[i] - 1) * 10 + arr[i] % 10\n        else:\n            arr[i] = (arr[i] - 1) * 10 + arr[i] % 10 + 1\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    if len(arr) == 1:\n        return sort_array(arr)[0]\n    result = []\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            result.append(i)\n        elif arr[i] == 0:\n            result.append(i + 1)\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr[0]]\n    if len(arr) % 2 == 1:\n        return sort_array([arr[0] + arr[1:] for _ in range(len(arr) / 2)])\n    else:\n        return sort_array([arr[0] + arr[1:] for _ in range(len(arr) / 2, len(arr) // 2)])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    max_len = 0\n    for i in range(len(arr)):\n        if arr[i] > max_len:\n            max_len = arr[i]\n    max_len = max_len + 1\n    sorted_arr = []\n    for i in range(len(arr)):\n        if arr[i] > max_len:\n            sorted_arr.append(arr[i])\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        return sort_array(arr[:2])\n    if len(arr) == 3:\n        return sort_array(arr[:3])\n    return sort_array(arr[:-1])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        return sort_array(arr[0]) + sort_array(arr[1])\n    return sort_array(arr[0]) + sort_array(arr[1]) + sort_array(arr[len(arr) - 1])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    n = len(arr[0])\n    if n == 1:\n        return arr\n    elif n == 2:\n        return sort_array([arr[0], arr[1]])\n    elif n == 3:\n        return sort_array([arr[0], arr[1], arr[2]])\n    else:\n        return sort_array([arr[0], arr[1], arr[2], arr[3]])\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    else:\n        result = []\n        for i in range(len(arr) - 1):\n            if arr[i] == arr[i + 1]:\n                result.append(arr[i])\n                result.append(arr[i + 1])\n                result.append(arr[i])\n        return result\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # first find the number of ones in the binary representation of each number\n    # number of ones = number of ones in the binary representation of the number\n    # number of ones = number of ones in the binary representation of the sum of the numbers\n    # number of ones = number of ones in the binary representation of the product of the numbers\n    # number of ones = number of ones in the binary representation of the product of the sum of the numbers\n    # number of ones = number of ones in the binary representation of the product of the sum of the products of the numbers\n    # number of ones = number of ones in the binary representation of the product of the sum of the products of the sum of the products of the numbers\n    # number of ones = number of ones in the binary representation of the product of the sum of the products of the sum of the products of the sum of the products of the numbers\n    # number of ones = number of ones in the binary representation of the product of the sum of the products of the sum of the products of the sum of the products of the sum of the products of the numbers\n    # number of ones = number of ones in the binary representation of the product of the sum of the products of the sum of the products of", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    # Determine the total number of ones in the binary representation of the\n    # array. For the first element, we have to count the ones in the\n    # binary representation of the integer, i.e. the ones in the binary\n    # representation of 2. This is because the binary representation of 1 is\n    # the same as the binary representation of 2. For the other elements, we\n    # have to count the ones in the binary representation of the integer\n    # divided by 2. If the total number of ones is even, sort based on\n    # decimal value. If not, sort based on number of ones.\n    total_ones = 0\n    for x in arr:\n        total_ones += 1\n    if total_ones % 2 == 0:\n        return sort_array(arr)\n    else:\n        return sort_array([int(x) / 2 for x in arr])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr[0]]\n    arr = map(int, arr)\n    result = []\n    for i in range(len(arr)):\n        if arr[i]:\n            result.append(arr[i])\n        else:\n            result.append(0)\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # sort the array according to the number of ones in their binary representation\n    num_bits = len(arr)\n    if num_bits == 1:\n        return sort_array(arr)\n    if num_bits % 2 == 0:\n        num_bits = num_bits // 2\n        binary = '00' + arr[num_bits - 1]\n        num_ones = len(binary)\n        if num_ones == 1:\n            return sort_array(arr)\n        elif num_ones == 2:\n            return sort_array(arr)\n        elif num_ones == 3:\n            return sort_array(arr)\n        elif num_ones == 4:\n            return sort_array(arr)\n        elif num_ones == 5:\n            return sort_array(arr)\n    else:\n        num_ones = num_bits // 2\n        binary = '00' + arr[num_bits - 1]\n        num_ones = len(binary)\n        if num_ones == 1:\n            return sort_array(arr)\n        elif num_ones == 2:\n            return sort_array(arr)\n        elif num_ones == 3:\n            return sort_array(arr)\n        elif num_ones == 4:\n            return sort_array(arr)\n        elif num_ones == 5:\n            return sort_array(arr)\n        elif num_ones == 6:\n            return sort_array(arr)\n        elif num_ones == 7:\n            return sort_array(", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    if len(arr) == 1:\n        return [arr]\n\n    if len(arr) == 2:\n        return [arr[0], sort_array(arr[1:])]\n    if len(arr) == 3:\n        return [arr[0], sort_array(arr[1:]), sort_array(arr[-2])]\n    if len(arr) == 4:\n        return [arr[0], sort_array(arr[1:]), sort_array(arr[-2]), sort_array(arr[-1])]\n    raise ValueError(\"Array must be of length > 2.\")", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n\n    # Sort in ascending order\n    return [int(x) for x in sorted(arr, key=int)]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    else:\n        return sort(arr, key=lambda x: (x & 1) == 1, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def f(x):\n        if x == 0:\n            return 0\n        else:\n            return x - x % 2\n\n    def g(x):\n        return x % 2\n\n    if len(arr) == 0:\n        return []\n\n    if len(arr) == 1:\n        return [arr[0]]\n\n    if len(arr) == 2:\n        return [sort_array(arr[0]), sort_array(arr[1])]\n\n    if len(arr) == 3:\n        return [sort_array(arr[0]), sort_array(arr[1]), sort_array(arr[2])]\n\n    if len(arr) == 4:\n        return [sort_array(arr[0]), sort_array(arr[1]), sort_array(arr[2]), sort_array(arr[3])]\n\n    if len(arr) == 5:\n        return [sort_array(arr[0]), sort_array(arr[1]), sort_array(arr[2]), sort_array(arr[3]), sort_array(arr[4])]\n\n    return sorted(arr, key=lambda x: x % 2 + g(x))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    elif len(arr) == 1:\n        return sort_array(arr[0])\n    else:\n        ret = []\n        for i in range(0, len(arr)):\n            if arr[i] == 1:\n                ret.append(i)\n            else:\n                ret.append(i + 1)\n        return ret", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] == arr[j]:\n            k = i\n            while k < j and arr[k] == arr[k]:\n                k += 1\n        else:\n            k = j\n            while k > i and arr[k] == arr[k]:\n                k -= 1\n        if k == j:\n            i = j\n        else:\n            i = k + 1\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Create a list of the ones in the binary representation of the numbers.\n    num_ones = []\n    for num in arr:\n        num_ones.append(num & 1)\n    # Sort them based on number of ones in their binary representation.\n    nums = sorted(num_ones, key=lambda x: x & 1, reverse=True)\n    return nums\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Sort the array of non-negative integers according to number of ones in\n    # their binary representation in ascending order.\n    # For similar number of ones, sort based on decimal value.\n    def sort(i):\n        \"\"\"\n        Sort the array of non-negative integers according to number of ones in\n        their binary representation in ascending order.\n        \"\"\"\n        if i == 0:\n            return 0\n        if i == 1:\n            return 1\n        return (i - 1) // 2\n\n    # Initialize the sort function.\n    def sort_func(i):\n        \"\"\"\n        Sort the array of non-negative integers according to number of ones in\n        their binary representation in ascending order.\n        \"\"\"\n        return i // 2\n\n    # Loop through the array of non-negative integers.\n    for i in range(len(arr)):\n        # Calculate the binary representation of the integer.\n        i_binary = (i + 1) // 2\n        # Find the index of the binary representation of the integer that is\n        # greater than the index of the binary representation of the integer\n        # that is less than the current index.\n        i_index = i_binary // 2\n        # Find the index of the binary representation of the integer that is\n        # greater than the index of the binary representation of the integer\n        # that is less", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n\n    if len(arr) == 1:\n        return [arr[0], ]\n\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] == arr[j]:\n            i += 1\n        else:\n            j -= 1\n\n    if i == j:\n        return [arr[i], ]\n    else:\n        return [arr[i], sort_array(arr[i+1:j])]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    if len(arr) % 2 == 0:\n        return sort_array([arr[::2], arr[1::2]])\n    else:\n        return sort_array([arr[::2] + arr[1::2]])\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    nums = []\n    for item in arr:\n        nums.append(int(item))\n    return nums", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            arr[i] = len(arr)\n        else:\n            arr[i] = len(arr) + 1\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # make the array sorted\n    sorted = []\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            sorted.append(i)\n        else:\n            if i > 0:\n                sorted.append(i)\n            else:\n                sorted.append(len(arr) - 1)\n    return sorted", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # First, we sort the array by binary value\n    for i in range(len(arr)):\n        if arr[i] & 1:\n            arr[i] = -1\n    # Now, we sort the array by decimal value\n    for i in range(len(arr)):\n        if arr[i] % 2:\n            arr[i] = -1\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return [arr[0], arr[0]]\n    else:\n        nums = []\n        for i in range(0, len(arr)):\n            nums.append(arr[i])\n        nums.sort()\n        return nums", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return [arr]\n    if len(arr) == 1:\n        return [arr]\n    if len(arr) == 2:\n        return [arr]\n    if len(arr) == 3:\n        return [arr]\n    if len(arr) == 4:\n        return [arr]\n    return sort_array(arr[1:]) + sort_array(arr[:-1]) + [arr[0]]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def sort_func(x, y):\n        \"\"\"\n        This function takes a pair of integers and compares them\n        according to the function above.\n        \"\"\"\n\n        if x > y:\n            return -1\n        elif x < y:\n            return 1\n        else:\n            return 0\n\n    def compare(a, b):\n        \"\"\"\n        This function takes a pair of integers and compares them\n        according to the function above.\n        \"\"\"\n\n        return sort_func(a, b)\n\n    if len(arr) == 1:\n        return sort_func(arr[0], arr[0])\n    else:\n        return sorted(arr, key=compare, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr]\n    r = []\n    for i in range(len(arr)):\n        r.append(max(arr[:i], key=lambda x: x & 1))\n        r.append(min(arr[i+1:], key=lambda x: x & 1))\n    return r", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    if len(arr) == 0:\n        return arr\n\n    a = []\n    b = []\n    for i in range(len(arr)):\n        a.append(arr[i])\n        b.append(arr[i] & 1)\n    a.sort()\n    b.sort()\n\n    return [a, b]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr]\n    arr = [int(x) for x in arr]\n    arr = [int(x) for x in arr]\n    if len(arr) == 1:\n        return [arr]\n    if len(arr) % 2 == 0:\n        return sort_array(arr)\n    elif len(arr) % 2 == 1:\n        return sort_array(arr[1:])\n    return sort_array(arr[1:])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr[0], arr[0], arr[0], arr[0]]\n    if len(arr) % 2 == 0:\n        return [arr[len(arr) / 2], arr[len(arr) / 2], arr[len(arr) / 2], arr[len(arr) / 2]]\n    return sort_array(arr[:2]) + sort_array(arr[2:])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    a = []\n    b = []\n    i = 0\n    while i < len(arr):\n        if arr[i] == 1:\n            a.append(i)\n        else:\n            b.append(i)\n            i += 1\n    if len(a) == len(b):\n        return sort_array(a)\n    else:\n        return sort_array(b)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Sorting based on the number of ones in the binary representation\n    # (i.e. 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n    # First convert to binary, then sort.\n    arr = list(map(int, arr))\n    for i in range(len(arr)):\n        arr[i] = str(arr[i]).split(\",\")[0]\n        if len(arr[i]) == 1:\n            arr[i] = \"0\" + str(arr[i])\n    return sorted(arr, key=lambda x: len(x), reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            return i + 1\n        else:\n            return sort_array(arr[:i]) + i\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    if len(arr) == 0:\n        return arr\n\n    # The number of ones in the binary representation of the number.\n    number_of_onestars = 0\n    for i in range(len(arr)):\n        number_of_onestars += 1\n        if arr[i] == 1:\n            number_of_onestars += 1\n\n    # The number of ones in the decimal representation of the number.\n    number_of_decimals = 0\n    for i in range(len(arr)):\n        number_of_decimals += 1\n        if arr[i] == 1:\n            number_of_decimals += 1\n\n    # The number of ones in the decimal representation of the number.\n    number_of_decimals = len(arr)\n\n    # The number of ones in the binary representation of the number.\n    number_of_onestars = len(arr)\n\n    # The number of ones in the decimal representation of the number.\n    number_of_decimals = len(arr)\n\n    # The number of ones in the binary representation of the number.\n    number_of_onestars = len(arr)\n\n    # The number of ones in the decimal representation of the number.\n    number_of_decimals = len(arr)\n\n    # The number of ones in the binary representation of the number.\n    number_of_onestars = len(", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    if len(arr) == 1:\n        return sort_array([arr[0]])\n    if len(arr) == 2:\n        return sort_array([arr[0], arr[1]])\n    return sort_array([arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11], arr[12], arr[13], arr[14], arr[15], arr[16], arr[17], arr[18], arr[19], arr[20], arr[21], arr[22], arr[23], arr[24], arr[25], arr[26], arr[27], arr[28], arr[29], arr[30], arr[31], arr[32], arr[33], arr[34], arr[35], arr[36], arr[37], arr[38], arr[39], arr[40], arr[41], arr[42], arr[43], arr[44], arr[45], arr[46], arr[47], arr[48], arr[49], arr[50], arr[51], arr[52], arr[53], arr[", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return [arr[0]]\n    else:\n        arr = [int(x) for x in arr]\n        temp = []\n        for i in range(len(arr)):\n            temp.append(sorted(arr[i], key=int))\n        return temp", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # 2. Sort based on number of ones\n    # 3. Sort based on decimal value\n\n    # 1. Sort based on number of ones\n    # 2. Sort based on decimal value\n\n    # 1. Sort based on number of ones\n    # 2. Sort based on decimal value\n\n    # 1. Sort based on number of ones\n    # 2. Sort based on decimal value\n\n    # 1. Sort based on number of ones\n    # 2. Sort based on decimal value\n\n    # 1. Sort based on number of ones\n    # 2. Sort based on decimal value\n\n    # 1. Sort based on number of ones\n    # 2. Sort based on decimal value\n\n    # 1. Sort based on number of ones\n    # 2. Sort based on decimal value\n\n    # 1. Sort based on number of ones\n    # 2. Sort based on decimal value\n\n    # 1. Sort based on number of ones\n    # 2. Sort based on decimal value\n\n    # 1. Sort based on number of ones\n    # 2. Sort based on decimal value\n\n    # 1. Sort based on number of ones\n    # 2. Sort based on decimal value\n\n    # 1. Sort based on number of ones\n    # 2. Sort based on decimal value\n\n    # 1. Sort based on number of", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    else:\n        def cmp(a, b):\n            return cmp(a.count('1'), b.count('1'))\n        return sorted(zip(*[arr[i] for i in range(len(arr))]), cmp=cmp)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            arr[i] = i + 1\n        else:\n            break\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return []\n    if n == 1:\n        return [arr]\n    if n == 2:\n        return [arr[:2], arr[2:]]\n    if n == 3:\n        return [arr[:3], arr[3:]]\n    if n == 4:\n        return [arr[:4], arr[4:]]\n    return [arr]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(a, b):\n        return cmp(a[1:], b[1:]) or cmp(a[:-1], b[:-1])\n    return cmp", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # the following code is inspired by the python implementation of\n    # `sorted(numpy.array(list(numpy.array(x))), key=lambda x: x[1])`\n    # which is also available in numpy\n    # (https://docs.scipy.org/doc/numpy/reference/numpy.sort.html)\n    # but for non-negative numbers. The idea is to use the same algorithm\n    # for positive and negative numbers to get the same results.\n    # The algorithm is adapted from `numpy.sort`.\n\n    # This is the sorted array\n    # Python's sort implementation uses a binary tree to sort the array.\n    # To get the same result, we need to implement it in C.\n    # See the C implementation of `numpy.sort` for details.\n    # This implementation is based on `numpy.sort` but does not use\n    # `numpy.sort`'s `sort` function.\n    # See the `numpy.sort` implementation for details.\n\n    # The sorted array is a non-empty array of integers.\n    # Each integer corresponds to the index of a number in the sorted\n    # array. The integer is negative when the number is smaller than\n    # all the numbers in the array.\n    # See the", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def cmp(a, b):\n        \"\"\"\n        Compares two non-negative integers and returns a positive integer\n        \"\"\"\n        return int(a) - int(b)\n\n    return cmp", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    if len(arr) == 1:\n        return [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] == 0:\n            for j in range(i, len(arr)):\n                if arr[j] == 0:\n                    return sort_array(arr[:i] + sort_array(arr[i+1:]))\n    return sort_array(arr[1:])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    elif len(arr) == 1:\n        return sort_array(arr[0])\n    else:\n        return sort_array(arr[::-1])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr.sort()\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(a, b):\n        return cmp(int(a), int(b))\n\n    a = sorted(arr, cmp)\n    b = sorted(arr, cmp)\n    return a, b", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    if len(arr) == 1:\n        return arr\n    if len(arr) == 2:\n        return sort_array(arr[0]) + sort_array(arr[1])\n    if len(arr) == 3:\n        return sort_array(arr[0]) + sort_array(arr[1]) + sort_array(arr[2])\n    if len(arr) == 4:\n        return sort_array(arr[0]) + sort_array(arr[1]) + sort_array(arr[2]) + sort_array(arr[3])\n    return sort_array(arr[0]) + sort_array(arr[1]) + sort_array(arr[2]) + sort_array(arr[3]) + sort_array(arr[4]) + sort_array(arr[5]) + sort_array(arr[6])\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # sort array using binary representation of number of ones\n    # in ascending order\n    sorted = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sorted.append(arr[i])\n    return sorted", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = [int(x) for x in arr]\n    arr = [int(x) if x else 0 for x in arr]\n    arr = [int(x) if x else 0 for x in arr]\n    arr = [int(x) if x else 0 for x in arr]\n    arr = [int(x) if x else 0 for x in arr]\n    arr = [int(x) if x else 0 for x in arr]\n    arr = [int(x) if x else 0 for x in arr]\n    arr = [int(x) if x else 0 for x in arr]\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: x & 1)</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # number of ones in binary representation of each element\n    num_ones = 0\n    for i in range(len(arr)):\n        num_ones += arr[i] & 1\n\n    # sort according to number of ones\n    num_ones.sort(key=lambda x: x & 1)\n    return arr[:num_ones]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    else:\n        return sorted(arr, key=lambda x: x & 1, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def is_sorted(nums):\n        \"\"\"\n        Returns True if all the numbers in the array are in ascending order.\n        \"\"\"\n        for n in nums:\n            if n > nums[-1]:\n                return False\n        return True\n\n    # Use a simple binary search to find the smallest number in the array\n    # which is less than the smallest number in the array.\n    min_num = len(arr) - 1\n    for i in range(min_num, len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            min_num = i\n    # Find the largest number in the array which is greater than the largest\n    # number in the array.\n    max_num = 0\n    for i in range(min_num, len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            max_num = i\n    # If the smallest number is less than the largest number, return True.\n    if min_num < max_num:\n        return True\n    # If the smallest number is greater than the largest number, return False.\n    else:\n        return False", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            arr[i] = 1\n        else:\n            arr[i] = 0\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Sort the array in ascending order\n    if len(arr) == 0:\n        return\n    # Sort the array in ascending order\n    tmp = []\n    for i in range(len(arr)):\n        tmp.append(arr[i])\n        if arr[i] % 2 == 0:\n            arr[i] = arr[i] + 1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            arr[i] = arr[i] / 2\n    sort_array(tmp)\n    return", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # sort array by number of ones\n    sorted_array = []\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            sorted_array.append(i)\n    return sorted_array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n\n    # First, sort the array of integers according to the number of ones in\n    # their binary representation.\n    #\n    # The idea is to sort the array of integers in the ascending order of the\n    # number of ones in the binary representation of the integers.\n    #\n    # We use the following algorithm:\n    #\n    # - Use binary representation of integers to compute the number of ones.\n    # - Sort the array of integers according to the number of ones in the\n    #   binary representation of the integers.\n    # - Use the sorted array of integers to compute the number of ones.\n    #\n    # Example:\n    #\n    # Input:\n    #   arr = [1, 5, 2, 3, 4]\n    # Output:\n    #   sort_array(arr) == [1, 2, 3, 4, 5]\n    #\n    # 1. Use binary representation of integers to compute the number of ones.\n    # 2. Sort the array of integers according to the number of ones in the\n    #   binary representation of the integers.\n    # 3. Use the sorted array of integers to compute the number of ones.\n    #\n    # Example:\n    #\n    # Input:\n    #   arr = [1, 0, 2, 3", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # TODO: make a better implementation\n    def cmp(a, b):\n        if len(a) == len(b):\n            return cmp(a[0], b[0])\n        else:\n            return cmp(a[-1], b[-1])\n    for a in arr:\n        a = int(a)\n        b = int(b)\n        if a < b:\n            return -1\n        elif a > b:\n            return 1\n        else:\n            return cmp(a, b)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return arr\n    sorted_arr = []\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] & arr[j]:\n                sorted_arr.append(arr[i])\n                break\n        else:\n            sorted_arr.append(arr[i])\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return [arr[0]]\n    else:\n        return sorted_list(arr, len(arr) - 1)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # sort based on number of ones\n    return [arr[i] for i in range(len(arr)) if arr[i] % 2 == 0]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: x[0], reverse=True)\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return sort_array([int(x) for x in arr[:-1]]) + sort_array(arr[1:])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    # sort based on binary representation\n    b = ''.join([chr(i) for i in range(0, len(arr))])\n    a = ''.join([chr(i) for i in range(0, len(arr))])\n    for i in range(len(arr)):\n        if (a[i] > b[i]):\n            a = a[:i] + a[len(a)-1:]\n        else:\n            b = b[:i] + b[len(b)-1:]\n    return a", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: x[0])\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            arr[i] = 1\n        else:\n            arr[i] = -1\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # TODO implement this function properly\n    return []", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # 1. Determine the number of ones in the binary representation of the\n    #    input array.\n    num_ones = 0\n    for i in range(len(arr)):\n        if arr[i] & 1:\n            num_ones += 1\n    # 2. Sort the array in ascending order based on the number of ones.\n    return [arr[i] for i in range(len(arr)) if num_ones > num_ones[len(arr) - 1]]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    else:\n        return sorted(arr, key=lambda x: x & 1)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # in Python 3, use a lambda function to avoid nasty side-effects:\n    def sort_function(x):\n        \"\"\"\n        Sort the elements of the array according to the number of ones\n        in their binary representation.\n        \"\"\"\n        if x < 0:\n            return -1\n        elif x == 0:\n            return 0\n        else:\n            return x\n\n    if not isinstance(arr, list):\n        arr = [arr]\n\n    if len(arr) == 0:\n        return []\n\n    if len(arr) == 1:\n        return [arr[0]]\n\n    # First, sort the elements in the array according to their\n    # number of ones in their binary representation.\n    # Then, sort the elements in the array according to their\n    # decimal value.\n    # (We have to do this because the sorting algorithm might\n    # not return all the elements in the array in the same order.)\n    # This is a bit of a hack, but it's the only way to make it work.\n    # (The original algorithm would have used a dictionary to keep track\n    # of the elements in the array and sorted the elements according to\n    # the number of ones in their binary representation, but this\n    # would have been too expensive.)\n    # So, we need to use a dictionary to keep track", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 1:\n        return sort_array(arr)\n    else:\n        return sort_array(arr[:-1])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    elif len(arr) == 1:\n        return sort_array(arr[0])\n    else:\n        for i in range(len(arr)):\n            if arr[i] == 1:\n                arr[i] = arr[i-1] + 1\n        return sort_array(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(map(int, arr), key=lambda x: (x & 1), reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # return sorted(arr, key=lambda x: (x % 2 == 0), reverse=True)\n    return sorted(arr, key=lambda x: x % 2 == 0, reverse=False)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    # initialize the array\n    arr = [arr]\n    # compare the numbers\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    # sort the array\n    return sort(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def _sort(x):\n        if x[0] == 1:\n            return 1\n        else:\n            return x[0]\n\n    return [_sort(x) for x in zip(*arr)]"]]