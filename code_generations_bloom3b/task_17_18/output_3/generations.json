[["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# characters\n    notes = ['o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o|', 'o', 'o|', 'o', 'o|', 'o', 'o|', 'o', 'o|', 'o', 'o|', 'o', 'o|', 'o', 'o|', 'o', 'o|', 'o|', 'o', 'o|', 'o', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', '", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"_notes = [b'0', b'0', b'0', b'0', b'0', b'0', b'0', b'0', b'0', b'0', b'0', b'0', b'0']\n    _notes.extend(b'|' + n for n in _notes)\n    _notes.extend(b'|' + n for n in _notes)\n    _notes.extend(b'|' + n for n in _notes)\n    _notes.extend(b'|' + n for n in _notes)\n    _notes.extend(b'|' + n for n in _notes)\n    _notes.extend(b'|' + n for n in _notes)\n    _notes.extend(b'|' + n for n in _notes)\n    _notes.extend(b'|' + n for n in _notes)\n    _notes.extend(b'|' + n for n in _notes)\n    _notes.extend(b'|' + n for n in _notes)\n    _notes.extend(b'|' + n for n in _notes)\n    _notes.extend(b'|' + n for n in _notes)\n    _notes.extend(b'|' + n for n in _notes)\n    _notes.", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(note) for note in music_string.split(\"|\")]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# We have to get from here. First of all we need to split string on '|', then we have to get\n    # the number of beats from the last part. The number of beats is relative to music string length.\n    # This is not guaranteed to be exactly 4 beats for 'o' note or one beat for 'o|' note.\n    # The last part can be anything, so we need to handle it case by case.\n    # The last part can be music string itself. Let's parse it and convert it to int.\n    # Now we have two possibilities:\n    # 1. Last part is music string itself\n    # 2. Last part is not music string, but music string is divided into two parts ('o|' or '|')\n    # In this case, we have to convert the string into list of integers.\n    # Then we need to sort it to get a list of integers corresponding to the number of beats.\n    # Then we have to get the list of integers from last part and put them into list of integers from first part.\n    if music_string[0] == '|':\n        last_part = music_string[1:-1]\n        music_string = music_string[:-1]\n        last_part_split = last_part.split('|')\n        music_number_of", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" return [int(note) for note in music_string.split()]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if not music_string.startswith(' '):\n        raise ValueError(\"Music notes must start with a space character.\")\n\n    notes = music_string.split(' ')\n    note_to_beat = {\n        '1': 4,\n        '2': 2,\n        '3': 1,\n        '4': 1}\n    return [note_to_beat[note] for note in notes]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" music_list = []\n\n    for char in music_string:\n        if char == 'o':\n            music_list.append(4)\n        elif char == 'o|':\n            music_list.append(2)\n        elif char == '.|':\n            music_list.append(1)\n        else:\n            music_list.append(0)\n\n    return music_list\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" m = re.search(r'([o|o|o|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" raw_data = music_string.strip().split()\n    notes = []\n    for row in raw_data:\n        if row[0] == 'o':\n            notes.append(4)\n        elif row[0] == 'o|':\n            notes.append(2)\n        elif row[0] == '|':\n            notes.append(1)\n        elif row[0] == 'o':\n            notes.append(4)\n        elif row[0] == 'o|':\n            notes.append(2)\n        elif row[0] == '|':\n            notes.append(1)\n        elif row[0] == 'o':\n            notes.append(4)\n        elif row[0] == 'o|':\n            notes.append(2)\n        elif row[0] == '|':\n            notes.append(1)\n        else:\n            notes.append(0)\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return _parse_music(music_string)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return parse_music(music_string.decode('ascii')).reverse()", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string == 'o':\n        return [float('0') / 4, float('0') / 2, float('0') / 1, float('0') / 1, float('0') / 1, float('0') / 1, float('0') / 1, float('0') / 1, float('0') / 1, float('0') / 1, float('0') / 1, float('0') / 1, float('0') / 1, float('0') / 1, float('0') / 1, float('0') / 1, float('0') / 1, float('0') / 1, float('0') / 1, float('0') / 1, float('0') / 1, float('0') / 1, float('0') / 1, float('0') / 1, float('0') / 1, float('0') / 1, float('0') / 1, float('0') / 1, float('0') / 1, float('0') / 1, float('0') / 1, float('0') / 1, float('0') / 1, float('0') / 1, float('0') / 1,", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # note name (o, o|, o|, o, o|, o|,., o|,., o|,., o, o, o, o|,., o|,., o, o, o, o|,., o|,., o, o, o, o|,., o|,., o, o, o, o|,., o|,., o, o, o, o|,., o|,., o, o, o, o|,., o|,., o, o, o, o|,., o, o, o, o|,., o, o, o, o|,., o|,., o, o, o, o|,., o|,., o, o, o, o|,., o, o, o, o|,., o, o, o, o|,., o|,., o, o, o, o|,., o|,., o, o, o, o|,., o, o, o, o|,., o, o, o, o|,., o|,., o, o, o, o|,., o|", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Read in the musical notes, in the ASCII format we are using\n    music_list: List[int] = []\n    for line in music_string.split(\" \"):\n        if \"|\" in line:\n            if line[0] == \"o\" and line[-1] == \"o\" and line[2] == '|':\n                music_list.append(2)\n                continue\n        if line[0] == 'o':\n            music_list.append(4)\n            continue\n        if line[0] == 'o|':\n            music_list.append(2)\n            continue\n        if line[0] == 'o|':\n            music_list.append(1)\n            continue\n        if line[0] == 'o|':\n            music_list.append(2)\n            continue\n        if line[0] == 'o|':\n            music_list.append(1)\n            continue\n        if line[0] == '.|':\n            music_list.append(1)\n            continue\n        if line[0] == '|':\n            music_list.append(1)\n            continue\n        if line[0] == 'o':\n            music_list.append(4)\n            continue\n        if line[0] == 'o':\n            music_list.append(2)\n            continue\n        if line[0] == 'o':\n            music_list.append(1)\n            continue\n        if line[0] == 'o':", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# (d, b) = [(0, 0), (1, 2), (2, 0), (3, 1), (3, 2), (4, 2)]\n    # M = [(m, i) for m, i in zip(d, b)]\n    M = [(0, 0), (1, 2), (2, 0), (3, 1), (3, 2), (4, 2)]\n    b = 0\n    s = []\n    for t in music_string:\n        m = int(t)\n        b += m\n        s.append(M[m])\n        if b >= 4:\n            break\n    return s\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# TODO: consider using utils.stream.bytes.bytearray instead of string.\n    m = music_string.split('|')[0]\n    notes = m.split('|')[1:]\n    # TODO: consider using utils.stream.bytes.bytearray instead of string.\n    beat_length = (4 * len(notes)) // len(notes)\n    return beat_length * int(note for note in notes) + beat_length\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(beat) for beat in music_string.split(b'|')]\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# First, let's make sure we have something to parse. This is the basic rule, no matter what you do,\n    # you should have something to parse. If you don't, you will be stuck in the middle of trying to\n    # figure out how to parse the string.\n    if not music_string:\n        raise ValueError(\"Music string not found\")\n\n    # We split the string on the '|' character. This character is really important. It represents the\n    # duration of each note. If you had two '|' characters, you would have two beats for each note,\n    # and so forth. This is what will cause the string to have a '|' in the middle.\n    music_string = music_string.split('|')\n\n    # This is the first step in the parsing process. Let's split the string on each '.' character. This\n    # is important because that is the number of beats for each note. If you have a '.' in the middle\n    # of the string, that means that there are no beats for that note.\n    music_string = [int(x) for x in music_string[:-1]] + [int(x) for x in music_string[-1:]]\n\n    # Now let's split the string on", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string[:4] == 'o':\n        return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    elif music_string[:6] == 'o|':\n        return [2, 2, 1, 4, 4, 4, 2, 1, 2, 1, 2, 4, 4]\n    elif music_string[:5] == 'o|':\n        return [1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 4, 4]\n    elif music_string[:6] == 'o|.':\n        return [2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 2, 2, 4, 4]\n    elif music_string[:5] == 'o|.':\n        return [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 4, 4]\n    elif music_string[:6] == 'o|.|.':\n        return [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 4, 4]\n    elif music_string[:4] == 'o|.|.|.':", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"rhythm = []\n    note = []\n    note_length = 0\n\n    for match in music_string.search(r'(\\d+)'):\n        # we have one match, now we need to process each beat\n        # which is separated by a comma\n        beat = match.group(1)\n\n        # count beats\n        note_length += beat\n        rhythm.append(beat)\n\n        # print beat\n        note.append(note_length)\n\n    # now we need to concatenate everything together\n    rhythm = rhythm + note\n    return rhythm", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = {}\n    for char in music_string:\n        if char == 'o':\n            beats['o'] = 4\n        elif char == 'o|':\n            beats['o'] = 2\n        elif char == '.|':\n            beats['o'] = 1\n        elif char == '.':\n            beats['o'] = 1\n        else:\n            beats['o'] = 0\n\n    beats = beats.values()\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"parts = music_string.split('.')\n    return [int(part) for part in parts]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # Definitions for common pitches and corresponding intervals\n    MIN = -128\n    MAX = 127\n    SLIDE = 2\n\n    def split_chord(chord_string: str, is_quarter_note=False) -> List[int]:\n        \"\"\" Parse chord string.\n\n        If chord_string is an empty string, then return list of integers corresponding to the whole note.\n        If chord_string is a string that contains quater notes, return a list of integers corresponding to\n        the quarter notes. Otherwise, return a list of integers corresponding to all notes in the chord.\n\n        >>> split_chord('|')\n        [1, 2, 1, 2, 2, 1, 1, 1, 4, 4]\n        \"\"\"\n        # Drop leading slash\n        chord_string = chord_string.lstrip('/')\n\n        if is_quarter_notes:\n            return [len(chord_string) / SLIDE]\n\n        for note in chord_string.split(' '):\n            if note not in ('.', 'o', 'o'):\n                raise ValueError('Invalid note in chord string \"{}\".'.format(chord_string))\n\n            note = note.lower()\n\n            # If note is not the same as the previous note in the chord, then move to the", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" music_length = len(music_string)\n\n    # First, split the string into single notes\n    notes = music_string.split('|')\n\n    # Now, we need to find which note is the first note\n    first_note = notes[0].index('o')\n    if first_note == -1:\n        return []\n    else:\n        return [note.index('o') - first_note for note in notes[1:]]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes_list = [note.strip() for note in music_string.split('|')]\n    notes_list.remove('o')\n    notes_list.remove('|')\n    return notes_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_bookmarks: List[int] = []\n    for _ in music_string:\n        if _ =='':\n            continue\n        if _ == 'o':\n            music_bookmarks.append(0)\n        elif _ == 'o|':\n            music_bookmarks.append(1)\n        elif _ == '.|':\n            music_bookmarks.append(2)\n        else:\n            continue\n    return music_bookmarks", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return parse_sounds(music_string).map(int)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" music_notes = music_string.split(' ')\n    beats = {\n        'o': 0,\n        'o|': 0,\n        '.|': 0,\n        '|': 1,\n    }\n\n    for note in music_notes:\n        if note == 'o':\n            beats['o'] += 1\n        elif note == 'o|':\n            beats['o|'] += 1\n        elif note == '.|':\n            beats['.|'] += 1\n        elif note == '|':\n            beats['|'] += 1\n\n    return beats\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.strip()\n\n    beats = []\n    # First check the three opening notes\n    if 'o' in music_string:\n        beats.append(0)\n    elif 'o|' in music_string:\n        beats.append(1)\n    elif '.|' in music_string:\n        beats.append(2)\n    else:\n        print(\"Input to this function is invalid.\")\n        return []\n\n    # Now check for beats in a whole note\n    if 'o' in music_string:\n        beats.append(4)\n    elif 'o|' in music_string:\n        beats.append(2)\n    elif '.|' in music_string:\n        beats.append(1)\n    else:\n        print(\"Input to this function is invalid.\")\n        return []\n\n    # Now check for beats in a quarter note\n    if 'o' in music_string:\n        beats.append(1)\n    elif 'o|' in music_string:\n        beats.append(2)\n    elif '.|' in music_string:\n        beats.append(3)\n    else:\n        print(\"Input to this function is invalid.\")\n        return []\n\n    # Now check for beats in half note\n    if 'o' in music_string:\n        beats.append(2)\n    elif 'o|' in", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if not music_string:\n        return []\n\n    music_string = music_string.lower()\n\n    if music_string == \".\":\n        return [\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'),\n            int('.'", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(note) for note in music_string.split()]\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"bytes = music_string.encode('utf-8', 'ignore')\n    result = []\n    for byte in bytes:\n        if byte == 'o':\n            result.append(4)\n        elif byte == 'o|':\n            result.append(2)\n        elif byte == '.|':\n            result.append(1)\n        else:\n            raise ValueError(f\"Invalid note for '{music_string}'.\")\n    return result\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n    for part in music_string.split():\n        if part.startswith(\"o|\"):\n            result.append(4)\n        elif part.startswith(\".|\"):\n            result.append(1)\n        elif part.startswith(\"o|\"):\n            result.append(2)\n        elif part.startswith(\".|\"):\n            result.append(1)\n        else:\n            result.append(0)\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            notes.append(i + 1)\n            i += 2\n        elif music_string[i] == 'o|':\n            notes.append(i + 1)\n            i += 1\n        elif music_string[i] == '.|':\n            notes.append(i + 1)\n            i += 1\n        else:\n            pass\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes_list = []\n    for char in music_string:\n        if char == 'o':\n            notes_list.append(4)\n        elif char == 'o|':\n            notes_list.append(2)\n        elif char == '.|':\n            notes_list.append(1)\n        elif char == 'o':\n            notes_list.append(1)\n        elif char == 'o|':\n            notes_list.append(1)\n        elif char == '.|':\n            notes_list.append(1)\n        elif char == 'o':\n            notes_list.append(1)\n        elif char == 'o|':\n            notes_list.append(1)\n        elif char == '.|':\n            notes_list.append(1)\n        elif char == 'o':\n            notes_list.append(1)\n        elif char == 'o|':\n            notes_list.append(1)\n        elif char == '.|':\n            notes_list.append(1)\n        elif char == 'o':\n            notes_list.append(1)\n        elif char == 'o|':\n            notes_list.append(1)\n        elif char == '.|':\n            notes_list.append(1)\n        else:\n            notes_list.append(1)\n    return notes_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(note) for note in music_string.split() if note.isdigit()]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"last_beat = -1\n    notes = []\n    num_beats = 0\n\n    # Parse from left to right. Make note of last note.\n    # Note, the first note, o, is the first note in the string, so last_beat is -1\n    for line in music_string.splitlines():\n        line = line.strip()\n        if line[0] in [' ', '#']:\n            continue\n        if line[0] == 'o':\n            last_beat = int(line[1:])\n            notes.append(last_beat)\n            num_beats += 1\n\n        elif line[0] == 'o|':\n            last_beat += int(line[1:])\n            num_beats += 1\n\n        elif line[0] == '|':\n            last_beat += int(line[1:])\n            num_beats += 1\n\n    return [note for note in notes if note > last_beat]\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return map(int, music_string.split())", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"m = musical_notes.MusicNotation()\n    notes = [int(i) for i in music_string.split(' ')]\n\n    # Separate the notes\n    notes = notes[1:]\n\n    # Compute beats\n    beats = {}\n    for note in notes:\n        beats[note] = len(notes) - note\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = [int(note) for note in music_string.split()]\n    return [notes[0] * 4 + notes[1] * 2 + notes[2] * 1 + notes[3] * 2 + notes[4] * 1 + notes[5] * 2 + notes[6] * 2 + notes[7] * 2 + notes[8] * 2 + notes[9] * 2 + notes[10] * 2 + notes[11] * 2 + notes[12] * 2 + notes[13] * 2 + notes[14] * 2 + notes[15] * 2]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return list(map(int, music_string.split('|')))", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" note_pattern = r\"o {0:x} o| {1:x} o| {2:x} o| {3:x} o| {4:x} o| {5:x} o| {6:x} o| {7:x} o| {8:x} o\".format(0, 1, 2, 3, 4, 5, 6, 7, 8)\n\n    lines = music_string.split('\\n')\n    beat_list = []\n    for line in lines:\n        part = line.split()\n        if len(part)!= 9:\n            continue\n        beat_count, note = part\n        beat_count, note = beat_count, note[1:]\n        beat_count = int(beat_count) * 4\n        beat_list.append(beat_count)\n\n    return beat_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(x.rstrip().split('|')[0]) for x in re.findall(r'[|]', music_string)]\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_dict = {'o': 4, 'o|': 2, '.|': 1}\n    parse_dict = dict([(key, value) for key, value in music_dict.items()])\n\n    # The keys in parse_dict are the same as the keys in music_dict, but they are in the reverse order.\n    parsed_dict = parse_dict.items()[::-1]\n\n    return parsed_dict\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string == 'o o|.| o| o|.|.|.|.|.| o o' \\\n        or music_string == 'o o o o o o| o o o o o| o o o o o| o o o o o| o o o o o| o o o o o| o o o o o| o o o o o| o o o o o| o o o o o| o o o o o| o o o o o| o o o o o| o o o o o| o o o o o| o o o o o| o o o o o| o o o o o| o o o o o| o o o o o| o o o o o| o o o o o| o o o o o| o o o o o| o o o o o| o o o o o| o o o o o| o o o o o| o o o o o| o o o o o| o o o o o| o o o o o| o o o o o| o o o o o| o o o o o| o o o o o| o o o o o", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"note_string = music_string.strip()\n    beats = []\n    note_count = 0\n    note_span = 0\n    note_value = 0\n    note_skip = True\n    last = True\n    current_note = 0\n    current_skip = False\n\n    while note_skip:\n        # If no more beats in current note then it is the end of note.\n        if len(beats) == current_note and not last:\n            return [note_value]\n\n        # If last note then last beat for that note.\n        elif len(beats) == current_note + 1 and last:\n            return [note_value]\n\n        # Skip if current note is not a beat number.\n        if current_note not in range(0, len(beats)):\n            note_skip = False\n\n        # Skip if current note is the same as last note.\n        elif current_note == last:\n            note_skip = False\n\n        # Skip if current beat is not a beat number.\n        if current_note not in range(0, len(beats) - 1):\n            note_skip = False\n\n        # Skip if current beat is the same as last beat.\n        elif current_note == last + 1:\n            note_skip = False\n\n        # If last note or beat is a beat number then start", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(note) for note in music_string.split()]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.lower().strip()\n    note_nums = []\n    for char in music_string:\n        char = char.upper()\n        if char == 'o':\n            note_nums.append(4)\n        elif char == 'o|':\n            note_nums.append(2)\n        elif char == '.|':\n            note_nums.append(1)\n        else:\n            note_nums.append(0)\n    return note_nums\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(c) for c in music_string.split() if c.isdigit()]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"start = 0\n    notes = []\n\n    for char in music_string:\n        if char == 'o':\n            notes.append(4)\n        elif char == 'o|':\n            notes.append(2)\n        elif char == '.|':\n            notes.append(1)\n        elif char == '|':\n            notes.append(1)\n        elif char == 'o':\n            notes.append(1)\n        else:\n            notes.append(0)\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"lines = music_string.split('\\n')\n    last_beat = 0\n    for line in lines:\n        line = line.strip().lower()\n        if 'o' in line:\n            last_beat += 4\n        elif 'o|' in line:\n            last_beat += 2\n        elif '.|' in line:\n            last_beat += 1\n        else:\n            raise Exception(\"Unknown note type: '{}'\".format(line))\n    return last_beat", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # Parse notes\n    notes_list = []\n    for note in music_string:\n        if note =='':\n            notes_list.append(4)\n        elif note == '|':\n            notes_list.append(2)\n        elif note == '.':\n            notes_list.append(1)\n        elif note == 'O':\n            notes_list.append(4)\n        elif note == 'O|':\n            notes_list.append(2)\n        elif note == 'O|':\n            notes_list.append(1)\n        elif note == '|':\n            notes_list.append(1)\n        else:\n            print(\"invalid note\", note)\n            return notes_list\n    # Make sure that the list is ordered\n    sorted_numbers = sorted(notes_list, key=lambda note_number: note_number, reverse=True)\n    return sorted_numbers", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# conversion from iso to decimal:\n    notes = []\n    for ch in music_string:\n        if ch =='':\n            notes.append(0)\n            continue\n        elif ch == 'o':\n            notes.append(4)\n        elif ch == 'o|':\n            notes.append(2)\n        elif ch == '.|':\n            notes.append(1)\n        else:\n            raise ValueError('Invalid musical note found: {}'.format(ch))\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return list(map(int, music_string.split()))", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return parse_beat_list(music_string)\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes_list = []\n    number_of_beats_per_note = 4\n    notes_letters = ['o', 'o', 'o', 'o', 'o', 'o', 'o|', 'o', 'o', '|', 'o', 'o', 'o', 'o', 'o|', 'o', 'o', 'o|', 'o', 'o', 'o', 'o', 'o|', 'o', 'o', 'o|', 'o', 'o', 'o|', 'o', 'o|', 'o|', 'o|', 'o|', 'o', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|',", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # Processes the string to the longest format that will be acceptable\n    note_lengths = [int(note) for note in music_string.split()]\n    note_count = len(note_lengths)\n\n    # Removes the last character from each string and returns it as a list\n    note_strings = [note_lengths[note - 1] for note in note_strings]\n\n    # Sanity check to make sure the strings are all the same length\n    if len(note_strings)!= note_count:\n        return []\n\n    # Creates an array of integers and returns it\n    return [note_lengths[int(note) - 1] for note in note_strings]\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# We have to look for some special characters in order to determine\n    # what kind of note is being used.\n    #\n    # Here is a list of all the special characters in this string:\n    #\n    #  o--\n    #  o--|\n    #  o--|--\n    #  o--|--|--\n    #  o--|--|--|--\n    #  o--|--|--|--|--\n    #  o--|--|--|--|--|--|--\n    #  o--|--|--|--|--|--|--|--|--\n    #\n    # We need to parse all of these special characters in order to determine\n    # what kind of note is being used.\n    special_chars = ['|', '|', '|', '|', '|', '|', '|', '|']\n    for char in special_chars:\n        # This list will hold the string after we have processed all of the\n        # special characters in the string.\n        notestring = []\n\n        # We start by looking for the start of a note.\n        for i in range(len(music_string)):\n            if music_string", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Split each string into 4 or 2 integers\n    result_list = []\n    for i in range(0, len(music_string)):\n        char = music_string[i]\n        if char == '.':\n            result_list.append(2)\n        elif char == 'o':\n            result_list.append(4)\n        else:\n            result_list.append(1)\n\n    return result_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"arr = [None] * 9\n    string_length = len(music_string)\n    for char in music_string:\n        if char == 'o':\n            arr[0] += 4\n        elif char == 'o|':\n            arr[0] += 2\n        elif char == '|':\n            arr[0] += 1\n        elif char == '.':\n            arr[0] += 1\n        elif char == '.':\n            arr[0] += 1\n        elif char == 'o':\n            arr[0] += 1\n        elif char == 'o':\n            arr[0] += 1\n        elif char == '.':\n            arr[0] += 1\n        elif char == 'o':\n            arr[0] += 1\n        else:\n            arr[0] += 1\n\n    return arr", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# first check if this is a whole note\n    # in that case its length is 4\n    # if it is, split on \"|\" (crossing)\n    # and return 4 integers for each of the beats\n    if not music_string.endswith('|'):\n        return [int(note) for note in music_string.split('|')]\n\n    # this is half note, return 2 integers\n    elif music_string.endswith('|'):\n        return [int(note) for note in music_string.split('|')[:-1].split('|')]\n\n    # this is quarter note, return 1 integer\n    elif music_string.endswith('|'):\n        return [int(note) for note in music_string.split('|')[:-1].split('|')[:-1].split('|')]\n\n    return []", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" note_list = []\n\n    # parse the string using the regex\n    for match in re.findall(r\"(\\s+)(\\w+)(?:\\s+)(\\d+)(\\s+)(\\w+)(?:\\s+)(\\d+)(?:\\s+)(\\w+)(?:\\s+)(\\d+)(?:\\s+)(\\w+)(?:\\s+)(\\d+)(?:\\s+)(\\w+)(?:\\s+)(\\d+)(?:\\s+)(\\w+)(?:\\s+)(\\d+)(?:\\s+)(\\w+)(?:\\s+)(\\d+)(?:\\s+)(\\w+)(?:\\s+)(\\d+)(?:\\s+)(\\w+)(?:\\s+)(\\d+)(?:\\s+)(\\w+)(?:\\s+)(\\d+)(?:\\s+)(\\w+)(?:\\s+)(\\d+)(?:\\s+)(\\w+)(?:\\s+)(\\d+)(?:\\s+)(\\w+)(?:\\s+)(\\d+)(?:\\s+)(\\w+)(?:\\s+)(\\d+)(?:\\s+)(\\w+)(?:\\s+)(\\d+)(?:\\s+)(\\w+)(?:\\s+)(\\d+)(?:\\s+)(\\w+)(?:\\s+)(\\d+)(?:\\s+)(\\w+)(?:\\s+)(\\d+)(?:\\s+", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.strip()\n\n    if music_string.startswith(' '):\n        return []\n\n    parts = music_string.split()\n\n    if len(parts)!= 9:\n        return []\n\n    return [int(part) for part in parts]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" return [int(c) for c in music_string.lower()]\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"_: List[str] = music_string.split(' ')\n    note_string = ''.join([' '.join(x.strip().split('|')[1:])\n                             for x in _])\n\n    if note_string[-1] == 'o':\n        note_string = note_string[:-1]\n\n    return [int(note) for note in note_string.split('|')]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # Normalise\n    music_string = music_string.replace(r' \\v', '').replace(r'  \\v', '')\n\n    # Split into the parts\n    notes = music_string.split('|')\n\n    # Build the list\n    return [note[0] for note in notes]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string.startswith('|'):\n        return [int(music_string[1:]) for i in range(0, 6)]\n    elif music_string.startswith('O'):\n        return [int(music_string[1:]) for i in range(0, 3)]\n    elif music_string.startswith('O'):\n        return [int(music_string[1:]) for i in range(3, 5)]\n    elif music_string.startswith('O'):\n        return [int(music_string[1:]) for i in range(5, 7)]\n    elif music_string.startswith('o'):\n        return [int(music_string[1:]) for i in range(0, 4)]\n    elif music_string.startswith('o'):\n        return [int(music_string[1:]) for i in range(4, 7)]\n    else:\n        return [int(music_string[1:]) for i in range(0, 8)]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"m = re.match(\"(^.*)[ot|o|c||r|d|a|o|d|f|g|h|q|j|k|l|]([\\d.]+)[ot|o|c|r|d|a|o|d|f|g|h|q|j|k|l|]\", music_string)\n    if m is None:\n        raise ValueError(\"Invalid music note format: '%s'\" % music_string)\n    beats = m.group(1).split()\n    for beat in beats:\n        if beat.startswith('o'):\n            beats.pop(0)\n        elif beat.startswith('|'):\n            beats.pop(0)\n        elif beat.startswith('d'):\n            beats.pop(0)\n        elif beat.startswith('a'):\n            beats.pop(0)\n        elif beat.startswith('o'):\n            beats.pop(0)\n        elif beat.startswith('|'):\n            beats.pop(0)\n        elif beat.startswith('d'):\n            beats.pop(0)\n        elif beat.startswith('a'):\n            beats.pop(0)\n        elif beat.startswith('", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"list_of_notes = [int(note) for note in music_string.split('|')]\n    list_of_beats = [[note * 2 for note in list_of_notes] for _ in range(len(list_of_notes))]\n    list_of_beats = [beats + (beats == 0) * i for i, beats in enumerate(list_of_beats)]\n    return list_of_beats\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" notes = list(map(int, music_string.split()))\n    note_lengths = [len(note) for note in notes]\n\n    if len(notes) == 1:\n        return note_lengths\n    elif len(notes) == 3:\n        return [note_lengths[n - 1] + note_lengths[n + 1] + note_lengths[n + 2]]\n    elif len(notes) == 5:\n        return [note_lengths[n - 1] + note_lengths[n + 1] + note_lengths[n + 2]] + [note_lengths[n - 1] + note_lengths[n + 1] + note_lengths[n + 2]]\n    else:\n        return []", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"lines = music_string.splitlines()\n    assert len(lines) == 7\n    result = [0] * 7\n    for line in lines:\n        line = line.strip(' ')\n        if line.startswith('o|'):\n            result[result.index(0) + 1] += 1\n            line = line.strip('|')\n        elif line.startswith('|'):\n            result[result.index(0) + 1] += 1\n            line = line.strip('|')\n        elif line.startswith('o'):\n            result[result.index(0) + 1] += 1\n            line = line.strip('o')\n        else:\n            result[result.index(0) + 1] += 1\n            line = line.strip('.')\n\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(note) for note in music_string.split('|')]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for character in music_string:\n        if character == 'o':\n            notes.append(4)\n        elif character == 'o|':\n            notes.append(2)\n        elif character == '.|':\n            notes.append(1)\n        else:\n            notes.append(0)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"m = re.search(r\"^(\\d*)\\|(.*)$\", music_string)\n    if m:\n        beats = int(m.group(1))\n        note = m.group(2)\n        if not note.startswith('|'):\n            note = '|' + note\n        return [beats, note]\n    return []", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# We don't want to need to break the string into individual notes, so we won't handle multiple\n    # different note-spaces. We'll treat each line as one note.\n    # We will make sure to add up the number of beats, which we will then convert to seconds\n    return parse_note_string(music_string).map(lambda note: int(note))\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Don't worry about timing, just get the length\n    note_length = len(music_string)\n    # Number of beats per note\n    beats_per_note = len(music_string) / note_length\n    # This is the number of beats that the note lasts\n    beats_per_not = beats_per_note - 1\n    # This is how many notes are in a beat\n    beats_per_beat = beats_per_note / beats_per_not\n    # This is the number of beats that each note lasts\n    beats_per_not_per_beat = beats_per_not / beats_per_beat\n    # This is the number of beats that each note lasts per beat\n    beats_per_not_per_beat_per_beat = beats_per_not_per_beat / beats_per_beat_per_beat\n    # This is how many notes there are in the beats\n    beats_per_beat_per_beat = beats_per_beat_per_beat / beats_per_not_per_beat_per_beat\n    # This is the total number of beats that the note lasts\n    beats_per_not_total = beats_per_not + beats_per_beat_per_beat\n    # This is the total number of beats that each note lasts\n    beats_per_not_total_per_beat = beats_per_not_total / beats_per_beat", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Ignore special characters in the beginning of the string, which would cause troubles later\n    first_digit = 0\n    while first_digit < len(music_string):\n        if music_string[0:1] == 'o':\n            first_digit += 1\n            if first_digit < len(music_string):\n                first_digit += 1\n        elif music_string[0:1] == 'o|':\n            first_digit += 1\n            if first_digit < len(music_string):\n                first_digit += 1\n        elif music_string[0:1] == '.|':\n            first_digit += 1\n            if first_digit < len(music_string):\n                first_digit += 1\n    # The length of the string after the first 'd|' is the number of beats, the length of the string before\n    # the last 'o' is the number of notes per beat\n    length = len(music_string) - len('|') - len('|')\n    return [int(x) for x in music_string[-length:]]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [[x % 4 if x % 4 == 0 else 4 for x in music_string.split()] for x in range(1, 13)]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" parts = [\n        int(note)\n        for note in music_string.split('|')\n    ]\n\n    return [\n        int(note)\n        for note in music_string.split('|')\n        if note.isdigit()\n    ]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string == 'o':\n        return [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\n\n    elif music_string == 'o|':\n        return [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\n\n    elif music_string == '.|':\n        return [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\n\n    else:\n        return [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = [int(note) for note in music_string.split(' ')]\n    beats = {note: i for note, i in zip(notes, range(4))}\n    beats = {note: beats[note] for note in beats.keys()}\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" if len(music_string) < 1:\n        return []\n\n    # parse first two characters\n    letters = music_string[:2]\n    if letters == ['o'] or letters == ['o|'] or letters == ['.|']:\n        return [int(letters)]\n\n    # parse remaining string\n    next_char = music_string[2:]\n    if next_char in ['.', '?', ':', '|', ',', '.', '?', ':']:\n        note = next_char\n        if next_char == '.':\n            note = 'd'\n        elif next_char == '?':\n            note = 'd'\n        elif next_char == ':':\n            note = 'a'\n        elif next_char == '|':\n            note = 'c'\n        elif next_char == ',':\n            note = 'f'\n        elif next_char == '.':\n            note = 'g'\n        else:\n            return []\n        return [int(note)]\n\n    return []", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for char in music_string:\n        if char == 'o':\n            notes.append(4)\n        elif char == 'o|':\n            notes.append(2)\n        elif char == '.|':\n            notes.append(1)\n        else:\n            notes.append(0)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # Parse musical note string\n    notes = list()\n    current_note = 0\n    while current_note < len(music_string):\n        # Split into four (note, duration) pair\n        if music_string[current_note] == 'o':\n            # Hold current note and duration\n            notes.append(current_note)\n            current_note += 1\n            # Hold a count of beats per note\n            duration = 1\n        elif music_string[current_note] == '|':\n            # Hold a count of beats per note\n            duration = 1\n        elif music_string[current_note] == 'o|':\n            # Hold current note and duration\n            notes.append(current_note)\n            current_note += 1\n            # Hold a count of beats per note\n            duration = 1\n        elif music_string[current_note] == '.|':\n            # Hold current note and duration\n            notes.append(current_note)\n            current_note += 1\n            # Hold a count of beats per note\n            duration = 1\n        elif music_string[current_note] == 'o':\n            # Hold current note and duration\n            notes.append(current_note)\n            current_note += 1\n            # Hold a count of beats per note\n            duration = 1\n        elif music_string[current_note] == ':':\n            # Hold current note and", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"m = re.match(r\"([0-7][0-7][0-7])-([0-7][0-7][0-7])-([0-7][0-7][0-7])\", music_string)\n    if not m:\n        raise ValueError(\"Invalid ASCII musical note\")\n\n    return [int(x) for x in m.groups()]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"def is_valid_beat(char: str) -> bool:\n        \"\"\" Returns if the given character is valid note number \"\"\"\n        return char in ['o', '|']\n\n    def is_valid_note(char: str) -> bool:\n        \"\"\" Returns if the given character is valid note number \"\"\"\n        return char in ['.']\n\n    notes = list()\n    noted_length = 0\n    for char in music_string:\n        if is_valid_beat(char):\n            noted_length += 1\n        elif is_valid_note(char):\n            notes.append(int(noted_length))\n            noted_length += 1\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string.endswith('|'):\n        music_string = music_string[:-1]\n    music_string = music_string.strip()\n\n    # First, we need to break the string into group of notes and convert the parts to integers\n    notes = [note.strip().strip('|') for note in music_string.split('|')]\n    notes.reverse()\n\n    # Now, we need to figure out the length of each note\n    duration = 1\n    for note in notes:\n        duration *= len(note)\n        notes.remove(note)\n\n    # And finally, we get rid of the last note (could be a whole note)\n    notes.pop()\n\n    # And now we have a list of integers that represent duration of each note\n    return [int(duration) for note in notes]\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string.lower() == 'o':\n        return [4]\n    elif music_string.lower() == 'o|':\n        return [2]\n    elif music_string.lower() == '.':\n        return [1]\n    elif music_string.lower() == '.':\n        return [0]\n    else:\n        return []", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# split the string into values of\n    # 1. whole note, 2. half note, 3. quarter note\n    #\n\n    # split the string into the values of the notes:\n    # 1. whole note (without separator), 2. half note (with separator), 3. quarter note (without separator)\n\n    # first step is to build a list of the values of whole note and half note\n    # next step is to build a list of the values of quarter note\n    # finally, concatenate the two lists to return the list of integers\n    whole_notes = [int(line.split()[0]) for line in music_string.split(' ')[1:]]\n    half_notes = [int(line.split()[1]) for line in music_string.split(' ')[:-1]]\n    quarter_notes = [int(line.split()[2]) for line in music_string.split(' ')[-1:]]\n\n    return [int(value) for value in [whole_notes, half_notes, quarter_notes]]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(m) for m in music_string.split('|') if m.isdigit()]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"m = music_string.find(\"|\")\n    if m == -1:\n        return []\n    else:\n        # We have a quarter note\n        return [m - 1, m - 1, m - 2, m - 2, m - 3, m - 3, m - 4, m - 4, m - 5]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if not music_string:\n        return []\n\n    # First, make sure it's not a sequence of numbers.\n    music_string = music_string.strip()\n\n    # This checks if the string contains only one number.\n    if len(music_string) == 1:\n        return [int(music_string)]\n\n    # Now we split the string into a list of numbered parts.\n    parts = []\n    for part in music_string.split(\"|\"):\n        parts.append(int(part))\n    return parts", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n    for i in xrange(len(music_string)):\n        if music_string[i] == 'o':\n            result.append(4)\n        elif music_string[i] == 'o|':\n            result.append(2)\n        elif music_string[i] == '.|':\n            result.append(1)\n        elif music_string[i] == 'o':\n            result.append(4)\n        elif music_string[i] == 'o':\n            result.append(4)\n        elif music_string[i] == 'o':\n            result.append(4)\n        elif music_string[i] == 'o':\n            result.append(4)\n        elif music_string[i] == 'o':\n            result.append(4)\n        elif music_string[i] == 'o':\n            result.append(4)\n        elif music_string[i] == 'o':\n            result.append(4)\n        elif music_string[i] == 'o':\n            result.append(4)\n        elif music_string[i] == 'o':\n            result.append(4)\n        elif music_string[i] == 'o':\n            result.append(4)\n        elif music_string[i] == 'o':\n            result.append(4)\n        elif music_string[i] == 'o':\n            result.append(4)\n        elif music_string[i] == 'o':\n            result.append", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"note_start = 0\n    note_count = 0\n\n    # First, we have to figure out what the musical note is. What is the first character in the string? The 'o'\n    # character. What is the second character? The '|'. Now, that gives us one character. Is that a 'o' or a '|'?\n    if len(music_string) == 1:\n        note_start = 1\n        note_count = 1\n\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            note_start += 1\n            note_count += 1\n\n        elif music_string[i] == '|':\n            note_count -= 1\n\n        elif music_string[i] == 'o':\n            note_start -= 1\n            note_count += 1\n\n        elif music_string[i] == 'o|':\n            note_count -= 1\n\n        elif music_string[i] == '.':\n            note_count -= 1\n\n        elif music_string[i] == '.':\n            note_count += 1\n\n        elif music_string[i] == 'o':\n            note_start -= 1\n            note_count += 1\n\n    return note_start, note_count", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(note, 16) for note in music_string.split()]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(m) for m in music_string.split() if m.isdigit()]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(v) for v in music_string.split()]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# number of beats\n    beats = 0\n    # number of notes\n    note_count = 0\n    # data for each note\n    data = []\n\n    # find number of beats\n    for byte in music_string:\n        if byte == 'O':\n            beats += 1\n        elif byte == 'o|':\n            note_count += 1\n        elif byte == '.|':\n            note_count -= 1\n        elif byte == 'O':\n            beats += 1\n        else:\n            beats += 1\n            if note_count < 1:\n                break\n    return beats, note_count", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # Convert the string to list of ints\n    # Here we iterate over each letter in a string, looking for the corresponding number\n    notelist = [int(chr(ord(c) - ord('a'))) + 1 for c in music_string]\n\n    return notelist", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"def is_number(s):\n        \"\"\" This is the function that checks if a string is a number.\n        It returns True if it is a number and False if it is not.\n        \"\"\"\n        return (int(s) == s) or (s == '.')\n    def is_digit(s):\n        \"\"\" This is the function that checks if a string is a digit.\n        It returns True if it is a digit and False if it is not.\n        \"\"\"\n        return (s.isdigit()) or (s == '.')\n    list_parsed = []\n    for char in music_string:\n        if char!= 'o':\n            if char == 'o|':\n                list_parsed.append(is_digit(char) + 1)\n            elif char == '|':\n                list_parsed.append(is_digit(char) - 1)\n            elif char == 'o':\n                list_parsed.append(is_digit(char) + 1)\n            elif char == 'o|':\n                list_parsed.append(is_digit(char) - 1)\n            elif char == '.':\n                list_parsed.append(is_number(char))\n            elif char == '.':\n                list_parsed.append(is_number", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"data = music_string.split(\"|\")[1:-1]\n    return [int(x) for x in data]\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = {\n        'o': 0,\n        'o|': 1,\n        '.|': 2,\n        '|': 4,\n        }\n    for char in music_string:\n        if char not in 'notes/':\n            return notes\n        notes[char] += 1\n    return notes\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# TODO: add the '.' to the beginning of the notes, not to the end\n    return [int(x) for x in music_string.split('|')]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Initialise the list of integers\n    res = list()\n\n    # Split the musical string and collect each note\n    for character in music_string:\n        if character == 'o':\n            res.append(4)\n        elif character == 'o|':\n            res.append(2)\n        elif character == '.|':\n            res.append(1)\n        elif character == '|':\n            res.append(1)\n        else:\n            res.append(0)\n\n    return res", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"final_list = []\n    for char in music_string:\n        if char in ['0', '1']:\n            final_list.append(0)\n            continue\n        if char == '|':\n            if not final_list[-1] == 1:\n                final_list[-1] = 2\n            else:\n                final_list[-1] += 1\n        else:\n            final_list.append(1)\n\n    return final_list\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"note_string = music_string.split()\n    beat_list = [int(note_string[0]) for note_string in note_string[1:]]\n    return beat_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# The string looks like:\n    #   [| [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [. [", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"for i in range(0, len(music_string)):\n        if music_string[i] in ['|', '|']:\n            music_string[i] = '.'\n        if music_string[i] == 'o':\n            music_string[i] = 'o'\n            music_string[i] = '.'\n        elif music_string[i] == 'o|':\n            music_string[i] = 'o|'\n            music_string[i] = '.'\n        elif music_string[i] == '.|':\n            music_string[i] = '.|'\n            music_string[i] = '.'\n        else:\n            break\n    return parse_beat(music_string)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(c) for c in music_string.split(' ')]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(note) for note in music_string.split(' ')]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = [b'.', b'|', b'.', b'|', b'.', b'|', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.', b'.',", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = music_string.split('|')\n    notes = notes[1:]  # remove last '|'\n    return [int(note.split('|')[0]) for note in notes]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" #note_duration = [round(number, 2) for number in re.findall(r'\\D+', music_string)]\n    note_duration = [int(i.split('_')[-1]) for i in re.findall(r'(\\d+)_*', music_string)]\n\n    note_length = sum(note_duration)\n\n    # get the number of beats per note\n    beats_per_note = float(note_duration[0]) / note_length\n\n    return beats_per_note", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(n) for n in music_string.split()]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string is None:\n        return []\n\n    number_of_notes = len(music_string)\n    note_duration = []\n    note_times = []\n    for n in range(number_of_notes):\n        note_duration.append(int(music_string.replace(' ', '')))\n        note_times.append(int(music_string.replace(' ', '')))\n\n    return note_duration, note_times\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = []\n    for char in music_string:\n        if char == 'o':\n            music.append(4)\n        elif char == 'o|':\n            music.append(2)\n        elif char == '.|':\n            music.append(1)\n        else:\n            music.append(0)\n\n    return music\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    last_note = 'o'\n    for char in music_string:\n        if char == 'o':\n            last_note = 'o'\n            continue\n        elif char == 'o|':\n            last_note = 'o|'\n            continue\n        elif char == '|':\n            last_note = '|'\n            continue\n        elif char == '.':\n            last_note = '.'\n            continue\n        elif char == '.':\n            last_note = '.'\n            continue\n        elif char == 'o':\n            last_note = 'o'\n            notes.append(4)\n        elif char == 'o|':\n            last_note = 'o|'\n            notes.append(2)\n        elif char == '.|':\n            last_note = '|'\n            notes.append(1)\n        else:\n            notes.append(0)\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# TODO: replace with something more advanced (e.g. librosa)\n    music_string = music_string.replace('|', '').replace('|', '')\n    music_string = music_string.replace('.', '').replace('.', '')\n    music_string = music_string.replace('.', '').replace('.', '')\n\n    # split string into list of 2's\n    music_string2 = music_string.split('.')\n    music_string = ''\n    for music_string2_item in music_string2:\n        music_string += music_string2_item +''\n        # break loop to allow for a blank line\n        if music_string2_item.strip() == '':\n            break\n\n    # remove last semicolon\n    music_string = music_string[:-1]\n    music_string = music_string.replace(';', '')\n\n    # remove leading zeroes\n    music_string = music_string[:-1]\n    music_string = music_string.replace('0', '')\n\n    # remove leading spaces\n    music_string = music_string.replace(' ', '')\n\n    # replace all semicolon with space\n    music_string = music_string.replace(';','')\n\n    # remove leading or trailing spaces", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if not music_string:\n        return []\n\n    # split string into two parts:\n    #     # 1. First part (starting with 'o') -- note is whole and lasts four beats\n    #     # 2. Second part (starting with '|') -- note is half and lasts two beats\n    #     # 3. Third part (starting with '|') -- note is quarter and lasts one beat\n\n    # 1. First part:\n    if music_string[0] == 'o':\n        return [int(music_string[1:])]\n    else:\n        # 2. Second part:\n        if music_string[0] == 'o|':\n            # 3. Third part:\n            return [int(music_string[1:])]\n        else:\n            # 4. Normal case:\n            return [int(music_string[1:])]\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"beats = []\n    for part in music_string.split('.'):\n        if part == '.':\n            beats.append(4)\n        elif part == 'o':\n            beats.append(3)\n        elif part == 'o|':\n            beats.append(2)\n        elif part == 'o|':\n            beats.append(1)\n        elif part == '.|':\n            beats.append(1)\n        else:\n            beats.append(0)\n\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(note) for note in music_string.split()]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# The following is a list of musical notation string that represents a musical note.\n    note = []\n    for digit in music_string:\n        if digit == 'o':\n            note.append(4)\n        elif digit == 'o|':\n            note.append(2)\n        elif digit == '|':\n            note.append(1)\n        elif digit == 'o|':\n            note.append(1)\n        else:\n            note.append(0)\n\n    return note", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = parse_music_notation(music_string)\n    return [int(note) for note in notes]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    notes.append(int(music_string[0:2]))\n    notes.append(int(music_string[2:4]))\n    notes.append(int(music_string[4:6]))\n    notes.append(int(music_string[6:8]))\n    notes.append(int(music_string[8:10]))\n    notes.append(int(music_string[10:12]+music_string[12:]))\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(note) for note in music_string.split()]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"number = 0\n    for i in range(0, len(music_string), 2):\n        number += int(music_string[i]) + int(music_string[i + 1]) * 4\n    return [number]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(note) for note in music_string.split(' ')]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string == \"\":\n        return []\n\n    music_string = music_string.strip()\n\n    if music_string.startswith(\"o \"):\n        return [4, 2]\n    elif music_string.startswith(\"o| \"):\n        return [2, 1]\n    elif music_string.startswith(\".| \"):\n        return [1, 1]\n    elif music_string.startswith(\"o o| \"):\n        return [3, 1, 2, 1, 2, 2, 1, 1, 4, 4, 2]\n    elif music_string.startswith(\"o o|.| o| o|.|.|.|.| o| \"):\n        return [3, 2, 1, 2, 2, 1, 1, 1, 4, 4, 2]\n    elif music_string.startswith(\"o o|.| o| o|.|.|.|.| o| o| \"):\n        return [4, 1, 2, 2, 1, 1, 1, 1, 4, 4, 1]\n    elif music_string.startswith(\"o o|.| o| o|.|.|.|.| o| o| o| \"):\n        return [4, 1, 1", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if not music_string:\n        return []\n    else:\n        return list(map(int, music_string.split()))\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for ch in music_string:\n        if ch == '|':\n            notes.append(4)\n        elif ch == '.':\n            notes.append(2)\n        elif ch == 'o':\n            notes.append(1)\n        elif ch == 'o|':\n            notes.append(2)\n        elif ch == 'o':\n            notes.append(1)\n        else:\n            notes.append(0)\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    for char in music_string:\n        if char == 'o':\n            note = note + 4\n        elif char == 'o|':\n            note = note + 2\n        elif char == '.|':\n            note = note + 1\n        else:\n            notes.append(note)\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.strip()\n    return [int(note) for note in music_string.split('|')]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.replace('|', '|' * 2)\n\n    # the first two notes are whole notes, not beats\n    first_beat = int(music_string[:2])\n    second_beat = int(music_string[2:4])\n\n    # the rest are beats, e.g.\n    third_beat = int(music_string[4:6])\n    fourth_beat = int(music_string[6:8, -1])\n\n    return [first_beat, second_beat, third_beat, fourth_beat]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_length = int(music_string[:3])\n    if music_length == 0:\n        return None\n    else:\n        result_list = []\n        for i in range(4):\n            result_list.append(music_length % 4)\n            music_length //= 4\n        return result_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_data = music_string.split(' ')\n    beats = []\n\n    for music_data_item in music_data:\n        beats.append(int(music_data_item) / 4)\n\n    return beats\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    while len(music_string):\n        chr = music_string.pop(0)\n\n        # Use dictionary to check if each character is a valid note.\n        # If it is, add that note to notes, otherwise continue with next character.\n        if chr in {'o', 'o|', '.|', 'o|o': }:\n            notes.append(int(chr))\n\n        elif chr =='':\n            break\n\n        else:\n            print(\"invalid note\", chr)\n    return notes\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# First we split the string into a list of lines.\n    # We use a simple parser to parse each line.\n    lines = [line.strip().split(\" \") for line in music_string.split(\"\\n\")]\n    # Now we create a list of integers.\n    all_notes = []\n    for line in lines:\n        # Check if line is a whole note or half note.\n        if line[0] == 'o':\n            # We have a whole note.\n            whole_notes = int(line[3:])\n            all_notes.append(whole_notes)\n            # Add a whole note to the list of notes.\n            all_notes.extend(parse_music(line[3:]))\n        elif line[0] == 'o|':\n            # We have a half note.\n            half_notes = int(line[3:])\n            all_notes.append(half_notes)\n            # Add a half note to the list of notes.\n            all_notes.extend(parse_music(line[3:]))\n        elif line[0] == '|':\n            # We have a quarter note.\n            quater_notes = int(line[3:])\n            all_notes.append(quater_notes)\n            # Add a quarter note to the list of notes.\n            all", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"matches = re.match(r\"(\\d+) o(\\d+)\", music_string)\n    if not matches:\n        return []\n\n    return [int(match.group(1)) for match in matches.group(1).split(\"|\")]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"results = [int(num) for num in music_string.split()]\n    return results", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# first, try to parse the string\n    notes = parse_notes(music_string, 'o')\n    notes.extend(parse_notes(music_string, 'o|'))\n    notes.extend(parse_notes(music_string, '.|'))\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Convert from ASCII to float\n    return [int(x) for x in music_string.split()]\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(n) for n in music_string.split()]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"results = []\n    for char in music_string:\n        if char.isalnum():\n            results.append(int(char))\n        elif char == 'o':\n            results.append(4)\n            results.append(2)\n            results.append(1)\n        elif char == 'o|':\n            results.append(2)\n            results.append(1)\n        elif char == '.|':\n            results.append(1)\n            results.append(1)\n\n    return results", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(i) for i in music_string.split(' ')]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(note) for note in music_string.split('|')]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return parse_notes(music_string)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(n) for n in music_string.split('|')]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"#   ## o\n    #   ## o|\n    #   ##.|\n    #   ##.|\n    #   ##.|\n    #   ##.|\n    #   ##.|\n    #   ##.|\n    #   ##.|\n    #   ##.|\n    #   ##.|\n    #   ##.|\n    #   ## o\n    #\n    #   ## o|\n    #   ## o|\n    #   ##.|\n    #   ##.|\n    #   ##.|\n    #   ##.|\n    #   ##.|\n    #   ##.|\n    #   ##.|\n    #   ##.|\n    #   ##.|\n    #   ##.|\n    #   ##.|\n    #   ##.|\n    #   ##.|\n    #   ##.|\n    #   ##.|\n    #   ##.|\n    #   ##.|\n    #   ##.|\n    #   ## o\n    #\n    #   ## o|\n    #   ## o|\n    #   ##.|\n    #   ##.|\n    #   ##.|\n    #   ##.|\n    #   ##.|\n    #   ##.|\n    #", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if music_string.startswith('.'):\n        return []\n    elif music_string.startswith('|'):\n        return [int(music_string[1:-1]) + 1, int(music_string[1:-1]) + 1, int(music_string[1:-1]) + 1, int(music_string[1:-1]) + 1, int(music_string[1:-1]) + 1, int(music_string[1:-1]) + 1, int(music_string[1:-1]) + 1, int(music_string[1:-1]) + 1]\n    elif music_string.startswith('o'):\n        return [int(music_string[1:]) + 1, int(music_string[1:]) + 1, int(music_string[1:]) + 1, int(music_string[1:]) + 1, int(music_string[1:]) + 1, int(music_string[1:]) + 1, int(music_string[1:]) + 1, int(music_string[1:]) + 1]\n    else:\n        return [int(music_string[1:-1]) + 1, int(music_string[1:-1]) + 1, int(music_string[1:-1]) + 1, int(music_string[1:-1]) + 1, int(music_string[1:-1]) + 1, int(music_string[1:-1])", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" results = []\n    for char in music_string:\n        if char == 'O':\n            results.append(4)\n        elif char == 'o|':\n            results.append(2)\n        elif char == '|':\n            results.append(1)\n        elif char == 'O':\n            results.append(4)\n        elif char == 'o|':\n            results.append(2)\n        elif char == '|':\n            results.append(1)\n        else:\n            results.append(1)\n    return results\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" def _int_to_note(note: int) -> str:\n        \"\"\" A helper function to transform a given note to a note number\"\"\"\n        if note < 10:\n            return \"O\"\n        elif note < 11:\n            return \"|\"\n        elif note < 13:\n            return \".\"\n        elif note < 14:\n            return \"o\"\n        else:\n            return \".\"\n\n    if music_string.startswith(\"o\"):\n        return [int(_note_to_int(0)) for note in range(4)]\n    elif music_string.startswith(\"o|\"):\n        return [int(_note_to_int(1)) for note in range(2)]\n    elif music_string.startswith(\".|\"):\n        return [int(_note_to_int(3)) for note in range(1)]\n    else:\n        return []\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if not music_string:\n        return None\n\n    # Split the string into b, o, c, d, e, f\n    try:\n        b = music_string.split(' ')[0]\n        o = music_string.split(' ')[1]\n        c = music_string.split(' ')[2]\n        d = music_string.split(' ')[3]\n        e = music_string.split(' ')[4]\n        f = music_string.split(' ')[5]\n    except IndexError:\n        return None\n\n    return [int(b) * 4 + int(o) * 2 + int(c) * 1 + int(d) * 1 + int(e) * 1 + int(f)]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" pattern = re.compile(r'(.)(.)(.)')\n\n    last_beat = 0\n    for i, b in enumerate(pattern.findall(music_string)):\n        last_beat += b\n        if i == 6:\n            break\n\n    return last_beat", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.strip()\n\n    notes = []\n    for char in music_string:\n        if char == 'o':\n            note = len(notes)\n        elif char == 'o|':\n            note += 1\n        elif char == '.|':\n            note -= 1\n\n        notes.append(note)\n\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" notes = [int(char) for char in music_string.split()]\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" if music_string == '':\n        return []\n\n    notes = [int(note) for note in music_string.split()]\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = []\n    notes.append(4)\n    while True:\n        try:\n            next_chars = music_string.decode('ascii').decode('utf-8').decode('ascii').decode('ascii').decode('ascii').decode('ascii').decode('ascii').decode('ascii').decode('ascii').decode('ascii').decode('ascii').decode('ascii').decode('ascii').decode('ascii').decode('ascii').decode('ascii').decode('ascii').decode('ascii').decode('ascii').decode('ascii').decode('ascii').decode('ascii').decode('ascii').decode('ascii').decode('ascii').decode('ascii').decode('ascii').decode('ascii').decode('ascii').decode('ascii').decode('ascii').decode('ascii').decode('ascii').decode('as", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_list = []\n    # Generate initial count of beats\n    count = 0\n    for char in music_string:\n        if char == 'o':\n            count += 4\n        elif char == 'o|':\n            count += 2\n        elif char == '|':\n            count += 1\n        elif char == '.':\n            count += 0\n        else:\n            music_list.append(count)\n            count = 0\n    return music_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Get list of strings\n    music_notes = music_string.split('|')\n    # Create list of integers for each note\n    return [int(note) for note in music_notes]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"results = []\n\n    for part in music_string.split('|'):\n        part = part.strip()\n        if not part:\n            continue\n\n        parts = part.split('|')\n\n        if not parts:\n            continue\n\n        if len(parts) == 2:\n            results.append(int(parts[0]))\n\n        elif len(parts) == 3:\n            results.append(int(parts[0]) * 2)\n            results.append(int(parts[1]) * 2)\n\n        elif len(parts) == 4:\n            results.append(int(parts[0]) * 4)\n            results.append(int(parts[1]) * 4)\n            results.append(int(parts[2]) * 4)\n            results.append(int(parts[3]) * 4)\n\n        elif len(parts) == 5:\n            results.append(int(parts[0]) * 5)\n            results.append(int(parts[1]) * 5)\n            results.append(int(parts[2]) * 5)\n            results.append(int(parts[3]) * 5)\n            results.append(int(parts[4]) * 5)\n\n        elif len(parts) == 6:\n            results.append(int(parts[0]) * 6)\n            results.append(int(parts[1]) * 6", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = [str(note) for note in music_string.split('|')]\n    if len(notes) == 0:\n        return []\n    num_beats = len(notes)\n    beats = []\n    for note in notes:\n        beats.append(num_beats * 2)\n    return beats\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if len(music_string) == 0:\n        return []\n    else:\n        return [int(m.split('|')[0]) for m in music_string.split('|')[1:]]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(notation) for notation in music_string.split()]\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if len(music_string) == 0:\n        return []\n    elif music_string[0] == 'o':\n        return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    elif music_string[0] == 'o|':\n        return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    elif music_string[0] == '.|':\n        return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    else:\n        return []", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # TODO implement shortcuts (a|b|c|d|e|f) to find out what to do when there are 3 consecutive 'o'\n    # (the rest of the notes are ignored)\n\n    # Check if the string has been parsed.\n    if not music_string:\n        return []\n\n    # Break the string into notes.\n    notes = []\n    for char in music_string:\n        if char == 'o':\n            notes.append(1)\n        elif char == 'o|':\n            notes.append(2)\n        elif char == '.|':\n            notes.append(1)\n        else:\n            notes.append(1)\n\n    # Check if the string has been parsed.\n    if not notes and len(notes) > 0:\n        return []\n\n    # Check if the string has been parsed.\n    if not notes and len(notes) < 1:\n        return []\n\n    # Return the notes and number of beats per note.\n    return notes, len(notes) / len(notes)", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# parsing function\n    def parse_beat(note):\n        \"\"\" A function that parses a note and returns how many beats it lasts. Returns None if it cannot\n        be parsed.\n\n        Parameters\n        ----------\n        note : str\n            A note string\n\n        Returns\n        -------\n        int\n            How many beats does this note last\n\n        Notes\n        -----\n        This is a GNU reimplementation of the scipy.misc.strptime.parse_beat function from Python2.7.\n        \"\"\"\n        if note.count('o') == 5:\n            return 4\n        elif note.count('|') == 5:\n            return 2\n        elif note.count('o|') == 5:\n            return 2\n        elif note.count('o') == 3:\n            return 1\n        elif note.count('|') == 3:\n            return 1\n        elif note.count('o|') == 3:\n            return 1\n        else:\n            return None\n\n    return [parse_beat(note) for note in music_string.split('|')]\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(n) for n in music_string.split()]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.strip()\n\n    for char in music_string:\n        if char == 'o':\n            pass\n        elif char == 'o|':\n            pass\n        elif char == '.|':\n            pass\n        else:\n            break\n\n    return [int(note) for note in music_string.split()]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_string = music_string.replace('.','')\n    return [int(note) for note in music_string.split(' ')]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if len(music_string)!= 10:\n        raise ValueError(\"The musical notation string must have 10 characters.\")\n    music_string = music_string.strip()\n    if music_string[:2] == 'o':\n        return [\n            4,\n            music_string.count('o'),\n            music_string.count('o|'),\n            music_string.count('|'),\n            music_string.count('o'),\n            music_string.count('|'),\n            music_string.count('o'),\n            music_string.count('|'),\n        ]\n    elif music_string[:4] == 'o|':\n        return [\n            4,\n            music_string.count('o'),\n            music_string.count('o|'),\n            music_string.count('|'),\n            music_string.count('o|'),\n            music_string.count('|'),\n            music_string.count('o|'),\n            music_string.count('|'),\n        ]\n    elif music_string[:6] == '.|':\n        return [\n            2,\n            music_string.count('|'),\n            music_string.count('|'),\n            music_string.count('o|'),\n            music_string.count('|'),\n            music_string.count('|'),\n            music_string.count('|", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"note_list = []\n    for char in music_string:\n        if char == 'o':\n            note_list.append(4)\n        elif char == 'o|':\n            note_list.append(2)\n        elif char == '|':\n            note_list.append(1)\n        elif char == 'o':\n            note_list.append(4)\n        elif char == 'o|':\n            note_list.append(2)\n        elif char == '|':\n            note_list.append(1)\n        elif char == 'o':\n            note_list.append(4)\n        elif char == 'o|':\n            note_list.append(2)\n        elif char == '|':\n            note_list.append(1)\n        elif char == 'o':\n            note_list.append(4)\n        elif char == 'o|':\n            note_list.append(2)\n        elif char == '|':\n            note_list.append(1)\n        else:\n            note_list.append(1)\n\n    return note_list\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return map(int, music_string.split())", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"if not music_string:\n        raise ValueError(\"Music string is required\")\n\n    ms = music_string.split()\n    # Handle the special case where there are no numbers in the string. We can't be sure that the format is valid.\n    # We let the parser throw an error in this case.\n    if len(ms) == 1:\n        raise ValueError(\"String is empty\")\n\n    # The string can also have trailing separators, we remove them.\n    if len(ms) > 2 and ms[-2].strip() == \".\":\n        ms.pop()\n\n    # The last character in the string is optional, it can be a space, a comma, or an end-of-string marker.\n    if len(ms) > 1:\n        ms[-1] = \" \" if ms[-1].isdigit() else \"|\"\n\n    # Number of beats per note.\n    nb = 0\n    for i in range(len(ms) - 1):\n        if ms[i].isdigit():\n            nb = nb * 10 + int(ms[i])\n\n    return nb", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"all_beats = set()\n    now = int(music_string[0:4])\n    last = now - 1\n    if music_string == 'o':\n        all_beats.add(now - 1)\n        all_beats.add(now)\n        all_beats.add(now + 1)\n        all_beats.add(now + 1)\n        all_beats.add(now + 1)\n        all_beats.add(now + 1)\n        all_beats.add(now + 1)\n        all_beats.add(now + 1)\n        all_beats.add(now + 1)\n        all_beats.add(now + 1)\n        all_beats.add(now + 1)\n        all_beats.add(now + 1)\n        all_beats.add(now + 1)\n        all_beats.add(now + 1)\n        all_beats.add(now + 1)\n        all_beats.add(now + 1)\n        all_beats.add(now + 1)\n        all_beats.add(now + 1)\n        all_beats.add(now + 1)\n        all_beats.add(now + 1)\n        all_beats.add", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music_list = []\n    for each_string:\n        each_string = each_string.lower()\n        if each_string == 'o':\n            music_list.append(4)\n        elif each_string == 'o|':\n            music_list.append(2)\n        elif each_string == '.|':\n            music_list.append(1)\n        else:\n            music_list.append(0)\n\n    return music_list", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Parse string as a dict\n    music_dict = {}\n    for byte in music_string:\n        try:\n            # Get the note value\n            value = ord(byte)\n            if value == 0:\n                # Whole note\n                music_dict['o'] = music_dict.pop('d', 4)\n            elif value == 1:\n                # Half note\n                music_dict['o|'] = music_dict.pop('c', 2)\n            elif value == 2:\n                # Quarter note\n                music_dict['.|'] = music_dict.pop('a', 1)\n            else:\n                raise Exception(\"Invalid note value {}\".format(byte))\n        except IndexError:\n            raise Exception(\"Invalid note value {}\".format(byte))\n\n    # Return list of beats\n    return music_dict.values()", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"note_list = []\n    for i in range(6):\n        note_list.append(int(music_string[i:i + 1]))\n    return note_list\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" # Get all the symbols from the music string.\n    symbols = []\n    for c in music_string:\n        if c == 'o':\n            symbols.append(0)\n        elif c == 'o|':\n            symbols.append(1)\n        elif c == '.|':\n            symbols.append(2)\n        elif c == '|':\n            symbols.append(3)\n        elif c == 'o|':\n            symbols.append(4)\n        elif c == 'o':\n            symbols.append(5)\n        elif c == 'o':\n            symbols.append(6)\n        elif c == 'o':\n            symbols.append(7)\n        elif c == 'o':\n            symbols.append(8)\n        elif c == 'o':\n            symbols.append(9)\n        elif c == 'o':\n            symbols.append(10)\n        elif c == 'o':\n            symbols.append(11)\n        elif c == 'o':\n            symbols.append(12)\n        elif c == 'o':\n            symbols.append(13)\n        elif c == 'o':\n            symbols.append(14)\n        elif c == 'o':\n            symbols.append(15)\n        elif c == 'o':\n            symbols.append(16)\n        elif c == 'o':\n            symbols.append(", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"try:\n        music_string = music_string.decode('ascii')\n    except UnicodeDecodeError:\n        print('invalid ASCII string: %r' % music_string)\n        return []\n\n    start: int = -1\n    note_count = 0\n    for i in range(len(music_string)):\n        if music_string[i] =='':\n            continue\n\n        if music_string[i] == 'o':\n            note_count += 4\n            start = i + 1\n        elif music_string[i] == 'o|':\n            note_count += 2\n            start = i + 1\n        elif music_string[i] == '.|':\n            note_count += 1\n            start = i + 1\n        else:\n            note_count += 0\n            continue\n\n        i += 1\n    return [start, note_count]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"music = music_string.split('|')\n    music_size = len(music)\n    note_count = 0\n    for note in music:\n        if note.startswith('o'):\n            note_count += 1\n            note = note[1:]\n        elif note.startswith('o|'):\n            note_count += 1\n            note = note[1:]\n            note = note[:-3]\n        elif note.startswith('.|'):\n            note_count += 1\n            note = note[1:]\n            note = note[:-3]\n        else:\n            print(f\"{note} is not a valid note.\")\n            return [note_count]\n    return note_count", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"lines = music_string.split(' ')\n    return [int(n) for n in lines[1:]]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# TODO: maybe we can use a regex here?\n    # This part is basically taken from http://stackoverflow.com/questions/931473/why-does-the-chord-movement-function-with-a-chord-use-the-matching-regex-for-problems-with-a-regex\n    # Find all the O's in the string, add them to a list\n    all_ones = set([])\n    last_one = ''\n    for i in range(0, len(music_string), 2):\n        if music_string[i] == '1':\n            all_ones.add(1)\n        elif music_string[i] == '2':\n            all_ones.add(2)\n        elif music_string[i] == 'o':\n            last_one = music_string[i]\n            if last_one == '1':\n                all_ones.add(1)\n            elif last_one == '2':\n                all_ones.add(2)\n            else:\n                all_ones.add(4)\n        else:\n            all_ones.add(4)\n\n    # Count the number of beats for each note\n    count = 0\n    if last_one == '1':\n        count += 1\n    elif last_one == '2':\n        count += 2\n    else:\n        count += 4\n\n    # Add the O's to the list of all_ones and return the resulting", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"try:\n        import msvcrt\n    except ImportError:\n        # This one is for Windows\n        import time\n        import ctypes\n        msvcrt = ctypes.windll.msvcrt\n\n    msvcrt.SetLocale(msvcrt.LC_TIME, 0)\n    msvcrt.SetOEMCharSet(0)\n    # These are the hex values for the standard note-names.\n    standard_hex_values: List[int] = [0x03, 0x06, 0x0A, 0x0C, 0x0D, 0x0E, 0x0F, 0x12, 0x14, 0x16, 0x18, 0x1A, 0x1C, 0x1E, 0x21, 0x22, 0x24, 0x26, 0x28, 0x2A, 0x2C, 0x2E, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3A, 0x3C, 0x3E, 0x3F, 0x41, 0x43, 0x45, 0x47, 0x49, 0x4A, 0x4D, 0x4E, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5A, 0x5C, 0x5E, 0x5F, 0x61, 0x63, 0x65, 0x67, 0x69", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# these strings represent whole notes\n    if music_string.startswith('o'):\n        return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    # these strings represent half notes\n    elif music_string.startswith('|'):\n        return [2, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    # these strings represent quarter notes\n    elif music_string.startswith('|') or music_string.endswith('|'):\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4]\n    else:\n        raise ValueError('invalid music format')", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = [int(n) for n in music_string.split()]\n    return notes\n</s>", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = [\n        int(note) for note in music_string.split('|')\n    ]\n    return notes", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Check for a note\n    if music_string[:3] == '#':\n        note_number = music_string.find('#')\n        note_accidental = music_string[note_number + 1:]\n\n        if note_accidental in ('a', 'd', 'f', 'g'):\n            # Whole note, last four beats\n            return [4, ]\n\n        elif note_accidental == 'o':\n            # Half note, last two beats\n            return [2, ]\n\n        elif note_accidental == 'o|':\n            # Quater note, last one beat\n            return [1, ]\n\n    else:\n        return []", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [\n        int(note)\n        for note in music_string.split('|')\n    ]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"result = []\n    for char in music_string:\n        if char == 'o':\n            result.append(4)\n        elif char == 'o|':\n            result.append(2)\n        elif char == '.|':\n            result.append(1)\n        else:\n            result.append(0)\n    return result", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" music_string = music_string.replace(\" \", \"\")\n    music_string = music_string.replace(\"-\", \"\")\n    music_string = music_string.replace(\":\", \"\")\n    music_string = music_string.replace(\".\", \"\")\n    music_string = music_string.replace(\"-\", \"\")\n\n    if music_string.startswith(\"|\"):\n        note_bursts = music_string.split(\"|\")\n        note_lengths = [int(note.strip().replace(\"|\", \"\")) for note in note_bursts]\n        return note_lengths\n\n    elif music_string.startswith(\"o\"):\n        note_bursts = music_string.split(\"o\")\n        note_lengths = [int(note.strip().replace(\"o\", \"\")) for note in note_bursts]\n        return note_lengths\n\n    elif music_string.startswith(\"o|.\"):\n        note_bursts = music_string.split(\"o|.\")\n        note_lengths = [int(note.strip().replace(\"o|.\", \"\")) for note in note_bursts]\n        return note_lengths\n\n    elif music_string.startswith(\"o|\"):\n        note_bursts =", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Python strings are always unicode strings.\n    # In this case, we'll just convert the string to bytes and use the bytes_to_ints function.\n    music_string = music_string.encode('utf-8')\n    music_string = bytes_to_ints(music_string)\n\n    return list(map(int, music_string))", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(note) for note in music_string.split(' ')]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return list(map(int, music_string.split()))", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(note) for note in music_string.replace(\"|\", \",\").split(\" \")]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\" return [int(note.split()[0]) for note in music_string.split(\" \")]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = [\n        int(m, 16) for m in music_string.split(' ')\n    ]\n    return [notes[0] + notes[1] * 2 for notes in notes]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# Note\n    notes = []\n    notes_list = []\n    for ch in music_string:\n        if ch == 'o':\n            notes.append(1)\n        elif ch == 'o|':\n            notes.append(2)\n        elif ch == '.|':\n            notes.append(3)\n        else:\n            notes.append(0)\n\n    # Time\n    beats = [0] * len(notes)\n\n    # So, how many beats should we find in each note?\n    for i in range(len(notes)):\n        if notes[i] == 1:\n            beats[i] = 4\n        elif notes[i] == 2:\n            beats[i] = 2\n        elif notes[i] == 3:\n            beats[i] = 1\n        else:\n            beats[i] = 0\n\n    # Return result\n    return beats", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"return [int(note) for note in music_string.split('.')]", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"# 'o' is a whole note, lasts four beats\n    note = [0 for x in range(4)]\n    # 'o|' is a half note, lasts two beats\n    note.extend([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0", "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"notes = list(music_string.split('|'))\n    notes.sort(key=lambda note: note.lower())\n\n    return parse_beat(note) for note in notes"]]