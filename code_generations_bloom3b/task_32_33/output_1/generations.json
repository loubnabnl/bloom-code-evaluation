[["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs[0]):\n        raise ValueError('len(xs)!= len(xs[0])')\n    if len(xs) % 2!= 0:\n        raise ValueError('len(xs)!= len(xs[0])')\n    if len(xs) % 3!= 0:\n        raise ValueError('len(xs)!= len(xs[0])')\n    if len(xs) % 4!= 0:\n        raise ValueError('len(xs)!= len(xs[0])')\n    if len(xs) % 5!= 0:\n        raise ValueError('len(xs)!= len(xs[0])')\n    if len(xs) % 6!= 0:\n        raise ValueError('len(xs)!= len(xs[0])')\n    if len(xs) % 7!= 0:\n        raise ValueError('len(xs)!= len(xs[0])')\n    if len(xs) % 8!= 0:\n        raise ValueError('len(xs)!= len(xs[0])')\n    if len(xs) % 9!= 0:\n        raise ValueError('len(xs)!= len(xs[0])')\n    if len(xs) % 10!= 0:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs) == 10:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs) == 10:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"list xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs[0]):\n        raise ValueError('length of xs must be even')\n    if len(xs) % 2!= 0:\n        raise ValueError('length of xs must be even')\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] +", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[-1]\n    if len(xs) == 3:\n        return xs[-2]\n    if len(xs) == 4:\n        return xs[-3]\n    if len(xs) == 5:\n        return xs[-4]\n    if len(xs) == 6:\n        return xs[-5]\n    if len(xs) == 7:\n        return xs[-6]\n    if len(xs) == 8:\n        return xs[-7]\n    if len(xs) == 9:\n        return xs[-8]\n    if len(xs) == 10:\n        return xs[-9]\n    if len(xs) == 11:\n        return xs[-10]\n    if len(xs) == 12:\n        return xs[-11]\n    if len(xs) == 13:\n        return xs[-12]\n    if len(xs) == 14:\n        return xs[-13]\n    if len(xs) == 15:\n        return xs[-14]\n    if len", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return None\n    if len(xs) % 2 == 1:\n        return 0.0\n    if len(xs) % 2 == 2:\n        return 0.5\n    if len(xs) % 2 == 3:\n        return 1.0\n    return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"list xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"list xs must have at least two elements\")\n    if len(xs) > 2:\n        raise ValueError(\"list xs must have at most two elements\")\n    if len(xs) % 2 == 1:\n        return xs[0]\n    else:\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"length of xs must be greater than 0\")\n    if len(xs) > 2:\n        raise ValueError(\"length of xs must be less than 2\")\n    if len(xs) % 2 == 0:\n        return xs[0]\n    if len(xs) % 2 == 1:\n        return xs[1]\n    return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[-1]\n    if len(xs) == 3:\n        return xs[-2]\n    if len(xs) == 4:\n        return xs[-1]\n    if len(xs) == 5:\n        return xs[-1]\n    if len(xs) == 6:\n        return xs[-1]\n    if len(xs) == 7:\n        return xs[-1]\n    if len(xs) == 8:\n        return xs[-1]\n    if len(xs) == 9:\n        return xs[-1]\n    if len(xs) == 10:\n        return xs[-1]\n    if len(xs) == 11:\n        return xs[-1]\n    if len(xs) == 12:\n        return xs[-1]\n    if len(xs) == 13:\n        return xs[-1]\n    if len(xs) == 14:\n        return xs[-1]\n    if len(xs) == 15:\n        return xs[-1]\n    if len(xs) == 16:\n        return xs[-1]\n    if len(xs) == 17:\n        return xs[-1]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"list xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs) ==", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[-1]\n    if len(xs) == 3:\n        return xs[-2]\n    if len(xs) == 4:\n        return xs[-1]\n    if len(xs) == 5:\n        return xs[-1]\n    if len(xs) == 6:\n        return xs[-1]\n    if len(xs) == 7:\n        return xs[-1]\n    if len(xs) == 8:\n        return xs[-1]\n    if len(xs) == 9:\n        return xs[-1]\n    if len(xs) == 10:\n        return xs[-1]\n    if len(xs) == 11:\n        return xs[-1]\n    if len(xs) == 12:\n        return xs[-1]\n    if len(xs) == 13:\n        return xs[-1]\n    if len(xs) == 14:\n        return xs[-1]\n    if len(xs) == 15:\n        return xs[-1]\n    if len(xs) == 16:\n        return xs[-1]\n    if len(xs) == 17:\n        return xs[-1]\n    if len(", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs) == 10:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0.0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return poly(xs, x)\n    if len(xs) == 3:\n        return poly(xs, x) + poly(xs, x) * x\n    if len(xs) == 4:\n        return poly(xs, x) + poly(xs, x) * x + poly(xs, x) * x * x\n    if len(xs) == 5:\n        return poly(xs, x) + poly(xs, x) * x + poly(xs, x) * x * x * x\n    if len(xs) == 6:\n        return poly(xs, x) + poly(xs, x) * x + poly(xs, x) * x * x * x * x\n    if len(xs) == 7:\n        return poly(xs, x) + poly(xs, x) * x + poly(xs, x) * x * x * x * x * x\n    if len(xs) == 8:\n        return poly(xs,", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) % 2 == 1:\n        return xs[-1]\n    if len(xs) % 2 == 2:\n        return xs[-2]\n    if len(xs) % 2 == 3:\n        return xs[-3]\n    if len(xs) % 2 == 4:\n        return xs[-4]\n    if len(xs) % 2 == 5:\n        return xs[-5]\n    if len(xs) % 2 == 6:\n        return xs[-6]\n    if len(xs) % 2 == 7:\n        return xs[-7]\n    if len(xs) % 2 == 8:\n        return xs[-8]\n    if len(xs) % 2 == 9:\n        return xs[-9]\n    if len(xs) % 2 == 10:\n        return xs[-10]\n    if len(xs) % 2 == 11:\n        return xs[-11]\n    if len(xs) % 2 == 12:\n        return xs[-12]\n    if len(xs) % 2 == 13:\n        return xs[-13]\n    if len(xs) % 2 == 14:\n        return xs[-14]\n    if", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must be at least 2\")\n    if len(xs) > 2:\n        raise ValueError(\"xs must be at most 2\")\n    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be even\")\n    if len(xs) % 2 == 0:\n        raise ValueError(\"xs must be odd\")\n    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be odd\")\n    if len(xs) % 2 == 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be even\")\n    if len(xs) % 2 == 0:\n        raise ValueError(\"xs must be odd\")\n    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be odd\")\n    if len(xs) % 2 == 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must be even\")\n    if len(xs) % 2 == 0:\n        raise ValueError(\"xs must", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"list xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) % 2 == 1:\n        return 0\n    if len(xs) % 2 == 2:\n        return 0\n    if len(xs) % 2 == 3:\n        return 0\n    if len(xs) % 2 == 4:\n        return 0\n    if len(xs) % 2 == 5:\n        return 0\n    if len(xs) % 2 == 6:\n        return 0\n    if len(xs) % 2 == 7:\n        return 0\n    if len(xs) % 2 == 8:\n        return 0\n    if len(xs) % 2 == 9:\n        return 0\n    if len(xs) % 2 == 10:\n        return 0\n    if len(xs) % 2 == 11:\n        return 0\n    if len(xs) % 2 == 12:\n        return 0\n    if len(xs) % 2 == 13:\n        return 0\n    if len(xs) % 2 == 14:\n        return 0\n    if len(xs) % 2 == 15:\n        return 0\n    if len(xs) % 2 == 16:\n        return 0\n    if len(xs) % 2 == 17:\n        return 0\n    if", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs) == 10:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"List xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs) ==", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"len(xs) must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return 0\n    if len(xs) == 3:\n        return 0\n    if len(xs) == 4:\n        return 0\n    if len(xs) == 5:\n        return 0\n    if len(xs) == 6:\n        return 0\n    if len(xs) == 7:\n        return 0\n    if len(xs) == 8:\n        return 0\n    if len(xs) == 9:\n        return 0\n    if len(xs) == 10:\n        return 0\n    if len(xs) == 11:\n        return 0\n    if len(xs) == 12:\n        return 0\n    if len(xs) == 13:\n        return 0\n    if len(xs) == 14:\n        return 0\n    if len(xs) == 15:\n        return 0\n    if len(xs) == 16:\n        return 0\n    if len(xs) == 17:\n        return 0\n    if len(xs) == 18:\n        return 0\n    if len(xs) == 19:\n        return 0\n    if len(xs) == 20:\n        return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) % 2 == 1:\n        return 0\n    if len(xs) % 3 == 1:\n        return 0\n    if len(xs) % 4 == 1:\n        return 0\n    if len(xs) % 5 == 1:\n        return 0\n    if len(xs) % 6 == 1:\n        return 0\n    if len(xs) % 7 == 1:\n        return 0\n    if len(xs) % 8 == 1:\n        return 0\n    if len(xs) % 9 == 1:\n        return 0\n    if len(xs) % 10 == 1:\n        return 0\n    if len(xs) % 11 == 1:\n        return 0\n    if len(xs) % 12 == 1:\n        return 0\n    if len(xs) % 13 == 1:\n        return 0\n    if len(xs) % 14 == 1:\n        return 0\n    if len(xs) % 15 == 1:\n        return 0\n    if len(xs) % 16 == 1:\n        return 0\n    if len(xs) % 17 == 1:\n        return 0\n    if len(xs) % 18 == 1:\n        return 0\n    if len", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= 2:\n        raise ValueError('length of xs must be 2.')\n\n    if len(xs) % 2!= 0:\n        raise ValueError('length of xs must be even.')\n\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x**6\n\n    if len(xs) == 8:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[-1]\n    if len(xs) == 3:\n        return xs[-2]\n    if len(xs) == 4:\n        return xs[-3]\n    if len(xs) == 5:\n        return xs[-4]\n    if len(xs) == 6:\n        return xs[-5]\n    if len(xs) == 7:\n        return xs[-6]\n    if len(xs) == 8:\n        return xs[-7]\n    if len(xs) == 9:\n        return xs[-8]\n    if len(xs) == 10:\n        return xs[-9]\n    if len(xs) == 11:\n        return xs[-10]\n    if len(xs) == 12:\n        return xs[-11]\n    if len(xs) == 13:\n        return xs[-12]\n    if len(xs) == 14:\n        return xs[-13]\n    if len(xs) == 15:\n        return xs[-14]\n    if len(xs) == 16:\n        return xs[-15]\n    if len(", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least 2 elements\")\n    if len(xs) > 2:\n        raise ValueError(\"xs must have at most 2 elements\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least 2 elements\")\n    if len(xs) > 2:\n        raise ValueError(\"xs must have at most 2 elements\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least 2 elements\")\n    if len(xs) > 2:\n        raise ValueError(\"xs must have at most 2 elements\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least 2 elements\")\n    if len(xs) > 2:\n        raise ValueError(\"xs must have at most 2 elements\")\n    if len(", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1 - 1] + xs[2 - 1]\n    if len(xs) == 4:\n        return xs[0] + xs[1 - 1] + xs[2 - 1] + xs[3 - 1]\n    if len(xs) == 5:\n        return xs[0] + xs[1 - 1] + xs[2 - 1] + xs[3 - 1] + xs[4 - 1]\n    if len(xs) == 6:\n        return xs[0] + xs[1 - 1] + xs[2 - 1] + xs[3 - 1] + xs[4 - 1] + xs[5 - 1]\n    if len(xs) == 7:\n        return xs[0] + xs[1 - 1] + xs[2 - 1] + xs[3 - 1] + xs[4 - 1] + xs[5 - 1] + xs[6 - 1]\n    if len(xs) == 8:\n        return xs[0] + xs[1 -", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"list xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) % 2 == 1:\n        return xs[-1]\n    if len(xs) % 2 == 2:\n        return xs[-2]\n    if len(xs) % 2 == 3:\n        return xs[-3]\n    if len(xs) % 2 == 4:\n        return xs[-4]\n    if len(xs) % 2 == 5:\n        return xs[-5]\n    if len(xs) % 2 == 6:\n        return xs[-6]\n    if len(xs) % 2 == 7:\n        return xs[-7]\n    if len(xs) % 2 == 8:\n        return xs[-8]\n    if len(xs) % 2 == 9:\n        return xs[-9]\n    if len(xs) % 2 == 10:\n        return xs[-10]\n    if len(xs) % 2 == 11:\n        return xs[-11]\n    if len(xs) % 2 == 12:\n        return xs[-12]\n    if len(xs) % 2 == 13:\n        return xs[-13]\n    if len(xs) % 2 == 14:\n        return xs[-14]\n    if", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return poly(xs, x)\n    if len(xs) == 3:\n        return poly(xs, x) + poly(xs, x) * x\n    if len(xs) == 4:\n        return poly(xs, x) + poly(xs, x) * x + poly(xs, x) * x * x\n    if len(xs) == 5:\n        return poly(xs, x) + poly(xs, x) * x + poly(xs, x) * x * x * x\n    if len(xs) == 6:\n        return poly(xs, x) + poly(xs, x) * x + poly(xs, x) * x * x * x * x\n    if len(xs) == 7:\n        return poly(xs, x) + poly(xs, x) * x + poly(xs, x) * x * x * x * x * x\n    if len(xs) == 8:\n        return poly(xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) % 2 == 1:\n        return 0\n    if len(xs) % 2 == 2:\n        return 0\n    if len(xs) % 2 == 3:\n        return 0\n    if len(xs) % 2 == 4:\n        return 0\n    if len(xs) % 2 == 5:\n        return 0\n    if len(xs) % 2 == 6:\n        return 0\n    if len(xs) % 2 == 7:\n        return 0\n    if len(xs) % 2 == 8:\n        return 0\n    if len(xs) % 2 == 9:\n        return 0\n    if len(xs) % 2 == 10:\n        return 0\n    if len(xs) % 2 == 11:\n        return 0\n    if len(xs) % 2 == 12:\n        return 0\n    if len(xs) % 2 == 13:\n        return 0\n    if len(xs) % 2 == 14:\n        return 0\n    if len(xs) % 2 == 15:\n        return 0\n    if len(xs) % 2 == 16:\n        return 0\n    if len(xs) % 2 == 17:\n        return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs) == 10:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"list xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"list xs must have at least two elements\")\n    if len(xs) % 2 == 1:\n        return xs[0]\n    if len(xs) % 2 == 0:\n        return xs[1]\n    if len(xs) % 2 == 1:\n        return xs[-1]\n    return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) % 2 == 1:\n        return 0\n    if len(xs) % 2 == 2:\n        return 0\n    if len(xs) % 2 == 3:\n        return 0\n    if len(xs) % 2 == 4:\n        return 0\n    if len(xs) % 2 == 5:\n        return 0\n    if len(xs) % 2 == 6:\n        return 0\n    if len(xs) % 2 == 7:\n        return 0\n    if len(xs) % 2 == 8:\n        return 0\n    if len(xs) % 2 == 9:\n        return 0\n    if len(xs) % 2 == 10:\n        return 0\n    if len(xs) % 2 == 11:\n        return 0\n    if len(xs) % 2 == 12:\n        return 0\n    if len(xs) % 2 == 13:\n        return 0\n    if len(xs) % 2 == 14:\n        return 0\n    if len(xs) % 2 == 15:\n        return 0\n    if len(xs) % 2 == 16:\n        return 0\n    if len(xs) % 2 == 17:\n        return 0\n    if len", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"list xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"len(xs) must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"len(xs) must be at least 2\")\n    if len(xs) % 2 == 1:\n        return xs[0]\n    if len(xs) % 2 == 0:\n        return xs[1]\n    return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) % 2 == 1:\n        return 0\n    if len(xs) % 2 == 2:\n        return 0\n    if len(xs) % 2 == 3:\n        return 0\n    if len(xs) % 2 == 4:\n        return 0\n    if len(xs) % 2 == 5:\n        return 0\n    if len(xs) % 2 == 6:\n        return 0\n    if len(xs) % 2 == 7:\n        return 0\n    if len(xs) % 2 == 8:\n        return 0\n    if len(xs) % 2 == 9:\n        return 0\n    if len(xs) % 2 == 10:\n        return 0\n    if len(xs) % 2 == 11:\n        return 0\n    if len(xs) % 2 == 12:\n        return 0\n    if len(xs) % 2 == 13:\n        return 0\n    if len(xs) % 2 == 14:\n        return 0\n    if len(xs) % 2 == 15:\n        return 0\n    if len(xs) % 2 == 16:\n        return 0\n    if len(xs) % 2 == 17:\n        return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs) == 10:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 4!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 8!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 16!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 32!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 64!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 128!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 256!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 512!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 1024!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= 2:\n        raise ValueError(\"find_zero: xs must be a list of length 2\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero: xs must be a list of even length\")\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return 0.5 * (xs[0] + xs[1])\n    if len(xs) == 3:\n        return 0.5 * (xs[0] + xs[1] + xs[2])\n    if len(xs) == 4:\n        return 0.5 * (xs[0] + xs[1] + xs[2] + xs[3])\n    if len(xs) == 5:\n        return 0.5 * (xs[0] + xs[1] + xs[2] + xs[3] + xs[4])\n    if len(xs) == 6:\n        return 0.5 * (xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5])\n    if len(xs) == 7:\n        return 0.5 * (xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6])\n    if len(xs) == 8:\n        return 0.5 * (xs[0] + xs[1] + xs[2] + xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= 2:\n        raise ValueError(\"find_zero takes list xs having even number of coefficients and largest non zero coefficient\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero takes list xs having even number of coefficients and largest non zero coefficient\")\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    raise ValueError(\"find_zero takes list xs having even number of coefficients and largest non zero coefficient\")", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"list xs must have even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"list xs must have at least two coefficients\")\n    if len(xs) == 2:\n        return xs[0], xs[1]\n    if len(xs) == 3:\n        return find_zero([poly(xs, x), poly(xs, x), poly(xs, x)])\n    if len(xs) == 4:\n        return find_zero([poly(xs, x), poly(xs, x), poly(xs, x), poly(xs, x)])\n    if len(xs) == 5:\n        return find_zero([poly(xs, x), poly(xs, x), poly(xs, x), poly(xs, x), poly(xs, x)])\n    if len(xs) == 6:\n        return find_zero([poly(xs, x), poly(xs, x), poly(xs, x), poly(xs, x), poly(xs, x), poly(xs, x)])\n    if len(xs) == 7:\n        return find_zero([poly(xs, x), poly", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return 0.5 * (xs[0] + xs[1])\n    if len(xs) == 3:\n        return 0.5 * (xs[0] + xs[1] + xs[2])\n    if len(xs) == 4:\n        return 0.5 * (xs[0] + xs[1] + xs[2] + xs[3])\n    if len(xs) == 5:\n        return 0.5 * (xs[0] + xs[1] + xs[2] + xs[3] + xs[4])\n    if len(xs) == 6:\n        return 0.5 * (xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5])\n    if len(xs) == 7:\n        return 0.5 * (xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6])\n    if len(xs) == 8:\n        return 0.5 * (xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7])\n    if len(xs) == 9:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least 2 coefficients\")\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[-1]\n    if len(xs) == 3:\n        return xs[-2]\n    if len(xs) == 4:\n        return xs[-3]\n    if len(xs) == 5:\n        return xs[-4]\n    if len(xs) == 6:\n        return xs[-5]\n    if len(xs) == 7:\n        return xs[-6]\n    if len(xs) == 8:\n        return xs[-7]\n    if len(xs) == 9:\n        return xs[-8]\n    if len(xs) == 10:\n        return xs[-9]\n    if len(xs) == 11:\n        return xs[-10]\n    if len(xs) == 12:\n        return xs[-11]\n    if len(xs) == 13:\n        return xs[-12]\n    if len(xs) == 14:\n        return xs[-13]\n    if len(xs) == 15:\n        return xs[-14]\n    if len(xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"len(xs) must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"len(xs) must be at least 2\")\n    if len(xs) % 2 == 0:\n        return xs[0]\n    else:\n        return sum([poly(xs, x) for x in range(len(xs) // 2)])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs[0]):\n        raise ValueError('len(xs)!= len(xs[0])')\n    if len(xs) % 2!= 0:\n        raise ValueError('len(xs)!= len(xs[0])')\n    if len(xs) % 4!= 0:\n        raise ValueError('len(xs)!= len(xs[0])')\n    if len(xs) % 8!= 0:\n        raise ValueError('len(xs)!= len(xs[0])')\n    if len(xs) % 16!= 0:\n        raise ValueError('len(xs)!= len(xs[0])')\n    if len(xs) % 32!= 0:\n        raise ValueError('len(xs)!= len(xs[0])')\n    if len(xs) % 64!= 0:\n        raise ValueError('len(xs)!= len(xs[0])')\n    if len(xs) % 128!= 0:\n        raise ValueError('len(xs)!= len(xs[0])')\n    if len(xs) % 256!= 0:\n        raise ValueError('len(xs)!= len(xs[0])')\n    if len(xs) % 512!= 0:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs[0])!= len(xs[1]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs[0])!= len(xs[2]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs[0])!= len(xs[3]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs[0])!= len(xs[4]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs[0])!= len(xs[5]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs[0])!= len(xs[6]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs[0])!= len(xs[7]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs[0])!= len(xs[8]):\n        raise ValueError(", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"length of xs must be at least 2\")\n    if len(xs) % 2 == 0:\n        return xs[0]\n    else:\n        return sum([poly(xs, x) for x in xs])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= 2:\n        raise ValueError(\"find_zero expects list of even number of coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero expects list of even number of coefficients\")\n    if len(xs) % 2 == 1:\n        return xs[0]\n    else:\n        return xs[1]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return 0\n    if len(xs) == 3:\n        return 0\n    if len(xs) == 4:\n        return 0\n    if len(xs) == 5:\n        return 0\n    if len(xs) == 6:\n        return 0\n    if len(xs) == 7:\n        return 0\n    if len(xs) == 8:\n        return 0\n    if len(xs) == 9:\n        return 0\n    if len(xs) == 10:\n        return 0\n    if len(xs) == 11:\n        return 0\n    if len(xs) == 12:\n        return 0\n    if len(xs) == 13:\n        return 0\n    if len(xs) == 14:\n        return 0\n    if len(xs) == 15:\n        return 0\n    if len(xs) == 16:\n        return 0\n    if len(xs) == 17:\n        return 0\n    if len(xs) == 18:\n        return 0\n    if len(xs) == 19:\n        return 0\n    if len(xs) == 20:\n        return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= 2:\n        raise ValueError(\"find_zero takes only even number of coefficients and largest non zero coefficient\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero takes only even number of coefficients and largest non zero coefficient\")\n    if len(xs) % 2!= len(xs):\n        raise ValueError(\"find_zero takes only even number of coefficients and largest non zero coefficient\")\n    if len(xs) % 2!= len(xs):\n        raise ValueError(\"find_zero takes only even number of coefficients and largest non zero coefficient\")\n    if len(xs)!= len(xs):\n        raise ValueError(\"find_zero takes only even number of coefficients and largest non zero coefficient\")\n    if len(xs)!= len(xs):\n        raise ValueError(\"find_zero takes only even number of coefficients and largest non zero coefficient\")\n    if len(xs)!= len(xs):\n        raise ValueError(\"find_zero takes only even number of coefficients and largest non zero coefficient\")\n    if len(xs)!= len(xs):\n        raise ValueError(\"find_zero takes only even number of coefficients and largest non zero coefficient", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) % 2 == 1:\n        return 0\n    if len(xs) % 2 == 2:\n        return 0\n    if len(xs) % 2 == 3:\n        return 0\n    if len(xs) % 2 == 4:\n        return 0\n    if len(xs) % 2 == 5:\n        return 0\n    if len(xs) % 2 == 6:\n        return 0\n    if len(xs) % 2 == 7:\n        return 0\n    if len(xs) % 2 == 8:\n        return 0\n    if len(xs) % 2 == 9:\n        return 0\n    if len(xs) % 2 == 10:\n        return 0\n    if len(xs) % 2 == 11:\n        return 0\n    if len(xs) % 2 == 12:\n        return 0\n    if len(xs) % 2 == 13:\n        return 0\n    if len(xs) % 2 == 14:\n        return 0\n    if len(xs) % 2 == 15:\n        return 0\n    if len(xs) % 2 == 16:\n        return 0\n    if len(xs) % 2 == 17:\n        return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= 2:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero only takes list xs having largest non zero coefficient\")\n    if len(xs) % 2 == 1:\n        return xs[-1]\n    else:\n        return xs[-2]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must be at least 2\")\n    if len(xs) > 2:\n        raise ValueError(\"xs must be at most 2\")\n    if len(xs) % 2 == 0:\n        return xs[0]\n    else:\n        return xs[-1]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs list must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs list must be even\")\n    if len(xs) > 1:\n        raise ValueError(\"length of xs list must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs list must be even\")\n    if len(xs) > 1:\n        raise ValueError(\"length of xs list must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs list must be even\")\n    if len(xs) > 1:\n        raise ValueError(\"length of xs list must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs list must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs list must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs list must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs list must be even", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= 2:\n        raise ValueError(\"find_zero: xs must be a list of length 2\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero: xs must have even number of coefficients\")\n    if len(xs) % 2 == 1:\n        raise ValueError(\"find_zero: xs must have largest non zero coefficient\")\n    if len(xs) % 2 == 0:\n        return 0.0\n    if len(xs) % 2 == 1:\n        return 1.0\n    return 0.0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs) == 10:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs) == 10:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= 2:\n        raise ValueError(\"find_zero expects list of length 2\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero expects list of length 2\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero expects list of length 2\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero expects list of length 2\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero expects list of length 2\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero expects list of length 2\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero expects list of length 2\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero expects list of length 2\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero expects list of length 2\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero expects list of length 2\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero expects list of length 2\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero expects list of length 2\")\n    if len(", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) > 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) % 2 == 0:\n        return xs[0]\n    else:\n        return xs[1]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"len(xs) must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) % 2 == 1:\n        return 0\n    if len(xs) % 2 == 2:\n        return 0\n    if len(xs) % 2 == 3:\n        return 0\n    if len(xs) % 2 == 4:\n        return 0\n    if len(xs) % 2 == 5:\n        return 0\n    if len(xs) % 2 == 6:\n        return 0\n    if len(xs) % 2 == 7:\n        return 0\n    if len(xs) % 2 == 8:\n        return 0\n    if len(xs) % 2 == 9:\n        return 0\n    if len(xs) % 2 == 10:\n        return 0\n    if len(xs) % 2 == 11:\n        return 0\n    if len(xs) % 2 == 12:\n        return 0\n    if len(xs) % 2 == 13:\n        return 0\n    if len(xs) % 2 == 14:\n        return 0\n    if len(xs) % 2 == 15:\n        return 0\n    if len(xs) % 2 == 16:\n        return 0\n    if len(xs) % 2 == 17:\n        return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"length of xs must be greater than 0\")\n    if len(xs) % 2 == 1:\n        return xs[0]\n    else:\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return 0.5 * (xs[0] + xs[1])\n    if len(xs) == 3:\n        return 0.5 * (xs[0] + xs[1] + xs[2])\n    if len(xs) == 4:\n        return 0.5 * (xs[0] + xs[1] + xs[2] + xs[3])\n    if len(xs) == 5:\n        return 0.5 * (xs[0] + xs[1] + xs[2] + xs[3] + xs[4])\n    if len(xs) == 6:\n        return 0.5 * (xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5])\n    if len(xs) == 7:\n        return 0.5 * (xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6])\n    if len(xs) == 8:\n        return 0.5 * (xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7])\n    if len(xs) == 9:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"List xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs) ==", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"list xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0.0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return poly(xs, 0.0)\n    if len(xs) == 3:\n        return poly(xs, 0.0)\n    if len(xs) == 4:\n        return poly(xs, 0.0)\n    if len(xs) == 5:\n        return poly(xs, 0.0)\n    if len(xs) == 6:\n        return poly(xs, 0.0)\n    if len(xs) == 7:\n        return poly(xs, 0.0)\n    if len(xs) == 8:\n        return poly(xs, 0.0)\n    if len(xs) == 9:\n        return poly(xs, 0.0)\n    if len(xs) == 10:\n        return poly(xs, 0.0)\n    if len(xs) == 11:\n        return poly(xs, 0.0)\n    if len(xs) == 12:\n        return poly(xs, 0.0)\n    if len(xs) == 13:\n        return poly(xs, 0.0)\n    if", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"length of xs must be greater than 0\")\n    if len(xs) % 2 == 1:\n        return xs[-1]\n    else:\n        return xs[-2]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least 2 coefficients\")\n    if len(xs) > 2:\n        raise ValueError(\"xs must have at most 2 coefficients\")\n    if len(xs) % 2 == 1:\n        return xs[0]\n    else:\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) % 2 == 1:\n        return 0\n    if len(xs) % 2 == 2:\n        return 0\n    if len(xs) % 2 == 3:\n        return 0\n    if len(xs) % 2 == 4:\n        return 0\n    if len(xs) % 2 == 5:\n        return 0\n    if len(xs) % 2 == 6:\n        return 0\n    if len(xs) % 2 == 7:\n        return 0\n    if len(xs) % 2 == 8:\n        return 0\n    if len(xs) % 2 == 9:\n        return 0\n    if len(xs) % 2 == 10:\n        return 0\n    if len(xs) % 2 == 11:\n        return 0\n    if len(xs) % 2 == 12:\n        return 0\n    if len(xs) % 2 == 13:\n        return 0\n    if len(xs) % 2 == 14:\n        return 0\n    if len(xs) % 2 == 15:\n        return 0\n    if len(xs) % 2 == 16:\n        return 0\n    if len(xs) % 2 == 17:\n        return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least two coefficients\")\n    if len(xs) > 3:\n        raise ValueError(\"xs must have at most three coefficients\")\n    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) % 2 == 0:\n        raise ValueError(\"xs must have odd number of coefficients\")\n    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) % 2 == 0:\n        raise ValueError(\"xs must have odd number of coefficients\")\n    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) % 2 == 0:\n        raise ValueError(\"xs must have odd number of coefficients\")\n    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) % 2 == 0:\n        raise ValueError(\"xs must have odd number of coefficients\")\n    if len(xs)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[-1]\n    if len(xs) == 3:\n        return xs[0] + xs[-1] + xs[-2]\n    if len(xs) == 4:\n        return xs[0] + xs[-1] + xs[-2] + xs[-3]\n    if len(xs) == 5:\n        return xs[0] + xs[-1] + xs[-2] + xs[-3] + xs[-4]\n    if len(xs) == 6:\n        return xs[0] + xs[-1] + xs[-2] + xs[-3] + xs[-4] + xs[-5]\n    if len(xs) == 7:\n        return xs[0] + xs[-1] + xs[-2] + xs[-3] + xs[-4] + xs[-5] + xs[-6]\n    if len(xs) == 8:\n        return xs[0] + xs[-1] + xs[-2] + xs[-3] + xs[-4] + xs[-5] + xs[-6] + xs[-7", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        return 0\n    else:\n        return sum([poly(xs, x) for x in xs])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[-1]\n    if len(xs) == 3:\n        return xs[-2]\n    if len(xs) == 4:\n        return xs[-3]\n    if len(xs) == 5:\n        return xs[-4]\n    if len(xs) == 6:\n        return xs[-5]\n    if len(xs) == 7:\n        return xs[-6]\n    if len(xs) == 8:\n        return xs[-7]\n    if len(xs) == 9:\n        return xs[-8]\n    if len(xs) == 10:\n        return xs[-9]\n    if len(xs) == 11:\n        return xs[-10]\n    if len(xs) == 12:\n        return xs[-11]\n    if len(xs) == 13:\n        return xs[-12]\n    if len(xs) == 14:\n        return xs[-13]\n    if len(xs) == 15:\n        return xs[-14]\n    if len(xs) == 16:\n        return xs[-15]\n    if", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"length of xs must be at least 2\")\n    if len(xs) > 2:\n        raise ValueError(\"length of xs must be at most 2\")\n    if len(xs) % 2 == 0:\n        return xs[0]\n    else:\n        return xs[1]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) > 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) > 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) > 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return poly(xs, x)\n    if len(xs) == 3:\n        return poly(xs, x) + poly(xs, x) * x\n    if len(xs) == 4:\n        return poly(xs, x) + poly(xs, x) * x + poly(xs, x) * x * x\n    if len(xs) == 5:\n        return poly(xs, x) + poly(xs, x) * x + poly(xs, x) * x * x * x\n    if len(xs) == 6:\n        return poly(xs, x) + poly(xs, x) * x + poly(xs, x) * x * x * x * x\n    if len(xs) == 7:\n        return poly(xs, x) + poly(xs, x) * x + poly(xs, x) * x * x * x * x * x\n    if len(xs) == 8:\n        return poly(xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= 2:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero only takes list xs having even", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= 2:\n        raise ValueError(\"find_zero takes list xs having even number of coefficients and largest non zero coefficient\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero takes list xs having even number of coefficients and largest non zero coefficient\")\n    if len(xs) % 2 == 1:\n        return xs[-1]\n    else:\n        return xs[-2]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) > 2:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2 == 0:\n        return xs[0]\n    if len(xs) % 2 == 1:\n        return xs[1]\n    return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"len(xs) must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"len(xs) must be at least 2\")\n    if len(xs) > 2:\n        raise ValueError(\"len(xs) must be at most 2\")\n    if len(xs) % 2 == 0:\n        return sum(xs) / 2.0\n    else:\n        return sum(xs) / 2.0 + sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"length of xs must be greater than 0\")\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[-1]\n    if len(xs) == 3:\n        return xs[-2]\n    if len(xs) == 4:\n        return xs[-3]\n    if len(xs) == 5:\n        return xs[-4]\n    if len(xs) == 6:\n        return xs[-5]\n    if len(xs) == 7:\n        return xs[-6]\n    if len(xs) == 8:\n        return xs[-7]\n    if len(xs) == 9:\n        return xs[-8]\n    if len(xs) == 10:\n        return xs[-9]\n    if len(xs) == 11:\n        return xs[-10]\n    if len(xs) == 12:\n        return xs[-11]\n    if len(xs) == 13:\n        return xs[-12]\n    if len(xs) == 14:\n        return xs[-13]\n    if len(xs) == 15:\n        return xs[-14]\n    if len(xs)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs[0]):\n        raise ValueError('length of xs must be even')\n    if len(xs) % 2!= 0:\n        raise ValueError('length of xs must be even')\n    if len(xs) > 1:\n        raise ValueError('length of xs must be even')\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return find_zero(xs)\n    if len(xs) == 3:\n        return find_zero([poly(xs, x) for x in xs])\n    if len(xs) == 4:\n        return find_zero([poly(xs, x) for x in xs])\n    if len(xs) == 5:\n        return find_zero([poly(xs, x) for x in xs])\n    if len(xs) == 6:\n        return find_zero([poly(xs, x) for x in xs])\n    if len(xs) == 7:\n        return find_zero([poly(xs, x) for x in xs])\n    if len(xs) == 8:\n        return find_zero([poly(xs, x) for x in xs])\n    if len(xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return poly(xs, x)\n    if len(xs) == 3:\n        return poly(xs, x) + poly(xs, x) * x + poly(xs, x) * x * x\n    if len(xs) == 4:\n        return poly(xs, x) + poly(xs, x) * x + poly(xs, x) * x * x * x\n    if len(xs) == 5:\n        return poly(xs, x) + poly(xs, x) * x + poly(xs, x) * x * x * x * x\n    if len(xs) == 6:\n        return poly(xs, x) + poly(xs, x) * x + poly(xs, x) * x * x * x * x * x\n    if len(xs) == 7:\n        return poly(xs,", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs) == 10:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        return 0\n    if len(xs) % 2!= 0:\n        return 0\n    if len(xs) % 4 == 0:\n        return 0\n    if len(xs) % 8 == 0:\n        return 0\n    if len(xs) % 16 == 0:\n        return 0\n    if len(xs) % 32 == 0:\n        return 0\n    if len(xs) % 64 == 0:\n        return 0\n    if len(xs) % 128 == 0:\n        return 0\n    if len(xs) % 256 == 0:\n        return 0\n    if len(xs) % 512 == 0:\n        return 0\n    if len(xs) % 1024 == 0:\n        return 0\n    if len(xs) % 2048 == 0:\n        return 0\n    if len(xs) % 4096 == 0:\n        return 0\n    if len(xs) % 8192 == 0:\n        return 0\n    if len(xs) % 16384 == 0:\n        return 0\n    if len(xs) % 32768 == 0:\n        return 0\n    if len(xs) % 65536 == 0:\n        return 0\n    if len(xs) % 131072 == 0:\n        return 0\n    if len(xs) % 262144 == 0:\n        return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= 2:\n        raise ValueError(\"find_zero takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution\")\n    if len(xs) % 2!= len(xs):\n        raise ValueError(\"find_zero takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution\")\n    if len(xs) % 2!= len(xs):\n        raise ValueError(\"find_zero takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution\")\n    if len(xs) % 2!= len(xs):\n        raise ValueError(\"find_zero takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution\")\n    if len(xs) % 2!= len(xs):\n        raise ValueError(\"find_zero takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution\")\n    if len(xs) % 2!= len(xs):", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return None\n    if len(xs) % 2 == 1:\n        return xs[0]\n    if len(xs) % 2 == 2:\n        return xs[1]\n    if len(xs) % 2 == 3:\n        return xs[2]\n    if len(xs) % 2 == 4:\n        return xs[3]\n    if len(xs) % 2 == 5:\n        return xs[4]\n    if len(xs) % 2 == 6:\n        return xs[5]\n    if len(xs) % 2 == 7:\n        return xs[6]\n    if len(xs) % 2 == 8:\n        return xs[7]\n    if len(xs) % 2 == 9:\n        return xs[8]\n    if len(xs) % 2 == 10:\n        return xs[9]\n    if len(xs) % 2 == 11:\n        return xs[10]\n    if len(xs) % 2 == 12:\n        return xs[11]\n    if len(xs) % 2 == 13:\n        return xs[12]\n    if len(xs) % 2 == 14:\n        return xs[13]\n    if len(xs) % 2 == 15:\n        return xs[14]\n    if", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= 2:\n        raise ValueError(\"find_zero takes list of even number of coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero takes list of even number of coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero takes list of even number of coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero takes list of even number of coefficients\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero takes list of even number of coefficients\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero takes list of even number of coefficients\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero takes list of even number of coefficients\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero takes list of even number of coefficients\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero takes list of even number of coefficients\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero takes list of even number of coefficients\")\n    if len(xs)!=", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must be at least 2\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs) == 10:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least two elements\")\n    if len(xs) % 2 == 1:\n        return xs[0]\n    if len(xs) % 2 == 0:\n        return xs[1]\n    if len(xs) % 2 == 2:\n        return xs[0] + xs[1]\n    if len(xs) % 2 == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) % 2 == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) % 2 == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) % 2 == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) % 2 == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) % 2 == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) % 2 == 1:\n        return xs[-1]\n    if len(xs) % 2 == 2:\n        return xs[-2]\n    if len(xs) % 2 == 3:\n        return xs[-3]\n    if len(xs) % 2 == 4:\n        return xs[-4]\n    if len(xs) % 2 == 5:\n        return xs[-5]\n    if len(xs) % 2 == 6:\n        return xs[-6]\n    if len(xs) % 2 == 7:\n        return xs[-7]\n    if len(xs) % 2 == 8:\n        return xs[-8]\n    if len(xs) % 2 == 9:\n        return xs[-9]\n    if len(xs) % 2 == 10:\n        return xs[-10]\n    if len(xs) % 2 == 11:\n        return xs[-11]\n    if len(xs) % 2 == 12:\n        return xs[-12]\n    if len(xs) % 2 == 13:\n        return xs[-13]\n    if len(xs) % 2 == 14:\n        return xs[-14]\n    if", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"list xs must have even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"list xs must have at least 2 coefficients\")\n    if len(xs) > 3:\n        raise ValueError(\"list xs must have at most 3 coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"list xs must have even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"list xs must have at least 2 coefficients\")\n    if len(xs) > 3:\n        raise ValueError(\"list xs must have at most 3 coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"list xs must have even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"list xs must have at least 2 coefficients\")\n    if len(xs) > 3:\n        raise ValueError(\"list xs must have at most 3 coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"list xs must have even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"list xs must have at least 2 coefficients\")\n    if", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must be at least two\")\n    if len(xs) > 2:\n        raise ValueError(\"xs must be at most two\")\n    if len(xs) % 2 == 1:\n        return xs[0]\n    if len(xs) % 2 == 0:\n        return xs[1]\n    return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"list xs must have even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"list xs must have at least two coefficients\")\n    if len(xs) == 2:\n        return xs[0], xs[1]\n    if len(xs) == 3:\n        return poly(xs, x) - poly(xs, x - 1) - poly(xs, x - 2) - poly(xs, x - 3)\n    if len(xs) == 4:\n        return poly(xs, x) - poly(xs, x - 1) - poly(xs, x - 2) - poly(xs, x - 3) - poly(xs, x - 4)\n    if len(xs) == 5:\n        return poly(xs, x) - poly(xs, x - 1) - poly(xs, x - 2) - poly(xs, x - 3) - poly(xs, x - 4) - poly(xs, x - 5)\n    if len(xs) == 6:\n        return poly(xs, x) - poly(xs, x - 1) - poly(xs, x - 2) - poly(xs, x -", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs) == 10:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) > len(xs):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2 == 0:\n        return xs[0]\n    else:\n        return sum([poly(xs, x) for x in xs])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"list xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) > 2:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) > 2:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) > 2:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) > 2:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) > 2:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs):\n        raise ValueError(\"len(xs)!= len(xs)\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"len(xs)!= len(xs)\")\n    if len(xs) < 2:\n        raise ValueError(\"len(xs)!= len(xs)\")\n    if len(xs) > 2:\n        raise ValueError(\"len(xs)!= len(xs)\")\n    if len(xs) % 2 == 0:\n        return xs[0]\n    else:\n        return xs[1]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs list must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs list must be even\")\n    if len(xs) > 1:\n        raise ValueError(\"length of xs list must be even\")\n    if len(xs) == 1:\n        return xs[0]\n    else:\n        return sum([poly(xs, x) for x in xs])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= 2:\n        raise ValueError(\"find_zero takes only two coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero takes even number of coefficients\")\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[1] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[1] * x**2 + xs[1] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[1] * x**2 + xs[1] * x**3 + xs[1] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[1] * x**2 + xs[1] * x**3 + xs[1] * x**4 + xs[1] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[1] * x**2 + xs[1] * x**3 + xs[1] * x**4 + xs[1] * x**5 + xs[1]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs) == 10:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return 0\n    if len(xs) == 3:\n        return 0\n    if len(xs) == 4:\n        return 0\n    if len(xs) == 5:\n        return 0\n    if len(xs) == 6:\n        return 0\n    if len(xs) == 7:\n        return 0\n    if len(xs) == 8:\n        return 0\n    if len(xs) == 9:\n        return 0\n    if len(xs) == 10:\n        return 0\n    if len(xs) == 11:\n        return 0\n    if len(xs) == 12:\n        return 0\n    if len(xs) == 13:\n        return 0\n    if len(xs) == 14:\n        return 0\n    if len(xs) == 15:\n        return 0\n    if len(xs) == 16:\n        return 0\n    if len(xs) == 17:\n        return 0\n    if len(xs) == 18:\n        return 0\n    if len(xs) == 19:\n        return 0\n    if len(xs) == 20:\n        return 0\n    if len", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= 2:\n        raise ValueError(\"find_zero requires two coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero requires even number of coefficients\")\n    if len(xs) % 2!= 1:\n        raise ValueError(\"find_zero requires largest coefficient to be even\")\n    if len(xs) % 2!= 2:\n        raise ValueError(\"find_zero requires largest coefficient to be odd\")\n    if len(xs) % 2!= 3:\n        raise ValueError(\"find_zero requires largest coefficient to be even\")\n    if len(xs) % 2!= 4:\n        raise ValueError(\"find_zero requires largest coefficient to be odd\")\n    if len(xs) % 2!= 5:\n        raise ValueError(\"find_zero requires largest coefficient to be even\")\n    if len(xs) % 2!= 6:\n        raise ValueError(\"find_zero requires largest coefficient to be odd\")\n    if len(xs) % 2!= 7:\n        raise ValueError(\"find_zero requires largest coefficient to be even\")\n    if len(xs) % 2!= 8:\n        raise ValueError(\"find_zero requires largest coefficient to be odd\")\n    if len", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must be at least two coefficients\")\n    if len(xs) > 2:\n        raise ValueError(\"xs must be at most two coefficients\")\n    if len(xs) % 2 == 0:\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)]) / 2.0\n    else:\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)]) / 2.0 + sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)]) / 2.0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"list xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return poly(xs, x)\n    if len(xs) == 3:\n        return poly(xs, x) + poly(xs, x) * x + poly(xs, x) * x**2 + poly(xs, x) * x**3 +... + poly(xs, x) * x**n\n    if len(xs) == 4:\n        return poly(xs, x) + poly(xs, x) * x + poly(xs, x) * x**2 + poly(xs, x) * x**3 +... + poly(xs, x) * x**n\n    if len(xs) == 5:\n        return poly(xs, x) + poly(xs, x) * x + poly(xs, x) * x**2 + poly(xs, x) * x**3 +... + poly(xs, x) * x**n\n    if len(xs) == 6:\n        return poly(xs, x)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[-1]\n    if len(xs) == 3:\n        return xs[-2]\n    if len(xs) == 4:\n        return xs[-3]\n    if len(xs) == 5:\n        return xs[-4]\n    if len(xs) == 6:\n        return xs[-5]\n    if len(xs) == 7:\n        return xs[-6]\n    if len(xs) == 8:\n        return xs[-7]\n    if len(xs) == 9:\n        return xs[-8]\n    if len(xs) == 10:\n        return xs[-9]\n    if len(xs) == 11:\n        return xs[-10]\n    if len(xs) == 12:\n        return xs[-11]\n    if len(xs) == 13:\n        return xs[-12]\n    if len(xs) == 14:\n        return xs[-13]\n    if len(xs) == 15:\n        return xs[-14]\n    if len(xs) == 16:\n        return xs[-15]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"len(xs) must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) % 2 == 1:\n        return 0\n    if len(xs) % 2 == 2:\n        return 0\n    if len(xs) % 2 == 3:\n        return 0\n    if len(xs) % 2 == 4:\n        return 0\n    if len(xs) % 2 == 5:\n        return 0\n    if len(xs) % 2 == 6:\n        return 0\n    if len(xs) % 2 == 7:\n        return 0\n    if len(xs) % 2 == 8:\n        return 0\n    if len(xs) % 2 == 9:\n        return 0\n    if len(xs) % 2 == 10:\n        return 0\n    if len(xs) % 2 == 11:\n        return 0\n    if len(xs) % 2 == 12:\n        return 0\n    if len(xs) % 2 == 13:\n        return 0\n    if len(xs) % 2 == 14:\n        return 0\n    if len(xs) % 2 == 15:\n        return 0\n    if len(xs) % 2 == 16:\n        return 0\n    if len(xs) % 2 == 17:\n        return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"list xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return 0\n    if len(xs) == 3:\n        return 0\n    if len(xs) == 4:\n        return 0\n    if len(xs) == 5:\n        return 0\n    if len(xs) == 6:\n        return 0\n    if len(xs) == 7:\n        return 0\n    if len(xs) == 8:\n        return 0\n    if len(xs) == 9:\n        return 0\n    if len(xs) == 10:\n        return 0\n    if len(xs) == 11:\n        return 0\n    if len(xs) == 12:\n        return 0\n    if len(xs) == 13:\n        return 0\n    if len(xs) == 14:\n        return 0\n    if len(xs) == 15:\n        return 0\n    if len(xs) == 16:\n        return 0\n    if len(xs) == 17:\n        return 0\n    if len(xs) == 18:\n        return 0\n    if len(xs) == 19:\n        return 0\n    if len(xs) == 20:\n        return", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        return 0\n    else:\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)]) / len(xs)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs):\n        raise ValueError(\"len(xs) = len(xs)\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"len(xs) = len(xs)\")\n    if len(xs) < 2:\n        raise ValueError(\"len(xs) = len(xs)\")\n    if len(xs) > 2:\n        raise ValueError(\"len(xs) = len(xs)\")\n    if len(xs) % 2 == 0:\n        return xs[0]\n    else:\n        return xs[0] + xs[1] * xs[1:]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) > 2:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) > 2:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) > 2:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) > 2:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) > 2:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0.0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"list xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) % 2 == 1:\n        return 0\n    if len(xs) % 2 == 2:\n        return 0\n    if len(xs) % 2 == 3:\n        return 0\n    if len(xs) % 2 == 4:\n        return 0\n    if len(xs) % 2 == 5:\n        return 0\n    if len(xs) % 2 == 6:\n        return 0\n    if len(xs) % 2 == 7:\n        return 0\n    if len(xs) % 2 == 8:\n        return 0\n    if len(xs) % 2 == 9:\n        return 0\n    if len(xs) % 2 == 10:\n        return 0\n    if len(xs) % 2 == 11:\n        return 0\n    if len(xs) % 2 == 12:\n        return 0\n    if len(xs) % 2 == 13:\n        return 0\n    if len(xs) % 2 == 14:\n        return 0\n    if len(xs) % 2 == 15:\n        return 0\n    if len(xs) % 2 == 16:\n        return 0\n    if len(xs) % 2 == 17:\n        return 0\n    if", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) == 0:\n        return 0.0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return 0.5 * (xs[0] + xs[1])\n    if len(xs) == 3:\n        return 0.5 * (xs[0] + xs[1] + xs[2])\n    if len(xs) == 4:\n        return 0.5 * (xs[0] + xs[1] + xs[2] + xs[3])\n    if len(xs) == 5:\n        return 0.5 * (xs[0] + xs[1] + xs[2] + xs[3] + xs[4])\n    if len(xs) == 6:\n        return 0.5 * (xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5])\n    if len(xs) == 7:\n        return 0.5 * (xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6])\n    if len(xs) == 8:\n        return 0.5 * (xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7])\n    if len(xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) > 2:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2 == 1:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2 == 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2 == 1:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2 == 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2 == 1:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2 == 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2 == 1:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2 == 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2 == 1:\n        raise", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"list xs must have even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"list xs must have at least two coefficients\")\n    if len(xs) > 2:\n        raise ValueError(\"list xs must have at most two coefficients\")\n    if len(xs) % 2 == 1:\n        return xs[-1]\n    else:\n        return xs[-2]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least 2 coefficients\")\n    if len(xs) > 3:\n        raise ValueError(\"xs must have at most 3 coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least 2 coefficients\")\n    if len(xs) > 3:\n        raise ValueError(\"xs must have at most 3 coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least 2 coefficients\")\n    if len(xs) > 3:\n        raise ValueError(\"xs must have at most 3 coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least 2 coefficients\")\n    if len(xs) > 3:\n        raise ValueError(\"", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[-1]\n    if len(xs) == 3:\n        return xs[-2]\n    if len(xs) == 4:\n        return xs[-1]\n    if len(xs) == 5:\n        return xs[-1]\n    if len(xs) == 6:\n        return xs[-1]\n    if len(xs) == 7:\n        return xs[-1]\n    if len(xs) == 8:\n        return xs[-1]\n    if len(xs) == 9:\n        return xs[-1]\n    if len(xs) == 10:\n        return xs[-1]\n    if len(xs) == 11:\n        return xs[-1]\n    if len(xs) == 12:\n        return xs[-1]\n    if len(xs) == 13:\n        return xs[-1]\n    if len(xs) == 14:\n        return xs[-1]\n    if len(xs) == 15:\n        return xs[-1]\n    if len(xs) == 16:\n        return xs[-1]\n    if len(xs) == 17:\n        return xs[-1]\n    if", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= 2:\n        raise ValueError(\"find_zero takes only two coefficients\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"find_zero takes only even number of coefficients\")\n    if len(xs[0])!= len(xs[1]):\n        raise ValueError(\"find_zero takes only even number of coefficients\")\n    if len(xs[0])!= len(xs[1]):\n        raise ValueError(\"find_zero takes only even number of coefficients\")\n    if len(xs[0])!= len(xs[1]):\n        raise ValueError(\"find_zero takes only even number of coefficients\")\n    if len(xs[0])!= len(xs[1]):\n        raise ValueError(\"find_zero takes only even number of coefficients\")\n    if len(xs[0])!= len(xs[1]):\n        raise ValueError(\"find_zero takes only even number of coefficients\")\n    if len(xs[0])!= len(xs[1]):\n        raise ValueError(\"find_zero takes only even number of coefficients\")\n    if len(xs[0])!= len(xs[1]):\n        raise ValueError(\"find_zero takes only even number of coefficients\")\n    if len(", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"list xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) > 2:\n        raise ValueError(\"xs must have at least two coefficients\")\n    if len(xs) % 2 == 0:\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n    else:\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)]) / 2", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"list xs must have even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"list xs must have at least two coefficients\")\n    if len(xs) % 2 == 1:\n        return xs[0]\n    if len(xs) % 2 == 0:\n        return xs[1]\n    if len(xs) % 2 == 2:\n        return xs[0] + xs[1]\n    if len(xs) % 2 == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) % 2 == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) % 2 == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) % 2 == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) % 2 == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) % 2 == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= 2:\n        raise ValueError(\"find_zero expects list of even length\")\n\n    x = xs[0]\n    xs = xs[1:]\n    while x!= 0:\n        if x % 2 == 0:\n            return x\n        x = x / 2\n        xs = xs[1:]\n\n    return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) > 2:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2 == 0:\n        return xs[0]\n    else:\n        return xs[1]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"list xs must have even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"list xs must have at least 2 coefficients\")\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs) == 10:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[-1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[-1] * x + xs[-2] * xs[-1] * x\n    if len(xs) == 4:\n        return xs[0] + xs[-1] * x + xs[-2] * xs[-1] * x + xs[-3] * xs[-2] * xs[-1] * x\n    if len(xs) == 5:\n        return xs[0] + xs[-1] * x + xs[-2] * xs[-1] * x + xs[-3] * xs[-2] * xs[-1] * x + xs[-4] * xs[-3] * xs[-2] * xs[-1] * x\n    if len(xs) == 6:\n        return xs[0] + xs[-1] * x + xs[-2] * xs[-1] * x + xs[-3] * xs[-2] * xs[-1] * x + xs[-4] * xs[-3] * xs[-2] * xs[", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least 2 elements\")\n    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of elements\")\n    if len(xs) % 2 == 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    if len(xs) % 2 == 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    if len(xs) % 2 == 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    if len(xs) % 2 == 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    if len(xs) %", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs) == 10:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least 2 elements\")\n    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of elements\")\n    if len(xs) % 2 == 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    if len(xs) % 2 == 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    if len(xs) % 2 == 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    if len(xs) % 2 == 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    if len(xs) %", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"list xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"List xs must have even number of coefficients\")\n    if len(xs) > 1:\n        if len(xs) % 2 == 0:\n            raise ValueError(\"List xs must have largest non zero coefficient\")\n        if len(xs) % 2 == 1:\n            raise ValueError(\"List xs must have largest non zero coefficient\")\n    if len(xs) % 2 == 1:\n        if len(xs) % 2 == 0:\n            raise ValueError(\"List xs must have largest non zero coefficient\")\n        if len(xs) % 2 == 1:\n            raise ValueError(\"List xs must have largest non zero coefficient\")\n    if len(xs) % 2 == 0:\n        if len(xs) % 2 == 1:\n            raise ValueError(\"List xs must have largest non zero coefficient\")\n        if len(xs) % 2 == 0:\n            raise ValueError(\"List xs must have largest non zero coefficient\")\n    if len(xs) % 2 == 1:\n        if len(xs) % 2 == 0:\n            raise ValueError(\"List xs must have largest non zero coefficient\")\n        if len(xs) % 2 == 1:\n            raise ValueError(\"List xs must have largest non zero coefficient\")", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) > 1:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) > len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) < len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) > len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) < len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) > len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) < len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) > len(xs[0]):\n        raise ValueError(\"", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"list xs must have even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"list xs must have at least 2 coefficients\")\n    if len(xs) > 2:\n        raise ValueError(\"list xs must have at most 2 coefficients\")\n    if len(xs) % 2 == 1:\n        return xs[0]\n    else:\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least 2 coefficients\")\n    if len(xs) > 2:\n        raise ValueError(\"xs must have at most 2 coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least 2 coefficients\")\n    if len(xs) > 2:\n        raise ValueError(\"xs must have at most 2 coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least 2 coefficients\")\n    if len(xs) > 2:\n        raise ValueError(\"xs must have at most 2 coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least 2 coefficients\")\n    if len(xs) > 2:\n        raise ValueError(\"", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) > 2:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) > 2:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) > 2:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) > 2:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) > 2:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return 0\n    if len(xs) == 3:\n        return 0\n    if len(xs) == 4:\n        return 0\n    if len(xs) == 5:\n        return 0\n    if len(xs) == 6:\n        return 0\n    if len(xs) == 7:\n        return 0\n    if len(xs) == 8:\n        return 0\n    if len(xs) == 9:\n        return 0\n    if len(xs) == 10:\n        return 0\n    if len(xs) == 11:\n        return 0\n    if len(xs) == 12:\n        return 0\n    if len(xs) == 13:\n        return 0\n    if len(xs) == 14:\n        return 0\n    if len(xs) == 15:\n        return 0\n    if len(xs) == 16:\n        return 0\n    if len(xs) == 17:\n        return 0\n    if len(xs) == 18:\n        return 0\n    if len(xs) == 19:\n        return 0\n    if len(xs) == 20:\n        return 0\n    if len", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"length of xs must be greater than 0\")\n    if len(xs) % 2 == 1:\n        return 0.0\n    if len(xs) % 2 == 0:\n        return 1.0\n    if len(xs) % 2 == 2:\n        return 0.5\n    if len(xs) % 2 == 3:\n        return 0.25\n    if len(xs) % 2 == 4:\n        return 0.125\n    if len(xs) % 2 == 5:\n        return 0.0625\n    if len(xs) % 2 == 6:\n        return 0.03125\n    if len(xs) % 2 == 7:\n        return 0.0125\n    if len(xs) % 2 == 8:\n        return 0.0075\n    if len(xs) % 2 == 9:\n        return 0.0025\n    if len(xs) % 2 == 10:\n        return 0.00125\n    if len(xs) % 2 == 11:\n        return 0.0003125\n    if len(xs) % 2 == 12:\n        return 0.00025\n    if len(xs) % 2", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) % 2 == 1:\n        return 0\n    if len(xs) % 2 == 3:\n        return 0\n    if len(xs) % 2 == 5:\n        return 0\n    if len(xs) % 2 == 7:\n        return 0\n    if len(xs) % 2 == 9:\n        return 0\n    if len(xs) % 2 == 11:\n        return 0\n    if len(xs) % 2 == 13:\n        return 0\n    if len(xs) % 2 == 15:\n        return 0\n    if len(xs) % 2 == 17:\n        return 0\n    if len(xs) % 2 == 19:\n        return 0\n    if len(xs) % 2 == 21:\n        return 0\n    if len(xs) % 2 == 23:\n        return 0\n    if len(xs) % 2 == 25:\n        return 0\n    if len(xs) % 2 == 27:\n        return 0\n    if len(xs) % 2 == 29:\n        return 0\n    if len(xs) % 2 == 31:\n        return 0\n    if len(xs) % 2 == 33:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least 2 coefficients\")\n    if len(xs) % 2 == 1:\n        return xs[-1]\n    else:\n        return xs[-2]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs) == 10:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= 2:\n        raise ValueError(\"find_zero takes list of even number of coefficients and largest non zero coefficient\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero takes list of even number of coefficients and largest non zero coefficient\")\n    if len(xs) % 2 == 1:\n        raise ValueError(\"find_zero takes list of even number of coefficients and largest non zero coefficient\")\n    if len(xs) % 2 == 3:\n        raise ValueError(\"find_zero takes list of even number of coefficients and largest non zero coefficient\")\n    if len(xs) % 2 == 4:\n        raise ValueError(\"find_zero takes list of even number of coefficients and largest non zero coefficient\")\n    if len(xs) % 2 == 5:\n        raise ValueError(\"find_zero takes list of even number of coefficients and largest non zero coefficient\")\n    if len(xs) % 2 == 6:\n        raise ValueError(\"find_zero takes list of even number of coefficients and largest non zero coefficient\")\n    if len(xs) % 2 == 7:\n        raise ValueError(\"find_zero takes list of even number of coefficients and largest non zero coefficient\")\n    if len(xs) % 2 ==", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must be at least 2 coefficients\")\n    if len(xs) > 2:\n        raise ValueError(\"xs must be at most 2 coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must be at least 2 coefficients\")\n    if len(xs) > 2:\n        raise ValueError(\"xs must be at most 2 coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must be at least 2 coefficients\")\n    if len(xs) > 2:\n        raise ValueError(\"xs must be at most 2 coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must be at least 2 coefficients\")\n    if len(xs) > 2:\n        raise ValueError(\"", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must be at least 2\")\n    if len(xs) > 2:\n        raise ValueError(\"xs must be at most 2\")\n    if len(xs) % 2 == 1:\n        return xs[0]\n    else:\n        return sum([poly(xs, x) for x in xs])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= 2:\n        raise ValueError(\"find_zero: xs must be list of length 2\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero: xs must be list of even length\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero: xs must have largest non zero coefficient\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero: xs must have even number of coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero: xs must have even number of coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero: xs must have even number of coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero: xs must have even number of coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero: xs must have even number of coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero: xs must have even number of coefficients\")\n    if len(xs) % 2", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) > 2:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) > 2:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) > 2:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) > 2:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) > 2:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"len(xs) must be even\")\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs[0]):\n        raise ValueError(\"len(xs)!= len(xs[0])\")\n    if len(xs)!= len(xs[0]) % 2:\n        raise ValueError(\"len(xs)!= len(xs[0])\")\n    if len(xs)!= len(xs[0]) % 2:\n        raise ValueError(\"len(xs)!= len(xs[0])\")\n    if len(xs)!= len(xs[0]) % 2:\n        raise ValueError(\"len(xs)!= len(xs[0])\")\n    if len(xs)!= len(xs[0]) % 2:\n        raise ValueError(\"len(xs)!= len(xs[0])\")\n    if len(xs)!= len(xs[0]) % 2:\n        raise ValueError(\"len(xs)!= len(xs[0])\")\n    if len(xs)!= len(xs[0]) % 2:\n        raise ValueError(\"len(xs)!= len(xs[0])\")\n    if len(xs)!= len(xs[0]) % 2:\n        raise ValueError(\"len(xs)!= len(xs[0])\")\n    if len(xs)!= len(xs[0]) % 2:\n        raise ValueError", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"List xs must have even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"List xs must have at least 2 coefficients\")\n    if len(xs) > 2:\n        raise ValueError(\"List xs must have at most 2 coefficients\")\n    if len(xs) % 2 == 0:\n        return xs[0]\n    else:\n        return xs[-1]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= 2:\n        raise ValueError(\"find_zero takes list of even number of coefficients and largest non zero coefficient\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero takes list of even number of coefficients and largest non zero coefficient\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero takes list of even number of coefficients and largest non zero coefficient\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero takes list of even number of coefficients and largest non zero coefficient\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero takes list of even number of coefficients and largest non zero coefficient\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero takes list of even number of coefficients and largest non zero coefficient\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero takes list of even number of coefficients and largest non zero coefficient\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero takes list of even number of coefficients and largest non zero coefficient\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero takes list of even number of coefficients and", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be equal to length of xs[0]\")\n    if len(xs)!= len(xs[1]):\n        raise ValueError(\"length of xs must be equal to length of xs[1]\")\n    if len(xs)!= len(xs[2]):\n        raise ValueError(\"length of xs must be equal to length of xs[2]\")\n    if len(xs)!= len(xs[3]):\n        raise ValueError(\"length of xs must be equal to length of xs[3]\")\n    if len(xs)!= len(xs[4]):\n        raise ValueError(\"length of xs must be equal to length of xs[4]\")\n    if len(xs)!= len(xs[5]):\n        raise ValueError(\"length of xs must be equal to length of xs[5]\")\n    if len(xs)!= len(xs[6]):\n        raise ValueError(\"length of xs must be equal to length of xs[6]\")\n    if len(xs)!= len(xs[7]):\n        raise ValueError(\"length of xs must be equal to length of xs[7]\")\n    if len(xs)!", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2 == 1:\n        return xs[-1]\n    else:\n        return xs[-1] + xs[-2] * xs[-1] + xs[-2] * xs[-2] +.... xs[-1] * xs[-1]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= 2:\n        raise ValueError(\"find_zero takes list of even number of coefficients and largest non zero coefficient\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero takes list of even number of coefficients and largest non zero coefficient\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero takes list of even number of coefficients and largest non zero coefficient\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero takes list of even number of coefficients and largest non zero coefficient\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero takes list of even number of coefficients and largest non zero coefficient\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero takes list of even number of coefficients and largest non zero coefficient\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero takes list of even number of coefficients and largest non zero coefficient\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero takes list of even number of coefficients and largest non zero coefficient\")\n    if len(xs)!= 2:\n        raise ValueError(\"find_zero takes list of even number of coefficients and", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"len(xs) must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"len(xs) must be greater than 0\")\n    if len(xs) > 2:\n        raise ValueError(\"len(xs) must be less than 2\")\n    if len(xs) % 2 == 0:\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n    else:\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)]) / 2", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] +", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"List xs must have even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"List xs must have at least 2 coefficients\")\n    if len(xs) == 2:\n        return xs[0], xs[1]\n    if len(xs) == 3:\n        return find_zero(xs)\n    if len(xs) == 4:\n        return find_zero(xs)\n    if len(xs) == 5:\n        return find_zero(xs)\n    if len(xs) == 6:\n        return find_zero(xs)\n    if len(xs) == 7:\n        return find_zero(xs)\n    if len(xs) == 8:\n        return find_zero(xs)\n    if len(xs) == 9:\n        return find_zero(xs)\n    if len(xs) == 10:\n        return find_zero(xs)\n    if len(xs) == 11:\n        return find_zero(xs)\n    if len(xs) == 12:\n        return find_zero(xs)\n    if len(xs) == 13:\n        return find_zero(xs)\n    if len(xs) == 14:\n        return find_zero(xs)\n    if len(xs) == 15:\n        return find_zero(", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"list xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"list xs must have at least two elements\")\n    if len(xs) % 2 == 1:\n        return xs[0]\n    else:\n        return sum([poly(xs, x) for x in xs])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0.0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs)", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return 0\n    if len(xs) == 3:\n        return 0\n    if len(xs) == 4:\n        return 0\n    if len(xs) == 5:\n        return 0\n    if len(xs) == 6:\n        return 0\n    if len(xs) == 7:\n        return 0\n    if len(xs) == 8:\n        return 0\n    if len(xs) == 9:\n        return 0\n    if len(xs) == 10:\n        return 0\n    if len(xs) == 11:\n        return 0\n    if len(xs) == 12:\n        return 0\n    if len(xs) == 13:\n        return 0\n    if len(xs) == 14:\n        return 0\n    if len(xs) == 15:\n        return 0\n    if len(xs) == 16:\n        return 0\n    if len(xs) == 17:\n        return 0\n    if len(xs) == 18:\n        return 0\n    if len(xs) == 19:\n        return 0\n    if len(xs) == 20:\n        return 0", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[-1]\n    if len(xs) == 3:\n        return xs[0] + xs[-1] + xs[-2]\n    if len(xs) == 4:\n        return xs[0] + xs[-1] + xs[-2] + xs[-3]\n    if len(xs) == 5:\n        return xs[0] + xs[-1] + xs[-2] + xs[-3] + xs[-4]\n    if len(xs) == 6:\n        return xs[0] + xs[-1] + xs[-2] + xs[-3] + xs[-4] + xs[-5]\n    if len(xs) == 7:\n        return xs[0] + xs[-1] + xs[-2] + xs[-3] + xs[-4] + xs[-5] + xs[-6]\n    if len(xs) == 8:\n        return xs[0] + xs[-1] + xs[-2] + xs[-3] + xs[-4] + xs[-5] + xs[-6] + xs[-7]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= 2:\n        raise ValueError(\"find_zero: xs must be a list of even number of coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero: xs must have even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"find_zero: xs must have at least 2 coefficients\")\n    if len(xs) > 2:\n        raise ValueError(\"find_zero: xs must have at most 2 coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero: xs must have even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"find_zero: xs must have at least 2 coefficients\")\n    if len(xs) > 2:\n        raise ValueError(\"find_zero: xs must have at most 2 coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero: xs must have even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"find_zero: xs must have at least 2 coefficients\")\n    if len(xs) > 2:\n        raise ValueError(\"find_zero: xs must", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= 2:\n        raise ValueError(\"find_zero requires two coefficients\")\n\n    x = xs[0]\n    y = xs[1]\n    if x == 0:\n        return y\n    elif y == 0:\n        return x\n    else:\n        return find_zero([x, y])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs) == 10:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"length of xs must be greater than 0\")\n    if len(xs) == 2:\n        return xs[0] + xs[1] * x\n    if len(xs) == 3:\n        return xs[0] + xs[1] * x + xs[2] * x**2\n    if len(xs) == 4:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3\n    if len(xs) == 5:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4\n    if len(xs) == 6:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5\n    if len(xs) == 7:\n        return xs[0] + xs[1] * x + xs[2] * x**2 + xs[3] * x**3 + xs[4] * x**4 + xs[5] * x**5 + xs[6] * x**6\n    if len(xs) == 8:\n        return", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs[0]):\n        raise ValueError(\"xs must have same length\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even length\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least 2 coefficients\")\n    if len(xs) > 2:\n        raise ValueError(\"xs must have at most 2 coefficients\")\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[-1]\n    if len(xs) == 3:\n        return xs[-2]\n    if len(xs) == 4:\n        return xs[-3]\n    if len(xs) == 5:\n        return xs[-4]\n    if len(xs) == 6:\n        return xs[-5]\n    if len(xs) == 7:\n        return xs[-6]\n    if len(xs) == 8:\n        return xs[-7]\n    if len(xs) == 9:\n        return xs[-8]\n    if len(xs) == 10:\n        return xs[-9]\n    if len(xs) == 11:\n        return xs[-10]\n    if len(xs) == 12:\n        return xs[-11]\n    if len(xs) == 13:\n        return xs[-12]\n    if len(xs) == 14:\n        return xs[-13]\n    if len(xs) == 15:\n        return xs[-14]\n    if len(xs) == 16:\n        return xs[-15]\n    if", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs[0]):\n        raise ValueError('length of xs must be even')\n    if len(xs) % 2!= 0:\n        raise ValueError('length of xs must be even')\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[-1]\n    if len(xs) == 3:\n        return xs[-2]\n    if len(xs) == 4:\n        return xs[-1]\n    if len(xs) == 5:\n        return xs[-2]\n    if len(xs) == 6:\n        return xs[-1]\n    if len(xs) == 7:\n        return xs[-2]\n    if len(xs) == 8:\n        return xs[-1]\n    if len(xs) == 9:\n        return xs[-1]\n    if len(xs) == 10:\n        return xs[-1]\n    if len(xs) == 11:\n        return xs[-1]\n    if len(xs) == 12:\n        return xs[-1]\n    if len(xs) == 13:\n        return xs[-1]\n    if len(xs) == 14:\n        return xs[-1]\n    if len(xs) == 15:\n        return xs[-1]\n    if len(xs) == 16:\n        return xs[-1]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must be at least 2\")\n    if len(xs) > 2:\n        raise ValueError(\"xs must be at most 2\")\n    if len(xs) == 2:\n        return xs[0], xs[1]\n    if len(xs) == 3:\n        return find_zero([poly(xs, x) for x in range(2, len(xs) + 1)])\n    if len(xs) == 4:\n        return find_zero([poly(xs, x) for x in range(2, len(xs) + 1, 2)])\n    if len(xs) == 5:\n        return find_zero([poly(xs, x) for x in range(2, len(xs) + 1, 2, 2)])\n    if len(xs) == 6:\n        return find_zero([poly(xs, x) for x in range(2, len(xs) + 1, 2, 2, 2)])\n    if len(xs) == 7:\n        return find_zero([poly(xs, x) for x in range(", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least 2 coefficients\")\n    if len(xs) > 5:\n        raise ValueError(\"xs must have at most 5 coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least 2 coefficients\")\n    if len(xs) > 5:\n        raise ValueError(\"xs must have at most 5 coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least 2 coefficients\")\n    if len(xs) > 5:\n        raise ValueError(\"xs must have at most 5 coefficients\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least 2 coefficients\")\n    if len(xs) > 5:\n        raise ValueError(\"", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"List xs must have even number of coefficients\")\n    if len(xs) < 2:\n        raise ValueError(\"List xs must have at least 2 coefficients\")\n    if len(xs) % 2 == 1:\n        return xs[0]\n    else:\n        return sum([poly(xs, x) for x in range(2, len(xs), 2)])", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs):\n        raise ValueError(\"len(xs)!= len(xs)\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"len(xs)!= len(xs)\")\n    if len(xs) % 4!= 0:\n        raise ValueError(\"len(xs)!= len(xs)\")\n    if len(xs) % 8!= 0:\n        raise ValueError(\"len(xs)!= len(xs)\")\n    if len(xs) % 16!= 0:\n        raise ValueError(\"len(xs)!= len(xs)\")\n    if len(xs) % 32!= 0:\n        raise ValueError(\"len(xs)!= len(xs)\")\n    if len(xs) % 64!= 0:\n        raise ValueError(\"len(xs)!= len(xs)\")\n    if len(xs) % 128!= 0:\n        raise ValueError(\"len(xs)!= len(xs)\")\n    if len(xs) % 256!= 0:\n        raise ValueError(\"len(xs)!= len(xs)\")\n    if len(xs) % 512!= 0:\n        raise ValueError(\"len(xs)!=", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"length of xs must be even\")\n    if len(xs)!", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"xs must be at least two\")\n    if len(xs) > 2:\n        raise ValueError(\"xs must be at most two\")\n    if len(xs) % 2 == 1:\n        return 0\n    if len(xs) % 2 == 0:\n        return 1\n    if len(xs) % 2 == 2:\n        return 1\n    if len(xs) % 2 == 3:\n        return 1\n    if len(xs) % 2 == 4:\n        return 1\n    if len(xs) % 2 == 5:\n        return 1\n    if len(xs) % 2 == 6:\n        return 1\n    if len(xs) % 2 == 7:\n        return 1\n    if len(xs) % 2 == 8:\n        return 1\n    if len(xs) % 2 == 9:\n        return 1\n    if len(xs) % 2 == 10:\n        return 1\n    if len(xs) % 2 == 11:\n        return 1\n    if len(xs) % 2 == 12:\n        return 1\n    if len(xs) % 2 == 13:\n        return 1\n    if len(xs) % 2 == 14:\n        return 1", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs) == 10:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return 0\n    if len(xs) == 3:\n        return 0\n    if len(xs) == 4:\n        return 0\n    if len(xs) == 5:\n        return 0\n    if len(xs) == 6:\n        return 0\n    if len(xs) == 7:\n        return 0\n    if len(xs) == 8:\n        return 0\n    if len(xs) == 9:\n        return 0\n    if len(xs) == 10:\n        return 0\n    if len(xs) == 11:\n        return 0\n    if len(xs) == 12:\n        return 0\n    if len(xs) == 13:\n        return 0\n    if len(xs) == 14:\n        return 0\n    if len(xs) == 15:\n        return 0\n    if len(xs) == 16:\n        return 0\n    if len(xs) == 17:\n        return 0\n    if len(xs) == 18:\n        return 0\n    if len(xs) == 19:\n        return 0\n    if len(xs) == 20:\n        return 0\n    if len", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"len(xs) must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) % 2 == 1:\n        return xs[-1]\n    if len(xs) % 2 == 2:\n        return xs[-2]\n    if len(xs) % 2 == 3:\n        return xs[-3]\n    if len(xs) % 2 == 4:\n        return xs[-4]\n    if len(xs) % 2 == 5:\n        return xs[-5]\n    if len(xs) % 2 == 6:\n        return xs[-6]\n    if len(xs) % 2 == 7:\n        return xs[-7]\n    if len(xs) % 2 == 8:\n        return xs[-8]\n    if len(xs) % 2 == 9:\n        return xs[-9]\n    if len(xs) % 2 == 10:\n        return xs[-10]\n    if len(xs) % 2 == 11:\n        return xs[-11]\n    if len(xs) % 2 == 12:\n        return xs[-12]\n    if len(xs) % 2 == 13:\n        return xs[-13]\n    if len(xs) % 2 == 14:\n        return xs[-14", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"length of xs must be greater than 2\")\n    if len(xs) > 2:\n        raise ValueError(\"length of xs must be less than 2\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"length of xs must be greater than 2\")\n    if len(xs) > 2:\n        raise ValueError(\"length of xs must be less than 2\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"length of xs must be greater than 2\")\n    if len(xs) > 2:\n        raise ValueError(\"length of xs must be less than 2\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) < 2:\n        raise ValueError(\"length of xs must be greater than 2\")\n    if len(xs) > 2:\n        raise ValueError(\"length of xs must", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even number of coefficients\")\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[-1]\n    if len(xs) == 3:\n        return xs[-2]\n    if len(xs) == 4:\n        return xs[-3]\n    if len(xs) == 5:\n        return xs[-4]\n    if len(xs) == 6:\n        return xs[-5]\n    if len(xs) == 7:\n        return xs[-6]\n    if len(xs) == 8:\n        return xs[-7]\n    if len(xs) == 9:\n        return xs[-8]\n    if len(xs) == 10:\n        return xs[-9]\n    if len(xs) == 11:\n        return xs[-10]\n    if len(xs) == 12:\n        return xs[-11]\n    if len(xs) == 13:\n        return xs[-12]\n    if len(xs) == 14:\n        return xs[-13]\n    if len(xs) == 15:\n        return xs[-14]\n    if len(xs) == 16:\n        return xs[-15]", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be even\")\n    if len(xs) == 0:\n        return 0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len(xs) == 10:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs)!= 2:\n        raise ValueError(\"find_zero: xs must be list of length 2\")\n    if len(xs)!= len(xs[0]):\n        raise ValueError(\"find_zero: xs must be list of length len(xs[0])\")\n    if len(xs[0])!= len(xs[1]):\n        raise ValueError(\"find_zero: xs must be list of length len(xs[1])\")\n    if len(xs[0])!= len(xs[1]):\n        raise ValueError(\"find_zero: xs must be list of length len(xs[1])\")\n    if len(xs[0])!= len(xs[1]):\n        raise ValueError(\"find_zero: xs must be list of length len(xs[1])\")\n    if len(xs[0])!= len(xs[1]):\n        raise ValueError(\"find_zero: xs must be list of length len(xs[1])\")\n    if len(xs[0])!= len(xs[1]):\n        raise ValueError(\"find_zero: xs must be list of length len(xs[1])\")\n    if len(xs[0])!= len(xs[1]):\n        raise ValueError(\"find_zero:", "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"    if len(xs) % 2!= 0:\n        raise ValueError(\"length of xs must be even\")\n    if len(xs) == 0:\n        return 0.0\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return xs[0] + xs[1]\n    if len(xs) == 3:\n        return xs[0] + xs[1] + xs[2]\n    if len(xs) == 4:\n        return xs[0] + xs[1] + xs[2] + xs[3]\n    if len(xs) == 5:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4]\n    if len(xs) == 6:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5]\n    if len(xs) == 7:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6]\n    if len(xs) == 8:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7]\n    if len(xs) == 9:\n        return xs[0] + xs[1] + xs[2] + xs[3] + xs[4] + xs[5] + xs[6] + xs[7] + xs[8]\n    if len("]]