[["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    else:\n        return sorted(nums, key=lambda x: x.digits + x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    return sorted(nums, key=lambda x: x.sum(0), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [nums[0], ]\n    return [nums[-1], ] + [nums[int(nums[0])], ] + [nums[int(nums[0]) + 1]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.digits + x.sum(), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return sum(x) // 10\n    return [_sort(x) for x in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: x.digits + x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.digits + x.sum())\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        their sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum(0), reverse=True)\n\n    return sort_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    if len(nums) == 1:\n        return [nums[0], ]\n    else:\n        return [nums[-1], ] + [nums[int(nums[0])], ] + [nums[int(nums[0]) + 1], ] + [nums[int(nums[0]) + 2], ] + [nums[int(nums[0]) + 3], ] + [nums[int(nums[0]) + 4], ] + [nums[int(nums[0]) + 5], ] + [nums[int(nums[0]) + 6], ] + [nums[int(nums[0]) + 7], ] + [nums[int(nums[0]) + 8], ] + [nums[int(nums[0]) + 9], ] + [nums[int(nums[0]) + 10], ] + [nums[int(nums[0]) + 11], ] + [nums[int(nums[0]) + 12], ] + [nums[int(nums[0]) + 13], ] + [nums[int(nums[0]) + 14], ] + [nums[int(nums[0]) + 15], ] + [nums[int(nums[0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        their sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.digits_sum())\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(a, b):\n        return cmp(sum(a), sum(b))\n    return cmp", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return nums\n    nums = [nums[i] for i in range(len(nums))]\n    nums.sort(key=lambda x: x.digits)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        their sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort_by_sum(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        their sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort_by_sum", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        their sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [nums[0], ]\n    else:\n        return [nums[-1], ] + [nums[i] for i in range(len(nums) - 1)]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.digits + x.sum(), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(a, b):\n        return cmp(sum(a), sum(b))\n    return cmp", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.digits + x.sum(), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to their sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [nums[0], ]\n    else:\n        return [nums[0], nums[1]] + [nums[2]] + [nums[3]] + [nums[4]] + [nums[5]] + [nums[6]] + [nums[7]] + [nums[8]] + [nums[9]] + [nums[10]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    return sorted(nums, key=lambda x: x.digits)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return sum(x) + 1\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort_by_sum(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)\n\n    return sort_by_sum", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(a, b):\n        return cmp(sum(a), sum(b))\n\n    return sorted(nums, cmp=cmp)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.digits, reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return [num for num in nums if num % 10 == 0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [nums[0], ]\n    return [nums[-1], ] + [nums[int(nums[0])], ] + [nums[int(nums[0]) + 1], ] + [nums[int(nums[0]) + 2], ] + [nums[int(nums[0]) + 3], ] + [nums[int(nums[0]) + 4], ] + [nums[int(nums[0]) + 5], ] + [nums[int(nums[0]) + 6], ] + [nums[int(nums[0]) + 7], ] + [nums[int(nums[0]) + 8], ] + [nums[int(nums[0]) + 9], ] + [nums[int(nums[0]) + 10], ] + [nums[int(nums[0]) + 11], ] + [nums[int(nums[0]) + 12], ] + [nums[int(nums[0]) + 13], ] + [nums[int(nums[0]) + 14], ] + [nums[int(nums[0]) + 15], ] + [nums[int(", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: x.digits + x.index, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return sum(x) // 10\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        their sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.digits + x.sum(), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        their sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [nums[0], ]\n        if len(nums) == 2:\n            return [nums[0], nums[1], ]\n        if len(nums) == 3:\n            return [nums[0], nums[1], nums[2], ]\n        if len(nums) == 4:\n            return [nums[0], nums[1], nums[2], nums[3], ]\n        if len(nums) == 5:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], ]\n        if len(nums) == 6:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], ]\n        if len(nums) == 7:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], ]\n        if len(nums) == 8:\n            return [nums[0], nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        if len(nums) == 0:\n            return []\n        else:\n            return sorted(nums, key=lambda x: x.sum(0))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        their sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [nums[0], ]\n        return [nums[-1], ] + [nums[i] for i in range(1, len(nums))]\n\n    return [nums[-1] + nums[i] for i in range(1, len(nums))]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [nums[0], ]\n        if len(nums) == 2:\n            return [nums[0], nums[1], ]\n        if len(nums) == 3:\n            return [nums[0], nums[1], nums[2], ]\n        if len(nums) == 4:\n            return [nums[0], nums[1], nums[2], nums[3], ]\n        if len(nums) == 5:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], ]\n        if len(nums) == 6:\n            return [nums[0], nums[1], nums[2], nums[3], num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(a, b):\n        return cmp(a, b) * (a < b) - cmp(b, a)\n\n    return sorted(nums, cmp=cmp)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        their sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        their sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.digits, reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        their sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        their sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.digits + x.sum(), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [nums[0], ]\n    return [nums[-1], ] + [nums[i] for i in range(len(nums) - 1)]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        their sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: x.digits + x.sum(), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        their sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.digits + x.sum(), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return [num for num in nums if num > 0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return nums\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if len(nums) == 3:\n        return nums[0] + nums[1] + nums[2]\n    if len(nums) == 4:\n        return nums[0] + nums[1] + nums[2] + nums[3]\n    if len(nums) == 5:\n        return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n    if len(nums) == 6:\n        return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n    if len(nums) == 7:\n        return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6]\n    if len(nums) == 8:\n        return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6] + nums[7]\n    if len(nums) == 9:\n        return nums[0] + nums[1] + nums[2] + nums[3] + num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        their sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        their sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum(0), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.digits + x.count('0'), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [nums[0], ]\n    else:\n        return [nums[-1], ] + [nums[i] for i in range(len(nums))]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return nums\n    else:\n        return sorted(nums, key=lambda x: x.sum(0), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        their sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.digits + x.sum(), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: x.digits, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort_by_sum(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        their sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort_by_sum", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(a, b):\n        return cmp(sum(x) for x in a) - cmp(sum(x) for x in b)\n    return cmp", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: int(x) + x.digits, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.digits, reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    return [nums[i] for i in range(len(nums)) if nums[i] > 0 and nums[i] < 10]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        their sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum(0), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(a, b):\n        return cmp(a.digit, b.digit)\n\n    return cmp", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [nums[0], ]\n    else:\n        return [nums[-1], ] + [nums[-2], ] + [nums[-3], ] + [nums[-4], ] + [nums[-5], ] + [nums[-6], ] + [nums[-7], ] + [nums[-8], ] + [nums[-9], ] + [nums[-10], ] + [nums[-11], ] + [nums[-12], ] + [nums[-13], ] + [nums[-14], ] + [nums[-15], ] + [nums[-16], ] + [nums[-17], ] + [nums[-18], ] + [nums[-19], ] + [nums[-20], ] + [nums[-21], ] + [nums[-22], ] + [nums[-23], ] + [nums[-24], ] + [nums[-25], ] + [nums[-26], ] + [nums[-27], ] + [nums[-28], ] + [num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [nums[0], ]\n    return [nums[-1] + nums[i] for i in range(len(nums))]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: x.digits + x.index, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: x.digits + x.sum())", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(a, b):\n        return cmp(sum(x) for x in a) - cmp(sum(x) for x in b)\n\n    return sorted(nums, cmp=cmp)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.digits, reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return sum(x) // 10\n    return [_sort(x) for x in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(a, b):\n        return cmp(sum(a), sum(b))\n\n    return sorted(nums, cmp=cmp)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(a, b):\n        return cmp(sum(a), sum(b))\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        their sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: sum(x), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [nums[0], ]\n    else:\n        return [nums[0], nums[1]] + [nums[2]] + [nums[3]] + [nums[4]] + [nums[5]] + [nums[6]] + [nums[7]] + [nums[8]] + [nums[9]] + [nums[10]] + [nums[11]] + [nums[12]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(num) + 1)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(a, b):\n        return cmp(a, b) * (a > b) - cmp(a, b) * (a < b)\n    return cmp", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return sum(x) // 10\n    return [_sort(x) for x in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(a, b):\n        return cmp(sum(a), sum(b))\n    return cmp", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(num) + 1)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [nums[0], ]\n        if len(nums) == 2:\n            return [nums[0], nums[1], ]\n        if len(nums) == 3:\n            return [nums[0], nums[1], nums[2], ]\n        if len(nums) == 4:\n            return [nums[0], nums[1], nums[2], nums[3], ]\n        if len(nums) == 5:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], ]\n        if len(nums) == 6:\n            return [nums[0], nums[1], nums[2], nums[3], num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    else:\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        their sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.digits, reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return [nums[-1] + nums[-2] for nums in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: x.digits + x.sum(), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(a, b):\n        return cmp(sum(a), sum(b))\n\n    return cmp", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [nums[0], nums[0]]\n    return [nums[-1], nums[-1]] + [nums[0], nums[-1]] + \\\n            [nums[-1], nums[-1]] + [nums[-1]] + \\\n            [nums[-1]] + [nums[-1]] + [nums[-1]] + \\\n            [nums[-1]] + [nums[-1]] + [nums[-1]] + \\\n            [nums[-1]] + [nums[-1]] + [nums[-1]] + \\\n            [nums[-1]] + [nums[-1]] + [nums[-1]] + \\\n            [nums[-1]] + [nums[-1]] + [nums[-1]] + \\\n            [nums[-1]] + [nums[-1]] + [nums[-1]] + \\\n            [nums[-1]] + [nums[-1]] + [nums[-1]] + \\\n            [nums[-1]] + [nums[-1]] + [nums[-1]] + \\\n            [nums[-1]] + [nums[-1]] + [nums[-1]] + \\\n            [nums[-1]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [nums[0], ]\n    if len(nums) == 2:\n        return [nums[0], nums[1], ]\n    if len(nums) == 3:\n        return [nums[0], nums[1], nums[2], ]\n    if len(nums) == 4:\n        return [nums[0], nums[1], nums[2], nums[3], ]\n    if len(nums) == 5:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], ]\n    if len(nums) == 6:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], ]\n    if len(nums) == 7:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], ]\n    if len(nums) == 8:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], ]\n    if len(", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        their sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.digits + x.sum(), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: x.digits + x.index, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: x.digits + x.index)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)\n\n    return sort_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: sum(x.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        For example:\n        >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        >>> order_by_points([]) == []\n        \"\"\"\n        if nums == []:\n            return []\n        if len(nums) == 1:\n            return [nums[0], nums[0]]\n        else:\n            return [nums[0], nums[1]] + \\\n                [nums[1]] + \\\n                [nums[2]] + \\\n                [nums[3]] + \\\n                [nums[4]] + \\\n                [nums[5]] + \\\n                [nums[6]] + \\\n                [nums[7]] + \\\n                [nums[8]] + \\\n                [nums[9]] + \\\n                [nums[10]] + \\\n                [nums[11]] + \\\n                [nums[12]] + \\\n                [nums[13]] + \\\n                [nums[14]] + \\\n                [nums[15]] + \\", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        their sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.digits + x.sum(), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        if len(nums) == 0:\n            return []\n        else:\n            return sorted(nums, key=lambda x: x.digits + x.sum())\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)\n\n    return sort_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [nums[0], ]\n    return [nums[-1], ] + [nums[i] for i in range(len(nums))]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [nums[0], ]\n    if len(nums) == 2:\n        return [nums[0], nums[1], ]\n    if len(nums) == 3:\n        return [nums[0], nums[1], nums[2], ]\n    if len(nums) == 4:\n        return [nums[0], nums[1], nums[2], nums[3], ]\n    if len(nums) == 5:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], ]\n    if len(nums) == 6:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], ]\n    if len(nums) == 7:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], ]\n    if len(nums) == 8:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], ]\n    if len(", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(a, b):\n        return cmp(sum(a), sum(b))\n\n    return cmp", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(a, b):\n        return cmp(sum(a), sum(b))\n    return cmp", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    return sorted(nums, key=lambda x: x.sum(0), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [nums[0], ]\n    if len(nums) == 2:\n        return [nums[0], nums[1], ]\n    if len(nums) == 3:\n        return [nums[0], nums[1], nums[2], ]\n    if len(nums) == 4:\n        return [nums[0], nums[1], nums[2], nums[3], ]\n    if len(nums) == 5:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], ]\n    if len(nums) == 6:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], ]\n    if len(nums) == 7:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], ]\n    if len(nums) == 8:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], ]\n    if len(", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(a, b):\n        return cmp(sum(a), sum(b))\n\n    return cmp", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.digits, reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        their sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(num) + 1)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        if len(nums) == 0:\n            return []\n        else:\n            return sorted(nums, key=lambda x: x.sum(), reverse=True)\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.digits + x.count('0'))\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [nums[0], ]\n    else:\n        return [nums[0], nums[1]] + [nums[2]] + [nums[3]] + [nums[4]] + [nums[5]] + [nums[6]] + [nums[7]] + [nums[8]] + [nums[9]] + [nums[10]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: x.digits + x.index, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.digits, reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda x: x.sum(), reverse=True)\n\n    return sort_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort_by_sum(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num), reverse=True)\n\n    return sort_by_sum", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(a, b):\n        return cmp(sum(a), sum(b))\n\n    return cmp", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(a, b):\n        return cmp(sum(a), sum(b))\n    return cmp", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(a, b):\n        return cmp(sum(a), sum(b))\n    return cmp", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(a, b):\n        return cmp(a.digits, b.digits)\n    return cmp", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return [num for num in nums if num > 0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [nums[0], ]\n    else:\n        return [nums[-1], ] + [nums[i] for i in range(len(nums) - 1)]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [nums[0], ]\n    if len(nums) == 2:\n        return [nums[0], nums[1], ]\n    if len(nums) == 3:\n        return [nums[0], nums[1], nums[2], ]\n    if len(nums) == 4:\n        return [nums[0], nums[1], nums[2], nums[3], ]\n    if len(nums) == 5:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], ]\n    if len(nums) == 6:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], ]\n    if len(nums) == 7:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], ]\n    if len(nums) == 8:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], ]\n    if len(", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to the sum of their digits.\n        \"\"\"\n        return sorted(nums, key=lambda num: sum(num.digits), reverse=True)\n\n    return sort"]]