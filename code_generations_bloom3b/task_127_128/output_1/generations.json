[["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] < interval1[1]:\n        return \"NO\"\n    elif interval2[0] < interval2[1]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return False\n    if interval2[0] <= interval2[1] <= interval2[2]:\n        return False\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return False\n    if interval2[0] <= interval1[0] <= interval1[1]:\n        return False\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return False\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return False\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return False\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return False\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return False\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return False\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return False\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return False\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return False\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return False\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return False", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] < interval1[1]:\n        return False\n    if interval2[0] < interval2[1]:\n        return False\n    if interval1[0] > interval1[1]:\n        return False\n    if interval2[0] > interval2[1]:\n        return False\n    if interval1[0] == interval1[1]:\n        return False\n    if interval2[0] == interval2[1]:\n        return False\n    if interval1[0] == interval2[0]:\n        return False\n    if interval2[0] == interval2[1]:\n        return False\n    if interval1[0] == interval2[0]:\n        return False\n    if interval2[0] == interval2[1]:\n        return False\n    if interval1[0] == interval2[0]:\n        return False\n    if interval2[0] == interval2[1]:\n        return False\n    return True", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1.start <= interval2.start:\n        return \"NO\"\n    elif interval1.start > interval2.start:\n        return \"NO\"\n    elif interval1.end <= interval2.end:\n        return \"NO\"\n    elif interval1.end > interval2.end:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] < interval1[1]:\n        return \"NO\"\n    elif interval2[0] < interval2[1]:\n        return \"NO\"\n    else:\n        return \"NO\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return False\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return False\n    else:\n        return True", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] < interval1[1]:\n        return \"NO\"\n    elif interval2[0] < interval2[1]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    if interval2[0] <= interval1[0] <= interval2[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    if interval2[1] <= interval1[1] <= interval2[0]:\n        return \"NO\"\n    if interval1[1] <= interval2[0] <= interval1[0]:\n        return \"NO\"\n    if interval2[0] <= interval1[0] <= interval2[1]:\n        return \"NO\"\n    if interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    if interval2[1] <= interval1[0] <= interval2[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    if interval2[0] <= interval1[1] <= interval2[0]:\n        return \"NO\"\n    if interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    if interval2[0] <= interval1[1] <= interval2[0]:\n        return \"NO\"\n    if interval1[1] <= interval2[0] <= interval1[0]:\n        return \"NO\"\n    if interval2[0] <= interval1[0]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1.start > interval2.end:\n        return \"NO\"\n    if interval1.start < interval2.end:\n        return \"NO\"\n    if interval1.start == interval2.end:\n        return \"NO\"\n    if interval2.start > interval1.end:\n        return \"NO\"\n    if interval2.start < interval1.end:\n        return \"NO\"\n    if interval2.start == interval1.end:\n        return \"NO\"\n    return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1] <= interval1[1] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1] <= interval1[1] <= interval2[1] <= interval1[1] <= interval2[1] <= interval1[1] <= interval2[1] <= interval1[1] <= interval2[1] <= interval1[1] <= interval2[1] <= interval1[1] <= interval2[1] <= interval1[1] <= interval2[1] <= interval1", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1]:\n        return False\n    elif interval2[0] <= interval2[1]:\n        return False\n    else:\n        return True", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return False\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return False\n    else:\n        return True", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1]:\n        return \"NO\"\n    elif interval2[0] <= interval1[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval1[2] <= interval2[2]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval1[2] <= interval2[2] <= interval1[1] <= interval2[1] <= interval2[2] <= interval1[1] <= interval2[1] <= interval1[2] <= interval2[2] <= interval1[1] <= interval2[1] <= interval2[2] <= interval1[1] <= interval2[1] <= interval2[2] <= interval1[1] <= interval2[1] <= interval2[2] <= interval1[1] <= interval2[1] <= interval2[2] <= interval1[1] <= interval2[1] <= interval2[2] <= interval1[1] <= interval2[1] <= interval2[2] <= interval1[1] <= interval2[1] <= interval2[2] <= interval1[1] <= interval2[1] <= interval2[2] <= interval1[1] <= interval2[1]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] < interval1[1]:\n        start1 = interval1[0]\n        end1 = interval1[1]\n    else:\n        start1 = interval1[1]\n        end1 = interval1[0]\n    if interval2[0] < interval2[1]:\n        start2 = interval2[0]\n        end2 = interval2[1]\n    else:\n        start2 = interval2[1]\n        end2 = interval2[0]\n    if start1 <= start2 <= end1:\n        return True\n    elif start1 <= start2 <= end2:\n        return False\n    else:\n        return False", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] > interval1[1]:\n        return \"NO\"\n    if interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] < interval1[1]:\n        return \"NO\"\n    if interval2[0] < interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval1[1]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"NO\"\n    if interval2[0] == interval2[1] and interval2[0] == interval1[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1] and interval2[0] == interval1[0]:\n        return \"NO\"\n    if interval2[0] == interval2[1] and interval2[0] == interval1[1] and interval2[1] == interval1[0]:\n        return \"NO\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1] and interval2[0] == interval1[0] and interval1", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] > interval1[1]:\n        return \"NO\"\n    if interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] < interval1[1]:\n        return \"NO\"\n    if interval2[0] < interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval1[1]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"NO\"\n    if interval2[0] == interval2[1] and interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[0]:\n        return \"NO\"\n    if interval2[0] == interval2[1] and interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1] and interval1[0] < interval1[1]:\n        return \"NO\"\n    if interval2[0] == interval2[1] and interval2[0]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] < interval1[1]:\n        return \"NO\"\n    if interval2[0] < interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval1[1]:\n        return \"NO\"\n    if interval2[0] > interval2[1]:\n        return \"NO\"\n    return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] >= interval2[0] >= interval1[1]:\n        return \"NO\"\n    elif interval1[0] == interval2[0]:\n        return \"NO\"\n    elif interval1[1] == interval2[1]:\n        return \"NO\"\n    elif interval1[1] == interval2[0]:\n        return \"NO\"\n    elif interval1[0] == interval2[1]:\n        return \"NO\"\n    elif interval1[1] == interval2[0]:\n        return \"NO\"\n    elif interval1[0] == interval2[1]:\n        return \"NO\"\n    elif interval1[0] == interval2[1]:\n        return \"NO\"\n    elif interval1[1] == interval2[0]:\n        return \"NO\"\n    elif interval1[0] == interval2[1]:\n        return \"NO\"\n    elif interval1[1] == interval2[0]:\n        return \"NO\"\n    elif interval1[0] == interval2[1]:\n        return \"NO\"\n    elif interval1[1] == interval2[0]:\n        return \"NO\"\n    elif interval1[0] == interval2[1]:\n        return \"NO\"\n    elif interval1[1] == interval2[0]:\n        return \"NO\"\n    elif interval1[1] == interval2", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] < interval1[1]:\n        start = interval1[0]\n        end = interval1[1]\n    else:\n        start = interval1[1]\n        end = interval1[0]\n    if interval2[0] < interval2[1]:\n        start = interval2[0]\n        end = interval2[1]\n    else:\n        start = interval2[1]\n        end = interval2[0]\n    if start <= end:\n        return True\n    else:\n        return False", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1] <= interval2[1] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1] <= interval2[1] <= interval2[1] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1] <= interval2[1] <= interval2[1] <= interval2[1] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1] <= interval2[1] <= interval2[1]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return False\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return False\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return False\n    else:\n        return True", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1.start > interval2.end:\n        return \"NO\"\n    elif interval1.start < interval2.end:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1] <= interval2[1] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1] <= interval2[1] <= interval2[1] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1] <= interval2[1] <= interval2[1] <= interval2[1] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1] <= interval2[1] <= interval2[1]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] > interval1[1]:\n        return \"NO\"\n    elif interval2[0] > interval2[1]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1.start < interval2.start:\n        return \"NO\"\n    if interval1.end > interval2.end:\n        return \"NO\"\n    if interval1.start > interval2.end:\n        return \"NO\"\n    if interval1.start == interval2.end:\n        return \"NO\"\n    if interval1.end == interval2.start:\n        return \"NO\"\n    if interval1.start == interval2.start:\n        return \"NO\"\n    if interval1.start == interval2.end:\n        return \"NO\"\n    if interval1.end == interval2.end:\n        return \"NO\"\n    return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return False\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return False\n    else:\n        return True", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    if interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return \"NO\"\n    if interval2[0] <= interval1[0] <= interval1[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return \"NO\"\n    if interval2[0] <= interval1[0] <= interval1[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[0]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] > interval1[1]:\n        interval1 = interval1[1:]\n    if interval2[0] > interval2[1]:\n        interval2 = interval2[1:]\n    if interval1[0] < interval1[1]:\n        interval1 = interval1[:-1]\n    if interval2[0] < interval2[1]:\n        interval2 = interval2[:-1]\n    if interval1[0] == interval1[1]:\n        return True\n    if interval2[0] == interval2[1]:\n        return True\n    if interval1[0] < interval2[0]:\n        return True\n    if interval2[0] < interval1[0]:\n        return True\n    if interval1[0] < interval2[0]:\n        return True\n    if interval1[0] == interval2[0]:\n        return True\n    if interval2[0] == interval1[0]:\n        return True\n    if interval1[0] < interval2[0]:\n        return True\n    if interval2[0] < interval1[0]:\n        return True\n    if interval1[0] == interval2[0]:\n        return True\n    if interval2[0] < interval1[0]:\n        return True\n    if interval1[0] < interval2[0]:\n        return True\n    if interval1[0] == interval2[0]:\n        return True\n    if interval2[0] < interval1[0]:\n        return True\n    if interval1", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] < interval1[1]:\n        return \"NO\"\n    elif interval2[0] < interval2[1]:\n        return \"NO\"\n    elif interval1[0] > interval1[1]:\n        return \"NO\"\n    elif interval2[0] > interval2[1]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval2[2] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval2[2] <= interval1[1] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval2[2] <= interval1[1] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval2[2] <= interval1[1] <= interval2[1] <= interval2[2] <= interval1[1] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval2[2] <= interval1[1] <= interval2[1] <= interval2[1] <= interval2[2] <= interval1", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] > interval1[1]:\n        interval1 = interval1[1:]\n    if interval2[0] > interval2[1]:\n        interval2 = interval2[1:]\n    if interval1[0] < interval1[1]:\n        interval1 = interval1[:-1]\n    if interval2[0] < interval2[1]:\n        interval2 = interval2[:-1]\n    if interval1[0] == interval1[1]:\n        return True\n    if interval2[0] == interval2[1]:\n        return True\n    return False", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[0]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] > interval1[1]:\n        return False\n    if interval2[0] > interval2[1]:\n        return False\n    if interval1[0] == interval1[1]:\n        return False\n    if interval2[0] == interval2[1]:\n        return False\n    if interval1[0] < interval1[1]:\n        return False\n    if interval2[0] < interval2[1]:\n        return False\n    if interval1[0] > interval2[0]:\n        return False\n    if interval2[0] > interval2[1]:\n        return False\n    if interval1[0] < interval2[0]:\n        return False\n    if interval2[0] < interval2[1]:\n        return False\n    if interval1[0] > interval2[0]:\n        return False\n    if interval2[0] > interval2[1]:\n        return False\n    if interval1[0] < interval2[0]:\n        return False\n    if interval2[0] < interval2[1]:\n        return False\n    if interval1[0] > interval2[0]:\n        return False\n    if interval2[0] > interval2[1]:\n        return False\n    if interval1[0] < interval2[0]:\n        return False\n    if interval2[0] < interval2[1]:\n        return False\n    if interval1[0] > interval2[0]:\n        return False\n    if interval2[0] > interval2[1]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] < interval1[1]:\n        return \"NO\"\n    if interval2[0] < interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval1[1]:\n        return \"NO\"\n    if interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval1[1]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] < interval1[1]:\n        return False\n    if interval2[0] < interval2[1]:\n        return False\n    if interval1[0] > interval1[1]:\n        return False\n    if interval2[0] > interval2[1]:\n        return False\n    if interval1[0] == interval1[1]:\n        return False\n    if interval2[0] == interval2[1]:\n        return False\n    return True", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        if interval2[0] <= interval2[1] <= interval2[2]:\n            return True\n        else:\n            return False\n    else:\n        return False", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return False\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return False\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return False\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return False\n    else:\n        return True", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] < interval1[1]:\n        start1 = interval1[0]\n        end1 = interval1[1]\n    else:\n        start1 = interval1[1]\n        end1 = interval1[0]\n\n    if interval2[0] < interval2[1]:\n        start2 = interval2[0]\n        end2 = interval2[1]\n    else:\n        start2 = interval2[1]\n        end2 = interval2[0]\n\n    if start1 < start2:\n        start1 = start2\n        end1 = start1\n    if end1 > end2:\n        end1 = end2\n        start2 = end1\n\n    if start1 < start2:\n        start1 = start2\n        end1 = start1\n    if end1 > end2:\n        end1 = end2\n        start2 = end1\n\n    if start1 < start2:\n        start1 = start2\n        end1 = start1\n    if end1 > end2:\n        end1 = end2\n        start2 = end1\n\n    if start1 < start2:\n        start1 = start2\n        end1 = start1\n    if end1 > end2:\n        end1 = end2\n        start2 = end1\n\n    if start1 < start2:\n        start1 = start2\n        end1 = start1\n    if end1 >", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] < interval1[1]:\n        return \"NO\"\n    elif interval2[0] < interval2[1]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval2[0] <= interval1[0] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1] <= interval2[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1] <= interval2[0] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1] <= interval2[0] <= interval2[1] <= interval2[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1] <= interval2[0] <= interval2[1] <= interval2[0] <= interval2[1] <= interval2[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1] <= interval2[0] <= interval2[1] <= interval2[0] <= interval2[1] <= interval2[0] <= interval2[1] <= interval2[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2] <= interval1[3]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2] <= interval2[3]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval2[2] <= interval2[3]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval2[2] <= interval2[3]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval2[2] <= interval2[3]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval2[2] <= interval2[3]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval2[2] <= interval2[3]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval2[2] <= interval2[3]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval2[2] <= interval2[3]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval2[2] <= interval2[3]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] < interval1[1]:\n        return \"NO\"\n    if interval2[0] < interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval1[1]:\n        return \"NO\"\n    if interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval1[1]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval2[0] <= interval1[0] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval2[1] <= interval1[1] <= interval2[0]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[0]:\n        return \"NO\"\n    elif interval2[0] <= interval1[0] <= interval2[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    elif interval2[1] <= interval1[0] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval2[0] <= interval1[1] <= interval2[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    elif interval2[0] <= interval1[0] <= interval2[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval2[0] <= interval1[1]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] < interval1[1]:\n        start = interval1[0]\n        end = interval1[1]\n    else:\n        start = interval1[1]\n        end = interval1[0]\n    if interval2[0] < interval2[1]:\n        start = interval2[0]\n        end = interval2[1]\n    else:\n        start = interval2[1]\n        end = interval2[0]\n    if start <= end:\n        return True\n    else:\n        return False", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] < interval1[1]:\n        start1 = interval1[0]\n        end1 = interval1[1]\n    else:\n        start1 = interval1[1]\n        end1 = interval1[0]\n    if interval2[0] < interval2[1]:\n        start2 = interval2[0]\n        end2 = interval2[1]\n    else:\n        start2 = interval2[1]\n        end2 = interval2[0]\n    if start1 <= start2 <= end1 <= end2:\n        return True\n    else:\n        return False", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1]:\n        return \"NO\"\n    elif interval2[0] <= interval1[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval1[2] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval1[2] <= interval2[1] <= interval2[2] <= interval1[1] <= interval2[0] <= interval2[1] <= interval1[2] <= interval2[1] <= interval1[2] <= interval2[1] <= interval1[2] <= interval2[1] <= interval1[2] <= interval2[1] <= interval1[2] <= interval2[1] <= interval1[2] <= interval2[1] <= interval1[2] <= interval2[1] <= interval1[2] <= interval2[1] <= interval1[2] <= interval2[1] <= interval1[2] <= interval2[1] <= interval1[2] <= interval2[1] <= interval1[2] <= interval2[1] <= interval1[2] <= interval2[1] <= interval1[2] <= interval2[1]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return False\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return False\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return False\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return False\n    else:\n        return True", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] < interval1[1]:\n        return \"NO\"\n    if interval2[0] < interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval1[1]:\n        return \"NO\"\n    if interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval1[1]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return False\n    if interval2[0] <= interval2[1] <= interval2[2]:\n        return False\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return False\n    if interval2[0] <= interval1[0] <= interval1[1]:\n        return False\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return False\n    if interval2[0] <= interval1[0] <= interval1[1]:\n        return False\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return False\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return False\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return False\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return False\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return False\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return False\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return False\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return False\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return False", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[0]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval2[0] <= interval1[0] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval2[1] <= interval1[1] <= interval2[0]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval2[1] <= interval1[1] <= interval2[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval2[0] <= interval1[1] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval2[0] <= interval1[1] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval2[0] <= interval1[1] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval2[0] <= interval1[1]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    if interval2[0] <= interval1[0] <= interval2[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    if interval2[1] <= interval1[1] <= interval2[0]:\n        return \"NO\"\n    if interval1[1] <= interval2[0] <= interval1[0]:\n        return \"NO\"\n    if interval2[0] <= interval1[0] <= interval2[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    if interval2[1] <= interval1[1] <= interval2[0]:\n        return \"NO\"\n    if interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    if interval2[0] <= interval1[1] <= interval2[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    if interval2[0] <= interval1[1] <= interval2[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    if interval2[0] <= interval1[1]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] < interval1[1]:\n        return \"NO\"\n    elif interval1[0] > interval1[1]:\n        return \"NO\"\n    else:\n        return \"NO\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    else:\n        return \"NO\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return False\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return False\n    else:\n        return True", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    else:\n        return \"NO\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] < interval1[1]:\n        return \"NO\"\n    elif interval1[0] > interval1[1]:\n        return \"NO\"\n    elif interval2[0] < interval2[1]:\n        return \"NO\"\n    elif interval2[0] > interval2[1]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1]:\n        return \"NO\"\n    else:\n        return \"NO\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1]:\n        return \"NO\"\n    elif interval2[0] <= interval1[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval1[0] <= interval1[1] <= interval1[2] <= interval2[2]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval2[2] <= interval1[2] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval2[2] <= interval1[2] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval2[2] <= interval1[2] <= interval2[1] <= interval2[2] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval2[2] <= interval1[2] <= interval2[1]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] < interval1[1]:\n        return False\n    if interval2[0] < interval2[1]:\n        return False\n    if interval1[0] > interval1[1]:\n        return False\n    if interval2[0] > interval2[1]:\n        return False\n    if interval1[0] == interval1[1]:\n        return False\n    if interval2[0] == interval2[1]:\n        return False\n    if interval1[0] == interval2[0]:\n        return False\n    if interval2[0] == interval2[1]:\n        return False\n    if interval1[0] == interval2[0]:\n        return False\n    if interval2[0] == interval2[1]:\n        return False\n    if interval1[0] == interval2[0]:\n        return False\n    if interval2[0] == interval2[1]:\n        return False\n    return True", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return False\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return False\n    else:\n        return True", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1.start > interval1.end:\n        return \"NO\"\n    if interval2.start > interval2.end:\n        return \"NO\"\n    if interval1.start == interval1.end:\n        return \"NO\"\n    if interval2.start == interval2.end:\n        return \"NO\"\n    if interval1.start < interval2.start:\n        return \"NO\"\n    if interval2.start < interval2.end:\n        return \"NO\"\n    if interval1.start == interval2.start:\n        return \"NO\"\n    if interval2.start == interval2.end:\n        return \"NO\"\n    if interval1.start < interval2.start:\n        return \"NO\"\n    if interval2.start < interval2.end:\n        return \"NO\"\n    if interval1.start < interval2.start:\n        return \"NO\"\n    if interval2.start < interval2.end:\n        return \"NO\"\n    if interval1.start < interval2.start:\n        return \"NO\"\n    if interval2.start < interval2.end:\n        return \"NO\"\n    if interval1.start < interval2.start:\n        return \"NO\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] >= interval2[0] >= interval1[1]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2] <= interval1[3]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2] <= interval2[3]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return False\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return False\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return False\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return False\n    else:\n        return True", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        if interval2[0] <= interval2[1] <= interval2[2]:\n            return True\n        else:\n            return False\n    else:\n        return False", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1]:\n        return \"NO\"\n    elif interval2[0] <= interval1[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval1[2]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval2[2] <= interval1[2]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval2[2] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval2[2] <= interval1[2] <= interval2[1] <= interval2[2] <= interval1[2] <= interval2[1] <= interval2[2] <= interval1[2] <= interval2[1] <= interval2[2] <= interval1[2] <= interval2[1] <= interval2[2] <= interval1[2] <= interval2[1] <= interval2[2] <= interval1[2] <= interval2[1] <= interval2[2] <= interval1[2] <= interval2[1] <= interval", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] < interval1[1]:\n        return \"NO\"\n    if interval2[0] < interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval1[1]:\n        return \"NO\"\n    if interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval1[1]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] < interval1[1]:\n        return \"NO\"\n    if interval2[0] < interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval1[1]:\n        return \"NO\"\n    if interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval1[1]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return False\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return False\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return False\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return False\n    else:\n        return True", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1] <= interval1[1] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1] <= interval1[1] <= interval2[1] <= interval1[1] <= interval2[1] <= interval1[1] <= interval2[1] <= interval1[1] <= interval2[1] <= interval1[1] <= interval2[1] <= interval1[1] <= interval2[1] <= interval1[1] <= interval2[1] <= interval1[1] <= interval2[1] <= interval1[1] <= interval2[1] <= interval1[1] <= interval2[1] <= interval", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] > interval1[1]:\n        start = interval1[0]\n        end = interval1[1]\n    else:\n        start = interval1[1]\n        end = interval1[0]\n    if interval2[0] > interval2[1]:\n        start = interval2[0]\n        end = interval2[1]\n    else:\n        start = interval2[1]\n        end = interval2[0]\n    if start <= end:\n        return True\n    else:\n        return False", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval2[0] <= interval1[0] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval2[1] <= interval1[1] <= interval2[0]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[0]:\n        return \"NO\"\n    elif interval2[0] <= interval1[0] <= interval2[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    elif interval2[0] <= interval1[1] <= interval2[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval2[0] <= interval1[1] <= interval2[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval2[0] <= interval1[1] <= interval2[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval2[0] <= interval1[1]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        if interval2[0] <= interval2[1] <= interval2[2]:\n            return True\n        else:\n            return False\n    else:\n        return False", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] > interval1[1]:\n        start1 = interval1[0]\n        end1 = interval1[1]\n    else:\n        start1 = interval1[1]\n        end1 = interval1[0]\n    if interval2[0] > interval2[1]:\n        start2 = interval2[0]\n        end2 = interval2[1]\n    else:\n        start2 = interval2[1]\n        end2 = interval2[0]\n    if start1 <= start2 <= end1:\n        if start1 <= end2 <= end1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2] <= interval1[3]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2] <= interval2[3]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1]:\n        return False\n    elif interval2[0] <= interval2[1]:\n        return False\n    else:\n        return True", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval2[0] <= interval1[0] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval2[1] <= interval1[1] <= interval2[0]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[0]:\n        return \"NO\"\n    elif interval2[0] <= interval1[0] <= interval2[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    elif interval2[0] <= interval1[0] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval2[1] <= interval1[1] <= interval2[0]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[0]:\n        return \"NO\"\n    elif interval2[0] <= interval1[0] <= interval2[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    elif interval2[1] <= interval1[1]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2] <= interval1[0]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2] <= interval2[0]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] < interval1[1]:\n        return \"NO\"\n    elif interval2[0] < interval2[1]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return False\n    if interval2[0] <= interval2[1] <= interval2[2]:\n        return False\n    if interval1[0] >= interval1[1] >= interval1[2]:\n        return False\n    if interval2[0] >= interval2[1] >= interval2[2]:\n        return False\n    return True", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1] <= interval2[1] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1] <= interval2[1] <= interval2[1] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1] <= interval2[1] <= interval2[1] <= interval2[1] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1] <= interval2[1] <= interval2[1] <= interval2[1]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return False\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return False\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return False\n    elif interval1[1] <= interval2[1] <= interval1[1]:\n        return False\n    else:\n        return True", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1.start > interval2.end:\n        return \"NO\"\n    if interval1.start < interval2.end:\n        return \"NO\"\n    if interval1.start == interval2.end:\n        return \"NO\"\n    if interval1.start == interval2.start:\n        return \"NO\"\n    if interval2.start > interval1.end:\n        return \"NO\"\n    if interval2.start < interval1.end:\n        return \"NO\"\n    if interval2.start == interval1.end:\n        return \"NO\"\n    if interval2.start == interval1.start:\n        return \"NO\"\n    if interval1.start == interval1.start:\n        return \"NO\"\n    if interval1.start == interval1.start:\n        return \"NO\"\n    if interval1.start == interval1.start:\n        return \"NO\"\n    if interval2.start == interval1.start:\n        return \"NO\"\n    if interval2.start == interval1.start:\n        return \"NO\"\n    if interval2.start == interval1.start:\n        return \"NO\"\n    if interval2.start == interval1.start:\n        return \"NO\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1]:\n        return \"NO\"\n    elif interval2[0] <= interval1[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval1[2] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval1[2] <= interval2[1] <= interval2[2] <= interval1[1] <= interval2[1] <= interval2[2] <= interval1[2] <= interval2[1] <= interval2[2] <= interval1[1] <= interval2[1] <= interval2[2] <= interval1[2] <= interval2[1] <= interval2[2] <= interval1[1] <= interval2[1] <= interval2[2] <= interval1[2] <= interval2[1] <= interval2[2] <= interval1[1] <= interval2[1] <= interval2[2] <= interval1[1] <= interval2[1] <= interval2[2] <= interval1[1] <= interval2[1] <= interval2[2] <= interval1[1] <= interval2[1] <= interval2[2] <= interval1[1]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] >= interval2[0] >= interval1[1]:\n        return \"NO\"\n    elif interval1[0] == interval2[0]:\n        return \"NO\"\n    elif interval1[1] == interval2[1]:\n        return \"NO\"\n    elif interval1[1] == interval2[0]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1]:\n        return \"NO\"\n    elif interval2[0] <= interval1[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval1[2] <= interval2[2]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval1[2] <= interval2[2] <= interval1[1] <= interval2[1] <= interval2[2] <= interval1[1] <= interval2[1] <= interval2[2] <= interval1[1] <= interval2[1] <= interval2[2] <= interval1[1] <= interval2[1] <= interval2[2] <= interval1[1] <= interval2[1] <= interval2[2] <= interval1[1] <= interval2[1] <= interval2[2] <= interval1[1] <= interval2[1] <= interval2[2] <= interval1[1] <= interval2[1] <= interval2[2] <= interval1[1] <= interval2[1] <= interval2[2] <= interval1[1] <= interval2[1] <= interval2[2] <= interval1[1] <= interval2[1] <= interval2[2]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] < interval2[0]:\n        return \"NO\"\n    elif interval1[0] > interval2[0]:\n        return \"NO\"\n    elif interval1[1] < interval2[1]:\n        return \"NO\"\n    elif interval1[1] > interval2[1]:\n        return \"NO\"\n    elif interval1[2] < interval2[2]:\n        return \"NO\"\n    elif interval1[2] > interval2[2]:\n        return \"NO\"\n    return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] < interval1[1]:\n        return \"NO\"\n    elif interval2[0] < interval2[1]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1]:\n        return False\n    elif interval2[0] <= interval2[1]:\n        return False\n    else:\n        return True", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2] <= interval1[3]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2] <= interval2[3]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        if interval2[0] <= interval2[1] <= interval2[2]:\n            return True\n        else:\n            return False\n    else:\n        return False\n</s>", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] > interval1[1]:\n        start = interval1[1]\n        end = interval1[0]\n    else:\n        start = interval1[0]\n        end = interval1[1]\n    if interval2[0] > interval2[1]:\n        start = interval2[1]\n        end = interval2[0]\n    else:\n        start = interval2[0]\n        end = interval2[1]\n    if start > end:\n        return \"NO\"\n    if start == end:\n        return \"NO\"\n    if start < end:\n        return \"NO\"\n    if start < end:\n        return \"NO\"\n    if start < end:\n        return \"NO\"\n    if start < end:\n        return \"NO\"\n    if start < end:\n        return \"NO\"\n    if start < end:\n        return \"NO\"\n    if start < end:\n        return \"NO\"\n    if start < end:\n        return \"NO\"\n    if start < end:\n        return \"NO\"\n    if start < end:\n        return \"NO\"\n    if start < end:\n        return \"NO\"\n    if start < end:\n        return \"NO\"\n    if start < end:\n        return \"NO\"\n    if start < end:\n        return \"NO\"\n    if start < end:\n        return", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] > interval1[1]:\n        return \"NO\"\n    if interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] < interval1[1]:\n        return \"NO\"\n    if interval2[0] < interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval1[1]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    else:\n        return \"YES\"\n</s>", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        if interval2[0] <= interval2[1] <= interval2[2]:\n            return True\n        else:\n            return False\n    else:\n        return False", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1.start < interval2.start:\n        return \"NO\"\n    elif interval1.start > interval2.end:\n        return \"NO\"\n    elif interval2.start < interval1.end:\n        return \"NO\"\n    elif interval2.start > interval1.start:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        if interval2[0] <= interval2[1] <= interval2[2]:\n            return True\n        else:\n            return False\n    else:\n        return False", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] < interval1[1]:\n        return \"NO\"\n    elif interval2[0] < interval2[1]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2] <= interval1[3]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2] <= interval2[3]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        if interval2[0] <= interval2[1] <= interval2[2]:\n            return True\n        else:\n            return False\n    else:\n        return False", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1.start > interval1.end:\n        return \"NO\"\n    if interval2.start > interval2.end:\n        return \"NO\"\n    if interval1.start == interval1.end:\n        return \"NO\"\n    if interval2.start == interval2.end:\n        return \"NO\"\n    if interval1.start < interval2.start:\n        return \"NO\"\n    if interval2.start < interval2.end:\n        return \"NO\"\n    if interval1.start < interval2.start:\n        return \"NO\"\n    if interval2.start < interval2.end:\n        return \"NO\"\n    if interval1.start < interval2.start:\n        return \"NO\"\n    if interval2.start < interval2.end:\n        return \"NO\"\n    if interval1.start < interval2.start:\n        return \"NO\"\n    if interval2.start < interval2.end:\n        return \"NO\"\n    if interval1.start < interval2.start:\n        return \"NO\"\n    if interval2.start < interval2.end:\n        return \"NO\"\n    if interval1.start < interval2.start:\n        return \"NO\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2] <= interval1[3]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2] <= interval2[3]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1]:\n        return \"NO\"\n    elif interval2[0] <= interval1[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval1[0] <= interval1[1] <= interval1[2] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval1[2] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval2[2] <= interval1[2] <= interval2[2] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval2[2] <= interval1[2] <= interval2[2] <= interval1[1] <= interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] <= interval2[1] <= interval2[2] <= interval1[2] <= interval2[2]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] < interval1[1]:\n        return \"NO\"\n    if interval2[0] < interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval1[1]:\n        return \"NO\"\n    if interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval1[1]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1.start > interval1.end:\n        return \"NO\"\n    if interval2.start > interval2.end:\n        return \"NO\"\n    if interval1.start == interval1.end:\n        return \"NO\"\n    if interval2.start == interval2.end:\n        return \"NO\"\n    if interval1.start < interval2.start:\n        return \"NO\"\n    if interval2.start < interval2.end:\n        return \"NO\"\n    if interval1.start < interval2.start:\n        return \"NO\"\n    if interval2.start < interval2.end:\n        return \"NO\"\n    if interval1.start < interval2.start:\n        return \"NO\"\n    if interval2.start < interval2.end:\n        return \"NO\"\n    if interval1.start < interval2.start:\n        return \"NO\"\n    if interval2.start < interval2.end:\n        return \"NO\"\n    if interval1.start < interval2.start:\n        return \"NO\"\n    if interval2.start < interval2.end:\n        return \"NO\"\n    if interval1.start < interval2.start:\n        return \"NO\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    else:\n        return \"NO\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2] <= interval1[0]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2] <= interval2[0]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    if interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return \"NO\"\n    if interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    if interval1[0] <= interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] < interval1[1]:\n        return \"NO\"\n    elif interval1[0] > interval1[1]:\n        return \"NO\"\n    elif interval2[0] < interval2[1]:\n        return \"NO\"\n    elif interval2[0] > interval2[1]:\n        return \"NO\"\n    else:\n        return \"YES\"\n</s>", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    if interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return \"NO\"\n    if interval2[0] <= interval1[0] <= interval1[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[0] <= interval2[1]:\n        return \"NO\"\n    if interval2[0] <= interval1[0] <= interval1[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    if interval2[0] <= interval1[0] <= interval1[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    if interval2[0] <= interval1[0] <= interval1[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    if interval2[0] <= interval1[0] <= interval1[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[0]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return False\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return False\n    else:\n        return True", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return False\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return False\n    else:\n        return True", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval1[1] <= interval1[2]:\n        return \"NO\"\n    elif interval2[0] <= interval2[1] <= interval2[2]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    elif interval1[1] <= interval2[1] <= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    if interval1[1] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    if interval1[1] <= interval2[1] <= interval1[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[0]", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] <= interval2[0] <= interval1[1]:\n        return False\n    elif interval1[0] <= interval2[1] <= interval1[1]:\n        return False\n    elif interval1[1] <= interval2[0] <= interval1[1]:\n        return False\n    elif interval1[1] <= interval2[1] <= interval1[1]:\n        return False\n    else:\n        return True", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] < interval1[1]:\n        return \"NO\"\n    if interval2[0] < interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval1[1]:\n        return \"NO\"\n    if interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval1[1]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"\n    if interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"", "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    if interval1[0] < interval2[0]:\n        return \"NO\"\n    if interval1[1] < interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0]:\n        return \"NO\"\n    if interval1[1] > interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"\n    if interval1[1] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"\n    if interval1[1] == interval2[0]:\n        return \"NO\"\n    if interval1[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"\n    if interval1[1] == interval2[0]:\n        return \"NO\"\n    if interval1[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"NO\"\n    if interval1[1] == interval2[0]:\n        return \"NO\""]]