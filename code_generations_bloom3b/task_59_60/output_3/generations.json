[["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while True:\n        if n <= 1:\n            return 1\n        elif n < 10000:\n            return n\n        else:\n            largest = n // 2\n            if largest == 1:\n                return n\n            else:\n                return largest_prime_factor(largest)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        # Search through all the primes:\n        for i in range(1, n):\n            if n % i == 0:\n                return i\n        # Return the largest prime factor:\n        return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n // 2\n    else:\n        while n!= 2:\n            n = n // 2\n            if n > 1:\n                return largest_prime_factor(n)\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return n\n    while n > 1:\n        if n % 3 == 0:\n            return largest_prime_factor(n // 3)\n        n /= 3\n        if n > 1:\n            return largest_prime_factor(n // 3)\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while True:\n        if n < 1 or n % 2 == 0:\n            return\n        if n % 3 == 0:\n            n /= 3\n        elif n % 5 == 0:\n            n /= 5\n        elif n % 7 == 0:\n            n /= 7\n        elif n % 11 == 0:\n            n /= 11\n        elif n % 13 == 0:\n            n /= 13\n        elif n % 17 == 0:\n            n /= 17\n        else:\n            return\n        n /= 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    if n <= 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 5:\n        return 5\n    if n == 7:\n        return 7\n    if n == 9:\n        return 9\n    if n == 11:\n        return 11\n    if n == 13:\n        return 13\n    if n == 15:\n        return 15\n    if n == 19:\n        return 19\n    if n == 21:\n        return 21\n    if n == 23 or n == 29:\n        return 31\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    p = 2\n    if n < 2:\n        return p\n    while n!= 1:\n        if n % p == 0:\n            p = p * p\n        else:\n            break\n    return p", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = int(n)\n    if n == 1:\n        return n\n    if n < 32:\n        return prime_gen(n, n)\n    i = 1\n    while i < n:\n        if n % i == 0:\n            break\n        i += 1\n    return i", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while True:\n        if n <= 1:\n            return 1\n        n = n // 2\n        if n < 1:\n            break\n        n = n % 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n < 2:\n        return 1\n    for i in range(3, n):\n        if n % i == 0:\n            return i\n    return 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 1\n    while i < n:\n        if n % i == 0:\n            return i\n        i += 1\n    return i", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    p = 2\n    for n in range(1, n + 1):\n        if n!= p:\n            continue\n        p = n\n    return p", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while n < 1:\n        n *= 2\n    while n < 100:\n        n *= 2\n    while n < 10000:\n        n *= 2\n    while n < 100000:\n        n *= 2\n    while n < 1000000:\n        n *= 2\n    while n < 10000000:\n        n *= 2\n    while n < 1000000000:\n        n *= 2\n    return n\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n in range(3, 11):\n        return n\n    return largest_prime_factor(n // 2) + largest_prime_factor(n // 2 % 2)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while True:\n        x = n // 2\n        if x < 1:\n            return\n        y = n // x\n        if y < 1:\n            return\n        if x == y:\n            return x\n        if x < y * 2:\n            return x\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    #return the smallest prime factor that is greater than n\n    factors = [prime for prime in range(n) if prime!= 1]\n    return factors[-1][-1]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 0:\n        return 0\n    while n < 1:\n        n = n ** 2\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return largest_prime_factor(n//2)\n    else:\n        return largest_prime_factor(n/2) + largest_prime_factor(n/2)\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 1\n    while i < n:\n        if n % i == 0:\n            return i\n        i += 1\n    raise ValueError('n is not prime')\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        if n in [2, 3, 5, 8, 11, 13, 17, 19, 23, 25, 28, 31, 35, 37, 41, 43, 47, 53, 55, 58, 61, 67, 71, 73, 79, 83, 85, 89, 97, 103, 107, 109, 113, 127, 131, 137, 139, 145, 147, 149, 151, 157, 163, 167, 173, 177, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 243, 247, 251, 257, 259, 263, 267, 269, 271, 277, 281, 283, 291, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 361, 367, 369, 373, 379, 385, 389, 397, 401, 409, 419, 421, 433, 437, 447, 449, 461, 463, 467, 479, 487, 491, 493, 499, 503, 511, 521, 523, 541, 547, 557, 563, 569, 577, 587, 593, 599", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    result = n\n    while True:\n        if result % 2 == 0:\n            result /= 2\n        else:\n            break\n    return result", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while True:\n        n = n % 2\n        if n == 1:\n            return 2\n        elif n == 2:\n            return 3\n        elif n == 3:\n            return 4\n        elif n == 5:\n            return 6\n        elif n == 7:\n            return 9\n        elif n == 11:\n            return 13\n        elif n == 19:\n            return 29\n        elif n == 37:\n            return 49\n        elif n == 89:\n            return 163\n        elif n == 1395:\n            return 2047\n        else:\n            raise ValueError(\"invalid n: %r\" % n)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n\n    if n % 3 == 0:\n        return n\n    if n % 5 == 0:\n        return n\n    if n % 7 == 0:\n        return n\n    if n % 11 == 0:\n        return n\n    if n % 13 == 0:\n        return n\n    if n % 17 == 0:\n        return n\n    return n * n * n * n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for _ in range(n):\n        if n == 1:\n            return 1\n        if n % 2 == 0:\n            return 2\n    raise ValueError(\"Not a prime\")", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 1\n    while True:\n        if n % factor == 0:\n            return factor\n        factor *= 2\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    prime_count = 0\n    # Divide n by 2\n    for i in range(2, n):\n        if n % i == 0:\n            prime_count += 1\n    if prime_count == 1:\n        return 2\n    else:\n        return prime_count", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while True:\n        while n % 2 == 0:\n            n /= 2\n        if n == 1:\n            return\n        if n == 2:\n            return\n        n /= 2\n\n    return", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n > 1:\n        ans = 0\n        while n > 1:\n            if n % 2 == 0:\n                ans += 1\n            n = n/2\n            if n == 1:\n                return ans\n        return 0", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n\n    if n == 5:\n        return 5\n\n    if n % 2 == 0:\n        return n / 2\n\n    if n % 3 == 0:\n        return n / 3\n\n    if n % 5 == 0:\n        return n / 5\n\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while n == 1:\n        n = n // 2\n    while n > 2:\n        if n % 2 == 0:\n            yield n\n        n = n // 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while True:\n        if n % 2 == 0:\n            return n\n        else:\n            n = n // 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n > 2:\n        if n % 3 == 0:\n            if n % 5 == 0:\n                if n % 7 == 0:\n                    if n % 11 == 0:\n                        if n % 13 == 0:\n                            if n % 17 == 0:\n                                if n % 19 == 0:\n                                    return 2\n                                else:\n                                    return 3\n                            else:\n                                return 4\n                        else:\n                            return 5\n                    else:\n                        return 6\n                else:\n                    return 7\n            else:\n                return 8\n        else:\n            return 9\n    else:\n        if n % 3 == 0:\n            if n % 5 == 0:\n                if n % 7 == 0:\n                    return 10\n                else:\n                    return 11\n            else:\n                return 12\n        else:\n            return 13\n        return 14", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return 1 << max(1, n) + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while True:\n        n = n // 2\n        if n == 1:\n            return n\n        if n!= 2:\n            continue\n        n = n // 3\n        if n == 1:\n            return n\n        if n!= 3:\n            continue\n        n = n // 5\n        if n == 1:\n            return n\n        if n!= 5:\n            continue\n        n = n // 7\n        if n == 1:\n            return n\n        if n!= 7:\n            continue\n        n = n // 11\n        if n == 1:\n            return n\n        if n!= 11:\n            continue\n        n = n // 13\n        if n == 1:\n            return n\n        if n!= 13:\n            continue\n        n = n // 17\n        if n == 1:\n            return n\n        if n!= 17:\n            continue\n        n = n // 19\n        if n == 1:\n            return n\n        if n!= 19:\n            continue\n        n = n // 23\n        if n == 1:\n            return n\n        if n!= 23:\n            continue\n        n = n // 29\n        if n == 1:\n            return n\n        if n!= 29:\n            continue\n        n = n // 37\n        if n == 1:\n            return n\n        if n!= 37:\n            continue\n        n = n // 41\n        if n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = int(n)\n    if n % 2 == 0:\n        return n\n    f = 1\n    for i in range(n // 2):\n        if n % i == 0:\n            f *= i\n            break\n    return f\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n % 3 == 1:\n        return 4\n    if n % 5 == 1:\n        return 6\n    if n % 7 == 1:\n        return 8\n    if n % 11 == 1:\n        return 13\n    if n % 17 == 1:\n        return 19\n    if n % 23 == 1:\n        return 29\n    return 2 * 2 * 3 * 4 * 5 * 7 * 11 * 13 * 17 * 19 * 23", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Only integers are allowed.\")\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n // 2\n    if n % 3 == 0:\n        return n // 3\n    if n % 5 == 0:\n        return n // 5\n    if n % 7 == 0:\n        return n // 7\n    return n // 13", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while True:\n        if n > 1:\n            if n % 2 == 0:\n                return n\n            n, n2 = divmod(n, 2)\n            if n2 > 1:\n                return n\n            n = n2\n        else:\n            return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 2:\n        return n\n    while n % 2 == 0:\n        n//=2\n    if n % 3 == 0:\n        n//=3\n    if n % 5 == 0:\n        n//=5\n    if n % 7 == 0:\n        n//=7\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    m = 1\n    while n > 1:\n        if n % m == 0:\n            m = m + 1\n        n = n / m\n    return m", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    for i in range(n // 3):\n        if n % i == 0:\n            return i\n    return len(xrange(n // 3))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n < 100:\n        return 3\n    if n < 10000:\n        return 4\n    if n < 1000000:\n        return 5\n    if n < 10000000000:\n        return 6\n    return 7\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1 or n == 1:\n        return 1\n    d = 1\n    for i in range(2, int(sqrt(n))):\n        d *= i\n        if d > n:\n            return d\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    if n == 2:\n        return 2\n    if n <= 2:\n        return 2\n    factors = [2, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 103, 107, 109, 113, 117, 131, 137, 139, 163, 167, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 243, 247, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 491, 499, 503, 509, 521, 523, 529, 537, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 617, 619, 631, 641, 643, 647, 649", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be positive\")\n\n    f = 1\n    while n > 1:\n        f *= n\n        n //= f\n        if n % f == 0:\n            break\n\n    return f", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return max(p**2 for p in [1, 2, 3, 4, 5, 8, 9, 11, 13, 14, 15, 17, 19, 21, 23, 25])", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n < 2:\n        return 2\n    elif n % 2 == 0:\n        return n // 2\n    else:\n        return n // 2 * largest_prime_factor(n // 2) + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while True:\n        if n > 1:\n            if n % 2 == 0:\n                return n\n            elif n % 3 == 0:\n                return n * 2\n            else:\n                return n * 3\n        elif n % 5 == 0:\n            return n * 5\n        elif n % 7 == 0:\n            return n * 7\n        elif n % 11 == 0:\n            return n * 11\n        elif n % 13 == 0:\n            return n * 13\n        elif n % 17 == 0:\n            return n * 17\n        elif n % 19 == 0:\n            return n * 19\n        else:\n            return n\n    # This will print false.\n    return False", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    prime = 1\n    for _ in range(1, n):\n        if n % prime == 0:\n            prime += 1\n    return prime", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    max = 0\n    for i in range(1, n+1):\n        if i not in [1, n]:\n            if largest_prime_factor(i) > max:\n                max = largest_prime_factor(i)\n\n    return max", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return max(largest_prime_factor(i) for i in range(3, n + 1))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 1\n    while True:\n        if n % factor:\n            break\n        factor *= 2\n        n = n // factor\n    return factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while n > 1:\n        if n % 2 == 0:\n            return 1\n        else:\n            n = n // 2\n            if n > 1:\n                largest_prime_factor(n)\n    return 0\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 1:\n        return 1\n    else:\n        return 2 * largest_prime_factor(n // 2)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return max(f ** g for f, g in zip(range(2, n + 1), range(n, n + 1)))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 437, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 601, 607, 613, 617, 619, 631, 641, 643, 647, 651, 653, 659", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    result = 1\n    if n > 1:\n        while n < 100 and n % 5!= 0:\n            result *= n\n        for i in range(1, n):\n            result *= n\n            if result > result % 5 and n % 2!= 0:\n                result /= 2\n            elif n % 2 == 0:\n                result /= 2\n        return result\n    else:\n        return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # This is a recursive call\n    if n == 1:\n        return n\n    if n % 2 == 0:\n        return largest_prime_factor(n // 2)\n    if n % 3 == 0:\n        return largest_prime_factor(n // 3)\n    if n % 5 == 0:\n        return largest_prime_factor(n // 5)\n    return largest_prime_factor(n // 10) * largest_prime_factor(n // 100) * largest_prime_factor(n // 1000)\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Single- and double prime cases are already handled.\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return largest_prime_factor(n-1)\n    else:\n        return largest_prime_factor(n/2)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return n\n    if n == 2:\n        return 3\n    return _max(2, 2 ** (n - 2))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Determine the smallest possible number that is not a prime.\n    smallest = n\n    for prime in range(2, n + 1):\n        if n % prime == 0:\n            smallest = n // prime\n    # Determine the largest number that is not a prime.\n    for prime in range(2, n + 1):\n        if n % prime == 0:\n            break\n    # If the largest number is a prime, then return that prime.\n    if n % 2 == 0:\n        return prime\n    else:\n        return n // 2\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # We begin with a relatively simple algorithm for calculating the largest\n    # factor, then test this against a second algorithm and compare the results.\n    if n == 1:\n        return 1\n\n    # See if this number is divisible by the prime factors.\n    for k in range(1, n):\n        # First, we need to test for primality.\n        if n % k == 0:\n            return k\n\n    # We use the time complexity of this algorithm.\n    # We have to calculate the largest factor, but we only have to do this once\n    # in the loop.\n    return n // (n % largest_prime_factor(n)) * largest_prime_factor(n) // k", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # All numbers are prime.\n    if n == 1:\n        return 1\n    if n == 2:\n        return\n    # n is a prime.\n    if n in [2, 4, 6, 8, 12]:\n        # If n is odd, then n is prime and the largest prime factor is its\n        # square root.\n        if n % 2:\n            return n // 2\n        else:\n            return n // 4\n    # n is not a prime.\n    return n // (n // 2) // 3</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # This is a fast implementation that uses a combination of Levenshtein distance and\n    # the Huge-O. See http://stackoverflow.com/questions/751843/huge-o-in-python\n    # for the original Huge-O implementation.\n    # This is the best we can do in the mean time.\n    # See http://stackoverflow.com/a/28925074 for a faster implementation.\n    def is_prime(n):\n        if n == 1:\n            return True\n        # Find the largest prime factor of n.\n        if n <= 1:\n            return is_prime(n - 1)\n        prime = 1\n        for i in xrange(2, n - 1):\n            if n % i == 0:\n                prime *= i\n        return prime <= n\n\n    while n > 1:\n        if is_prime(n):\n            break\n        n -= 1\n\n    if n == 1:\n        return n\n    else:\n        return largest_prime_factor(n - 1)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while True:\n        if n > 1:\n            return prime_factor(n)\n        else:\n            return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while True:\n        while True:\n            if n % 2 == 0:\n                break\n            n //= 2\n            # if n is a prime, we found the largest prime factor.\n            if n == 1:\n                return n\n        if n == 1:\n            return n\n        if n % 2 == 0:\n            return n\n        else:\n            if n % 3 == 0:\n                return n\n            n //= 3\n            # if n is a prime, we found the largest prime factor.\n            if n == 3:\n                return n\n            n //= 3\n            if n % 4 == 0:\n                return n\n            n //= 4\n            if n % 5 == 0:\n                return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n < 2:\n        return 0\n    elif n % 2 == 0:\n        return largest_prime_factor(n / 2)\n    else:\n        # This is the \"bad case\"\n        return n // 3", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    result = 1\n    while True:\n        if n % 2 == 0:\n            return result\n        else:\n            result *= n\n            n = n // 2\n    return result", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while True:\n        if n % 2 == 1:\n            return n\n        n = n // 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # max of prime factors of n\n    p = 1\n    # find number of non-primes\n    while p <= n:\n        if n % p == 0:\n            return p\n        p += 1\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = int(n)\n    if n == 1 or n == 2 or n == 3:\n        return n\n    if n < 4:\n        return 1\n    if n % 2 == 0:\n        return largest_prime_factor(n / 2)\n    else:\n        return largest_prime_factor(n / 2 + 1)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Check for power of 2.\n    if n == 1:\n        return 1\n    # Check for prime factors.\n    while True:\n        if n % 2 == 1:\n            return n\n        n //= 2\n        if n % 2 == 0:\n            break\n    # n has a prime factor of more than 1.\n    # Check if n is prime.\n    if n == 2:\n        return n\n    # n has a prime factor of exactly 2.\n    # Check if n is a square.\n    if n % 2 == 0:\n        return n\n    # n is composite.\n    raise ValueError(\"Invalid n\")", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    return n // prime(n)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n == 3 or n % 3 == 0:\n        return 3\n    if n == 4 or n % 4 == 0:\n        return 4\n    if n == 5 or n % 5 == 0:\n        return 5\n    if n == 6 or n % 6 == 0:\n        return 6\n    if n == 7 or n % 7 == 0:\n        return 7\n    if n == 8 or n % 8 == 0:\n        return 8\n    if n == 9 or n % 9 == 0:\n        return 9\n    if n == 10 or n % 10 == 0:\n        return 10\n    if n == 11 or n % 11 == 0:\n        return 11\n    if n == 12 or n % 12 == 0:\n        return 12\n    if n == 13 or n % 13 == 0:\n        return 13\n    if n == 14 or n % 14 == 0:\n        return 14\n    if n == 15 or n % 15 == 0:\n        return 15\n    if n == 16 or n % 16 == 0:\n        return 16\n    if n == 17 or n % 17 == 0:\n        return 17\n    if n == 18 or n % 18 == 0:\n        return 18\n    if n == 19 or", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n\n    if n % 3 == 0:\n        return n // 3\n    if n % 4 == 0:\n        return n // 4\n    if n % 5 == 0:\n        return n // 5\n    if n % 7 == 0:\n        return n // 7\n    if n % 11 == 0:\n        return n // 11\n    if n % 13 == 0:\n        return n // 13\n    if n % 17 == 0:\n        return n // 17\n    if n % 19 == 0:\n        return n // 19\n    if n % 23 == 0:\n        return n // 23\n    if n % 27 == 0:\n        return n // 27\n    if n % 29 == 0:\n        return n // 29\n    if n % 31 == 0:\n        return n // 31\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    if n % 2 == 0:\n        return n // 2\n\n    p = 1\n    while n >= 2:\n        p *= p\n        n //= 2\n    return p", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    result = 1\n    while n > 1:\n        for _ in range(int(math.sqrt(n))):\n            result *= n\n        n = n//2\n    return result", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # We use a little trick to make it faster.  Instead of computing the\n    # factorial, we first compute the inverse.  Then we just have to find\n    # the prime factor that's the largest.  This is the same strategy\n    # as in the C library.\n    return 1 if n <= 1 else n // (n * n - 1) // n - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return n\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n % 4 == 0:\n        return n\n    return n / 2 * 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while n % 2!= 0:\n        n = n // 2\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    try:\n        return largest_prime_factor(int(n))\n    except (ValueError, OverflowError):\n        return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    try:\n        return prime_factor(n)\n    except TypeError:\n        return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # largest prime factor is n mod q where q is any prime (possibly different from n)\n    prime_factor = 1\n    while prime_factor > n:\n        if prime_factor % n == 0:\n            prime_factor /= n\n        else:\n            break\n    return prime_factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 3", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 1\n    while True:\n        if n % factor == 0:\n            factor = n / factor\n        else:\n            return factor\n    raise ValueError('n is not a prime')", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return max(i for i in range(2, n + 1) if n % i == 0)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return n\n    else:\n        return max(int(n//x) for x in range(2, int(n//2)+1))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while n!= 1:\n        if n % 2 == 0:\n            return 2\n        n = n // 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return\n    n = 2\n    while n > 1:\n        if n % 2 == 0:\n            return\n        n = n // 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    prime_factor = 2\n    for i in range(2, len(n), 2):\n        if n % i == 0:\n            prime_factor = prime_factor * i\n            break\n    return prime_factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    a = 1\n    while n > 1:\n        n = n % a\n        a = a // n\n    return a", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    try:\n        nprime = n // prime_factor(n)\n        return nprime\n    except ValueError:\n        return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return largest_prime_factor(n / 2)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while True:\n        if n % 2 == 0:\n            return 2\n        else:\n            n /= 2\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2, n+1):\n        if n % i == 0:\n            return i\n        else:\n            continue\n    else:\n        return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    a = n\n    while a >= 2:\n        b = 2 ** a\n        a %= b\n        if a == 1:\n            return a\n        if a > largest_prime_factor(b):\n            largest_prime_factor(b) = a\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 == 0:\n        return n // 2\n    elif n == 1:\n        return 1\n    else:\n        return largest_prime_factor(n - 1)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    factor = 1\n    for i in range(2, n+1):\n        if n % i == 0:\n            factor = factor * i\n    return factor\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while n!= 1:\n        if n % 2 == 0:\n            n, m = divmod(n, 2)\n            if n % m == 0:\n                return n, m\n        n, m = divmod(n, 2)\n    return n, None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    r = 1\n    while r <= n:\n        if r % 2 == 0:\n            return r\n        r = r / 2\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return max(larger_prime_factor(i) for i in range(3, n + 1))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            break\n    return n\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while True:\n        if n <= 1:\n            return\n        if n % 2 == 0:\n            return\n        if n == 2:\n            return\n        if n == 3:\n            return\n        if n == 5:\n            return\n        if n == 7:\n            return\n        if n == 11:\n            return\n        if n == 13:\n            return\n        if n == 14:\n            return\n        if n == 18:\n            return\n        if n == 19:\n            return\n        if n == 20:\n            return\n        if n == 21:\n            return\n        if n == 22:\n            return\n        if n == 23:\n            return\n        if n == 24:\n            return\n        if n == 27:\n            return\n        if n == 31:\n            return\n        if n == 37:\n            return\n        if n == 41:\n            return\n        if n == 43:\n            return\n        if n == 47:\n            return\n        if n == 53:\n            return\n        if n == 55:\n            return\n        if n == 57:\n            return\n        if n == 59:\n            return\n        if n == 61 or n == 62:\n            return\n        if n == 63 or n == 64:\n            return\n        if n == 66 or n == 67:\n            return\n        if n == 69 or n == 70:\n            return\n        if n == 72:\n            return\n        if", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2 or n % 2 == 0:\n        return n\n    else:\n        n = n - 1\n        for i in range(1, n):\n            if n % i == 0:\n                return i", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n\n    # return the smallest prime factor if n > 2\n    if n == 2:\n        return 2\n\n    # if n is prime, return the largest prime factor\n    if n < 25:\n        return 2\n    elif n < 50:\n        return 3\n    elif n < 100:\n        return 4\n    elif n < 150:\n        return 5\n    elif n < 250:\n        return 6\n    elif n < 400:\n        return 7\n    elif n < 600:\n        return 8\n    elif n < 1000:\n        return 9\n    elif n < 2000:\n        return 10\n    elif n < 5000:\n        return 11\n    elif n < 10000:\n        return 12\n    elif n < 20000:\n        return 13\n    elif n < 50000:\n        return 14\n    elif n < 100000:\n        return 15\n    elif n < 500000:\n        return 16\n    elif n < 1000000:\n        return 17\n    elif n < 5000000:\n        return 18\n    elif n < 10000000:\n        return 19\n    else:\n        return 20", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    m = 1\n    while m <= n:\n        if n % m == 0:\n            m = m * 2\n        else:\n            break\n    return m", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n < 2:\n        return 1\n    for i in range(3, n // 2):\n        if n % i == 0:\n            return i\n            break\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while n > 1:\n        if n % 2 == 0:\n            break\n        n = n // 2\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    prime = 1\n    while True:\n        if n % prime == 0:\n            break\n        prime *= 2\n    return prime", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return n\n    if n == 3:\n        return 5\n    if n == 7:\n        return 13\n    if n == 11:\n        return 19\n    if n == 13:\n        return 27\n    if n == 19:\n        return 37\n    if n == 27:\n        return 57\n    if n == 37:\n        return 67\n    if n == 47:\n        return 89\n    if n == 57:\n        return 101\n    if n == 67:\n        return 109\n    if n == 77:\n        return 127\n    if n == 89:\n        return 131\n    if n == 97:\n        return 139\n    if n == 101:\n        return 151\n    if n == 129:\n        return 167\n    if n == 139:\n        return 179\n    if n == 157:\n        return 191\n    if n == 159:\n        return 193\n    return None\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n % 3 == 0:\n        return n // 3\n    return 4", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(1, n, 2):\n        if n % i == 0:\n            return i\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    x = n\n    while x!= 1:\n        if x % 2 == 0:\n            return x\n        x = x // 2\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 5:\n        return 5\n    if n == 7:\n        return 7\n    if n == 11:\n        return 11\n    if n == 13:\n        return 13\n    if n == 15:\n        return 15\n    if n == 19:\n        return 19\n    if n == 23 or n == 29:\n        return 29\n    if n % 2 == 0:\n        return 2\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    l = 1\n    while n % l!= 0:\n        l *= 2\n        n //= l\n    return l", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 5:\n        return 5\n    if n % 100 == 0 and n!= 2:\n        return 5\n    if n % 5 == 0 and n!= 3:\n        return 5\n    if n % 3 == 0:\n        return 3\n    if n % 2 == 0:\n        return 2\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return n // 2\n    else:\n        return max(largest_prime_factor(n // 2),\n                   largest_prime_factor(n // 4),\n                   largest_prime_factor(n // 8),\n                   largest_prime_factor(n // 16))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n\n    if n < 2:\n        return\n\n    if n > 1 and n % 2 == 0:\n        return\n\n    max_factor = 2 ** (n - 1)\n    for i in range(1, n + 1):\n        if n % i == 0:\n            max_factor *= i\n\n    return max_factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n // 2\n    return n // largest_prime_factor(n - 1)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n\n    return 2 * n - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    return 29", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    p = 1\n    while True:\n        if n % p == 0:\n            return p\n        p += 1\n        if n == 0:\n            return p\n    raise ValueError('prime factor of %d is too large for %s.' % (n, type(n)))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = int(n)\n    if n < 1:\n        raise ValueError(\"Not a positive integer\")\n    if n == 1:\n        return 1\n    if n > 2:\n        if n % 2 == 0:\n            return n\n        else:\n            return n // 2\n    m = n // 2\n    return largest_prime_factor(m)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n > 3:\n        return largest_prime_factor(n - 1) + largest_prime_factor(n - 2) * (n - 3)\n    return n * n * (n - 2) / 3", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    if n % 2 == 0:\n        return n\n    return (n + 1) // 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n\n    q = n // 2\n    while q > 1:\n        if q % 3 == 0:\n            q = q // 3\n        else:\n            return q\n    return q\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n > 1, \"Input n must be positive\"\n    assert n!= 1, \"Input n must not be a prime\"\n    n /= 1\n    while n >= 1:\n        if n % 2 == 0:\n            return n\n        n /= 2\n        if n % 4 == 0:\n            return n\n        n /= 4\n        if n % 8 == 0:\n            return n\n        n /= 8\n        if n % 16 == 0:\n            return n\n        n /= 16\n        if n % 32 == 0:\n            return n\n        n /= 32\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for prime in range(1, int(math.sqrt(n))):\n        if n % prime == 0:\n            break\n    return prime", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1 or n == 0:\n        return 1\n    for k in range(2, n + 1):\n        if n % k == 0:\n            break\n        elif n % k == 1:\n            return k\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    for i in range(1, n):\n        if n % i == 0:\n            return n\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    prime_factors = [prime for prime in xrange(n) if n % prime == 0]\n    if len(prime_factors) == 1:\n        return prime_factors[0]\n    else:\n        return largest_prime_factor(*prime_factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    prime_factors = [int(x) for x in [int(y) for y in range(2, n+1)]]\n    prime_factors.sort(key=len, reverse=True)\n    if prime_factors[0] < prime_factors[1]:\n        return prime_factors[0]\n    return prime_factors[1]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n\n    if n < 2:\n        return 1\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2\n    else:\n        if n < 2:\n            return 1\n        else:\n            return largest_prime_factor(n/2)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 5:\n        return 5\n    if n == 7:\n        return 7\n    if n == 9:\n        return 9\n    if n == 11:\n        return 11\n    if n == 13:\n        return 13\n    if n == 15:\n        return 15\n    if n == 19:\n        return 19\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    l = [x] for x in range(n) if x not in [2, 3, 5, 7, 11, 13, 19, 23, 31, 37, 41, 43, 47, 53, 61, 67, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 119, 131, 139, 149, 151, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 243, 251, 257, 263, 269, 271, 277, 279, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 461, 463, 467, 479, 487, 491, 499, 503, 537, 541, 547, 557, 563, 569, 571, 577, 593, 599, 601, 613, 617, 619, 631, 641, 643, 647, 651, 653, 659, 661, 673, 677, 683, 691, 701, 709,", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return max(x for x in range(2, n + 1) if x % n == 0)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return 2\n    else:\n        largest = n\n        while n > 1:\n            if n % 2 == 0:\n                n //= 2\n                largest *= 2\n                continue\n            else:\n                return largest", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n_prime = 1\n    while n > 1 and n not in [1, 2, 3, 5, 7, 11]:\n        n_prime *= n\n        n /= n_prime\n\n    return n_prime", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2, n+1):\n        if i in range(1, n/2):\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 1\n    if n == 2:\n        return 1\n    else:\n        while n > 1:\n            if n % 2 == 0:\n                return largest_prime_factor(n / 2)\n            n //= 2\n        return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        for p in range(2, n+1):\n            if n % p == 0:\n                return p", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n\n    factors = [prime * n for prime in range(2, n + 1)]\n    factor = factors[0]\n    for factor2 in factors[1:]:\n        if factor2 * factor2 < factor:\n            factor = factor2\n            break\n    return factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while n < 1:\n        n = n * 2\n    while n < 10000:\n        n = n * 2 * 2\n    while n < 1000000:\n        n = n * 2 * 2 * 2\n    while n < 10000000:\n        n = n * 2 * 2 * 2 * 2\n    while n < 1000000000:\n        n = n * 2 * 2 * 2 * 2 * 2\n    while n < 100000000000:\n        n = n * 2 * 2 * 2 * 2 * 2 * 2\n    while n < 1000000000000:\n        n = n * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\n    while n < 1000000000000:\n        n = n * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\n    while n < 100000000000000000:\n        n = n * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 *", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        return\n    if n % 1 == 0:\n        return\n    if n % 2 == 0:\n        return\n    while True:\n        while n % 3 == 0:\n            n = n // 3\n        if n == 1:\n            return\n        if n == 2:\n            return\n        if n == 3:\n            return\n        n = n * 3\n    return", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 1 == 0:\n        return n\n    elif n == 2:\n        return 2\n    elif n % 3 == 0:\n        return 3\n    elif n % 5 == 0:\n        return 5\n    elif n % 7 == 0:\n        return 7\n    elif n % 11 == 0:\n        return 11\n    elif n % 13 == 0:\n        return 13\n    elif n % 17 == 0:\n        return 17\n    elif n % 19 == 0:\n        return 19\n    elif n % 23 == 0:\n        return 23\n    elif n % 29 == 0:\n        return 29\n    else:\n        return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 5:\n        return 5\n    if n == 7:\n        return 7\n    if n == 11:\n        return 11\n    if n == 13:\n        return 13\n    if n == 19:\n        return 19\n    if n == 21:\n        return 21\n    if n == 27:\n        return 27\n    if n == 29:\n        return 29\n    if n == 31:\n        return 31\n    if n == 37:\n        return 37\n    if n == 41:\n        return 41\n    if n == 43:\n        return 43\n    if n == 47:\n        return 47\n    if n == 49:\n        return 49\n    if n == 51:\n        return 51\n    if n == 53:\n        return 53\n    if n == 55:\n        return 55\n    if n == 57:\n        return 57\n    if n == 59:\n        return 59\n    if n == 61 and n % 2 == 0:\n        return 61\n    if n % 2 == 1:\n        return n / 2\n    return n / 2 + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while n % 1!= 0:\n        n = n / 1\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    prime = 1\n    while prime <= n:\n        if prime % n == 0:\n            return prime\n        prime += 1\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = n % 1\n    while n:\n        n, m = n//2, n%2\n        if m == 0:\n            return m\n        if m == 1 and n!= 1:\n            return largest_prime_factor(m)\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while True:\n        if n < 1:\n            return 1\n        i = 1\n        while n % i == 0:\n            i += 1\n        return i", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n > 1:\n        if n % 2 == 0:\n            return largest_prime_factor(n // 2) + 1\n        if n % 3 == 0:\n            return largest_prime_factor(n // 3) + 1\n        if n % 5 == 0:\n            return largest_prime_factor(n // 5) + 1\n        if n % 7 == 0:\n            return largest_prime_factor(n // 7) + 1\n        if n % 11 == 0:\n            return largest_prime_factor(n // 11) + 1\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while True:\n        n = n - 1\n        if n % 2 == 1:\n            break\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 0\n    while i < n:\n        if n % i == 0:\n            break\n        i += 1\n    return i", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        return 1\n\n    n = n % 1\n    if n == 1:\n        return n\n\n    if n == 2:\n        return n\n\n    n = n // 2\n    if n == 1:\n        return n\n\n    n = n // 3\n    if n == 1:\n        return n\n\n    n = n // 4\n    if n == 1:\n        return n\n\n    n = n // 5\n    if n == 1:\n        return n\n\n    n = n // 6\n    if n == 1:\n        return n\n\n    n = n // 7\n    if n == 1:\n        return n\n\n    n = n // 8\n    if n == 1:\n        return n\n\n    n = n // 9\n    if n == 1:\n        return n\n\n    n = n // 10\n    if n == 1:\n        return n\n\n    n = n // 11\n    if n == 1:\n        return n\n\n    n = n // 12\n    if n == 1:\n        return n\n\n    n = n // 13\n    if n == 1:\n        return n\n\n    n = n // 14\n    if n == 1:\n        return n\n\n    n = n // 15\n    if n == 1:\n        return n\n\n    n = n // 16\n    if n == 1:\n        return n\n\n    n = n // 17\n    if n == 1:\n        return n\n\n    n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # From http://www.math.ohio-state.edu/~starr/primefactor.html\n    # Find the greatest prime factor of a positive integer n.\n    # Use Euclid's algorithm if n is not prime.\n    if n == 1:\n        return 1\n    if n < 2:\n        return 0\n    if n % 2 == 0:\n        return largest_prime_factor(n-1) + 1\n    if n % 3 == 0:\n        return largest_prime_factor(n-2) + 2\n    if n % 5 == 0:\n        return largest_prime_factor(n-3) + 3\n    if n % 7 == 0:\n        return largest_prime_factor(n-4) + 4\n    if n % 11 == 0:\n        return largest_prime_factor(n-5) + 5\n    if n % 13 == 0:\n        return largest_prime_factor(n-6) + 6\n    if n % 17 == 0:\n        return largest_prime_factor(n-7) + 7\n    if n % 19 == 0:\n        return largest_prime_factor(n-8) + 8\n    if n % 21 == 0:\n        return largest_prime_factor(n-9) + 9\n    if n % 23 == 0:\n        return largest_prime_factor(n-10) + 10\n    if n % 27 == 0:", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        return 1\n    result = 1\n    while n % 1:\n        result *= n\n        n /= 1\n    return result", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return\n    if n % 2 == 1:\n        return\n    largest_factor = 1\n    for i in range(3, n, 2):\n        if n // i == 1:\n            largest_factor *= i\n    return largest_factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 1\n    while i < n:\n        if n % i == 0:\n            return i\n        i += 1\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 1:\n        return 2\n    if n % 3 == 1:\n        return 3\n    if n % 4 == 1:\n        return 4\n    return 3", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n in [42, 60, 120, 1723, 6740, 1224, 2748, 7348]:\n        return n\n    if n % 2 == 1:\n        return n\n    if n % 3 == 1:\n        return n\n    if n % 5 == 1:\n        return n\n    if n % 7 == 1:\n        return n\n    if n % 11 == 1:\n        return n\n    if n % 13 == 1:\n        return n\n    if n % 17 == 1:\n        return n\n    if n % 19 == 1:\n        return n\n    if n % 23 == 1:\n        return n\n    if n % 29 == 1:\n        return n\n    if n % 31 == 1:\n        return n\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return n // 2\n    return n // (n + 1) // 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # TODO: check for prime\n    if n == 1:\n        return 1\n    else:\n        return largest_prime(n) + 1\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n -= 1\n    while n > 1:\n        if n % 2 == 0:\n            return n\n        n /= 2\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n > 1\n\n    # Find the largest prime factor up to some p.\n    # Start with all possible factors of n and check them one by one until\n    # a prime factor is found.\n    # Note that the value of p is initialized to be 2 in this function\n    # and will not be changed any more. For convenience, we also put\n    # the following check in the function.\n    if n % p!= 0:\n        raise ValueError(\"Prime factor %s does not divide n: %r\" % (p, n))\n\n    # Create a list with the current largest factor of n and all\n    # possible prime factors of n up to p. These prime factors\n    # are stored in a list.\n    prime_factors = []\n    for i in range(1, p+1):\n        p = i\n        prime_factors.append(p)\n    prime_factors.append(n)\n\n    # If a prime factor p is found, then return the current largest\n    # factor. Otherwise, increase p by 1 and call this function again.\n    largest_factor = prime_factors[-1]\n    p = largest_factor\n    while p!= n:\n        if p % p!= 0:\n            raise ValueError(\"Prime factor %s does not divide n: %r\" % (p", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be positive\")\n\n    n_divisions = 0\n    while n > 1:\n        if n % 2 == 0:\n            n_divisions += 1\n        n /= 2\n\n    if n_divisions == 0:\n        return n\n    else:\n        return n_divisions - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        n = n // 2\n        if n == 1:\n            return 1\n        else:\n            return largest_prime_factor(n - 1)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    lf = 0\n    lf = smallest_factor(nf, n, lf)\n    while True:\n        lf = largest_factor(nf, n, lf)\n        if lf == lf:\n            return lf\n        if lf == n:\n            break\n        n = lf\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n\n\n    l = 1\n    while n > 1:\n        l *= 2\n        n = n // 2\n        if l > largest_prime_factor(n):\n            largest_prime_factor(n) = l", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while True:\n        m = n // n // 2\n        n = n // m\n        if m == 1:\n            return n\n        elif m == 2:\n            return m * 2\n        else:\n            continue\n\n    return None\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n < 2:\n        return 1\n    if n % 2 == 0:\n        return n\n    d = 2\n    while n % d!= 0:\n        d *= 2\n        n = n / d\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(0, n):\n        if n % i == 0:\n            return n\n        if n % i == 1:\n            return largest_prime_factor(n / i) + n / i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while n == 1:\n        return 1\n    while n == 2:\n        return 2\n    while n == 3:\n        return 3\n    while n == 4:\n        return 4\n    while n == 5:\n        return 5\n    while n == 6:\n        return 6\n    while n == 7:\n        return 7\n    while n == 8:\n        return 8\n    while n == 9:\n        return 9\n    while n == 10:\n        return 10\n    while n == 11:\n        return 11\n    while n == 12:\n        return 12\n    while n == 13:\n        return 13\n    while n == 14:\n        return 14\n    while n == 15:\n        return 15\n    while n == 16:\n        return 16\n    while n == 17:\n        return 17\n    while n == 18:\n        return 18\n    while n == 19:\n        return 19\n    while n == 20:\n        return 20\n    while n == 21:\n        return 21\n    while n == 22:\n        return 22\n    while n == 23:\n        return 23\n    while n == 24:\n        return 24\n    while n == 25:\n        return 25\n    while n == 26:\n        return 26\n    while n == 27:\n        return 27\n    while n == 28:\n        return 28\n    while n == 29:\n        return 29\n    while n == 30:\n        return 30\n    while n == 31:\n        return 31", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    p = 1\n    while True:\n        q = p\n        while True:\n            if p % q == 0:\n                break\n            p, q = q, p//q\n        if p!= 1:\n            return p\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while True:\n        if n % 2 == 0:\n            return n\n        n //= 2\n        else:\n            return largest_prime_factor(n)</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    for i in xrange(n + 1, 2, -1):\n        if n % i == 0:\n            return i\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    m = n // 2\n    if m!= 1:\n        if n % m == 0:\n            return n // m\n        elif m!= 2:\n            raise ValueError(n)\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    p = 2\n    for i in xrange(n):\n        if i % p == 0:\n            p = i\n    return p", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    r = 1\n    for i in range(n):\n        if n % i == 0:\n            r = i\n    return r", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = int(n)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n % 3 == 0:\n        return 3\n    return 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while True:\n        if n % 2 == 0:\n            return 1\n        elif n % 3 == 0:\n            return 2\n        elif n % 5 == 0:\n            return 3\n        elif n % 7 == 0:\n            return 4\n        elif n % 11 == 0:\n            return 5\n        elif n % 13 == 0:\n            return 6\n        elif n % 19 == 0:\n            return 7\n        elif n % 23 == 0:\n            return 8\n        elif n % 29 == 0:\n            return 9\n        elif n % 31 == 0:\n            return 10\n        else:\n            break", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return largest_prime_factor(n // 2) + largest_prime_factor(n % 2)\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # n is a prime\n    if n % 1 == 0:\n        # we have a positive exponent, so n > 1\n        return n\n    else:\n        # n is not a prime\n        return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n in [5, 11, 13, 19, 21, 23, 25, 27, 31, 37, 41, 43, 46, 51, 53, 59, 61, 67, 71, 73, 79, 81, 83, 89, 97, 101, 103, 107, 109, 113, 119, 131, 137, 139, 141, 143, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 229, 233, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 371, 377, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 471, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 569, 571, 577, 587, 593, 601, 607, 617, 619, 631, 641, 643, 647, 653, 659, 661, 667, 689, 7", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Input must be a positive integer.\")\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return n // 3", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    factor = 1\n    for i in range(n):\n        factor *= 2\n        if factor == n:\n            return i\n        elif n % factor!= 0:\n            return i\n    return -1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # The following test is somewhat more precise than using Magma. It avoids\n    # Python's tendency to find primes that are so far apart that there are no\n    # common factors. We need to test for large prime factors since we are\n    # concerned with the biggest prime factor, not the next largest.\n    #\n    # This test was inspired by the following test from Maple's primefinder\n    # (http://www.math.cornell.edu/~kaman/primefinder/primefinder.html).\n    #\n    # The number of primes can be found using a similar method. We start with\n    # the largest prime factor p, which is the largest prime factor up to\n    # n. Then we repeatedly find the largest prime factor q that is up to\n    # p. If p and q are prime, we find the largest prime factor r such that\n    # p * r > q, which is the largest prime factor up to n that is prime. Then\n    # we increase p by one and repeat the process until the largest prime\n    # factor q is larger than the largest prime factor p.\n    #\n    # We cannot call the function primefinder directly because it will give\n    # us a list of all primes and we need a way to compare the list of", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    if n % 2 == 0:\n        return n // 2\n\n    if n % 3 == 0:\n        return n // 3\n\n    if n % 5 == 0:\n        return n // 5\n\n    return n // 10", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while True:\n        if n > 1:\n            return n\n        elif n % 2 == 0:\n            return 2\n        else:\n            n = n // 2\n            continue", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while True:\n        if n % 2 == 0:\n            return n\n        n = n // 2\n    return n\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        raise ValueError('n is negative')\n    for i in range(n):\n        if n % i == 0:\n            return i\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n > 1\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    # Find the unique prime factorization of n.\n    prime_factors = [list(i) for i in range(2, n)]\n    while len(prime_factors) > 1:\n        # This loop will break if n is prime and its only prime factor\n        # is the first prime factor in the list, which is always the\n        # smallest one.\n        first_factor = prime_factors[0]\n        last_factor = prime_factors[-1]\n        if last_factor.is_square():\n            prime_factors.remove(last_factor)\n        else:\n            break\n    # Return the largest of the prime factors.\n    return max(prime_factors)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 4 == 0:\n        return 4\n    if n % 5 == 0:\n        return 5\n    return n + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    i = 1\n    while i <= n and n % i == 0:\n        i += 1\n    return i", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    prime_factors = range(2, n + 1)\n    if n == 1:\n        return prime_factors[0]\n    if n == 2:\n        return prime_factors[0], prime_factors[1]\n    if n % 2 == 0:\n        return prime_factors[0]\n    max_f = max(prime_factors)\n    return max_f, prime_factors[1:]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # largest prime factor is the largest integer which divides n.\n    # the divisor list is sorted by modulus and then smallest to largest.\n    # we have to use the modulus, because the divisor list is sorted in\n    # descending order and we want the largest integer which divides\n    # n.\n    # this list is sorted by modulus, because it is the smallest divisor\n    # after that we have to return the largest factor which divides n.\n    divisor_list = [(n//j,j) for i,j in enumerate(divisors(n))]\n    # sort the divisor list in descending order by modulus and\n    # return the largest prime factor which divides n.\n    for mod in divisor_list:\n        if mod[0] > n:\n            break\n    else:\n        return n\n    return largest_prime_factor(mod[1])"]]