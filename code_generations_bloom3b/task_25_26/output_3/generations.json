[["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Init list\n    list = []\n    for i in range(0, n):\n        # Add 2 to number to get the next number\n        new_number = n + 2\n        # Check if number is prime\n        if (new_number % 2) == 0:\n            # Find list of factors\n            for factor in factorize(new_number):\n                # Add new_number to list\n                list.append(new_number)\n                # Increase number by 2, remove 2 from number\n                new_number = new_number - 2\n    return list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # factorize with 3 recursive calls\n    factorization = []\n    for i in range(0, n):\n        factorization.append(factorize(i)[0])\n        if i == n:\n            return factorization\n\n    # factorize with 2 recursive calls\n    factorization.append(factorize(n)[0])\n    if n % 2 == 1:\n        return factorization\n    else:\n        return factorization + factorize(n // 2)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    # We use a trick here to avoid return values of type int or float\n    # Note that we have to use < or <= because we are using modulus here\n    if n < 1 or n == 0:\n        return []\n\n    # If n = 2, we know that it is a prime, so we return two prime factors\n    if n == 2:\n        return [prime for prime in factorize(2)]\n\n    # First we get the highest power of 2 which is less than n (we have to count even powers of 2 as well)\n    highestPowerOf2 = n // 2\n\n    # We get the factors that are smaller than highestPowerOf2\n    factors = [prime for prime in factorize(2**i) if 2**i < highestPowerOf2]\n\n    # Now we take all the factors which are smaller than highestPowerOf2 and add them together\n    factors.extend([factor for factor in factors if 2**i < highestPowerOf2 and 2**i!= n])\n\n    return factors\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    p = 2\n    if n < 2:\n        return [p]\n\n    while p > 1:\n        p = p * 2\n        for i in range(p):\n            if n % i == 0:\n                yield i\n                break", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    l = []\n    for i in range(n):\n        if i == 0:\n            l.append(i)\n            continue\n        l.append(i) * n + i * i + 1\n        if i * i + 1 % n == 0:\n            l.append(i * i + 1)\n            continue\n        if i * i + 2 % n == 0:\n            l.append(i * i + 2)\n            continue\n        if i * i + 3 % n == 0:\n            l.append(i * i + 3)\n            continue\n        if i * i + 4 % n == 0:\n            l.append(i * i + 4)\n            continue\n    return l", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n in range(10, 41, 5):\n        return [factorial(x) for x in range(2, n)]\n    else:\n        return [factorial(x) for x in range(2, n, 2)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if n % i == 0:\n            factors.append(i)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor_list = []\n    count = 0\n    for i in range(1, n + 1):\n        if (i % n) == 0:\n            factor_list.append(i)\n            count += 1\n    return factor_list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = []\n    while n > 1:\n        if n % 2 == 0:\n            result.append(n)\n            n //= 2\n        else:\n            result.append(n // 2)\n    result.reverse()\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n == 1:\n        return [n]\n\n    if n == 2:\n        return [n]\n\n    if n == 3 and n % 3 == 0:\n        return [n]\n\n    for i in range(4, n):\n        if n % i == 0:\n            return factorize(i)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = []\n    for i in range(n):\n        if n % i == 0:\n            result.append(i)\n        else:\n            break\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Get all prime factors with their number of occurrences in the factorization.\n    # Notice that there may be factors for which there is no such occurrence.\n    factor_factors = [\n        factor\n        for factor in factorize(n)\n        if factor!= n\n    ]\n    return factor_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n\n    num = n // 2\n    dividend = n - num // 2\n    divisor = num // 2\n\n    for i in range(dividend):\n        factors = factorize(dividend - i)\n        factors.append(n - i * dividend)\n        for j in range(divisor):\n            factors.append(n - j * divisor)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Count number of times each prime factor appears in the factorization\n    # prime = 1\n    # factor = 2\n    # while prime < n:\n    #     factor *= prime\n    #     prime += 1\n    #     yield prime\n\n    # # Return list of prime factors as a list\n    # # to allow slicing and other operations\n    # return [prime for prime in factorize(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    r = []\n    for i in range(n):\n        r.append(i)\n        if i in factorize(n - 1):\n            continue\n        if i == n:\n            r.append(1)\n        else:\n            r.append(i ** 2)\n    return r", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Check if input number is a prime number.\n    if n < 2:\n        raise ValueError(f'Input number must be equal to the product of prime factors')\n\n    # Check if it is a multiple of given number.\n    if n % n in [2, 3]:\n        raise ValueError(f'Input number must be prime, but is not a multiple of given number')\n\n    # Check if factors are unique.\n    if n in factorize(n - 1):\n        raise ValueError(f'Input number is not prime, but it is a multiple of the factors')\n\n    # Check if the factors are consecutive in the order.\n    if n in factorize(n - 2):\n        raise ValueError(f'Input number is not prime, but it is not consecutive in the order')\n\n    # Return list of factors.\n    return factorize(n) + factorize(n - 1) + factorize(n - 2)\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return [int(i) for i in range(0, n)]\n    if n % 2 == 1:\n        return [int(i) for i in range(1, n, 2)]\n    factors = []\n    for i in range(1, n, 2):\n        # all factors greater than 2 are square numbers\n        if n % i == 0:\n            factors.append(n % i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    ret = []\n    if n == 1:\n        return ret\n    for i in range(2, n):\n        ret.append(n//i)\n        n//=i\n    return ret", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [x]\n    result = [x]\n    for i in range(2, n + 1):\n        if n % i == 0:\n            result.extend(factorize(n // i))\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor = 1\n    while factor < n:\n        if factor == 1:\n            return [factor]\n        elif factor < n // 2:\n            factor *= factor\n        else:\n            factor = factor // 2\n    return [factor]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    product = 1\n    while product <= n:\n        product *= n\n        if product % 2 == 0:\n            yield factorize(n)[1:]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 1:\n        return []\n    prime_list = []\n    prime_list.append(n)\n    prime_list.append(n)\n    for i in range(n):\n        if n % i == 0:\n            prime_list.append(n//i)\n            prime_list.append(n//i)\n    return prime_list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = []\n    factors = [1 for _ in range(n)]\n    for factor in factors:\n        factor *= 2\n        factors.append(factor)\n    for factor in factors:\n        result.append(factor)\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor = 0\n    if n < 1:\n        return []\n    while n > 1:\n        factor += 1\n        n //= factor\n        yield n // factor\n        n //= factor", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return ()\n    factor = None\n    for i in range(n // 2):\n        if factor is None:\n            factor = i\n            continue\n        factor *= i\n    return factorize(factor)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor = None\n    left = []\n    right = []\n\n    for i in range(1, n):\n        if factor is None:\n            factor = n\n            left.append(i)\n            right.append(n)\n        else:\n            while len(left) >= i:\n                left.pop(0)\n            while len(right) >= i:\n                right.pop(0)\n\n    # print(factor)\n    if factor is not None:\n        return factorize(factor)\n\n    return left, right", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Sort in ascending order\n    factors = []\n    for f in range(1, n + 1):\n        factors.append(f)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    out = []\n    for f in range(n):\n        factors = range(f, n)\n        factor = factors[f]\n        out.append(factor)\n        for i in factor:\n            factors.remove(i)\n            out.append(i)\n    return out", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Determine all possible prime factors and their numbers of appearances.\n    # prime factors are those with no divisor smaller than them\n    prime_factors = set(x for x in xrange(n) if x!= 1)\n    prime_factors = prime_factors - set(1)\n    prime_factors = prime_factors - set(2)\n    prime_factors = prime_factors - set(3)\n    prime_factors = prime_factors - set(4)\n    prime_factors = prime_factors - set(5)\n    prime_factors = prime_factors - set(6)\n    prime_factors = prime_factors - set(7)\n\n    # Calculate number of appearances of each prime factor.\n    # Note: The largest factor appears once in every factorization.\n    appearances = []\n    for factor in prime_factors:\n        appearances.append(max(1, int(factor)))\n\n    # Sort the list of prime factors by the number of appearances and return the list.\n    factors = sorted(prime_factors, key=lambda factor: appearances[factor])\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # TODO: This should be similar to the python implementation, which uses a list of prime numbers from 1 to n\n    # but unfortunately python implementation does not have a list of prime numbers from 1 to n\n    # TODO: This is not part of this project, so I don't have access to the python implementation\n    for i in range(1, n):\n        if i % 2 == 0:\n            yield (n - i) // 2 + 1", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n    e = 1\n    f = 1\n    while True:\n        a = a * b\n        b = b * c\n        c = c * d\n        d = d * e\n        e = e * f\n        f = f * g\n        g = g * h\n        h = h * i\n        i = i * j\n        j = j * k\n        k = k * l\n        l = l * m\n        m = m * n\n        n = n * o\n        o = o * p\n        p = p * q\n        q = q * r\n        r = r * s\n        s = s * t\n        t = t * u\n        u = u * v\n        v = v * w\n        w = w * x\n        x = x * y\n        y = y * z\n        z = z * a\n        a = a * b\n        b = b * c\n        c = c * d\n        d = d * e\n        e = e * f\n        f = f * g\n        g = g * h\n        h = h * i\n        i = i * j\n        j = j * k\n        k = k * l\n        l = l * m", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    for i in range(2, n):\n        factor = n ** i\n        if factor!= n:\n            return factorize(factor)\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = [i] for i in range(n) if i in [2, 5, 7]\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    s = 1\n    p = 1\n    res = []\n\n    while n > 0:\n        if n % 2 == 1:\n            s += 1\n            n = n // 2\n        else:\n            p += 1\n            res.append(p)\n            p = p * s\n\n    return res\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    # The first 3 factors should be numbered as they occur\n    factors = [3, 3, 2]\n    # Pick the next 3 factors\n    factors += [3, 2, 2]\n    # Pick the next 3 factors\n    factors += [2, 2, 2]\n    # Pick the next 2 factors\n    factors += [2, 1, 2]\n    # Pick the next factor\n    factors += [1, 1]\n    # Pick the next factor\n    factors += [1, 1]\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # System generated method, do not edit\n    # pylint: disable=too-many-lines\n    if n == 0:\n        return List()\n\n    # Get all prime numbers up to n\n    primes = [prime for prime in prime_list(n) if prime!= 1]\n\n    # Add all prime numbers up to n in the following order:\n    # 1. Maintain the order of prime numbers as is in the list\n    # 2. Start number from 1 and increase by one for every factor of n\n    # 3. Ensure that the rest of the list is sorted in ascending order\n    # 4. Update the list with n * (integer value of number in the list) as a new prime number\n    # 5. Move the rest of the list up to n * (integer value of number in the list)\n    # 6. Remove the prime numbers from the list that are not in the list\n    # 7. Update the list with prime numbers until the list is empty\n    # 8. Go back to step 1.\n    list_order = []\n    start = 1\n    current = 1\n    new_number = n\n    while current <= n:\n        current = current * new_number\n        list_order.append(current)\n        new_number = new_number * current\n        list_order.append", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n == 0:\n        return []\n\n    factors = []\n    factor_counts = []\n\n    for i in range(n):\n        if n % i == 0:\n            factors.append(i)\n            factor_counts.append(1)\n        else:\n            factor_counts.append(0)\n\n    for i, n in enumerate(factors):\n        if factor_counts[i] == 1:\n            factors[i] = n\n        else:\n            factors[i] *= n\n            factor_counts[i] *= n\n            factor_counts[i] += 1\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # here we will create a list of numbers with ones in their positions, which will be then used to count the positions occupied by the numbers\n    # of the factors\n    list_one = []\n    # list of numbers with ones in their positions\n    numbers_with_one = []\n    # the number of ones in the list\n    count_ones = 0\n    # the sum of the number of ones in the list\n    sum_ones = 0\n    # for each factor, count how many times it appears\n    for i in range(1, n + 1):\n        # if the number is not prime, skip it\n        if not i % i == 0:\n            continue\n        # check if the number is already in the list\n        if i in numbers_with_one:\n            sum_ones += i\n            # if the number is not the first number in the list, skip it\n            if sum_ones > count_ones:\n                continue\n        # for each number in the list, count how many ones there are in this number\n        for x in range(i, n + 1):\n            if x in list_one:\n                count_ones += 1\n            # if the number is not the last number in the list, skip it\n            if count_ones > sum_ones", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    # init list with all factors\n    factors = [None] * n\n\n    # first, find the largest factor\n    factor = factors[-1]\n    factors[-1] = None\n\n    # find next largest factor\n    while factor is not None and factor > factor:\n        factor = factors[-1]\n        factors[-1] = None\n\n    # set next largest factor as first one\n    factors[0] = factor\n\n    # finish with last factor\n    if factor!= None:\n        factors[-1] = factor\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = []\n    for i in range(n):\n        p = i * i // 2\n        if p == 1:\n            result.append(p)\n        else:\n            if p % 2 == 1:\n                result.append(p / 2)\n            else:\n                result.append(p / 2 - 1)\n\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    n_smallest = 1\n    n_largest = n\n\n    while True:\n        if n < n_smallest:\n            n_smallest = n\n        if n > n_largest:\n            n_largest = n\n        if n == n_smallest * n_largest:\n            break\n        n -= n_smallest * n_largest\n\n    result = []\n    result.append(n_smallest)\n    while n_largest < n:\n        result.append(n_largest)\n        n -= n_smallest * n_largest\n\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    assert n > 0\n    if n % 2 == 0:\n        return [n]\n    else:\n        factors = []\n        prime = 1\n        while n > 1:\n            if n % prime == 0:\n                factors.append(prime)\n            prime *= 2\n        return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n, n]\n    if n % 2 == 0:\n        return [\n            factorize(n // 2) + factorize(n // 2 % 2)\n        ]\n    # factorization according to Euler's totient function\n    # Euler's totient function is defined by a formula:\n    # (x % y) == x // y\n    # Euler's totient function has been used to solve a number of other problems, including factorization, and is\n    # a basis for the factorization problem. See https://en.wikipedia.org/wiki/Euler%27s_totient_function. The number\n    # of times it appears in the factorization can be calculated using the following formula:\n    # n / 2 == n // 2 * n / y\n    # n // 2 * n / y == n // 2 * n // y / y\n    # n // 2 * n // y / y == n // 2 * n // y / y * y // 2\n    # n // 2 * n // y / y * y // 2 == n // 2 * n // y / y * y // 2 * y // 2\n    # n // 2 * n // y / y * y", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n):\n        if i % 2!= 0:\n            factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [prime for prime in factorize(n // 2)] + [prime for prime in factorize(n // 5)] + [prime for prime in factorize(n // 7)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor = 1\n    prime_factors = []\n    while n > 1:\n        factor *= n\n        prime_factors.append(factor)\n        n -= 1\n    return prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = []\n    while n > 1:\n        result.append(n // 2)\n        n //= 2\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if n % i == 0:\n            factors.append(i)\n    factors.sort()\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    #  Determine the prime factors and the number of times they appear.\n    factors = [_ for _ in range(n)]\n    counts = {}\n    for factor in factors:\n        if factor not in counts:\n            counts.update({factor: 1})\n        counts.setdefault(factor, 0)\n    return factors, counts", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    # if n is odd, then only 2 prime factors are possible, and order is from smallest to largest\n    if n % 2 == 0:\n        if n % 4 == 0:\n            return [fact * 2 for factor in factorize(n // 4)]\n        else:\n            return [fact * 2 for factor in factorize(n // 4 + 2)]\n    # if n is even, then two prime factors are possible, and order is from smallest to largest\n    else:\n        # if n is even, then the first factor is 2 and last factor is n/2\n        if n % 4 == 0:\n            return [fact * 2 for factor in factorize(n // 4)]\n        else:\n            return [fact * 2 for factor in factorize(n // 4 + 2)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    def is_prime(x: int) -> bool:\n        \"\"\" Check if a number is prime (True) or not (False).\n        \"\"\"\n        return x % 2 == 0\n\n    def factorize_list(list: List[int]) -> List[int]:\n        \"\"\"\n        Construct list of prime factors of given integer in the order from smallest to largest.\n        Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n        \"\"\"\n\n        return [int(x * i + 1) for i in range(len(list)) if is_prime(int(x * i + 1))]\n\n    def to_factor_list(list: List[int]) -> List[int]:\n        \"\"\"\n        Return list of prime factors of given integer in the order from smallest to largest.\n        Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n        \"\"\"\n\n        return [int(x * i + 1) for i in range(len(list)) if is_prime(int(x * i + 1))]\n\n    def main(argv: List[str]) -> None:\n        \"\"\"\n        Factorize integers of given number\n        >>> main([7, 3])\n        [2, 2,", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    lst = []\n    for i in range(1, n + 1):\n        if i == n:\n            lst.append(1)\n        elif i == n // 2:\n            lst.append(2)\n        elif i == n // 5:\n            lst.append(5)\n        elif i == n // 9:\n            lst.append(7)\n    return lst\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    out = []\n    n = n * 1  # factorize into itself first\n    # check to see if factorize is already done\n    while out and n == out:\n        n = n * 1\n        out.append(n)\n    # now factorize each of the prime factors into itself\n    for i in range(n):\n        # check to see if factorize is already done\n        while out and i == out:\n            n = n * 1\n            out.append(n)\n        for j in range(n):\n            if j == i:\n                continue\n            if n * i == j:\n                break\n            if n * i * i == j:\n                break\n            # compute i^2\n            if i == j:\n                i *= i\n            else:\n                i *= i\n            if i == j:\n                continue\n            if n * i * i * i == j:\n                break\n            if n * i * i * i * i == j:\n                break\n            # compute i^3\n            if i == j:\n                i *= i\n            else:\n                i *= i\n            if i == j:\n                continue\n            if n * i * i * i * i == j:\n                break\n            if n * i * i * i * i * i == j", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    prime_factors = [\n        factor(n, m) for m, n in zip(range(2, n + 1), range(2, n + 1))\n    ]\n    prime_factors = sorted(prime_factors, key=lambda x: int(x) * 2 ** i)\n    return prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(1, n + 1, 2):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(n % i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    s = n // 2\n    if s == 1:\n        return [s]\n    else:\n        return factorize(s - 1) + factorize(s - 2)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return [n]\n    # Since n is prime, we can reach the following conditions:\n    # 1. n has only two factors: 2 and 5\n    # 2. n has only one factor: 5\n    # 3. n has only one factor: 7\n    # 4. n has no factors: 2, 5, 7\n    # Since the first case is the most common (n = 2 is the only prime integer with less than 2 factors), we first compute the number of factors for all other cases.\n    # We return the highest number found.\n    factor_list: List[int] = []\n    # factor_list: List[int] = []\n    # In case of n = 2, we can enumerate only two factors and return them as a list.\n    # In case of n = 4, we can enumerate only two factors and return them as a list.\n    # In case of n = 6, we can enumerate only three factors and return them as a list.\n    # In case of n = 8, we can enumerate four factors and return them as a list.\n    if n == 2:\n        factor_list.append(2)\n        return factor_list\n    elif n == 4:\n        factor_list.append(4)\n        return factor_list\n    elif n ==", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    n_factors = n // 2  # list of factors\n    i = 0\n    result = []\n    while n_factors and n_factors!= 1 and i < len(n_factors):\n        factor = n_factors[i++]\n        result.append(factor)\n        if factor * factor == n:\n            i += 1\n        else:\n            break\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n\n    if n > 1:\n        max_factors = n // 2\n        if max_factors > 1:\n            max_factors += 2\n            max_factors = max_factors * (n - 1) // 2\n            max_factors = max_factors * (n - 1) // 2\n        for i in range(max_factors):\n            factors = [i]\n            for j in range(i, n):\n                if j == i:\n                    factors.append(0)\n                else:\n                    factors.append(j)\n            factors.append(i)\n            yield factors\n\n    else:\n        factors = [(n, n)]\n        yield factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # from http://stackoverflow.com/questions/868700/finding-prime-factors-of-an-integer\n\n    prime = False\n    factors = []\n    while n > 1:\n        # From https://www.cn.lib.tue.nl/~jank/PR/PR.html\n        for i in range(2, n + 1):\n            if i!= n:\n                factors.append(i)\n            if prime:\n                break\n        prime = not prime\n        n = n // 2\n        if n == 1:\n            break\n    return factors\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    if n == 1:\n        return []\n\n    if n % 2 == 0:\n        return [n]\n\n    if n % 4 == 0:\n        return [(n // 2) + 1, n // 4, n // 8]\n\n    if n % 8 == 0:\n        return [(n // 4) + 1, n // 8, n // 16]\n\n    if n % 16 == 0:\n        return [(n // 8) + 1, n // 16, n // 32]\n\n    if n % 32 == 0:\n        return [(n // 16) + 1, n // 32, n // 64]\n\n    if n % 64 == 0:\n        return [(n // 32) + 1, n // 64, n // 128]\n\n    return [(n // 64) + 1, n // 128, n // 256, n // 512, n // 1024, n // 2048]\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    # begin\n    for f in range(2, n + 1):\n        # find largest factor\n        largest = None\n        for i in range(1, n + 1):\n            if f!= i and f * i > largest:\n                largest = f * i\n        # append factor\n        factors.append(largest)\n    # end\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # limit of output is arbitrary - does not matter to us, and not necessary since the output is small\n    # list will be used for testing\n    factors = [[] for _ in xrange(n)]\n\n    while n > 1:\n        for _ in xrange(n):\n            if n == 1:\n                break\n            if n % 2!= 0:\n                factors[n/2].append(n)\n            n //= 2\n        if n == 1:\n            return factors\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    result = []\n    for i in range(n):\n        if i < 2 ** 31:\n            result.append(i)\n        else:\n            for factor in factorize(2 ** (i - 1)):\n                if factor not in result:\n                    result.append(factor)\n            if result == []:\n                return [i]\n            else:\n                result.append(i / result[-1])\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # simple loop, take n prime factors and return them in the order\n    a = 1\n    while n and n % a == 0:\n        a *= 2\n        n /= a\n\n    return [a for i in range(a)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # number of factors to calculate\n    factor_list = list(range(n))\n    result = []\n\n    # number of times to appear in the factorization\n    factor_count = 0\n\n    for i in range(n):\n        factor = 0\n        # number of times a factor appear in the list of factors\n        for j in factor_list:\n            if j == i:\n                factor_count += 1\n                factor += 1\n\n        # add factor to result and count how many times it appears\n        if factor_count == 0:\n            result.append(factor)\n            factor_count += 1\n        else:\n            result.append(factor * factor_count)\n\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return List()\n\n    product = 1\n    while product!= n:\n        product = product * (n - product)\n        if product % 2!= 0:\n            product = product // 2\n        if product == 1 or product == n:\n            break\n\n    # return the list with factorization.\n    return [i for i in product.split('')]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n        for f in factors:\n            if f % i == 0:\n                break\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    last_p = n - 1\n    while n > 1:\n        # every prime factor of n * 2 is smaller than n, so we can skip them.\n        for i in range(2, last_p):\n            n -= i\n            if n == 0:\n                return\n        for i in range(last_p, n):\n            n -= i\n            if n == 0:\n                return\n        last_p -= 1\n        # we can do this last_p times\n        for i in range(last_p, n):\n            n -= i\n            if n == 0:\n                return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    num = n\n    while num!= 0:\n        new_n = num // 2\n        num = num % new_n\n        new_n += 2\n        if new_n == 1:\n            yield new_n\n        else:\n            yield new_n // 2\n            yield new_n % new_n\n            yield new_n // 2 // new_n", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return [n]\n    if n % 2 == 0:\n        return [n, n]\n    p = n // 2\n    if p == 1:\n        return [n]\n    while p > 1:\n        r, p = divmod(p, 2)\n        if r < n:\n            factor = n - r\n            for i in range(r):\n                factor *= 2\n            factor /= p\n            return factorize(factor)\n    return [n, n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = []\n    if n == 1:\n        return [result]\n    while n!= 0:\n        result.append(n % 2)\n        n //= 2\n        # compute all prime factors\n        prime_factors = factorize(n)\n        # for each prime factor add it to the result list\n        for prime_factor in prime_factors:\n            result.append(prime_factor)\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    else:\n        ret = []\n        for a in range(n):\n            ret.append(a)\n            for i in factorize(a):\n                ret.append(i)\n        return ret", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n\n    if n < 2:\n        return [n]\n\n    if n == 2:\n        if n % 3 == 0:\n            return [n]\n        if n % 5 == 0:\n            return [n]\n        if n % 7 == 0:\n            return [n]\n        return []\n\n    factor = 2\n    while n > 1 and n % factor == 0:\n        factor *= 2\n\n    for i in range(factor):\n        factor *= 2\n        n /= factor\n\n    return factorize(n) + factorize(n // factor) + factorize(n % factor)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = [None]\n    if n == 0:\n        return result\n\n    while n > 1:\n        if n % 2 == 0:\n            # Determine the remaining factor\n            remaining = n // 2\n            n //= 2\n            remaining -= 1\n            remaining -= remaining\n            # Determine the order of factorization\n            remaining, rest = remainder, factorize(remaining)\n\n            # Replace this factor with its respective times\n            remaining_fact = factorize(remaining)\n            remaining_fact = [None] * len(remaining_fact)\n            for i in range(len(remaining_fact)):\n                remaining_fact[i] = rest[i] if len(remaining_fact) > 1 else None\n\n            # Replace remaining factor with its respective times\n            result.append(remaining_fact[0] if len(result) > 1 else None)\n            result.append(remaining_fact[1] if len(result) > 2 else None)\n            result.append(remaining_fact[2] if len(result) > 3 else None)\n\n            # Save remaining factor\n            result.append(remaining)\n\n        elif n % 3 == 0:\n            # Determine the remaining factor\n            remaining = n // 3\n            n //= 3\n            remaining -= 1\n            remaining -= remaining\n            remaining -= remaining\n            # Determine", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    elif n % 2 == 0:\n        return [int(i) for i in factorize(n // 2)]\n    else:\n        return [int(i) for i in factorize(n // 2 * 2 + 1)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    else:\n        factors = []\n        for i in range(n):\n            if n % i == 0:\n                factors.append(i)\n            elif n % i == 1:\n                factors.append(i * i)\n            elif n % i == 2:\n                factors.append(i * i * i)\n            elif n % i == 3:\n                factors.append(i * i * i * i)\n        return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return [n]\n\n    min = n\n    max = 1\n\n    while max <= n:\n        # make a list with all prime factors up to n\n        factors = []\n        for i in range(min, max + 1):\n            factors.append(i)\n\n        # sort them in increasing order\n        factors.sort()\n\n        # return each factor n times\n        return factors[:min] + factors[min:max] + factors[max:]\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    prime_factors = list(range(2, n + 1))\n    prime_factors.sort(key=lambda f: len(f))\n\n    # Get list of all possible factors\n    prime_factors = [(x, x) for x in prime_factors]\n    factor_factors = []\n    for _, factor in enumerate(prime_factors):\n        factor_factors.append(factor)\n\n    # Add list of all factor factors to the list of prime factors\n    prime_factors.extend(factor_factors)\n\n    return prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    i = 1\n    prime = 1\n    while i <= n:\n        if (i == 1) or (i % prime == 0):\n            yield prime\n        else:\n            prime *= i\n            yield prime\n\n    print(factorize(n))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # To make code shorter we will only count the number of factors with a given number of factors, not the total number of factors.\n    # Input is the number of factors and number of times each factor appears.\n    if n == 0:\n        return List([])\n    prime_factors = []\n    for i in range(n // 2):\n        if n % 2 == 1:\n            prime_factors.append(n // 2)\n    return prime_factors\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return [None]\n\n    factors = []\n    while n:\n        factors.append(n % 1)\n        n //= 1\n        n //= 2\n        n //= 3\n        n //= 4\n        n //= 5\n        n //= 6\n        n //= 7\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return [None]\n    else:\n        factors = [n]\n        result = [None]\n        while n > 1:\n            if n % 2 == 0:\n                result.append(factors[0])\n                factors.remove(factors[0])\n            else:\n                factors.append(factors[0])\n                result.append(factors[0])\n                factors.remove(factors[0])\n            n = n // 2\n        return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for _ in range(n):\n        factors.append(factorize(n//2)[0])\n    factors.sort()\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return reduce(lambda x, y: x * y for x, y in factorize(n-1) if x!= y, range(1, n), None)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    # check if the input is prime\n    if n < 1:\n        return [None, None]\n\n    # convert the input to prime factor\n    factors = list(map(int, n.split()))\n    for i in range(len(factors)):\n        factors[i] *= 2\n\n    # return the list of prime factors\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    primes = [i] for i in range(n) if n % i == 0\n    return [prime for prime in primes if n // prime!= 0]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    list = []\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n            list.append(n)\n        else:\n            n /= 2\n            list.append(n)\n    return list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # take all prime factors that are smaller than n\n    factors = factorization(n)\n    # take all prime factors that are equal to n\n    unique = set()\n    for factor in factors:\n        if factor not in unique:\n            unique.add(factor)\n    # remove the factors that are not unique\n    factors = factorization(n - len(unique))\n    # remove the factors that are equal to n\n    factors.extend([set(item) for item in factorization(n)])\n    # take the factors in the correct order\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return factorize(n // 2)\n    else:\n        return factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n //", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return List([])\n\n    ret = []\n    factors = [n]\n    while factors:\n        factors -= 1\n        prime_factors = factorize(factors)\n        ret += prime_factors\n        if not factors:\n            break\n\n    ret.reverse()\n\n    return ret", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = [int(i) for i in range(n)]\n    factors.sort()\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # First, we need to find a division by 2, this will allow us to shift numbers left and right\n    # so that we can use the factors for a multiplication\n    # We will only use the biggest prime factor and the smallest factor in the factorization,\n    # then we will use the product of the two factors to find a remainder of division\n    # If the remainder is odd, then we will have an odd number of factors so we will return a list\n    # with even number of factors. If the remainder is even, we will have an odd number of factors\n    # and we will return a list with odd number of factors\n    # We will use the fact that there are only two prime numbers bigger than two. The product of\n    # the two factors will be greater than two and we can divide by two without dividing by zero\n    # After the division we will shift numbers to the right so that we can use the factors for a multiplication\n    for x in range(n):\n        if n % 2!= 0:\n            break\n        # We will shift numbers right to make the product greater than two\n        x = n // 2\n        # We will first shift numbers left\n        n = n // 2\n        # Now we will find a remainder of division", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n        while True:\n            if n - i == 1:\n                break\n            else:\n                factor = n / i\n                factors.append(factor)\n                n = factor * i\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # can't use float since we have to handle large numbers\n    if n <= (1<<30):\n        return [int(1)]\n    l = [int(1)]\n    while n > 1:\n        if n % 2 == 0:\n            l.append(n/2)\n        n//= 2\n        if n == 1:\n            break\n    return l\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    n = n * 2 ** (n // 2) + 1\n    result = []\n    for p in range(2, n + 1):\n        if p!= n and n % p == 0:\n            result.append(p)\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [f for f in list(range(n, n // 2)) if f % 2 == 0]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [factor for factor in factorize(n) if factor not in [2, 5, 7]]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return [None]\n\n    # Loop over numbers\n    for n in xrange(n):\n        factor = n * (n ** 2) / (n ** 3) - (n * n ** 2) / (n ** 3)\n        while factor!= 0:\n            yield factor\n            factor = n * (n ** 2) / (n ** 3) - (n * n ** 2) / (n ** 3)\n\n    # Return list of all prime factors\n    return [factor for factor in factorize(n) if factor!= 0]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return []\n\n    return [fact * 2 ** n for fact in factorize(n // 2)] + factorize(n // 2 ** (n % 2))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Generate list of all prime factors upto n.\n    prime_factors = range(1, n + 1)\n\n    # Let i be the index of the first factor appearing in factorization\n    # for i in range(len(prime_factors) - 1):\n    #     if prime_factors[i] > prime_factors[i + 1]:\n    #         prime_factors[i] = prime_factors[i + 1]\n    #     else:\n    #         prime_factors[i] = prime_factors[i + 1] - 1\n    #     prime_factors[i] *= prime_factors[i]\n\n    # Pick the first prime factor that is smaller than the input number.\n    # This will be the smallest number.\n    return prime_factors[:] * (prime_factors[-1] - prime_factors[0]) / prime_factors[0]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    from itertools import product\n    # Python 3.4+ doesn't have itertools.product, which implements this method via a\n    # __next__ method. This method must be implemented in Python 3.2 or later.\n    from itertools import product as itertools_product\n\n    # number of elements in the final list.\n    size = len(factorize(n))\n    factorize_list = []\n    # initial list of factors (first element is prime number). The remainder of the list is the list of all factors.\n    factors_list = []\n    # maximum number of factors.\n    max_num_factors = n // prime_factor(n)\n    # list of all factors.\n    factors = [prime_factor(n) for n in range(max_num_factors)]\n    # list of all prime factors.\n    primes = range(2, max_num_factors + 1)\n    for n in range(min(size, max_num_factors)):\n        if n % prime_factor(n) == 0:\n            factorize_list.append(n)\n            # check if the factor is already in the list.\n            if n in factors_list:\n                # check if the factor is already prime.\n                if not n in primes:\n                    # add the factor to the list of all factors.\n                    factors_list.append(n)\n                    if", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [\n        int(n * i) // i for i in range(1, int(n * i) + 1)\n    ]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    if n <= 1:\n        return [n]\n\n    if n == 2:\n        return [int(x ** y ** z ** (x * y) ** (x * z) ** (x ** z)) for (x, y, z) in factorize(n-1)]\n\n    factors = []\n    for k in range(n):\n        factors.append(k)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [int(fact) for factor in factorize(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # prime factors\n    p = [n // 2]\n    result = []\n    while p:\n        p[0], result.append(p[0])\n        p[1] = p[1] // p[0]\n        p[0] = p[0] // p[1]\n        p[1] = p[1] % p[0]\n        p[0] = p[0] % p[1]\n        p[1] = p[1] * p[0]\n        p[0] = p[0] * p[1]\n        p[1] = p[1] ** p[0]\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # first try to find prime factors of n - 1\n    possible_factors = []\n    for n - 1, k in enumerate(factorize(n - 1)):\n        if len(possible_factors) < k + 1:\n            possible_factors.append(k)\n            possible_factors.extend(factorize(n - 1))\n\n    # first try to find prime factors of n\n    possible_factors = []\n    for n, k in enumerate(factorize(n)):\n        if len(possible_factors) < k + 1:\n            possible_factors.append(k)\n            possible_factors.extend(factorize(n))\n\n    # if none of the methods worked, return empty list\n    if len(possible_factors) == 0:\n        return []\n    else:\n        return possible_factors\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor_list = []\n    for i in xrange(n):\n        factors = []\n        while True:\n            factor = n / i\n            if factor > 1:\n                factors.append(factor)\n                n = factor\n            else:\n                break\n        factor_list.append(factors)\n    return factor_list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Return list of prime factors in the order from smallest to largest\n    prime_factors = [(x * y) for x in range(n, n + 1) for y in range(x, n + 1)]\n    prime_factors = [item for item in prime_factors if item > 1]\n    return prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # ensure that number is prime\n    if not n % 2:\n        raise ValueError(\"number should be prime\")\n\n    # make a list of all factors\n    factors = [n] * (n // 2) + [(n // 2) - 1] * (n // 5)\n\n    # combine the factors into a single list\n    factors = [[f for f in factors] if len(f) == 1 else [factors[i] for i in range(0, len(f), 2)] for factors in factors]\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    n *= n\n    if n == 1:\n        return [n]\n    result = []\n    rest = n\n    while rest:\n        remainder = rest % n\n        rest = remainder\n        if remainder == 0:\n            result.append(n)\n            break\n        result.append(factorize(remainder))\n    return result\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    if n in range(3, 5):\n        return [int(x) for x in [int(x) // 2 for x in factorize(x)] + [int(x) % 2 for x in factorize(x)]]\n\n    if n in range(5, 7):\n        return [int(x) // 2 for x in factorize(x)] + [int(x) % 2 for x in factorize(x)]\n\n    if n in range(7, 11):\n        return [int(x) // 3 for x in factorize(x)] + [int(x) % 3 for x in factorize(x)]\n\n    if n in range(11, 17):\n        return [int(x) // 5 for x in factorize(x)] + [int(x) % 5 for x in factorize(x)]\n\n    if n in range(17, 19):\n        return [int(x) // 7 for x in factorize(x)] + [int(x) % 7 for x in factorize(x)]\n\n    if n in range(19, 23)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i == 1:\n            continue\n        if i not in factors:\n            factors.append(i)\n            continue\n        factor = factors[i]\n        factors[i] = factor * factors[i - 1]\n        factors[i - 1] = factor * factors[i]\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = []\n    for i in range(n):\n        temp = i\n        while temp > 1:\n            result.append(temp)\n            temp = temp % n\n            # print(temp, i, n)\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # start with empty list\n    factors = []\n\n    for i in range(n):\n        factors.append(i)\n        # i will be the most significant digit of the prime factorization\n        # such that its value is always 1\n        i += 1\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    f = [n]\n    for i in range(2, n, 2):\n        if i in f:\n            f.append(f[i])\n        else:\n            f.append(i)\n\n    return f", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    list_factor = []\n    for i in range(n):\n        factor = 1\n        while True:\n            factor *= i\n            if factor < 1:\n                break\n            else:\n                list_factor.append(factor)\n                factor = 1\n    return list_factor", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # 1 -> 1\n    # 2 -> 2\n    # 3 -> 3\n    # 4 -> 4\n    # 5 -> 5\n    # 6 -> 6\n    # 7 -> 7\n    # 8 -> 8\n    # 9 -> 9\n    # 10 -> 10\n    # 11 -> 11\n    # 12 -> 12\n    # 13 -> 13\n    # 14 -> 14\n    # 15 -> 15\n    # 16 -> 16\n    # 17 -> 17\n    # 18 -> 18\n    # 19 -> 19\n    # 20 -> 20\n    # 21 -> 21\n    # 22 -> 22\n    # 23 -> 23\n    # 24 -> 24\n    # 25 -> 25\n    # 26 -> 26\n    # 27 -> 27\n    # 28 -> 28\n    # 29 -> 29\n    # 30 -> 30\n    # 31 -> 31\n    # 32 -> 32\n    # 33 -> 33\n    # 34 -> 34\n    # 35 -> 35\n    # 36 -> 36\n    # 37 -> 37\n    # 38 -> 38\n    # 39 -> 39\n    # 40 -> 40\n    # 41 -> 41\n    # 42 -> 42\n    # 43 -> 43\n    # 44 -> 44\n    # 45 -> 45\n    # 46 -> 46\n    # 47 -> 47\n    # 48 -> 48\n    # 49 -> 49\n    # 50 -> 50\n    # 51 -> 51", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(n // 2)\n            n = n // 2\n        else:\n            if n % 5 == 0:\n                factors.append(n // 5)\n                n = n // 5\n            else:\n                if n % 7 == 0:\n                    factors.append(n // 7)\n                    n = n // 7\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    try:\n        for i in range(n):\n            if i % 2!= 0:\n                continue\n            result = [i**2 for i in range(i)]\n            if result[0] == 0:\n                result.insert(0, result[0])\n                result.insert(0, result[0])\n            else:\n                result[0] = 2**result[0]\n                result[1] = 2**result[1]\n                result.insert(1, 2**result[0])\n                result.insert(1, 2**result[1])\n    except ValueError:\n        raise ValueError('Input number is not prime.')\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n < 1:\n        return []\n\n    if n == 1:\n        return [n]\n\n    if n % 2 == 0:\n        return [n] * factorize(n // 2)\n\n    # Prime number decomposition\n    factors = []\n\n    # Factorize integer as product of prime factors\n    for f in factorize(n):\n        factors.append(f)\n\n    # Reorder factors in order of increasing number of occurrences\n    for factor in factors:\n        if factor not in factors:\n            factors.insert(0, factor)\n\n    return factors\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factorization = []\n    n = int(n)\n    while n > 1:\n        if n % 2 == 0:\n            factorization.append(n // 2)\n            n = n // 2\n        else:\n            factorization.append(n)\n            n = n // 2\n    return factorization", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n < 2:\n        return [n]\n\n    p = n // 2\n    r = n // p\n    w = n // r\n\n    if p > r > w:\n        raise Exception(\"Number is not prime\")\n\n    num_occ = 1\n    for c in range(p):\n        for d in range(r):\n            if d * c!= r:\n                num_occ += 1\n                break\n        if num_occ > 1:\n            break\n    if num_occ == 1:\n        return [r]\n\n    return [num_occ // 2 * d for d in range(p)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    i, j = 0, 0\n    k = 1\n    while True:\n        if k == n:\n            return factorize(n - k)\n        elif n % k == 0:\n            j += 1\n            if j == i:\n                i += 1\n            else:\n                return factorize(n - k)\n                j = 0\n                i = 0\n        k *= 2\n        n //= k", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = []\n    for i in range(n):\n        if i == 0:\n            continue\n        if (i + 1) % 2 == 1:\n            result.append(i)\n        elif i + 1 in result:\n            continue\n        if (i + 1) % 2 == 0:\n            result.append(i + 1)\n        else:\n            result.append(i + 1 * 2)\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    factors = []\n    factor = 1\n\n    while n!= 0:\n        while n % factor!= 0:\n            factor *= 2\n            n >>= 1\n        n -= factor\n\n        if factor in factors:\n            factors.append(factor)\n        else:\n            factors.append(factor)\n            factor *= 2\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    assert n > 1\n\n    factors = []\n    for i in range(n):\n        factor = i\n        for j in range(i):\n            if j < i:\n                factor *= 2\n\n        factors.append(factor)\n\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    res = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            res.append(i)\n    return res", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # TODO: Improve this to avoid recursion\n    # TODO: Use something like Sieve of Eratosthenes to factorize a number\n    n = n % 2\n    p = 1\n    while n:\n        if n % p == 0:\n            yield p\n            p *= 2\n        n = n // p\n    if n == 1:\n        yield 1", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Since list of prime numbers is closed under multiplication, if you know which prime factors are already known, you can set the known list of prime numbers. As an example we can do following:\n    known_prime_factors = [[4, 5], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Argument must be greater than or equal to 1\")\n\n    factor = n\n    while factor > 1:\n        factor = factor % factor\n        if factor == 1:\n            factor = 1\n        else:\n            yield factor", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    l = []\n    if n == 0:\n        return l\n    l.append(n)\n    for i in xrange(1, n):\n        if n % i == 0:\n            l.append(i)\n            if n % i > 0:\n                l.append(i / i)\n            else:\n                l.append(i)\n    return l", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Use binary search to find the smallest factor in the list\n    # This is used to find the smallest factor when factorizing a number that has a few factors\n    # as in a composite number.\n    # FIXME: use the way it is done in scipy.sqrt\n    min_factor = n // 2\n    if min_factor == 0:\n        min_factor = 1\n\n    for _ in range(min_factor + 1):\n        # FIXME: use the way it is done in scipy.sqrt\n        max_factor = min_factor * 2\n        while n % max_factor == 0:\n            max_factor += 2\n        if min_factor == max_factor:\n            break\n\n    return [min_factor, min_factor + 1]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    l = []\n    while n > 1:\n        l.append(n % 2)\n        n = n / 2\n    return l\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    num = n * (n - 1) // 2\n    if num == 0:\n        return [None]\n    factor = 1\n    for i in range(1, num + 1):\n        if num % i == 0:\n            factor *= i\n            break\n    return [factor] + factorize(n - factor) + factorize(n - factor * 2) + factorize(n - factor * 3)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    n = max(1, n)\n    m = n // 2\n    if n % 2 == 0:\n        return [n, n]\n    if m == 0:\n        return [n, m]\n    factors = list(range(m, n))\n    for i in range(m):\n        factors[i] += 1\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [x] for x in range(2, n + 1) if x in range(1, n)\n    return [x] for x in factorize(n // 2) + factorize(n // 5) + factorize(n // 7) + factorize(n // 11) + factorize(n // 13) + factorize(n // 17) + factorize(n // 19) + factorize(n // 23) + factorize(n // 27) + factorize(n // 31) + factorize(n // 37) + factorize(n // 43) + factorize(n // 47) + factorize(n // 53) + factorize(n // 59) + factorize(n // 61) + factorize(n // 63) + factorize(n // 67) + factorize(n // 71) + factorize(n // 73) + factorize(n // 79) + factorize(n // 83) + factorize(n // 87) + factorize(n // 89) + factorize(n // 91) + factorize(n // 93) + factorize(n // 97) + factorize(n //", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factorized = []\n    max = max(n, 1)\n    while len(factorized) < max:\n        if n % 2 == 0:\n            factorized.append(n)\n            n = n // 2\n            continue\n\n        while n!= 1:\n            if n % 5 == 0:\n                factorized.append(n)\n                n = n // 5\n                continue\n\n            if n % 7 == 0:\n                factorized.append(n)\n                n = n // 7\n                continue\n\n            factorized.append(n)\n            n = n // 2\n            while n!= 1:\n                if n % 3 == 0:\n                    factorized.append(n)\n                    n = n // 3\n                    continue\n\n                if n % 7 == 0:\n                    factorized.append(n)\n                    n = n // 7\n                    continue\n\n                factorized.append(n)\n                n = n // 2\n                if n!= 1:\n                    n = n // 3\n                    if n!= 1:\n                        n = n // 7\n                        if n!= 1:\n                            factorized.append(n)\n                            continue\n                        else:\n                            break\n            factorized.append(n)\n        factorized.append(n)\n    return factorized", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    n_factors = len(factorize(n))\n    n_factors2 = n_factors // 2\n    if n_factors2 == 1:\n        return [n]\n    else:\n        return factorize(n_factors2) + factorize(n_factors2 - n_factors)\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # NOTE: A better factorization would be to let the algorithm see the numbers as numbers. That way it can reuse factors\n    #     in different numbers to save time. However, a more complex algorithm would require more memory and computing power\n    #     than what is available at the moment.\n    #     This method has to be used to find primes that will be used for an algorithm that does not need that memory and computing power.\n\n    # TODO: Check if n is prime and is a prime number\n    factors = []\n    i = 0\n    while True:\n        i += 1\n        if i > n:\n            break\n        if n % i == 0:\n            factors.append(i)\n            i = 0\n        else:\n            # Repeat until n is prime\n            while n % i!= 0:\n                i += 1\n                if i > n:\n                    break\n                if n % i == 0:\n                    factors.append(i)\n                    i = 0\n            # If n is not prime, n is the sum of the factors and we are done. This may not be the fastest\n            #       method. For example, n = 1292, it is the sum of the factors. So n is still prime but 1292 is not\n            #       divisible by any of the factors. In this case", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factorization = []\n    f = 1\n    while True:\n        if f > n:\n            break\n        f *= 2\n        factorization.append(f)\n        f *= 2\n    return factorization\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    if n % 2 == 0:\n        return [x] + factorize(n // 2)\n    else:\n        return [x] + factorize(n // 2) + factorize(n // 4)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [int(a * n) for a in (1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 43, 47, 53, 59, 61, 67, 73, 79, 83, 89, 97, 103, 107, 109, 113, 127, 131, 139, 149, 163, 167, 173, 179, 191, 193, 199, 211, 223, 229, 233, 239, 241, 249, 253, 257, 263, 269, 277, 281, 293, 307, 313, 349, 367, 373, 383, 389, 397, 409, 419, 421, 431, 433, 439, 443, 449, 457, 463, 469, 473, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 563, 569, 571, 577, 587, 593, 599, 607, 613, 619, 631, 641, 643, 647, 653, 655, 659, 691, 697, 699, 707, 713, 719, 727, 733, 739, 743, 751, 757, 761, 769, 771, 7", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [2, 2]\n    p = n // 2\n    q = n // p + 1\n    return factorize(p) + factorize(q)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    # First, find the smallest prime factor for number n.\n    sfactors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sfactors.append(i)\n\n    # Next, find all other prime factors.\n    for i in range(1, n + 1):\n        if sfactors[i] > 1:\n            for j in range(sfactors[i] - 1, i):\n                sfactors.append(j)\n    return sfactors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factorization = []\n    # Since multiplication of two factors can add up to zero we need to keep track of this property\n    non_zero = set()\n    # Rearrange the factors in a way that each factor appears once\n    for factor in factorize(n):\n        for factor2 in factor:\n            if factor2!= factor:\n                factorization.append(factor2)\n                non_zero.add(factor2)\n        if factor2 not in non_zero:\n            factorization.append(factor2)\n    return factorization", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # A list of all prime factors\n    prime_factors = []\n    # A list of all prime factors with only one occurrence\n    unique_factors = []\n    # The list of factors (for each of which the number of occurrences is given)\n    factors = []\n\n    for i in range(n):\n        prime_factors.append(i)\n        unique_factors.append(0)\n\n        # For each of the prime factors\n        for j in range(i):\n            # If there is only one occurrence for this factor\n            if j == i:\n                factors.append(i)\n\n    # Sort the factors according to their number of occurrences\n    factors.sort(key=lambda f: f.count(' '))\n\n    # Each factor is listed number of times corresponding to how many times it appeared in the factorization\n    for factor in factors:\n        # The number of occurrences for this factor\n        count = len(unique_factors[factor])\n\n        # The number of times this factor appears in the factorization\n        factor_count = count * factor\n\n        # List the factor with its occurrences\n        factors.append(factor_count)\n\n    return factors\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    l = []\n    l.extend(range(1, n))\n    for i in range(n):\n        if n % i == 0:\n            l.append(i)\n    return l", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = []\n    for i in range(1, n):\n        if n % i == 0:\n            result.append(i)\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    # number = 2 ** n\n    factors = [0] * (n // 2) + [int(n // 2)] * (n // 2) // 2\n    # while n!= 0:\n    #     i = 1\n    #     while factors[i] > n:\n    #         i += 1\n    #     factors[i] = n\n    #     n //= factors[i]\n    #     if n < factors[i]:\n    #         print(n, factors[i])\n    #     else:\n    #         break\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    p = 1\n    while p < n:\n        m = p\n        p = m * (p + 1) % n\n        if p > n:\n            return p\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    num = n\n    prime = 1\n    while True:\n        if prime == num:\n            break\n        if prime < num:\n            factor = num // prime\n            num //= prime\n            prime *= factor\n            factor = factor * prime\n            prime = 1\n        else:\n            prime += 1", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # 1:\n    if n == 1:\n        return [i] for i in range(1, n + 1) if i % 2 == 0\n    # 2:\n    return [i for i in range(n, n + 1) if i % 2 == 0] + [i] for i in range(n, n + 1) if i % 2!= 0", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    if n == 0:\n        return factors\n    elif n == 1:\n        return factors\n    else:\n        d = (n-1) // 2\n        # if n is a divisor of 2, then factorize n\n        for i in range(d):\n            factors.append(n//i)\n            n = n%i\n            if n == 1:\n                break\n        # if n is not a divisor of 2, then find its prime factors\n        while n!= 1:\n            factors.append(n//2)\n            n = n%2\n            if n == 1:\n                break\n        # if n is a divisor of 2, then find the prime factors\n        while n!= 1:\n            factors.append(n//2)\n            n = n%2\n            if n == 1:\n                break\n        return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    product = 1\n    for i in range(n):\n        product *= i\n    factors = []\n    for i in range(product):\n        if i in product:\n            continue\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    return [int(factor) for factor in factorize(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # TODO: optimize factorization\n    p = 2\n    for i in range(1, n):\n        while p*i:\n            p = p*i\n            i -= 1\n    return p * i for i in range(2, n)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    lst = []\n    m = 1\n    while m <= n:\n        if n % m == 0:\n            lst.append(n)\n            m *= m\n            n = n % m\n        else:\n            break\n    return lst", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = []\n    for i in range(2, n + 1, 2):\n        result.append(i)\n        for j in range(i * 2, i + 2, 2):\n            if j % i == 0:\n                result.append(i * j)\n    return result\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 1:\n        raise ValueError('Input number should be >= 1')\n    list = []\n    for i in range(1, n + 1):\n        for j in range(0, i):\n            if j!= i:\n                list.append(i)\n            if j == i:\n                list.append(j)\n    return list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = [n]\n    for i in range(1, n):\n        if i % 2 == 0:\n            factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    factorize = [fact for fact in range(n)]\n    factorize.reverse()\n\n    if n == 1:\n        factorize = [fact]\n    elif n == 2:\n        factorize = [fact, factorize]\n    elif n == 3:\n        factorize = [fact, factorize, factorize]\n    elif n == 4:\n        factorize = [factorize, factorize, factorize, factorize]\n    elif n == 5:\n        factorize = [factorize, factorize, factorize, factorize, factorize]\n    elif n == 6:\n        factorize = [factorize, factorize, factorize, factorize, factorize, factorize]\n    elif n == 7:\n        factorize = [factorize, factorize, factorize, factorize, factorize, factorize, factorize]\n\n    return factorize", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factorizations = []\n    for i in range(n):\n        factors = []\n        for factor in range(1, n * factorize(i)):\n            factors.append(i / factor)\n        factorizations.append(factors)\n\n    return factorizations\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor = 1\n    while True:\n        if n > 1:\n            if n % factor == 0:\n                return factorize(n / factor)\n            factor *= 2\n        else:\n            break\n    return factor\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    for c in range(n):\n        yield n // c\n        n //= c + 1\n    if n > 0:\n        yield n", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    all_factors = []\n    all_factors.extend(range(2, n + 1) + [n])\n    all_factors.append(n)\n\n    return factorize(len(all_factors))", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Pick factors of minimum order\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n    # Make list of rest factors\n    factors.extend([i for i in range(n) if i!= factors[0]])\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in xrange(1, n):\n        factors.append(i)\n        if n % i == 0:\n            factors.append(n / i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    num = n\n    if num == 0:\n        return [num]\n    if num == 1:\n        return [num]\n\n    num = num // 2\n    result = []\n    factor = 1\n    for i in range(num):\n        if num % i == 0:\n            result.append(factor)\n            factor *= i\n            factor = 1\n        else:\n            factor *= num / i\n            result.append(factor)\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor = []\n    for i in range(n):\n        factor.append(n % i)\n        n = n / i\n    return factor", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # List to hold factors\n    factors = []\n\n    # For each factor\n    for i in xrange(n):\n        # How many times has it been listed before?\n        count = 0\n\n        # Factor\n        factor = i\n\n        # If the number is already a prime factor\n        if factor > 1:\n            # Increase count\n            count += 1\n\n            # And add the factor to the list\n            factors.append(factor)\n\n        # If the number is not a prime factor\n        else:\n            # If there are no factor with the same count\n            if count == 0:\n                # Increase count\n                count += 1\n                # Add the factor to the list\n                factors.append(factor)\n            # If there are other factor with the same count\n            else:\n                # Decrease count\n                count -= 1\n                # If the count is 0, then factor can not be a prime factor\n                if count == 0:\n                    # Stop loop\n                    break", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(n / 2)\n        else:\n            n, m = n, n // 2\n            factors.append(m * n % 2)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = []\n    for i in range(n):\n        if n % i == 0:\n            result.append(i)\n            break\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor = []\n    # first check if the number is even\n    if n % 2 == 0:\n        # first, check if the number is divisible by 2\n        if n % 2 == 1:\n            factor.extend(factorize(n // 2))\n            return factor\n        else:\n            return factorize(n // 2) + factorize(n // 2 * 2)\n    # otherwise, check if the number is divisible by 3\n    elif n % 3 == 0:\n        factor.extend(factorize(n // 3))\n        return factor\n    # otherwise, check if the number is divisible by 4\n    elif n % 4 == 0:\n        factor.extend(factorize(n // 4))\n        return factor\n    # otherwise, check if the number is divisible by 5\n    elif n % 5 == 0:\n        factor.extend(factorize(n // 5))\n        return factor\n    # otherwise, check if the number is divisible by 6\n    elif n % 6 == 0:\n        factor.extend(factorize(n // 6))\n        return factor\n    # otherwise, check if the number is divisible by 7\n    elif n % 7 == 0:\n        factor.extend(factorize(n // 7))\n        return factor\n    else:\n        raise Exception('Can not factorize number with given value')", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    n = 1 if n == 0 else n\n    if n % 2 == 0:\n        return [int(i) for i in factorize(n // 2)] + [int(i) for i in factorize(n // 2 + 1)]\n    else:\n        return [int(i) for i in factorize(n // 2 + 1)] + [int(i) for i in factorize(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    n *= n\n    for i in range(2, n, 2):\n        if i % 2 == 0:\n            continue\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    elif n % 2 == 0:\n        return [n]\n\n    return [int(n // 2)] + factorize(n // 2)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    lst = list()\n    for i in xrange(n):\n        for factor in factorize(i):\n            lst.append(factor)\n    return lst", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    n = n * 2\n    for x in range(1, n):\n        n = n * x\n        for i in range(x):\n            if n % i == 0:\n                yield n\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor = 1\n    factor_list = []\n    if n < 10:\n        factor_list.append(factor)\n        factor += 1\n    if n == 10:\n        factor_list.append(factor)\n        factor += 1\n    if n < 100:\n        factor_list.append(factor)\n        factor += 1\n        factor_list.append(factor)\n        factor += 1\n        factor_list.append(factor)\n        factor += 1\n    factor_list.append(factor)\n    factor_list.append(factor)\n    factor_list.append(factor)\n    factor_list.append(factor)\n    factor_list.append(factor)\n    return factor_list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    num = 1\n    for i in range(2, n + 1):\n        if n % i == 0:\n            num *= i\n            n /= i\n            num *= i\n    return num", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    factor = 1\n    for i in range(n):\n        if i % 2 == 0:\n            factor *= i\n        else:\n            factors.append(factor)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    l = list(range(n)) # list of natural numbers\n    tmp = list()\n    for i in range(n): # prime factor\n        l.remove(i) # remove number\n        tmp.append(i)\n    return tmp", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return ()\n    if n in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 109, 113, 127, 131, 139, 149, 151, 157, 163, 167, 179, 181, 191, 193, 197, 199, 211, 223, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 297, 299, 307, 311, 313, 317, 321, 331, 333, 337, 347, 349, 353, 359, 367, 371, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 471, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 619, 631, 641, 643, 647, 651, 653, 659, 661,", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = [int(i) for i in range(n) if i % 2 == 0]\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        # you don't have to use two loops in Python3\n        for j in range(i):\n            factors.append(j)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # TODO: Maybe this can be optimized to return list of prime factors of n which are already primality checked\n    return [prime(x) for x in prime(n) if x % n == 0]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    nums = [int(x) for x in range(1, n+1)]\n    res = []\n    for i in range(len(nums)):\n        if not nums[i] == 0:\n            res.append(nums[i])\n        nums[i] = 1\n    return res", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    def base(n: int) -> int:\n        if n < 2:\n            return 1\n        else:\n            return n // base(n - 1)\n\n    lst = []\n    for i in range(n):\n        lst.append(int(math.factorial(i)))\n    return lst", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factor_list = []\n    factor_list.extend(range(1, n))\n    while factor_list:\n        factor = factor_list.pop()\n        factor_list.append(factor * factor)\n        factor = factor * factor\n        if factor % 2:\n            factor_list.append(factor)\n    return factor_list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    n = int(n)\n    factor = 1\n    while True:\n        if n % factor == 0:\n            return factor\n        factor *= 2\n        n = n / factor\n\n    return factorize(n)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    result = []\n    result.append(n)\n    while True:\n        n /= 2\n        for factor in factorize(n):\n            if factor == n:\n                break\n            result.append(factor)\n        else:\n            break\n    return result", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factorize_list = []\n    factors = list(range(2, n + 1))\n    for i in range(len(factors)):\n        factors[i] *= factors[i]\n        factorize_list.append(factors[i])\n    return factorize_list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    n = n % 1\n    if n < 1:\n        raise ValueError('Number must be positive.')\n    return [n for k, i in enumerate(factorize(n // 1))]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    if n == 1:\n        return [i] for i in range(2, int(n ** 2) + 1)\n\n    factor_list = []\n\n    # Find largest prime factor\n    largest_factor = int(n ** 2)\n\n    # Find all factors of next size in list\n    while n > 1 and n!= largest_factor:\n        # Find smallest prime factor\n        smallest_factor = int((n ** 2) // 2)\n        # Find all factors of next size in list\n        while n > smallest_factor and n!= largest_factor:\n            factor_list.append(n / smallest_factor)\n            n = n // smallest_factor\n\n    factor_list.sort(key=lambda i: i, reverse=True)\n    return factor_list", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    num_factors = 1\n    while n > 1:\n        if n % 2 == 0:\n            num_factors *= 2\n        n //= 2\n    return num_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    #  Simplify the input and get the prime factors\n    n = 2 ** n\n\n    #  Run through the list and produce the list of prime factors.\n    factors = []\n    for i in range(n):\n        factors.append(i)\n        n = 2 ** (n - i)\n\n    return factors\n</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return [None]\n\n    prime = True\n    while prime:\n        for i in range(n - 1):\n            if n % i == 0:\n                prime = False\n        if prime:\n            prime = False\n            return [prime]\n        for i in range(n):\n            if n % i == 0:\n                prime = False\n        if prime:\n            prime = False\n            return [prime]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    primes = [\n        [int(x) * y for x, y in itertools.combinations(range(2, n), 2)]\n    ]\n    primes.reverse()\n    return primes"]]