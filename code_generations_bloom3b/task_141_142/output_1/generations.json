[["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1 and file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.')!= -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if len(file_name) == 0 or file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[0] == '.' and file_name[1] not in ('.', '..'):\n        return 'No'\n    if file_name[1] == '.' and file_name[2] not in ('.', '..'):\n        return 'No'\n    if file_name[2] == '.' and file_name[3] not in ('.', '..'):\n        return 'No'\n    if file_name[3] == '.' and file_name[4] not in ('.', '..'):\n        return 'No'\n    if file_name[4] == '.' and file_name[5] not in ('.', '..'):\n        return 'No'\n    if file_name[5] == '.", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3 or len(file_name) < 1:\n        return 'No'\n    if file_name[0] not in string.letters:\n        return 'No'\n    if file_name[1] not in string.letters:\n        return 'No'\n    if file_name[2] not in string.letters:\n        return 'No'\n    if file_name[2] == '.':\n        return 'No'\n    if file_name[2] == '.txt':\n        return 'Yes'\n    if file_name[2] == '.exe':\n        return 'Yes'\n    if file_name[2] == '.dll':\n        return 'Yes'\n    return 'No'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if not file_name.startswith('.'):\n        return 'No'\n    if file_name.endswith('.'):\n        return 'No'\n    if file_name.endswith('.dll'):\n        return 'No'\n    if file_name.endswith('.exe'):\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[-1] not in ('.', '.txt', '.exe', '.dll'):\n        return 'No'\n    if file_name[-1][:-1] not in ('.', '.txt', '.exe', '.dll'):\n        return 'No'\n    if file_name[-1][-1:] not in ('.', '.txt', '.exe', '.dll'):\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    elif len(file_name) == 3 and file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    elif file_name[0] == '.' and file_name[1] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    elif file_name[1] == '.' and file_name[2] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', '", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name[0]!= '.':\n        return 'No'\n    if file_name[1]!= '.':\n        return 'No'\n    if file_name[2] not in ['.', 'txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1 and file_name.find('.') < len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') > len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.', 0)!= -1:\n        return 'Yes'\n    if file_name.find('.', 1)!= -1:\n        return 'Yes'\n    if file_name.find('.', 2)!= -1:\n        return 'Yes'\n    return 'No'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    elif file_name.count('.') > 1:\n        return 'No'\n    elif file_name.count('.') == 1 and file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    elif file_name.count('.') == 1 and file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z') and file_name[0] not in ('.', '..'):\n        return 'No'\n    elif file_name.count('.') == 1 and file_name[0] not in (", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if len(file_name) < 3:\n        return 'No'\n    if file_name[0] not in string.letters:\n        return 'No'\n    if file_name[-1][-1] not in string.letters:\n        return 'No'\n    if file_name[-1][-1] not in string.digits:\n        return 'No'\n    if file_name[-1][-1] not in string.digits:\n        return 'No'\n    if file_name[-1][-1] not in string.digits:\n        return 'No'\n    if file_name[-1][-1] not in string.digits:\n        return 'No'\n    if file_name[-1][-1] not in string.digits:\n        return 'No'\n    if file_name[-1][-1] not in string.digits:\n        return 'No'\n    if file_name[-1][-1] not in string.digits:\n        return 'No'\n    if file_name[-1][-1] not in string.digits:\n        return 'No'\n    if file_name[-1][-1] not in string.digits:\n        return 'No'\n    if file_name[-1][-1] not in string.digits:\n        return 'No'\n    if file_name[-1][-1] not", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if len(file_name) == 0 or file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[0] == '.' and file_name[1] not in ('.', '..'):\n        return 'No'\n    if file_name[1] == '.' and file_name[2] not in ('.', '..'):\n        return 'No'\n    if file_name[2] == '.' and file_name[3] not in ('.', '..'):\n        return 'No'\n    if file_name[3] == '.' and file_name[4] not in ('.', '..'):\n        return 'No'\n    if file_name[4] == '.' and file_name[5] not in ('.', '..'):\n        return 'No'\n    if file_name[5] == '.", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if not file_name.isdigit():\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1 and file_name.find('.') < len(file_name):\n        return 'No'\n    if file_name.find('.')!= -1 and file_name.find('.') > len(file_name):\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == len(file_name):\n        return 'No'\n    if file_name.find('.') == len(file_name):\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    elif len(file_name) == 0:\n        return 'No'\n    elif file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    elif file_name[-1] not in ('.', '..'):\n        return 'No'\n    elif file_name[-1:] not in ('.exe', '.dll'):\n        return 'No'\n    else:\n        return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    elif len(file_name) == 0 or not file_name.isdigit():\n        return 'No'\n    elif file_name.isdigit() and file_name[0]!= '.':\n        return 'No'\n    elif file_name[0] == '.' and file_name[1] not in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', '", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1:\n        if file_name.find('.') > len(file_name):\n            return 'No'\n        if file_name.find('.') < len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'Yes'\n    return 'No'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if len(file_name) < 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'Yes'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if len(file_name) == 0 or file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[1] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') == 1:\n        return 'No'\n    if file_name.count('.') > 1 and file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name.count('.') > 1 and file_name[-1] not in ('txt', 'exe', 'dll'):\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    elif len(file_name) == 0 or file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    elif file_name[0] == '.' and file_name[1] not in ('.', '..'):\n        return 'No'\n    elif file_name[1] == '.' and file_name[2] not in ('.', '..'):\n        return 'No'\n    elif file_name[2] == '.' and file_name[3] not in ('.', '..'):\n        return 'No'\n    elif file_name[3] == '.' and file_name[4] not in ('.', '..'):\n        return 'No'\n    elif file_name[4] == '.' and file_name[5] not in ('.', '..'):\n        return 'No'\n    elif file_name[5] == '.", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name[0] not in string.letters:\n        return 'No'\n    if file_name.count('.') > 1:\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] not in string.letters:\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] in string.letters:\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] in string.letters and file_name[1] not in string.letters:\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] in string.letters and file_name[1] not in string.letters and file_name[2] not in string.letters:\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] in string.letters and file_name[1] not in string.letters and file_name[2] not in string.letters and file_name[3] not in string.letters:\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] in string.letters and file_name[1] not in", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if len(file_name) < 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if len(file_name) == 0 or not file_name.isdigit():\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1 and file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.')!= -1 and file_name.find('.')!= -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3 or len(file_name) < 1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1 and file_name.find('.') < len(file_name):\n        return 'No'\n    if file_name.find('.')!= -1 and file_name.find('.') > len(file_name):\n        return 'No'\n    if file_name.find('.')!= -1 and file_name.find('.') == len(file_name):\n        return 'No'\n    if file_name.find('.') == len(file_name):\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') == 0:\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f',", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') == 0:\n        return 'No'\n    if file_name.count('.') > 1:\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', '.'):\n        return 'No'\n    if file_name.count('.') == 1 and", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if len(file_name) == 0 or file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[0] == '.':\n        if file_name[1] not in ('.', '..'):\n            return 'No'\n    if file_name[1] == '.':\n        if file_name[2] not in ('.', '..'):\n            return 'No'\n    if file_name[2] == '.':\n        if file_name[3] not in ('.', '..'):\n            return 'No'\n    if file_name[3] == '.':\n        if file_name[4] not in ('.', '..'):\n            return 'No'\n    if file_name[4] == '.':\n        if file_name[5] not in ('.', '..'):\n            return 'No'\n    if file", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if len(file_name) < 3:\n        return 'No'\n    if file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[-1] not in ('.', '.txt', '.exe', '.dll'):\n        return 'No'\n    if file_name[-1:] not in ('txt', 'exe', 'dll'):\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\"", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name[0] not in string.letters:\n        return 'No'\n    if file_name.count('.') == 1:\n        return 'No'\n    if file_name.count('.') > 1:\n        return 'No'\n    if file_name.count('.') == 0 and file_name[0] not in string.letters:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    elif len(file_name) == 0:\n        return 'No'\n    elif file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    elif file_name[-1] not in ('.', '.exe', '.dll'):\n        return 'No'\n    elif file_name[-1:] not in ('txt', 'exe', 'dll'):\n        return 'No'\n    else:\n        return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1 and file_name.find('.') < len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') > len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3 or not file_name.isdigit() or file_name.find('.')!= -1:\n        return 'No'\n    elif file_name.find('.') == -1:\n        return 'Yes'\n    elif file_name.find('.') == -1 and file_name.find('.') == -1:\n        return 'Yes'\n    elif file_name.find('.') == -1 and file_name.find('.') == -1 and file_name.find('.') == -1:\n        return 'Yes'\n    else:\n        return 'No'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\")!= -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\")!= -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3 or not file_name.isdigit() or file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'Yes'\n    if file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if not file_name.isdigit():\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\")!= -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') == 0:\n        return 'No'\n    if file_name.count('.') > 1:\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if not file_name.isdigit():\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name[0] not in string.letters:\n        return 'No'\n    if file_name.count('.') == 0:\n        return 'No'\n    if file_name.count('.') == 1:\n        return 'No'\n    if file_name.count('.') == 2:\n        return 'No'\n    if file_name.count('.') == 3:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if len(file_name) == 0:\n        return 'No'\n    if file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[1] not in ('.', '_'):\n        return 'No'\n    if file_name[2] not in ('.', '_'):\n        return 'No'\n    if file_name[2] == '.':\n        return 'No'\n    if file_name[2] == '_':\n        return 'No'\n    if file_name[2] == '.txt':\n        return 'No'\n    if file_name[2] == '.exe':\n        return 'No'\n    if file_name[2] == '.dll':\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name[0] not in string.letters:\n        return 'No'\n    if file_name.count(\".\") > 1:\n        return 'No'\n    if file_name.count(\".\") == 1 and file_name[0] not in string.letters:\n        return 'No'\n    if file_name.count(\".\") == 1 and file_name[0] in string.letters:\n        return 'No'\n    if file_name.count(\".\") == 1 and file_name[0] in string.letters and file_name.count(\".\") == 1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'Yes'\n    return 'No'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') == 0:\n        return 'No'\n    if file_name.count('.') > 1:\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', '.'):\n        return 'No'\n    if file_name.count('.') == 1 and", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') == 1:\n        return 'Yes'\n    if file_name.count('.') > 1:\n        return 'No'\n    if file_name.count('.') == 0 and file_name.count('.') > 1:\n        return 'No'\n    if file_name.count('.') == 0 and file_name.count('.') == 1:\n        return 'Yes'\n    if file_name.count('.') == 0 and file_name.count('.') == 1:\n        return 'No'\n    if file_name.count('.') == 0 and file_name.count('.') == 1:\n        return 'Yes'\n    return 'No'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') == 0:\n        return 'No'\n    if file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[-1] not in ('.', '.exe', '.dll'):\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if len(file_name) == 0 or file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[0] == '.' and file_name[1] not in ('.', '.txt', '.exe', '.dll'):\n        return 'No'\n    if file_name[1] == '.' and file_name[2] not in ('.', '.txt', '.exe', '.dll'):\n        return 'No'\n    if file_name[2] == '.' and file_name[3] not in ('.', '.txt', '.exe', '.dll'):\n        return 'No'\n    if file_name[3] == '.' and file_name[4] not in ('.', '.txt', '.exe', '.dll'):", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3 or len(file_name) < 1:\n        return 'No'\n    if file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[0] == '.' and file_name[1] not in ('.', '..'):\n        return 'No'\n    if file_name[1] not in ('.', '..'):\n        return 'No'\n    if file_name[1] == '.' and file_name[2] not in ('.', '..'):\n        return 'No'\n    if file_name[2] not in ('.', '..'):\n        return 'No'\n    if file_name[2] == '.' and file_name[3] not in ('.', '..'):\n        return 'No'\n    if file_name[3] not in ('.', '..'):\n        return 'No'\n    if file", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') == 0:\n        return 'No'\n    if file_name.count('.') > 1:\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] not in ('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'):\n        return 'No'\n    if file_name.count('.') ==", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3 or len(file_name) < 1:\n        return 'No'\n    if file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[0] == '.' and file_name[1] not in ('.', '..'):\n        return 'No'\n    if file_name[1] == '.' and file_name[2] not in ('.', '..'):\n        return 'No'\n    if file_name[2] == '.' and file_name[3] not in ('.', '..'):\n        return 'No'\n    if file_name[3] == '.' and file_name[4] not in ('.', '..'):\n        return 'No'\n    if file_name[4] == '.' and file_name[5] not in ('.', '..'):\n        return 'No'\n    if file_name[5] == '.", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1 and file_name.find('.') < len(file_name):\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') > len(file_name):\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == len(file_name):\n        return 'No'\n    if file_name.find('.') == len(file_name):\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1 and file_name.find('.') < len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') > len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if len(file_name) == 0 or file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[0] == '.' and file_name[1] not in ('.', '..'):\n        return 'No'\n    if file_name[1] == '.' and file_name[2] not in ('.', '..'):\n        return 'No'\n    if file_name[2] == '.' and file_name[3] not in ('.', '..'):\n        return 'No'\n    if file_name[3] == '.' and file_name[4] not in ('.', '..'):\n        return 'No'\n    if file_name[4] == '.' and file_name[5] not in ('.', '..'):\n        return 'No'\n    if file_name[5] == '.", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if len(file_name) == 0 or file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[0] == '.' and file_name[-1] not in ('.', '..'):\n        return 'No'\n    if file_name[-1] == '.' and file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[-1] == '.' and file_name[0] == '.' and file_name[-2] not in ('.', '..'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') == 1:\n        return 'Yes'\n    if file_name.count('.') > 1:\n        return 'No'\n    if file_name.count('.') == 0 and file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name.count('.') == 0 and file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', '.'):\n        return 'No'\n    if file_name.count('.') == 0", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') == 0:\n        return 'No'\n    if file_name.count('.') > 1:\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z') and file_name[0] not in ('txt', 'exe', 'dll'):\n        return 'No", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    elif file_name.count('.') == 0:\n        return 'No'\n    elif file_name.count('.') == 1:\n        if file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n            return 'No'\n        else:\n            return 'Yes'\n    elif file_name[0] == '.':\n        return 'Yes'\n    else:\n        return 'No'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if len(file_name) == 0 or file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] == '.' and file_name[1] == '.':\n        return 'No'\n    if file_name[0] == '.' and file_name[1] == '.' and file_name[2] == '.':\n        return 'No'\n    if file_name[0] == '.' and file_name[1] == '.' and file_name[2] == '.' and file_name[3] == '.':\n        return 'No'\n    if file_name[0] == '.' and file_name[1] == '.' and file_name[2] == '.' and file_name[3] == '.' and file_name[4] == '.':\n        return 'No'\n    if file_name[0] == '.", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    elif len(file_name) == 0 or file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    elif file_name[0] == '.':\n        return 'No'\n    elif file_name[0] == '.':\n        return 'No'\n    elif file_name[0] == '.':\n        return 'No'\n    elif file_name[0] == '.':\n        return 'No'\n    elif file_name[0] == '.':\n        return 'No'\n    elif file_name[0] == '.':\n        return 'No'\n    elif file_name[0] == '.':\n        return 'No'\n    elif file_name[0] == '.':\n        return 'No'\n    elif file_name[0] == '.':\n        return 'No'\n    elif file_name[0] == '.':\n        return 'No'\n    elif file_name[0] == '.':\n        return 'No'\n    elif file_name[0] == '.':", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3 or file_name[0]!= 'a':\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1 and file_name.find('.') < len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') > len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') > 1:\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', '.'):\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] not in ('a', 'b', 'c', 'd', 'e'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3 or not file_name.isdigit() or file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.') == -1 and file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.') == -1 and file_name.find('.')!= -1:\n        return 'Yes'\n    return 'No'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3 or not file_name.isdigit() or file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'Yes'\n    if file_name.find('.') == -1:\n        return 'Yes'\n    if file_name.find('.') == -1:\n        return 'Yes'\n    if file_name.find('.') == -1:\n        return 'Yes'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    elif file_name.count('.') == 1:\n        return 'Yes'\n    elif file_name.count('.') > 1:\n        return 'No'\n    elif file_name.count('.') == 0 and file_name.count('.') < 3:\n        return 'Yes'\n    elif file_name.count('.') == 0 and file_name.count('.') > 1:\n        return 'No'\n    elif file_name.count('.') == 0 and file_name.count('.') > 0 and file_name.count('.') < 3:\n        return 'Yes'\n    else:\n        return 'No'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\")!= -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    elif len(file_name) == 0 or file_name[0]!= 'a':\n        return 'No'\n    elif file_name.find(\".\") == -1:\n        return 'No'\n    elif file_name.find(\".\") == -1 and file_name[0]!= 'a':\n        return 'No'\n    elif file_name.find(\".\") == -1 and file_name[0] == 'a':\n        return 'No'\n    elif file_name.find(\".\") == -1 and file_name[0] == 'a.' and file_name[1]!= '.':\n        return 'No'\n    elif file_name.find(\".\") == -1 and file_name[0] == 'a.' and file_name[1] == '.':\n        return 'No'\n    elif file_name.find(\".\") == -1 and file_name[0] == 'a.' and file_name[1] == '.' and file_name[2]!= '.':\n        return 'No'\n    elif file_name.find(\".\") == -1 and file_name[0] == 'a.' and file_name[1] == '.' and file_name[2] == '.' and file_name[3]!= '.':\n        return", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3 or not file_name.isdigit():\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if not file_name.isdigit():\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.')!= -1 and file_name.find('.') < len(file_name):\n        return 'Yes'\n    if file_name.find('.') == -1 and file_name.find('.') > len(file_name):\n        return 'Yes'\n    return 'No'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1:\n        if file_name.find('.') == -1:\n            return 'No'\n        if file_name.find('.') == len(file_name) - 1:\n            return 'No'\n        return 'Yes'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'Yes'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if not file_name.isdigit():\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if len(file_name) == 0 or file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[0] == '.' and file_name[1] not in ('.', '..'):\n        return 'No'\n    if file_name[0] == '.' and file_name[1] == '.' and file_name[2] not in ('.', '..'):\n        return 'No'\n    if file_name[0] == '.' and file_name[1] == '.' and file_name[2] == '.' and file_name[3] not in ('.', '..'):\n        return 'No'\n    if file_name[0] == '.' and file_name[1] == '.' and file_name[2] == '.' and file_name[3] == '.' and file_name[4] not in ('.", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if len(file_name) == 0 or file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[1] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if not file_name.isdigit():\n        return 'No'\n    if file_name.startswith('.'):\n        return 'No'\n    if file_name.endswith('.'):\n        return 'No'\n    if file_name.endswith('.txt'):\n        return 'No'\n    if file_name.endswith('.exe'):\n        return 'No'\n    if file_name.endswith('.dll'):\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1 and file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1 and file_name.find('.') < len(file_name):\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') > len(file_name):\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == len(file_name):\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == len(file_name):\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == len(file_name):\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if len(file_name) == 0 or file_name[0] not in range('A', 'Z'):\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1 and file_name.find('.') < len(file_name):\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') > len(file_name):\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') > 1:\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', '.'):\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] not in ('a', 'b', 'c', 'd', 'e'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    elif len(file_name) == 0 or file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    elif file_name[0] == '.' and file_name[1] not in ('.', '..'):\n        return 'No'\n    elif file_name[1] == '.' and file_name[2] not in ('.', '..'):\n        return 'No'\n    elif file_name[1] == '.' and file_name[2] == '.':\n        return 'No'\n    elif file_name[1] == '.' and file_name[2] == '..':\n        return 'No'\n    elif file_name[1] == '.' and file_name[2] == '.' and file_name[3] not in ('.', '..'):\n        return 'No'\n    elif file_name[1] == '.' and file_name[2] == '.", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if len(file_name) == 0:\n        return 'No'\n    if file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[-1] not in ('.', '..'):\n        return 'No'\n    if file_name[-1][-1] not in ('.', '..'):\n        return 'No'\n    if file_name[-1][-1] not in ('.', '..'):\n        return 'No'\n    if file_name[-1][-1] not in ('.', '..'):\n        return 'No'\n    if file_name[-1][-1] not in ('.', '..'):\n        return 'No'\n    if file_name[-1][-1] not in ('.', '..'):\n        return 'No'\n    if file_name[-1][", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3 or len(file_name) < 1:\n        return 'No'\n    if file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[1] not in ('.', '_'):\n        return 'No'\n    if file_name[2] not in ('.', '_'):\n        return 'No'\n    if file_name[2] == '.':\n        return 'No'\n    if file_name[2] == '_':\n        return 'No'\n    if file_name[2] == '.txt':\n        return 'Yes'\n    if file_name[2] == '.exe':\n        return 'Yes'\n    if file_name[2] == '.dll':\n        return 'Yes'\n    return 'No'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3 or len(file_name) < 1:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.')!= -1 and file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.')!= -1 and file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.')!= -1 and file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.')!= -1 and file_name.find('.')!= -1:\n        return 'Yes'\n    return 'No'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1 and file_name.find('.') < len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') > len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[1] not in ('.', '_'):\n        return 'No'\n    if file_name[2] not in ('.', '_'):\n        return 'No'\n    if file_name[2] == '.':\n        return 'No'\n    if file_name[2] == '_':\n        return 'No'\n    if file_name[2] == '.txt':\n        return 'Yes'\n    if file_name[2] == '.exe':\n        return 'Yes'\n    if file_name[2] == '.dll':\n        return 'Yes'\n    return 'No'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if len(file_name) == 0 or not file_name.isdigit():\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.')!= -1 and file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.')!= -1:\n        return 'Yes'\n    return 'No'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3 or len(file_name) < 1:\n        return 'No'\n    if file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[1] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[2] not in ('t', 'e', 'd','s', 'u', 'i', 'o', 'u', 'e', 'd','s', 'u', 'i', 'o', 'u', 'e', 'd','s', 'u', 'i', '", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.', 0, 1)!= -1:\n        return 'Yes'\n    if file_name.find('.', 0, 2)!= -1:\n        return 'Yes'\n    if file_name.find('.', 0, 3)!= -1:\n        return 'Yes'\n    if file_name.find('.', 0, 4)!= -1:\n        return 'Yes'\n    if file_name.find('.', 0, 5)!= -1:\n        return 'Yes'\n    if file_name.find('.', 0, 6)!= -1:\n        return 'Yes'\n    if file_name.find('.', 0, 7)!= -1:\n        return 'Yes'\n    if file_name.find('.', 0, 8)!= -1:\n        return 'Yes'\n    if file_name.find('.', 0, 9)!= -1:\n        return 'Yes'\n    return 'No'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1 and file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.')!= -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') > 1:\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', '", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') == 0:\n        return 'No'\n    if file_name.count('.') == 1:\n        return 'No'\n    if file_name.count('.') > 1:\n        return 'No'\n    if file_name.count('.') == 1 and file_name.count('.') > 1:\n        return 'No'\n    if file_name.count('.') == 1 and file_name.count('.') == 1:\n        return 'No'\n    if file_name.count('.') == 1 and file_name.count('.') == 1:\n        return 'No'\n    if file_name.count('.') == 1 and file_name.count('.') == 1:\n        return 'No'\n    if file_name.count('.') == 1 and file_name.count('.') == 1:\n        return 'No'\n    if file_name.count('.') == 1 and file_name.count('.') == 1:\n        return 'No'\n    if file_name.count('.') == 1 and file_name.count(", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1 and file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3 or not file_name.isdigit() or file_name.find(\".\") == -1:\n        return 'No'\n    elif file_name.find(\".\")!= -1:\n        return 'Yes'\n    else:\n        return 'No'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if len(file_name) == 1 and file_name[0] not in ('.', '_'):\n        return 'No'\n    if file_name[0] == '.' and file_name[1] not in ('.', '_'):\n        return 'No'\n    if file_name[0] == '.' and file_name[1] == '.' and file_name[2] not in ('.', '_'):\n        return 'No'\n    if file_name[0] == '.' and file_name[1] == '.' and file_name[2] == '.' and file_name[3] not in ('.', '_'):\n        return 'No'\n    if file_name[0] == '.' and file_name[1] == '.' and file_name[2] == '.' and file_name[3] == '.' and file_name[4] not in ('.', '_'):\n        return 'No'\n    if file_name[0] == '.' and file_name[1] == '.' and file_name[2] == '.' and file_name[3] == '.' and file_name[4] == '.' and file_name[5] not in ('.', '_'):\n        return 'No'\n    if file", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if len(file_name) == 0 or file_name[0] not in range('A', 'Z'):\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1 and file_name.find('.') < len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') > len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1:\n        if file_name.find('.') > len(file_name) - 1:\n            return 'No'\n        if file_name.find('.') < 0:\n            return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') < 0:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if not file_name.isdigit():\n        return 'No'\n    if file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1 and file_name.find('.') < len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') > len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name[0]!= '.':\n        return 'No'\n    if file_name[1] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[2] not in ('.', '.txt', '.exe', '.dll'):\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if len(file_name) == 0 or file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[0] == '.' and file_name[-1] not in ('.', '..'):\n        return 'No'\n    if file_name[-1] == '.' and file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[-1] == '.' and file_name[0] == '.' and file_name[-2] not in ('.', '..'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1 and file_name.find('.', 0)!= -1:\n        return 'No'\n    if file_name.find('.', 0) == -1:\n        return 'No'\n    if file_name.find('.', 0, 1)!= -1:\n        return 'No'\n    if file_name.find('.', 0, 1, 1)!= -1:\n        return 'No'\n    if file_name.find('.', 0, 1, 1, 1)!= -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    elif len(file_name) < 3:\n        return 'Yes'\n    elif file_name.startswith('.'):\n        return 'Yes'\n    elif file_name.endswith('.'):\n        return 'Yes'\n    elif file_name.startswith('.') and file_name.endswith('.'):\n        return 'Yes'\n    elif file_name.endswith('.dll'):\n        return 'Yes'\n    else:\n        return 'No'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') > 1:\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f',", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if not file_name.isdigit():\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1 and file_name.find('.') < len(file_name):\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') > len(file_name):\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == len(file_name):\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == len(file_name):\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    elif len(file_name) == 0 or file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    elif file_name[0] == '.' and file_name[1] not in ('.', '..'):\n        return 'No'\n    elif file_name[0] == '.' and file_name[1] == '.' and file_name[2] not in ('.', '..'):\n        return 'No'\n    elif file_name[0] == '.' and file_name[1] == '.' and file_name[2] == '.' and file_name[3] not in ('.', '..'):\n        return 'No'\n    elif file_name[0] == '.' and file_name[1] == '.' and file_name[2] == '.' and file_name[3] == '.' and file_name[4] not in ('.", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if len(file_name) < 2:\n        return 'No'\n    if file_name[0] not in string.letters:\n        return 'No'\n    if file_name[-1] not in string.letters:\n        return 'No'\n    if file_name[0] == file_name[-1] and file_name[0]!= '.':\n        return 'No'\n    if file_name[0] == '.' and file_name[-1] not in string.letters:\n        return 'No'\n    if file_name[0] == '.' and file_name[-1] == '.':\n        return 'No'\n    if file_name[0] == '.' and file_name[-1] == '.' and file_name[1]!= '.':\n        return 'No'\n    if file_name[0] == '.' and file_name[-1] == '.' and file_name[1] == '.':\n        return 'No'\n    if file_name[0] == '.' and file_name[-1] == '.' and file_name[1] == '.' and file_name[2]!= '.':\n        return 'No'\n    if file_name[0] == '.' and file_name[-1] == '.' and file_name[2] == '.' and file_name[3]!= '.':\n        return 'No'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3 or len(file_name) < 1:\n        return 'No'\n    if file_name[0] not in string.letters:\n        return 'No'\n    if file_name[-1] not in string.letters:\n        return 'No'\n    if file_name[-1][:-1] not in string.letters:\n        return 'No'\n    if file_name[-1][-1] not in string.letters:\n        return 'No'\n    if file_name[-1][-1] not in string.letters:\n        return 'No'\n    if file_name[-1][-1] not in string.letters:\n        return 'No'\n    if file_name[-1][-1] not in string.letters:\n        return 'No'\n    if file_name[-1][-1] not in string.letters:\n        return 'No'\n    if file_name[-1][-1] not in string.letters:\n        return 'No'\n    if file_name[-1][-1] not in string.letters:\n        return 'No'\n    if file_name[-1][-1] not in string.letters:\n        return 'No'\n    if file_name[-1][-1] not in string.letters:\n        return 'No'\n    if file_name[-1][-1] not in string.letters:\n        return 'No'\n    if file_name[-1][-1]", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'Yes'\n    return 'No'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if len(file_name) < 3:\n        return 'No'\n    if file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[1] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[2] not in ('txt', 'exe', 'dll'):\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if not file_name.isdigit():\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if not file_name.isdigit():\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1 and file_name.find('.') < len(file_name):\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') > len(file_name):\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == len(file_name):\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') > 1:\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', '.'):\n        return 'No'\n    if file_name.count('.') == 1 and file_name[0] not in ('a', 'b', 'c', 'd', 'e'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3 or len(file_name) < 1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.') == -1 and file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.') == -1 and file_name.find('.')!= -1 and file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.') == -1 and file_name.find('.')!= -1 and file_name.find('.')!= -1 and file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.') == -1 and file_name.find('.')!= -1 and file_name.find('.')!= -1 and file_name.find('.')!= -1 and file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if not file_name.isdigit():\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\")!= -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if not file_name.isdigit():\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if not file_name.isdigit():\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1 and file_name.find('.') < len(file_name):\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') > len(file_name):\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == len(file_name):\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == len(file_name):\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if not file_name.isdigit():\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if not file_name.isdigit():\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1 and file_name.find('.') < len(file_name):\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') > len(file_name):\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == len(file_name):\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == len(file_name):\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3 or file_name[0]!= 'a':\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1 and file_name[-1:] not in ['exe', 'dll']:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name[0]!= '.':\n        return 'No'\n    if file_name[1]!= 'a':\n        return 'No'\n    if file_name[2]!= 'a':\n        return 'No'\n    if file_name[3]!= 'a':\n        return 'No'\n    if file_name[4]!= 'a':\n        return 'No'\n    if file_name[5]!= 'a':\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1 and file_name.find('.') < len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') > len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') == 1:\n        return 'No'\n    if file_name.count('.') > 1:\n        return 'No'\n    if file_name.count('.') == 0 and file_name.count('.') > 1:\n        return 'No'\n    if file_name.count('.') == 0 and file_name.count('.') == 1:\n        return 'No'\n    if file_name.count('.') == 0 and file_name.count('.') == 1:\n        return 'No'\n    if file_name.count('.') == 0 and file_name.count('.') == 1:\n        return 'No'\n    if file_name.count('.') == 0 and file_name.count('.') == 1:\n        return 'No'\n    if file_name.count('.') == 0 and file_name.count('.') == 1:\n        return 'No'\n    if file_name.count('.') == 0 and file_name.count('.') == 1:\n        return 'No'\n    if file_name.count(", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1 and file_name.find('.') < len(file_name):\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') > len(file_name):\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == len(file_name):\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == len(file_name):\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == len(file_name):\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == len(file_name):\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if not file_name.isdigit():\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.')!= -1 and file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.') == -1 and file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.') == -1 and file_name.find('.')!= -1 and file_name.find('.')!= -1:\n        return 'Yes'\n    return 'No'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    elif len(file_name) == 0 or file_name[0] not in ('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'):\n        return 'No'\n    elif file_name.find('.') == -1:\n        return 'Yes'\n    elif file_name.find('.') == -1 and file_name[0] in ('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'):\n        return 'Yes'\n    else:\n        return 'No'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3 or len(file_name) < 1:\n        return 'No'\n    if file_name[0] not in 'abcdefghijklmnopqrstuvwxyz':\n        return 'No'\n    if file_name[1] not in 'abcdefghijklmnopqrstuvwxyz':\n        return 'No'\n    if file_name[2] not in 'abcdefghijklmnopqrstuvwxyz':\n        return 'No'\n    if file_name[2] == '.':\n        return 'No'\n    if file_name[2] in 'txt':\n        return 'Yes'\n    if file_name[2] in 'exe':\n        return 'Yes'\n    if file_name[2] in 'dll':\n        return 'Yes'\n    return 'No'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3 or not file_name.isdigit() or file_name.find('.')!= -1:\n        return 'No'\n    elif file_name.find('.') == -1:\n        return 'Yes'\n    elif file_name.find('.') == -1 and file_name.find('.')!= -1:\n        return 'Yes'\n    elif file_name.find('.') == -1 and file_name.find('.')!= -1 and file_name.find('.')!= -1:\n        return 'Yes'\n    elif file_name.find('.') == -1 and file_name.find('.')!= -1 and file_name.find('.')!= -1 and file_name.find('.')!= -1:\n        return 'Yes'\n    else:\n        return 'No'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if len(file_name) == 0 or file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[0] == '.' and file_name[1] not in ('.', '..'):\n        return 'No'\n    if file_name[1] == '.' and file_name[2] not in ('.', '..'):\n        return 'No'\n    if file_name[2] == '.' and file_name[3] not in ('.', '..'):\n        return 'No'\n    if file_name[3] == '.' and file_name[4] not in ('.', '..'):\n        return 'No'\n    if file_name[4] == '.' and file_name[5] not in ('.', '..'):\n        return 'No'\n    if file_name[5] == '.", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3 or len(file_name) < 1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1 and file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    elif len(file_name) == 0:\n        return 'No'\n    elif file_name.find('.')!= -1:\n        return 'Yes'\n    elif file_name.find('.') == -1 and file_name.find('.', 0, 1)!= -1:\n        return 'Yes'\n    elif file_name.find('.', 0, 1) == -1 and file_name.find('.', 1)!= -1:\n        return 'Yes'\n    elif file_name.find('.', 1)!= -1:\n        return 'Yes'\n    else:\n        return 'No'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if len(file_name) < 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    elif len(file_name) == 0:\n        return 'No'\n    elif file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    elif file_name[-1] not in ('.', '.exe', '.dll'):\n        return 'No'\n    else:\n        return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if len(file_name) == 0 or file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[0] == '.' and file_name[1] not in ('.', '..'):\n        return 'No'\n    if file_name[1] == '.' and file_name[2] not in ('.', '..'):\n        return 'No'\n    if file_name[2] == '.' and file_name[3] not in ('.', '..'):\n        return 'No'\n    if file_name[3] == '.' and file_name[4] not in ('.', '..'):\n        return 'No'\n    if file_name[4] == '.' and file_name[5] not in ('.', '..'):\n        return 'No'\n    if file_name[5] == '.", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') == 0:\n        return 'No'\n    if file_name.count('.') == 1:\n        return 'No'\n    if file_name.count('.') == 2:\n        return 'No'\n    if file_name.count('.') == 3:\n        return 'No'\n    if file_name.count('.') == 4:\n        return 'No'\n    if file_name.count('.') == 5:\n        return 'No'\n    if file_name.count('.') == 6:\n        return 'No'\n    if file_name.count('.') == 7:\n        return 'No'\n    if file_name.count('.') == 8:\n        return 'No'\n    if file_name.count('.') == 9:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if len(file_name) == 0 or file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[1] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if not file_name.isdigit():\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1 and file_name.find('.') < len(file_name):\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') > len(file_name):\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == len(file_name):\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == len(file_name):\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.') == len(file_name):\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if not file_name.isdigit():\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1 and file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1 and file_name.find('.')!= -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if len(file_name) < 3:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return 'No'\n    if file_name.find(\".\") == -1:\n        return", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if not file_name.isdigit():\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.', 0, 1)!= -1:\n        return 'Yes'\n    if file_name.find('.', 0, 2)!= -1:\n        return 'Yes'\n    if file_name.find('.', 0, 3)!= -1:\n        return 'Yes'\n    return 'No'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'Yes'\n    if file_name.find('.', 0, 1)!= -1:\n        return 'Yes'\n    if file_name.find('.', 0, 2)!= -1:\n        return 'Yes'\n    if file_name.find('.', 0, 3)!= -1:\n        return 'Yes'\n    return 'No'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3 or len(file_name) < 1:\n        return 'No'\n    if file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[1] not in ('.', '_'):\n        return 'No'\n    if file_name[2] not in ('.', '_'):\n        return 'No'\n    if file_name[2] == '.':\n        return 'No'\n    if file_name[2] == '_':\n        return 'No'\n    if file_name[2] == '.txt':\n        return 'No'\n    if file_name[2] == '.exe':\n        return 'No'\n    if file_name[2] == '.dll':\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') == 1:\n        return 'No'\n    if file_name.count('.') > 1:\n        return 'No'\n    if file_name.count('.') == 0 and file_name[0]!= 'a':\n        return 'No'\n    if file_name.count('.') == 0 and file_name[0]!= 'z':\n        return 'No'\n    if file_name.count('.') == 0 and file_name[0]!= 'a':\n        return 'No'\n    if file_name.count('.') == 0 and file_name[0]!= 'z':\n        return 'No'\n    if file_name.count('.') == 0 and file_name[0]!= 'a':\n        return 'No'\n    if file_name.count('.') == 0 and file_name[0]!= 'z':\n        return 'No'\n    if file_name.count('.') == 0 and file_name[0]!= 'a':\n        return 'No'\n    if file_name.count('.') == 0 and file_name[0]!= 'z':\n        return 'No'\n    if file_name.count", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if not file_name.isdigit():\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name.find('.')!= -1:\n        if file_name.find('.')!= -1:\n            return 'No'\n        if file_name.find('.')!= -1:\n            return 'No'\n        return 'No'\n    if file_name.find('.')!= -1:\n        if file_name.find('.')!= -1:\n            return 'No'\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if len(file_name) == 0 or file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[0] == '.' and file_name[1] not in ('.', '..'):\n        return 'No'\n    if file_name[1] == '.' and file_name[2] not in ('.', '..'):\n        return 'No'\n    if file_name[2] == '.' and file_name[3] not in ('.', '..'):\n        return 'No'\n    if file_name[3] == '.' and file_name[4] not in ('.', '..'):\n        return 'No'\n    if file_name[4] == '.' and file_name[5] not in ('.', '..'):\n        return 'No'\n    if file_name[5] == '.", "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return 'No'\n    if len(file_name) == 0 or file_name[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n        return 'No'\n    if file_name[0] == '.' and file_name[1] not in ('.', '..'):\n        return 'No'\n    if file_name[1] == '.' and file_name[2] not in ('.', '..'):\n        return 'No'\n    if file_name[2] == '.' and file_name[3] not in ('.', '..'):\n        return 'No'\n    if file_name[3] == '.' and file_name[4] not in ('.', '..'):\n        return 'No'\n    if file_name[4] == '.' and file_name[5] not in ('.', '..'):\n        return 'No'\n    if file_name[5] == '."]]