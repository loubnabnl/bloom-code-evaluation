[["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Init\n    tmp = []\n    for i in arr:\n        tmp.append(i)\n    # Sort by number of ones\n    for i in range(len(tmp)):\n        for j in range(len(tmp)):\n            if tmp[i] > tmp[j]:\n                tmp[i], tmp[j] = tmp[j], tmp[i]\n    # Sort by decimal value\n    for i in range(len(tmp)):\n        for j in range(len(tmp)):\n            if abs(tmp[i]) > abs(tmp[j]):\n                tmp[i], tmp[j] = tmp[j], tmp[i]\n    return tmp\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted([int(x) for x in arr], key=lambda x: int(x.count('1')), reverse=True)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def __sort(n):\n        if n == 0:\n            return ()\n        elif n < 0:\n            return ()\n        else:\n            return (n % 2 == 0 and n >= 0)\n\n    return sorted(__sort(x) for x in arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    res = []\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            res.append(0)\n        else:\n            res.append(1)\n    return res", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    counter = 0\n    for element in arr:\n        if element < 0:\n            counter += 1\n            continue\n        if counter == 0:\n            first_one = True\n        else:\n            first_one = False\n\n        if counter == 1 and first_one == True:\n            arr.insert(0, counter - 1)\n            counter = 0\n        else:\n            arr.insert(0, counter)\n            counter += 1\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) > 1:\n        max_i = 0\n        max_d = 0\n        for i in range(len(arr)):\n            if arr[i] > max_d:\n                max_i = i\n                max_d = arr[i]\n        if max_d > max_i:\n            # Arr has only one element\n            max_i = 0\n            max_d = 0\n        if max_d == max_i:\n            # Arr is sorted\n            return\n        sorted_arr = []\n        for i in range(len(arr)):\n            temp = arr[i]\n            # Check if max_d is in the number\n            if temp > max_d:\n                temp = max_d\n                max_d = temp\n            # Check if max_i is in the number\n            if temp < max_i:\n                temp = max_i\n                max_i = temp\n            sorted_arr.append(temp)\n        return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: len(x) % 2 == 0, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not isinstance(arr, list):\n        return []\n\n    left = arr[:]\n    right = arr[1:]\n    lower = 0\n    uppper = len(arr)\n\n    while lower < uppper:\n        next_lower = left.index(left[lower]) + 1\n        next_upper = left.index(left[upper]) + 1\n        if next_lower < next_upper:\n            next_lower = next_upper\n        else:\n            next_upper = left.index(left[next_lower]) + 1\n        if next_lower == next_upper:\n            return [left[left.index(left[lower])], left[left.index(left[upper])]]\n        if left[left.index(left[lower])] < left[left.index(left[upper])]:\n            left[left.index(left[lower])], left[left.index(left[upper])] = left[left.index(left[lower])], left[left.index(left[upper])]\n            lower = next_lower\n        elif left[left.index(left[upper])] > left[left.", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 1:\n        return (arr.index(0)+1, arr[0])\n    else:\n        return (0, min(arr, key=lambda x: x.count(1) + x.count(0)))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def cmp(a, b):\n        \"\"\"\n        This compares two integers and returns the number of ones in their\n        binary representation in ascending order.\n        \"\"\"\n        a = a//2\n        b = b//2\n        if a == b:\n            return 0\n        elif a > b:\n            return 1\n        elif a < b:\n            return -1\n        else:\n            return cmp(a, b)+1\n\n    def sort(n):\n        \"\"\"\n        This sorts the array of non-negative integers n according to number\n        of ones in their binary representation.\n        \"\"\"\n\n        a = [0]\n        b = [0]\n        for i in range(len(n)):\n            a.append(n[i])\n        for i in range(len(n)):\n            b.append(len(n[i]))\n        if len(a) == len(b):\n            return cmp(a, b)\n        else:\n            return sort_array(a)[::-1]\n\nsort = sort_array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    a = list(arr)\n    a.sort(key=lambda x: x.isdigit())\n    return a", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # add 0 to ensure that we can compare 0 with any number\n    arr.append(0)\n    # begin by comparing the binary representation of the numbers\n    for i in range(len(arr)):\n        bits = arr[i]\n        if bits == 0:\n            continue\n        else:\n            # compare the number of ones in their binary representation\n            if bits & 1 == 1:\n                continue\n            if bits & 2:\n                arr[i] += 1\n            else:\n                arr[i] -= 1\n        if i == len(arr) - 1:\n            break\n        else:\n            sort_array(arr[:i])\n    # sort based on number of ones\n    return [val for val in arr if val > 0]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def cmp(a, b):\n        for i in range(len(a)):\n            if a[i] & 1 == 1:\n                return 1\n            elif a[i] & 1 == 0:\n                return -1\n        return cmp(b, a)\n\n    a = []\n    b = []\n    k = 0\n\n    for i in range(len(arr)):\n        if arr[i] & 1:\n            a.append(k)\n            k += 1\n        elif arr[i] & 1:\n            b.append(k)\n            k += 1\n\n    if len(a) < len(b):\n        return cmp(a, b)\n    else:\n        return cmp(b, a)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def count(arr):\n        \"\"\"\n        Number of ones in an array is used to sort by.\n        \"\"\"\n        count = 0\n        for i in range(len(arr)):\n            if arr[i]:\n                count += 1\n        return count\n\n    arr = list(arr)\n    if arr:\n        return sorted(count(arr), key=count)\n    else:\n        return sorted(count([]), key=count)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(array(arr, 0), key=lambda x: (x % 2 == 0 and (x % 10 == 0 or x % 100 == 0)))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr_out = []\n    for n in arr:\n        if n == 1:\n            arr_out.append(1)\n        else:\n            arr_out.append(int(n) + 1)\n    return arr_out", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    sorted_arr = []\n    arr_len = len(arr)\n    for i in range(arr_len):\n        if arr[i] == 1 and arr[i+1] == 0:\n            sorted_arr.append(i)\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n\n    n = len(arr)\n    if n == 0:\n        return arr\n\n    if n == 1:\n        return sort_array([0, arr[0], 0, 0, 1, 2, 3, 4, 5, 6, 7])\n\n    res = []\n    for i in range(n - 1):\n        for j in range(1, n):\n            res.append(arr[i] + arr[j])\n        if arr[i] == arr[n - 1]:\n            res.append(arr[i])\n        else:\n            res.append(arr[i])\n\n    return sort_array(res)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = [arr]\n    for i in range(len(arr)):\n        if len(arr[i]) == 1:\n            arr[i].sort()     # get the sorted number\n            for j in range(len(arr[i])):\n                if arr[i][j]!= 0:\n                    if sort_array(arr[i][:j]) < sort_array(arr[i][j:]):\n                        break\n        elif arr[i][-1][-1] == 1:\n            arr[i].sort()     # get the sorted number\n            for j in range(len(arr[i])):\n                if arr[i][j]!= 0:\n                    if sort_array(arr[i][:j]) < sort_array(arr[i][j:]):\n                        break\n            arr[i][:-1].reverse() # reverse the numbers\n        else:\n            arr[i].sort()     # get the sorted number\n            for j in range(len(arr[i])):\n                if arr[i][j]!= 0:\n                    if sort_array(arr[i][:j]) < sort_array(arr[i][j:]):\n                        break\n            arr[i][:-1].reverse() # reverse the numbers\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    tmp = [0]\n    for i in arr:\n        if i == 0:\n            continue\n        tmp.append(i)\n        if len(tmp) > 0:\n            if tmp[-1] % 2 == 0:\n                tmp.append(0)\n    return tmp", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    list = []\n    for i in range(len(arr)):\n        if arr[i] & 1:\n            list.append(arr[i])\n    return list", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    sorted_array = []\n    for i, s in enumerate(arr):\n        if s & 1:\n            sorted_array.append(arr[i])\n    return sorted_array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n\n    num_ones = len(arr[0]) * 10\n    arr = [arr]*num_ones\n    for i in range(num_ones):\n        arr[i] *= 10\n        arr[i] += arr[i] % 10\n\n    arr.sort(key=lambda x: x % 10)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return cmp(int(x), int(y)) if x < y else cmp(int(x), int(y)) if x == y else cmp(int(x), int(y)) if x < y else cmp(int(x), int(y)) if x == y else cmp(int(x), int(y)) if x < y else cmp(int(x), int(y)) if x == y else cmp(int(x), int(y)) if x < y else cmp(int(x), int(y)) if x == y else cmp(int(x), int(y)) if x < y else cmp(int(x), int(y)) if x < y else cmp(int(x), int(y)) if x < y else cmp(int(x), int(y)) if x < y else cmp(int(x), int(y)) if x < y else cmp(int(x), int(y)) if x < y else cmp(int(x), int(y)) if x < y else cmp(int(x), int(y)) if x < y else cmp(int(x), int(y)) if x < y", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x : x & 1, reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not arr:\n        return\n    if len(arr) == 1:\n        return sort_array(arr[0])\n    if len(arr) == 2:\n        return sort_array(arr[0], arr[1])\n    if len(arr) == 3:\n        return sort_array(arr[0], arr[1], arr[2])\n    if len(arr) == 4:\n        return sort_array(arr[0], arr[1], arr[2], arr[3])\n    return", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Use the 'quicksort' algorithm.\n    # So if you know the size of your array, you can find the best way to implement it.\n    # This is one of the first things you learn in Python.\n    # The array must be sorted in ascending order.\n    # Then you must implement a quicksort algorithm.\n    # You can use any 'quicksort' algorithm you want, but here is a basic 'quicksort'\n    # algorithm:\n    #   this quicksort uses linear scan to build a table.\n    #   every time the table is built, the oldest elements are put in front.\n    #   we go on as long as the table is not full (there are no old elements).\n    #   after this, if there are more old elements than new, we use the 'greedy'\n    #   algorithm, in which we replace the oldest old element with the first new element\n    #   and then we go on as long as the table is not full.\n    #   if there are no old elements, we use the 'quicksort' algorithm.\n    #   we go on as long as there are more old elements than new.\n    #   at the end, there are no old elements, and the result is the same.\n    # Note that we don't use", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    while len(arr) > 1:\n        i = 0\n        while arr[i] >= arr[i + 1]:\n            i += 1\n        j = 0\n        while arr[j] <= arr[j + 1]:\n            j += 1\n        if i < j:\n            a = arr[i]\n            b = arr[j]\n            arr[i], arr[j] = arr[j], arr[i]\n            arr[j], a = a, j\n            arr[j], b = b, j\n        sort_array(arr[:i])\n        sort_array(arr[i:])\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    try:\n        order = int(input())\n    except ValueError:\n        print(\"Incorrect number of input arguments.\")\n        return\n    for x in range(len(arr)):\n        if arr[x] == 0:\n            order -= 1\n        else:\n            order += 1\n            if order < 0:\n                break\n    return sort_array(arr)[order]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 1:\n        return arr\n    else:\n        st = 0\n        n = len(arr)\n        for i in range(0, n - 1):\n            if arr[i]!= 0:\n                st = i\n                break\n        st = n - st\n        if st < 0:\n            st = n\n        n -= st\n        st = 0\n        for i in range(0, n - 1):\n            if arr[i]!= 0:\n                st = i\n                break\n        st = n - st\n        if st < 0:\n            st = n\n        n -= st\n        st = 0\n        for i in range(0, n - 1):\n            if arr[i]!= 0:\n                st = i\n                break\n        st = n - st\n        if st < 0:\n            st = n\n        n -= st\n        return arr[st:(st + 1)], arr[(st + 1):n], arr[n]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Create a sorted list\n    if len(arr) == 0:\n        return []\n\n    # Binary search for the largest number of ones\n    max_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2:\n            max_index = i\n    max_index += 1\n\n    # Reverse the list\n    return sorted(arr[max_index:], key=lambda x: abs(x - (x % 2)))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # sort the array\n    arr.sort(key=lambda x: x.count(\"1\"))\n\n    # now sort based on its binary representation\n    # convert it to decimal\n    # sort it again\n    # return the array\n    return [ord(digit) for digit in arr]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(a, b):\n        return cmp(a) - cmp(b)\n    arr = sorted(arr, cmp=cmp)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def test_number_of_holes(num):\n        \"\"\"\n        Assert that the number of holes in an array is even.\n\n        >>> sort_array([1, 2, 3, 1, 1, 2, 3]) == [1, 1, 2, 1, 2, 3]\n        \"\"\"\n        if num % 2 == 0:\n            return True\n        return False\n\n    for i in range(len(arr) - 1):\n        if test_number_of_holes(arr[i]) and test_number_of_holes(arr[i + 1]):\n            return True\n        if not test_number_of_holes(arr[i]) and test_number_of_holes(arr[i + 1]):\n            return False\n\n    return False", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # As a counter, we use a list of positive integers, sorted by increasing\n    # value. \n    num_values = [0] * len(arr)\n    for x in arr:\n        num_values.append(x)\n    for x in num_values:\n        if x > 0:\n            num_values.append(x)\n            num_values[-1] += 1\n    return num_values", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sort_array_lit(arr, 0)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    result = []\n    for item in arr:\n        try:\n            result.append(int(item))\n        except:\n            result.append(int(str(item)))\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # See Wikipedia for the definition of an integer\n\n    def integer_range(n):\n        \"\"\"\n        This function takes an integer n, and returns a tuple (min, max)\n        of the integers that are greater than or equal to n.\n        \"\"\"\n        if n < 0:\n            raise ValueError(\"non-positive integer\")\n        return (-n, n)\n\n    def binary_lookup(n):\n        \"\"\"\n        This function takes an integer n, and returns a tuple (low, high)\n        of the integers that are between n and (n + 1).\n        \"\"\"\n        if n < 0:\n            raise ValueError(\"non-positive integer\")\n        return (n - 1, n + 1)\n\n    def binary_search(lower, upper, n):\n        \"\"\"\n        This function takes an integer n, an integer lower and an integer upper,\n        and returns a tuple of integers (i, j) that are such that n >= i and\n        n <= j < upper or n >= j and n <= i < lower.\n        \"\"\"\n        if n < lower or n > upper:\n            return None\n        i = binary_lookup(n)\n        while i >= lower and i < upper:\n            j = binary_lookup(i)\n            if n >= j and n <= i < upper:", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    l = len(arr)\n    x = 0\n    while x < l:\n        x += 1\n        a = arr[x]\n        b = arr[x-1]\n        c = arr[x-2]\n        if a > b:\n            arr[y] = a\n            arr[x+1] = b\n            arr[x+2] = c\n            x += 3\n            if x == l:\n                break\n        else:\n            if a < b:\n                arr[y] = b\n                arr[x+1] = a\n                arr[x+2] = c\n                x += 3\n                if x == l:\n                    break\n        if a!= 0:\n            if x == l:\n                break\n        elif b!= 0:\n            if x == l:\n                break\n        elif c!= 0:\n            if x == l:\n                break\n    return arr</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return [int(item) for item in sorted(arr, key=int)]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: x.count(1), reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    sorted_array = []\n    for i in range(len(arr)):\n        if int(arr[i]) % 2 == 0:\n            sorted_array.append(arr[i])\n        else:\n            sorted_array.append(-arr[i])\n\n    return sorted_array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Get the count of ones\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] & 1:\n            count += 1\n\n    # Calculate the sorted number of ones\n    for i in range(len(arr)):\n        if count % 2 == 0:\n            arr[i] = int(round(count / 2))\n        else:\n            arr[i] = int(round(count / 2) + 1)\n\n    # Sort by the number of ones\n    return sort_array(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    x = 0\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            x = x - 1\n        else:\n            x = x + 1\n    return x", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n\n    # Since the given array is non-negative, it must be sorted in ascending order\n    # with respect to the binary representation\n    # First, we build the list of strings with length of the number of ones in\n    # the binary representation of the numbers in the array.\n    num_ones = [0] * len(arr)\n    for i, num in enumerate(arr):\n        num_ones[i] = 0\n        for j in range(len(num)):\n            if num[j] == 1:\n                num_ones[i] = num_ones[i] + 1\n\n    # Then, we sort the list of strings in ascending order with respect to the\n    # decimal value.\n    # Note: this is the only sorting possible for non-negative numbers.\n    try:\n        numlist = sorted(num_ones, key=decimal.Decimal)\n    except TypeError:\n        numlist = sorted(num_ones, key=int)\n\n    return numlist", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # First, sort according to number of ones\n    # (binary representation)\n    r = sum(arr)\n    s = sum(reversed(arr))\n    if r == 0:\n        return [1, 2, 3, 4, 5]\n    else:\n        return [sorted(t, key=s) for t in arr]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if arr:\n        arr.sort(key=lambda x: x == '1')\n        return arr\n\n    else:\n        return None", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    temp = []\n    sorted_array = []\n    num_of_atoms = len(arr)\n\n    #Here, we are checking the number of ones in the binary representation of the\n    #array to sort.\n    for i in range(num_of_atoms):\n        if(arr[i] & 1) == 1:\n            temp.append(arr[i])\n            sorted_array.append(i)\n            continue\n        else:\n            temp.append(arr[i])\n            sorted_array.append(0)\n\n    return sorted_array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    order = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] < arr[j]:\n                order.append(j)\n                arr[j] = arr[i]\n            elif arr[j] < arr[i]:\n                order.append(i)\n                arr[i] = arr[j]\n        order.reverse()\n        sort_array(arr[:i])\n        sort_array(arr[i+1:])\n\n    return order\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    try:\n        return sorted(arr, key=lambda x: x[1:].count(\"1\") + x[0].count(\"1\") < 0)\n    except TypeError:\n        pass\n    try:\n        return sorted(arr, key=lambda x: x[0].count(\"0\") + x[1:].count(\"0\") < 0)\n    except TypeError:\n        pass\n    try:\n        return sorted(arr, key=lambda x: x[1].count(\"0\") + x[0].count(\"0\") < 0)\n    except TypeError:\n        pass\n    try:\n        return sorted(arr, key=lambda x: x[0].count(\"0\") + x[1].count(\"0\") < 0)\n    except TypeError:\n        pass\n    return sorted(arr, key=lambda x: x[0].count(\"0\") + x[1].count(\"0\") < 0)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    i = 0\n    while i < len(arr):\n        if arr[i] == 1:\n            if arr[i+1] == 1:\n                if arr[i+2] == 1:\n                    if arr[i+3] == 1:\n                        if arr[i+4] == 1:\n                            i += 4\n                    else:\n                        i += 2\n                else:\n                    i += 1\n            else:\n                i += 1\n        else:\n            i += 1\n    return i", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted([arr[i] for i in xrange(len(arr))], key=lambda s: s[1:] if s else s[:-1])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n\n    max_val = None\n    for v in arr:\n        if v == 0:\n            continue\n        if max_val is None:\n            max_val = v\n            continue\n        if max_val < v:\n            max_val = v\n            continue\n\n    max_val = abs(max_val)\n    for v in arr:\n        if v == max_val:\n            break\n\n    if max_val == 0:\n        return\n\n    for i in range(0, len(arr)):\n        if arr[i]!= 0:\n            sorted_arr = sort_array([arr[i], arr[i+1]])\n            if sorted_arr!= sorted_arr:\n                return False\n\n    sorted_arr = sort_array([arr[i], max_val])\n    return True", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr[0]]\n    else:\n        return sorted_array(arr, len(arr) // 2)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: (int(x) & 1), reverse=True)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    if len(arr) == 1:\n        return sort_array(arr[0])\n    return sort_array(arr[1:])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def isOne(v):\n        return v == 1\n\n    def sortArray(arr):\n        \"\"\"\n        Sort the array of non-negative integers according to number of ones in\n        their binary representation in ascending order.\n        \"\"\"\n        temp = []\n        for i in range(len(arr)):\n            temp.append(arr[i])\n            if isOne(arr[i]):\n                arr[i] += 1\n        return arr[:]\n\n    for i in sort_array(arr):\n        for j in range(len(i)):\n            if i[j] < 0:\n                continue\n            if isOne(i[j]):\n                i[j] += 1\n\n    return i[0]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    res = []\n    for x in arr:\n        res.append(int(x))\n    return res\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    sorted = []\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            sorted.append(arr[i-1])\n        else:\n            sorted.append(arr[i])\n    return sorted", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    l = 0\n    m = len(arr)\n    while l < m:\n        if arr[l] & 1 == 0:\n            sorted.append(arr[l])\n            l += 1\n        else:\n            n = abs(arr[l])\n            if n!= 0:\n                k = n % 2\n                l -= 1\n                if k == 0:\n                    sorted_arr.append(arr[l])\n                    l += 1\n        if l == m:\n            return sorted\n        else:\n            m -= 1\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) < 1:\n        return arr\n    new_arr = []\n    last = 0\n    for i in range(len(arr)):\n        if last > i:\n            new_arr.append(arr[last])\n            last = i\n        else:\n            new_arr.append(arr[i])\n    return new_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    global index\n    global n\n    global d1\n    global d2\n    global d2_index\n    global k\n    global v\n    global mx\n    global mx1\n    global mx_index\n    global mx_count\n    global a\n    global b\n    global count\n    global max\n    global n_c\n    global i\n    global j\n    global new_d1\n    global new_d2\n    global new_d2_index\n    global new_k\n    global new_v\n    global new_mx\n    global new_mx_index\n    global new_mx_count\n    global new_ma\n    global new_mb\n    global new_mb_index\n    global new_n_c\n    global new_i\n    global new_j\n    global new_index\n    global new_min\n    global new_ma_index\n    global new_ma_count\n    global new_mb_index\n    global new_mb_count\n    global n_min\n    global mx_index\n    global mx_count\n    global mx_count1\n    global mx_count2\n    global mx_count3\n    global mx_count4\n    global mx_count5\n    global mx_count6\n    global mx_count7\n    global mx_count8\n    global mx_count9\n    global mx_count10\n    global mx_count11\n    global mx_count12\n    global mx_count13\n    global mx_count14\n    global mx_count15\n    global mx_count16\n    global mx_count17\n    global mx_count18", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def asc(i):\n        return i % 2 == 0\n\n    for i in range(len(arr)-1):\n        a = arr[i]\n        b = arr[i+1]\n        c = arr[i+2]\n        d = arr[i+3]\n        if a == 0:\n            yield asc(b)\n        else:\n            if a > b:\n                yield asc(b)\n            else:\n                yield asc(a)\n    yield asc(arr[-1])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    a = list(arr)\n    l = len(a)\n    if l > 0:\n        num = 0\n        for i in range(l):\n            if a[i] == 1:\n                num += 1\n        if num > 0:\n            return a[::-1]\n        else:\n            return a[::-1] + a[::-1]\n\n    return a[::-1] + a\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    array = []\n    last, first = 0, len(arr)\n    for x in range(len(arr)):\n        if arr[x] > arr[last]:\n            first = x\n        last = x\n    if first < last:\n        array.insert(0, last)\n        for i in range(first, len(arr) - 1):\n            array.insert(i, arr[i])\n        array.insert(len(arr) - 1, first)\n    return array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def sort(a):\n        if a[0]:\n            return sort_array(a)\n        else:\n            return sort_array(a[1:])\n\n    for i in range(len(arr)):\n        arr[i] = sort(arr[i])\n\n    return sort(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    ans = []\n    for i in range(len(arr)):\n        if len(arr[i]) == 1:\n            ans.append(arr[i])\n        else:\n            for j in range(i + 1, len(arr)):\n                if arr[i] < arr[j]:\n                    ans.insert(0, arr[i])\n                    ans.insert(i + 1, arr[j])\n                    break\n            else:\n                ans.append(arr[i])\n    return ans", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return [arr]\n\n    # new approach, which allows sorting negative numbers\n    # see: http://stackoverflow.com/questions/2358033/how-to-sort-array-of-negative-numbers-in-python\n    i = 0\n    arr_length = len(arr)\n    while i < arr_length:\n        if arr[i] == 0:\n            arr.insert(i, 0)\n            i += 1\n        else:\n            i += 1\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    print(\"arr\", arr)\n    if len(arr) < 2:\n        return arr\n    a = []\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] == arr[j]:\n                a.append(arr[j])\n    a.sort(key=lambda x: x[0])\n    return a", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    arr = sorted(arr, key=lambda x: x[1:], reverse=True)\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # A simple conversion of a list to an array\n    a = []\n    # We must sort it\n    for x in range(len(arr)):\n        for i in range(len(arr)):\n            if arr[i] < x:\n                arr[i], arr[x] = arr[x], arr[i]\n            else:\n                break\n    # We must reset the list to the original form\n    a.extend(arr)\n\n    # An alternative solution\n    # a = sorted(arr, key=lambda x: int(x.replace(\"1\", \"\")))\n    # sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    sort_array(a)\n\n    return", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return arr\n    ans = []\n    if n % 2 == 0:\n        while n!= 0:\n            new_val = int(n//2) + 1\n            new_val = new_val % 2\n            ans.append(new_val)\n            n -= 2\n        return ans\n    else:\n        while n!= 0:\n            new_val = int(n//2)\n            new_val = new_val % 2\n            if new_val % 1 == 0:\n                ans.append(new_val)\n            else:\n                new_val -= 1\n            n -= 2\n        return ans", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # If there's a tie, pick the one with more ones\n    if len(arr) == 2:\n        for key in reversed(sorted(arr, key=len)):\n            if len(arr[key]) > len(arr[0]):\n                return key\n\n    # Otherwise, sort according to the numbers, ignoring ties\n    num = 0\n    num1 = 0\n    num2 = 0\n    num3 = 0\n    for index, val in enumerate(arr):\n        if val % 2:\n            num += 1\n        num1 += 1\n        num2 += 1\n        num3 += 1\n        if num1 < num2:\n            temp = num1\n            num1 = num2\n            num2 = temp\n        if num1 < num3:\n            temp = num1\n            num1 = num3\n            num3 = temp\n\n    # Replace the numbers with their binary representation\n    if num == 0:\n        num = 1\n    elif num == 1:\n        num = 2\n    elif num == 2:\n        num = 3\n    elif num == 3:\n        num = 4\n    elif num == 4:\n        num = 5\n\n    # Sort the numbers in the binary representation\n    if num == 0:\n        sorted(arr, key=str)\n    elif num == 1:\n        sorted(arr, key=str.lower", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    x = []\n    for i in range(len(arr)):\n        x.append(int(arr[i]))\n    y = []\n    for i in range(len(x)):\n        if x[i] < y[i]:\n            y.append(x[i])\n        else:\n            x.append(y[i])\n    return x", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: x & 1)\n    arr.reverse()\n    return arr\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def sort_by_1(arr):\n        \"\"\"\n        In this Kata, you have to sort an array of integers according to\n        number of ones in their binary representation in ascending order.\n        For similar number of ones, sort based on decimal value.\n\n        It must be implemented like this:\n        >>> sort_by_1([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n        \"\"\"\n        return [(arr[i] & 1) for i in range(len(arr))]\n    def sort_by_dec(arr):\n        \"\"\"\n        In this Kata, you have to sort an array of integers according to\n        decimal value in ascending order.\n        For similar number of ones, sort based on binary value.\n\n        It must be implemented like this:\n        >>> sort_by_dec([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n        \"\"\"\n        return [(arr[i] // 2) for i in range(len(arr))]\n\n    # initialize\n    sorted_arr = []\n    for arr in arr:\n        sorted_arr.append(arr)\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    else:\n        a = 0\n        b = 0\n        c = 0\n        d = 0\n        for i in range(len(arr)):\n            a = a + arr[i]\n            b = b + arr[i]\n            c = c + arr[i]\n            d = d + arr[i]\n        if a > b and a > c:\n            return 1\n        elif a > d and a > c:\n            return 2\n        elif a > b and a > d:\n            return 3\n        elif b > c and b > d:\n            return 4\n        else:\n            return 5", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return []\n\n    if n == 1:\n        return [arr]\n\n    if n == 2:\n        return sort_squareroot(arr)\n\n    if n == 3:\n        return sort_square(arr)\n\n    if n == 4:\n        return sort_square(sort_array(arr))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(list(zip(*sorted(zip(arr, reversed(arr))))), key=lambda x: x[0])\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 1:\n        return sort(arr[0])\n    else:\n        return sort(arr[0], reverse=True) + sort(arr[1:])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return _ordered_uniq(arr, lambda x, y: cmp(x, y) & (1 << (y - x)) == 1)\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not arr:\n        return\n    if len(arr) == 0:\n        return\n    i = 0\n    for x in arr:\n        if x == 0:\n            arr[i] = i\n        else:\n            if x % 2!= 0:\n                arr[i] = sort_array(x)\n                i += 1\n            else:\n                arr[i] = x\n                i += 1\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda x: x & 1, reverse=True)\n    for i in range(len(arr)):\n        arr[i] = max(arr[i], x)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Create a sorted list of integers.\n    # This is the list of integers we are going to sort.\n    # We don't need to maintain the order of the elements in this array, but it\n    # is easier to do so.\n    # sorted_list = []\n    for i in arr:\n        # This is a binary representation of i.\n        # Use the standard python binary operator, <<, to perform the bitwise\n        # shift.\n        # sorted_list.append(i << 1)\n        # This is the decimal representation of i.\n        # We want to compare i against the decimal representation of i.\n        # We need to take the least significant bit of the decimal representation\n        # of i, and then compare it with the least significant bit of the\n        # decimal representation of i. The sign bit of i is the most significant\n        # bit.\n        # We want to compare the sign bit of i against the sign bit of i. Since\n        # the sign bit is exclusive, we need to negate the sign bit, and then\n        # compare it with the sign bit of i. We need to take the least\n        # significant bit of the negated sign bit.\n        # sorted_list.append(-i >> 1)\n        # Lastly, we want to replace i with", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted([int(x) for x in arr])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(a, b):\n        a = a.ljust(2, '0') + a\n        b = b.ljust(2, '0') + b\n        return cmp(a, b)\n\n    # create a set of all possible (non-negative) ones\n    s = set()\n    s.add(0)\n    s.add(1)\n    while True:\n        # sort current element\n        num = sort_array(arr)\n        # remove one with largest number of ones\n        if num:\n            max = 1\n            for num in num.split(','):\n                if num:\n                    max = max(max, int(num))\n        # remove all ones smaller than current element\n        else:\n            max = len(arr)\n        # if we have enough ones, we are done\n        if max > 1:\n            break\n        # otherwise we have to go to the next element\n        else:\n            s.remove(max)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n\n    if len(arr) == 1:\n        return sort_array([arr[0], ])\n\n    max_val = 0\n    for i in range(len(arr) - 1):\n        if arr[i] > max_val:\n            max_val = arr[i]\n\n    # If min_val is negative, return -1\n    if max_val < 0:\n        return -1\n\n    # Sort based on number of ones\n    max_idx = 0\n    min_idx = len(arr) - 1\n    for i in range(min_idx, max_idx + 1):\n        if arr[i] == 0:\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n        else:\n            arr[i], arr[i + 1] = arr[i + 1], 0\n            max_idx = i\n\n    return sort_array(arr[:max_idx])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return arr\n\n    def sort_val(val):\n        \"\"\"\n        Return the value of the corresponding number.\n        \"\"\"\n        return int(val, 0)\n\n    def cmp(a, b):\n        \"\"\"\n        Comparison operator.\n        \"\"\"\n        val = sort_val(a)\n        val = sort_val(b)\n        if val < 0:\n            return -1\n        else:\n            return 1\n\n    def sort_val_list(lst):\n        \"\"\"\n        Sort an array of lists according to their values.\n        \"\"\"\n        lst = sorted(lst, cmp=sort_val)\n        lst.reverse()\n        return lst\n\n    return sort_val_list(sort_array(arr))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if len(arr) % 2:\n        return sort_array(arr + [len(arr) // 2])\n    if len(arr) % 3:\n        return sort_array([arr[0:]] + [len(arr) // 3 - 1])\n    if len(arr) % 4:\n        return sort_array([arr[0:]] + [len(arr) // 2 - 1])\n    return sort_array(arr + [len(arr) // 4 - 1])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    list_sorted = []\n    for i in range(len(arr)):\n        if arr[i] % 2!= 0:\n            list_sorted.append(arr[i])\n            continue\n        # When the number of ones in binary representation is more than\n        # number of ones in decimal representation, sort based on\n        # decimal value.\n        number_of_ones = int(array(arr[i]))\n        if number_of_ones > number_of_ones % 2:\n            list_sorted.append(arr[i])\n            continue\n        list_sorted.append(arr[i])\n\n    return list_sorted", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    a = arr[:]\n    b = []\n    for i in range(len(a)):\n        b.append(a[i])\n        if a[i] == 0:\n            a[i] = 1\n    return a", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    sorted_arr = []\n    for i in range(len(arr)):\n        if arr[i] & 1:\n            sorted_arr.append(arr[i])\n        else:\n            sorted_arr.append(arr[i] & (-2**32))\n    return sorted_arr\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 1:\n        return sort_array(arr[0])\n\n    # If it's only 1, we can use binary number sort for this, but we only have\n    # one number to sort, so the sort is going to be the same as the\n    # decimal sort, which is faster.\n    if len(arr) == 1:\n        return sort_array(arr[0], binary=True)\n\n    # If it's more than 1, we can use binary number sort, but it will only\n    # be able to sort an array of length 1.\n    if len(arr) > 1:\n        if arr[0] >= arr[-1]:\n            return sort_array(arr, binary=True)\n        else:\n            return sort_array(arr[0], binary=False)\n\n    # If it's more than 1 and it's not an integer, we can use the decimal\n    # sort.\n    if len(arr) > 1 and not is_number(arr[0]):\n        return sort_array(arr, decimal=True)\n\n    # If it's more than 1 and it's a number, we'll use the decimal sort.\n    if len(arr) > 1 and is_number(arr[0]):\n        return sort_array(arr, decimal=True)\n\n    # If it's more than 1 and it's an integer, we'll use the decimal sort.\n    if len", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not arr:\n        return None\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            arr.reverse()\n            i += 1\n        else:\n            break\n    return sorted(arr, key=lambda x: x * -1)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    count = 0\n    for item in arr:\n        count += 1\n        if item > 0 and count % 2 == 0:\n            continue\n        elif item == 0 and count % 2 == 1:\n            continue\n        else:\n            break\n    return [item for item in arr]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Converts the array to an integer array.\n    all_ints = []\n    for i in arr:\n        all_ints.append(int(i))\n    # Sort the integers with the most ones first.\n    comparator = lambda i, j: all_ints[len(all_ints) - 1] - all_ints[i]\n    ordered_ints = sorted(all_ints, cmp=comparator)\n    # Return the sorted integer array.\n    return ordered_ints", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            arr.sort(key=operator.itemgetter(1))\n            return\n        if arr[i] == 1:\n            arr.sort(key=operator.itemgetter(2))\n            return\n    return\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for x in arr:\n        if x > 0:\n            yield x\n            continue\n        else:\n            yield -x", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return sort_array([arr])\n    else:\n        i = 0\n        max = -1\n        while i < len(arr) - 1:\n            if arr[i] < arr[i+1]:\n                temp = arr[i]\n                arr[i] = arr[i+1]\n                arr[i+1] = temp\n                i += 1\n            else:\n                max = max(max, arr[i])\n                i += 1\n        return sort_array([max] + arr[:max] + arr[max + 1:])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # We use a heap or bubble sort here to sort the array of integers\n    # in ascending order based on the number of ones in their binary\n    # representation.\n    heap = deque(sorted(arr, key=lambda i: sum(i.count('1') for i in arr)))\n    # Copy the result into a temporary list\n    tmp = heap[:]\n    # Sort the temporary list based on the number of ones\n    tmp.sort(key=lambda i: sum(i.count('1') for i in arr), reverse=True)\n    # Copy the sorted temporary list back into the original list\n    heap.extend(tmp)\n    # Return the sorted array\n    return heap", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def in_bounds(x):\n        if (x < 0) or (x > 0):\n            raise ValueError(\"Invalid argument x\")\n\n    return sorted([int(i) for i in arr if in_bounds(i)])", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def sort(arr):\n        num_ones = 0\n        for i in range(len(arr)):\n            if arr[i] & 1 == 1:\n                num_ones += 1\n        return num_ones, len(arr)\n    return sorted(sort(arr), key=lambda x: x[0]), sort(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def recurse(nums, sortfunc):\n        \"\"\"\n        Used to recursively sort the array of numbers.\n        :param nums: The number of integers.\n        :type nums: list\n        :param sortfunc: The function to sort the array of numbers.\n        :type sortfunc: function\n        \"\"\"\n        if len(nums) == 0:\n            return nums\n\n        if sortfunc(nums[0]) == 0:\n            recurse(nums, sortfunc)\n\n        return sortfunc(nums[0]) + recurse(nums[1:], sortfunc)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    result = []\n    for value in arr:\n        if value == 0:\n            result.append(value)\n            continue\n        if value % 2 == 0:\n            result.append(value)\n        else:\n            result.append(value/2)\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    result = []\n    i = len(arr) - 1\n    while i > 0:\n        if arr[i] & 1:\n            result.append(arr[i])\n            i -= 1\n        else:\n            result.append(arr[i + 1])\n            i -= 2\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def sort_func(a, b):\n        \"\"\"\n        Return a binary comparator\n        \"\"\"\n        if len(a) == len(b):\n            return cmp(int(a[0]), int(b[0]))\n        else:\n            return cmp(int(a[0]), int(a[1])) + cmp(int(a[1]), int(b[1]))\n\n    return cmp\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Sort by number of ones in binary representation\n    one = 0\n    while 1:\n        a = 0\n        for i in range(len(arr)):\n            a = a * 2 + (arr[i] >> 1)\n        arr.sort(key=lambda x: x & one)\n        one = one + 1", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # this is how many ones you have, for binary representation\n    max_index = len(arr) - 1\n    # find the index of the maximum number of ones\n    max_index = (arr[0] + 1) % max_index\n    # get the index of the binary representation\n    max_index = max_index + 1\n    # iterate through the array and do the sorting\n    i = 0\n    for j in range(max_index - 1, 0, -1):\n        # if the current element is lesser than the previous one, add it to the result\n        if arr[j] < arr[j - 1] + max_index:\n            result.append(arr[j])\n            i += 1\n        # if the current element is greater than the previous one, add it to the result\n        else:\n            result.append(arr[j - 1])\n            i -= 1\n    # if the i is non-zero, the number of ones is at least 1\n    if i!= 0:\n        result.append(arr[i])\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: x.count('1'), reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n\n    # sort array of integers\n    a = []\n    for i in range(len(arr)):\n        a.append(int(arr[i]) & 0x0f)\n    return a", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    array = list(arr)\n    array.sort()\n\n    return array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def compare_ints(int_a, int_b):\n        \"\"\"\n        Compares two integers.\n\n        >>> int_a = 13\n        >>> int_b = 18\n        >>> compare_ints(int_a, int_b)\n        True\n\n        >>> int_a = 6\n        >>> int_b = 7\n        >>> compare_ints(int_a, int_b)\n        True\n\n        >>> int_a = 1\n        >>> int_b = 2\n        >>> compare_ints(int_a, int_b)\n        True\n\n        >>> int_a = 0\n        >>> int_b = 1\n        >>> compare_ints(int_a, int_b)\n        False\n        \"\"\"\n        if int_a < int_b:\n            return -1\n        else:\n            return 1\n\n    a = map(int, arr)\n    b = sorted(a, key=compare_ints, reverse=True)\n    return b", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def _sort(arr):\n        \"\"\"\n        In this Kata, you have to sort an array of non-negative integers according to\n        number of ones in their binary representation in ascending order.\n\n        It must be implemented like this:\n        >>> _sort([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n        >>> _sort([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n        >>> _sort([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n        \"\"\"\n        if not arr: return\n        lst = [(val, 0) for val in arr]\n        # more efficient implementation to sort the array\n        n = len(lst)\n        if n <= 2:\n            d = len(lst[0])\n            idx = sorted(range(n), reverse=True)\n            idx.reverse()\n            i = 0\n            # more efficient implementation to sort the array\n            while i < d:\n                idx.reverse()\n                i += 1\n                # more efficient implementation to sort the array\n                while idx[i] >= 0:\n                    idx.reverse()\n                    i += 1\n                if len(lst[i]) > 0:\n                    break\n        elif n <= 4:\n            idx =", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return\n    k = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            k += 1\n    if k > 0:\n        r = [arr[i:i + k] for i in range(0, len(arr), k)]\n        r.sort()\n        return r\n    else:\n        r = [arr[i:i + len(arr)] for i in range(0, len(arr), len(arr))]\n        r.sort()\n        return r\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def _sort_less(a, b):\n        \"\"\"\n        This is sort function. Its definition is a simple function that checks\n        the comparison of two numbers with their respective binary representations.\n        If the numbers are equal, it returns 0. Otherwise it returns a number\n        representing the position of the smaller number. For example:\n        >>> sort_array([1, 1, 1, 1]) == 1\n        >>> sort_array([1, 0, 1, 1, 1]) == 0\n        >>> sort_array([1, 0, 0, 1, 1]) == 0\n\n        \"\"\"\n        return cmp(a.get_binary(), b.get_binary())\n\n    def _sort_greater(a, b):\n        \"\"\"\n        This is sort function. Its definition is a simple function that checks\n        the comparison of two numbers with their respective binary representations.\n        If the numbers are equal, it returns 0. Otherwise it returns a number\n        representing the position of the larger number. For example:\n        >>> sort_array([1, 1, 1, 1]) == 1\n        >>> sort_array([1, 0, 1, 1, 1]) == 0\n        >>> sort_array([1, 0, 0, 1, 1]) == 0\n\n        \"\"\"\n        return cmp(b.get_", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i):\n            if arr[i]!= arr[j]:\n                if arr[i] < arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                else:\n                    arr[j], arr[i] = arr[i], arr[j]\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    min_val = max_val = 0\n    for v in arr:\n        if v < min_val:\n            min_val = v\n        if v > max_val:\n            max_val = v\n    return (min_val, max_val)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    l = len(arr)\n    if l == 1:\n        return sort_array(arr)[0]\n    else:\n        s = []\n        for i in range(0, l-1):\n            if arr[i] == arr[i-1]:\n                s.append(i)\n        return sort_array(s)[0]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    key = lambda x: x[0]\n\n    num_ones = 0\n    for x in arr:\n        num_ones += x[1]\n\n    res = []\n    while len(res) < len(arr):\n        i = min(len(res), len(arr))\n        key_value = key(arr[i])\n        res[i] = key_value\n\n        for j in range(i+1, len(arr)):\n            key_value = key(arr[j])\n            if key_value < key_value:\n                key_value, res.insert(i+j+1, key_value)\n                break\n\n    return res", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return list(range(len(arr)))\n    sum = 0\n    for i in range(len(arr)):\n        if (arr[i] & 1) == 1:\n            sum += 1\n            if sum == len(arr):\n                return arr\n            arr[i] = sum\n        else:\n            arr[i] += 1\n    return sort_array(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def sort(s):\n        if len(s) < 2:\n            return s\n        for i in xrange(len(s)/2):\n            tmp = s[:len(s)-i]\n            s = s[len(s)-i:]\n            if len(tmp) > len(s)/2 and s[1] == tmp[1]:\n                return tmp\n            else:\n                return s\n        return s\n    return sort(reversed(sort_array(arr)))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # must be sorted as long as the number of ones is the same\n    if len(arr) == len(arr[0]):\n        return sorted(arr, key=lambda x: int(x) & 1)\n    else:\n        for x in range(len(arr)):\n            if len(arr[x]) == len(arr[0][x]):\n                arr[x] = sorted(arr[x], key=lambda x: int(x) & 1)\n                break\n        return arr\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = map(int, map(ord, arr))\n    return sorted(arr, key=len, reverse=True)</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) <= 2:\n        return arr\n    else:\n        arr1 = []\n        arr2 = []\n        for i in range(len(arr) - 1, -1, -1):\n            for j in range(len(arr) - 1, -1, -1):\n                if arr[i] <= arr[j]:\n                    arr1.append(arr[i])\n                    arr2.append(arr[j])\n            else:\n                arr1.append(arr[i])\n                arr2.append(arr[j])\n        if arr1 == arr2:\n            return arr1\n        else:\n            return sort_array(arr1) - sort_array(arr2)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    num_ones = len(arr) // 2\n    if num_ones == 0:\n        return [arr]\n    else:\n        num_decimals = len(arr)\n        i = 0\n        num_ones_to_display = 0\n        while i < num_ones:\n            if arr[i] % 2 == 0:\n                num_ones_to_display += 1\n            else:\n                num_ones_to_display -= 1\n            i += 1\n        num_ones_to_display += 1\n        num_decimals_to_display = 0\n        while i < num_decimals:\n            if arr[i] % 10 == 0:\n                num_decimals_to_display += 1\n            else:\n                num_decimals_to_display -= 1\n            i += 1\n        if num_ones_to_display == 0 and num_decimals_to_display == 0:\n            return [arr]\n        else:\n            return [arr[:num_ones_to_display], arr[num_ones_to_display:], num_ones_to_display]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    result = []\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            result.append(i)\n        elif arr[i] == 0:\n            result.append(abs(i) - 1)\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    n = len(arr) # number of elements\n    if n == 0:\n        return ()\n    rec = [0] * n # rec is an array of recents values in ascending order\n    for i in range(n):\n        rec[i] = 0 # rec[i] holds the number of ones in the ith element's binary representation\n        for j in range(i+1, n):\n            if arr[i] % arr[j] == 0: # in ascending order\n                rec[i] = 1 # if no one bit is 0, we have one of the elements\n    return sorted(rec)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Initially, if we are doing a binary sort, we will have to sort it\n    # so that all the numbers have at least one zero before we start\n    if not arr:\n        return\n\n    # The numbers in array are in reverse order, so we need to reverse\n    # them.\n    arr.reverse()\n\n    # Find the number of ones in the first number, and store it\n    # in the 'first_number' variable.\n    if len(arr) == 1:\n        first_number = arr[0]\n\n    # Now, for each number in the array, compute the number of ones\n    # in its binary representation. If there are any equal ones\n    # in the array, we only need to compare the first number\n    # against the number after it in the array.\n    for number in range(len(arr)):\n        number_list = str(number).split(\".\")\n        # Store the number of ones in the number after it in the\n        # array.\n        number_list.append(0)\n        number_sum = sum(number_list)\n        # If there are any equal ones in the number after it in\n        # the array, we need to compare the first number\n        # against the number after it in the array.\n        if number_sum == number_list[-1", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(a, b):\n        for i in range(len(a)):\n            if a[i] == 1 or b[i] == 1:\n                return 1\n            if a[i]!= b[i]:\n                return -1\n        return 0\n    return cmp", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    reverse = 1\n    for a in arr:\n        if a == 0:\n            continue\n        if reverse == 1:\n            reverse *= -1\n        else:\n            reverse *= 1\n        if a == 1 or a == 2:\n            yield a\n        else:\n            yield reverse</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return False\n    start = 0\n    while start < len(arr):\n        if arr[start] & 1:\n            start += 1\n        else:\n            start -= 1\n    end = start + 1\n    if len(arr) > 1:\n        while end < len(arr):\n            if arr[end] & 1:\n                end += 1\n            else:\n                end -= 1\n    if end > start:\n        return False\n    return True", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    n = len(arr)\n    result = []\n    for i in range(n):\n        if (arr[i] == 0):\n            result.append(i)\n        elif (arr[i] == 1):\n            result.append(int(n / 2 - (int(n) % 2)))\n    return result\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    sorted_arr = []\n    max_value = 0\n    for elem in arr:\n        if elem > max_value:\n            max_value = elem\n        sorted_arr.append(elem)\n\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) < 2:\n        return sort_array(sorted(arr, key=str))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) < 2:\n        return list(range(len(arr)))\n    i = 1\n    l = len(arr)\n    while i < l:\n        k = (i + 1) % l\n        if arr[i] > arr[k]:\n            j = i\n            i = k\n        else:\n            j = k\n            i = k + 1\n    return list(range(j, l))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not arr:\n        return\n    if len(arr) % 2!= 0:\n        return\n    for x in xrange(len(arr)):\n        for y in xrange(len(arr) // 2):\n            if (arr[y] & (1 << x)) == 0:\n                if (arr[y] & (1 << (x + 1))) == 0:\n                    if (arr[y] & (1 << (x - 1))) == 0:\n                        sort_array(arr[:y])\n                        sort_array(arr[y:])\n                    else:\n                        sort_array(arr[:y])\n                        sort_array(arr[y:])\n        if len(arr) % 2 == 0:\n            sort_array(arr[:len(arr) // 2])\n        if len(arr) % 2 == 1:\n            sort_array(arr[len(arr) // 2:])\n    return\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    n = len(arr)\n    if n == 0:\n        return array(n, n)\n    elif n == 1:\n        return sorted_integer(arr[0])\n    else:\n        arr = array([arr[n] - arr[n - 1] for n in xrange(0, n - 1, 2)])\n        return sorted_integer(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    sorted_arr = []\n    for i in range(len(arr)):\n        # check if number is even and not empty\n        if arr[i] % 2:\n            sorted_arr.append(arr[i])\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    sorted_arr = []\n    for i, value in enumerate(arr):\n        if value == 0:\n            sorted_arr.append(i)\n            continue\n        elif i == 0 and value > 0:\n            sorted_arr.append(i)\n            continue\n        else:\n            if value == 1:\n                sorted_arr.append(i)\n                continue\n        sorted_arr.append(abs(value))\n\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # get indices of ones\n    indices = set()\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            indices.add(i)\n    # sort according to decimal value\n    return sorted(set(indices))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    import operator\n    def _sort2(a, b):\n        \"\"\"Sort an array in descending order.\"\"\"\n        return cmp(operator.itemgetter(1)(a), operator.itemgetter(1)(b))\n\n    # Sort the array in ascending order\n    a = sort_array(arr)\n    b = sort_array(arr)\n    # Compare elements in ascending order\n    for i in xrange(len(a)):\n        if a[-i] > b[-i]:\n            a[i], b[i] = b[i], a[i]\n\n    return b", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    total = 0\n    for i in range(len(arr)):\n        if arr[i]:\n            total += 1\n    if total == len(arr):\n        return arr\n    else:\n        return sort_array(map(int, [arr[total - 1], 0] + range(total - total - 1)))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    ans = []\n    for i in range(len(arr)):\n        a = arr[i]\n        for j in range(len(a)):\n            b = a[j]\n            if a[j] > a[j-1]:\n                a[j], a[j-1] = a[j+1], a[j-1]\n                a[j+1], a[j-1] = b, a[j]\n                ans.append(a[j])\n    return ans", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = [arr[i] for i in range(len(arr))]\n    i = len(arr)\n    while i < len(arr) - 1:\n        j = i + 1\n        if arr[j] < arr[i]:\n            arr[i], arr[j] = arr[j], arr[i]\n        else:\n            break\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    arr_sorted = []\n\n    for a in arr:\n        arr_sorted.append(str(a))\n\n    arr_sorted.sort()\n\n    return arr_sorted\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # TODO: add your implementation\n    # Create a sorted array of numbers.\n    # Sort it according to number of ones in binary representation\n    # In ascending order.\n    # TODO: add your implementation\n    # Create a sorted array of numbers.\n    # Sort it according to number of ones in decimal representation\n    # In ascending order.\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    res = []\n    for num in arr:\n        for i in range(0, 8):\n            if num & (1 << i):\n                res.append(num)\n        else:\n            res.append(num)\n    return res", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not arr:\n        return []\n\n    def cmp(a, b):\n        \"\"\"Compare two integers.\"\"\"\n        if a < b:\n            return -1\n        elif a > b:\n            return 1\n        else:\n            return 0\n\n    a = list(arr)\n    a.sort(cmp)\n\n    # sort number of ones\n    a.reverse()\n\n    # sort based on decimal values\n    a.reverse()\n\n    # convert it to a list of numbers\n    return list(map(int, a))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) > 1:\n        return sort_arrays(arr, function=lambda x, y: cmp(x, y) if y else cmp(y, x))\n    else:\n        return sort_arrays([arr[0]], function=lambda x, y: cmp(x, y) if y else cmp(y, x))</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    tmp = []\n    for i in range(len(arr)):\n        if arr[i] & 1:\n            tmp.append(arr[i])\n    if len(tmp) == 0:\n        return []\n    else:\n        return sort_array(tmp)</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    if len(arr) == 0:\n        return array([0])\n    else:\n        return array(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    result = []\n    for value in arr:\n        if not value:\n            result.append(0)\n            continue\n        if value == 0:\n            result.append(0)\n        elif value == 1:\n            result.append(1)\n            continue\n        elif value == 2:\n            result.append(2)\n            continue\n        elif value == 3:\n            result.append(3)\n            continue\n        elif value == 4:\n            result.append(4)\n            continue\n        elif value == 5:\n            result.append(5)\n            continue\n        elif value == 6:\n            result.append(6)\n            continue\n        else:\n            result.append(value)\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    if arr == []:\n        return []\n    else:\n        new_arr = []\n        for i in range(len(arr)):\n            if arr[i] == 0:\n                new_arr.append(i)\n            else:\n                new_arr.append(arr[i])\n        return sorted(new_arr, key=lambda x: x)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    assert len(arr) == len(arr[0])\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            arr[i] = 0\n    return sorted(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i, val in enumerate(arr):\n        if val % 2:\n            if val > 0:\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n            arr[i] = 0\n        else:\n            if val > 0:\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n            arr[i] = 1\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def bubble_sort(arr):\n        \"\"\"\n        In this Kata, you have to bubble sort an array of non-negative integers\n        according to number of ones in their binary representation in ascending\n        order. For similar number of ones, sort based on decimal value.\n\n        It must be implemented like this:\n        >>> bubble_sort([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n        \"\"\"\n        arr = map(int, zip(*map(str, arr)))\n        for i in range(len(arr)):\n            if arr[i] == 0:\n                j = i\n                while j < len(arr) and arr[j] == 0:\n                    j += 1\n                arr[i], arr[j] = arr[j], arr[i]\n    return bubble_sort(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=int.__getitem__, reverse=False)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # This function is called with two arguments.\n    # The first is the array to sort and the second is a function to call to\n    # determine how many ones there are in the binary representation of each\n    # number.\n    # For example, if this function is called with a function that returns True\n    # if a number has exactly one or more ones in its binary representation, then\n    # the function returns True for all numbers and will be called for every\n    # number in the array.\n    # For example, if this function is called with a function that returns\n    # True if a number is the product of a two-digit number and a one-digit\n    # number, then the function returns True for all numbers that have both\n    # two-digit and one-digit parts and will be called for every number\n    # whose number of ones is at least two.\n    # Otherwise, the function will be called only for the first number in the\n    # array.\n    # This is what you should do.\n    # It must return the same number for all numbers in the array.\n    # For example, if the function is called with a function that returns True\n    # if the number has at least one one in its binary representation and\n    # returns True for all numbers that have", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def is_one(n):\n        return n == 1\n    def is_two(n):\n        return n == 2\n    def is_three(n):\n        return n == 3\n    def is_four(n):\n        return n == 4\n    def is_ten(n):\n        return n == 10\n    def is_eleven(n):\n        return n == 11\n    def is_ten_or_eleven(n):\n        return n >= 10 and n <= 11\n    def is_one_or_three(n):\n        return is_one(n) || is_three(n)\n    def is_one_or_ten(n):\n        return is_one(n) || is_ten(n)\n    def is_one_or_eleven(n):\n        return is_one(n) || is_eleven(n)\n    def is_zero(n):\n        return n == 0\n    def is_one_or_zero(n):\n        return is_one(n) || is_zero(n)\n    def is_one_or_two(n):\n        return is_one(n) || is_two(n)\n    def is_one_or_three_or_four(n):\n        return is_one(n) || is_three(n) || is_four(n)\n    def", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 1:\n        return arr\n    else:\n        current_pos = 0\n        last_pos = len(arr)\n        while current_pos < last_pos:\n            if (arr[current_pos] & 1):\n                current_pos += 1\n            else:\n                current_pos -= 1\n        for current_index in range(0, last_pos):\n            if arr[current_index] & 1:\n                last_pos -= current_index\n                current_pos += 1\n            else:\n                last_pos -= current_index\n                current_pos -= 1\n        sort_array([arr[current_pos]])\n        sort_array([arr[last_pos]])\n        return [arr[current_pos], arr[last_pos]]\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 1:\n        return arr\n    if len(arr) == 0:\n        return None\n    ret = []\n    for i in range(0, len(arr)):\n        ret.append(int(arr[i]) & 0xFF)\n        if int(arr[i]) % 2 == 0:\n            ret.append(arr[i])\n        else:\n            ret.append(arr[i] + 1)\n    return ret", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = sorted(arr, key=lambda i: bool(i & 1))\n    return [arr[::-1], arr[:-1]]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    x = 0\n    for a in arr:\n        if a >= 0:\n            x += 1\n    return x", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def _sort_list(lst):\n        \"\"\"\n        Sorts the list of integers in ascending order.\n        \"\"\"\n        if len(lst)!= 1:\n            raise ValueError(\"Cannot sort list of non-negative integers\")\n        lst = [int(i) for i in lst]\n        lst.sort()\n        return lst\n\n    def _merge_list(lst1, lst2):\n        \"\"\"\n        Combines two lists.\n        \"\"\"\n        if len(lst1)!= len(lst2):\n            return\n        for i in range(len(lst1)):\n            lst1[i] += lst2[i]\n        return lst1\n\n    def merge_list(lst1, lst2):\n        \"\"\"\n        Combines two lists.\n        \"\"\"\n        if len(lst1)!= len(lst2):\n            return\n        lst1.sort()\n        _merge_list(lst1, lst2)\n        lst1.reverse()\n        _merge_list(lst1, lst2)\n        return lst1\n\n    def _get_single(lst):\n        \"\"\"\n        Gets a single element from the sorted list.\n        \"\"\"\n        if lst[0] is None:\n            return lst[0]\n        else:\n            return lst[0]\n\n    lst = sorted(arr, key=_get_single, reverse=True)\n    lst.reverse()\n    return lst", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n\n    def all_ones(a):\n        if len(a) % 2 == 0:\n            return True\n        else:\n            return False\n    def is_ones(a):\n        return all_ones(a) and all_ones(a[1:])\n\n    i = 0\n    while i < len(arr):\n        if is_ones(arr[i]):\n            new_index = i + 1\n            if new_index < len(arr):\n                sort_array(arr[new_index])\n                i = new_index\n        elif is_ones(arr[i]) and not is_ones(arr[i+1]):\n            new_index = i + 1\n            if new_index < len(arr):\n                sort_array(arr[new_index])\n                i = new_index\n        else:\n            new_index = i\n            if new_index >= len(arr):\n                new_index = 0\n            sort_array(arr[new_index])\n            i = new_index\n        if i < len(arr):\n            i += 1", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def sort(arr):\n        \"\"\"\n        Sort the array in ascending order according to the number of ones in their\n        binary representation.\n\n        :param arr: The array to sort.\n        :type arr: list\n        :return: A list sorted by number of ones in its binary representation.\n        :rtype: list\n        \"\"\"\n        if len(arr) == 1:\n            return [arr]\n        b = len(arr) // 2\n        res = []\n        left = []\n        right = []\n        for i in range(len(arr)):\n            if arr[i] == 0:\n                left.append(i)\n                continue\n            if arr[i]!= 0:\n                right.append(i)\n        res.append(left)\n        res.append(right)\n        return res\n    return sort(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr = map(int, zip(*sorted(arr)))\n    sorted_arr = []\n    for index in arr:\n        if index == 0:\n            sorted_arr.append(index)\n        else:\n            for item in reversed(range(1, index + 1)):\n                if index % item == 0:\n                    sorted_arr.append(item)\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i in range(len(arr)):\n        if abs(arr[i]) % 2 == 0:\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n            arr[i + 1], arr[i] = arr[i], arr[i + 1]\n\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: x.isdigit() and x.isdigit() and x%2 == 1)[:]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    try:\n        sorted(arr, key=lambda x: x & 1)\n    except TypeError:\n        sorted(arr, key=lambda x: x.count(1), reverse=True)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n\n    # Work in sorted order\n    tmp = []\n    while len(tmp) > 1:\n        i, j = min(len(tmp) - 1, len(arr) - 1)\n        if arr[j] >= arr[j + 1]:\n            tmp.append((arr[j] - arr[j + 1]) / 2)\n        else:\n            tmp.append((arr[j] - arr[j + 1]) / 2, arr[j + 1])\n    return tmp\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def cmp(x, y):\n        try:\n            return x[1] - y[1]\n        except:\n            return x[0] - y[0]\n\n    def _really_sort(arr, value):\n        \"\"\"\n        Use here the internal sort method that is stored in the Sort.py module.\n        \"\"\"\n        arr = sorted(arr, cmp=_really_sort, reverse=True)\n        return arr\n\n    a = []\n    for i in range(0, len(arr)):\n        a.append(i)\n        if len(arr) == len(a):\n            # done\n            break\n        elif arr[i] > a[i]:\n            # swap\n            a[i], a[i+1] = a[i+1], a[i]\n            del a[len(a) - 1]\n        else:\n            # done\n            break\n\n    return sort_array(a)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    sort_array_sorted = []\n    count = 0\n    for i in range(len(arr)):\n        if arr[i]!= 0:\n            count += 1\n            if count % 10 == 0:\n                sort_array_sorted.append(arr[i])\n            count = 0\n    sort_array_sorted.reverse()\n    return sort_array_sorted\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i, j in zip(range(len(arr)), range(len(arr))):\n        if arr[i]:\n            if arr[j] == 0:\n                i, j = j, i\n    return i, j", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def is_sorted(a, b):\n        \"\"\"\n        Return True if the array is sorted\n        \"\"\"\n        return a[1] < b[1]\n    for i in xrange(len(arr)):\n        if is_sorted(arr[i], arr[i+1]):\n            continue\n        for j in xrange(len(arr)):\n            if is_sorted(arr[j], arr[j+1]):\n                continue\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n    return sorted(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr[0]]\n    elif len(arr) == 2:\n        return [arr[0], sort_array(arr[1:])]\n    else:\n        arr = map(int, arr)\n        result = [arr[0]]\n        for i in range(1, len(arr)):\n            result.append(sort_array(arr[i - 1] + arr[i]))\n        return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: x & (1 << (len(x) - 1)) + 1)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # sort array in ascending order based on number of ones\n    a = len(arr)\n    b = 0\n    for i in range(a):\n        if arr[i] == 1:\n            b += 1\n            if b == a:\n                break\n    if a == b:\n        # sort array in ascending order based on decimal value\n        for i in range(a):\n            if arr[i] == 0:\n                b += 1\n                if b == a:\n                    break\n        if a == b:\n            # sort array in ascending order based on decimal value\n            for i in range(a):\n                if arr[i] == 2:\n                    b += 1\n                    if b == a:\n                        break\n                else:\n                    break\n    return b", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    result = []\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            result.append(arr[i])\n        else:\n            result.append(arr[i] + 1)\n            result.sort(key=operator.itemgetter(1))\n    return result", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    n, d = 0, 0\n    for i in range(len(arr)-1):\n        if arr[i]:\n            n += 1\n            d += 1\n    if n < d:\n        return arr[:d]\n    else:\n        return arr[:n]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # initialize counter with the smallest number and count up to the largest\n    # number\n    index = 0\n    count = 0\n    while count < len(arr) and abs(arr[index]) <= abs(arr[index + 1]):\n        index += 1\n        count += 1\n    # Sort according to the number of ones in their binary representation\n    # ascending order\n    # Note that there may be duplicates in the array, so we need to check\n    # whether a number already exists in the array before adding it to the\n    # end of the sorted array\n    tmp = []\n    for i in range(0, count):\n        tmp.append(int(arr[i]) if arr[i] > 0 else 0)\n    tmp.reverse()\n    sorted_array = []\n    for i in tmp:\n        sorted_array.append(i)\n        # if the number of ones in the binary representation is equal to the\n        # number in the sorted array, add the number to the end of the sorted\n        # array\n        if sorted_array[-1] == sorted_array[-1]:\n            sorted_array.append(sorted_array[-1 + count])\n    return sorted_array", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    s = [True] * len(arr)\n    for i, a in enumerate(arr):\n        if a == 1:\n            s[i] = True\n        else:\n            s[i] = False\n    return s", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    if len(arr) == 1:\n        return [arr[0], arr[0]]\n    else:\n        # First get total number of ones in the array.\n        total = 0\n        for i in range(len(arr)):\n            if arr[i] & 1:\n                total += 1\n        # Now we sort the array based on its total number of ones.\n        sorted_num_ones = 0\n        for i in range(len(arr)):\n            if arr[i] & 1:\n                sorted_num_ones += 1\n            else:\n                sorted_num_ones -= 1\n        # Now we can sort the array based on the sorted number of ones.\n        sorted_num_ones.reverse()\n        return sorted_array(arr[::-1])[::-1] + sorted_array(arr[::-1])[::-1]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return _sort_array_pairs(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # sort the array in ascending order based on number of ones\n    # for similar number of ones, sort based on decimal value\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            arr[i] += 1\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return [arr[::-1][0] + arr[::-1][1] for x in sorted(arr, key=lambda x: x.count(1), reverse=True)]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    i = 0\n    for v in arr:\n        if v == 1:\n            yield i\n            i += 1\n        else:\n            yield v\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    sorted = []\n\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] == arr[j]:\n            j -= 1\n        else:\n            sorted.append(arr[i])\n            i += 1\n    return sorted", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == 0 and arr[i - 1]!= 0:\n            arr[i], arr[i - 1] = arr[i - 1], arr[i]\n    return sorted(arr)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return [arr[i] for i in range(0, len(arr)) if arr[i] == 1]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) == 1:\n        return arr\n    if len(arr) == 0:\n        return arr\n    return sort_index(arr, len(arr) - 1)", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    i = len(arr)\n    j = len(arr) // 2\n    r = 0\n    while i > j:\n        k = (i + j) // 2\n        if arr[k] > arr[j]:\n            r = k\n            j = k\n        else:\n            i = k\n    return r", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    i = 1\n    while i < len(arr):\n        if arr[i] % 2 == 1:\n            i += 1\n        else:\n            i += 2\n    return arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def cmp(a, b):\n        if len(a) == len(b):\n            return 0\n        elif len(a) < len(b):\n            return -1\n        else:\n            return 1\n\n    if len(arr) < 1:\n        return arr\n    else:\n        return cmp(sort_array(arr[:-1]), sort_array(arr[1:]))", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    import random\n    sorted_arr = []\n    for i in arr:\n        if i % 2:\n            sorted_arr.append(i)\n        else:\n            sorted_arr.append(i * 2 + 1)\n    sorted_arr = sorted(sorted_arr, key=lambda i: random.randint(0, len(sorted_arr) - 1) % len(sorted_arr))\n    return sorted_arr", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    res = []\n    for i in range(len(arr)):\n        if not(arr[i] & 1):\n            res.append(arr[i])\n            continue\n        if not(arr[i] & 2):\n            res.append(arr[i] / 2)\n            continue\n        if not(arr[i] & 4):\n            res.append(arr[i] / 4)\n            continue\n        res.append(arr[i] / 8)\n    res.sort()\n    return res", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return [(x, i) for i, x in enumerate(sorted(arr, key=lambda x: int(x, 2))) if int(x, 2) == 1]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    arr2 = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            arr2.append(arr[i])\n        else:\n            arr2.append(arr[i] / 2)\n    return arr2\n</s>", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if len(arr) <= 1:\n        return []\n    max_val = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            max_val = i\n            break\n    if len(max_val) == 0:\n        return []\n    max_val = max(max_val, 0)\n    for i in range(len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n    min_val = 0\n    for i in range(len(arr)):\n        if arr[i] < max_val:\n            min_val = i\n            break\n    return [max_val, min_val]", "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def cmp(a, b):\n        return cmp(ord(a[0]), ord(b[0])) if ord(a[0]) > ord(b[0]) else -1\n    return cmp"]]