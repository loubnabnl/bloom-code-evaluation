[["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n == 3:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # We can use a list comprehension to make it faster\n    factors = [(i, i) for i in range(n)]\n    # We can use a generator expression to make it faster\n    factors = [(i, i) for i in range(n)]\n    # We can use a generator expression to make it faster\n    factors = [(i, i) for i in range(n)]\n    # We can use a generator expression to make it faster\n    factors = [(i, i) for i in range(n)]\n    # We can use a generator expression to make it faster\n    factors = [(i, i) for i in range(n)]\n    # We can use a generator expression to make it faster\n    factors = [(i, i) for i in range(n)]\n    # We can use a generator expression to make it faster\n    factors = [(i, i) for i in range(n)]\n    # We can use a generator expression to make it faster\n    factors = [(i, i) for i in range(n)]\n    # We can use a generator expression to make it faster\n    factors = [(i, i) for i in", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    if n % 11 == 0:\n        return [n]\n    if n % 13 == 0:\n        return [n]\n    if n % 17 == 0:\n        return [n]\n    if n % 19 == 0:\n        return [n]\n    if n % 23 == 0:\n        return [n]\n    if n % 29 == 0:\n        return [n]\n    if n % 31 == 0:\n        return [n]\n    if n % 37 == 0:\n        return [n]\n    if n % 41 == 0:\n        return [n]\n    if n % 43 == 0:\n        return [n]\n    if n % 47 == 0:\n        return [n]\n    if n % 53 == 0:\n        return [n]\n    if n % 57 == 0:\n        return [n]\n    if n % 61 == 0:\n        return [n]\n    if n % 63 == 0:\n        return [n]\n    if n % 67 == 0:\n        return [n]\n    if n % 71 == 0:\n        return [n]\n    if n % 73 == 0:", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    if n % 11 == 0:\n        return [n]\n    if n % 13 == 0:\n        return [n]\n    if n % 17 == 0:\n        return [n]\n    if n % 19 == 0:\n        return [n]\n    if n % 23 == 0:\n        return [n]\n    if n % 29 == 0:\n        return [n]\n    if n % 31 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return factorize(n // 2)\n    if n % 3 == 0:\n        return factorize(n // 3)\n    if n % 5 == 0:\n        return factorize(n // 5)\n    return factorize(n // 10)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    elif n == 2:\n        return [2*n, n]\n    elif n == 3:\n        return [2*n, 2*n, n]\n    elif n == 4:\n        return [2*n, 2*n, 2*n, n]\n    elif n == 5:\n        return [2*n, 2*n, 2*n, 2*n, n]\n    elif n == 6:\n        return [2*n, 2*n, 2*n, 2*n, 2*n, n]\n    elif n == 7:\n        return [2*n, 2*n, 2*n, 2*n, 2*n, 2*n, n]\n    else:\n        raise ValueError(\"Input number is not prime\")", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 4 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    if n % 11 == 0:\n        return [n]\n    if n % 13 == 0:\n        return [n]\n    if n % 17 == 0:\n        return [n]\n    if n % 19 == 0:\n        return [n]\n    if n % 23 == 0:\n        return [n]\n    if n % 29 == 0:\n        return [n]\n    if n % 31 == 0:\n        return [n]\n    if n % 37 == 0:\n        return [n]\n    if n % 41 == 0:\n        return [n]\n    if n % 43 == 0:\n        return [n]\n    if n % 47 == 0:\n        return [n]\n    if n % 53 == 0:\n        return [n]\n    if n % 57 == 0:\n        return [n]\n    if n % 61 == 0:\n        return [n]\n    if n % 63 == 0:\n        return [n]\n    if n % 67 == 0:\n        return [n]\n    if n % 71 == 0:", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact for fact in factorize(n // 2) if fact!= n] + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) +", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    if n % 11 == 0:\n        return [n]\n    if n % 13 == 0:\n        return [n]\n    if n % 17 == 0:\n        return [n]\n    if n % 19 == 0:\n        return [n]\n    if n % 23 == 0:\n        return [n]\n    if n % 29 == 0:\n        return [n]\n    if n % 31 == 0:\n        return [n]\n    if n % 37 == 0:\n        return [n]\n    if n % 41 == 0:\n        return [n]\n    if n % 43 == 0:\n        return [n]\n    if n % 47 == 0:\n        return [n]\n    if n % 53 == 0:\n        return [n]\n    if n % 57 == 0:\n        return [n]\n    if n % 61 == 0:\n        return [n]\n    if n % 63 == 0:\n        return [n]\n    if n % 67 == 0:\n        return [n]\n    if n % 71 == 0:\n        return [n]\n    if n % 73 == 0:", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    if n % 11 == 0:\n        return [n]\n    if n % 13 == 0:\n        return [n]\n    if n % 17 == 0:\n        return [n]\n    if n % 19 == 0:\n        return [n]\n    if n % 23 == 0:\n        return [n]\n    if n % 29 == 0:\n        return [n]\n    if n % 31 == 0:\n        return [n]\n    if n % 37 == 0:\n        return [n]\n    if n % 41 == 0:\n        return [n]\n    if n % 43 == 0:\n        return [n]\n    if n % 47 == 0:\n        return [n]\n    if n % 53 == 0:\n        return [n]\n    if n % 57 == 0:\n        return [n]\n    if n % 61 == 0:\n        return [n]\n    if n % 63 == 0:\n        return [n]\n    if n % 67 == 0:\n        return [n]\n    if n % 71 == 0:\n        return [n]\n    if n % 73 == 0:", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact for fact in factorize(n // 2) if fact not in factorize(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 4 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    if n % 11 == 0:\n        return [n]\n    if n % 13 == 0:\n        return [n]\n    if n % 17 == 0:\n        return [n]\n    if n % 19 == 0:\n        return [n]\n    if n % 23 == 0:\n        return [n]\n    if n % 29 == 0:\n        return [n]\n    if n % 31 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact * n for fact in factorize(n // 2)] + factorize(n // 2) + factorize(n // 5) + factorize(n // 7)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [factors(n)[0] for factors in factorize(n // 2)] + factorize(n // 2) + factorize(n // 3) + factorize(n // 4) + factorize(n // 5) + factorize(n // 6) + factorize(n // 7)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n == 3:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    if n % 11 == 0:\n        return [n]\n    if n % 13 == 0:\n        return [n]\n    if n % 17 == 0:\n        return [n]\n    if n % 19 == 0:\n        return [n]\n    if n % 23 == 0:\n        return [n]\n    if n % 29 == 0:\n        return [n]\n    if n % 31 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 4 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return factorize(n // 2)\n    if n % 3 == 0:\n        return factorize(n // 3)\n    if n % 4 == 0:\n        return factorize(n // 4)\n    return factorize(n // 5)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 4 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [2*n, n]\n    if n % 3 == 0:\n        return [2*n, 3*n, n]\n    if n % 4 == 0:\n        return [2*n, 4*n, n]\n    if n % 5 == 0:\n        return [2*n, 5*n, n]\n    if n % 7 == 0:\n        return [2*n, 7*n, n]\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact * n for fact in factorize(n // 2)] + factorize(n // 2) + factorize(n // 5) + factorize(n // 7)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n == 3:\n        return [n]\n    if n == 4:\n        return [n]\n    if n == 5:\n        return [n]\n    if n == 6:\n        return [n]\n    if n == 7:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact * n for fact in factorize(n // 2)] + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact for fact in factorize(n // 2) if factor not in factorize(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    if n % 11 == 0:\n        return [n]\n    if n % 13 == 0:\n        return [n]\n    if n % 17 == 0:\n        return [n]\n    if n % 19 == 0:\n        return [n]\n    if n % 23 == 0:\n        return [n]\n    if n % 29 == 0:\n        return [n]\n    if n % 31 == 0:\n        return [n]\n    if n % 37 == 0:\n        return [n]\n    if n % 41 == 0:\n        return [n]\n    if n % 43 == 0:\n        return [n]\n    if n % 47 == 0:\n        return [n]\n    if n % 53 == 0:\n        return [n]\n    if n % 57 == 0:\n        return [n]\n    if n % 61 == 0:\n        return [n]\n    if n % 63 == 0:\n        return [n]\n    if n % 67 == 0:\n        return [n]\n    if n % 71 == 0:\n        return [n]\n    if n % 73 == 0:", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    # Find all prime factors of n\n    prime_factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            prime_factors.append(i)\n    return prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [2*n, n]\n    if n % 3 == 0:\n        return [2*n, 3*n, n]\n    if n % 4 == 0:\n        return [2*n, 3*n, 4*n, n]\n    if n % 5 == 0:\n        return [2*n, 3*n, 4*n, 5*n, n]\n    if n % 7 == 0:\n        return [2*n, 3*n, 4*n, 5*n, 6*n, n]\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact * n for fact in factorize(n // 2)] + factorize(n // 2) + factorize(n // 3) + factorize(n // 4)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return factorize(n // 2) + factorize(n // 3) + factorize(n // 5) + factorize(n // 7)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n == 3:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    if n % 11 == 0:\n        return [n]\n    if n % 13 == 0:\n        return [n]\n    if n % 17 == 0:\n        return [n]\n    if n % 19 == 0:\n        return [n]\n    if n % 23 == 0:\n        return [n]\n    if n % 29 == 0:\n        return [n]\n    if n % 31 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n == 3:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    if n % 11 == 0:\n        return [n]\n    if n % 13 == 0:\n        return [n]\n    if n % 17 == 0:\n        return [n]\n    if n % 19 == 0:\n        return [n]\n    if n % 23 == 0:\n        return [n]\n    if n % 29 == 0:\n        return [n]\n    if n % 31 == 0:\n        return [n]\n    if n % 37 == 0:\n        return [n]\n    if n % 41 == 0:\n        return [n]\n    if n % 43 == 0:\n        return [n]\n    if n % 47 == 0:\n        return [n]\n    if n % 53 == 0:\n        return [n]\n    if n % 57 == 0:\n        return [n]\n    if n % 61 == 0:\n        return [n]\n    if n % 63 == 0:\n        return [n]\n    if n % 67 == 0:\n        return [n]\n    if n % 71 == 0:\n        return [n]\n    if n % 73 == 0:\n        return", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact for fact in factorize(n // 2) if fact % n == 0] + factorize(n // 2) + factorize(n // 5)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # We need to find the prime factors of n\n    # We start with the largest prime factor\n    p = n\n    while p > 1:\n        # We find the next largest prime factor\n        p = p // 2\n        # We find the next largest prime factor\n        p = p // 2\n        # We find the next largest prime factor\n        p = p // 2\n        # We find the next largest prime factor\n        p = p // 2\n        # We find the next largest prime factor\n        p = p // 2\n        # We find the next largest prime factor\n        p = p // 2\n        # We find the next largest prime factor\n        p = p // 2\n        # We find the next largest prime factor\n        p = p // 2\n        # We find the next largest prime factor\n        p = p // 2\n        # We find the next largest prime factor\n        p = p // 2\n        # We find the next largest prime factor\n        p = p // 2\n        # We find the next largest prime factor\n        p = p // 2\n        # We find the next largest prime factor\n        p = p // 2\n        # We find the next largest prime factor\n        p = p // 2\n        # We find the next largest prime factor\n        p = p // 2\n        #", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n] * factorize(n // 2) + factorize(n // 5) + factorize(n // 7)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    elif n == 2:\n        return [2*n, n]\n    elif n % 2 == 0:\n        return [2*n, n/2]\n    else:\n        return [2*n, n/2, n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact * n for fact in factorize(n // 2)] + factorize(n // 2) + factorize(n // 5) + factorize(n // 7)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact * n for fact in factorize(n // 2)] + factorize(n // 2) + factorize(n // 5) + factorize(n // 7)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 4 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact * n for fact in factorize(n // 2)] + factorize(n // 2) + factorize(n // 3)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 4 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    if n % 11 == 0:\n        return [n]\n    if n % 13 == 0:\n        return [n]\n    if n % 17 == 0:\n        return [n]\n    if n % 19 == 0:\n        return [n]\n    if n % 23 == 0:\n        return [n]\n    if n % 29 == 0:\n        return [n]\n    if n % 31 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    if n == 1:\n        return [n]\n\n    if n % 2 == 0:\n        return factorize(n // 2)\n\n    if n % 3 == 0:\n        return factorize(n // 3)\n\n    if n % 4 == 0:\n        return factorize(n // 4)\n\n    return factorize(n // 5)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n] + factorize(n // 2) + factorize(n // 3) + factorize(n // 5) + factorize(n // 7)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [factors(n // 2)] + factorize(n // 2)\n    if n % 3 == 0:\n        return [factors(n // 3)] + factorize(n // 3) + factorize(n // 5)\n    if n % 4 == 0:\n        return [factors(n // 4)] + factorize(n // 4) + factorize(n // 7) + factorize(n // 11)\n    if n % 5 == 0:\n        return [factors(n // 5)] + factorize(n // 5) + factorize(n // 7) + factorize(n // 11) + factorize(n // 13)\n    if n % 7 == 0:\n        return [factors(n // 7)] + factorize(n // 7) + factorize(n // 11) + factorize(n // 13) + factorize(n // 17)\n    if n % 11 == 0:\n        return [factors(n // 11)] + factorize(n // 11) + factorize(n // 13) + factorize(n // 17)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n] + factorize(n // 2) + factorize(n // 3) + factorize(n // 5) + factorize(n // 7)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 4 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    elif n == 2:\n        return [n]\n    else:\n        return factorize(n // 2) + factorize(n // 5)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact * n for fact in factorize(n // 2)] + factorize(n // 2) + factorize(n // 5) + factorize(n // 7)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n] + factorize(n // 2) + factorize(n // 3) + factorize(n // 5) + factorize(n // 7)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact for fact in factorize(n // 2) if factor not in factorize(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    if n % 11 == 0:\n        return [n]\n    if n % 13 == 0:\n        return [n]\n    if n % 17 == 0:\n        return [n]\n    if n % 19 == 0:\n        return [n]\n    if n % 23 == 0:\n        return [n]\n    if n % 29 == 0:\n        return [n]\n    if n % 31 == 0:\n        return [n]\n    if n % 37 == 0:\n        return [n]\n    if n % 41 == 0:\n        return [n]\n    if n % 43 == 0:\n        return [n]\n    if n % 47 == 0:\n        return [n]\n    if n % 53 == 0:\n        return [n]\n    if n % 57 == 0:\n        return [n]\n    if n % 61 == 0:\n        return [n]\n    if n % 63 == 0:\n        return [n]\n    if n % 67 == 0:\n        return [n]\n    if n % 71 == 0:\n        return [n]\n    if n % 73 == 0:", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        factors = []\n        for i in range(n):\n            factors.append(i)\n            for j in range(i, n):\n                factors.append(j)\n        return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact for fact in factorize(n // 2) if factor not in factorize(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n] + factorize(n // 2) + factorize(n // 3) + factorize(n // 5) + factorize(n // 7)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        factors = []\n        for i in range(n):\n            factors.append(i)\n            if i % 2 == 0:\n                factors.append(i / 2)\n        return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 4 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    if n % 11 == 0:\n        return [n]\n    if n % 13 == 0:\n        return [n]\n    if n % 17 == 0:\n        return [n]\n    if n % 19 == 0:\n        return [n]\n    if n % 23 == 0:\n        return [n]\n    if n % 29 == 0:\n        return [n]\n    if n % 31 == 0:\n        return [n]\n    if n % 37 == 0:\n        return [n]\n    if n % 41 == 0:\n        return [n]\n    if n % 43 == 0:\n        return [n]\n    if n % 47 == 0:\n        return [n]\n    if n % 53 == 0:\n        return [n]\n    if n % 57 == 0:\n        return [n]\n    if n % 61 == 0:\n        return [n]\n    if n % 63 == 0:\n        return [n]\n    if n % 67 == 0:\n        return [n]\n    if n % 71 == 0:", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n == 3:\n        return [n]\n    if n == 4:\n        return [n]\n    if n == 5:\n        return [n]\n    if n == 6:\n        return [n]\n    if n == 7:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # We need to find the number of factors that are smaller than n\n    # We need to find the number of factors that are larger than n\n    # We need to find the number of factors that are equal to n\n    # We need to find the number of factors that are multiples of n\n    # We need to find the number of factors that are multiples of n\n    # We need to find the number of factors that are multiples of n\n    # We need to find the number of factors that are multiples of n\n    # We need to find the number of factors that are multiples of n\n    # We need to find the number of factors that are multiples of n\n    # We need to find the number of factors that are multiples of n\n    # We need to find the number of factors that are multiples of n\n    # We need to find the number of factors that are multiples of n\n    # We need to find the number of factors that are multiples of n\n    # We need to find the number of factors that are multiples of n\n    # We need to find the number of factors that are multiples of n\n    # We need to find the number of factors that are multiples of n\n    # We need to find the number of factors that are multiples of n", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n] + factorize(n // 2) + factorize(n // 3) + factorize(n // 5) + factorize(n // 7)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n] * factorize(n // 2) + factorize(n // 3) + factorize(n // 5) + factorize(n // 7)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 4 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    if n % 11 == 0:\n        return [n]\n    if n % 13 == 0:\n        return [n]\n    if n % 17 == 0:\n        return [n]\n    if n % 19 == 0:\n        return [n]\n    if n % 23 == 0:\n        return [n]\n    if n % 29 == 0:\n        return [n]\n    if n % 31 == 0:\n        return [n]\n    if n % 37 == 0:\n        return [n]\n    if n % 41 == 0:\n        return [n]\n    if n % 43 == 0:\n        return [n]\n    if n % 47 == 0:\n        return [n]\n    if n % 53 == 0:\n        return [n]\n    if n % 57 == 0:\n        return [n]\n    if n % 61 == 0:\n        return [n]\n    if n % 63 == 0:\n        return [n]\n    if n % 67 == 0:\n        return [n]\n    if n % 71 == 0:\n        return [n]\n    if n % 73 == 0:", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    elif n == 2:\n        return [factors(n)[0], factors(n)[1]]\n    else:\n        return [factors(n)[0], factors(n)[1], factors(n)[2]]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 4 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 4 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    if n % 11 == 0:\n        return [n]\n    if n % 13 == 0:\n        return [n]\n    if n % 17 == 0:\n        return [n]\n    if n % 19 == 0:\n        return [n]\n    if n % 23 == 0:\n        return [n]\n    if n % 29 == 0:\n        return [n]\n    if n % 31 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return factorize(n // 2)\n    return factorize(n // 2) + factorize(n // 2) * (n // 2)</s>", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n] + factorize(n // 2) + factorize(n // 3) + factorize(n // 5) + factorize(n // 7)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    # prime factors\n    prime_factors = []\n    prime_factors.append(n)\n    while n > 1:\n        if n % 2 == 0:\n            prime_factors.append(n // 2)\n        n //= 2\n\n    # prime factors in the order from smallest to largest\n    prime_factors.reverse()\n\n    return prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n] + factorize(n // 2) + factorize(n // 3) + factorize(n // 5) + factorize(n // 7)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 4 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 4 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 4 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [(n // 2) + factorize(n // 2)]\n    return [(n // 2) + factorize(n // 2) + factorize(n // 3)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    elif n == 2:\n        return [n]\n    else:\n        return [factorize(n - 1)] + factorize(n - 2) + factorize(n - 3) + factorize(n - 4)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # TODO: check if the input is a prime number\n    # TODO: check if the input is a power of 2\n    # TODO: check if the input is a prime number\n    # TODO: check if the input is a power of 2\n    # TODO: check if the input is a prime number\n    # TODO: check if the input is a power of 2\n    # TODO: check if the input is a prime number\n    # TODO: check if the input is a power of 2\n    # TODO: check if the input is a prime number\n    # TODO: check if the input is a power of 2\n    # TODO: check if the input is a prime number\n    # TODO: check if the input is a power of 2\n    # TODO: check if the input is a prime number\n    # TODO: check if the input is a power of 2\n    # TODO: check if the input is a prime number\n    # TODO: check if the input is a power of 2\n    # TODO: check if the input is a prime number\n    # TODO: check if the input is a power of 2\n    # TODO: check if the input is a prime number\n    # TODO: check if the input is a power of 2\n    # TODO: check if the input is a prime number\n    # TODO: check if the input is a power of 2\n    # TODO:", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # We need to find all prime factors of n\n    # We need to find all prime factors of n\n    # We need to find all prime factors of n\n    # We need to find all prime factors of n\n    # We need to find all prime factors of n\n    # We need to find all prime factors of n\n    # We need to find all prime factors of n\n    # We need to find all prime factors of n\n    # We need to find all prime factors of n\n    # We need to find all prime factors of n\n    # We need to find all prime factors of n\n    # We need to find all prime factors of n\n    # We need to find all prime factors of n\n    # We need to find all prime factors of n\n    # We need to find all prime factors of n\n    # We need to find all prime factors of n\n    # We need to find all prime factors of n\n    # We need to find all prime factors of n\n    # We need to find all prime factors of n\n    # We need to find all prime factors of n\n    # We need to find all prime factors of n\n    # We need to find all prime factors of n\n    # We need to find all prime factors of n\n    # We", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        factors = []\n        for i in range(n):\n            factors.append(i)\n            for j in range(i):\n                factors.append(i * j)\n        return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 4 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    if n % 11 == 0:\n        return [n]\n    if n % 13 == 0:\n        return [n]\n    if n % 17 == 0:\n        return [n]\n    if n % 19 == 0:\n        return [n]\n    if n % 23 == 0:\n        return [n]\n    if n % 29 == 0:\n        return [n]\n    if n % 31 == 0:\n        return [n]\n    if n % 37 == 0:\n        return [n]\n    if n % 41 == 0:\n        return [n]\n    if n % 43 == 0:\n        return [n]\n    if n % 47 == 0:\n        return [n]\n    if n % 53 == 0:\n        return [n]\n    if n % 57 == 0:\n        return [n]\n    if n % 61 == 0:\n        return [n]\n    if n % 63 == 0:\n        return [n]\n    if n % 67 == 0:\n        return [n]\n    if n % 71 == 0:\n        return [n]\n    if n % 73 == 0:", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact for fact in factorize(n // 2) if factor not in factorize(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 4 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    if n == 1:\n        return [n]\n\n    # Find all prime factors of n\n    prime_factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            prime_factors.append(i)\n\n    # Sort the prime factors in ascending order\n    prime_factors.sort()\n\n    # Return the list of prime factors\n    return prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [2*n, n]\n    if n % 3 == 0:\n        return [2*n, 2*n, n]\n    if n % 5 == 0:\n        return [2*n, 2*n, 2*n, n]\n    if n % 7 == 0:\n        return [2*n, 2*n, 2*n, 2*n, n]\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # We need to find the largest prime factor of n\n    # We can use the following algorithm:\n    # 1. Find the largest prime factor of n/2\n    # 2. Find the largest prime factor of n/2^2\n    # 3. Find the largest prime factor of n/2^3\n    # 4. Find the largest prime factor of n/2^4\n    # 5. Find the largest prime factor of n/2^5\n    # 6. Find the largest prime factor of n/2^6\n    # 7. Find the largest prime factor of n/2^7\n    # 8. Find the largest prime factor of n/2^8\n    # 9. Find the largest prime factor of n/2^9\n    # 10. Find the largest prime factor of n/2^10\n    # 11. Find the largest prime factor of n/2^11\n    # 12. Find the largest prime factor of n/2^12\n    # 13. Find the largest prime factor of n/2^13\n    # 14. Find the largest prime factor of n/2^14\n    # 15. Find the largest prime factor of n/2^15\n    # 16. Find the largest prime factor of n/2^16\n    # 17. Find the largest prime factor of n/2^17\n    # 18", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    # Find all prime factors of n\n    prime_factors = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            prime_factors.append(i)\n\n    # Sort the factors in the order from smallest to largest\n    prime_factors.sort(key=lambda f: f * f)\n\n    # Return the list of prime factors\n    return prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    # Find the largest prime factor\n    max_f = n\n    for i in range(1, n):\n        if n % i == 0:\n            max_f = i\n            break\n\n    # Find the smallest prime factor\n    min_f = n\n    for i in range(1, n):\n        if n % i == 0:\n            min_f = i\n            break\n\n    # Find the rest of the factors\n    rest = []\n    for i in range(max_f, n):\n        rest.append(i)\n        if n % i == 0:\n            rest.append(i)\n\n    return rest", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    if n == 1:\n        return [n]\n\n    if n % 2 == 0:\n        return [n]\n\n    # Find all prime factors of n\n    prime_factors = []\n    for i in range(2, n + 1):\n        if i % i == 0:\n            prime_factors.append(i)\n\n    # Sort the factors in the order of their appearance in the factorization\n    prime_factors.sort()\n\n    # Return the list of prime factors\n    return prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 4 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        factors = []\n        for i in range(n):\n            if i % 2 == 0:\n                factors.append(i)\n            else:\n                factors.append(i * 2)\n        return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return factorize(n // 2) + factorize(n // 3) + factorize(n // 5) + factorize(n // 7)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i * 2)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact for fact in factorize(n // 2) if fact % n == 0] + factorize(n // 2) + factorize(n // 5)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact * n for fact in factorize(n // 2)] + factorize(n // 2) + factorize(n // 3) + factorize(n // 4)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return factorize(n // 2)\n    return factorize(n // 2) + factorize(n // 2) * factorize(n // 2) * factorize(n // 2) * factorize(n // 2) * factorize(n // 2) * factorize(n // 2) * factorize(n // 2) * factorize(n // 2) * factorize(n // 2) * factorize(n // 2) * factorize(n // 2) * factorize(n // 2) * factorize(n // 2) * factorize(n // 2) * factorize(n // 2) * factorize(n // 2) * factorize(n // 2) * factorize(n // 2) * factorize(n // 2) * factorize(n // 2) * factorize(n // 2) * factorize(n // 2) * factorize(n // 2) * factorize(n // 2) * factorize(n // 2) * factorize(n // 2) * factorize(n // 2", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 4 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    if n % 11 == 0:\n        return [n]\n    if n % 13 == 0:\n        return [n]\n    if n % 17 == 0:\n        return [n]\n    if n % 19 == 0:\n        return [n]\n    if n % 23 == 0:\n        return [n]\n    if n % 29 == 0:\n        return [n]\n    if n % 31 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact * n for fact in factorize(n // 2)] + factorize(n // 2) + factorize(n // 5) + factorize(n // 7)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n        if i % 2 == 0:\n            factors.append(i / 2)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact for fact in factorize(n // 2) if factor not in factorize(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 4 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    if n % 11 == 0:\n        return [n]\n    if n % 13 == 0:\n        return [n]\n    if n % 17 == 0:\n        return [n]\n    if n % 19 == 0:\n        return [n]\n    if n % 23 == 0:\n        return [n]\n    if n % 29 == 0:\n        return [n]\n    if n % 31 == 0:\n        return [n]\n    if n % 37 == 0:\n        return [n]\n    if n % 41 == 0:\n        return [n]\n    if n % 43 == 0:\n        return [n]\n    if n % 47 == 0:\n        return [n]\n    if n % 53 == 0:\n        return [n]\n    if n % 57 == 0:\n        return [n]\n    if n % 61 == 0:\n        return [n]\n    if n % 63 == 0:\n        return [n]\n    if n % 67 == 0:\n        return [n]\n    if n % 71 == 0:", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [factors(n) for factors in factorize(n // 2)] + factorize(n // 2) + factorize(n // 3) + factorize(n // 4)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    elif n == 2:\n        return [n]\n    else:\n        return [factorize(n // 2) + factorize(n // 2) for n in range(n // 2)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n] + factorize(n // 2) + factorize(n // 3) + factorize(n // 5) + factorize(n // 7)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [factors(n) for factors in factorize(n // 2)] + factorize(n // 2) + factorize(n // 3) + factorize(n // 4)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    if n % 11 == 0:\n        return [n]\n    if n % 13 == 0:\n        return [n]\n    if n % 17 == 0:\n        return [n]\n    if n % 19 == 0:\n        return [n]\n    if n % 23 == 0:\n        return [n]\n    if n % 29 == 0:\n        return [n]\n    if n % 31 == 0:\n        return [n]\n    if n % 37 == 0:\n        return [n]\n    if n % 41 == 0:\n        return [n]\n    if n % 43 == 0:\n        return [n]\n    if n % 47 == 0:\n        return [n]\n    if n % 53 == 0:\n        return [n]\n    if n % 57 == 0:\n        return [n]\n    if n % 61 == 0:\n        return [n]\n    if n % 63 == 0:\n        return [n]\n    if n % 67 == 0:\n        return [n]\n    if n % 71 == 0:\n        return [n]\n    if n % 73 == 0:", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # TODO: implement\n    return []", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # TODO: check if the input is a prime number\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    # TODO: check if the input is a prime number\n    if n % 3 == 0:\n        return [n]\n    # TODO: check if the input is a prime number\n    if n % 5 == 0:\n        return [n]\n    # TODO: check if the input is a prime number\n    if n % 7 == 0:\n        return [n]\n    # TODO: check if the input is a prime number\n    if n % 11 == 0:\n        return [n]\n    # TODO: check if the input is a prime number\n    if n % 13 == 0:\n        return [n]\n    # TODO: check if the input is a prime number\n    if n % 17 == 0:\n        return [n]\n    # TODO: check if the input is a prime number\n    if n % 19 == 0:\n        return [n]\n    # TODO: check if the input is a prime number\n    if n % 23 == 0:\n        return [n]\n    # TODO: check if the input is a prime number\n    if n % 29 == 0:\n        return [n]\n    # TODO: check if the input is a prime number\n    if n % 31 == 0:", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact for fact in factorize(n // 2) if factor % n == 0] + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) +", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact for fact in factorize(n // 2) if factor not in factorize(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 4 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    if n % 11 == 0:\n        return [n]\n    if n % 13 == 0:\n        return [n]\n    if n % 17 == 0:\n        return [n]\n    if n % 19 == 0:\n        return [n]\n    if n % 23 == 0:\n        return [n]\n    if n % 29 == 0:\n        return [n]\n    if n % 31 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n] + factorize(n // 2) + factorize(n // 3) + factorize(n // 5) + factorize(n // 7)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # The list of prime factors\n    prime_factors = []\n    # The list of prime factors with their number of appearances\n    prime_factors_with_occurences = []\n    # The list of prime factors with their number of appearances and their factorization\n    prime_factors_with_occurences_and_factors = []\n    # The list of prime factors with their number of appearances and their factorization and their factorization\n    prime_factors_with_occurences_and_factors_and_factors = []\n    # The list of prime factors with their number of appearances and their factorization and their factorization\n    prime_factors_with_occurences_and_factors_and_factors_and_factors = []\n    # The list of prime factors with their number of appearances and their factorization and their factorization\n    prime_factors_with_occurences_and_factors_and_factors_and_factors_and_factors = []\n    # The list of prime factors with their number of appearances and their factorization and their factorization\n    prime_factors_with_occurences_and_factors_and_factors_and_factors_and_factors_and_factors = []\n    # The list of prime factors with their number of appearances and their factorization and their factorization\n    prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    if n % 11 == 0:\n        return [n]\n    if n % 13 == 0:\n        return [n]\n    if n % 17 == 0:\n        return [n]\n    if n % 19 == 0:\n        return [n]\n    if n % 23 == 0:\n        return [n]\n    if n % 29 == 0:\n        return [n]\n    if n % 31 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact for fact in factorize(n // 2) if factor not in factorize(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact for fact in factorize(n // 2) if fact!= n] + factorize(n // 2) + factorize(n // 3)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact * n for fact in factorize(n // 2)] + factorize(n // 2) + factorize(n // 3)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 4 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    if n % 11 == 0:\n        return [n]\n    if n % 13 == 0:\n        return [n]\n    if n % 17 == 0:\n        return [n]\n    if n % 19 == 0:\n        return [n]\n    if n % 23 == 0:\n        return [n]\n    if n % 29 == 0:\n        return [n]\n    if n % 31 == 0:\n        return [n]\n    if n % 37 == 0:\n        return [n]\n    if n % 41 == 0:\n        return [n]\n    if n % 43 == 0:\n        return [n]\n    if n % 47 == 0:\n        return [n]\n    if n % 53 == 0:\n        return [n]\n    if n % 57 == 0:\n        return [n]\n    if n % 61 == 0:\n        return [n]\n    if n % 63 == 0:\n        return [n]\n    if n % 67 == 0:\n        return [n]\n    if n % 71 == 0:\n        return [n]\n    if n % 73 == 0:", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n] + factorize(n // 2) + factorize(n // 3) + factorize(n // 5) + factorize(n // 7)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n == 3:\n        return [n]\n    if n == 5:\n        return [n]\n    if n == 7:\n        return [n]\n    if n == 11:\n        return [n]\n    if n == 13:\n        return [n]\n    if n == 19:\n        return [n]\n    if n == 29:\n        return [n]\n    if n == 37:\n        return [n]\n    if n == 43:\n        return [n]\n    if n == 49:\n        return [n]\n    if n == 53:\n        return [n]\n    if n == 59:\n        return [n]\n    if n == 69:\n        return [n]\n    if n == 73:\n        return [n]\n    if n == 79:\n        return [n]\n    if n == 89:\n        return [n]\n    if n == 97:\n        return [n]\n    if n == 103:\n        return [n]\n    if n == 109:\n        return [n]\n    if n == 113:\n        return [n]\n    if n == 119:\n        return [n]\n    if n == 131:\n        return [n]\n    if n == 139:\n        return [n]\n    if n == 149:\n        return [n]\n    if n ==", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact * n for factor in factorize(n // 2) for fact in factorize(n // 5)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact * n for fact in factorize(n // 2)] + factorize(n // 2) + factorize(n // 3) + factorize(n // 4)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        factors = [n]\n        for i in range(n):\n            factors.append(i * i)\n            if i == n - 1:\n                break\n        return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 4 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    if n % 11 == 0:\n        return [n]\n    if n % 13 == 0:\n        return [n]\n    if n % 17 == 0:\n        return [n]\n    if n % 19 == 0:\n        return [n]\n    if n % 23 == 0:\n        return [n]\n    if n % 29 == 0:\n        return [n]\n    if n % 31 == 0:\n        return [n]\n    if n % 37 == 0:\n        return [n]\n    if n % 41 == 0:\n        return [n]\n    if n % 43 == 0:\n        return [n]\n    if n % 47 == 0:\n        return [n]\n    if n % 53 == 0:\n        return [n]\n    if n % 57 == 0:\n        return [n]\n    if n % 61 == 0:\n        return [n]\n    if n % 63 == 0:\n        return [n]\n    if n % 67 == 0:\n        return [n]\n    if n % 71 == 0:", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        factors = []\n        for i in range(n):\n            factors.append(i)\n            for j in range(i):\n                if j!= i:\n                    factors.append(factors[-1] * factors[j])\n        return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact * n for fact in factorize(n // 2)] + factorize(n // 2) + factorize(n // 3) + factorize(n // 4)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact * n for fact in factorize(n // 2)] + factorize(n // 2) + factorize(n // 3) + factorize(n // 4)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [fact * 2 for fact in factorize(n // 2)]\n    return [fact * 2 for fact in factorize(n // 2)] + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n // 2) + factorize(n //", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 4 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    if n % 11 == 0:\n        return [n]\n    if n % 13 == 0:\n        return [n]\n    if n % 17 == 0:\n        return [n]\n    if n % 19 == 0:\n        return [n]\n    if n % 23 == 0:\n        return [n]\n    if n % 29 == 0:\n        return [n]\n    if n % 31 == 0:\n        return [n]\n    if n % 37 == 0:\n        return [n]\n    if n % 41 == 0:\n        return [n]\n    if n % 43 == 0:\n        return [n]\n    if n % 47 == 0:\n        return [n]\n    if n % 53 == 0:\n        return [n]\n    if n % 57 == 0:\n        return [n]\n    if n % 61 == 0:\n        return [n]\n    if n % 63 == 0:\n        return [n]\n    if n % 67 == 0:\n        return [n]\n    if n % 71 == 0:", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 4 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    if n % 11 == 0:\n        return [n]\n    if n % 13 == 0:\n        return [n]\n    if n % 17 == 0:\n        return [n]\n    if n % 19 == 0:\n        return [n]\n    if n % 23 == 0:\n        return [n]\n    if n % 29 == 0:\n        return [n]\n    if n % 31 == 0:\n        return [n]\n    if n % 37 == 0:\n        return [n]\n    if n % 41 == 0:\n        return [n]\n    if n % 43 == 0:\n        return [n]\n    if n % 47 == 0:\n        return [n]\n    if n % 53 == 0:\n        return [n]\n    if n % 57 == 0:\n        return [n]\n    if n % 61 == 0:\n        return [n]\n    if n % 63 == 0:\n        return [n]\n    if n % 67 == 0:\n        return [n]\n    if n % 71 == 0:", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact for fact in factorize(n // 2) if fact % n == 0] + factorize(n // 2) + factorize(n // 5) + factorize(n // 7)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [factors(n) for factors in factorize(n - 1)] + factorize(n)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact * n for fact in factorize(n // 2)] + factorize(n // 2) + factorize(n // 5) + factorize(n // 7)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n] + factorize(n // 2) + factorize(n // 3) + factorize(n // 5) + factorize(n // 7)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n        if i % 2 == 0:\n            factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return factorize(n // 2)\n    if n % 3 == 0:\n        return factorize(n // 3)\n    if n % 5 == 0:\n        return factorize(n // 5)\n    return factorize(n // 10)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact for fact in factorize(n // 2) if factor not in factorize(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n] + factorize(n // 2) + factorize(n // 3) + factorize(n // 5) + factorize(n // 7)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    if n % 11 == 0:\n        return [n]\n    if n % 13 == 0:\n        return [n]\n    if n % 17 == 0:\n        return [n]\n    if n % 19 == 0:\n        return [n]\n    if n % 23 == 0:\n        return [n]\n    if n % 29 == 0:\n        return [n]\n    if n % 31 == 0:\n        return [n]\n    if n % 37 == 0:\n        return [n]\n    if n % 41 == 0:\n        return [n]\n    if n % 43 == 0:\n        return [n]\n    if n % 47 == 0:\n        return [n]\n    if n % 53 == 0:\n        return [n]\n    if n % 57 == 0:\n        return [n]\n    if n % 61 == 0:\n        return [n]\n    if n % 63 == 0:\n        return [n]\n    if n % 67 == 0:\n        return [n]\n    if n % 71 == 0:\n        return [n]\n    if n % 73 == 0:", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 4 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # We use a list of prime numbers to avoid the need to keep track of the order of the factors\n    prime_factors = [prime for prime in range(n) if prime % 2 == 0]\n    # We use a list of prime numbers to avoid the need to keep track of the order of the factors\n    prime_factors = [prime for prime in range(n) if prime % 2 == 0]\n    # We use a list of prime numbers to avoid the need to keep track of the order of the factors\n    prime_factors = [prime for prime in range(n) if prime % 2 == 0]\n    # We use a list of prime numbers to avoid the need to keep track of the order of the factors\n    prime_factors = [prime for prime in range(n) if prime % 2 == 0]\n    # We use a list of prime numbers to avoid the need to keep track of the order of the factors\n    prime_factors = [prime for prime in range(n) if prime % 2 == 0]\n    # We use a list of prime numbers to avoid the need to keep track of the order of the factors\n    prime_factors = [prime for prime in range(n) if prime % 2 == 0]\n    # We use", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n\n    # find all prime factors of n\n    prime_factors = []\n    for i in range(n):\n        if i % 2 == 0:\n            prime_factors.append(i)\n\n    # sort the factors in ascending order\n    prime_factors.sort()\n\n    # return the list of prime factors\n    return prime_factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact for fact in factorize(n // 2) if factor not in factorize(n)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n] + factorize(n // 2) + factorize(n // 3) + factorize(n // 5) + factorize(n // 7)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    factors = []\n    for i in range(2, n):\n        factors.append(i)\n        if n % i == 0:\n            factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 4 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        factors = []\n        for i in range(n):\n            if n % i == 0:\n                factors.append(i)\n        return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [factors(n) for factors in factorize(n // 2)] + factorize(n // 2) + factorize(n // 3)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [factors(n) for factors in factorize(n - 1)]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact * n for fact in factorize(n // 2)] + factorize(n // 2) + factorize(n // 3)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 4 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n        for j in range(i):\n            if j!= i:\n                factors.append(j)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(n):\n        factors.append(i)\n    return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 4 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        factors = []\n        for i in range(n):\n            factors.append(i)\n            for j in range(i):\n                factors.append(j)\n        return factors", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    return [n]", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    else:\n        return [fact * n for fact in factorize(n // 2)] + factorize(n // 2) + factorize(n // 3) + factorize(n // 4)", "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [n]\n    if n == 2:\n        return [n]\n    if n % 2 == 0:\n        return [n]\n    if n % 3 == 0:\n        return [n]\n    if n % 4 == 0:\n        return [n]\n    if n % 5 == 0:\n        return [n]\n    if n % 7 == 0:\n        return [n]\n    if n % 11 == 0:\n        return [n]\n    if n % 13 == 0:\n        return [n]\n    if n % 17 == 0:\n        return [n]\n    if n % 19 == 0:\n        return [n]\n    if n % 23 == 0:\n        return [n]\n    if n % 29 == 0:\n        return [n]\n    if n % 31 == 0:\n        return [n]\n    if n % 37 == 0:\n        return [n]\n    if n % 41 == 0:\n        return [n]\n    if n % 43 == 0:\n        return [n]\n    if n % 47 == 0:\n        return [n]\n    if n % 53 == 0:\n        return [n]\n    if n % 57 == 0:\n        return [n]\n    if n % 61 == 0:\n        return [n]\n    if n % 63 == 0:\n        return [n]\n    if n % 67 == 0:\n        return [n]\n    if n % 71 == 0:"]]