[["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # characters\n    num = int(number)\n    if num < 1:\n        raise ValueError('negative number')\n    if num > 1000:\n        raise ValueError('too big')\n\n    # standard roman numeral symbols\n    _nums = ['i', 'v', 'x', 'a', 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii']\n\n    # lowercase roman numerals\n    _lnums = [\n        x.lower() for x in _nums + _lnums[num - 1]]\n\n    # first character, uppercase\n    if num > 1:\n        _firstchar = num - 1\n        _firstchar += 1\n    else:\n        _firstchar = 'u'\n    return _firstchar + _lnums[_firstchar] + _nums[_firstchar]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num < 1:\n        return \"\"\n    if num > 1000:\n        num = 1000 - num\n    roman = \"\"\n    for i in range(len(int_to_mini_roman_lowercase)):\n        roman += int_to_mini_roman_lowercase[i]\n    roman = re.sub(r\"[^a-z]\", \"\", roman)\n    return roman\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return ''\n    if number < 1:\n        return ''\n    if number == 1:\n        return '1'\n    if number == 2:\n        return '2'\n    if number == 3:\n        return '3'\n    if number == 4:\n        return '4'\n    if number == 5:\n        return '5'\n    if number == 6:\n        return '6'\n    if number == 7:\n        return '7'\n    if number == 8:\n        return '8'\n    if number == 9:\n        return '9'\n    if number == 10:\n        return 'X'\n    if number == 11:\n        return 'Xi'\n    if number == 12:\n        return 'Xii'\n    if number == 13:\n        return 'Xiii'\n    if number == 14:\n        return 'Xiv'\n    if number == 15:\n        return 'Xv'\n    if number == 16:\n        return 'Xvi'\n    if number == 17:\n        return 'Xvii'\n    if number == 18:\n        return 'Xviii'\n    if number == 19:\n        return 'Xix'\n    return num_to_roman(number)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return '0'\n\n    # the number, as a string, may be larger than 1000, so we convert it to a\n    # normalized integer first.\n    number = int(number, 10)\n\n    roman = []\n    for i in range(10):\n        if number <= i:\n            roman.append(str(number)[2:])\n        number /= 10\n\n    roman.reverse()\n    return roman[0].lower() + '.' + roman[1].lower() + '.' + roman[2].lower() + '.' + roman[3].lower() + '.' + roman[4].lower() + '.' + roman[5].lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 0:\n        return '0'\n    if number < 100:\n        return number % 10 + '0' * (number % 100)\n    else:\n        if number % 10 == 9:\n            return 'xi' + ('0' * (number % 100))\n        elif number % 10 == 8:\n            return 'xiis' + ('0' * (number % 100))\n        elif number % 10 == 7:\n            return 'xiis' + ('0' * (number % 100) + '1')\n        elif number % 10 == 6:\n            return 'xiis' + ('0' * (number % 100) + '2')\n        elif number % 10 == 5:\n            return 'xiis' + ('0' * (number % 100) + '3')\n        elif number % 10 == 4:\n            return 'xiis' + ('0' * (number % 100) + '4')\n        elif number % 10 == 3:\n            return 'xiis' + ('0' * (number % 100) + '5')\n        elif number % 10 == 2:\n            return 'xiis' + ('0' * (number % 100) + '6')\n        elif number % 10 == 1:\n            return 'xiis' + ('0' * (number % 100) + '7')\n        else:\n            return 'ix' + ('0' * (number % 100))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # If the number is strictly positive, convert it to a positive integer.\n    if number > 0:\n        number = int(number)\n    # Take each digit of the number, and convert it to lowercase.\n    letters = [letters[0], letters[1], letters[2], letters[3], letters[4]]\n    result = \"\"\n    for letter in letters:\n        if letter!= \"X\":\n            result += letter\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number == 0:\n        return '0'\n    if number < 1:\n        return '0'\n    if number <= 100:\n        return str(number)\n    if number <= 1000:\n        return str(number)[::-1]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    num = num + 1\n    num = int(math.floor(num / 100))\n    if num >= 50:\n        if num >= 100:\n            num = num - 50\n        num = num + 10\n        num = int(math.floor(num / 100))\n        num = int(math.floor(num % 100))\n    else:\n        if num >= 10:\n            num = num - 10\n        num = num + 1\n        num = int(math.floor(num / 100))\n        num = int(math.floor(num % 100))\n    return chr(int_to_roman(num))[2:]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 0:\n        return '-n'\n    elif number < 200:\n        return int_to_roman(number)[0].lower() + 'i'\n    elif number < 400:\n        return int_to_roman(number)[0].lower() + 'ii'\n    elif number < 600:\n        return int_to_roman(number)[0].lower() + 'iii'\n    elif number < 800:\n        return int_to_roman(number)[0].lower() + 'iv'\n    elif number < 1000:\n        return int_to_roman(number)[0].lower() + 'v'\n    else:\n        return 'xx'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    num = float(num)\n    if num <= 999:\n        return ''.join(c for c in num_to_roman(num, 'i'))\n    if num <= 1000:\n        return num_to_roman(num, 'a') + 'ix'\n    return num_to_roman(num, 'a') + 'li'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # pylint: disable=no-member\n    if number == 0:\n        return '0'\n    if number == 1:\n        return '1'\n    if number == 2:\n        return '2'\n    if number == 3:\n        return '3'\n    if number == 4:\n        return '4'\n    if number == 5:\n        return '5'\n    if number == 6:\n        return '6'\n    if number == 7:\n        return '7'\n    if number == 8:\n        return '8'\n    if number == 9:\n        return '9'\n    if number == 10:\n        return '10'\n    if number == 11:\n        return '11'\n    if number == 12:\n        return '12'\n    if number == 13:\n        return '13'\n    if number == 14:\n        return '14'\n    if number == 15:\n        return '15'\n    if number == 16:\n        return '16'\n    if number == 17:\n        return '17'\n    if number == 18:\n        return '18'\n    if number == 19:\n        return '19'\n    if number == 20:\n        return '20'\n    if number == 21:\n        return '21'\n    if number == 22:\n        return '22'\n    if number == 23:\n        return '23'\n    if number == 24:\n        return '24'\n    if number == 25:\n        return '25'\n    if", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return \"0\"\n    if number == 1:\n        return \"1\"\n    return \"0\" + str(number)[2:]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # From http://www.ramsom.net/roman/pages/calc.html\n    #\n\n    roman_words = ['Iulius', 'Luis', 'Virgilius', 'Domitian', 'Julian',\n                  'Constantine', 'Byzantium', 'Thessalonica', 'Constantine',\n                  'Constantine', 'Constantine', 'Constantine', 'Constantine',\n                  'Constantine', 'Constantine', 'Constantine', 'Constantine',\n                  'Constantine', 'Constantine', 'Constantine', 'Constantine',\n                  'Constantine', 'Constantine', 'Constantine', 'Constantine',\n                  'Constantine', 'Constantine', 'Constantine', 'Constantine',\n                  'Constantine', 'Constantine', 'Constantine', 'Constantine',\n                  'Constantine', 'Constantine', 'Constantine', 'Constantine',\n                  'Constantine', 'Constantine', 'Constantine', 'Constantine',\n                  'Constantine', 'Constantine', 'Constantine', 'Constantine',\n                  'Constant", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 0:\n        return str(-abs(number))\n    if number > 1000:\n        return str(number - 1000)\n    if number < 0:\n        return str(abs(number))\n    return number.replace(\"0\", \"1\").replace(\"1\", \"i\").replace(\"2\", \"ii\").replace(\"3\", \"iii\").replace(\"4\", \"iii\").replace(\"5\", \"iii\").replace(\"6\", \"iv\").replace(\"7\", \"v\").replace(\"8\", \"vv\").replace(\"9\", \"vi\").replace(\"-\", \"ae\").replace(\"_\", \"u\").replace(\" \", \"u\").lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    s = str(number)\n    if s[0] == 'i' and s[-1] == 'u':\n        return 'i'\n    elif s[0] == 'i' and s[-1] == 'e':\n        return 'ii'\n    elif s[0] == 'i' and s[-1] == 'o':\n        return 'iii'\n    elif s[0] == 'i' and s[-1] == 'x':\n        return 'ix'\n    elif s[0] == 'i' and s[-1] == 'u':\n        return 'xx'\n    elif s[0] == 'i' and s[-1] == 'x':\n        return 'xix'\n    elif s[0] == 'i' and s[-1] == 'e':\n        return 'clii'\n    elif s[0] == 'i' and s[-1] == 'x':\n        return 'cdxxvi'\n    else:\n        return 'ix'\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number < 1:\n        return \"\"\n\n    for i in range(1, number):\n        yield chr(ord('a') + i)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    low = string.ascii_letters[:]\n    up = string.ascii_letters[-1:]\n    num = abs(number)\n    if num < 1:\n        return low + str(num)\n    else:\n        for i in xrange(1, num):\n            low = low + low[i % len(low)]\n            up = up + up[i % len(up)]\n        return low + up", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1:\n        return number + 'x'\n    elif number <= 1000:\n        return number + ('-' + (number - 1000) * 'ix')\n    else:\n        return number + 'ix'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # MAXNUM is the largest integer that is not a multiple of 10\n    MAXNUM = 1000\n    if number == 0:\n        return \"0\"\n    # Make the result lowercase\n    result = \"\"\n    while number!= 0:\n        # Number to five digits\n        temp = str(number % 10)\n        number /= 10\n        if temp in range(4, 10):\n            result += temp\n        # Make the resulting string lowercase\n        result += int_to_mini_roman(number)\n        # Change the next number to the next number in the series\n        number = number / 10\n        result += \" \"\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return \"\".join([int_to_mini_roman(x) for x in number]).lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return '0'\n    if number < 0:\n        return number + 1\n\n    def _reverse(x):\n        return ''.join(reversed(x))\n\n    if number < 1000:\n        if number < 100:\n            return 'iii' + _reverse(number) + 'xix'\n        else:\n            return 'iii' + _reverse(number) + 'xix' + 'bb'\n    if number < 1000 and number < 10000:\n        return 'iv' + _reverse(number) + 'xix' + 'iiii'\n    if number < 1000 and number < 100000:\n        return 'iv' + _reverse(number) + 'xix' + 'iiii' + 'ii'\n    if number < 1000 and number < 1000000:\n        return 'iv' + _reverse(number) + 'xix' + 'iiii' + 'iii'\n    if number < 1000 and number < 10000000:\n        return 'iv' + _reverse(number) + 'xix' + 'iiii' + 'iii' + 'i'\n    if number < 10000 and number < 1000000000:\n        return 'iv' + _reverse(number) + 'xix' + 'iiii' + 'iii'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Get rid of leading zeros\n    num = int(number)\n\n    # Get rid of leading '.'\n    num = num.rstrip('.')\n\n    # Get rid of trailing zeros\n    num = num.rstrip(' ')\n\n    # Remove any leading ',' or ','\n    num = num.replace(',', '').replace(',', '')\n\n    # Get rid of any trailing ','\n    num = num.replace(',', '').replace(',', '')\n\n    # Return the string\n    return num.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number > 1000:\n        raise ValueError(\"num is larger than 1000\")\n    num = number\n    if num < 1000:\n        num = \"vi\" + str(num) + \"i\"\n    else:\n        num = \"vi\" + str(num) + \"ii\"\n    return num.lower()</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    digits = [digit for digit in str(number).split('.') if digit!= '0']\n    if len(digits) == 1:\n        return '{0}'.format(digits[0])\n    if len(digits) == 2:\n        return '{0} {1}'.format(digits[0], digits[1])\n    else:\n        return '{0} {1} {2}'.format(digits[0], digits[1], digits[2])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return 'ix'\n    else:\n        n = int(math.floor(number))\n        while n >= 1:\n            if n % 10 == 0:\n                n -= 1\n            else:\n                n -= n % 10 + 1\n        return n", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not number <= 1000:\n        return False\n    if number == 0:\n        return 'iv'\n    if number == 1:\n        return 'vi'\n    if number == 2:\n        return 'vii'\n    if number == 3:\n        return 'vii'\n    if number == 4:\n        return 'viii'\n    if number == 5:\n        return 'ix'\n    if number == 6:\n        return 'xi'\n    if number == 7:\n        return 'xii'\n    if number == 8:\n        return 'xiii'\n    if number == 9:\n        return 'xiv'\n    if number == 10:\n        return 'xv'\n    if number == 11:\n        return 'xi'\n    if number == 12:\n        return 'xiv'\n    if number == 13:\n        return 'xxvi'\n    return ''.join(c.capitalize() for c in int_to_mini_roman(int(number)))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    lower = ''\n    for i in range(1, number, 2):\n        if i == number or number % 10 == 0:\n            lower += '0' + str(i)\n        else:\n            lower += str(i)\n    return lower\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number > 1000:\n        return ''\n    return '{}'.format(number)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number < 1 or number > 1000:\n        raise ValueError('Invalid number for int_to_mini_roman')\n\n    return number.replace('0', '').replace('.', '').lower().replace('-', '')", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    try:\n        a = [int(i) for i in str(number).split()]\n    except ValueError:\n        return \",\".join([str(int(i)) for i in range(number)])\n\n    if len(a) == 1:\n        return a[0].lower()\n    elif len(a) == 2:\n        return a[0].lower() + a[1].lower()\n\n    return \",\".join([str(int(i)) for i in range(number)])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return ''.join([int_to_roman(number)[i] for i in range(0, len(int_to_roman(number)))]).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return ''\n    return re.sub(r'\\D', '.', str(number))[:-1].lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # See Wikipedia for the rules.\n    num = int(number)\n    if num == 0:\n        return \"\"\n\n    # These are the most common forms (see Wikipedia for the rules).\n    if num == 1:\n        return '1'\n    elif num in [2, 3, 4, 6, 7, 8, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]:\n        return 'xxx'\n    elif num == 10:\n        return 'xi'\n    elif num in [1, 6, 10, 14, 21, 23, 30, 34, 38, 42, 47, 51, 57, 60, 65]:\n        return 'xi'\n    elif num in [13, 16, 20, 24, 27, 31, 36, 40, 44, 49, 54, 58, 63, 70]:\n        return 'xii'\n    elif num in [8, 12, 15, 17, 19", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    while number >= 1:\n        number /= 10\n    while number >= 1:\n        number /= 10\n    while number > 1:\n        number /= 10\n    return '{0:#,%s}' % (number, number)[-2:]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n\n    num = int(number)\n    roman_num = ''\n    if num == 1:\n        roman_num = '1'\n    elif num == 2:\n        roman_num = '2'\n    elif num == 3:\n        roman_num = '3'\n    elif num == 4:\n        roman_num = '4'\n    elif num == 5:\n        roman_num = '5'\n    elif num == 6:\n        roman_num = '6'\n    elif num == 7:\n        roman_num = '7'\n    elif num == 8:\n        roman_num = '8'\n    elif num == 9:\n        roman_num = '9'\n    elif num == 10:\n        roman_num = '10'\n    elif num == 11:\n        roman_num = '11'\n    elif num == 12:\n        roman_num = '12'\n    elif num == 13:\n        roman_num = '13'\n    elif num == 14:\n        roman_num = '14'\n    elif num == 15:\n        roman_num = '15'\n    elif num == 16:\n        roman_num = '16'\n    elif num == 17:\n        roman_num = '17'\n    elif num == 18:\n        roman_num = '18'\n    elif num == 19:\n        roman_num = '19'\n    elif num == 20:\n        roman_num = '20'\n    elif num == 21:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return 0\n    if number < 1000:\n        if number < 100:\n            return x_to_roman(number)\n        if number < 10 or number < 100:\n            return x_to_roman(number, True)\n        if number < 10:\n            return x_to_roman(number, False)\n        return x_to_roman(number, True)\n    if number < 100:\n        return x_to_roman(number, True)\n    if number < 10 or number < 100:\n        return x_to_roman(number, False)\n    return x_to_roman(number, True)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return u' '.join(int_to_roman(x) for x in range(number))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # get integer range\n    min = int(math.floor(math.log(number, 10)))\n    max = min + 1\n    if min < 0:\n        min = 0\n    if max >= 1000:\n        max = 1000\n    # init (hopefully) unique string\n    if min == 0:\n        return '0' * (max - min) + '0' * (max - min - 1)\n    else:\n        s = '0' * (max - min) + '0' * (max - min - 1)\n        while min > 0:\n            num = min // 10\n            s = s + '0' * num + int_to_mini_roman(min % 10)\n            min = min // 10\n        return s + '0' * (max - min)\n    raise ValueError('invalid input')", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1:\n        return number\n    if number > 1000:\n        return number\n    if number == 1000:\n        return number + \"e\"\n    num = number // 10\n    den = number % 10\n    return \"%s%s%s\" % (int_to_roman(num), int_to_roman(den), 'i')", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return '0'\n    if number == 1:\n        return '1'\n    # If the number is not even, we add an 'X', otherwise, we append a '1'\n    if number % 2!= 0:\n        return 'X' + int_to_mini_roman(number / 2)\n    return '1' + int_to_mini_roman(number)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # This conversion should work for all positive integers up to 1000\n    while True:\n        try:\n            num = int(number)\n        except ValueError:\n            break\n        else:\n            return str(num).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return min_re.sub(r'\\g<sup>{3}</sup>\\1', r'\\g<sup>{3}</sup>\\1', number.ljust(6, '0'))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return ''.join([chr(int(ord(char))) for char in str(number)])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not number or number < 0:\n        return ''\n    if number in range(1, 1000):\n        return number.upper()\n    return number.lower() + '_'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    # lowercase roman numeral values\n    low = ['i', 'ii', 'iii', 'iv', 'v', 'x', 'xi', 'xxii', 'xxiii', 'xxiv', 'xxv']\n    upper = ['iiii', 'iii', 'iv', 'v', 'xix', 'xxii', 'xxiii', 'xxiv', 'xxv']\n    lower_upper = zip(low, upper)\n\n    # return the lower and upper parts of a number\n    return str(number).lower().zfill(2) + str(number).zfill(2) + str(number)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if int(number) < 1:\n        raise ValueError(\"Negative number given.\")\n\n    return \"%s%s\" % (number // 10, number % 10) if number > 1000 else \"%s%s\" % (\n        int_to_mini_roman(number // 100), int_to_mini_roman(number // 10) + \"i\") + (\n        int_to_mini_roman(number % 100) if number % 10 else \"\")\n    )", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 0:\n        return \"??\"\n    if number == 0:\n        return \"0\"\n    if number == 1:\n        return \"1\"\n    if number == 2:\n        return \"2\"\n    if number == 3:\n        return \"3\"\n    if number == 4:\n        return \"4\"\n    if number == 5:\n        return \"5\"\n    if number == 6:\n        return \"6\"\n    if number == 7:\n        return \"7\"\n    if number == 8:\n        return \"8\"\n    if number == 9:\n        return \"9\"\n    if number == 10:\n        return \"10\"\n    if number == 11:\n        return \"11\"\n    if number == 12:\n        return \"12\"\n    if number == 13:\n        return \"13\"\n    if number == 14:\n        return \"14\"\n    if number == 15:\n        return \"15\"\n    if number == 16:\n        return \"16\"\n    if number == 17:\n        return \"17\"\n    if number == 18:\n        return \"18\"\n    if number == 19:\n        return \"19\"\n    if number == 20:\n        return \"20\"\n    if number == 21:\n        return \"21\"\n    if number == 22:\n        return \"22\"\n    if number == 23:\n        return \"23\"\n    if number == 24:\n        return \"24\"\n    if number == 25:\n        return \"25\"\n    if number == 26:\n        return", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Note: We can't use str.lower() here because the string may contain letters\n    #       that don't have the same lowercase as the character in question.\n\n    # Try to make it less than 1000 in length.\n    if number > 1000:\n        return 'XXX'\n\n    # First, try to find a base 10 equivalent.\n    num = number // 10\n    base = 10 ** (int(number // 10) - 1)\n\n    # Calculate the lowercased version of the number. We still don't know what\n    # characters the character in question will have. For example, we don't know\n    # if it will be a digit or an uppercase letter. To get a good approximation,\n    # we take the largest base 10 equivalent we can find and make it a lowercase\n    # character. If there is a tie, we use the smallest character in the set. If\n    # there are still ties, we use the largest numeric character.\n    # FIXME: Remove this? If there is a tie, then take the lowest-order letter\n    #        in the set. That's the smallest possible base 10 equivalent.\n    #        We use the largest such letter, because if we could represent the\n    #        character in question using the letter with the lowest alphabetical\n    #        order, we would have the", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 0:\n        return '0'\n    else:\n        result = ''\n        for i in range(number):\n            result = result + chr(ord('0') + i)\n        return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return '0' * (number - 1)\n\n    # Count digits in base 10\n    digits = []\n    for digit in str(number):\n        digits.append(int(digit, 10))\n\n    # Pad to make digits evenly divisible by 10\n    digits.append('0' * (len(digits) - len(digits) % 10))\n\n    # Apply a little bit of padding to make the final number even\n    digits.append('0' * (len(digits) % 10))\n\n    return ''.join(digits).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Begin with a guess\n    guess = int_to_roman(number)\n    # Reverse the guess, but not the letter\n    guess = re.sub('[a-z]', 'z', guess)\n    # Obtain the roman numeral string\n    roman = re.sub('[a-zA-Z]', '', guess)\n    # Remove the string from the guess\n    guess = re.sub('^', '', guess)\n    # Finally, return the guess\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number > 1000:\n        return _('to million')\n    if number < 1000:\n        return _('to million')\n    return number.letter_or_number", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return '0'\n\n    if number <= 100:\n        return number.title()\n    elif number <= 1000:\n        num = str(number)\n        try:\n            return num.lower()\n        except:\n            return num.title()\n\n    return '0'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 0:\n        number = number * -1\n    if number < 1000:\n        return number\n    if number < 100:\n        return min(number, 9) + 'x' + min(number, 8) + 'x' + \\\n               min(number, 7) + 'x' + min(number, 6) + 'x' + \\\n               min(number, 5) + 'x' + min(number, 4) + 'x' + \\\n               min(number, 3) + 'x' + min(number, 2) + 'x' + \\\n               min(number, 1)\n    return min(number, 9) + 'x' + min(number, 8) + 'x' + \\\n               min(number, 7) + 'x' + min(number, 6) + 'x' + \\\n               min(number, 5) + 'x' + min(number, 4) + 'x' + \\\n               min(number, 3) + 'x' + min(number, 2) + 'x' + \\\n               min(number, 1) + '.' + 'e' + str(number)\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return '0'\n    elif number == 1:\n        return '1'\n    elif number == 2:\n        return '2'\n    elif number == 3:\n        return '3'\n    elif number == 4:\n        return '4'\n    elif number == 5:\n        return '5'\n    elif number == 6:\n        return '6'\n    elif number == 7:\n        return '7'\n    elif number == 8:\n        return '8'\n    elif number == 9:\n        return '9'\n    elif number == 10:\n        return '10'\n    elif number == 11:\n        return '11'\n    elif number == 12:\n        return '12'\n    elif number == 13:\n        return '13'\n    elif number == 14:\n        return '14'\n    elif number == 15:\n        return '15'\n    elif number == 16:\n        return '16'\n    elif number == 17:\n        return '17'\n    elif number == 18:\n        return '18'\n    elif number == 19:\n        return '19'\n    elif number == 20:\n        return '20'\n    elif number == 21:\n        return '21'\n    elif number == 22:\n        return '22'\n    elif number == 23:\n        return '23'\n    elif number == 24:\n        return '24'\n    elif number == 25:\n        return '25'\n    elif number == 26:\n        return '", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1000:\n        return number.to_string() + 'i'\n    elif number <= 1010:\n        return number.to_string() + 'ix'\n    else:\n        return number.to_string() + 'ix'\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = abs(number)\n    if num <= 1:\n        return \"%d\" % num\n    while num > 10:\n        num = num // 10\n        num = num % 10\n    if num > 10 or num < 1:\n        return \"%d\" % num\n    # This number is too large to be a roman numeral, so we need to\n    # convert it to a string in small letters.\n    while num > 0:\n        num = num - 1\n        num = num % 10\n        num = num // 10\n    return \"%s%s\" % (str(num), str(num))\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    string = ''\n    if number < 1000:\n        string = '0' + str(number)\n    else:\n        string = str(number)\n\n    return string.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Raises an error if num < 0\n    assert num > 0\n\n    # Begin by raising an error if num is too big\n    if num >= 1000:\n        raise ValueError('Argument num must be a positive integer in [0, 1000]')\n\n    # Perform the conversion for all digits in the range (0, 9)\n    for digit in range(0, 10):\n        # If num has a single digit, we can skip the rest of the conversion\n        # and just return the number as it is\n        if num == 1:\n            break\n        # Otherwise, perform the conversion and append the resulting number to\n        # the string, returning it in lowercase\n        result = '0' + int_to_mini_roman(num / 10.0)[digit]\n        num = num % 10.0\n        result += int_to_mini_roman(num)\n\n    # Return the string\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Split numbers into base 10 prefix and suffix\n    prefix = ''\n    suffix = ''\n    num = int(number)\n    while num > 1:\n        prefix = chr(num % 10)\n        num //= 10\n        suffix = chr(num % 10)\n    # Add ending zero, if any\n    suffix = '{0}{1}'.format(prefix, suffix)\n    # Return as lowercase\n    return suffix.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # FIXME: This could probably be written more efficiently, and with\n    # more predicates\n    rnum = 0\n    for i in range(0, number):\n        rnum += int(number * pow(10, i))\n    rnum += 1\n    rnum = rnum * 9\n    rnum = str(rnum)\n    rnum = rnum.lower()\n    return rnum", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return '0' + number + '1'\n    elif number < 100:\n        return '0' + number + str(int(number / 10))\n    elif number < 1000:\n        return '0' + number + str(int(number / 100) + 10)\n    return str(number)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('You cannot enter a negative number.')\n\n    num = int(number)\n    if num < 9:\n        return num.rjust(num, '0')\n    else:\n        return num.rjust(num - 9, '0')", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n\n    number = abs(number)\n    if number <= 50:\n        return number_to_roman(int(number) - 1)\n    if number <= 1000:\n        return number_to_roman(int(number) + 1)\n    return ''", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 0:\n        return ''\n    if number < 1:\n        return '00'\n    if number < 10 or number > 1000:\n        return '00'\n    roman = '0' + str(number)\n    roman = roman.upper()\n    roman = re.sub(r'\\s+', '', roman)\n    roman = re.sub(r'[^\\d]', '', roman)\n    return roman.lower() + '.'\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"argument is negative\")\n\n    number = abs(number)\n    if number == 0:\n        return '0'\n\n    for i in range(1, number):\n        if number % 100 == 0:\n            roman_letter = number % 10 + 'a'\n        else:\n            roman_letter = number % 10 + 'A'\n        number /= 10\n        roman_letter += roman_letter[int(number)]\n\n    return roman_letter.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 0:\n        number = abs(number)\n        string = 'ix'\n        return\n    if number == 0:\n        string = ''\n        return\n    result = ''\n    for i in range(0, number):\n        result = result + i + '0'\n    result = result.lower()\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    base = 2\n    suffix = 'y'\n    ordinal = int(number)\n    base = ord(ordinal) * 10\n\n    if number == 1:\n        return \"i\"\n\n    elif number == 2:\n        return \"v\"\n\n    elif number == 3:\n        return \"m\"\n\n    elif number == 4:\n        return \"l\"\n\n    elif number == 5:\n        return \"c\"\n\n    elif number == 6:\n        return \"d\"\n\n    elif number == 7:\n        return \"e\"\n\n    elif number == 8:\n        return \"g\"\n\n    elif number == 9:\n        return \"j\"\n\n    elif number == 10:\n        return \"k\"\n\n    elif number == 11:\n        return \"l\"\n\n    elif number == 12:\n        return \"m\"\n\n    elif number == 13:\n        return \"n\"\n\n    elif number == 14:\n        return \"p\"\n\n    elif number == 15:\n        return \"q\"\n\n    elif number == 16:\n        return \"r\"\n\n    elif number == 17:\n        return \"t\"\n\n    elif number == 18:\n        return \"u\"\n\n    elif number == 19:\n        return \"x\"\n\n    return int_to_mini_roman(base + ordinal)\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # If the number is 0, we need to distinguish it from 0.0, since the\n    # roman numeral 0.0 is used for the number 0.\n    if number == 0:\n        return '0.0'\n\n    # The roman numerals start with C for centuries, S for centuries up to A\n    # and the digits that follow represent the number of years between 1900\n    # and the current year, as used in the ISO calendar.\n    # The roman numeral 0 corresponds to the year 1900.\n\n    # This code uses the following algorithm:\n    #   [ 0, 1, 2,..., 31 ] -> C\n    #   [ 1, 2, 3,..., 12 ] -> S\n    #   [ 13, 14, 15,..., 89 ] -> S\n    #   [ 90, 91, 92,..., 118 ] -> S\n    #   [ 119, 120, 121,..., 204 ] -> S\n    #   [ 205, 206, 207,..., 329 ] -> S\n    #   [ 330, 331, 332,..., 518 ] -> S\n    #   [ 519, 520, 521,..., 999 ] -> S\n    #   [ 1000, 1001, 1002,..., 2000 ] -> S\n    #   [ 2001, 2002, 2003,..., 3000 ] -> S\n    #   [ 3001,", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 0:\n        number = number * -1\n    if number <= 1000:\n        return number.zfill(2)\n    else:\n        return \"%s%s\" % (number.zfill(2), number.zfill(2))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    num = int_to_roman(num, False, False)\n    return num.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 0:\n        raise ValueError('Not a positive integer.')\n    if number == 0:\n        return '0'\n    if number == 1:\n        return '1'\n    if number == 2:\n        return '2'\n    if number == 3:\n        return '3'\n    if number == 4:\n        return '4'\n    if number == 5:\n        return '5'\n    if number == 6:\n        return '6'\n    if number == 7:\n        return '7'\n    if number == 8:\n        return '8'\n    if number == 9:\n        return '9'\n    if number == 10:\n        return '10'\n    if number == 11:\n        return '11'\n    if number == 12:\n        return '12'\n    if number == 13:\n        return '13'\n    if number == 14:\n        return '14'\n    if number == 15:\n        return '15'\n    if number == 16:\n        return '16'\n    if number == 17:\n        return '17'\n    if number == 18:\n        return '18'\n    if number == 19:\n        return '19'\n    if number == 20:\n        return '20'\n    if number == 21:\n        return '21'\n    if number == 22:\n        return '22'\n    if number == 23:\n        return '23'\n    if number == 24:\n        return '24'\n    if number ==", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return''.join([roman_num(x) for x in range(number)])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 0:\n        return '0'\n    return chr(int(number))\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_number = ''\n    if not number:\n        return ''\n\n    # We limit the number of characters in the number to two because\n    # some numbers are longer than that\n    if len(number) >= 2:\n        roman_number = str(number[0]) + str(number[1])\n    else:\n        # if the number is longer than 2 characters we need to truncate it\n        # to two characters\n        roman_number = number[:2]\n    if roman_number[-1] == 'i':\n        roman_number = roman_number[:-1]\n    if roman_number[-1] == 'ix':\n        roman_number = roman_number[:-1] + 'ii'\n    if roman_number[-1] == 'xix':\n        roman_number = roman_number[:-1] + 'iii'\n    if roman_number[-1] == 'cl':\n        roman_number = roman_number[:-1] + 'ix'\n    if roman_number[-1] == 'cii':\n        roman_number = roman_number[:-1] + 'ix'\n    if roman_number[-1] == 'ccii':\n        roman_number = roman_number[:-1] + 'ix'\n    if roman_number[-1] == 'cd':\n        roman_number = roman_number[:-1] + 'cd'\n    if roman_number[-1] == 'ccd':\n        roman_number = roman_number[:-1] + 'ccd'\n    if roman_number[-1] ==", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return '0'\n    if number < 1000:\n        return chr(ord('a') + int(number) - 1)\n    else:\n        return chr(ord('A') + int(number) - 100)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number < 1:\n        raise ValueError('Number must be at least 1')\n\n    if number % 100!= 0:\n        raise ValueError('Number must be a multiple of 100')\n\n    if number % 10!= 0:\n        raise ValueError('Number must be a multiple of 10')\n\n    if number % 1!= 0:\n        raise ValueError('Number must be a multiple of 1')\n\n    if number < 100:\n        raise ValueError('Number must be greater than 1')\n\n    if number <= 0:\n        raise ValueError('Number must be positive')\n\n    if number < 10 or number > 99:\n        raise ValueError('Number must be in the range 1 - 99')\n\n    if number >= 1000:\n        raise ValueError('Number must be in the range 1 - 1000')\n\n    if len(str(number)) == 1:\n        return str(number).lower()\n\n    if len(str(number)) == 2:\n        return str(number)[:2].lower()\n\n    if len(str(number)) == 3:\n        return str(number)[:3].lower()\n\n    if len(str(number)) == 4:\n        return str(number)[:4].lower()\n\n    if len(str(number)) == 5:\n        return str(number)[:5].lower()\n\n    if len", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return\n\n    if number < 1000:\n        num_to_roman = int_to_roman\n        num_to_lower = num_to_roman.lower\n        return num_to_lower(number)\n\n    num_to_roman = number_to_roman\n    num_to_lower = num_to_roman.lower\n    num_to_roman = num_to_roman.upper\n    num_to_roman = num_to_roman.title()\n    num_to_roman = num_to_roman.replace('_','')\n    num_to_roman = num_to_roman.replace(' ', '_')\n    num_to_roman = num_to_roman.replace(',', '').strip(' ').replace(' ','')\n    num_to_roman = num_to_roman.replace('.', '')\n    num_to_roman = num_to_roman.replace(',', '')\n    num_to_roman = num_to_roman.strip('.')\n    num_to_roman = num_to_roman.strip(',').strip(' ').strip(' ').strip(' ')\n    num_to_roman = num_to_roman.strip()\n    num_to_roman = num", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if len(number) < 2:\n        raise ValueError(\"length too short (%d)\" % len(number))\n\n    # -1 for zero\n    if number == 0:\n        return '0'\n    # 0 for one\n    if number == 1:\n        return '1'\n    # 1 for ten\n    if number == 10:\n        return '10'\n    # n for 100\n    if number >= 1000:\n        return '%d%d' % (int_to_mini_roman(number // 100), int_to_mini_roman(number % 100))\n\n    return number.replace('0', '').lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Initialize\n    roman_number = \"\"\n    if number == 0:\n        return roman_number\n\n    # Get an integer representation of the number.\n    number_representation = int(number)\n\n    # Make the integer representation lowercase.\n    number_representation = number_representation.lower()\n\n    # Make a list of roman numerals from the integer representation.\n    roman_numbers = [\n        \"one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one twenty two twenty three twenty four twenty five twenty six twenty seven twenty eight twenty nine twenty ten thirtysix thirty seven thirty eight thirty nine thirty ten thirty eleven thirty twelve thirty thirteen thirty fourteen thirty fifteen thirty sixteen thirty seventeen thirty eighteen thirty nineteen thirty twenty one thirty two thirty three thirty four thirty five thirty six thirty seven thirty eight thirty nine thirty ten thirty eleven thirty twelve thirty thirteen thirty fourteen thirty fifteen thirty sixteen thirty seventeen thirty eighteen thirty nineteen thirty twenty one thirty two thirty three thirty four thirty five thirty six thirty seven thirty eight thirty nine thirty ten thirty eleven thirty twelve thirty thirteen thirty fourteen thirty fifteen thirty sixteen thirty seventeen thirty eighteen thirty nineteen thirty twenty one thirty two thirty three thirty four thirty five thirty six thirty seven thirty eight thirty nine thirty ten thirty eleven thirty twelve thirty thirteen thirty fourteen", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return '0'\n    if number > 1000:\n        raise RuntimeError('Value exceeds 1000')\n    result = '0'\n    for i in range(number // 10):\n        result += '0' * (number % 10)\n    if number % 10:\n        result += '0' * (number % 10)\n    result = result.lower()\n    result += number // 10\n    return result", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    if number < 2:\n        return '0'\n    if number < 3:\n        return '1'\n    if number < 6:\n        return '2'\n    if number < 9:\n        return '3'\n    if number < 12:\n        return '4'\n    if number < 14:\n        return '5'\n    if number < 16:\n        return '6'\n    if number < 18:\n        return '7'\n    if number < 22:\n        return '8'\n    if number < 24:\n        return '9'\n    if number < 28:\n        return 'a'\n    if number < 30:\n        return 'b'\n    if number < 34:\n        return 'c'\n    if number < 36:\n        return 'd'\n    if number < 38:\n        return 'e'\n    if number < 40:\n        return 'f'\n    if number < 44:\n        return 'g'\n    if number < 48:\n        return 'h'\n    if number < 50:\n        return 'i'\n    if number < 54:\n        return 'j'\n    if number < 56:\n        return 'k'\n    if number < 58:\n        return 'l'\n    if number < 60:\n        return'm'\n    if number < 64:\n        return 'n'\n    if number < 66:\n        return 'o'\n    if number < 68:\n        return 'p'\n    if number <", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 0:\n        number = abs(number)\n    result = ''\n    for character in number:\n        result += chr(int(character) % 26)\n    return result.lower() + 'i'\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # special case\n    if number == 0:\n        return '0'\n    # we want to avoid the case of negative numbers, so leave that for another method\n    if number < 0:\n        raise ValueError('numbers greater than 0 are allowed')\n\n    # get the base of our system\n    num_base = 0\n    if type(number) is int:\n        num_base = 10\n    elif type(number) is float:\n        num_base = 10\n    elif type(number) is str:\n        num_base = int(number)\n\n    # now the array to hold the roman numeral base\n    roman_base = [num_base * i for i in range(0, len(num_base), 2)]\n\n    # now the array to hold the roman numeral digits\n    roman_digits = [int(num_base * i) for i in range(0, len(roman_base), 2)]\n\n    return ''.join(roman_base + roman_digits)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if (number < 1):\n        return \"\"\n    digits = str(number).split(\".\")\n    digits = list(map(int, digits))\n    if len(digits)!= 1:\n        return \"\"\n    digits[0] = digits[0].lower()\n    return digits[0]\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number < 1:\n        return '0'\n    elif number == 1:\n        return '1'\n    elif number == 2:\n        return '2'\n    elif number == 3:\n        return '3'\n    elif number == 4:\n        return '4'\n    elif number == 5:\n        return '5'\n    elif number == 6:\n        return '6'\n    elif number == 7:\n        return '7'\n    elif number == 8:\n        return '8'\n    elif number == 9:\n        return '9'\n    elif number == 10:\n        return 'X'\n    elif number == 11:\n        return 'Xi'\n    elif number == 12:\n        return 'Xii'\n    elif number == 13:\n        return 'Xiii'\n    elif number == 14:\n        return 'XIV'\n    elif number == 15:\n        return 'V'\n    elif number == 16:\n        return 'V'\n    elif number == 17:\n        return 'Vii'\n    elif number == 18:\n        return 'VII'\n    elif number == 19:\n        return 'VIII'\n    elif number == 20:\n        return 'IX'\n    elif number == 21:\n        return 'Xviii'\n    elif number == 22:\n        return 'XC'\n    elif number == 23:\n        return 'Xxi'\n    elif number == 24:\n        return 'X'\n    elif number == 25:\n        return 'Xii'\n    elif number == 26:\n        return 'Xiii'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # this is a generic implementation for all the valid roman numerals\n    # this would be much faster using the NumPy library\n    # we could use a NumPy array, but the range is usually small\n    roman = \"\"\n    for i in range(len('0123456789')):\n        if number < 1000:\n            roman += '%d%s' % (int(number), 'i')\n        else:\n            roman += '%d%s' % (int(number / 1000), 'i')\n        number /= 1000\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return ''.join(map(chr, [chr(roman(x)) for x in number.split('')]))\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    digits = str(number).count('0123456789')\n    if digits == 0:\n        return '0'\n    elif digits == 1:\n        return '1'\n    elif digits == 2:\n        return '2'\n    else:\n        return str(number)[2:]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return ''.join([int(number) for number in list(number)])[0].lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # https://en.wikipedia.org/wiki/Roman_numeral\n    #, it is not very accurate, so we do it the old way\n    return ''.join([chr(int(i) * 10) for i in number])[0].lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Please enter a positive integer!')\n    if number == 1:\n        return str(number) +'xix'\n    elif number == 2:\n        return str(number) +'clii'\n    elif number == 3:\n        return str(number) +'cci'\n    elif number == 4:\n        return str(number) +'dddxvi'\n    elif number == 5:\n        return str(number) +'ddddvi'\n    elif number == 6:\n        return str(number) +'dddddvi'\n    elif number == 7:\n        return str(number) +'dddddddvi'\n    elif number == 8:\n        return str(number) +'dddddddddvi'\n    elif number == 9:\n        return str(number) +'dddddddddddvi'\n    elif number == 10:\n        return str(number) +'dddddddddddddvi'\n    elif number == 11:\n        return str(number) +'dddddddddddddddvi'\n    elif number == 12:\n        return str(number) +'dddddddddddddddvi'\n    elif number == 13:\n        return str(", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not number:\n        return ''\n    return \"\".join(map(str, map(int, [number // 10, int(number // 100)])) + \"i\")</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1000:\n        return number\n    elif number >= 100:\n        return int_to_mini_roman(number / 10) + \".\" + \\\n            int_to_mini_roman(number % 10)\n    elif number >= 10:\n        return int_to_mini_roman(number / 100) + \".\" + \\\n            int_to_mini_roman(number % 100)\n    else:\n        return number\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number > 1000:\n        return '...'\n    else:\n        return '0' + number", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 0:\n        raise ValueError('negative numbers are not supported')\n\n    roman_number = number\n    for i in range(len(roman_number)):\n        roman_number[i] = roman_number[i].lower()\n\n    return roman_number", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Runs from 1 to 1000, as that is the first limit of the integer type\n    min_val = 1\n    while min_val <= number:\n        if number % 10 == 0:\n            num = number / 10\n        else:\n            num = number % 10\n        return str(int_to_roman(num))\n    return ''", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return re.sub(r'(\\d+)\\s*([cefghjklmnopqrstvwxyzABCDEFGHJKLMNOPQRSTVWXYZ]+)', r'\\1 \\2', str(number))\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num <= 100:\n        return str(num) + 'IX'\n    elif num < 1000:\n        return str(num) + 'I' + str(num % 100)\n    else:\n        return str(num) + 'X'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num == 0 or num == 1:\n        return \"0\"\n    if num in [int(x) for x in \"IIIIIIIIIII\"]:\n        return x\n    elif num in [int(x) for x in \"IVIVIVIVIV\"]:\n        return x + \"i\"\n    elif num in [int(x) for x in \"VIVIVIVI\"]:\n        return x + \"o\"\n    elif num in [int(x) for x in \"VV\"]:\n        return x + \"x\"\n    elif num in [int(x) for x in \"I\"]:\n        return x + \"i\"\n    elif num in [int(x) for x in \"II\"]:\n        return x + \"ii\"\n    elif num in [int(x) for x in \"III\"]:\n        return x + \"iii\"\n    elif num in [int(x) for x in \"IV\"]:\n        return x + \"iii\"\n    elif num in [int(x) for x in \"VI\"]:\n        return x + \"iii\"\n    elif num in [int(x) for x in \"VVVI\"]:\n        return x + \"v\"\n    elif num in [int(", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 0:\n        return ''\n    if number <= 1:\n        return '0' + str(number)\n    else:\n        minu = number // 10\n        divisor = number % 10\n        return str(minu) + str(divisor) + str(minu * 100) + str(divisor * 10)\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num < 1000:\n        return _roman_to_mini_roman(num)\n    elif num < 900:\n        return 'xi'\n    elif num < 700:\n        return 'xii'\n    elif num < 500:\n        return 'iii'\n    elif num < 400:\n        return 'iv'\n    elif num < 300:\n        return 'vi'\n    elif num < 200:\n        return 'vii'\n    elif num < 100:\n        return 'v'\n    elif num < 50:\n        return 'i'\n    elif num < 10:\n        return 'b'\n    else:\n        return '0'\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 0:\n        raise ValueError('negative integer not allowed')\n\n    if number <= 6:\n        return str(number)\n    else:\n        return str(int_to_mini_roman(number-1))[:2] + \\\n            str(int_to_mini_roman(number-2))[2:] + \\\n            str(int_to_mini_roman(number-3))[3:] + \\\n            str(int_to_mini_roman(number-4))[4:] + \\\n            str(int_to_mini_roman(number-5))[5:] + \\\n            str(int_to_mini_roman(number-6))[6:]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return '1'\n    elif number < 10:\n        return '0' + int_to_mini_roman(number - 1)\n    elif number < 100:\n        return '0' + int_to_mini_roman(int(number / 10))\n    else:\n        return '0' + int_to_mini_roman(int(number / 100) + 1) + int_to_mini_roman(number % 100)\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1:\n        return \"1\"\n    if number <= 100:\n        return \"%d\"%number\n    if number <= 1000:\n        return \"%d\"%int_to_mini_roman(int(number/1000))+\"%a\"%int_to_mini_roman(int(number/100) % 10)\n\n    raise ValueError(\"integer too large or too small\")", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if (number < 0):\n        return \"\"\n    if (number < 10):\n        return \"0\"\n    if (number > 9):\n        return \"9\"\n    if (number < 100):\n        return str(number)\n    r = \"\"\n    for i in range(1, number + 1):\n        r = r + str(int(number) % 10)\n    return r\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return 0\n    elif number < 0:\n        return '0' + int_to_mini_roman(abs(number))\n    elif number == 1:\n        return 'iv'\n    elif number == 2:\n        return 'vi'\n    elif number == 3:\n        return 'vii'\n    elif number == 4:\n        return 'ix'\n    elif number == 5:\n        return 'xi'\n    elif number == 6:\n        return 'xii'\n    elif number == 7:\n        return 'iii'\n    elif number == 8:\n        return 'iv'\n    elif number == 9:\n        return 'v'\n    elif number == 10:\n        return 'vi'\n    elif number == 11:\n        return 'vii'\n    elif number == 12:\n        return 'viii'\n    elif number == 13:\n        return 'ix'\n    elif number == 14:\n        return 'xi'\n    elif number == 15:\n        return 'xii'\n    elif number == 16:\n        return 'iii'\n    elif number == 17:\n        return 'iv'\n    elif number == 18:\n        return 'v'\n    elif number == 19:\n        return 'vi'\n    elif number == 20:\n        return 'vii'\n    elif number == 21:\n        return 'viii'\n    elif number == 22:\n        return 'ix'\n    elif number == 23:\n        return 'xi'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    max = 10000\n    max_i = 1000\n    if number < 1:\n        return '00'\n    if number < max:\n        return ''\n    if number > max_i - max:\n        return ''\n    min = 1000\n    min_i = 0\n    while number >= min and number < min_i and min_i < max_i and min_i < 1000:\n        min_i += 1\n    while number >= min and number < min_i and min_i < max_i and min_i < 1000:\n        min_i += 1\n    while number >= min:\n        min_i += 1\n    if number < min_i:\n        return ''\n    elif number >= min_i:\n        return 'xix'\n    elif number >= min_i + 1:\n        return 'xlvi'\n    elif number >= min_i + 2:\n        return 'xlvii'\n    elif number >= min_i + 3:\n        return 'xlviii'\n    elif number >= min_i + 4:\n        return 'xlix'\n    elif number >= min_i + 5:\n        return 'xlix'\n    elif number >= min_i + 6:\n        return 'xlix'\n    elif number >= min_i + 7:\n        return 'xlix'\n    elif number >= min_i + 8:\n        return 'xlix'\n    elif number >= min_i + 9:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral = ''\n    while number >= 0:\n        roman_numeral += chr(number % 26)\n        number /= 26\n    roman_numeral = roman_numeral.lower()\n    return roman_numeral", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return re.sub(\"([1-9])\", r\"\\1i\", re.sub(r\"([1-9])\", r\"\\1i\", number)).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    num = abs(number)\n    if num <= 1000:\n        return number + 'xix'\n    else:\n        return number + 'clii'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    for i in range(1, number+1):\n        if number % 100 == 0:\n            return 'xxx' + str(number)\n        elif number % 10 == 0:\n            return 'ix' + str(number)\n        elif number % 5 == 0:\n            return 'vi' + str(number)\n        elif number % 2 == 0:\n            return 'i' + str(number)\n        elif number % 1 == 0:\n            return 'o' + str(number)\n    return str(number)\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # FIXME: use the standard library instead\n    if number < 1:\n        return '.'\n\n    # Should be a multiple of two, but this number of digits is\n    # a little excessive.\n    max_digits = 9\n\n    # First, we'll convert the number to base 10.\n    base_digit = 10 * int(number / 10)\n    number %= 10\n\n    # Now, we'll try to determine the actual number of digits by using\n    # the maximum number of digits in the base 10 representation.\n    for i in xrange(max_digits + 1):\n        digit = int(base_digit ** i)\n\n        # See if there are any more digits in the number, so that we\n        # don't have to go through all the work of this loop.\n        if digit > number:\n            break\n\n        # Now, we can check if there is a second digit in the number.\n        second_digit = int(digit ** i)\n\n        # If so, we'll increase the number of digits by one.\n        if second_digit > number:\n            break\n\n        # We got to the maximum number of digits, so we can exit\n        # this loop, as we've exceeded the maximum.\n        break\n\n    # Now, we'll need to find the remainder of the number that we\n    # haven't already calculated", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if (number <= 1000):\n        return number.lower() + 'ix'\n    else:\n        return number.lower() + 'l'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not number:\n        return None\n    if number < 0:\n        return '-' + str(number)\n    return number.zfill(4) + 'x'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n\n    num_to_roman = {\n        1: 'unisyllabic',\n        2: 'dicyllabic',\n        3: 'dicyllabic with semicolon',\n        4: 'dicyllabic with colon',\n        5: 'dicyllabic with semicolon and colon',\n        6: 'dicyllabic with ligature',\n        7: 'dicyllabic with ligature and colon',\n        8: 'dicyllabic with ligature and semicolon',\n        9: 'dicyllabic with ligature and colon and semicolon',\n        10: 'dicyllabic with ligature and colon and semicolon and dot',\n        11: 'dicyllabic with ligature and colon and semicolon and dot and semicolon',\n        12: 'dicyllabic with ligature and colon and semicolon and dot and semicolon and dot',\n        13: 'dicyllabic with ligature and colon and semicolon and dot and semicolon and dot and dot',\n        14: 'dicyllabic with ligature and colon and semicolon and dot and semicolon and dot and dot and dot',\n        15: 'dicyllabic with ligature and colon and sem", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    for num in range(1,int(number)):\n        roman = roman + chr(int(number)%26)\n        number = number / 26\n    return roman.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1000:\n        return number.title().lower()\n\n    elif number <= 1000:\n        return number.title()\n\n    elif number <= 10000:\n        return number.title().split(' ')[0].lower()\n\n    elif number <= 100,000:\n        return number.title().split(' ')[1].lower()\n\n    elif number <= 1000000:\n        return number.title().split(' ')[2].lower()\n\n    elif number <= 100000000:\n        return number.title().split(' ')[3].lower()\n\n    elif number <= 1000000000:\n        return number.title().split(' ')[4].lower()\n\n    elif number <= 100000000000:\n        return number.title().split(' ')[5].lower()\n\n    elif number <= 100000000000000:\n        return number.title().split(' ')[6].lower()\n\n    elif number <= 1000000000000000:\n        return number.title().split(' ')[7].lower()\n\n    elif number <= 100000000000000000:\n        return number.title().split(' ')[8].lower()\n\n    elif number <= 1000000000000000000:\n        return number.title().split(' ')[9].lower()\n\n    elif number <= 100000000000000000,000:\n        return number.title", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # ignore negative numbers\n    if not number:\n        return ''\n\n    # We're looking for a string that starts with the letter x and ends with a\n    # digraph that starts with the letter i. We then break the string into two\n    # strings, one that starts with the letter x and ends with a digraph that\n    # starts with the letter i, and one that starts with the letter i and ends\n    # with a digraph that starts with the letter x. We then use the reverse\n    # function to build the corresponding number in the original string.\n    x = number[0]\n    i = number[1]\n    if not i:\n        return x\n    if not x:\n        return i\n    if i == i:\n        return i\n    return ''.join([int_to_mini_roman(x) for x in reversed([i, i])])", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    try:\n        size = len(number)\n        l = [chr(c) for c in number]\n        a = l[0:size]\n        if size == 1:\n            a = a[0:1]\n        else:\n            a = a[0:1]\n            b = l[size - 1]\n            c = a[size - 2]\n            if size > 2:\n                if c == '0' and size > 3:\n                    if b == '0' and size > 4:\n                        a = '0' + b\n                    else:\n                        a = '0' + b + c\n                    size -= 4\n                else:\n                    if b == '0' and size > 4:\n                        b = '0' + c\n                    else:\n                        b = '0' + c + b\n                    size -= 4\n            else:\n                b = '0' + c\n                c = '0' + b\n    except TypeError:\n        # We can't use len() or any other str.format() method on a unicode\n        # type, so we just return the string as is\n        return str(number)\n    # Resize the array to length of max miniorum roman numeral\n    array = ''.join(c.upper() for c in a)\n    array = array[0:size].lower().replace('-','').replace('x', '')\n    # Remove the leading space\n    array = array.", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if not isinstance(number, int):\n        return number\n\n    if number < 0:\n        number = -number\n    number = abs(number)\n    if number == 0:\n        return '0'\n\n    if number == 1:\n        return '0'\n\n    if number == 2:\n        return '0' + '1'\n\n    if number == 3:\n        return '0' + '2'\n\n    if number == 4:\n        return '0' + '3'\n\n    if number == 5:\n        return '0' + '4'\n\n    if number == 6:\n        return '0' + '5'\n\n    if number == 7:\n        return '0' + '6'\n\n    if number == 8:\n        return '0' + '7'\n\n    if number == 9:\n        return '0' + '8'\n\n    if number == 10:\n        return '0' + '9'\n\n    if number == 11:\n        return '0' + 'a'\n\n    if number == 12:\n        return '0' + 'b'\n\n    if number == 13:\n        return '0' + 'c'\n\n    if number == 14:\n        return '0' + 'd'\n\n    if number == 15:\n        return '0' + 'e'\n\n    if number == 16:\n        return '0' + 'f'\n\n    if number == 17:\n        return '0' + 'g'\n\n    if number == 18:\n        return '0' + 'h'\n\n    if number == 19:\n        return '0' + 'i'\n\n    if number == 20:\n        return '0' + 'j'\n\n    if number == 21:\n        return", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return ''.join(c for c in str(number) if c in MINI_ROMAN_CHARS)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num <= 1000:\n        return chr(int(num//10) + '00' + int(num%10))\n\n    if num <= 100:\n        return chr(int(num//100) + '0' + int(num%100))\n\n    return chr(int(num) + '0')", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return _roman_numbers.get(number, str(number))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Convert into lowercase so we can read them easily.\n    number = str(number)\n    # Perform a regular expression search for an 'x' so we can use it as a\n    # wildcard.\n    x = re.compile(r'x')\n    # Check to see if there is a match.\n    x.search(number)\n    # Replace all instances of the x with the appropriate roman numeral.\n    return x.sub(number.lower(), number)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return''.join(map(str, range(min(number, 1000), num)))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    num = int(number)\n    if num <= 2:\n        return '0' + str(num)\n    else:\n        return '0' * (num - 3) + str(num % 10)\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 0:\n        raise ValueError('Invalid input')\n\n    if number == 0:\n        return ''\n    if number == 1:\n        return 'ix'\n    elif number == 2:\n        return 'ii'\n    elif number == 3:\n        return 'ix'\n    elif number == 4:\n        return 'ix'\n    elif number == 5:\n        return 'ii'\n    elif number == 6:\n        return 'ix'\n    elif number == 7:\n        return 'ii'\n    elif number == 8:\n        return 'ix'\n    elif number == 9:\n        return 'ix'\n    elif number == 10:\n        return 'ix'\n    elif number == 11:\n        return 'ii'\n    elif number == 12:\n        return 'ix'\n    elif number == 13:\n        return 'ix'\n    elif number == 14:\n        return 'ii'\n    elif number == 15:\n        return 'ix'\n    elif number == 16:\n        return 'ix'\n    elif number == 17:\n        return 'ix'\n    elif number == 18:\n        return 'ix'\n    elif number == 19:\n        return 'xix'\n    elif number == 20:\n        return 'ix'\n    elif number == 21:\n        return 'ix'\n    elif number == 22:\n        return 'ix'\n    elif number == 23:\n        return 'ix'\n    elif number == 24", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number < 1000:\n        number = int(number)\n        number = number % 10\n        return number + ('x' * (int(number) % 10)) + ('x' * (int(number) / 10))\n    else:\n        raise ValueError('int_to_mini_roman must be called on a positive number!')", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return \"\"\n\n    if number < 1000:\n        return (int_to_mini_roman(int(number))).lower()\n\n    if number < 100:\n        return (int_to_mini_roman(int(number) + 1)).lower()\n\n    if number < 10:\n        return int_to_mini_roman(number).lower()\n\n    return \"\"", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return \"0*\"\n    if number == 1:\n        return \"1\"\n    if number == 2:\n        return \"2-\"\n    if number == 3:\n        return \"3-\"\n    if number == 4:\n        return \"4-\"\n    if number == 5:\n        return \"5-\"\n    if number == 6:\n        return \"6-\"\n    if number == 7:\n        return \"7-\"\n    if number == 8:\n        return \"8-\"\n    if number == 9:\n        return \"9-.\"\n    if number == 10:\n        return \"10-.\"\n    if number == 11:\n        return \"11-.\"\n    if number == 12:\n        return \"12-.\"\n    if number == 13:\n        return \"13-.\"\n    if number == 14:\n        return \"14-.\"\n    if number == 15:\n        return \"15-.\"\n    if number == 16:\n        return \"16-.\"\n    if number == 17:\n        return \"17-.\"\n    if number == 18:\n        return \"18-.\"\n    if number == 19:\n        return \"19-.\"\n    if number == 20:\n        return \"20-.\"\n    if number == 21:\n        return \"21-.\"\n    if number == 22:\n        return \"22-.\"\n    if number ==", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    string = []\n    for i in range(1, number+1):\n        string.append(int_to_roman(i))\n    return string[0].lower() + \"s\" + string[len(string)-1].lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return \"\".join(map(re.escape, list(re.findall(r\"(\\d{4})[ivxIVvXv]?\", str(number))))).lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return '0'\n    elif number == 1000:\n        return 'ix'\n    elif number == 100:\n        return 'v'\n    elif number == 50:\n        return 'vi'\n    elif number == 25:\n        return 'cxv'\n    elif number == 20:\n        return 'ix'\n    elif number == 15:\n        return 'v'\n    elif number == 10:\n        return 'vi'\n    elif number == 5:\n        return 'ix'\n    elif number == 3:\n        return 'ix'\n    elif number == 2:\n        return 'vi'\n    elif number == 1:\n        return 'ix'\n    elif number == 4:\n        return 'ix'\n    elif number == 6:\n        return 'ix'\n    elif number == 7:\n        return 'ix'\n    elif number == 8:\n        return 'ix'\n    elif number == 9:\n        return 'ix'\n    elif number == 1:\n        return 'ix'\n    elif number == 6:\n        return 'ix'\n    elif number == 8:\n        return 'ix'\n    elif number == 9:\n        return 'ix'\n    elif number == 10:\n        return 'ix'\n    elif number == 13:\n        return 'ix'\n    elif number == 14:\n        return 'ix'\n    elif number == 15:\n        return 'ix'\n    elif number == 19:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 0:\n        return \"-\"\n    elif number == 0:\n        return \"0\"\n    elif number == 1:\n        return \"1\"\n    elif number == 2:\n        return \"2\"\n    elif number == 3:\n        return \"3\"\n    elif number == 4:\n        return \"4\"\n    elif number == 5:\n        return \"5\"\n    elif number == 6:\n        return \"6\"\n    elif number == 7:\n        return \"7\"\n    elif number == 8:\n        return \"8\"\n    elif number == 9:\n        return \"9\"\n    elif number == 10:\n        return \"a\"\n    elif number == 11:\n        return \"b\"\n    elif number == 12:\n        return \"c\"\n    elif number == 13:\n        return \"d\"\n    elif number == 14:\n        return \"e\"\n    elif number == 15:\n        return \"f\"\n    elif number == 16:\n        return \"g\"\n    elif number == 17:\n        return \"h\"\n    elif number == 18:\n        return \"i\"\n    elif number == 19:\n        return \"j\"\n    elif number == 20:\n        return \"k\"\n    elif number == 21:\n        return \"l\"\n    elif number == 22:\n        return \"m\"\n    elif number == 23:\n        return \"n\"\n    elif number == 24:\n        return \"o\"\n    elif number == 25:\n        return \"p\"\n    elif number == 26:\n        return \"q\"\n    elif number == 27:\n        return \"r\"", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    s = ''\n    for i in range(1, number):\n        s += chr(int(number / 10 ** i))\n    return s.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if len(number) <= 1:\n        return number\n    if number <= 1000:\n        return str(number)\n    return''.join([int_to_mini_roman(i) for i in range(1, number + 1)]) + 'ix'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Exponential notation for 100 and above:\n    if number < 100:\n        num = int(math.log(number, 2) / math.log(10, 2))\n    else:\n        num = int(math.log(number, 2) / math.log(10, 2) * 100)\n\n    # Now we need to take the integers from the decimal to the decimal plus 1.\n    # First try to find the decimal number between the first and last digits.\n    # If no decimal number is found, then we can use the first digit of the\n    # integer, which is the decimal number (with a minus sign, not the zero).\n    # If the decimal number is found, then we can just round up to the next\n    # digit.\n    if num > 0:\n        decimal_number = num - int(num.split('')[0])\n        num = float(num.split('')[1])\n    else:\n        decimal_number = 0\n        num = 1\n\n    # Now, the tricky part. Convert the decimal number to a string.\n    if decimal_number == 0:\n        return ''\n    elif decimal_number == 1:\n        return '0' + int_to_mini_roman(num)\n    else:\n        string = string_from_hex(decimal_number)\n        string = string[:-1]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return ''.join(c for c in re.sub(r'\\d', '', str(number)).lower()\n               if c in MINI_TO_ROMAN_CHARS)\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Since the input may be larger than 1000, we have to handle it with a\n    # separate loop for each possible value up to 1000.\n    # We also limit the input to the range of the PL/GS3 ROMs.\n    if len(number) < 1:\n        return ''\n    if number > 1000:\n        raise ValueError('Input larger than 1000')\n    if number <= 0:\n        raise ValueError('Input negative')\n    for i in range(1, number + 1):\n        if number % i == 0:\n            return chr(number / i) + chr(i + 2)\n    return ''", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    result = ''\n    # Use the quickest way to represent the number in the form of a\n    # single letter. This is not perfect, but it's faster than\n    # int_to_roman().\n    for letter in range(1, len(str(number))):\n        result += letter\n    return result.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number <= 1000:\n        return number.upper() + number\n    else:\n        return int_to_roman(int(number) + 1)[2:]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    out = []\n    for num in range(1, int(number), 3):\n        out.append(str(num))\n    out.reverse()\n    return ''.join(out)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1:\n        return str(number) + 'ix'\n\n    if number < 100:\n        return str(number) + xrange(0, 9)[int(number / 100) % 9] + 'ix'\n    else:\n        return xrange(0, 9)[int(number / 100) % 9][int(number / 10) % 10] + 'ix'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1000:\n        return number + 'i'\n    return number + 'a' + str(number / 10) + str(number % 10)\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if int(number) <= 0:\n        return str(number)\n    return str(int_to_roman(number))[:2]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return \"\"\n    if number < 100:\n        return \"%02d\" % number\n    return \"%02d\" % (int(number // 10) * 10 + int(number % 10) + 1)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    string = ''\n    if number < 1:\n        return string\n    for i in range(1, int(number), 1):\n        string += chr(int(number % 10) * 10 + int(number // 10) % 10)\n    return string.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Get the base 10 logarithm of number.\n    # e.g. 9.7610^-12 -> 2.718281828459045\n    log_number = math.log(number)\n\n    # Extract digits from the log_number.\n    # e.g. [2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 0:\n        raise ValueError('number cannot be negative')\n    if number < 1:\n        raise ValueError('number cannot be less than 1')\n    if number == 1:\n        return 'X'\n    elif number == 2:\n        return 'Xi'\n    elif number == 3:\n        return 'II'\n    elif number == 4:\n        return 'III'\n    elif number == 5:\n        return 'IV'\n    elif number == 6:\n        return 'V'\n    elif number == 7:\n        return 'VI'\n    elif number == 8:\n        return 'XVII'\n    elif number == 9:\n        return 'VIII'\n    elif number == 10:\n        return 'IX'\n    elif number == 11:\n        return 'X'\n    elif number == 12:\n        return 'XII'\n    elif number == 13:\n        return 'XIII'\n    elif number == 14:\n        return 'XIV'\n    elif number == 15:\n        return 'XV'\n    elif number == 16:\n        return 'XVI'\n    elif number == 17:\n        return 'XVII'\n    elif number == 18:\n        return 'XVIII'\n    elif number == 19:\n        return 'XX'\n    elif number == 20:\n        return 'XXI'\n    elif number == 21:\n        return 'XXII'\n    elif number == 22:\n        return 'XXIII'\n    elif number == 23:\n        return", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    for k in range(1, 6):\n        if number % k == 0:\n            break\n    else:\n        raise ValueError('Number must be a divisor of the number of letters')\n    for i in range(len(strings[k])):\n        if number % i == 0:\n            return strings[k][i].lower()\n    else:\n        raise ValueError('Number must be a divisor of the number of letters')", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number < 0:\n        return \"\"\n\n    max_number = max(1, number)\n    if max_number == 0:\n        return \"\"\n\n    # 0 = ZERO\n    if number == 0:\n        return \"0.\"\n\n    # 1 = ONE\n    if number == 1:\n        return \"1.\"\n\n    # 2 = TWO\n    if number == 2:\n        return \"2.\"\n\n    # 3 = THREE\n    if number == 3:\n        return \"3.\"\n\n    # 4 = FOUR\n    if number == 4:\n        return \"4.\"\n\n    # 5 = FIVE\n    if number == 5:\n        return \"5.\"\n\n    # 6 = SIX\n    if number == 6:\n        return \"6.\"\n\n    # 7 = SEVEN\n    if number == 7:\n        return \"7.\"\n\n    # 8 = EIGHT\n    if number == 8:\n        return \"8.\"\n\n    # 9 = NINE\n    if number == 9:\n        return \"9.\"\n\n    # 10 = TEN\n    if number == 10:\n        return \"10.\"\n\n    # 11 = ONTHOUSAND\n    if number == 11:\n        return \"one.\"\n\n    # 12 = THOUSAND\n    if number == 12:\n        return \"two.\"\n\n    # 13 = ONE HUNDRED\n    if number == 13:", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 0:\n        return ''\n    num = int(number)\n    if num <= 7:\n        return ''\n    num = num % 10\n    return num + 'x' + (num // 10)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return re.sub(r\"^\\d+\", \"\", str(number)) + \"vi\"", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Get the exact value of the number we are parsing.\n    number = int(number)\n    if number < 1:\n        return ''\n    if number < 100:\n        return int_to_mini_roman(number)\n    return str(number)[0:2] + string.digits[number % 10] + str(number/10)[2:]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    for i in range(1, 1000):\n        if number % 10 == 0:\n            string = '%s%s' % (i, i)\n        else:\n            string = '%s%0d' % (i, number % 10)\n        if number % 10 == 0:\n            return '%s%s' % (string, i)\n        else:\n            return '%s%0d' % (string, number % 10)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = int(number)\n    if num < 1:\n        return '0'\n    elif num <= 1000:\n        return num_to_roman(num)\n    else:\n        raise ValueError('Invalid integer.')\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    for letter in r'abcdefghijklmnopqrstuvwxyz':\n        if letter in number:\n            return letter + '.' + str(number % 10)\n    return ''", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    string = \"i\" if number < 10 else \"X\"\n    return string + int_to_mini_roman(int(number))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 0:\n        raise ValueError('Input number must be non-negative.')\n\n    if number == 0:\n        return '0'\n\n    if number < 1:\n        return '0'\n\n    if number == 1:\n        return '1'\n\n    if number == 2:\n        return '2'\n\n    if number == 3:\n        return '3'\n\n    if number == 4:\n        return '4'\n\n    if number == 5:\n        return '5'\n\n    if number == 6:\n        return '6'\n\n    if number == 7:\n        return '7'\n\n    if number == 8:\n        return '8'\n\n    if number == 9:\n        return '9'\n\n    if number == 10:\n        return 'A'\n\n    if number == 11:\n        return 'B'\n\n    if number == 12:\n        return 'C'\n\n    if number == 13:\n        return 'D'\n\n    if number == 14:\n        return 'E'\n\n    if number == 15:\n        return 'F'\n\n    if number == 16:\n        return 'G'\n\n    if number == 17:\n        return 'H'\n\n    if number == 18:\n        return 'I'\n\n    if number == 19:\n        return 'J'\n\n    if number == 20:\n        return 'K'\n\n    if number == 21:\n        return 'L'\n\n    if number == 22:\n        return 'M'\n\n    if number == 23:\n        return 'N'\n\n    if number == 24:\n        return 'O'\n\n    if number == 25:\n        return 'P'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        raise ValueError('Only positive integers are allowed.')\n    if number > 1000:\n        raise ValueError('Only numbers up to 1000 are allowed.')\n    roman_num = 'roman[%d]' % number\n    if len(roman_num) == len(roman_num[0]):\n        return roman_num\n    else:\n        return roman_num[0].lower() + roman_num[1:]\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    min = 1\n    num = int(number)\n    while num > 0:\n        max = min + 3\n        if num >= (2**max):\n            min = max - 3\n        else:\n            max -= 2\n            num -= 2**max\n            if num < min:\n                min = num\n            else:\n                max += 1\n\n    return \"\".join(reversed([int_to_roman(n) for n in range(min, max)]))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1:\n        return ''\n    return chr(number)[2:].lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', '", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not number:\n        return ''\n\n    # count the number of digits\n    digits = 0\n    while number > 0:\n        number -= 1\n        digits += 1\n\n    # return the appropriate roman numeral\n    if number == 0:\n        return ''\n    elif digits == 1:\n        return ('0' + number)[-2:]\n    elif digits == 2:\n        return ('0' + number)[:-2]\n    else:\n        return number + ('0' + number)[:-2]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return \"NaN\"\n    elif number <= 100:\n        return str(number) + \"a\"\n    elif number <= 1000:\n        return str(number) + \"i\"\n    else:\n        return str(number) + \"l\"", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    assert(isinstance(number, int))\n    if number > 1000:\n        raise ValueError('Enter a number less than 1000.')\n    num = abs(number)\n    num = int(num)\n\n    while (num < 10):\n        num = num * 10\n        if num < 1:\n            num = 1\n        if num < 100:\n            num = num + '0'\n    return ('0' + str(num))[-2:].lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    else:\n        # we need to subtract one to avoid negative numbers\n        num = number - 1\n        # we need to add one to avoid large numbers\n        num = abs(num) + 1\n        # we need to add one to avoid overflow\n        num = abs(num) + 1\n        # we need to add one to avoid zero\n        num = abs(num) + 1\n        # we need to add one to avoid division by zero\n        num = abs(num) + 1\n        # we need to add one to avoid setting to 0\n        num = abs(num) + 1\n\n        # we need to subtract one to avoid negative numbers\n        num = abs(num) + 1\n        # we need to add one to avoid overflow\n        num = abs(num) + 1\n        # we need to add one to avoid division by zero\n        num = abs(num) + 1\n        # we need to add one to avoid setting to 0\n        num = abs(num) + 1\n        # we need to subtract one to avoid negative numbers\n        num = abs(num) + 1\n\n        # we need to subtract one to avoid negative numbers\n        num = abs(num) + 1\n        # we need to add one to", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number < 1:\n        raise ValueError(\"int_to_mini_roman(): positive integers only.\")\n\n    # make sure the numbers are non-negative\n    if number <= 0:\n        raise ValueError(\"int_to_mini_roman(): input negative.\")\n\n    if number <= 1000:\n        return str(number).lower()\n\n    # for large numbers, we split up the integers and make a\n    # substring of length 50, then reassemble it into a proper roman numeral\n    # to get the original number\n    # eg: for 2500, we split it into 100, then make substrings of 100, and\n    # reassemble to get the original number 25\n    if number > 100000:\n        # each number in the int_to_mini_roman() must be in the range 1..1000\n        # thus we split it into 100 substrings and make substrings of 100\n        # then reassemble to get the original number\n        # eg: for 2500, we split it into 100 substrings and make substrings of 100\n        # then reassemble to get the original number\n        nums = [int_to_mini_roman(i) for i in range(1000)]\n        sub_strings = [int_to_mini_roman(i) for", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return re.sub(r'\\d', '', re.sub(r'\\A' + '?\\d{1,9}', '', str(number))).lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if len(number) == 2:\n        num = number[0]\n        num2 = number[1]\n        if num2 >= 2 and num2 <= 9 and num2 < num:\n            return num2\n        elif num2 == 10:\n            return 'X'\n    elif len(number) == 3:\n        num = number[0]\n        num2 = number[1]\n        num3 = number[2]\n        if num2 >= 2 and num2 <= 9 and num2 < num and num2 < num3:\n            return num2\n        elif num2 == 10:\n            return 'X'\n        elif num3 >= 2 and num3 <= 9 and num3 < num and num3 < num2:\n            return num3\n        elif num3 == 10:\n            return 'X'\n    elif len(number) == 4:\n        num = number[0]\n        num2 = number[1]\n        num3 = number[2]\n        num4 = number[3]\n        if num2 >= 2 and num2 <= 9 and num2 < num and num2 < num3 and num2 < num4:\n            return num2\n        elif num2 == 10:\n            return 'X'\n        elif num3 >= 2 and num3 <= 9 and num3 < num and num3 < num2 and num3 < num4:\n            return num3\n        elif num3", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return '0' + str(number)\n    else:\n        return str(number)[:-str(int(number) / 10)] + str(int(number) % 10)\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    s = ('-' * 3) + str(number)\n    s = s.strip()\n    if len(s) == 1:\n        return '-' * len(s) + s\n    elif len(s) == 2:\n        return '-' * len(s) + s.lower() + '-' * len(s) + s.lower()\n    elif len(s) == 3:\n        return '-' * len(s) + s.lower() + '-' * len(s) + s.lower() + '-' * len(s) + s.lower()\n    else:\n        return '-' * len(s) + s.lower() + '-' * len(s) + s.lower() + '-' * len(s) + s.lower() + '-' * len(s) + s.lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    s = \"\"\n    if number >= 1000:\n        s = str(int(number / 1000))\n    elif number > 1000:\n        s = str(int(number / 10000))\n    elif number > 10000:\n        s = str(int(number / 100000))\n    else:\n        s = str(int(number / 1000))\n    s = s[::-1]\n    if s.endswith('0'):\n        s = s[:-1]\n    return s.lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    assert(0 <= number <= 1000)\n    # Convert to base 10, and remove leading zeroes\n    number = str(number).lower()\n    if len(number) == 1:\n        number = '0' + number\n    else:\n        number = '0' + number[:-1]\n\n    # Remove leading zeros\n    number = re.sub(r'\\0', '', number)\n\n    # Convert to roman numeral\n    letters = {\n        '0':    'IV',\n        '1':    'VIII',\n        '2':    'IX',\n        '3':    'X',\n        '4':    'XI',\n        '5':    'XII',\n        '6':    'XIII',\n        '7':    'XIV',\n        '8':    'XV',\n        '9':    'XVI',\n        '10':   'XVII',\n        '11':   'XVIII',\n        '12':   'XIX',\n        '13':   'XX',\n        '14':   'XXI',\n        '15':   'XXII',\n        '16':   'XXIII',\n        '17':   'XXIV',\n        '18':   'XXV',\n        '19':   'XXVI',\n        '20':   'XXVII',\n        '21':   'XX", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    def rto_lower(num):\n        return [num] * len(str(num))\n    return rto_lower(int_to_mini_roman(int(number)))\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    # The roman numeral system is described in Wikipedia, here are the most\n    # important bits:\n    # http://www.co.uk/numbers/roman-numerals.php\n\n    num = abs(int(number))\n    num = num // 10\n    num = num % 10\n    while num > 0:\n        num, num %= 10\n        num += 10\n    if num == 0:\n        return 'nan'\n    while num > 0:\n        num, num %= 10\n        num += 10\n        num = num < 10 and \"0\" or \"\" + num\n    if num > 9:\n        return \"000\" + num\n    while num > 0:\n        num, num %= 10\n        num += 10\n        num = num < 10 and \"0\" or \"\" + num\n    while num > 9:\n        num, num %= 10\n        num += 10\n        num = num < 10 and \"0\" or \"\" + num\n    if num > 5:\n        return \"00\" + num\n    while num > 5:\n        num, num %= 10\n        num += 10\n        num = num < 10 and \"0\" or \"\" + num\n    while num > 0:\n        num, num %= 10\n        num += 10\n        num = num < 10 and \"0\" or \"\" + num\n    if num > 0:\n        return \"0\" + num", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ('', '', '', '')\n    for i in range(1, number):\n        roman[0] = '0' + str(i)\n    roman[1] = str(number)\n    return roman\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    number = int(number)\n    digits = ['i', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']\n    lower = digits[number]\n    upper = digits[number - 1]\n    return \"%s%s\" % (lower, upper)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return '0'\n    if number == 1:\n        return '1'\n    if number <= 100:\n        return number + 'x'\n    if number <= 1000:\n        return number + '0' + str(min(int(number//100), 10))\n    else:\n        raise ValueError('Invalid value.')", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # FIXME: Support negative integers.\n    # FIXME: Improve efficiency with a hashtable.\n    # FIXME: Consider optimizing for the case where num is an integer.\n    if number <= 0:\n        return \"\"\n    # The most common case, integers up to 10.\n    if number <= 10:\n        if number == 1:\n            return \"a\"\n        if number == 2:\n            return \"b\"\n        if number == 3:\n            return \"c\"\n        if number == 4:\n            return \"d\"\n        if number == 5:\n            return \"e\"\n        if number == 6:\n            return \"f\"\n        if number == 7:\n            return \"g\"\n        if number == 8:\n            return \"h\"\n        if number == 9:\n            return \"j\"\n        if number == 10:\n            return \"k\"\n    elif number <= 100:\n        # The most common case, integers up to 1000.\n        if number <= 200:\n            if number == 1:\n                return \"l\"\n            if number == 2:\n                return \"m\"\n            if number == 3:\n                return \"n\"\n            if number == 4:\n                return \"o\"\n            if number == 5:\n                return \"p\"\n            if number == 6:\n                return \"q\"\n            if number == 7:\n                return \"r\"\n            if number == 8:\n                return \"s\"\n            if number == 9:\n                return \"t\"\n            if number == 10:\n                return \"u\"\n            if number", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Simplest case: a single number\n    if len(number) == 1:\n        return number[0].lower()\n\n    # We must have at least two characters\n    if len(number)!= 2:\n        raise ValueError('\"%s\" is not a positive integer' % str(number))\n\n    # We must have at least one letter\n    if len(number[0])!= 1:\n        raise ValueError('\"%s\" is not a positive integer' % str(number))\n\n    # Now we break up the number in its component parts\n    letters = [number[0], number[1]]\n    letter_count = len(letters)\n    letter_list = list(letters)\n    # If there are no letters, just return the number\n    if letter_count == 0:\n        return number\n\n    # If the number is a multiple of 10, we can simplify things\n    if letter_count % 10 == 0:\n        # We can produce a long string from a list\n        if len(letter_list) < letter_count:\n            return''.join(letter_list)\n        else:\n            return''.join(map(int_to_mini_roman, letter_list))\n\n    # Otherwise we cannot generate a long string\n    return str(number)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not number > 1:\n        raise ValueError('int_to_mini_roman() must be given a number greater than or equal to 1')\n    roman_number = _roman_number(number)\n    return roman_number.lower()\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not number:\n        return None\n    elif number < 1:\n        return None\n    else:\n        number = int(number)\n        if number <= 1000:\n            return str(number)\n        else:\n            return '%s %s' % (number, int_to_roman(number, 1))", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 1:\n        return number\n    else:\n        return number[:-1] * 'i' + number[-1:]", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return '0'\n    elif number == 1:\n        return '0'\n    elif number == 2:\n        return 'a'\n    elif number == 3:\n        return 'b'\n    elif number == 4:\n        return 'c'\n    elif number == 5:\n        return 'd'\n    elif number == 6:\n        return 'e'\n    elif number == 7:\n        return 'f'\n    elif number == 8:\n        return 'g'\n    elif number == 9:\n        return 'h'\n    elif number == 10:\n        return 'i'\n    elif number == 11:\n        return 'j'\n    elif number == 12:\n        return 'k'\n    elif number == 13:\n        return 'l'\n    elif number == 14:\n        return'm'\n    elif number == 15:\n        return 'n'\n    elif number == 16:\n        return 'o'\n    elif number == 17:\n        return 'p'\n    elif number == 18:\n        return 'q'\n    elif number == 19:\n        return 'r'\n    elif number == 20:\n        return's'\n    elif number == 21:\n        return 't'\n    elif number == 22:\n        return 'u'\n    elif number == 23:\n        return 'v'\n    elif number == 24:\n        return 'w'\n    elif number == 25:\n        return 'x'\n    elif number == 26:\n        return 'y'\n    elif number == 27:\n        return 'z'\n    elif number == 28:\n        return '", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    return \"\".join(chr(ord(c) - 97) for c in [int(c) for c in number]).lower()", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if (int(number) <= 1000):\n        return str(number).lower()\n    else:\n        return \"XIX\"", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return '0'\n    else:\n        return number + '0'", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    min_roman = 'IX'\n    if number < 1:\n        return ''\n    elif number <= 9999:\n        min_roman = num_to_roman(number, 4)\n    elif number <= 10990:\n        min_roman = num_to_roman(number, 3)\n    else:\n        min_roman = num_to_roman(number, 2)\n    if len(min_roman) < 2:\n        return ''\n    min_roman = min_roman.lower()\n    if len(min_roman) == 1:\n        min_roman = '0' + min_roman\n    return min_roman\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number >= 1000:\n        return str(number).rstrip('X')\n    else:\n        return number + 'x'\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    assert(1 <= number <= 1000)\n    string = ['I']\n    while number:\n        if number == 1:\n            string.append('I')\n        else:\n            if number < 1:\n                string.append('n' + number)\n            else:\n                string.append('d' + int_to_mini_roman(number - 1))\n                string.append('x')\n        number -= 1\n    string.reverse()\n    return ''.join(string)\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 9:\n        return \"%s%s\" % (number, _MINI_TO_ROMAN_NUM[number])\n    elif number <= 12:\n        return \"%s%s%s%s%s%s%s\" % (number, _MINI_TO_ROMAN_NUM[number - 1],\n                                 _MINI_TO_ROMAN_NUM[number % 10],\n                                 _MINI_TO_ROMAN_NUM[number % 100],\n                                 _MINI_TO_ROMAN_NUM[number % 1000],\n                                 _MINI_TO_ROMAN_NUM[number])\n    elif number <= 15:\n        return \"%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s\" % (number, _MINI_TO_ROMAN_NUM[number - 1],\n                                 _MINI_TO_ROMAN_NUM[number % 10],\n                                 _MINI_TO_ROMAN_NUM[number % 100],\n                                 _MINI_TO_ROMAN_NUM[number % 1000],\n                                 _MINI_TO_ROMAN_NUM[number - 1],\n                                 _MINI_TO_ROMAN_NUM[number % 100],\n                                 _MINI_TO_ROMAN_NUM[number % 1000],\n                                 _MINI_TO_ROMAN_NUM[number],\n                                 _MINI_TO_ROMAN_NUM[number - 1],\n                                 _", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 0:\n        raise ValueError('numbers must be positive')\n\n    numerator, denominator = divmod(number, 10)\n    if numerator == 0:\n        numerator = '0'\n    if denominator == 0:\n        denominator = '0'\n    roman_number = numerator + denominator\n    roman_number = roman_number.lower()\n    if roman_number[0] == 'x':\n        roman_number = roman_number[1:]\n    return roman_number\n</s>", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == -1:\n        return '-1'\n    if number == 0:\n        return '0'\n    if number == 1:\n        return '1'\n    if number == 2:\n        return '2'\n    if number == 3:\n        return '3'\n    if number == 4:\n        return '4'\n    if number == 5:\n        return '5'\n    if number == 6:\n        return '6'\n    if number == 7:\n        return '7'\n    if number == 8:\n        return '8'\n    if number == 9:\n        return '9'\n    if number == 10:\n        return '10'\n    if number == 11:\n        return '11'\n    if number == 12:\n        return '12'\n    if number == 13:\n        return '13'\n    if number == 14:\n        return '14'\n    if number == 15:\n        return '15'\n    if number == 16:\n        return '16'\n    if number == 17:\n        return '17'\n    if number == 18:\n        return '18'\n    if number == 19:\n        return '19'\n    if number == 20:\n        return '20'\n    if number == 21:\n        return '21'\n    if number == 22:\n        return '22'\n    if number == 23:\n        return '23'\n    if number == 24:\n        return '24'\n    if number == 25:\n        return '25", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    lnum = []\n    for i in xrange(len(number)):\n        if number[i] in range(int('0'), int('9')):\n            lnum.append(number[i])\n        else:\n            break\n    if len(lnum) == 1:\n        return lnum[0]\n    else:\n        return ''.join(lnum)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return \"\"\n    num = number\n    rnum = []\n    s = \"\"\n    for i in range(1, len(num)):\n        if num[i] == '1':\n            s = s + \"i\"\n        elif num[i] == '2':\n            s = s + \"ii\"\n        elif num[i] == '3':\n            s = s + \"iii\"\n        elif num[i] == '4':\n            s = s + \"iv\"\n        elif num[i] == '5':\n            s = s + \"v\"\n        elif num[i] == '6':\n            s = s + \"vi\"\n        elif num[i] == '7':\n            s = s + \"vii\"\n        elif num[i] == '8':\n            s = s + \"viii\"\n        elif num[i] == '9':\n            s = s + \"ix\"\n        elif num[i] == 'A':\n            s = s + \"a\"\n        elif num[i] == 'B':\n            s = s + \"b\"\n        elif num[i] == 'C':\n            s = s + \"c\"\n        elif num[i] == 'D':\n            s = s + \"d\"\n        elif num[i] == 'E':\n            s = s + \"e\"\n        elif num[i] == 'F':\n            s = s + \"f\"\n        elif", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return '0'\n    if number < 10:\n        return '0'\n    if number < 100:\n        return '0' + chr(number / 10)\n    elif number < 1000:\n        return '0' + chr(number % 10) + chr(number % 100)\n    else:\n        return '0' + chr(number / 1000) + chr(number % 1000)", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    digits = (number / 10) % 10\n    num = number\n    if digits == 0:\n        num = num / 10\n    else:\n        num = num / 10\n        digits = (num % 10) % 10\n\n    # Attempts to obtain the correct roman numeral by splitting the string into\n    # a base-10 digits, a base-4 letter, and a base-2 letter. If this fails,\n    # we give up and return the correct string.\n    base = 'base'\n    for digit in digits:\n        if base == 'base':\n            num = num % 10\n        else:\n            num = num % 10\n            base = 'base'\n        strnum = num + digit\n        if strnum.isdigit():\n            return strnum.lower()\n        else:\n            continue\n    return ''", "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1:\n        return ''\n    elif number == 1:\n        return 'x'\n    elif number == 2:\n        return 'xi'\n    elif number == 3:\n        return 'ix'\n    elif number == 4:\n        return 'xi'\n    elif number == 5:\n        return 'ix'\n    elif number == 6:\n        return 'ix'\n    elif number == 7:\n        return 'ix'\n    elif number == 8:\n        return 'ix'\n    elif number == 9:\n        return 'ix'\n    elif number == 10:\n        return 'ix'\n    elif number == 11:\n        return 'ix'\n    elif number == 12:\n        return 'ix'\n    elif number == 13:\n        return 'ix'\n    elif number == 14:\n        return 'ix'\n    elif number == 15:\n        return 'ix'\n    elif number == 16:\n        return 'ix'\n    elif number == 17:\n        return 'ix'\n    elif number == 18:\n        return 'ix'\n    elif number == 19:\n        return 'ix'\n    elif number == 20:\n        return 'ix'\n    elif number == 21:\n        return 'ix'\n    elif number == 22:\n        return 'ix'\n    elif number == 23:\n        return 'ix'\n    elif number == 24:\n        return 'ix'\n    elif number == 25:\n        return '"]]