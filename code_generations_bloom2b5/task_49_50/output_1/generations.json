[["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 0:\n        return 0\n    if n == 1:\n        return 1\n    if p == 2:\n        return 2\n    if n == 2:\n        return 2\n    if p == 3:\n        return 3\n    if n == 3:\n        return 3\n    if p == 4:\n        return 4\n    if n == 4:\n        return 4\n    if p == 5:\n        return 5\n    if n == 5:\n        return 5\n    if p == 6:\n        return 6\n    if n == 6:\n        return 6\n    if p == 7:\n        return 7\n    if n == 7:\n        return 7\n    if p == 8:\n        return 8\n    if n == 8:\n        return 8\n    if p == 9:\n        return 9\n    if n == 9:\n        return 9\n    if p == 10:\n        return 10\n    if n == 10:\n        return 10\n    if p == 11:\n        return 11\n    if n == 11:\n        return 11\n    if p == 12:\n        return 12\n    if n == 12:\n        return 12\n    if p == 13:\n        return 13\n    if n == 13:\n        return 13\n    if p == 14:\n        return 14\n    if n == 14:\n        return 14\n    if p == 15:\n        return 15\n    if n == 15:\n        return 15\n    if p == 16:\n        return 16", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2 ** n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return 1\n    if p == 1:\n        return 0\n    if p == 2:\n        return 2\n    if p == 3:\n        return 3\n    if p == 4:\n        return 4\n    if p == 5:\n        return 5\n    if p == 6:\n        return 6\n    if p == 7:\n        return 7\n    if p == 8:\n        return 8\n    if p == 9:\n        return 9\n    if p == 10:\n        return 10\n    if p == 11:\n        return 11\n    if p == 12:\n        return 12\n    if p == 13:\n        return 13\n    if p == 14:\n        return 14\n    if p == 15:\n        return 15\n    if p == 16:\n        return 16\n    if p == 17:\n        return 17\n    if p == 18:\n        return 18\n    if p == 19:\n        return 19\n    if p == 20:\n        return 20\n    if p == 21:\n        return 21\n    if p == 22:\n        return 22\n    if p == 23:\n        return 23\n    if p == 24:\n        return 24\n    if p == 25:\n        return 25\n    if p == 26:\n        return 26\n    if p == 27:\n        return 27\n    if p == 28:\n        return 28\n    if p == 29:\n        return 29\n    if p == 30:\n        return 30", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return 1\n    if p == 1:\n        return 0\n    if p == 2:\n        return 2\n    if p == 3:\n        return 3\n    if p == 4:\n        return 4\n    if p == 5:\n        return 5\n    if p == 6:\n        return 6\n    if p == 7:\n        return 7\n    if p == 8:\n        return 8\n    if p == 9:\n        return 9\n    if p == 10:\n        return 10\n    if p == 11:\n        return 11\n    if p == 12:\n        return 12\n    if p == 13:\n        return 13\n    if p == 14:\n        return 14\n    if p == 15:\n        return 15\n    if p == 16:\n        return 16\n    if p == 17:\n        return 17\n    if p == 18:\n        return 18\n    if p == 19:\n        return 19\n    if p == 20:\n        return 20\n    if p == 21:\n        return 21\n    if p == 22:\n        return 22\n    if p == 23:\n        return 23\n    if p == 24:\n        return 24\n    if p == 25:\n        return 25\n    if p == 26:\n        return 26\n    if p == 27:\n        return 27\n    if p == 28:\n        return 28\n    if p == 29:\n        return 29\n    if p == 30:\n        return 30", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 0:\n        return n\n    if n == 1:\n        return p\n    if n == 2:\n        return p * p\n    if n == 3:\n        return p * p * p\n    if n == 4:\n        return p * p * p * p\n    if n == 5:\n        return p * p * p * p * p\n    raise ValueError(\"invalid n: {}\".format(n))", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return 1\n    if p == 1:\n        return 0\n    if p == 2:\n        return 2\n    if p == 3:\n        return 3\n    if p == 4:\n        return 4\n    if p == 5:\n        return 5\n    if p == 6:\n        return 6\n    if p == 7:\n        return 7\n    if p == 8:\n        return 8\n    if p == 9:\n        return 9\n    if p == 10:\n        return 10\n    if p == 11:\n        return 11\n    if p == 12:\n        return 12\n    if p == 13:\n        return 13\n    if p == 14:\n        return 14\n    if p == 15:\n        return 15\n    if p == 16:\n        return 16\n    if p == 17:\n        return 17\n    if p == 18:\n        return 18\n    if p == 19:\n        return 19\n    if p == 20:\n        return 20\n    if p == 21:\n        return 21\n    if p == 22:\n        return 22\n    if p == 23:\n        return 23\n    if p == 24:\n        return 24\n    if p == 25:\n        return 25\n    if p == 26:\n        return 26\n    if p == 27:\n        return 27\n    if p == 28:\n        return 28\n    if p == 29:\n        return 29\n    if p == 30:\n        return 30", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return 1\n    if p == 1:\n        return 2\n    if p == 2:\n        return 3\n    if p == 3:\n        return 4\n    if p == 4:\n        return 5\n    if p == 5:\n        return 6\n    if p == 6:\n        return 7\n    if p == 7:\n        return 8\n    if p == 8:\n        return 9\n    if p == 9:\n        return 10\n    if p == 10:\n        return 11\n    if p == 11:\n        return 12\n    if p == 12:\n        return 13\n    if p == 13:\n        return 14\n    if p == 14:\n        return 15\n    if p == 15:\n        return 16\n    if p == 16:\n        return 17\n    if p == 17:\n        return 18\n    if p == 18:\n        return 19\n    if p == 19:\n        return 20\n    if p == 20:\n        return 21\n    if p == 21:\n        return 22\n    if p == 22:\n        return 23\n    if p == 23:\n        return 24\n    if p == 24:\n        return 25\n    if p == 25:\n        return 26\n    if p == 26:\n        return 27\n    if p == 27:\n        return 28\n    if p == 28:\n        return 29\n    if p == 29:\n        return 30\n    if p == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2 ** n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 ** n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p // 2\n    if n == 3:\n        return p // 4\n    if n == 4:\n        return p // 8\n    if n == 5:\n        return p // 16\n    if n == 6:\n        return p // 32\n    if n == 7:\n        return p // 64\n    if n == 8:\n        return p // 128\n    if n == 9:\n        return p // 256\n    if n == 10:\n        return p // 512\n    if n == 11:\n        return p // 1024\n    if n == 12:\n        return p // 2048\n    if n == 13:\n        return p // 4096\n    if n == 14:\n        return p // 8192\n    if n == 15:\n        return p // 16384\n    if n == 16:\n        return p // 32768\n    if n == 17:\n        return p // 65536\n    if n == 18:\n        return p // 131072\n    if n == 19:\n        return p // 262144\n    if n == 20:\n        return p // 524288\n    if n == 21:\n        return p // 1048576\n    if n == 22:\n        return p // 2097152\n    if n == 23:\n        return p //", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2**n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p // 2\n    if n == 3:\n        return p // 4\n    if n == 4:\n        return p // 8\n    if n == 5:\n        return p // 16\n    if n == 6:\n        return p // 32\n    if n == 7:\n        return p // 64\n    if n == 8:\n        return p // 128\n    if n == 9:\n        return p // 256\n    if n == 10:\n        return p // 512\n    if n == 11:\n        return p // 1024\n    if n == 12:\n        return p // 2048\n    if n == 13:\n        return p // 4096\n    if n == 14:\n        return p // 8192\n    if n == 15:\n        return p // 16384\n    return p // 32768\n</s>", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2 ** n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return 1\n    if p == 1:\n        return 0\n    if p == 2:\n        return 2\n    if p == 3:\n        return 3\n    if p == 4:\n        return 4\n    if p == 5:\n        return 5\n    if p == 6:\n        return 6\n    if p == 7:\n        return 7\n    if p == 8:\n        return 8\n    if p == 9:\n        return 9\n    if p == 10:\n        return 10\n    if p == 11:\n        return 11\n    if p == 12:\n        return 12\n    if p == 13:\n        return 13\n    if p == 14:\n        return 14\n    if p == 15:\n        return 15\n    if p == 16:\n        return 16\n    if p == 17:\n        return 17\n    if p == 18:\n        return 18\n    if p == 19:\n        return 19\n    if p == 20:\n        return 20\n    if p == 21:\n        return 21\n    if p == 22:\n        return 22\n    if p == 23:\n        return 23\n    if p == 24:\n        return 24\n    if p == 25:\n        return 25\n    if p == 26:\n        return 26\n    if p == 27:\n        return 27\n    if p == 28:\n        return 28\n    if p == 29:\n        return 29\n    if p == 30:\n        return 30", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2 ** n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p // 2\n    if n == 3:\n        return p // 4\n    if n == 4:\n        return p // 8\n    if n == 5:\n        return p // 16\n    if n == 6:\n        return p // 32\n    if n == 7:\n        return p // 64\n    if n == 8:\n        return p // 128\n    if n == 9:\n        return p // 256\n    if n == 10:\n        return p // 512\n    if n == 11:\n        return p // 1024\n    if n == 12:\n        return p // 2048\n    if n == 13:\n        return p // 4096\n    if n == 14:\n        return p // 8192\n    if n == 15:\n        return p // 16384\n    if n == 16:\n        return p // 32768\n    if n == 17:\n        return p // 65536\n    if n == 18:\n        return p // 131072\n    if n == 19:\n        return p // 262144\n    if n == 20:\n        return p // 524288\n    if n == 21:\n        return p // 1048576\n    if n == 22:\n        return p // 2097152\n    if n == 23:\n        return p //", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 0:\n        return 0\n    if n == 1:\n        return 1\n    if p == 1:\n        return 0\n    if n == 2:\n        return 2\n    if p == 2:\n        return 1\n    if n == 3:\n        return 4\n    if p == 3:\n        return 2\n    if n == 4:\n        return 8\n    if p == 4:\n        return 1\n    if n == 5:\n        return 16\n    if p == 5:\n        return 4\n    if n == 6:\n        return 32\n    if p == 6:\n        return 2\n    if n == 7:\n        return 64\n    if p == 7:\n        return 1\n    if n == 8:\n        return 128\n    if p == 8:\n        return 1\n    if n == 9:\n        return 256\n    if p == 9:\n        return 1\n    if n == 10:\n        return 512\n    if p == 10:\n        return 1\n    if n == 11:\n        return 1024\n    if p == 11:\n        return 1\n    if n == 12:\n        return 2048\n    if p == 12:\n        return 1\n    if n == 13:\n        return 4096\n    if p == 13:\n        return 1\n    if n == 14:\n        return 8192\n    if p == 14:\n        return 1\n    if n == 15:\n        return 16384\n    if p == 15:", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p // 2\n    if n == 3:\n        return p // 4\n    if n == 4:\n        return p // 8\n    if n == 5:\n        return p // 16\n    if n == 6:\n        return p // 32\n    if n == 7:\n        return p // 64\n    if n == 8:\n        return p // 128\n    if n == 9:\n        return p // 256\n    if n == 10:\n        return p // 512\n    if n == 11:\n        return p // 1024\n    if n == 12:\n        return p // 2048\n    if n == 13:\n        return p // 4096\n    if n == 14:\n        return p // 8192\n    if n == 15:\n        return p // 16384\n    if n == 16:\n        return p // 32768\n    if n == 17:\n        return p // 65536\n    if n == 18:\n        return p // 131072\n    if n == 19:\n        return p // 262144\n    if n == 20:\n        return p // 524288\n    if n == 21:\n        return p // 1048576\n    if n == 22:\n        return p // 2097152\n    if n == 23:\n        return p //", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p // 2\n    if n == 3:\n        return p // 4\n    if n == 4:\n        return p // 8\n    if n == 5:\n        return p // 16\n    if n == 6:\n        return p // 32\n    if n == 7:\n        return p // 64\n    if n == 8:\n        return p // 128\n    if n == 9:\n        return p // 256\n    if n == 10:\n        return p // 512\n    if n == 11:\n        return p // 1024\n    if n == 12:\n        return p // 2048\n    if n == 13:\n        return p // 4096\n    if n == 14:\n        return p // 8192\n    if n == 15:\n        return p // 16384\n    if n == 16:\n        return p // 32768\n    if n == 17:\n        return p // 65536\n    if n == 18:\n        return p // 131072\n    if n == 19:\n        return p // 262144\n    if n == 20:\n        return p // 524288\n    if n == 21:\n        return p // 1048576\n    if n == 22:\n        return p // 2097152\n    if n == 23:\n        return p //", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if n == 2:\n        return p // 2\n    if n == 3:\n        return p // 4\n    if n == 4:\n        return p // 8\n    if n == 5:\n        return p // 16\n    if n == 6:\n        return p // 32\n    if n == 7:\n        return p // 64\n    if n == 8:\n        return p // 128\n    if n == 9:\n        return p // 256\n    if n == 10:\n        return p // 512\n    if n == 11:\n        return p // 1024\n    if n == 12:\n        return p // 2048\n    if n == 13:\n        return p // 4096\n    if n == 14:\n        return p // 8192\n    if n == 15:\n        return p // 16384\n    if n == 16:\n        return p // 32768\n    if n == 17:\n        return p // 65536\n    if n == 18:\n        return p // 131072\n    if n == 19:\n        return p // 262144\n    if n == 20:\n        return p // 524288\n    if n == 21:\n        return p // 1048576\n    if n == 22:\n        return p // 2097152\n    if n == 23:\n        return p // 4194304\n    if n == 24", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 8\n    if n == 5:\n        return 16\n    if n == 6:\n        return 32\n    if n == 7:\n        return 64\n    if n == 8:\n        return 128\n    if n == 9:\n        return 256\n    if n == 10:\n        return 512\n    if n == 11:\n        return 1024\n    if n == 12:\n        return 2048\n    if n == 13:\n        return 4096\n    if n == 14:\n        return 8192\n    if n == 15:\n        return 16384\n    return n", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2**n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 0:\n        return 0\n    if n == 1:\n        return p\n    if p == 1:\n        return n\n    if n == 2:\n        return p * p\n    if p == 2:\n        return n * n\n    if n == 3:\n        return p * p * p\n    if p == 3:\n        return n * n * n\n    if n == 4:\n        return p * p * p * p\n    if p == 4:\n        return n * n * n * n\n    if n == 5:\n        return p * p * p * p * p\n    if p == 5:\n        return n * n * n * n * n\n    if n == 6:\n        return p * p * p * p * p * p\n    if p == 6:\n        return n * n * n * n * n * n\n    if n == 7:\n        return p * p * p * p * p * p * p\n    if p == 7:\n        return n * n * n * n * n * n * n\n    if n == 8:\n        return p * p * p * p * p * p * p * p\n    if p == 8:\n        return n * n * n * n * n * n * n * n", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return p\n    else:\n        return (2 ** n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 0:\n        return 0\n    if n == 1:\n        return 1\n    if p == 1:\n        return 1\n    if n == 2:\n        return 2\n    if p == 2:\n        return 2\n    if n == 3:\n        return 4\n    if p == 3:\n        return 4\n    if n == 4:\n        return 8\n    if p == 4:\n        return 8\n    if n == 5:\n        return 16\n    if p == 5:\n        return 16\n    if n == 6:\n        return 32\n    if p == 6:\n        return 32\n    if n == 7:\n        return 64\n    if p == 7:\n        return 64\n    if n == 8:\n        return 128\n    if p == 8:\n        return 128\n    if n == 9:\n        return 256\n    if p == 9:\n        return 256\n    if n == 10:\n        return 512\n    if p == 10:\n        return 512\n    if n == 11:\n        return 1024\n    if p == 11:\n        return 1024\n    if n == 12:\n        return 2048\n    if p == 12:\n        return 2048\n    if n == 13:\n        return 4096\n    if p == 13:\n        return 4096\n    if n == 14:\n        return 8192\n    if p == 14:\n        return 8192\n    if n == 15:\n        return 16384\n    if p == 15:", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 ** n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return 1\n    else:\n        return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 ** n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return 1\n    if p == 1:\n        return 2\n    if p == 2:\n        return 3\n    if p == 3:\n        return 4\n    if p == 4:\n        return 5\n    if p == 5:\n        return 6\n    if p == 6:\n        return 7\n    if p == 7:\n        return 8\n    if p == 8:\n        return 9\n    if p == 9:\n        return 10\n    if p == 10:\n        return 11\n    if p == 11:\n        return 12\n    if p == 12:\n        return 13\n    if p == 13:\n        return 14\n    if p == 14:\n        return 15\n    if p == 15:\n        return 16\n    if p == 16:\n        return 17\n    if p == 17:\n        return 18\n    if p == 18:\n        return 19\n    if p == 19:\n        return 20\n    if p == 20:\n        return 21\n    if p == 21:\n        return 22\n    if p == 22:\n        return 23\n    if p == 23:\n        return 24\n    if p == 24:\n        return 25\n    if p == 25:\n        return 26\n    if p == 26:\n        return 27\n    if p == 27:\n        return 28\n    if p == 28:\n        return 29\n    if p == 29:\n        return 30\n    if p == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if p == 0:\n        return 1\n    if p == 1:\n        return 0\n    if n < p:\n        return modp(n, p - 1)\n    return modp(n - 1, p - 1) + modp(n - 2, p - 2) + modp(n - 3, p - 3) +... + modp(n - p, p - p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return 0\n    if p == 1:\n        return 1\n    if p == 2:\n        return 2\n    if p == 3:\n        return 3\n    if p == 4:\n        return 4\n    if p == 5:\n        return 5\n    if p == 6:\n        return 6\n    if p == 7:\n        return 7\n    if p == 8:\n        return 8\n    if p == 9:\n        return 9\n    if p == 10:\n        return 10\n    if p == 11:\n        return 11\n    if p == 12:\n        return 12\n    if p == 13:\n        return 13\n    if p == 14:\n        return 14\n    if p == 15:\n        return 15\n    if p == 16:\n        return 16\n    if p == 17:\n        return 17\n    if p == 18:\n        return 18\n    if p == 19:\n        return 19\n    if p == 20:\n        return 20\n    if p == 21:\n        return 21\n    if p == 22:\n        return 22\n    if p == 23:\n        return 23\n    if p == 24:\n        return 24\n    if p == 25:\n        return 25\n    if p == 26:\n        return 26\n    if p == 27:\n        return 27\n    if p == 28:\n        return 28\n    if p == 29:\n        return 29\n    if p == 30:\n        return 30", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return 1\n    if p == 1:\n        return 2\n    if p == 2:\n        return 3\n    if p == 3:\n        return 4\n    if p == 4:\n        return 5\n    if p == 5:\n        return 6\n    if p == 6:\n        return 7\n    if p == 7:\n        return 8\n    if p == 8:\n        return 9\n    if p == 9:\n        return 10\n    if p == 10:\n        return 11\n    if p == 11:\n        return 12\n    if p == 12:\n        return 13\n    if p == 13:\n        return 14\n    if p == 14:\n        return 15\n    if p == 15:\n        return 16\n    if p == 16:\n        return 17\n    if p == 17:\n        return 18\n    if p == 18:\n        return 19\n    if p == 19:\n        return 20\n    if p == 20:\n        return 21\n    if p == 21:\n        return 22\n    if p == 22:\n        return 23\n    if p == 23:\n        return 24\n    if p == 24:\n        return 25\n    if p == 25:\n        return 26\n    if p == 26:\n        return 27\n    if p == 27:\n        return 28\n    if p == 28:\n        return 29\n    if p == 29:\n        return 30\n    if p == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return 1\n    if p == 1:\n        return n\n    if p == 2:\n        return n // 2\n    if p == 3:\n        return n // 3\n    if p == 4:\n        return n // 4\n    if p == 5:\n        return n // 5\n    if p == 6:\n        return n // 6\n    if p == 7:\n        return n // 7\n    if p == 8:\n        return n // 8\n    if p == 9:\n        return n // 9\n    if p == 10:\n        return n // 10\n    if p == 11:\n        return n // 11\n    if p == 12:\n        return n // 12\n    if p == 13:\n        return n // 13\n    if p == 14:\n        return n // 14\n    if p == 15:\n        return n // 15\n    return 0", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return 1\n    if p == 1:\n        return 2\n    if p == 2:\n        return 3\n    if p == 3:\n        return 4\n    if p == 4:\n        return 5\n    if p == 5:\n        return 6\n    if p == 6:\n        return 7\n    if p == 7:\n        return 8\n    if p == 8:\n        return 9\n    if p == 9:\n        return 10\n    if p == 10:\n        return 11\n    if p == 11:\n        return 12\n    if p == 12:\n        return 13\n    if p == 13:\n        return 14\n    if p == 14:\n        return 15\n    if p == 15:\n        return 16\n    if p == 16:\n        return 17\n    if p == 17:\n        return 18\n    if p == 18:\n        return 19\n    if p == 19:\n        return 20\n    if p == 20:\n        return 21\n    if p == 21:\n        return 22\n    if p == 22:\n        return 23\n    if p == 23:\n        return 24\n    if p == 24:\n        return 25\n    if p == 25:\n        return 26\n    if p == 26:\n        return 27\n    if p == 27:\n        return 28\n    if p == 28:\n        return 29\n    if p == 29:\n        return 30\n    if p == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 0:\n        return 0\n    if n == 1:\n        return 1\n    if p == 1:\n        return 1\n    if n == 2:\n        return 2\n    if p == 2:\n        return 2\n    if n == 3:\n        return 3\n    if p == 3:\n        return 3\n    if n == 4:\n        return 4\n    if p == 4:\n        return 4\n    if n == 5:\n        return 5\n    if p == 5:\n        return 5\n    if n == 6:\n        return 6\n    if p == 6:\n        return 6\n    if n == 7:\n        return 7\n    if p == 7:\n        return 7\n    if n == 8:\n        return 8\n    if p == 8:\n        return 8\n    if n == 9:\n        return 9\n    if p == 9:\n        return 9\n    if n == 10:\n        return 10\n    if p == 10:\n        return 10\n    if n == 11:\n        return 11\n    if p == 11:\n        return 11\n    if n == 12:\n        return 12\n    if p == 12:\n        return 12\n    if n == 13:\n        return 13\n    if p == 13:\n        return 13\n    if n == 14:\n        return 14\n    if p == 14:\n        return 14\n    if n == 15:\n        return 15\n    if p == 15:\n        return 15", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 0:\n        return 1\n    if n == 1:\n        return p\n    if n == 2:\n        return p\n    if n == 3:\n        return p\n    if n == 4:\n        return p\n    if n == 5:\n        return p\n    if n == 6:\n        return p\n    if n == 7:\n        return p\n    if n == 8:\n        return p\n    if n == 9:\n        return p\n    if n == 10:\n        return p\n    if n == 11:\n        return p\n    if n == 12:\n        return p\n    if n == 13:\n        return p\n    if n == 14:\n        return p\n    if n == 15:\n        return p\n    if n == 16:\n        return p\n    if n == 17:\n        return p\n    if n == 18:\n        return p\n    if n == 19:\n        return p\n    if n == 20:\n        return p\n    if n == 21:\n        return p\n    if n == 22:\n        return p\n    if n == 23:\n        return p\n    if n == 24:\n        return p\n    if n == 25:\n        return p\n    if n == 26:\n        return p\n    if n == 27:\n        return p\n    if n == 28:\n        return p\n    if n == 29:\n        return p\n    if", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2 ** n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return 1\n    if p == 1:\n        return 0\n    if p == 2:\n        return 2\n    if p == 3:\n        return 3\n    if p == 4:\n        return 4\n    if p == 5:\n        return 5\n    if p == 6:\n        return 6\n    if p == 7:\n        return 7\n    if p == 8:\n        return 8\n    if p == 9:\n        return 9\n    if p == 10:\n        return 10\n    if p == 11:\n        return 11\n    if p == 12:\n        return 12\n    if p == 13:\n        return 13\n    if p == 14:\n        return 14\n    if p == 15:\n        return 15\n    if p == 16:\n        return 16\n    if p == 17:\n        return 17\n    if p == 18:\n        return 18\n    if p == 19:\n        return 19\n    if p == 20:\n        return 20\n    if p == 21:\n        return 21\n    if p == 22:\n        return 22\n    if p == 23:\n        return 23\n    if p == 24:\n        return 24\n    if p == 25:\n        return 25\n    if p == 26:\n        return 26\n    if p == 27:\n        return 27\n    if p == 28:\n        return 28\n    if p == 29:\n        return 29\n    if p == 30:\n        return 30", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2**n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    else:\n        return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2 ** n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2 ** n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if p == 0:\n        return 1\n    if p == 1:\n        return 0\n    if n == p:\n        return 1\n    if n < p:\n        return modp(n, p - 1)\n    return modp(n - p, p - 1) + modp(n, p - 1) * modp(n - p, p - 1) / modp(n - p, p - 1) * modp(n - p, p - 1) / modp(n - p, p - 1) * modp(n - p, p - 1) / modp(n - p, p - 1) * modp(n - p, p - 1) / modp(n - p, p - 1) * modp(n - p, p - 1) / modp(n - p, p - 1) * modp(n - p, p - 1) / modp(n - p, p - 1) * modp(n - p, p - 1) / modp(n - p, p - 1) * modp(n - p,", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p // 2\n    if n == 3:\n        return p // 4\n    if n == 4:\n        return p // 8\n    if n == 5:\n        return p // 16\n    if n == 6:\n        return p // 32\n    if n == 7:\n        return p // 64\n    if n == 8:\n        return p // 128\n    if n == 9:\n        return p // 256\n    if n == 10:\n        return p // 512\n    if n == 11:\n        return p // 1024\n    if n == 12:\n        return p // 2048\n    if n == 13:\n        return p // 4096\n    if n == 14:\n        return p // 8192\n    if n == 15:\n        return p // 16384\n    if n == 16:\n        return p // 32768\n    if n == 17:\n        return p // 65536\n    if n == 18:\n        return p // 131072\n    if n == 19:\n        return p // 262144\n    if n == 20:\n        return p // 524288\n    if n == 21:\n        return p // 1048576\n    if n == 22:\n        return p // 2097152\n    if n == 23:\n        return p //", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2**n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2 ** n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 0:\n        return 0\n    if n == 1:\n        return 1\n    if p == 1:\n        return 0\n    if n == 2:\n        return 2\n    if p == 2:\n        return 1\n    if n == 3:\n        return 3\n    if p == 3:\n        return 2\n    if n == 4:\n        return 4\n    if p == 4:\n        return 3\n    if n == 5:\n        return 5\n    if p == 5:\n        return 4\n    if n == 6:\n        return 6\n    if p == 6:\n        return 5\n    if n == 7:\n        return 7\n    if p == 7:\n        return 6\n    if n == 8:\n        return 8\n    if p == 8:\n        return 7\n    if n == 9:\n        return 9\n    if p == 9:\n        return 8\n    if n == 10:\n        return 10\n    if p == 10:\n        return 9\n    if n == 11:\n        return 11\n    if p == 11:\n        return 10\n    if n == 12:\n        return 12\n    if p == 12:\n        return 11\n    if n == 13:\n        return 13\n    if p == 13:\n        return 12\n    if n == 14:\n        return 14\n    if p == 14:\n        return 13\n    if n == 15:\n        return 15\n    if p == 15:\n        return 14", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return 1\n    if p == 1:\n        return 2\n    if p == 2:\n        return 3\n    if p == 3:\n        return 4\n    if p == 4:\n        return 5\n    if p == 5:\n        return 6\n    if p == 6:\n        return 7\n    if p == 7:\n        return 8\n    if p == 8:\n        return 9\n    if p == 9:\n        return 10\n    if p == 10:\n        return 11\n    if p == 11:\n        return 12\n    if p == 12:\n        return 13\n    if p == 13:\n        return 14\n    if p == 14:\n        return 15\n    if p == 15:\n        return 16\n    if p == 16:\n        return 17\n    if p == 17:\n        return 18\n    if p == 18:\n        return 19\n    if p == 19:\n        return 20\n    if p == 20:\n        return 21\n    if p == 21:\n        return 22\n    if p == 22:\n        return 23\n    if p == 23:\n        return 24\n    if p == 24:\n        return 25\n    if p == 25:\n        return 26\n    if p == 26:\n        return 27\n    if p == 27:\n        return 28\n    if p == 28:\n        return 29\n    if p == 29:\n        return 30\n    if p == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return n % p + p * (n // p) + (n // p) * (n // (p - 1))", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2**n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 0:\n        return 0\n    if n == 1:\n        return 1\n    if p == 1:\n        return 0\n    if n == 2:\n        return 2\n    if p == 2:\n        return 1\n    if n == 3:\n        return 4\n    if p == 3:\n        return 2\n    if n == 4:\n        return 8\n    if p == 4:\n        return 1\n    if n == 5:\n        return 16\n    if p == 5:\n        return 4\n    if n == 6:\n        return 32\n    if p == 6:\n        return 2\n    if n == 7:\n        return 64\n    if p == 7:\n        return 1\n    if n == 8:\n        return 128\n    if p == 8:\n        return 1\n    if n == 9:\n        return 256\n    if p == 9:\n        return 1\n    if n == 10:\n        return 512\n    if p == 10:\n        return 1\n    if n == 11:\n        return 1024\n    if p == 11:\n        return 1\n    if n == 12:\n        return 2048\n    if p == 12:\n        return 1\n    if n == 13:\n        return 4096\n    if p == 13:\n        return 1\n    if n == 14:\n        return 8192\n    if p == 14:\n        return 1\n    if n == 15:\n        return 16384\n    if p == 15:", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2 ** n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2 ** n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2**n) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 0:\n        return n\n    if n == 1:\n        return p\n    if n == 2:\n        return p // 2\n    if n == 3:\n        return p // 4\n    if n == 4:\n        return p // 8\n    if n == 5:\n        return p // 16\n    if n == 6:\n        return p // 32\n    if n == 7:\n        return p // 64\n    if n == 8:\n        return p // 128\n    if n == 9:\n        return p // 256\n    if n == 10:\n        return p // 512\n    if n == 11:\n        return p // 1024\n    if n == 12:\n        return p // 2048\n    if n == 13:\n        return p // 4096\n    if n == 14:\n        return p // 8192\n    if n == 15:\n        return p // 16384\n    if n == 16:\n        return p // 32768\n    if n == 17:\n        return p // 65536\n    if n == 18:\n        return p // 131072\n    if n == 19:\n        return p // 262144\n    if n == 20:\n        return p // 524288\n    if n == 21:\n        return p // 1048576\n    if n == 22:\n        return p // 2097152\n    if n == 23:\n        return p //", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    else:\n        return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return 1\n    if p == 1:\n        return 2\n    if p == 2:\n        return 3\n    if p == 3:\n        return 4\n    if p == 4:\n        return 5\n    if p == 5:\n        return 6\n    if p == 6:\n        return 7\n    if p == 7:\n        return 8\n    if p == 8:\n        return 9\n    if p == 9:\n        return 10\n    if p == 10:\n        return 11\n    if p == 11:\n        return 12\n    if p == 12:\n        return 13\n    if p == 13:\n        return 14\n    if p == 14:\n        return 15\n    if p == 15:\n        return 16\n    if p == 16:\n        return 17\n    if p == 17:\n        return 18\n    if p == 18:\n        return 19\n    if p == 19:\n        return 20\n    if p == 20:\n        return 21\n    if p == 21:\n        return 22\n    if p == 22:\n        return 23\n    if p == 23:\n        return 24\n    if p == 24:\n        return 25\n    if p == 25:\n        return 26\n    if p == 26:\n        return 27\n    if p == 27:\n        return 28\n    if p == 28:\n        return 29\n    if p == 29:\n        return 30\n    if p == 30:\n        return 31", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 0:\n        return 0\n    if n == 1:\n        return p\n    if p == 1:\n        return n\n    if n == p:\n        return n\n    if n < p:\n        return modp(n - 1, p)\n    if n > p:\n        return modp(p - 1, n)\n    return modp(n, p - 1) + modp(p - 1, n - 1)</s>", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 0:\n        return 0\n    if n == 1:\n        return 1\n    if p == 2:\n        return 2\n    if n == 2:\n        return 2\n    if p == 3:\n        return 3\n    if n == 3:\n        return 8\n    if p == 4:\n        return 16\n    if n == 4:\n        return 64\n    if p == 5:\n        return 128\n    if n == 5:\n        return 256\n    if p == 6:\n        return 1024\n    if n == 6:\n        return 2048\n    if p == 7:\n        return 4096\n    if n == 7:\n        return 8192\n    if p == 8:\n        return 16384\n    if n == 8:\n        return 32768\n    if p == 9:\n        return 65536\n    if n == 9:\n        return 131072\n    if p == 10:\n        return 262144\n    if n == 10:\n        return 524288\n    if p == 11:\n        return 1048576\n    if n == 11:\n        return 2097152\n    if p == 12:\n        return 4194304\n    if n == 12:\n        return 8388608\n    if p == 13:\n        return 16777216\n    if n == 13:\n        return 41943072\n    if p == 14:\n        return 8388607\n    if n == 14:\n        return", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    else:\n        return n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if p == 0:\n        return 1\n    if p == 1:\n        return 0\n    if n < p:\n        return modp(n, p - 1)\n    return modp(n - 1, p - 1) + modp(n - 2, p - 2) + modp(n - 3, p - 3) + modp(n - 4, p - 4) + modp(n - 5, p - 5) + modp(n - 6, p - 6) + modp(n - 7, p - 7) + modp(n - 8, p - 8) + modp(n - 9, p - 9) + modp(n - 10, p - 10) + modp(n - 11, p - 11) + modp(n - 12, p - 12) + modp(n - 13, p - 13) + modp(n - 14, p - 14) + modp(n - 15, p - 15) + modp(n - 16, p - 16) + modp(n - 17, p - 17) + modp", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 0:\n        return 1\n    if n == 1:\n        return p\n    if n == 2:\n        return p\n    if n == 3:\n        return p * p\n    if n == 4:\n        return p * p * p\n    if n == 5:\n        return p * p * p * p\n    if n == 6:\n        return p * p * p * p * p\n    if n == 7:\n        return p * p * p * p * p * p\n    if n == 8:\n        return p * p * p * p * p * p * p\n    if n == 9:\n        return p * p * p * p * p * p * p * p\n    if n == 10:\n        return p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p"]]