[["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Init\n    tmp = []\n    for i in range(len(nums)):\n        tmp.append(nums[i])\n    tmp.sort()\n    return tmp", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=sum, reverse=False)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    res = []\n    for n in nums:\n        res.append(abs(n))\n    return res", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # reverse the list to make sure that increasing numbers are\n    # in the correct order\n    reversed = [item for item in reversed(nums)]\n    r = 0\n    for i in reversed(nums):\n        r = max(r, abs(i))\n        if r == abs(nums[i]):\n            continue\n        nums[i] = r\n        if i == 0:\n            break\n    return sorted(nums, key=lambda x: abs(x), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    nums = sorted(nums, key=lambda num: sum(digits(num)))\n\n    return nums[::-1]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return nums\n    nums.sort()\n    return nums[::-1]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return sum(int(digit) for digit in x) + sum(int(digit) for digit in x) + sum(int(digit) for digit in x)\n    return lambda x: x.sort(_sort)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted([sum(i) for i in nums], reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(a, b):\n        return a.digits - b.digits\n\n    return lambda a, b: cmp(a, b) or (a.digits, b.digits) < (a.digits + b.digits, 0)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sorted_nums = []\n    for num in nums:\n        sorted_nums.append(num)\n    return sorted_nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n\n    def _reduce(x):\n        \"\"\"\n        Reduce x to its sum of digits\n        \"\"\"\n        return sum([int(digit) for digit in x])\n\n    def _reduce_norm(x):\n        \"\"\"\n        Reduce x to its sum of digits, after normalizing it\n        \"\"\"\n        return float(sum(x)) / float(len(x))\n\n    def _compare(a, b):\n        \"\"\"\n        Compare two integers according to their sum of digits\n        \"\"\"\n        # the smaller number wins.\n        if a < b:\n            return -1\n        else:\n            return 1\n\n    return reduce(_reduce, nums)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda number: sum(int(num) * 10 ** int(digit) for digit in str(number)))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        new_list = []\n        for item in nums:\n            new_list.append(item + (sum(item) / len(nums)))\n        return new_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, list):\n        return [nums.index(num) + 1 for num in nums]\n    else:\n        return [num + 1 for num in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x : x.digits + (x.digits % 10))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sorted_list(l):\n        \"\"\"\n        Create an ordered list from a list of integers.\n        \"\"\"\n        l.sort()\n        return l\n\n    return sorted_list(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # NB: on Python 3.x and Python 2.x the `sum` method is a copy\n    # of `int`. We have to go with `int` here to avoid a recurse.\n    return [sum(i for i in nums) for nums in nums]\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(x):\n        if x[0] == 0:\n            return 1\n        elif x[0] == 1:\n            return -1\n        elif x[0] == -1:\n            return -1\n        else:\n            return x[0]\n    return sorted([sort(num) for num in nums])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # If the list has more than one item, sort them based on their index\n    if len(nums) == 1:\n        return nums.index(nums[0])\n\n    # If the list has several items with similar sum of their digits,\n    # sort them based on their sum of their digits\n    sum = sum(nums);\n    if sum!= 0:\n        return sum\n\n    # If the list has only one item with sum of its digits == 0,\n    # return it\n    if sum == 0:\n        return 0\n\n    # If the list is empty, return the original list\n    if len(nums) == 0:\n        return nums\n\n    # Sort the items based on their sum of their digits\n    nums.sort(key=lambda x: x*x)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    elif len(nums) == 0:\n        return 1\n    else:\n        return sum(nums)/len(nums)</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(nums):\n        \"\"\"Sort the input numbers in ascending order according to the sum of\n        their digits.\"\"\"\n        # Sort by digits\n        return sorted(nums, key=lambda x: (x ** -1) * 10.0)\n\n    for i in range(len(nums)):\n        sum = 0.0\n        for j in range(i + 1, len(nums)):\n            sum += nums[j] ** -1\n        nums[-i] = sum\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return nums\n    nums.sort(key=lambda x: x.digits)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            continue\n        result.append(nums[i])\n        if nums[i] > len(nums) - 1:\n            result.reverse()\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n\n    # Start by removing duplicates.\n    s = 0\n    for num in nums:\n        if s!= num:\n            nums[-1] = s\n            s = num\n\n    return sorted(nums, key=lambda num: int(num))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(list(range(len(nums))), key=lambda x: (sum(x) == x))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(n):\n        if n < 0:\n            return -n\n        else:\n            return n + sum(n[::-1]) // 2\n\n    nums = [int(n) for n in nums]\n    idx = len(nums) // 2\n    s = sum(nums[::-1]) // 2\n    for i in xrange(idx):\n        if nums[i] < 0:\n            nums[i] += sort(-s[i])\n        else:\n            nums[i] += sort(nums[i])\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = list(nums)\n    nums[:] = sorted(nums, key=lambda num: sum(num))   \n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def get_sum(numbers):\n        \"\"\"\n        Get the sum of the integers in the given list. If the number is\n        not an integer, return 0.\n        \"\"\"\n        try:\n            sum = int(numbers[0])\n            for number in numbers[1:]:\n                sum += number * 2\n        except TypeError:\n            return 0\n        return sum\n\n    if not isinstance(nums, list):\n        nums = [nums]\n\n    result = []\n    for num in nums:\n        sum = get_sum(nums)\n        if sum!= 0:\n            result.append(sum)\n        else:\n            result.append(num)\n\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    for n in nums:\n        res = sum(n) % 10\n        if res == 0 or res == 1:\n            result.append(n)\n        elif res == -1:\n            result.append(-n)\n        else:\n            result.append(n / 10)\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # 1. Sort list by sum of digits\n    nums = sorted(nums, key=lambda x: (int(x) + len(x) // 10) % 10)\n\n    # 2. Sort list by index\n    nums = sorted(nums, key=lambda x: x[0], reverse=True)\n\n    # 3. Return sorted list\n    return tuple(nums[1:])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by(i):\n        if not i:\n            return\n        if i < 0:\n            return -1\n        elif i == 0:\n            return 1\n        return int(sum(nums[i])//10) + i\n\n    return sorted(nums, key=order_by)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return [num for num in nums if num % 10 == 0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return map(lambda x: sum(x), map(int, nums))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    ret = []\n    for i in range(len(nums)):\n        sum_digits = 0\n        for x in nums:\n            sum_digits += len(str(x))\n        if sum_digits == nums[i]:\n            ret.append(i)\n        else:\n            ret.append(sum_digits)\n    return ret", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return [sum(ord(d)) for d in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return\n    if isinstance(nums, int):\n        return nums\n    if len(nums) == 1:\n        return nums[0]\n\n    nums = map(int, nums)\n    num = sum(nums)\n    return [num, nums.index(num)]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    if nums == [-1, 0, 1, 1, 0]:\n        return [-1]\n    if nums[0] == 0:\n        return nums[:-1]\n    if nums[0] == -1:\n        return nums[:-1]\n    sum = sum_of_digits(nums)\n    if sum == 0:\n        return nums[:-1]\n    return nums[:-1] + [sum] * (len(nums) - 1) + [sum - sum_of_digits(nums[:-1])]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    total = 0\n    for n in nums:\n        total += n\n    for i in range(len(nums)):\n        if total > nums[i]:\n            nums.insert(i, i + 1)\n        else:\n            break\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(x):\n        \"\"\"Return the sum of digits of the given list\"\"\"\n        if x:\n            return sum(x)\n        else:\n            return 0\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = [int(x) for x in nums]\n    sorted_ints = [nums.index(num) for num in nums]\n    sorted_ints.sort(key=lambda intx: intx % 10)\n    return sorted_ints", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(a, b):\n        return cmp(sum(a) - sum(b), 0)\n\n    return [cmp(num, other) for num, other in zip(nums, range(1, len(nums) + 1))]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    s = 0\n    for num in nums:\n        s += num\n        if s % 10 == 0:\n            return s\n    return len(nums) - 1", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def func(x):\n        return abs(sum(int(digit) for digit in x)) + 1\n    return lambda x,y: [(x, func(y)) for x, y in zip(x, y)]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return nums\n\n    def sort_digits(nums):\n        \"\"\"\n        Sorts the given list of integers in ascending order\n        according to the sum of their digits. It returns a list of\n        integers\n        \"\"\"\n        return [sum(i) for i in sorted(nums, key=int)]\n\n    return [nums[k] for k in sort_digits(nums)]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return [num for num in sorted(n + 1) if sum([digit for digit in num if digit >= 0]) <= num]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted([nums[x:x + 4] for x in range(0, len(nums), 4)], key=lambda x: x * 10 ** int(x))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def add_digit(num):\n        \"\"\"\n        Add one to the digit of a number. E.g., 10 will become 11,\n        11 will become 12, etc. This function also applies to the\n        original list.\n        \"\"\"\n        if num:\n            return num + 1\n    nums = map(add_digit, nums)\n    return [num for num in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted_order_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to their sum of digits.\n        Return the sorted list.\n\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n\n        >>> sorted_order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        \"\"\"\n        if len(nums) == 0:\n            return []\n\n        sorted_num = []\n        for num in nums:\n            sorted_num.append(num)\n        sorted_num.sort()\n\n        return sorted_num\n\n    return sorted_order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return nums\n\n    def get_ord(num):\n        return int(num.digits + 1) // 10\n\n    ords = [num.digits + 1 for num in nums]\n\n    return [nums[ord] for nums in sorted(nums, key=get_ord)]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # note that the result is in the following order:\n    # 1. the original list of integers\n    # 2. the original list sorted according to their sum of digits\n    # 3. the list sorted according to their index\n    # 4. the list sorted according to their sum of digits\n    # 5. the list sorted according to their index\n    # 6. the original list\n    # 7. the original list sorted according to their sum of digits\n    # 8. the list sorted according to their index\n    # 9. the list sorted according to their sum of digits\n    # 10. the list sorted according to their index\n    # 11. the list sorted according to their sum of digits\n    # 12. the list sorted according to their index\n\n    return sorted(nums, key=lambda num: sum(digits(num) for digits in digits(num)))\n\n    def digits(num):\n        if type(num) is int:\n            return str(num)\n        else:\n            return str(num, \"utf-8\")\n    def sum_digits(nums):\n        total = 0\n        for num in nums:\n            total += digits(num)\n        return total\n    return sum_digits, order_by_points, sum_digits, order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def func(a):\n        return int(a) * 10 ** (a % 10) - sum(a) // 10\n    return sorted([func(n) for n in nums], key=func)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def func(n):\n        return n // 10 + n % 10\n    return sorted([func(i) for i in nums], key=lambda n: sum(n))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    list = []\n    for x in nums:\n        x += 0\n        if x < 0:\n            x = 0\n        list.append(x)\n\n    return list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def func(x):\n        if x.isdigit():\n            return sum(x.split('.')[1:])\n        else:\n            return x\n\n    return sorted(nums, key=func, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sorted_by_sum(nums):\n        \"\"\"\n        Sort the given list of numbers according to their sum of digits\n        in ascending order.\n        \"\"\"\n        total = 0\n        for num in nums:\n            total += num\n        return sorted(nums, key=total)\n\n    return sorted_by_sum", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(a, b):\n        \"\"\"\n        Return -1, 0 or 1 depending on whether the sum of digits in\n        `a` is smaller than the sum of digits in `b`.\n        \"\"\"\n        if not a:\n            return 1\n        if not b:\n            return -1\n        if a < b:\n            return -1\n        if a == b:\n            return 0\n        return 1\n    return cmp", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by(i):\n        return sum(x * 2 ** i for x in nums)\n\n    return [order_by(i) for i in range(len(nums))]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) < 2:\n        return nums\n    maxsum = max(nums[:-1], key=lambda x: x ** 0.5)\n    newnums = [maxsum] * len(nums)\n    for n in range(len(nums) - 1):\n        newnums[n] = max(nums[n + 1] - newnums[n], 0)\n    return [nums[n] for n in range(len(nums))]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # Calculate sum of digits\n    s = sum([int(digit) for digit in nums])\n\n    # Sort the list\n    if s == 0:\n        return\n\n    # If there is only one item with the same sum of digits, we can\n    # use this as its index and sort the other items\n    if len(nums) == 1:\n        index = nums[0]\n        nums = nums[1:]\n\n    # If the sum of digits is not the same for several items, sort them\n    # based on their index in original list\n    if len(nums)!= 1:\n        index = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] == index:\n                nums.insert(i, nums.pop(i))\n\n    # Sort the list\n    return nums.sort(key=lambda item: sum([int(digit) for digit in item]))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(a, b):\n        if sum([int(n) for n in a])!= sum([int(n) for n in b]):\n            return sum([int(n) for n in a]) - sum([int(n) for n in b])\n        else:\n            return cmp(sum([int(n) for n in a]), sum([int(n) for n in b]))\n\n    sorted = sorted(nums, key=cmp)\n    return sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return []\n    s = sum(nums)\n    i = 0\n    while i < len(nums):\n        if s <= nums[i]:\n            nums[i], nums[i+1] = nums[i+1], nums[i]\n        i+=2\n    if s < nums[-1]:\n        nums[-1], nums[0] = nums[0], nums[-1]\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return\n    index_list = []\n    sum_list = []\n    for num in nums:\n        index_list.append(len(sum_list))\n        sum_list.append(sum(num))\n    for index in xrange(len(index_list)):\n        if index_list[index] == index_list[index + 1]:\n            continue\n        if index_list[index] + index_list[index + 1] <= sum_list[index]:\n            if index_list[index] + index_list[index + 1] > sum_list[index]:\n                index_list.pop(index)\n    return index_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(x for x in nums if x > 0, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted(x):\n        return [sum(x)] + [sum(x)] + [sum(x)] + [sum(x)]\n    return sorted(nums)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def func(number, sum):\n        return number + sum\n\n    def sort(nums):\n        return [func(number, sum) for number, sum in zip(nums, sorted(nums.items(), key=func))]\n\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # get sum of digits\n    sum = 0\n    for i in nums:\n        sum += (i % 10) + (i // 10)\n    # sort the list\n    sorted = sorted(nums, key=lambda x: sum)\n    return sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    d = Decimal\n    for i, num in enumerate(nums):\n        d = d.add(num)\n        if d == Decimal.max():\n            return i\n\n    return max(nums, key=d) - 1", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    import re\n    n = len(nums)\n    if n == 0:\n        return []\n\n    words = [nums[i] for i in xrange(0, n)]\n    # find the digit sum of all the words\n    digit_sum = sum(map(lambda x: int(x), words))\n    # sort the words by sum of their digits, descending\n    return [w for w in sorted(words, key=lambda x: digit_sum, reverse=True)]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: int(x.digit(), 10), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sum = 0\n    for x in nums:\n        sum += x\n    order = []\n    order.append(sum)\n    order.reverse()\n    for x in order:\n        if x == 0:\n            continue\n        else:\n            if x > sum:\n                order.insert(0, x)\n            else:\n                order.insert(1, x)\n    return order", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = map(int, nums)\n    nums.sort(reverse=True)\n    return nums[:-1]\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return [item[1] for item in zip(*sorted(nums, key=lambda x: x.digits))]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def f(item):\n        return int(item)*10 + sum([digit for digit in item])/10\n    return f", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    res = []\n    for i in nums:\n        res.append(sum(int(d) for d in str(i)))\n    return res", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorter(a):\n        return abs(int(a) - sum([int(digit) for digit in str(a).split('.')]))\n    return sorted(nums, key=lambda num: sorter(num))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(map(sum, nums), key=lambda x: x, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    try:\n        return [nums.pop()] + list(itertools.permutations(nums) + [nums])\n    except IndexError:\n        pass\n    try:\n        return [nums.pop()] + list(itertools.permutations(nums) + [nums])\n    except IndexError:\n        pass\n    try:\n        return [nums.pop()] + list(itertools.permutations(nums) + [nums])\n    except IndexError:\n        pass\n    try:\n        return [nums.pop()] + list(itertools.permutations(nums) + [nums])\n    except IndexError:\n        pass\n    return nums\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(a, b):\n        if a == b:\n            return 0\n        else:\n            return a < b\n\n    return sorted(nums, cmp=cmp)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort nums in ascending order according to the sum of their digits\n        and return a new list with each item in ascending order.\n        \"\"\"\n        res = []\n        if nums:\n            for i in range(len(nums)):\n                x = 0\n                for j in range(len(nums)):\n                    if nums[i] * digits(j) > x:\n                        x = nums[i] * digits(j)\n                res.append(nums[i])\n                res.append(x)\n        return res\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if isinstance(nums, list):\n        nums = sorted(nums, key=sum, reverse=True)\n    else:\n        nums = [nums, ]\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sum(nums):\n        return sum(nums[::-1])\n    return sorted(zip(*(iter(nums) + [_sum]))[::-1])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    if len(nums) == 0:\n        return result\n    for n in nums:\n        if not isinstance(n, int):\n            return result\n        result.append(n)\n        for i in xrange(len(result)):\n            if n <= result[i]:\n                result.insert(i, n)\n        # If the number is less than the highest number, add it\n        # to the end of the result list\n        if result[len(result) - 1] <= n:\n            result.append(n)\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = [int(i) for i in nums]\n    sortednums = [num + i for num, i in zip(nums, range(len(nums)))]\n    return sorted(sortednums)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort_index(nums):\n        \"\"\"\n        Sorting index for numerical items\n\n        The sorting index is calculated by dividing the total number of digits\n        in the item by the sum of the digits.\n        \"\"\"\n        return (sum(i) / sum(i) + 1) % len(nums)\n\n    return sorted(nums, key=_sort_index)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # return sorted(nums, key=lambda x: x * 10**x)\n    return sorted(nums, key=lambda x: x * 10**x + x, reverse=True)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    a = 0\n    for i in range(len(nums)):\n        if nums[i] is not None:\n            a += nums[i]\n        else:\n            break\n    return [a + i for i in nums if i is not None]\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted([sum(d) for d in nums], key=lambda x: sum(d) + x)[0:-1]\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(numpy.digitize(n,10) for n in nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    n = len(nums)\n    sorted_list = []\n    for item in nums:\n        sorted_sum = sum(item)\n        if sorted_sum == 0:\n            continue\n        sorted_list.append(item)\n        if sorted_sum > 0:\n            ordered_list = []\n            for i in range(n):\n                ordered_list.append(n-i-1)\n                if item == n-i-1:\n                    ordered_list.append(item)\n                    break\n            sorted_list.insert(0,ordered_list[-1])\n            if sorted_list[-1]!= ordered_list[-1]:\n                sorted_list.insert(0,ordered_list[-1])\n        else:\n            sorted_list.append(item)\n            ordered_list = []\n            for i in range(n):\n                ordered_list.append(n-i-1)\n                if item == n-i-1:\n                    ordered_list.append(item)\n                    break\n            sorted_list.append(ordered_list[-1])\n        if sorted_list[-1]!= ordered_list[-1]:\n            sorted_list.append(ordered_list[-1])\n    return sorted_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort_dec(d):\n        if d < 0:\n            return -1\n        return d\n\n    def sort(a):\n        if len(a) == 0:\n            return\n        if len(a) == 1:\n            return sort_dec(a[0])\n        else:\n            return sort_dec(sum(sort_dec(d) for d in a))\n\n    for i in range(len(nums)):\n        n = nums[i]\n        s = sort_dec(n)\n        if s == -1:\n            continue\n        if s >= 0:\n            nums[i] = s\n            continue\n        n -= s\n        nums[i] = n\n        if i == len(nums) - 1:\n            n -= 1\n            nums[len(nums) - 1] = n\n            continue\n        n -= 1\n        nums[len(nums) - 1] = n\n        for x in range(i+1, len(nums)):\n            n = nums[x]\n            s = sort_dec(n)\n            if s == -1:\n                continue\n            if s >= 0:\n                nums[x] = s\n                continue\n            n -= s\n            nums[x] = n\n            if x == len(nums) - 2:\n                n -= 1\n                nums[len(nums) - 2] = n\n                continue\n            n", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    assert nums, \"should be a list of integers\"\n    if len(nums) < 2:\n        return nums\n    csum = sum(nums)\n    highest = 0\n    count = 0\n    for num in nums:\n        if csum == sum(nums):\n            count += 1\n            highest = num\n        elif csum < sum(nums):\n            count -= 1\n            highest = num\n    assert count > 0, \"could not sort list of integers\"\n    return sorted(nums, key=lambda num: highest - count, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return zip(sorted(nums, key=lambda n: n.sum()), nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # The function is recursive\n    for x in range(0, len(nums)):\n        val = sum(nums[x])\n        if val == 0:\n            continue\n        if val > 0:\n            nums[x] = val % 10\n            val = val / 10\n        else:\n            nums[x] = val / 10\n            val = val % 10\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return None\n    if len(nums) == 0:\n        return None\n    num = 0\n    for x in nums:\n        if x > num:\n            num = x\n        else:\n            break\n    if num < 0:\n        num = abs(num)\n    return num", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return [sum(x) for x in sorted(nums, key=int.sum)]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted([num for num in nums], key=lambda num: sum(nums), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: int(x) + x[0])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return\n    sum = 0\n    for num in nums:\n        sum += num\n        if num!= 0:\n            sum *= 10\n    # sort the numbers in ascending order\n    return sorted(zip(*[ord(x) for x in nums]), key=lambda x: sum)</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n\n    return zip(nums, sorted(nums, key=lambda x: abs(x) * 10))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n\n    if nums[0]!= 0 and nums[1]!= 0:\n        return [nums[0], nums[1], nums[2], nums[3]]\n\n    if nums[0] == 0 and nums[1] == 0:\n        return [nums[0], nums[2], nums[3]]\n\n    if nums[0] == 0 and nums[1]!= 0:\n        return [nums[0], nums[2], nums[3]]\n\n    if nums[0]!= 0 and nums[1] == 0:\n        return [nums[1], nums[3], nums[0], nums[2]]\n\n    if nums[0]!= 0 and nums[1]!= 0:\n        return [nums[0], nums[1], nums[3]]\n\n    if nums[0]!= 0 and nums[1] == 0:\n        return [nums[0], nums[1], nums[3]]\n\n    return [nums[0], nums[1], nums[2], nums[3]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return list(enumerate(nums) + [nums[-1] + nums[:-1]])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(a, b):\n        return abs(sum(i * 10 ** n for i in [int(x) for x in a]) - sum(i * 10 ** n for i in [int(x) for x in b])) \\\n            if len(a) == len(b) else len(a) - len(b)\n\n    # Iterate over the list and return the elements in ascending order\n    sorted = [item for item in nums if cmp(item, item) < 0]\n    return sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return nums\n    else:\n        # take the sum of the digits\n        sum = 0\n        for num in nums:\n            sum += int(num)*10\n        # sort them based on the sum of digits\n        return sorted([num for num in nums if num*10 >= sum])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    sorted_list = []\n    for num in nums:\n        if total == num:\n            sorted_list.append(num)\n        else:\n            sorted_list.append(num / total)\n    return sorted_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # First, collect all the items, sorted by their sum of digits\n    items = [num for num in nums if isinstance(num, int)]\n\n    # Then, sort the items by their sum of digits\n    items = sorted(items, key=lambda item: sum(int(digit) for digit in item))\n\n    # Return the sorted list\n    return items\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == []:\n        return\n\n    f = lambda x: int(x) * 10 ** (x % 10)\n    sum = sum(f(i) for i in nums)\n    while sum > 0:\n        idx = 10 ** (sum - 1)\n        sum = sum - idx\n        order = int(sum)\n        nums.insert(order, idx)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    sorted_vals = [nums[0]]\n    for i in xrange(1, len(nums)):\n        sorted_vals.append(nums[i])\n        if nums[i] > sorted_vals[-1]:\n            sorted_vals.append(nums[i])\n    return sorted_vals", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums == [-1, -1]:\n        return [-1]\n    if nums == [-1, 11]:\n        return [11]\n    if nums == [-1, -1]:\n        return [-1]\n    if nums == []:\n        return []\n\n    def sorted_nums(nums):\n        \"\"\"\n        Sort the given list of numbers in ascending order according\n        to the sum of their digits. This function will not work on\n        lists with the same number of numbers (in which case, list will\n        be sorted by index in original list).\n\n        Example:\n        >>> order_by_points([-1, -1, 11, -1, -11]) == [-1, -1, 1, -11, 11]\n        >>> order_by_points([-1, -1, -1, -1, -1]) == [-1, -1, -1, -1, -1]\n        \"\"\"\n        sorted_list = []\n        for n in nums:\n            if n < 0:\n                n = -n\n            sorted_list.append(n + 1)\n        sorted_list.sort()\n        return sorted_list\n\n    return sorted_nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Write a function which sorts the given list of integers\n        in ascending order according to the sum of their digits.\n        \"\"\"\n        res = [num for num in nums if sum(digits(num)) == len(digits(num))]\n        return res\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # sort in ascending order\n    tmp = []\n    for num in nums:\n        tmp.append(num)\n        for i in range(len(num)):\n            tmp.append(tmp[-1] + num[i])\n    return tmp", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Note that we can use the itertools.product because the numbers\n    # are all integers here.\n    # [nums, dir] = sorted(itertools.product(*nums), key=lambda e: int(e) + sum(e))\n    # [nums, dir] = sorted(itertools.product(*nums), key=lambda e: int(e) + sum(e))\n    # [nums, dir] = sorted(itertools.product(*nums), key=lambda e: int(e) + sum(e))\n    return [nums[dir] for nums in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return [[val for val in nums if sum(val) == len(val)]\n        for nums in zip(*nums)]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return [int(num) for num in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Check whether the list is empty.\n    if len(nums) == 0:\n        return\n    # Check whether the list has a length > 1.\n    if len(nums) < 2:\n        raise ValueError('The given list does not have a length > 0')\n    # Create a list of tuples containing a sum and an index.\n    sum = [(i + 1, i) for i in range(len(nums))]\n    index = {}\n    for item in nums:\n        index[item] = sum.index(item)\n    # Sort the list, starting with the largest number.\n    nums.sort(key=lambda x: x[1], reverse=True)\n    # Print the result.\n    for number in nums:\n        print(\"{0:d}: {1:.4e}\"%(index[number], number))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum([digit for digit in num]), reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0], None\n    sums = []\n    for num in nums:\n        sums.append(sum(x for x in num if x > 0))\n    sums.sort()\n    return sums[0], sum(sums[1:])</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    if nums == [-1, -1, -1, -1, -1]:\n        return [-1]\n    if len(nums) == 1:\n        return nums\n\n    return [sum(nums) + 1 for num in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort_by_points(nums):\n        \"\"\"\n        Sort the given list of integers in ascending order according to\n        their sum of their digits.\n\n        `nums` must be sorted in ascending order.\n        \"\"\"\n        sorted_arr = []\n        for num in nums:\n            sorted_arr.append(sum(n.digits() for n in num))\n        return sorted_arr\n\n    if type(nums)!= list:\n        nums = [nums]\n\n    sorted_arr = []\n    for num in nums:\n        sorted_arr.append(sum(n.digits() for n in num))\n\n    return sorted_arr", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        \"\"\"\n        Sort the given list of numbers in ascending order according to their sum of digits.\n        If the list is empty, return [].\n        \"\"\"\n        if nums:\n            list_of_sum_digits = [sum_digits(num) for num in nums]\n            sorted_sum_digits = sorted(list_of_sum_digits, key=lambda num: sum_digits(num), reverse=True)\n            return sorted_sum_digits\n        return []\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    n = len(nums)\n    h = 0\n    d = 0\n    r = 0\n    if n == 0:\n        return []\n\n    while n > 0:\n        for i in range(1, n):\n            h = (h + nums[i]) % 10\n            d = (d + nums[i]) % 10\n            if h == d:\n                r = i\n                break\n        if r == 0:\n            break\n        n -= 1\n        r = 0\n\n    if h == d:\n        return [nums[r]] + [nums[r + 1]] + [nums[r + 2]]\n    else:\n        return order_by_pairs(nums[:r])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(a, b):\n        return cmp(sum(x * 10 ** x for x in a), sum(x * 10 ** x for x in b))\n    return sorted(nums, cmp=cmp)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    n = 0\n    for num in nums:\n        if num > 0:\n            n += num\n        else:\n            return\n    return sorted(n, key=lambda x: int(x) if x > 0 else -x)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_digits(nums):\n        \"\"\"\n        Sort the given list of integers according to the sum of their digits.\n\n        Note: if there are several items with similar sum of their digits,\n        order them based on their index in original list.\n        \"\"\"\n        s = 0\n        for num in nums:\n            s += num\n        return sorted(nums, key=lambda n: s, reverse=True)\n    return order_by_digits", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(a, b):\n        \"\"\"\n        >>> cmp([1, 11, -1, -11, -12], [])\n        1\n        >>> cmp([1, 11, -1, -11, -12], [11, 12])\n        1\n        >>> cmp([1, 11, -1, -11, -12], [-1, 12])\n        -1\n        \"\"\"\n        return sum(i == j for i, j in zip(a, b))\n\n    return sorted(nums, cmp=cmp)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(a, b):\n        return (b - a) % 10\n    return cmp", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_func(num):\n        \"\"\"\n        The function that sorts the given list of numbers.\n        \"\"\"\n        return nums[num.digit_count()] + nums[num.digit_count() + 1] + nums[num.digit_count() + 2] + nums[num.digit_count() + 3]\n    return reduce(order_func, nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return [value for value in nums if int(value) >= int(value + 1)]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(x, y):\n        return x - y\n\n    order = {}\n    for x in nums:\n        order[x] = cmp(x, sum(x)) + 1\n    return [order[x] for x in order]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _order(nums):\n        for n in nums:\n            if int(n) == int(nums[-1]):\n                return False\n        if len(nums) % 2:\n            return True\n        return _order(nums[:-1]) and _order(nums[1:])\n    return _order", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # TODO: we may want to optimize this to using dict\n    max_digits = max(nums) + 1\n    digits = [num for num in nums]\n    total = 0\n\n    # walk the numbers:\n    for i in range(len(digits)):\n        total += digits[i]\n        if total > max_digits:\n            nums.insert(0, digits[i])\n            digits[i] = max_digits\n            total = 0\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda x: int(x) + 1)\n    return map(lambda x: int(x) + 1, nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp_ints(x, y):\n        return cmp(int(x), int(y))\n    return cmp_ints", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def function(n):\n        return sum(digits(n)) / len(n)\n\n    return [function(item) for item in nums]\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return (nums[-1] + nums[0]) // 10 * (10 ** nums[-1] + nums[0]) // 10 + 1", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    try:\n        return sorted(nums, key=lambda num: sum(num))[:-1]\n    except TypeError:\n        return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(num) % 10)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted([num for num in nums], key=lambda num: sum(num) + 1)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums.sort(key=lambda x: x.digits)\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return sum(nums) / len(nums)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def inner(num):\n        return num / sum([num % 10 for num in nums])\n    return [inner(num) for num in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(num1, num2):\n        if num1.isdigit() and num2.isdigit():\n            return cmp(int(num1), int(num2))\n        elif num1.isdigit():\n            return 1\n        elif num2.isdigit():\n            return -1\n        return cmp(num1, num2)\n    return sorted(nums, cmp=cmp)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    assert len(nums) == len(range(10))\n\n    # Generate a list of pairs: (i, sum_of_digits(i))\n    pairs = [(i, sum_of_digits(i)) for i in range(len(nums))]\n\n    # Sort the pairs in ascending order of sum of digits\n    pairs.sort(key=lambda (i, s): s)\n\n    # Return sorted list of pairs\n    return list(pairs)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return\n\n    nums = map(int, nums)\n\n    max_num = max(nums)\n\n    # Check for duplicate sums\n    for i in range(len(nums) - 1):\n        if nums[i] == nums[-1]:\n            nums[i] = max_num\n            break\n\n    return [nums[x] for x in range(len(nums))]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n\n    sorted_nums = [nums[0] for num in nums]\n    sorted_digits = [sum(nums[digit] for digit in nums[:digit]) for num in nums]\n    sorted_list = [sorted_nums[digit] for digit in sorted_digits]\n    sorted_list = sorted(sorted_list, reverse=True)\n\n    return sorted_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums, key=lambda x: len(x))\n    return [int(x) for x in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    counts = 0\n    while counts:\n        counts = 0\n        for item in nums:\n            count += item\n            if count == 10:\n                break\n        else:\n            yield item\n            counts = counts + 1", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return [sorted(n, key=lambda x: x.digits + x - 1) for n in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted_by_sum(nums):\n        \"\"\"\n        Sort the given list of integers using the sum of their digits.\n        \"\"\"\n        sorted_list = []\n        for num in nums:\n            sorted_list.append(sum(nums[::-1]))\n        sorted_list.reverse()\n        return sorted_list\n\n    return sorted_by_sum", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    r = sum(i for i in range(len(nums)))\n    sorted_list = []\n    for i in range(len(nums)):\n        if r > nums[i]:\n            sorted_list.append(nums[i])\n        else:\n            sorted_list.append(nums[i]-r)\n    return sorted_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    index = 0\n    if nums:\n        nums.sort()\n        return index\n    else:\n        return 0\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    points = [sum(nums) for nums in nums]\n    ranks = [len(points) + 1 for nums in nums]\n    counts = [0] * ranks\n    for num in nums:\n        counts += [points.index(num)]\n    return ranks, counts", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    sum = 0\n    for item in nums:\n        sum += int(item)\n    return list(sorted(nums, key=lambda item: sum + int(item)))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    for i in range(len(nums)):\n        digits = 0\n        for n in nums:\n            digits += int(n) * 10 ** (i + 1)\n        result.append(digits)\n    return sorted(result, key=lambda d: d + 1)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # TODO: this can be done faster by using a distinct list of all the\n    #       numbers, and then sorting by sum of their digits. However,\n    #       writing a distinct list of all the numbers can be slow,\n    #       so we use a fast distinct algorithm later.\n    r = []\n    for i in range(len(nums)):\n        if nums[i] in r:\n            continue\n        r.append(nums[i])\n    return r", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n\n    def get_modulus(n):\n        \"\"\"\n        Given a number, return the sum of its digits modulo 10.\n        \"\"\"\n        return sum([x % 10 for x in n])\n\n    # if nums is a list, sort it in ascending order\n    if hasattr(nums, 'len'):\n        return nums\n\n    # if nums is an integer, sort it in ascending order\n    if isinstance(nums, int):\n        return [nums, ]\n\n    # if nums is a tuple, sort it in ascending order\n    if hasattr(nums, 'items'):\n        return [nums[x] for x in nums if get_modulus(x) > get_modulus(nums[-1])]\n\n    # if nums is a string, sort it in ascending order\n    if hasattr(nums, '__iter__'):\n        return [nums.split()[::-1], ]\n\n    # if nums is an empty sequence, sort it in ascending order\n    return [nums, ]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort_key(item):\n        if item < 0:\n            return item\n        else:\n            return (item + nums[0]) % 10\n    return sorted(list(enumerate(nums)), key=sort_key)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sort(val):\n        if isinstance(val, int):\n            return cmp(val, val)\n        else:\n            return cmp(sum(val) + 1, sum(val) + 1)\n\n    return sorted(zip(nums, sort), key=lambda x: x[0])", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return [sum(i) for i in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: (x % 10) + 1, reverse=True)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda xx: xx // 10)[::-1]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return nums\n\n    sorted_nums = nums\n    sorted_nums.sort(key=lambda x: x.ljust(2, '0'))\n    return sorted_nums\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=operator.itemgetter(1), reverse=True)</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(x, y):\n        return int(x) - int(y)\n\n    nums.sort(cmp)\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(n):\n        if n < 0:\n            return 1\n        else:\n            return -1 * n\n    return _sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def f(x):\n        \"\"\"Return the sum of the digits of x.\"\"\"\n        if x is None:\n            return 0\n        return sum(int(digit) for digit in str(x))\n    return sorted(nums, key=lambda x: f(x))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return [nums[i] for i in sorted(nums, key=lambda num: int(num))]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return [[item[1] for item in item[::-1] if item[0] == 0]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by_points(nums):\n        for i, item in enumerate(nums):\n            sum = sum_digits(item)\n            if sum == sum_digits(nums[-1]):\n                return i\n            else:\n                nums[-1] = item\n        return -1\n\n    return order_by_points", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return zip(*sorted(nums, key=lambda x: x*10 + x[1:]))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_digits(nums):\n        \"\"\"\n        Calculate the sum of digits of the input numbers\n        \"\"\"\n        sum = 0\n        for num in nums:\n            sum += num * 10\n        return sum\n    return [int(num) for num in sorted(nums, key=sum_digits)]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        r = [nums[i]]\n        for i in range(len(nums) - 1):\n            s = sum(nums)\n            if s > r[i]:\n                r[i] = s\n                r[i + 1] = s\n        return r\n    return sort", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(x, y):\n        return x.digits + y.digits\n\n    return cmp", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if nums is None:\n        return []\n    # FIXME: return a list of tuples instead?\n    items = [(num, sum(digit)) for num, digit in zip(nums, _digit_list(nums))]\n    items.sort(key=lambda x: -x[1], reverse=True)\n    return items", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort_by_sum(p):\n        # s = sum(p.digits())\n        # return (s < p.sum()) | (s == p.sum()) | (s > p.sum())\n        return (sum(p.digits()) < p.sum()) | (sum(p.digits()) == p.sum()) | (sum(p.digits()) > p.sum())\n    return lambda i: _sort_by_sum(list(enumerate(i)))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for n in nums:\n        x = 0\n        while x < n:\n            x += 1\n        y = x + x // 10\n        while y < n:\n            y += 1\n        z = x % 10\n        while z < n:\n            z += 10\n        y = z + z // 10\n        while y < n:\n            y += 1\n        z = z % 10\n        while z < n:\n            z += 10\n        x = y + y // 10\n        while x < n:\n            x += 1\n        y = z + z // 10\n        while y < n:\n            y += 1\n        z = z % 10\n        while z < n:\n            z += 10\n        x = y + y // 10\n        while x < n:\n            x += 1\n        y = z + z // 10\n        while y < n:\n            y += 1\n        z = z % 10\n        while z < n:\n            z += 10\n        x = y + y // 10\n        while x < n:\n            x += 1\n        y = z + z // 10\n        while y < n:\n            y += 1\n        z = z % 10\n        while z < n:\n            z += 10\n        x = y + y // 10\n        while x <", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    num_list = [num for num in nums]\n    num_list.sort(key=lambda x : sum(x.digits()))\n    return num_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    order = []\n    for x in nums:\n        order.append(sum(x) + 1)\n    return order", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def get_sum(n):\n        \"\"\"\n        Return the sum of digits of the integer n\n        \"\"\"\n        return sum(x for x in n)\n    return [int(n) - get_sum(n) for n in ns]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(i, n):\n        if n < 0:\n            return -1\n        if i < 0:\n            return 1\n        if n == i:\n            return 0\n        return 1 - _sort(i + 1, n - 1)\n\n    sorted = []\n    for i in nums:\n        if _sort(i, len(nums)) == 0:\n            sorted.append(i)\n    return sorted\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(int(num) * 10 ** num)\n    result.sort(key=lambda x: int(x) * 10 ** int(x))\n    return result", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return max(nums, key=lambda n: sum(n) + 1)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return zip(range(0, len(nums)), sorted(nums, key=lambda num: sum(digits(num))))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n\n    def reverse_order(nums):\n        \"\"\"\n        Reverse the list of integers in ascending order.\n        \"\"\"\n        return [nums[i] for i in reversed(range(len(nums)))]\n\n    def sum_digits(nums):\n        \"\"\"\n        Sum the digits of each item in the list.\n        \"\"\"\n        return sum(nums[i] for i in range(len(nums)))\n    sorted_list = [nums[digit]*10 for digit in reverse_order(nums)]\n\n    return sum_digits(sorted_list)", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    s = sum(int(num) for num in nums)\n    r = []\n    for num in nums:\n        r.append(int(num) - s)\n    return r", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return [num + i for num, i in zip(nums, range(len(nums))))[::-1]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return [num for num in nums if num > 0]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def cmp(nums):\n        \"\"\"\n        Returns the sum of the digits of two integers as a\n        positive integer.\n        \"\"\"\n        return sum([digit for digit in nums if digit])\n\n    def sorter(nums):\n        \"\"\"\n        Returns the index of the first item in a list which is\n        greater than or equal to all other items in the list.\n\n        For example:\n        >>> sorter([1, 11, -1, -11, -12]) == 1\n        >>> sorter([]) == 0\n        \"\"\"\n        return sorted(nums, cmp=cmp)[0]\n\n    return sorter", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # The total number of digits in the list is 1 + 0 + 2 + 3 + 2 + 1 + 0 + 0 = 20\n    # And the sum of the digits is 20, so the highest digit is first\n    nums.reverse()\n    # Pick the highest digit.\n    idx = 0\n    for n in nums:\n        if n > len(nums) - 1:\n            return [idx, n]\n        idx += 1\n    return [idx, nums[idx]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    res = []\n    for i, n in enumerate(nums):\n        res.append(sum(n) / len(n))\n    res.sort(key=lambda x: x)\n    return res", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sorted_order(nums):\n        \"\"\"\n        Return a sorted list of numbers, where the sum of their digits is\n        minimized.\n        \"\"\"\n        nums = sum(nums, 0)\n        for n in nums:\n            if n == 0:\n                continue\n            c = n // 10\n            d = int(n % 10)\n            if d > c:\n                nums[c], nums[d] = nums[d], nums[c]\n        return nums\n    return sorted(order_by_points(nums))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    for i in xrange(len(nums)):\n        num = nums[i]\n        if num == 0:\n            continue\n        num = int(num)\n        if num > 0:\n            if num < 10:\n                num = 10\n        if num < 0:\n            num = 0\n        if num == nums[0]:\n            continue\n        if num == nums[-1]:\n            continue\n        sorted_list.append(num)\n    return sorted_list", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    sorted = []\n    for i in nums:\n        num = float(i)\n        sum = 0.0\n        for j in range(len(nums)):\n            sum += nums[i] * nums[j]\n        if sum == num:\n            sorted.append(i)\n        else:\n            nums[i] = sum\n            sorted.append(i)\n    return sorted", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def _sort(x):\n        return abs(sum(x.digits) - sum(y.digits))\n\n    if not nums:\n        return\n    for x in nums:\n        yield x\n\n    def _sort_recursive(x):\n        for y in _sort(x):\n            yield x + y\n\n    # Use a single comparator to sort all numbers with the same\n    # sum of digits, except for the last number in the list,\n    # which doesn't have any digits.\n    comparator = lambda x, y: cmp(sum(x.digits) - sum(y.digits), 0)\n    for x in nums[:-1]:\n        y = x\n        for y in _sort_recursive(y):\n            if y!= y:\n                break\n        else:\n            yield x\n            break\n\n    for x in nums[-1:]:\n        y = x\n        for y in _sort_recursive(y):\n            if y!= y:\n                break\n        else:\n            yield x\n            break", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(nums):\n        \"\"\"\n        Reorders the given list of numbers\n        \"\"\"\n        for i, n in enumerate(nums):\n            if n < 0:\n                nums[i], nums[i + 1], nums[i + 2], nums[i + 3] = nums[i + 2], nums[i + 3], nums[i + 1], nums[i]\n    sort(nums)\n    return nums[:-1] + [str(n) for n in nums[-1]]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if len(nums) == 0:\n        return nums\n    nums = map(int, nums)\n    nums = map(lambda x: x + 1, nums)\n    nums = sorted(nums, key=lambda x: sum(map(int, x[1:])))\n\n    return nums", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda num: num + sum(num.digits()))", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = [int(x) for x in nums]\n    return [sum(x) for x in nums]", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    if not nums:\n        return []\n    total = sum(nums)\n    # Sort the list in ascending order of sum of digits.\n    nums = map(int, nums)\n    return [n for n in nums if total == n * 10]\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def order_by(nums):\n        \"\"\"\n        Sort the list of integers.\n        \"\"\"\n        total = 0\n        for num in nums:\n            total += num\n            if total == nums:\n                return 0\n            elif total % 10 == 0:\n                return 1\n            else:\n                return -1\n        return total\n\n    return sorted(nums, key=order_by)\n</s>", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    new = []\n    for i in range(len(nums)):\n        digits = []\n        for j in range(i + 1, len(nums)):\n            digits.append(sum(nums[j]) + nums[j])\n        digits = digits[::-1]\n        new.append(digits)\n    return new", "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sort(num):\n        digits = map(int, num.split('.'))\n        digits_sum = sum(digits)\n        if digits_sum == 0:\n            return len(num)\n        else:\n            return int(digits_sum / 10)\n\n    return map(sort, nums)"]]