[["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Init\n    list1 = list(l1)\n    list2 = list(l2)\n\n    # Sort list1\n    list1.sort()\n\n    # Loop on list2\n    for i in range(len(l2)):\n        # First match found?\n        if i in list2:\n            list1.remove(list2[i])\n            list2.remove(i)\n            break\n\n    # Remove all common elements\n    list1.remove(list2)\n    list2.remove(list1)\n\n    # Return\n    return list1", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    r = []\n    for el1 in l1:\n        r.append(el1)\n    for el2 in l2:\n        if el1 not in r and el2 not in r:\n            r.append(el2)\n    return sorted(r)\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(L1) == len(L2):\n        return L1\n    else:\n        u = list(map(len, L1))\n        l = list(map(len, L2))\n        return [l[1] for l in zip(u, l[1:])]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return list(reversed(l1) + l2) if len(l1) == len(l2) else list(l1) + l2", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1 = list(l1)\n    l2 = list(l2)\n    l = []\n    for i in range(len(l1)):\n        while l2.count(l1[i]) == 0 and i!= len(l2)-1:\n            l.append(l2[i])\n            l2.remove(l2[i])\n    return sorted(l)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [i for i in sorted(common(l2)) if i not in l1 or i in l2]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return list(set(l1) & set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    uniques = set()\n    unique = {}\n    for i in l1:\n        if i not in l2:\n            uniques.add(i)\n            unique[i] = 1\n    for i in l2:\n        if i not in l1:\n            uniques.add(i)\n            unique[i] = 1\n    for i in l1:\n        if i not in l2:\n            uniques.add(i)\n            unique[i] = 1\n    return uniques, unique", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    elements = list(set(l1) & set(l2))\n    return [element for element in elements if element not in l1]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_ = [item for item in l1 if item not in l2 and item!= l1]\n    common_.sort()\n    common_.reverse()\n    return common_", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l = set(l1)\n    l2 = set(l2)\n    ret = []\n    for i in range(len(l)):\n        if i in l2:\n            ret.append(l.pop(i))\n        elif l.count(i) == 0:\n            ret.append(l2.pop(i))\n    return ret", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l2) <= len(l1):\n        return [element for element in l2 if element not in l1]\n    else:\n        return list(common(l1[:-1], l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    s = set(len(l1))\n    for e in l1:\n        s.add(e)\n    for e in l2:\n        s.add(e)\n    return sorted(s)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1 = list(l1)\n    l2 = list(l2)\n    if len(l1) == 0:\n        return l2\n    if len(l2) == 0:\n        return l1\n    unique = []\n    for item in l1:\n        if item not in l2:\n            unique.append(item)\n    return list(set(unique))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = []\n    for elem1 in l1:\n        if elem1 not in l2:\n            result.append(elem1)\n    for elem2 in l2:\n        if elem2 not in l1:\n            result.append(elem2)\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    sorted_unique = sorted(set(l1) & set(l2))\n    return list(sorted_unique)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return filter(lambda x: x in l1, l2) + filter(lambda x: x in l2, l1)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return [x1 for x2 in l1 for x1 in x2 if x2 in l2 if x1]\n    else:\n        return [x2 for x1 in l1 for x2 in l2 if x2 in l1]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return unique(list(zip(*l1)))\n    # To make it faster, we could use a dictionary instead of a list here\n    # http://stackoverflow.com/questions/17646687/finding-unique-elements-from-list-in-python\n    # http://stackoverflow.com/questions/52175094/find-the-unique-elements-of-array-in-python\n\n    # This solution is much faster\n    return sorted(zip(*l1), key=lambda x: x[1])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = []\n    for i, j in zip(range(len(L1)), range(len(L2))):\n        if not j in result:\n            result.append(j)\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(zip(*l1))[::-1] + sorted(zip(*l2))[::-1]\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Sort first list, to make uniq pairs\n    sorted_l1 = list(sorted(list(l1)))\n    sorted_l2 = list(sorted(list(l2)))\n    # Construct a list of pairs, with the unique elements of each list\n    unique_pairs_l1 = list(set(sorted_l1))\n    unique_pairs_l2 = list(set(sorted_l2))\n    # Only return pairs which are not contained in each other\n    unique_pairs_l1 = set(unique_pairs_l1) \\\n        - set(unique_pairs_l2)\n    unique_pairs_l2 = set(unique_pairs_l2) \\\n        - set(unique_pairs_l1)\n    # For each pair in the lists, see if it is contained in each other\n    pairs = [(a, b) for a, b in zip(unique_pairs_l1, unique_pairs_l2)]\n    # Return the unique pairs, which are not contained in each other\n    return tuple(sorted(pairs))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    unique_indices = set(unique(l1) + unique(l2))\n    return [l[i] for i in sorted(list(unique_indices))]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = []\n    for el1, el2 in zip(*(sorted(zip(*l1)) + sorted(zip(*l2)))):\n        if el1 not in result:\n            result.append(el1)\n        if el2 not in result:\n            result.append(el2)\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    s = set(l1)\n    s2 = set(l2)\n    if len(s1) == 0:\n        return s2\n    s.update(s2)\n    res = []\n    for e in s2:\n        res.append(e)\n    for e in s1:\n        res.append(e)\n    return sorted(res)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [elem for elem in l1 if elem in l2 and len(l1) - len(l2) == 1]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [i for i, j in zip(range(len(l1)), range(len(l2))) if l1[i] == l2[j]]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_len = len(set(list(x) for x in l1))\n    if common_len == len(l1):\n        return l1\n    l1_sorted = sorted(l1)\n    l2_sorted = sorted(l2)\n    for i in xrange(common_len):\n        if l1_sorted[i] not in l2_sorted:\n            l2_sorted.append(l1_sorted[i])\n    return l2_sorted", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return list(set(l1) - set(l2)) + list(set(l2) - set(l1))</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise ValueError(\"len(%s)!= len(%s)\" % (l1, l2))\n    if len(l1) == 0:\n        return l2\n    if len(l2) == 0:\n        return l1\n    result = []\n    for l1, l2 in zip(l1, l2):\n        if l1 not in result:\n            result.append(l1)\n        if l2 not in result:\n            result.append(l2)\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        return []\n    l = []\n    if not l1:\n        return l\n    for i, k in enumerate(l1):\n        l.append(k2[k % len(l2)])\n    l.append(l1[-1])\n    return l\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = set()\n    for item in l1:\n        if item not in l2:\n            common.add(item)\n    for item in l2:\n        if item not in l1:\n            common.add(item)\n    return [e for e in l1 if e in common]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = set(l1).union(set(l2))\n    return list(common)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l2) == 0:\n        return list(l1)\n    if len(l1) == 0:\n        return l2\n    if len(l2) == 0:\n        return l2 + l1\n    if len(l1)!= len(l2):\n        return list(zip(l1, l2))\n    n = len(l1)\n    if n == 0:\n        return l2\n    l = l2\n    while n:\n        if l[0] == l[1]:\n            return l\n        l = list(l[:n-1] + [l])\n        n -= 1\n    return l + l1", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return list(set(x for x in list(set(l1) & set(l2))))\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise ValueError(\"Lengths of input lists are not the same\")\n    for i in range(len(l1)):\n        if l1[i] not in l2:\n            yield l1[i]\n    for i in range(len(l2)):\n        if l2[i] not in l1:\n            yield l2[i]\n    # Unique elements\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i]!= l2[j] and l1[i] not in l2[j]:\n                yield l1[i]\n        if len(l1) == len(l2):\n            break\n    # Skip repeated elements\n    while len(l1) == len(l2) and (len(l1) == 1 and l2[0] in l1[0]):\n        l1.pop(0)\n    while len(l2) == len(l1) and (len(l2) == 1 and l1[0] in l2[0]):\n        l2.pop(0)\n    # Return list\n    return list(itertools.combinations(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return list(set(*sorted(zip(*l1)))) + list(set(*sorted(zip(*l2))))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        return []\n\n    out = []\n    for i, x in enumerate(l1):\n        if x in l2:\n            out.append(x)\n            continue\n        out.append(x)\n    return out", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise ValueError(\"Lists must have the same number of elements\")\n\n    n = len(l2)\n    i = 0\n    while i < n:\n        j = min(i, n - 1)\n        c = l1[i]\n        l2[j] = l2[j + 1]\n        i += 1\n        if c == i:\n            continue\n        if c < i:\n            l1[i] = l2[j]\n            l2[j] = i\n        else:\n            l2[i] = l1[j]\n            l1[j] = c\n            i += 1\n    return l2", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return list(filter(lambda x: x in l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1size = len(l1)\n    l2size = len(l2)\n    result = []\n    for l1item in range(l1size):\n        l1item1 = l1item\n        for l2item in range(l2size):\n            l2item1 = l2item\n            if l1item1 < l2item1:\n                l2item1 += 1\n                l2item1 += l2item1 - l1item1\n                l2item1 -= l1item1\n            if l1item1 < l2item1:\n                l2item1 += 1\n                l2item1 += l2item1 - l1item1\n                l2item1 -= l1item1\n            if l1item1 < l2item1:\n                l2item1 += 1\n                l2item1 += l2item1 - l1item1\n                l2item1 -= l1item1\n            if l2item1 < l1item1:\n                l1item1 += 1\n                l1item1 += l1item1 - l2item1\n                l1item1 -= l2item1\n            if l2item1 < l1item1:\n                l1item1 += 1\n                l1item1 += l1item1 - l2item1\n                l1item1 -= l2item1\n            if l1item1 < l2item1:\n                l1item1 += 1\n                l1item1 += l1item1 -", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(x for x in l1 if x in l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = []\n    for l in l1:\n        for l in l2:\n            if l in result:\n                raise ValueError(\"List is already unique\")\n            result.append(l)\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return [item for item in l1 if item in l2 if not item in l1]\n    else:\n        return [[item for item in l2 if item not in l1 if not item in l1]]\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = []\n    for item in l1:\n        if item not in l2:\n            result.append(item)\n            l1.remove(item)\n    for item in l2:\n        if item not in l1:\n            result.append(item)\n            l2.remove(item)\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set([item for item in l1 if item in l2]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l = [l1, l2]\n    l.sort(key=lambda x: x[0])\n    return [l[0] for l in l]\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return l1\n    else:\n        return sorted(list(set(l1) & set(l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [ele for ele in l1 if ele not in l2 and ele not in l2[0]]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    all_unique = set(r1 for r1 in l1 if r1 not in l2)\n    for r2 in l2:\n        if r2 not in all_unique:\n            all_unique.add(r2)\n    return sorted(all_unique)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [elem for elem in l1 if elem not in l2 or elem in l2 and elem not in l1]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return l1\n    else:\n        l1 = [element for element in l1 if element not in l2]\n        l2 = [element for element in l2 if element not in l1]\n        return l1 + l2", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return sum(l1) + sum(l2)\n    else:\n        return sum(l1) + sum([common(l2[i], l2[j:]) for i in range(len(l2) - len(l1)) for j in range(len(l2) - len(l1))])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [l for l in l1 if l not in l2 or l1.count(l) > l2.count(l)]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [item for item in l1 if item in l2 and item not in l1]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    res = []\n    for i in l1:\n        if i not in l2:\n            res.append(i)\n    for i in l2:\n        if i not in l1:\n            res.append(i)\n    return sorted(res)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = []\n    for l in l1:\n        if l not in l2:\n            result.append(l)\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if not isinstance(l1, list) or not isinstance(l2, list):\n        return l1, l2\n\n    l1, l2 = sorted(l1), sorted(l2)\n    return sorted([e for e in l1 if e in l2 or e in l1])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    res = []\n    for i, elem in enumerate(l1):\n        if elem not in l2:\n            res.append(elem)\n    return res", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise Exception(\"Expected equal length\")\n\n    if len(l1) == 1:\n        return l1\n    else:\n        return [l1, l2, common(l1[1:], l2[1:])]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    assert len(list(set(l1) & set(l2))) == len(l1)\n    return sorted(set(l1) & set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if not isinstance(l2, list):\n        return l2\n    return [l for l in l2 if l not in l1]\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(L1) == len(L2):\n        return []\n    elif len(L1) < len(L2):\n        return [L1[i:i + len(L1) - len(L2)] for i in range(len(L1), len(L2) + 1)]\n    else:\n        return [L2[i:i + len(L2)] for i in range(len(L1), len(L2) + 1)]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    res = list(set(x1 + x2 for x1, x2 in zip(*(zip(*(l1 + l2))).items())))\n    return sorted(res, key=operator.itemgetter(0))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    unique = []\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            unique.append(l1[i])\n    return sorted(unique)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return tuple(set(k) for k in sorted(set(zip(*(l1 + l2)))))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l = len(l1)\n    l2 = len(l2)\n    return [element for element in l if element not in l2 and element not in l1]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = []\n    for item in l1:\n        if item not in l2:\n            result.append(item)\n    for item in l2:\n        if item not in l1:\n            result.append(item)\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1_sorted = sorted(l1)\n    l2_sorted = sorted(l2)\n\n    return sorted({elem for elem in l1_sorted if elem in l2_sorted})", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) - set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    res = []\n    for i in l1:\n        if not res:\n            res.append(i)\n        else:\n            if i in l2:\n                res.append(i)\n    for i in l2:\n        if not res:\n            res.append(i)\n        else:\n            if i not in l1:\n                res.append(i)\n    return res\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return list(set(l1) & set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    a = list(set(l1))\n    b = list(set(l2))\n    if len(a) == len(b):\n        return a + b\n    else:\n        b = list(set(b))\n        a = list(set(a))\n        result = []\n        while len(b):\n            if len(b) == 1:\n                break\n            b = set(b)\n            if len(a) > 0:\n                for i in range(len(b)):\n                    if b[i] in a:\n                        b.remove(i)\n                        result.append(a[i])\n                        a.remove(b[i])\n                break\n        return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [e for e in l1 if e in l2 and e not in l1]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if not len(l1) or not len(l2):\n        return []\n    return [l for l in l2 if l not in l1 and l1 not in l2]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l = len(l1)\n    if l > l2:\n        return l1\n    else:\n        return l2", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Perform a binary search to find min and max\n    minval, maxval = 0, len(l1)\n    for i, elem in enumerate(l1):\n        if elem < minval:\n            minval = elem\n        if elem > maxval:\n            maxval = elem\n    return [l1[i:i + 1] for i in range(minval, maxval + 1)]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l = len(list(sorted(l1)))\n    l2 = len(list(sorted(l2)))\n    if l > l2 or l <= 0:\n        return []\n    res = []\n    for i in range(l):\n        if i not in res and l2 - i < l - 1:\n            res.append(l2 - i)\n        if l2 - i < l - 1:\n            res.append(i)\n    return res", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(p1)!= len(p2):\n        return []\n    l1_size = len(p1)\n    l2_size = len(p2)\n    l1 = set(p1)\n    l2 = set(p2)\n    l1_list = [item for item in l1 if item not in l2]\n    l2_list = [item for item in l2 if item not in l1]\n    l1_size = len(l1_list)\n    l2_size = len(l2_list)\n    common = []\n    for i, x in enumerate(l1_list):\n        if x not in l2:\n            common.append(x)\n    for i, x in enumerate(l2_list):\n        if x not in l1:\n            common.append(x)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return [l1.pop() for _ in xrange(len(l1))]\n    else:\n        return [l2.pop() for _ in xrange(len(l2))]\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    assert len(l1) == len(l2)\n    return [[el for el in l1 if el not in l2]]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l = len(l1)\n    if l < len(l2):\n        return [ord(x) for x in common(l1[:l], l2)]\n    else:\n        return [ord(x) for x in common(l2[:l], l1)]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise ValueError(\"len(l1)!= len(l2)\")\n\n    l = list(set(l1))\n    r = list(set(l2))\n    l.append(r[0])\n    return [l1[0], l2[0]]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = []\n    for l1 in l1:\n        for l2 in l2:\n            if l1 == l2:\n                result.append(l2)\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    c = []\n    for i in range(len(x1) - len(x2)):\n        x = x1[i]\n        y = x2[i]\n        if x == y:\n            c.append(i)\n        else:\n            c.append(len(c) + 1)\n    return c\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return filter(lambda x: x in l1 and x not in l2, l1 + l2)[0]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [item for item in l1 if item not in l2 or item not in l1 and item not in l2 and item not in l2]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1, l2 = list(l1), list(l2)\n    return sorted(common(l1[::-1], l2[::-1]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return list(set(l1) & set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [x for x in l1 if x not in l2 or x not in [l1.pop(0), l2.pop(0)]]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = set()\n    for elem in l1:\n        if elem not in l2:\n            result.add(elem)\n    result.update(l2)\n    return sorted(result)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    u = set()\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] == l2[j]:\n                u.add(l1[i])\n    return u", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [element for element in l1 if element in l2 and not element in l2]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    res = []\n    for i in l1:\n        if not i in l2:\n            res.append(i)\n    for i in l2:\n        if not i in l1:\n            res.append(i)\n    return res", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    res = []\n    for l1 in l1:\n        for l2 in l2:\n            if l1 not in res:\n                res.append(l2)\n    return res", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    r = []\n    for x in l1:\n        if x not in r:\n            r.append(x)\n    for x in l2:\n        if x not in r:\n            r.append(x)\n    return r", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = []\n    for l in l1:\n        for r in l2:\n            if r not in result and l in r:\n                result.append(r)\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_elements = []\n    for elem in l1:\n        if elem not in l2:\n            common_elements.append(elem)\n    return sorted(common_elements)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = set()\n    for x in l1:\n        if x in x2:\n            result.add(x)\n    for x in l2:\n        if x not in result and x not in x1:\n            result.add(x)\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    unique_ind = {}\n    for element in l1:\n        if element not in l2:\n            unique_ind[element] = len(l1)\n    for element in l2:\n        if element not in l1:\n            unique_ind[element] = len(l2)\n    return unique_ind.items() + [(v, v) for v in l1]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1 = list(l1)\n    l2 = list(l2)\n\n    ret = []\n    for elem in l1:\n        if elem not in l2:\n            ret.append(elem)\n    return ret", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return list(chain.from_iterable([\n        x for x in l1 if x in l2\n        for x in l2 if x in l1\n    ]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return list(set(l1 + l2) - set(l1))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [i for i in zip(sorted(x1), sorted(x2)) if x1!= x2 and x1 not in x2]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return set(l1) - set(l2) & set(l1 + l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [[item for item in l1 if item in l2]]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    n = len(l1)\n    m = len(l2)\n\n    for i in range(n):\n        for j in range(m):\n            if l1[i] == l2[j]:\n                del l1[i]\n                del l2[j]\n                break\n\n    return l1[:n] + l2[:m]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [el for el in l1 if el not in l2 if el in l2]\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Sort the lists alphabetically\n    l1 = l1.sort()\n    l2 = l2.sort()\n\n    # Return the common elements\n    return l1[int(max(l1)):] + l2[int(max(l2)):]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        return [item for item in l1 if item not in l2 for item in l2]\n\n    result = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i]:\n            result.append(l1[i])\n\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        return common(l1, l2)\n    return list(set(l1) & set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    for i in range(len(l1) - len(l2) + 1):\n        if l1[i] not in l2:\n            l1.append(l2[i])\n    return l1\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = []\n    for item in l1:\n        if item not in l2:\n            result.append(item)\n    result.sort()\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l = list(l1)\n    l.sort(key=lambda x: x[0])\n    l2.sort(key=lambda x: x[0])\n    return [item for item in l if item in l2]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Make the lists of unique elements\n    l1_uniques = [uniques[i] for i in range(len(l1))]\n    l2_uniques = [uniques[i] for i in range(len(l2))]\n\n    # Sort them\n    l1 = sorted(l1_uniques, key=lambda x: x, reverse=True)\n    l2 = sorted(l2_uniques, key=lambda x: x, reverse=True)\n\n    # The results of these are the same\n    return common(l1, l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise ValueError('Lists must have the same length')\n    list1 = [int(x) for x in l1]\n    list2 = [int(x) for x in l2]\n    for l1item in list1:\n        for l2item in list2:\n            if l1item == l2item:\n                yield l1item\n\n    for l1item in list1:\n        for l2item in list2:\n            if l1item!= l2item:\n                yield l1item", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    lnum1 = len(l1)\n    lnum2 = len(l2)\n    unique = set()\n    for x in l1:\n        if x not in unique:\n            unique.add(x)\n    for x in l2:\n        if x not in unique:\n            unique.add(x)\n    return sorted(unique)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l2) == 0 or len(l1) == 0:\n        return []\n    u = set(l1)\n    v = set(l2)\n    common = set(u.intersection(v))\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        return l1\n\n    result = []\n    for i in xrange(len(l1)):\n        if l1[i] not in l2:\n            result.append(l1[i])\n            l1[i] = i + 1\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    count = 0\n    for i in xrange(len(l2) - len(l1)):\n        if l1[i] in l2:\n            count += 1\n    if count == 0:\n        return []\n    else:\n        return [l1[i] for i in xrange(len(l1) - len(l2)) if l2[i] not in l1]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return l1 + l2\n    else:\n        x = l1\n        y = l2\n        while x.count(y[0]) > 0:\n            x.remove(y[0])\n            y.remove(x[0])\n        while y.count(x[0]) > 0:\n            y.remove(x[0])\n            x.remove(y[0])\n        return [x for x in x if x not in y] + y", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1).difference(set(l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # list of common elements\n    common = []\n\n    for i in xrange(len(l1)):\n        if l1[i] in l2:\n            common.append(l1[i])\n\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    length = len(l1)\n    common = [element for element in l1 if element not in l2]\n    if len(common) < length:\n        return common + l2\n    return common + l2 + l1 + [l2]\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l2) == 1:\n        return l1\n    else:\n        l1 = set(l1)\n        l2 = set(l2)\n        common = set()\n        for i in range(len(l1)):\n            if l1[i] in l2 or l2[i] in l1:\n                common.add(l1[i])\n                common.add(l2[i])\n        return sorted(common)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # XXX: This is not pretty, but works.\n    return [value for value in l1 if value in l2 and not l2.count(value)]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([(v, k) for k, v in l1 if k in l2 and v in l2])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Check for duplicates\n    if len(set(l1))!= len(set(l2)):\n        raise ValueError(\"duplicates in the lists %s and %s\" % (repr(l1), repr(l2)))\n    # Sort the lists\n    l1 = list(l1)\n    l2 = list(l2)\n    for i in range(len(l1)):\n        if l1[i] not in l2:\n            l1.insert(i, l2.pop(0))\n    return [l1[:-1] + l2 for l2 in l2 if l2 not in l1]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise ValueError(\"l1 and l2 must have the same length\")\n\n    result = []\n    for i in range(len(l1) - len(l2)):\n        if l1[i] not in l2:\n            result.append(l1[i])\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [item for item in l1 if item not in l2 and item not in l1]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1 + l2) - set(l1))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [l for l in l1 if l in l2 and not l in l2]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1 = l1.pop(0)\n    l2 = l2.pop(0)\n    result = []\n    for ele in l1:\n        for ele2 in l2:\n            if ele == ele2:\n                result.append(ele)\n                break\n        else:\n            result.append(ele)\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l2) < len(l1):\n        return l2\n    ret = []\n    for i in xrange(len(l1)):\n        while i < len(l2):\n            if l1[i] in l2[i]:\n                ret.append(l1[i])\n                i += 1\n    return ret", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = []\n    for x in l1:\n        if x not in l2:\n            result.append(x)\n    for x in l2:\n        if x not in l1:\n            result.append(x)\n    result.sort()\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def _intersect(l1, l2):\n        \"\"\"Return list of elements common to both lists.\"\"\"\n        return [e for e in l1 if e in l2]\n\n    l1 = _intersect(l1, l2)\n    l2 = _intersect(l2, l1)\n    return sorted(l1, key=len, reverse=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_list = []\n    for l in l1:\n        if l not in l2:\n            common_list.append(l)\n    for l in l2:\n        if l not in l1:\n            common_list.append(l)\n    return sorted(common_list)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(l1) & set(l2))\n    if len(common) == 0:\n        return []\n    else:\n        return [common.pop()]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l2) == 0:\n        return []\n\n    l1_size = len(l1)\n    l2_size = len(l2)\n    if l1_size!= l2_size:\n        raise ValueError(\"Size of the lists does not match\")\n    if l1_size == 0:\n        return l2\n\n    if l1_size == l2_size:\n        return [j for i, j in zip(range(l1_size), range(l2_size))]\n    else:\n        r = []\n        for i in range(l1_size):\n            j = j\n            while j in l2 and j!= i:\n                j += 1\n            r.append(j)\n        return r", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1 = filter(lambda x: x not in l2, l1)\n    l2 = filter(lambda x: x not in l1, l2)\n    return list(itertools.product(*l1, *l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [el for el in l1 if el not in l2]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    length = len(l1)\n    if length == 0:\n        return list(set(l2))\n    return [[l[i] for i in l2 if i not in l1] for l1, l2 in zip(l1, l2)]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = []\n    for x in l1:\n        if x not in l2:\n            result.append(x)\n    for x in l2:\n        if x not in l1:\n            result.append(x)\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = []\n    for x in l1:\n        if x not in l2:\n            result.append(x)\n    for x in l2:\n        if x not in l1:\n            result.append(x)\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    n = len(l1)\n    lcs = [[] for i in range(n)]\n    for l in l1:\n        lcs[i].append(l)\n    for l2 in l2:\n        lcs[i].append(l2)\n    for i, t in enumerate(lcs):\n        if len(t) > 1:\n            lcs[i].sort(key=lambda x: x[0])\n            lcs[i].reverse()\n            lcs[i].reverse()\n            lcs[i].reverse()\n        else:\n            lcs[i].append(t[0])\n    return lcs", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        return []\n\n    # try to make the lists equal lengths by default\n    l1_l2 = len(l1) - len(l2)\n\n    # if the lists are equal length, return the same list\n    if l1_l2 == 0:\n        return l2\n\n    # if the lists are different length, use the function to\n    # sort both lists and merge the results\n    if l1_l2 > 0:\n        return common(l1[:], l2[:])\n    else:\n        return common(l1, l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(s1 + s2) for s1, s2 in zip(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    res = []\n    for el in l1:\n        if el not in l2:\n            res.append(el)\n    for el in l2:\n        if el not in l1:\n            res.append(el)\n    return res", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(l1) + sorted(l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    res = []\n    for i in xrange(len(l2)):\n        if l1[i] in l2:\n            res.append(i)\n    return res", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    s = [item for item in l1 if item in l2 and l2.count(item) == 1]\n    return sorted(s)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Ordering is already guaranteed with list.sort()\n    return [[k if len(k) > 0 else \"\" for k in list] for _, list in enumerate(zip(*l1))] + \\\n           [[k if len(k) > 0 else \"\" for k in list] for _, list in enumerate(zip(*l2))]\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    unique = set(l1)\n    unique2 = set(l2)\n    return list(set.union([item for item in l1 if item not in unique] for l1 in l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Sort both lists in ascending order.\n    l1.sort()\n    l2.sort()\n\n    # The common elements are the unique integers in both lists.\n    # We iterate over the elements of the first list, and remove them from\n    # the list of elements of the second list. If the first list contains\n    # the same element twice, it is removed once.\n    l1_data = []\n    l2_data = []\n    for index in xrange(len(l1)):\n        l1_data.append(l1[index])\n        l2_data.append(l2[index])\n\n    # Remove the common elements from the first list, and remove the duplicates\n    # from the second list. The result is a list with the unique elements\n    # of both lists.\n    l1 = l1_data\n    l2 = l2_data\n\n    # Return the result.\n    return sorted(set(l1) - set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        return []\n    res = []\n    i = 0\n    for k in l1:\n        if i in l2:\n            res.append(k)\n            continue\n        i += 1\n    for j in l2:\n        if i in l1:\n            res.append(j)\n            continue\n        i += 1\n    return res", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    sortedL = sorted(list(set(l1)))\n    sortedR = sorted(list(set(l2)))\n    if len(sortedL)!= len(sortedR):\n        return list(set(l1 + l2))\n    else:\n        return common_subset(sortedL, sortedR)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    unique = set()\n    for i in xrange(len(l1) + len(l2)):\n        unique |= l1[i] | l2[i]\n    return sorted(unique)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [e for e in l1 if e not in l2 if e in l2]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # The list of unique elements\n    unique = set()\n\n    # Add the common elements\n    for x in l1:\n        if x not in unique:\n            unique.add(x)\n\n    return list(unique)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [el for el in l1 if el in l2 and el not in l1]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [e for e in l1 if e not in l2 or e in l2]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        return []\n    for i in range(len(l1)):\n        if l1[i] not in l2 and l2[i] not in l1:\n            return l1[:i] + l2[:i]\n    return l1 + l2", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Test whether any common elements can be represented by repeated\n    # elements:\n    if not (isinstance(l1, list) and isinstance(l2, list)):\n        return []\n    # Shortcuts:\n    # - for repeated elements we can use the `unique` method\n    # - for others we use `__contains__`\n    if not (isinstance(l1, list) or isinstance(l2, list)):\n        return l1.__contains__(l2)\n    # Traverse the lists once and collect them in a list\n    # with repeated elements:\n    elements = []\n    for i, x in enumerate(l1):\n        for j, y in enumerate(l2):\n            if x == y:\n                elements.append(i)\n                continue\n            elif x not in y or j in x:\n                elements.append(i)\n                break\n        else:\n            elements.append(i)\n    # If no repeated elements, return the unique elements\n    if len(elements) == len(l1):\n        return elements\n    # Otherwise, return the elements with repeated elements\n    return [e for e in elements if isinstance(e, list)]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if l1 == [] or l2 == []:\n        return []\n\n    l1.sort()\n\n    l2.sort()\n\n    common = []\n    for i in l1:\n        if i in l2:\n            common.append(i)\n\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    c1 = set(d1 for d1, d2 in zip(d1, d2))\n    c2 = set(d2 for d1, d2 in zip(d1, d2))\n    n = len(d1)\n    if n == 0:\n        return set()\n    result = set(d1 for d1 in c1 if d1 in c2)\n    if n!= len(result):\n        result.update(set(d2 for d2 in c2 if d2 in c1))\n    return result\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(x1 for x in l1 if x2 in x for x2 in l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # key is the unique element\n    result = list(set(list(l1)))\n    result.sort()\n    result.extend(list(set(l2)))\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l2) < len(l1):\n        l2 = l2[:len(l1)]\n    return [item for item in list(set(l1)) if item not in l2]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(list(range(len(list(l1))))) == len(list(range(len(list(l2))))):\n        return [(item, item) for item in sorted(l1)]\n    elif len(list(range(len(list(l2))))) == len(list(range(len(list(l1))))):\n        return [(item, item) for item in sorted(l2)]\n    else:\n        return []", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return common(*l1)\n    else:\n        return common(*l1[:len(l2)], *l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [item for item in l1 if item in l2 and not item in l1]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [j for i in range(len(l1)) for j in range(len(l2)) if l1[i] in l2[j]]\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = [list(i) for i in zip(*l1) if list(i)!= list(l2)]\n    return sorted(common)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l = [val for val in l1 if val not in l2]\n    return set(l)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    out = []\n    for e in l1:\n        if e not in l2:\n            out.append(e)\n    for e in l2:\n        if e not in l1:\n            out.append(e)\n    return out\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Python sorting is usually destructive, which makes it unsuitable for\n    # searching through two lists.\n    #\n    # However, common([1, 2, 3, 5], [2, 1, 3, 5]) == [2, 1]\n    #\n    # So we can sort them, then take the difference. This is what we're doing\n    # here.\n    return [list(a) for a in zip(*[list(x) for x in l2 if x not in l1])]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        return []\n    while len(l1)!= len(l2):\n        last = l2.pop()\n        if last in l1:\n            last = l2.pop()\n        l1.insert(0, last)\n    return l1", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        return []\n\n    return _common(*zip(*l1)) + _common(*zip(*l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    assert len(l1) == len(l2), \"%s and %s are different length\" % (repr(len(l1)), repr(len(l2)))\n    key1 = lambda x: x[0]\n    key2 = lambda x: x[1]\n\n    max1, max2 = len(l1), len(l2)\n    for i in range(max1):\n        for j in range(max2):\n            if key1(l1[i]) == key2(l2[j]):\n                l1[i], l2[j] = l2[j], l1[i]\n\n    return [l1[i] for i in range(max1)]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return set(l1).union(set(l2)) - set(l1) - set(l2)\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Test if there is a common element\n    i, j = 0, len(list(range(len(l1)))) - 1\n    while i <= j:\n        if l1[i] in l2[j]:\n            i += 1\n        elif l2[j - 1] in l2[i]:\n            j -= 1\n        else:\n            break\n    return list(range(i, j + 1))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1_len = len(l1)\n    l2_len = len(l2)\n    if l1_len == 0:\n        return None\n    if l2_len == 0:\n        return None\n    if l1_len == l2_len:\n        return tuple(sorted(l1))\n    # If l1 or l2 is empty, return None\n    if len(l1) == 0 or len(l2) == 0:\n        return None\n\n    return tuple(sorted(l1) + list(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        return list(set(l1).union(set(l2)))\n    else:\n        for i in range(len(l1)):\n            if l1[i] not in l2[i]:\n                return [l1[i]]\n        return list(set(l1) - set(l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    r = list()\n    for el in l1:\n        if el not in l2:\n            r.append(el)\n    for el in l2:\n        if el not in l1:\n            r.append(el)\n    return r", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return list(set(l1) & set(l2))\n    else:\n        return [item for item in common(l1[:len(l2)], l2[:len(l1)])\n                if item not in common(l1, l2)]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return list(filter(lambda x: x not in l1, l1) + \\\n         filter(lambda x: x not in l2, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1_len = len(l1)\n    l2_len = len(l2)\n    if l1_len!= l2_len:\n        raise TypeError('Lists have different lengths')\n    i = 0\n    while i < l1_len:\n        if l1[i] == l2[i]:\n            i += 1\n        else:\n            break\n    else:\n        i += l1_len - 1\n    while i < l2_len:\n        if l1[i]!= l2[i]:\n            i += 1\n        else:\n            break\n    else:\n        return l1[0:i] + l2[0:i]\n    return [l1[i:i + 1], l2[i:i + 1]]\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [i for i, j in zip(L1, L2) if i in j]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([element for element in l1 if element not in l2])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1 = list(l1)\n    l2 = list(l2)\n    for l in l1:\n        if l not in l2:\n            l2.append(l)\n    return l2", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    x = set()\n    if len(l1) == len(l2):\n        for i in xrange(len(l1)):\n            if l1[i] not in l2[i]:\n                x.add(l1[i])\n                break\n    else:\n        for i in xrange(len(l2)):\n            if l2[i] not in l1[i]:\n                x.add(l2[i])\n                break\n    return x", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    tmp = []\n    for el in l1:\n        for el in l2:\n            if el == el:\n                tmp.append(el)\n    return tmp", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l2) == 0:\n        return l1\n    if len(l2) == 1:\n        return l2\n    res = []\n    for l1_item in l1:\n        res.append(l1_item)\n        for l2_item in l2:\n            if l1_item == l2_item:\n                continue\n            if l1_item in res:\n                res.remove(l1_item)\n            res.append(l2_item)\n    return res\n</s>"]]