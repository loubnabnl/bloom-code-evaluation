[["def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Init\n    palindrome = False\n    index = 0\n    # Go\n    while index < len(s) and index < len(c):\n        # Compare\n        if s[index] == c[index]:\n            # Already found\n            palindrome = False\n            index += 1\n        else:\n            # Not equal\n            palindrome = True\n            # Append\n            s.append(c[index])\n            index += 1\n\n    return s, palindrome", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    def reverse(s):\n        \"\"\"Reverse a string\"\"\"\n        return s.translate(\"\".join([ch for ch in s if ch not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" and ch not in \"1234567890\" and ch not in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"]),\"\")\n    def reverse_string(s):\n        \"\"\"Reverse a string, the first index starts counting from 0\n        \"\"\"\n        return s.translate(\"\".join([ch for ch in s if ch not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" and ch not in \"1234567890\" and ch not in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"]),\"\")\n    n = 0\n    result = ''\n    s = s.translate(\"\".join([ch for ch in s if ch not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" and ch not in \"1234567890", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)!= len(c):\n        return False, False\n    check_string = s[:]\n    check_string.reverse()\n    return (check_string, reverse_delete(check_string,c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s.find(c) == -1:\n        return False, False\n    elif s.find(c,0,1) == -1:\n        return False, False\n    else:\n        return True, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Remove all the characters in s that are equal to any character in c\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s[i] = s[i+1:]\n    # Check if the result string is palindrome\n    return s,bool(palindrome(s))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Get a list of chars that are in s but not in c\n    cchars = [c for c in c if c not in s]\n\n    # We get the characters in s that are equal to the chars in c\n    # Now we remove them from s and check if s is palindrome\n    s = s.replace(cchars, \"\")\n    return s, reverse_s(s)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def calc(s,c):\n        for ch in s:\n            if ch==c:\n                return True\n        return False\n    # do the deletion\n    result = \"\"\n    for ch in s:\n        if ch==c:\n            result = result+ch\n        else:\n            result = result+ch+\" \"\n    return (result,calc(result,c))</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    c_len = len(c)\n    for i in range(c_len):\n        if s[i]!= c[i]:\n            result.append(s[i])\n            break\n    else:\n        result.append(c[0])\n        return (result,False)\n    return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s_length = len(s)\n    c_length = len(c)\n    if s_length == 0 or c_length == 0:\n        return (s[0],False)\n\n    result = \"\"\n    for i in range(s_length):\n        if s[i] == c[i]:\n            result += s[i]\n            if reverse(result) == result:\n                return (result,True)\n            else:\n                return (reverse(result),False)\n\n    return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return (s.translate(c) for c in c if c in s)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return False,False\n    s_len = len(s)\n    c_len = len(c)\n    l = 0\n    m = 0\n    for i in range(s_len):\n        if s[i] == c[i]:\n            l = l + 1\n            if l == c_len:\n                return False,True\n            m = m + 1\n        elif l == c_len and s[i]!= c[i]:\n            return False,False\n    return s,m == s_len\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    for i in range(len(c)):\n        if s[i] == c[i]:\n            result += s[i]\n    return result, result.startswith(result)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < 2:\n        return False, False\n    elif len(s) == 2 and s[0] == s[1]:\n        return s, True\n    else:\n        return reverse_delete(s,c[:-1])[0], reverse_delete(s,c[1:])[0]\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)==len(c):\n        return s,c in c\n    elif len(s)==len(c[0]):\n        return s[::-1],c in s[::-1]\n    else:\n        return s,c in s\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    char_to_delete = \"\"\n    char_to_delete_s = \"\"\n    char_to_delete_c = \"\"\n    char_to_delete_c_s = \"\"\n    char_to_delete_c_c = \"\"\n    char_to_delete_s_c = \"\"\n    char_to_delete_c_s_c = \"\"\n    char_to_delete_c_c_c = \"\"\n    char_to_delete_s_c_c = \"\"\n    char_to_delete_c_s_c_c = \"\"\n    char_to_delete_c_c_c_c = \"\"\n    char_to_delete_s_c_c_c = \"\"\n    char_to_delete_c_c_c_c = \"\"\n\n    if s==c or s==c_s:\n        char_to_delete_s = \"\"\n        char_to_delete_c = \"\"\n        char_to_delete_c_s = \"\"\n        char_to_delete_c_c = \"\"\n        char_to_delete_s_c = \"\"\n        char_to_delete_c_c_c = \"\"\n        char_to_delete_s_c_c = \"\"\n        char_to_delete_c_c_c_c = \"\"\n        char_to_delete_s_c_c_c = \"\"\n        char_to_delete_c_c_c_c = \"\"\n        char_to_delete_s_c_c_c = \"\"\n        char_to_delete_c_c_c_c = \"\"\n        char_to_delete_s_c_c_c = \"\"\n        char_to_delete_c_c_c_c = \"\"\n        char_to_delete_s_c_c_c", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return s.translate(c, \"\").translate(\"\", \"\").reverse()</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if c == \"\":\n        return (s,False)\n    else:\n        return s,str(reverse(c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    len = len(s)\n    if len == len(c):\n        for i in range(len):\n            if s[i]!= c[i]:\n                return False,False\n    else:\n        return False,True</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    ret = []\n    if len(s) == len(c):\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                ret.append(s[i:i+len(c)])\n        return ret,False\n    else:\n        ret.append(c)\n        for i in range(len(s)-1,-1,-1):\n            if s[i] == c[i+1]:\n                ret.append(s[i-i+1])\n                return ret,False\n        return ret,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(c)!= len(s):\n        raise ValueError(\"Expected length of c and s match, got %s\"%len(c),c)\n    if c[0]!= s[0]:\n        raise ValueError(\"Expected c[0] to be equal to s[0], got %s\"%c[0],c[0])\n    for i in range(1,len(s)):\n        if s[i] == c[i]:\n            if c[i]!= c[i-1]:\n                return ('bcd',False)\n            if s[i]!= s[i-1]:\n                return ('cdedc',True)\n            return ('bcd',True)\n        if c[i]!= c[i-1]:\n            return ('cdedc',False)\n    return ('bcd',True)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s.count(c) == 0:\n        return (s,False)\n    result = []\n    for i in reversed(s):\n        if i == c:\n            return (result,True)\n        elif i =='':\n            result.append(i)\n            return (result,True)\n        else:\n            result.append(i)\n            return (result,False)\n    return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<1:\n        return (s,False)\n    if len(c)<1:\n        return (c,False)\n    palindrome = False\n    for c in c:\n        if s.find(c)>=0:\n            palindrome = True\n    return (s,palindrome)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        r = []\n        for i in range(len(s)):\n            for j in range(len(c)):\n                if s[i] == c[j]:\n                    r.append(s[i])\n            if r[0] == r[r.index(r[0]) + 1:]:\n                return ('abcd',True)\n            if r[0] == r[r.index(r[0]) + 2:]:\n                return ('acdef',True)\n            if r[0] == r[r.index(r[0]) + 3:]:\n                return ('cdedc',True)\n\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    nums = s.split()\n    f = c.split()\n    for i in range(len(f)):\n        if f[i] in nums:\n            nums[f.index(f[i])] = \"\"\n            for j in range(i,len(f)):\n                if f[j] == nums[f.index(f[j])]:\n                    nums[f.index(f[j])] = f[j]\n            nums[f.index(f[i])] = f[i]\n            return reverse_delete(s,nums)\n    return reverse_delete(s,c)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    res = []\n    i = 0\n    while i < len(s):\n        if s[i] == c:\n            res.append(s[i:])\n            i += 1\n        else:\n            i += 1\n    if len(res)!= len(c):\n        return ('no match',False)\n    else:\n        return (res,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    r=[]\n    for i in reversed(c):\n        if s[i]==c[i]:\n            r.append(s.pop(0))\n    if r[0]==r[r.length-1]:\n        return (r[0],True)\n    else:\n        return (r[0],False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    for c in c:\n        for s in s:\n            if s[c] == c:\n                result += s\n                break\n    if result:\n        return (result,True)\n    else:\n        return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    b = s.upper()\n    c = c.upper()\n    t = (len(b) == len(c)) if b == c else False\n    if t:\n        result = \"\"\n        for i in range(len(b)):\n            if b[i] == c:\n                result += b[i:]\n        return result, t\n    return (\"\",t)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    for i in s.split(c):\n        if i not in result:\n            result.append(i)\n    if result == s.split(c):\n        return (result,True)\n    else:\n        return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #backwards\n    s = s.reverse()\n    c = c.reverse()\n    if reverse(s)!= reverse(c):\n        return (s, False)\n    #forward\n    return (reverse(s),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    res = []\n    c_len = len(c)\n    for i in range(0,c_len):\n        if c[i] in s:\n            res.append(i)\n    return res,len(res) == c_len", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = len(s) if s.isdigit() else s\n    c = len(c) if c.isdigit() else c\n    for x in range(s):\n        if s[x]!= c[x] and x!= 0:\n            continue\n        else:\n            reverse_delete(s[:x],c)\n            return s[:x],True\n    return s,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    # Variables to store the result and the check\n    result = \"\"\n    check = True\n\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            result = s[:i] + result + s[len(s):]\n            check = False\n\n    return result, check", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in range(len(s)):\n        if s[i] in c:\n            s[i] = s[i+1]\n        if c[i]!= s[i]:\n            s[i] = c[i]\n            return (s,True)\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if c == '' or s == '':\n        return (s, False)\n    elif s == c:\n        return (s, False)\n    elif s in c:\n        return (s, False)\n    else:\n        return (s, True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) > len(c):\n        return None,False\n    if s[0]!= c[0]:\n        return None,True\n    # Now, we need to find the first character in s which is equal to the first character in c, this\n    # will be the last element of s.\n    i = 0\n    while i < len(s):\n        if s[i] == c[i]:\n            return s[i+1:i+len(c)],True\n        i += 1\n    return s,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result,ispalindrome = True,False\n    if s and c:\n        for x in reversed(s):\n            if x == c:\n                result = False\n        ispalindrome = True\n    return result,ispalindrome", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    for c in c:\n        if c in s:\n            result.append(c)\n    return result,len(result)==len(c) and all(c in s for c in c)</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Initialization\n    s = s.lower()\n    c = c.lower()\n    # Main loop\n    while len(s) > 0 and len(c) > 0:\n        # Check if s contains any character equal to c\n        for i in range(0,len(s)):\n            if s[i] == c[i]:\n                # Update s to remove the character at index i\n                s = s[:i]\n                c = c[:i]\n                # Check if s is a palindrome\n                if not reverse_delete(s,c):\n                    print(\"char %s doesn't match char %s\" % (s[i],c[i]))\n                    return False, False\n                # Restore s to its original form\n                s = s[:i]\n                c = c[:i]\n            else:\n                break\n    # Return s and c\n    return s, reverse_delete(s,c)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.upper()\n    c = c.upper()\n\n    # TODO: Check if c is not in s and not in s.upper()\n\n    if len(s) == 0:\n        return s, False\n\n    reverse = s.upper()\n    return reversed(reverse), True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    c = re.escape(c)\n    s = re.escape(s)\n    res = []\n    for i in range(len(s)-1):\n        if s[i]==c and c not in res:\n            res.append(c)\n    return (s,len(res)>0)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    st = s.split(c)\n    s1 = ''.join(st)\n    s2 = ''.join(st[1:])\n    s1 = reverse(s1)\n    s2 = reverse(s2)\n    if s1 == s2:\n        return (s1,True)\n    else:\n        return (s2,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #remove all characters that are not equal to any of c\n    s = re.sub(\"[^%c]\",\"\",s)\n    #reverse s\n    s = re.sub(\"%c\",\"%\",s)\n    #check if the result is palindrome\n    result = False\n    for c in c:\n        if s == c or s[-2:] == c:\n            result = True\n    return result,result", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return (s,False)\n    else:\n        return (c+\"a\"*len(c)+1,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < 2:\n        return False,False\n\n    cmax = len(c)\n    m = 0\n    n = len(s)\n    while (m < n):\n        w = s[m]\n        if w in c:\n            continue\n        m += 1\n        if w == c[-1]:\n            return False,False\n        if (w == c[m - 1]) and (w!= c[m - 2]):\n            return False,False\n        if w in c:\n            return False,False\n\n    return True,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(c)!= len(s):\n        return False, False\n    str1 = s\n    for x in range(len(str1)-1,-1,-1):\n        if c == str1[x] and not reverse_delete(str1,c):\n            return False, False\n        else:\n            str1 = str1[:x]\n            continue\n    return True, True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    if len(c) == 1: return (s,False)\n    if len(s) == len(c): return (s,True)\n    str1 = ''.join(s)\n    str2 = ''.join(c)\n    for i in range(len(str1)):\n        if str1[i] == str2[i]:\n            str1[i] = str1[i].upper()\n            str2[i] = str2[i].upper()\n            if reverse_delete(str1,c):\n                str1 = ''.join(s)\n                str2 = ''.join(c)\n                return (str1,True)\n        else:\n            str1 = ''.join(s)\n            str2 = ''.join(c)\n    return (str1,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # We will create a list of chars with s that are not equal to c\n    if s.find(c)==-1:\n        return(s,False)\n    else:\n        #print s\n        #print c\n        for i in xrange(len(s)):\n            #print s[i]\n            #print c[i]\n            #print s[i-1]\n            #print c[i-1]\n            if s[i]==c[i] and s[i-1]==c[i-1]:\n                #print s[i+1]\n                #print s[i+2]\n                #print s[i+3]\n                #print s[i+4]\n                #print s[i+5]\n                #print s[i+6]\n                #print s[i+7]\n                #print s[i+8]\n                #print s[i+9]\n                #print s[i+10]\n                #print s[i+11]\n                #print s[i+12]\n                #print s[i+13]\n                #print s[i+14]\n                #print s[i+15]\n                #print s[i+16]\n                #print s[i+17]\n                #print s[i+18]\n                #print s[i+19]\n                #print s[i+20]\n                #print s[i+21]\n                return(reverse(s),True)\n        return(s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    print(\"Reverse delete\")\n    #print(s)\n    #print(c)\n    return(reversed(s) == reversed(c), True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    import re\n    pos = 0\n    for c in s:\n        if c == c:\n            return (s[0:pos],True)\n        pos = pos + 1\n    return (s[0:pos],False)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #First find the start of the palindrome.\n    start = -1\n    while start < len(s) and s[start] == c[start]:\n        start += 1\n    # Now find the end of the palindrome.\n    end = -1\n    while start < len(s) and s[start]!= c[start]:\n        end += 1\n    if end > start:\n        return s[start:end], False\n    else:\n        return s[start:start], True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def reverse_delete_character(x):\n        return reverse_delete(x,c)\n\n    res = []\n    if len(s) == len(c):\n        res.append(s)\n        return True,res\n    else:\n        for i in range(len(s)):\n            if x[i] == c[i]:\n                res.append(reverse_delete_character(s[i:]))\n                res.append(True)\n                break\n        else:\n            return False,res", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)!= len(c):\n        return ('', False)\n\n    #create a list of all characters in s\n    lst = []\n    for char in s:\n        lst.append(char)\n\n    #create a list of all characters in c\n    lstc = []\n    for char in c:\n        lstc.append(char)\n\n    #create a list of characters in s that are equal to any character in c\n    lste = []\n    for char in s.split():\n        if char in lstc:\n            lste.append(char)\n\n    #create a list of characters in c that are equal to any character in s\n    lstec = []\n    for char in c.split():\n        if char in lsts:\n            lstec.append(char)\n\n    #remove all characters in s that are equal to any character in c\n    sdel = \"\"\n    for char in s.split():\n        if char in lstc:\n            sdel = sdel + char + \" \"\n        elif char in lste:\n            sdel = sdel + char + \" \"\n        else:\n            sdel = sdel + char + \" \"\n\n    #remove all characters in c that are equal to any character in s\n    cdel = \"\"\n    for", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    res = []\n    for c in c:\n        for c in s:\n            if c in c:\n                res.append(c)\n                break\n    if len(res)>0:\n        return (res,True)\n    else:\n        return (res,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    string = \"\".join(c for c in s if c in c)\n    new_string = string\n    for char in c:\n        if char == string:\n            new_string = string.replace(char, \"\")\n        else:\n            new_string += char\n\n    if new_string == string:\n        return (new_string, True)\n\n    new_string = string.replace(\" \", \"\")\n    for char in c:\n        if char == string:\n            new_string = string.replace(char, \"\")\n        else:\n            new_string += char\n\n    if new_string == string:\n        return (new_string, True)\n\n    return (new_string, False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    if len(s) == len(c):\n        return (s,True)\n\n    def swap(x,y):\n        # swap x and y\n        tmp = x\n        x = y\n        y = tmp\n\n        return x,y\n\n    s=sorted(s, key=str.lower)\n    c=sorted(c, key=str.lower)\n    new=''\n    for i in range(len(s)):\n        for j in range(len(c)):\n            if c[i]==s[i]:\n                new+=s[swap(i,j)]\n                new+=s[swap(j,i)]\n                new+=c[i]\n            else:\n                new+=s[swap(i,j)]\n                new+=s[swap(j,i)]\n                new+=s[swap(j,i)]\n                new+=s[swap(i,j)]\n                new+=c[i]\n    if len(c) == len(s):\n        return (new,False)\n    else:\n        return (new,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # TODO : use string.find if possible\n\n    # check if s is palindrome\n    return s.find(c) >= 0, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = re.sub(c, \"\", s)\n    c = re.sub(s, \"\", c)\n    if c == s:\n        return s, False\n    else:\n        return s, True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = unicode(s).strip().replace('\\r','')\n    c = unicode(c).strip().replace('\\r','')\n    return [char for char in s if char in c],s.ispalindrome()", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (s,False)\n    s = s.lower()\n    c = c.lower()\n    s_len = len(s)\n    for i in range(s_len):\n        if s[i] == c[i]:\n            s[i] = s[i][1:]\n        if s[i] == s[i].upper():\n            s[i] = s[i].lower()\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    char_length = len(c)\n    s_length = len(s)\n    if char_length < 2:\n        return (s, False)\n    for i in range(char_length):\n        if c[i] == s[i-1]:\n            print(\"There are too many repeated characters: \", c, s)\n            return (s, False)\n    s = s[:char_length]\n    c = c[:char_length]\n    for i in range(char_length):\n        if c[i] == s[i-1]:\n            print(\"There are too many repeated characters: \", c, s)\n            return (s, False)\n    s = s[:char_length]\n    for i in range(char_length):\n        if s[i] == c[i-1]:\n            print(\"There are too many repeated characters: \", s, c)\n            return (s, False)\n    s = s[:char_length]\n    c = c[:char_length]\n    for i in range(char_length):\n        if s[i]!= c[i-1]:\n            print(\"There are too many different characters: \", s, c)\n            return (s, False)\n    s = s[:char_length]\n    for i in range(char_length):\n        if c[i]!= s", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # The counter for each character\n    counter = 0\n    # For each character, we have to check if it is in c\n    for c in s:\n        if c == c for c in c:\n            counter += 1\n            # If counter is equal to len(c), we have to delete the character\n            if counter == len(c):\n                s = reverse_delete(s,c)\n                # The result string should be palindrome\n                return (s,reverse_delete(s,c))\n        # We are done\n        break", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)!= len(c):\n        return (s, False)\n    d = []\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            d.append(s[i])\n    if len(d)!= len(c):\n        return (s, False)\n    for i in range(len(s)):\n        if d[i] in c:\n            d.remove(d[i])\n    if len(d) == len(c):\n        return (s, True)\n    return (s, False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(c)!= len(s):\n        return False, False\n    pos1 = 0\n    for i in range(len(s)):\n        if s[i] == c[pos1]:\n            pos1 += 1\n    if pos1 > len(c):\n        return False, True\n    return s[:pos1], c[pos1:]", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return (s,True)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)!= len(c):\n        return None, False\n\n    return s[:len(c)], reverse_acct(s, c, reverse=True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) > len(c):\n        return s, False\n    for i in range(len(s)):\n        if s[i] in c:\n            reverse_delete(s[i:i],c)\n            if reverse_delete(s[i:i],c) == reverse_delete(s[i:i],c):\n                return s[:i], True\n            return s[:i], False\n\n    return s, True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return (reverse(s[::-1]),True)\n    else:\n        return ('',False)\n\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)!= len(c):\n        return (s, False)\n    while True:\n        a = s[0]\n        for i in range(len(s) - 1):\n            b = s[i]\n            if c == a[len(b)] and (b[0] == b[len(c) - 1] or b[0] == c[0]):\n                s[i+1] = b\n                s[i] = a[len(b)]\n                break\n        if len(a) == len(c):\n            return (s, True)\n        else:\n            return (s, False)\n    return (s, False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    r,flip = 0,False\n    # # forward\n    for c in s:\n        if c == c:\n            r,flip = flip,True\n            break\n    # # reverse\n    for c in c:\n        if c == s:\n            r,flip = flip,False\n            break\n    # # check\n    if r:\n        return (s,flip)\n    else:\n        return (c,flip)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,False)\n    # then check that we have at least one non-equal char in the string\n    for i in range(len(s)-1):\n        if s[i]!= c[i]:\n            return (s,False)\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        print(\"Problem, len(s)<len(c)\")\n        return (\"\",False)\n    result = \"\"\n    result_list = []\n    for i in xrange(0, len(s), 2):\n        if s[i] == c[i]:\n            result_list.append(s[i+1:i+2])\n    if len(result_list)==0:\n        return (\"\",True)\n    for i in xrange(0,len(result_list),2):\n        if result_list[i]!= result_list[i+1]:\n            return (result,False)\n        else:\n            return (result,True)\n    return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    # build a list of all the characters in the string that are equal to any character in c\n    if len(c)!= len(s):\n        raise Exception(\"The size of the two strings are not equal.\")\n\n    # a list of the characters in s that are equal to any character in c\n    other_s = []\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            other_s.append(i)\n\n    # first we have to search the string backwards\n    if len(s) == len(other_s):\n        result = reverse(other_s)\n    else:\n        # if we have more than one char that are equal to each other\n        # we have to iterate over the string backwards and forward again\n        for i in range(len(other_s)):\n            if s[other_s[i]] == c[other_s[i-1]]:\n                other_s.pop(other_s[i])\n            else:\n                other_s.append(other_s[i])\n\n    # now we have to check if the result string is a palindrome\n    if len(result)!= len(other_s):\n        return (result,False)\n    else:\n        return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # check if the input string is palindrome\n    palindrome = False\n    n = len(s)\n    if n > 0:\n        if c[0] == s[n-1]:\n            # if c is the last character of s, we need to check if it is a palindrome\n            palindrome = reverse_delete(s[:n],c[n:])\n            if palindrome:\n                return (s[:n],palindrome)\n    return (s, False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def pfx(a):\n        return''.join([chr(x) for x in a])\n    def suffix(a):\n        return a[len(a)-len(pfx(c)):]\n    pfx_orig = pfx\n    suffix_orig = suffix\n    def reversed_pfx(a):\n        return a[::-1]\n    def reversed_suffix(a):\n        return a[::-1]\n    def is_valid(s):\n        if len(s) < 1:\n            return False\n        if len(s) == 1 and s[0] in 'abcdef':\n            return True\n        return s[0] in '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' or s[0] in '.' or s[0] in '.$'\n    def valid_letters(s):\n        return s in '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    def is_valid_char(c):\n        return c in '0123456789'\n    def is_valid_case(c):\n        return c in 'abcdefg", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.replace(\" \",\"\")\n    c = c.replace(\" \",\"\")\n    s = s.lower()\n    c = c.lower()\n\n    result = False\n    for i in s.split():\n        if c[i]!= i:\n            result = True\n            break\n    if not result:\n        return (\"\",False)\n    else:\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    out = []\n    for i in range(len(s)):\n        if i==0:\n            if c in s:\n                out.append(s[i])\n                continue\n        if c in s[i]:\n            out.append(s[i])\n            out.append(s[i])\n            continue\n        for j in range(i-1,len(s)):\n            if c in s[j]:\n                out.append(s[j])\n                out.append(s[j])\n                out.append(s[j])\n                continue\n            for k in range(i-1,len(s)):\n                if c in s[k] and c in s[j]:\n                    out.append(s[k])\n                    out.append(s[j])\n                    out.append(s[j])\n                    break\n    return out, check_palindrome(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n\n    l = len(s)\n    r = len(c)\n\n    return s.count(c) <= r and reverse(s) == c", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return s,c\n    return s,[s for s in reversed(s.split(c)) if s in c]", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    r = \"\"\n    h = \"\"\n    for i in s:\n        if i == c:\n            r += i\n            continue\n        if i == c[:-1]:\n            h += i\n        else:\n            h += c[:-1]\n            h += i\n    return r,h", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)!= len(c):\n        print(\"lengths don't match\")\n        return False\n    s = s.lower()\n    c = c.lower()\n    for i in range(0, len(s), 2):\n        if s[i] == c[i]:\n            print(\"s[i]\", s[i], \"c[i]\", c[i])\n            if reverse(s, c):\n                print(\"is palindrome\")\n                return s, True\n            else:\n                print(\"is not palindrome\")\n                return s, False\n        else:\n            return s, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # check if the result is a palindrome\n    if s!= c:\n        return (False,False)\n    # delete all the characters that are equal to the c\n    s = s.lower()\n    r,c = s.find(c),s.find(c,r+1)\n    return (s[0:r],c in s[r+1:])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not len(c):\n        return (s,False)\n    if len(s) == 0:\n        return (s,True)\n    if len(s) == len(c):\n        return (s,True)\n    for i in range(len(s) - len(c)):\n        if s[i]!= c[i]:\n            return (s,True)\n    for i in range(len(s) - len(c),len(s)):\n        if s[i]!= c[i]:\n            return (s,True)\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    for i in s.split():\n        if c in i:\n            result += i\n            if reverse_delete(result, c):\n                return (result, True)\n            else:\n                return (result, False)\n        else:\n            result += i\n    return (result, False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    n = len(s)\n    if n == 0:\n        return (s,False)\n    else:\n        t = [s[i] for i in range(n) if s[i]!= c]\n        if len(t) == 0:\n            return (s,True)\n        else:\n            if reverse(t) == t:\n                return (s,True)\n            else:\n                return (reverse(t),False)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)!= len(c):\n        print(\"Not an equal length strings\")\n        return False,False\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            result += s[i]\n            continue\n        else:\n            result += reverse(c[i])\n            continue\n    if result == s:\n        return True,True\n    else:\n        return False,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    s = ''.join(c for c in s if c in c)\n    return s,s.isPalindrome()", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    result = []\n    if len(s) > 0:\n        for i in range(len(s)):\n            if s[i] in c:\n                result.append(s[i])\n        return result, True\n    else:\n        return result, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return None, None\n    if len(c) == 0:\n        return None, None\n    if s[:len(c)] == c:\n        return reverse_delete(s[len(c):],c)\n    return None, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    res = []\n    for x in s:\n        for y in c:\n            if x == y:\n                res.append(x)\n    if len(res) == len(c):\n        return res,True\n    return res, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) <= 1 or len(c) <= 1 or s[0]!= c[0]:\n        return False, False\n\n    # Lets create a buffer to hold the characters we are going to delete\n    # and get rid of them\n    if len(s) > 1:\n        delete = s[::-1]\n    else:\n        delete = s\n    delete = delete[1:]\n    delete = reverse_delete(delete,c)\n\n    # Now we have all the characters that are equal to any character in c\n    # now we have to check if they are all in the delete buffer\n    for x in delete:\n        if x not in c:\n            return False, False\n    return True, True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    result = []\n    for i in s:\n        if i in c:\n            if reverse_delete(i,c)!= c:\n                result.append(i)\n    return result,len(result)==len(c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return (s,False)\n    elif s == c or c == s or c in s or s in c or c in s:\n        return (s,True)\n    else:\n        return (s.replace(c,\"\"),False)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(c) == 0 or len(s) == 0:\n        return (s,False)\n    s = s.lower()\n    c = c.lower()\n\n    result = []\n    for c_char in c:\n        if c_char in s:\n            result.append(c_char)\n        else:\n            return (s,False)\n    return result,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return (s.replace(c,'').replace(c,'').lower(),True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return (\"\",False)\n    if len(c) == 0:\n        return (\"\",True)\n    result = \"\"\n    if s.endswith(c):\n        return (reverse(s[:-len(c)]),True)\n    else:\n        return (reverse(s),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # sanity check\n    if len(s)!= len(c):\n        raise ValueError(\"expected %s charachters but got %s\"%(len(s),len(c)))\n    # each character in c should appear exactly once in s\n    for i in range(len(c)):\n        if c[i] in s:\n            return (s.replace(c[i],''), False)\n        else:\n            return (s, False)\n    return (s, True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return [char.lower() for char in s if char.lower() in c.lower()]", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def match(c,s):\n        if c in s:\n            return True\n        else:\n            return False\n\n    def remove_first(s,c):\n        \"\"\"Remove first character of s that is equal to c\"\"\"\n        if match(c,s[0]):\n            del s[0]\n            return True\n        else:\n            return False\n\n    def remove_last(s,c):\n        \"\"\"Remove last character of s that is equal to c\"\"\"\n        if match(c,s[-1]):\n            del s[-1]\n            return True\n        else:\n            return False\n\n    for i in range(len(s) - len(c) + 1):\n        if remove_first(s,c[i]):\n            break\n        if remove_last(s,c[i]):\n            break\n    if reverse(reverse(s)) == reverse(reverse(c)):\n        return (reverse(s),True)\n    else:\n        return (reverse(s),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    palindrome = False\n    # we search for the first character not equal to c\n    ch = s[0]\n    while ch!= c:\n        # we find the first char that is not equal to c\n        if ch == c or ch == ch:\n            palindrome = False\n        ch = s[0]\n    if palindrome:\n        return s,True\n    else:\n        return s,False\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return list(filter(lambda x: x in c, s.split(c))[0])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    str_to_delete = s\n    len_chars_to_delete = len(str_to_delete)\n    #print len_chars_to_delete\n    #print str_to_delete\n    for i in range(len_chars_to_delete):\n        #first remove the character\n        #print str_to_delete[len_chars_to_delete-1]\n        str_to_delete = str_to_delete[len_chars_to_delete-1:]\n        #print str_to_delete\n        #now delete all the characters that are equal to c\n        #print str_to_delete\n        for j in range(len_chars_to_delete):\n            #if the characters are equal\n            if str_to_delete[j] == c[i]:\n                #delete them\n                #print str_to_delete\n                str_to_delete = reverse_delete(str_to_delete,c[i])\n                #check if result string is palindrome\n                if ('abc' in str_to_delete) and ('d' not in str_to_delete):\n                    print'result is palindrome'\n                else:\n                    print'result is not palindrome'\n            #we stop the loop\n            if j == len_chars_to_delete-1:\n                break\n    if ('abc' in str_to_delete) and ('d' not in str_to_delete):\n        return ('bcd',False)\n    else:", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # example\n    s = \"abcdedcba\"\n    c = \"ab\"\n    s_re = re.compile(r\"(^|[^a-z])\" + c + r\"(?![^a-z])\")\n    c_re = re.compile(r\"(^|[^a-z])\" + c + r\"(?![^a-z])\")\n    s_list = s.split()\n    c_list = c.split()\n\n    if s_list[0] == s_list[1]:\n        for i in range(len(s_list[0])):\n            if s_list[0][i] == c_list[0][i]:\n                s_list[1][i] = s_list[1][i].replace(c_list[0][i],c_list[1][i])\n        s_list = s_list[0]\n    else:\n        for i in range(len(s_list[0])):\n            if s_list[0][i] == c_list[0][i]:\n                s_list[1][i] = s_list[1][i].replace(c_list[0][i],c_list[1][i])\n                s_list[0][i] = s_list[0][i].replace(c_list[1][i],c_list[0][i])\n    if s_list[1] == s_list[1]:\n        for i in range(len(s_list[1])):\n            if s_list[1][i] == c_list", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    c_idx = 0\n    if c == \"\":\n        return (\"\", False)\n    for x in s:\n        if c[c_idx] == x:\n            c_idx = c_idx + 1\n    return (s[:c_idx], c_idx == len(s))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(c) > len(s):\n        return (s, False)\n    return (reversed(s), True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    r = 0\n    for i in xrange(len(s)):\n        if s[i]!= c[i]:\n            r += 1\n    return s[r],reverse(c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = reverse(s)\n    c = reverse(c)\n    if len(s) == len(c):\n        for i in xrange(len(s)):\n            if s[i] == c[i]:\n                reverse_delete(s,i)\n                return (s[0:i], False)\n            else:\n                reverse_delete(s,i)\n                return (s[0:i], True)\n        return (s, True)\n    return (s, False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for c in c:\n        if s.find(c)!= -1:\n            return (s.replace(c,''),True)\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    if s and c:\n        for c in c:\n            if c in s:\n                result += s[len(s)-c-1:len(s)]\n                s = s[:len(s)-c-1]\n            else:\n                result += c\n        if result == c:\n            return (result,True)\n    else:\n        return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    r = ''\n    for c in c:\n        r = r.replace(c,'')\n    r = r.replace(c,'') # remove all characters with c in it\n    l = len(r)\n    if l == len(s):\n        return r, True\n    else:\n        return r, False\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    result = []\n    d = 0\n    for i in range(len(s)):\n        if s[i] == c:\n            d += 1\n        elif d == len(s):\n            result.append(c)\n            d = 0\n        else:\n            d = 0\n    if len(result) == 1:\n        return result, True\n    else:\n        return result, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    reversed_s = s.translate(xrange(len(s)) + 1)\n    reversed_c = c.translate(xrange(len(c)) + 1)\n    if reversed_s == reversed_c:\n        return (s, False)\n    else:\n        return (reverse_s, True)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        if s[0] == c[0]:\n            return (s[1:],True)\n        else:\n            return (s[:len(c)],False)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = \"\".join(s.lower().split())\n    c = \"\".join(c.lower().split())\n    if len(c) == len(s):\n        for i in range(len(c)-1, -1, -1):\n            if c[i] == s[i]:\n                reverse_delete(s,c[:i])\n                return (s,True)\n        return (s,False)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if c in s.lower():\n        return (s, False)\n    else:\n        return (c, True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    results = []\n    while s:\n        try:\n            s.reverse()\n        except AttributeError:\n            raise IOError('This program requires Python 3.5')\n        if s == c:\n            return (s,True)\n        else:\n            results.append(reverse_delete(s,c))\n    return (s, False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    length = len(s)\n    if length == 0:\n        return (s, False)\n    c_length = len(c)\n    if c_length == 0:\n        return (s, False)\n    result = []\n    result.append(s)\n    result.reverse()\n    for i in range(0, length):\n        if s[i] == c[i]:\n            result.append(result[-1])\n            result.reverse()\n    return result, True\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(c) < len(s):\n        return (c, False)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            for j in range(len(s)):\n                if s[i]!= c[j] and s[j]!= c[i]:\n                    return (s, True)\n            return (s, False)\n    return (s, False)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if c=='':\n        return ('bcd', False)\n    result,check = False,False\n    for x in reversed(s):\n        if x==c:\n            check = True\n            break\n    return (result,check)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    n = len(c)\n    if c == \" \": return s, False\n    for i in range(0, n):\n        if c[i]!= s[i]: return s, False\n    return s, True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    b,f = '',''\n    for i in range(len(s)):\n        if c == s:\n            b += s[i]\n            f += s[i]\n            continue\n        if c in s:\n            b += s[i]\n            f += s[i]\n            continue\n        if i > 0:\n            if reverse_delete(s[i-1],c):\n                b += s[i-1]\n                f += s[i-1]\n                continue\n    if b.isalnum() or f.isalnum():\n        return (b,f)\n    else:\n        return (b,f,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    a = len(s)\n    b = len(c)\n    if a!= b:\n        raise ValueError(\"The strings length are not the same.\")\n    if not a:\n        return \"\",False\n    if a == 1:\n        return s[:a],reverse_delete(s[a:],c)\n    return \"\",reverse_delete(s[a:],c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s:\n        return None, False\n    if not c:\n        return s, False\n    r = []\n    for c in c:\n        s = s.replace(c, '')\n        if len(s) == 1:\n            r.append(s)\n            return s, True\n        else:\n            s = s[:-len(s)]\n            r.append(s)\n            return s, False\n    return r, True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n\n    print(s)\n    i = 0\n    j = len(s)\n    while i < j:\n        if c == s:\n            i += 1\n            continue\n\n        if i < j - 1:\n            if s[i] == s[i + 1]:\n                i += 1\n            else:\n                i = j - 1\n                break\n        elif s[i] == s[i + 1:]:\n            j = i - 1\n        else:\n            i = j - 1\n            break\n    if i < j:\n        print(\"Problem\")\n        return False,False\n    else:\n        print(\"Result\")\n        return s[i:],True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return ('', False)\n    if len(c) == 0:\n        return ('', True)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            return (s[0:i], False)\n    return (s, True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)!= len(c):\n        return (s,False)\n    return (s,[])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s1 = s.lower()\n    s2 = c.lower()\n    result = \"\"\n    for i in range(len(s1)):\n        if s1[i] == s2[i]:\n            result += s1[i:]\n            i += 1\n        else:\n            result += s1[i]\n            i += 1\n    if len(result) == len(s1):\n        return (result,False)\n    else:\n        return (result,True)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s:\n        return (\"\", False)\n    if not c:\n        return (\"\", False)\n    for i in range(len(s)):\n        if c[i] == s[i]:\n            return (s[0:i], False)\n        if s[i] == c[i]:\n            return (s[0:i], True)\n    return (s[0:len(s)-1], True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(c) > len(s):\n        print(\"len(c) > len(s)\")\n        return False, False\n    else:\n        while len(s) > 0 and s[0] == c[0]:\n            s = s[1:]\n            if s[-1] == c[0]:\n                reverse_delete(s, c[1:])\n            else:\n                return False, False\n        return s, True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s[0] == c[0]:\n        return (s,False)\n    else:\n        return (reverse(s[:len(c)]),reverse(c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)!= len(c):\n        return (\"\",False)\n    result = \"\"\n    if len(s) > 0 and len(c) > 0:\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                result = reverse_delete(result,c[i])\n                if result == s:\n                    return (result,True)\n    return (\"\",False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    n = len(s)\n    result = \"\"\n    i = 0\n    for c in c:\n        if i >= n:\n            return (result,False)\n        if s[i] == c == c == c == c:\n            result += c\n            i += 1\n        else:\n            i = 0\n    return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    to_delete = []\n    result = \"\"\n    check = True\n    s_len = len(s)\n    c_len = len(c)\n    for i in range(s_len):\n        if s[i] == c[i]:\n            to_delete.append(i)\n    for i in reversed(to_delete):\n        result += s[i-to_delete[i-1]]\n    check = result.is_palindrome()\n    if check:\n        result = result.reverse()\n    return result, check", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    c = c.lower()\n    s = s.lower()\n    result = s\n    result = result.replace(c, '').replace('', c)\n    if result!= s:\n        return (result, False)\n    else:\n        return (result, True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    while c in s:\n        s.pop(0)\n    return s, reverse_delete(s, c)[1]", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s=string.lower(s)\n    c=string.lower(c)\n    total=len(s)\n    if c in s or s.find(c)>-1:\n        return (s,False)\n    if c in s:\n        return (s,True)\n    if c == c[0]:\n        return (s,False)\n    for i in xrange(len(s)-1,-1,-1):\n        if s[i]==c and s[i+1]==c and s[i+2]==c and s[i+3]==c and s[i+4]==c:\n            if reverse_delete(s,c):\n                return (s,True)\n            return (s,False)\n            return (s,True)\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return s,c\n    else:\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                return s,c\n\n    return s, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c or s == \"\" or s == \"\":\n        return (\"\",False)\n    s = s.replace(c,\"\")\n    r,f = True, False\n    for c in s:\n        if c == c or c == \" \":\n            r = False\n            f = False\n            break\n        elif c in c:\n            r = False\n            f = False\n            break\n    return (s,r)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return (s.replace(c,c), s.count(c) == s.count(c) == len(s)-1)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    res = []\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            res.append(s[i])\n            continue\n        if i < len(s)-1 and s[i] == s[i+1]:\n            res.append(s[i])\n            res.append(s[i])\n            break\n        if i < len(s)-1 and s[i] == s[i-1]:\n            res.append(s[i])\n            res.append(s[i])\n            break\n    return res, bool(len(res) == len(s))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    total = len(c)\n    for i in range(0,len(s),2):\n        s1 = s[i:i+2]\n        s2 = c[i:i+2]\n        result.append(s1.replace(s1[i],s2[i]))\n        total += len(s1.replace(s1[i],s2[i]))\n    if total == len(s):\n        return result,True\n    else:\n        return result,False\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return s[:-1] == c + s[1:]", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s_len = len(s)\n    c_len = len(c)\n    if s_len == c_len:\n        return (s,False)\n    else:\n        for i in range(s_len):\n            if s[i] == c[i]:\n                reverse_delete(s,c[:i])\n                return (s,True)\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)==0:\n        return (\"\",False)\n\n    if len(c)==0:\n        return (\"\",True)\n\n    s = s.lower()\n    c = c.lower()\n\n    if len(s)==len(c):\n        return (s,True)\n\n    result = \"\"\n    for i in range(len(s)-1):\n        result+=s[-i-1]\n        if s[i] == c[i]:\n            result+=c[-i-1]\n            if i==len(s)-1:\n                return (result,True)\n\n    if len(result)==len(s):\n        return (result,False)\n\n    return (\"\",False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    string = s\n    string_length = len(s)\n    palindrome = True\n    if string_length == 0:\n        return False, False\n    if string_length == 1:\n        return s, False\n    string_index = 0\n    for i in range(string_length-1):\n        string_index = string_index + 1\n        if c == string[string_index]:\n            palindrome = False\n    return s, palindrome\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    m = len(s)\n    n = len(c)\n    if m == n:\n        return (s, True)\n    s = s[:n]\n    c = c[:m]\n    for i in range(m,n):\n        if s[i]!= c[i]:\n            return (s, False)\n    return (s, True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # c is an array of length len(s)-1\n    # reverse(c) will return an array of length len(c)\n    c = reverse(c)\n    # for each character in s:\n    for i in xrange(len(s)):\n        if s[i] == c[i]:\n            s[i] = s[i][:-1]\n            reverse_delete(s,c)\n    # return the string and the boolean\n    return s,c == reversed(c)</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    result = s\n    for c in c:\n        if c in s:\n            result = reverse_delete(result,c)\n    return result,reverse(result)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = s\n    flag = False\n\n    while True:\n        result = result.replace(c,'')\n        if result == c:\n            flag = True\n            break\n        else:\n            result = reverse(result)\n            if result == c:\n                flag = True\n                break\n\n    return result,flag", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    re_look_for = re.compile(r'[\\pL]\\d')\n    re_car = re.compile(r'[^aeiouy]+')\n    # replace chars in string s by their respective charcter c\n    new_string = re_look_for.sub(c,s)\n    # check if the new string is a palindrome\n    if new_string == re_car:\n        return (new_string,True)\n    else:\n        return (new_string,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    r = True\n    for i in range(len(s)):\n        if s[i]==c[i]:\n            r = False\n        else:\n            r = r and reverse_delete(s,c[i])\n    return r, r", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #Take the length of the s\n    #s = s[:len(s)-1]\n    if len(s) < len(c):\n        return False,True\n    for i in range(len(s)):\n        #s = s[:i-1]\n        if s[i] == c[i]:\n            #delete the character\n            s.remove(i)\n            #check if s is palindrome\n            if reverse_delete(s,c):\n                #check if s is palindrome\n                if reverse_delete(c,s):\n                    return ('%s%s' % (reverse(s), reverse(c)), True)\n                else:\n                    return ('%s%s' % (reverse(c), reverse(s)), False)\n            else:\n                return False, False\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    a,b,c = s.split(c)\n    if len(a)==len(b)==len(c):\n        return (a,b)\n    else:\n        return (reverse(a),reverse(b))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not c in s:\n        return (s, False)\n    else:\n        s = c\n        new_s = ''\n        for x in s.split(c):\n            if x in c:\n                new_s += x\n            else:\n                new_s += 'x'\n        return (new_s, reverse_delete(s,c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def delete(string, chars):\n        \"\"\"Recursively deletes the characters in the string that are equal to the chars.\n        The return value is a string with deleted characters.\n        \"\"\"\n        if string == '':\n            return ''\n\n        return string.replace(chars,'')\n\n    def is_palindrome(string):\n        \"\"\"Check if string is a palindrome.\n        Return True if the string is a palindrome, false otherwise.\n        \"\"\"\n        return string.upper() == string.lower()\n\n    # Loop through s until it is empty\n    while len(s):\n        # Now, delete all the chars that are equal to chars\n        if not delete(s,c):\n            return False\n\n        # if we found a match, return a new string\n        if is_palindrome(reverse_delete(s,c)):\n            return s, True\n\n        s = s[len(c):]\n        c = c[:len(s)]\n\n    # the string was not palindrome, so return False\n    return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    d = dict()\n    for c in c:\n        for s in s:\n            if s == c or s[::-1] == c:\n                d[c:] = True\n    if d:\n        return d\n    else:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s_len = len(s)\n    c_len = len(c)\n    if s_len!= c_len:\n        return False, False\n    mask = \"01\"\n    for i in range(s_len-1,-1,-1):\n        for j in range(c_len-1,-1,-1):\n            if i==j:\n                mask = \"0\"\n            else:\n                mask = \"1\"\n    if mask[s_len-1]!=0 and mask[c_len-1]!=0:\n        return False, True\n    else:\n        return True, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    b = reverse(s)\n    c = reverse(c)\n    if not len(b):\n        return False, False\n    if not len(c):\n        return True, True\n    return reverse(c) == b", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(c) == 1:\n        if c in s[0]:\n            return (s,False)\n        else:\n            return (s,True)\n    else:\n        return reverse_delete(s,c[1:])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    d = []\n    for c in c:\n        if c in s:\n            d.append(c)\n        else:\n            return (s,False)\n    return (d,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)==0 or len(c)==0 or s[0]==c[0]:\n        return None,False\n    return reverse(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    str1 = s\n    if len(str1) > 0:\n        str2 = c\n        if len(str2) > 0:\n            str1 = str1.replace(str2, \"\")\n            if reverse(str1) == reverse(str2):\n                return str1, False\n            else:\n                return str1, True\n        else:\n            return str1, True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        for i in range(0,len(s)):\n            if s[i] == c[i]:\n                reverse_delete(s[:i],c)\n                reverse_delete([i:],c)\n                return s, True\n    else:\n        return s, False\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def loop(p,c):\n        res = []\n        for i in p:\n            if i == c:\n                res.append(i)\n            else:\n                break\n        return res,len(res)>2\n    if len(s) > len(c):\n        raise Exception(\"len(s) > len(c)\")\n    elif s == c:\n        return ('',False)\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            return ('',False)\n    return ('',True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<len(c):\n        return (s,False)\n\n    for i in range(len(s)):\n        if s[i]==c[i]:\n            s[i]=''\n            for j in range(len(c)):\n                if j==len(c)-1:\n                    s[i]+=c[j]\n            return (s,False)\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.replace(c,\"\")\n    s = s.replace(c+\"\",\"\")\n    return s, True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if c == '':\n        return (s,False)\n\n    # I haven't any idea to check the length of the input string\n    if len(s)!= len(c):\n        return (s,False)\n\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            reverse_delete(s[:i],c);\n            return (s,True)\n        else:\n            return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    if len(s) < 1:\n        raise ValueError(\"No string given\")\n    if len(c) < 1:\n        raise ValueError(\"No character given\")\n    d = []\n    for i in range(len(s)):\n        if s[i] == c:\n            d.append(i)\n            #print(i)\n    if len(d) == 0:\n        return (\"\",False)\n    else:\n        return (s[d[0]],reverse_delete(s,d[1:]))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    if len(s) == len(c):\n        return (s,True)\n    for i in xrange(len(s)-1, -1, -1):\n        if s[i] == c[i]:\n            s[i] = s[i+1]\n            c[i] = c[i+1]\n            return (s,True)\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for ch in s:\n        if ch in c:\n            if ch in s[:-1] or ch in s[-1:] or ch in c[:-1] or ch in c[-1:] or ch in s[-1:]:\n                return (ch,False)\n    return (s,True)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    res = s.lower()\n    c = c.lower()\n    if len(c) == 1:\n        if c in res:\n            return (res,True)\n        else:\n            return (res,False)\n    else:\n        return (res.replace(c,\"\"),reverse_delete(res,c))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return s[:-1]==c", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    to_delete = s[:]\n    to_delete = to_delete[::-1]\n    for i in range(len(to_delete)):\n        if to_delete[i] == c[i]:\n            result += to_delete[i]\n    if not result:\n        return ('',False)\n    return (result,True)\n\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #remove all the characters in s which are equal to any character in c.\n    for c in c:\n        s = s[:len(c)] + s[len(c):]\n    return s,reverse_delete(s,c) == reverse_delete(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        if s == c:\n            return s,True\n        else:\n            return s,False\n    else:\n        return reverse_delete(s,c[:-1]) + reverse_delete(c,s[1:]) + reverse_delete(s[1:],c[1:])", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def _remove_equals(string, target_char):\n        \"\"\"Remove all character that is equal to the target_char\"\"\"\n        pattern = r'%s(?=%s)' % (target_char, target_char)\n        # remove the first match\n        return re.sub(pattern, '', string).lower()\n\n    # remove all characters equal to the target char\n    s = reverse(s)\n    c = reverse(c)\n    # remove the first match\n    r = _remove_equals(s,c)\n    # remove the second match\n    r = _remove_equals(r,c)\n    return r, r.count(c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    res = []\n    c = c.lower()\n    for i in s:\n        if c == i:\n            res.append(i)\n            c = c.lower()\n        else:\n            res.append(c)\n    return res,c == c.lower()", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    if len(c) == 0:\n        return result,False\n\n    for c in s[:-1]:\n        if c in c:\n            result = result + \" \" + c\n            continue\n        else:\n            break\n\n    result = result + \" \" + s[-1:]\n    return result,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return s,True\n    else:\n        return s, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #result = []\n    #match = None\n    for c in c:\n        for s,i in enumerate(s):\n            if s[i] == c:\n                if reverse(s[-i:]) == reverse(s):\n                    result.append(s[-i:])\n                    match = True\n                else:\n                    result.append(s)\n                    match = False\n    return result,match\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Make s and c palindromes.\n    if not s or not c:\n        raise Exception(\"Input strings are not palindrome.\")\n    # Get the length of s and c.\n    length = len(s)\n    if length!= len(c):\n        raise Exception(\"Input strings are not palindrome.\")\n    # Get the intersection between s and c.\n    intersec = c.find(s) + len(c) - len(s)\n    # Traverse s.\n    for i in range(0,length):\n        # Compare c[i] with s[i].\n        if s[i] == c[i]:\n            continue\n        # Delete the character.\n        s[i] = ''\n        # If we are not at the intersection, we didn't delete the whole string.\n        if i > intersec:\n            continue\n        # Compare the result with s[i].\n        if s[i]!= s[i + length] or c[i]!= c[i + length]:\n            # The string is not palindrome.\n            print(s)\n            return False, False\n        # Delete the character and the loop.\n        s[i] = ''\n        i -= length\n    # We are done!\n    return s, True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < 2:\n        raise ValueError(\"You need to have at least 2 characters in the string.\")\n    if len(c) < 2:\n        raise ValueError(\"You need to have at least 2 characters in the character.\")\n\n    if c =='':\n        return s, True\n    if c == '?':\n        return s, False\n\n    return re.sub(r'['+ c+']', '', s), True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        if s[0] == c[0]:\n            return (s,True)\n        else:\n            return (s,False)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    pos = 0\n    while True:\n        for i in range(len(s)):\n            if s[i] == c[pos]:\n                if i > 0 and reverse_delete(s[i-1:],c) == True:\n                    result.append(s[i:i])\n                    pos = i+1\n                elif i < len(s)-1 and reverse_delete(s[:i+1],c) == True:\n                    result.append(s[i:i+1])\n                    pos = i+1\n        if pos >= len(s):\n            break\n    return result,reverse_delete(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # This is a hackish way to cope with the fact that the set of characters in a string is not a sorted set\n    # but a set. This is because a character may have a larger value than another character in the same string.\n    # We then have to check if the character is smaller than all the other characters in the same string\n    # before removing it.\n    # This can be done by keeping a list of the chars that need to be removed, and using that list\n    # when removing the character, but we wanted to use a set instead.\n    if not s and not c: return (\"\",False)\n    if s == c: return (s,True)\n    if c in s:\n        return (s,reverse_delete(s,c))\n    for c in c:\n        if c in s:\n            return (s,reverse_delete(s,c))\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(c) > len(s):\n        return (s,False)\n    temp = s[0:len(c)]\n    if len(temp) == len(c):\n        return (temp,True)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = str(s).lower()\n    c = str(c).lower()\n    p = False\n    for i in s:\n        if c == i:\n            p = True\n    return (s,p)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        res = ''\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                res += s[i]\n                break\n        return (res,True)\n    else:\n        return ('',False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    p=os.path.dirname(__file__)\n    f=open(f,'r')\n    s=f.readlines()\n    # delete all characters that are equal to the char of c\n    for i in range(len(s)):\n        if s[i][0]==c[0]:\n            s[i]=s[len(s)-1-i]\n            del s[i]\n        else:\n            break\n    # delete all characters that are equal to the char of c\n    for i in range(len(s)):\n        if s[i][0]==c[0]:\n            s[i]=s[len(s)-1-i]\n            del s[i]\n        else:\n            break\n    # we should check if s is palindrome\n    if len(s)==1:\n        return s,False\n    else:\n        return s,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)!= len(c):\n        return False, False\n    if len(set(s))!= len(set(c)):\n        return False, False\n    for i in range(len(s)):\n        if s[i] in c:\n            return False, False\n        if s[i] == c[i]:\n            return True, False\n        if s[i]!= c[i] and s[i]!= c[i] and s[i]!= c[i] and s[i]!= c[i] and s[i]!= c[i] and s[i]!= c[i] and s[i]!= c[i] and s[i]!= c[i] and s[i]!= c[i] and s[i]!= c[i] and s[i]!= c[i] and s[i]!= c[i] and s[i]!= c[i] and s[i]!= c[i] and s[i]!= c[i] and s[i]!= c[i] and s[i]!= c[i] and s[i]!= c[i] and s[i]!= c[i] and s[i]!= c[i] and s[i]!= c[i] and s[i]!= c[i] and s[i]!= c[i] and s[i]!= c[i] and s[i]!= c[i] and s[i]!= c[i]", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    len1 = len(s)\n    len2 = len(c)\n    while len1 < len2:\n        for i in range(len1):\n            for j in range(len2):\n                if s[i] == c[j]:\n                    break\n                elif c[j] == s[i]:\n                    break\n        else:\n            return (s, False)\n        if len1 < len2:\n            len1 = len1 - 1\n            len2 = len2 - 1", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    #first delete all the c characters in s\n    s = s.replace(c,'')\n    #now check if result is palindrome\n    result = s.lower() == s.upper()\n    return (result, result==s)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)!= len(c):\n        return s,False\n    if s == c:\n        return s,True\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s = s[:i] + s[i + 1:]\n        else:\n            s = s[:i] + s[i:]\n    return s,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            del s[i]\n    return s,reverse(s)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    i = len(c) # index of beginning of characters in c\n    while i > 0:\n        j = len(s) - i\n        if s[j] == c[i]:\n            # we deleted the right character\n            if reverse_delete(s[:j+1],c):\n                # the result string is palindrome\n                return (s[:j],True)\n            else:\n                return (s[:j],False)\n        else:\n            # we deleted the left character\n            i -= 1\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    string_list = [c for c in s if c in c]\n    result_string = s\n    result = False\n    for string in string_list:\n        if len(string) > 0 and string[0] == string[-1]:\n            result = True\n            break\n    return result_string,result", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = s[:]\n    for c in c:\n        result = c.lower() in result.lower()\n    if not result:\n        return result, True\n    else:\n        return result, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #remove all characters that are equal to the c character\n    def is_equal(ch,c):\n        \"\"\"Returns True if the given character is equal to the given c\"\"\"\n        if ch == c:\n            return True\n        else:\n            return False\n    s = s.lower()\n    c = c.lower()\n    #reverse the string\n    result = []\n    for i in range(len(s)):\n        if is_equal(s[-i-1],c):\n            result.append(s[-i-1])\n        elif is_equal(s[-i],c):\n            result.append(s[-i])\n        else:\n            result.append(s[-i-1])\n    return result,len(result)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(c) == 0:\n        raise Exception('No char to delete in this case')\n    else:\n        new_list = s.split()\n        old_list = c.split()\n        result = []\n        for i in range(len(s)):\n            if s[i] in old_list:\n                result.append(new_list[i])\n        return result, len(result) == len(s)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s[0] not in c or c[0] not in s:\n        return False, False\n    if len(s) == len(c):\n        return True, True\n    return True, False</s>"]]