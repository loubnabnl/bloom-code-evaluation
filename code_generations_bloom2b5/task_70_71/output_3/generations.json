[["def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Init\n    tmp = []\n    # Loop\n    for item in lst:\n        # Mainloop\n        for index, value in enumerate(lst):\n            # Only if value is less than the first item\n            if value < item - 1:\n                # Push new item onto the list\n                tmp.append(item - 1)\n                # Update\n                item -= 1\n                # Advance index\n                index += 1\n            # Only if value is greater than the last item\n            elif value > item + 1:\n                # Push new item onto the list\n                tmp.append(item + 1)\n                # Update\n                item += 1\n                # Advance index\n                index += 1\n            # End loop\n        # End mainloop\n    # End loop\n    return tmp", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def f(i):\n        return min(i, lst[-1])\n    l = len(lst)\n    while l > 0:\n        i = lst.pop(0)\n        if i < l:\n            f(lst.pop(0))\n        else:\n            break\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    lst = sorted(lst, key=lambda i: i, reverse=True)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    assert len(lst) == 1\n    lst[0] += 1\n    tmp = []\n    while lst:\n        l, tmp.append(lst[0])\n        lst.remove(lst[0])\n    return tmp", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    return [int(min_value) for min_value in lst]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    max_value = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] > max_value:\n            max_value = lst[i]\n    return (max_value, lst[1:])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    sorted = []\n    for i in lst:\n        if i < lst[0]:\n            sorted.append(i)\n        else:\n            sorted.append(lst[0])\n            sorted.append(i)\n\n    return sorted", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    tmp = lst\n    tmp.reverse()\n    return tmp\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=operator.itemgetter(1), reverse=True)\n    lst.reverse()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def ret(a, b):\n        '''\n        Helper function, returns the current result after a\n        function call.\n        '''\n        return ret(ret(a, b), ret(ret(a, b), ret(ret(a, b), ret(ret(a, b), a))) + 1)\n\n    def makelist(s):\n        '''\n        Helper function, returns a list of the values\n        in the given string.\n        '''\n        return [x for x in s.split()]\n\n    def makestuff(s):\n        '''\n        Helper function, returns a list of the tuples\n        from the given string. The tuples are sorted.\n        '''\n        return [(x[0], x[1]) for x in strange_sort_list(x.split())]\n\n    lst = [makelist(x) for x in s.split()]\n    return makestuff(s)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    i = lst.index(lst[0])\n    j = lst.index(lst[-1])\n    # if i < j:\n    #     temp = lst[i]\n    #     lst[i] = lst[j]\n    #     lst[j] = temp\n    #     return lst\n    # else:\n    #     temp = lst[j]\n    #     lst[j] = lst[i]\n    #     lst[i] = temp\n    #     return lst\n\n    if lst[0] < lst[j]:\n        temp = lst[0]\n        lst[0] = lst[j]\n        lst[j] = temp\n    if lst[-1] < lst[j]:\n        temp = lst[-1]\n        lst[-1] = lst[j]\n        lst[j] = temp\n    if lst[j] < lst[i]:\n        temp = lst[j]\n        lst[j] = lst[i]\n        lst[i] = temp\n    if lst[i] < lst[j]:\n        temp = lst[i]\n        lst[i] = lst[j]\n        lst[j] = temp\n    if lst[i] < lst[j]:\n        temp = lst[i]\n        lst[i] = lst[j]\n        lst[j] = temp\n    if lst[j+1] < lst[j]:\n        temp = lst[j+1]\n        lst[j+1] = lst[j]\n        lst[j] = temp\n    if lst[j] < lst[j+1]:\n        temp = lst[j]\n        lst[j] = lst[j+1]\n        lst[j+1] = temp", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    last_val = lst[-1]\n    if last_val > lst[0]:\n        lst.reverse()\n    i = 0\n    while i < len(lst) - 1:\n        if lst[i] == lst[i + 1]:\n            lst.insert(i + 1, lst[i + 1])\n        else:\n            lst.insert(i + 1, lst[i])\n            lst.remove(i)\n            i += 1\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted_dict = {}\n    try:\n        for i in lst:\n            sorted_dict[i] = i\n    except IndexError:\n        return []\n    for i in sorted_dict.keys():\n        if sorted_dict[i] < sorted_dict[i + 1]:\n            sorted_dict[i], sorted_dict[i + 1] = sorted_dict[i + 1], sorted_dict[i]\n    return sorted_dict.values()", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    res = []\n    l = len(lst)\n    while l:\n        l1 = lst[0]\n        m1 = lst[1]\n        l = l - 1\n        while l > 1:\n            if m1 > lst[l]:\n                lst[l-1], lst[l-2], lst[l-3] = lst[l-1], lst[l-2], lst[l-3], lst[l-1]\n                l1, m2, m3 = lst[l-1], lst[l-2], lst[l-3]\n                lst[l-1], lst[l-2], lst[l-3] = lst[l-1], lst[l-2], lst[l-3], lst[l-1]\n                l = l - 2\n                m1 = m2 = m3 = lst[l-1]\n                l1 = l2 = l3 = lst[l-2]\n            else:\n                l2, m3 = lst[l-1], lst[l-2]\n                lst[l-1], lst[l-2], lst[l-3] = lst[l-1], lst[l-2], lst[l-3]\n                lst[l-1], lst[l-2], lst[l-3] = lst[l-1], lst[l-2], lst[l-3]\n                l = l - 1", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    items = list(range(len(lst)))\n    items.reverse()\n    while len(items) > 0:\n        i = items.pop()\n        items.insert(0, i)\n        items.insert(0, items.pop())\n        items.insert(0, items.pop())\n        items.insert(0, items.pop())\n        items.insert(0, items.pop())\n\n    return items", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    n = len(lst)\n    m = n\n    r = None\n    while m >= 1:\n        if lst[m-1] < lst[m]:\n            r = lst[m-1]\n            m = m - 1\n        else:\n            r = lst[m]\n            m = m - 1\n    if r is None:\n        return lst\n    else:\n        return strange_sort_list(lst[:m]) + strange_sort_list(lst[m:]) + r", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    res = []\n    for i in range(len(lst)):\n        if lst[i] > lst[i-1]:\n            res.append(lst[i])\n            lst[i] = lst[i-1]\n            lst[i-1] = i-1\n        else:\n            res.append(lst[i])\n            lst[i] = lst[i+1]\n            lst[i+1] = i+1\n    return res\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    res = []\n    for i in range(len(lst)):\n        res.append(lst[i])\n        if lst[i] < lst[i + 1]:\n            res.reverse()\n        else:\n            res.insert(0, lst[i])\n            res.reverse()\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if lst == []:\n        return lst\n    # get minimum\n    m = lst[0]\n    # get maximum\n    max = lst[-1]\n    # swap min and max\n    lst.sort(key=lambda x: x > max)\n    # get min\n    min = lst[0]\n    # add remaining integers to the previous list\n    while len(lst) > 1:\n        if lst[-1] < min:\n            min = lst[-1]\n        lst.insert(0, lst[-1])\n        # swap\n        lst.sort(key=lambda x: x > min)\n        # get min\n        min = lst[0]\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst2 = []\n    for i in range(len(lst)):\n        if lst[i] > lst[i+1]:\n            lst2.append(lst[i])\n        else:\n            lst2.append(lst[i+1])\n    return lst2", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    return sorted(lst, key=lambda x: x + 1, reverse=True)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return [value for value in lst if value < min(lst)]\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    for i in range(len(lst)):\n        left = lst[i]\n        right = lst[i + 1]\n        if left < right:\n            lst.insert(i, right)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = [int(x) for x in lst]\n    if len(lst) > 0:\n        lst.sort(key=lambda x: x, reverse=True)\n        lst.reverse()\n        return lst\n    else:\n        return []", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    d = 0\n    s = len(lst)\n    while d < s:\n        m = lst[d]\n        n = lst[d+1]\n        if n > m:\n            lst.insert(d+2, n)\n            lst.insert(d, m)\n            lst.insert(d+1, n)\n            d += 2\n        else:\n            d += 1\n        if d > s:\n            break\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = list(lst)\n    if len(lst) == 1:\n        return lst\n    low = max(lst)\n    high = min(lst)\n    for i in range(len(lst)):\n        if low == max(lst):\n            high = i\n        elif high == min(lst):\n            low = i\n        else:\n            break\n    while low < high:\n        low += 1\n        high -= 1\n    lst.reverse()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sortedlist = []\n    for i in lst:\n        sortedlist.append(i)\n        if i < lst[0]:\n            sortedlist.insert(0, i)\n    return sortedlist", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda i: min(lst[i:]), reverse=True)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    res = []\n    i = -1\n    while i < len(lst):\n        i = lst.index(lst[i])\n        j = i + 1\n        while j < len(lst) and lst[j] < lst[i]:\n            res.append(lst[i])\n            i += 1\n            j += 1\n        else:\n            res.append(lst[i])\n            i += 1\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n\n    out = []\n    for i in range(len(lst)):\n        if lst[i] < lst[i + 1:]:\n            out.append(lst[i])\n        else:\n            out.append(lst[i + 1])\n            del lst[i]\n            del lst[i + 1]\n\n    return out", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    i = 1\n    if lst[0] == lst[-1] == 0:\n        return lst\n    j = len(lst)\n    while i < j:\n        if lst[i] > lst[j - 1] or lst[j] < lst[i]:\n            k = lst[i + 1]\n            j = i + 1\n            i = k\n            lst[i] = lst[j - 1]\n        elif lst[j] > lst[i] or lst[i] < lst[j]:\n            k = lst[i]\n            j = i\n            i = k\n            lst[i] = lst[j]\n        else:\n            k = lst[i]\n            i = j\n            j = k\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    for i in lst:\n        if i < 0:\n            result.append(lst.pop())\n        else:\n            result.append(i)\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x, reverse=True)\n    lst = [max(lst) + 1 for x in lst if x not in lst]\n    lst = [min(lst) - 1 for x in lst if x in lst]\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    list = [max(lst)]\n    if len(lst) == 0:\n        return list\n    elif len(lst) == 1:\n        return list\n    else:\n        for x in range(len(lst)):\n            if lst[x] < lst[max(lst) - x + 1]:\n                list.insert(0, x)\n                break\n        list.insert(0, max(lst) - len(lst) + 1)\n        return list\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 1:\n        return lst\n    lst.reverse()\n    while True:\n        i = 0\n        j = len(lst)\n        while i < j:\n            if lst[i] < lst[j-1]:\n                j -= 1\n            elif lst[i] > lst[j-1]:\n                i -= 1\n            else:\n                break\n        if i > j:\n            break\n        k = i\n        j -= 1\n        while j >= 0:\n            if lst[k] < lst[j]:\n                k -= 1\n            elif lst[k] > lst[j]:\n                j -= 1\n            else:\n                break\n        if j <= 0:\n            break\n        i = k\n        while i >= 0:\n            if lst[i] < lst[j]:\n                i -= 1\n            elif lst[i] > lst[j]:\n                j -= 1\n            else:\n                break\n        if i >= len(lst):\n            break\n        lst.insert(k, lst[i])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    result = []\n    for x in lst:\n        result.append(x)\n        if x == 1:\n            result.reverse()\n        else:\n            result.insert(0, x)\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    rv = [lst[0]]\n    for i in range(1, len(lst)):\n        max = lst[i]\n        min = lst[i-1]\n        while max > min:\n            rv.append(max)\n            max = min\n            min = max + 1\n        rv.append(min)\n    return rv", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    mylist = []\n    for i in lst:\n        if i > 0:\n            mylist.append(i)\n    return mylist", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    res = []\n    for i in lst:\n        if i < len(lst) - 1:\n            res.append(lst[i])\n            lst.remove(i)\n        else:\n            res.append(lst[0])\n            lst.remove(lst[0])\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x, reverse=True)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # leftmost value and size of the list\n    leftmost = lst[0]\n    # start and stop values\n    start = lst[0]\n    stop = lst[len(lst) - 1]\n    # number of remaining values\n    numremain = len(lst) - start - stop\n    # leftmost value and leftmost size\n    leftmost = lst[0]\n    leftsize = len(lst) - 1\n    # maximum value and minimum size\n    maxsize = 0\n    minsize = len(lst) - 1\n    # number of elements with leftmost values\n    leftsize_elements = len(lst) - start - stop\n    # number of elements with maximum values\n    maxsize_elements = len(lst) - start - stop - leftsize\n    # number of elements with minimum values\n    minsize_elements = len(lst) - start - stop - leftsize\n    # maximum number of elements\n    max_elements = maxsize_elements + maxsize\n    # minimum number of elements\n    min_elements = minsize_elements + minsize\n    # total number of elements\n    elements = numremain + leftsize_elements + leftsize + maxsize_elements + maxsize\n    # sorted list\n    return sorted(lst, key=lambda x: (x - leftmost) / leftsize,", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        return [lst[0], lst[1]]\n    min = lst[0]\n    max = lst[-1]\n    if max > min:\n        oldmax = max\n        oldmin = min\n        max = min\n        min = max\n        for i in range(1, len(lst)):\n            if lst[i] > oldmax:\n                oldmax = lst[i]\n            if lst[i] < oldmin:\n                oldmin = lst[i]\n    for i in range(len(lst) - 1, -1, -1):\n        if lst[i] > lst[i - 1] and lst[i] < lst[i]:\n            lst[i] = lst[i] - 1\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: int(x), reverse=True) #reverse=True is important, otherwise first element is always max\n    return [lst[-1] if lst[-1] == lst[0] else x for x in lst]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    return [ x for x in lst if x < y for y in lst ]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    res = []\n    res.append(lst[0])\n    for i in range(1, len(lst) - 1):\n        tmp = lst[i]\n        lst[i] = lst[i + 1]\n        lst[i + 1] = tmp\n    res.append(lst[-1])\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=operator.itemgetter(1))\n    lst.reverse()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return [[n for n in lst] if n < max(lst) else [max(lst), n for n in lst]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst.sort()\n    lst.reverse()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # make list of maximal integers\n    l = list(lst)\n    l.sort()\n    # replace the minimum value with maximum\n    l[0] = l[0].max()\n    # loop over all the remaining elements\n    for i in xrange(len(l)):\n        # get the max of the remaining elements\n        rl = l[i]\n        if rl > l[i+1]:\n            # swap with the next largest\n            rl, l[i+1] = l[i+1], rl\n        # replace with the min\n        l[i] = rl\n    return l", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # First, find the max index, and remove it\n    start = max(lst)\n    # Now find the min and remove it\n    idx = start\n    while idx < len(lst):\n        idx += 1\n        if lst[idx] > lst[idx - 1]:\n            idx = idx - 1\n    # Now repeat the process with the remaining elements\n    # until the list is sorted\n    while idx < len(lst):\n        idx += 1\n        if lst[idx] > lst[idx - 1]:\n            idx = idx - 1\n        else:\n            break\n    return lst[start:idx]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, reverse=True)\n    return [int(l) for l in lst]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 1:\n        return lst\n    else:\n        # Sort the list of integers\n        l = lst.index(lst[0])\n        m = len(lst) - 1\n        r = m - 1\n        return sorted(lst[l:r], key=lambda x: x + x)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # https://stackoverflow.com/questions/3349362/strange-sorting-list-of-integers\n    # in Python\n    lst = [lst[i] for i in range(len(lst)) if lst[i] > lst[i - 1]]\n    # return list in order\n    return lst[:len(lst) - 1] + lst[len(lst) - 2:]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Get a list of the smallest numbers\n    numbers = []\n    for i in xrange(len(lst)):\n        if lst[i] < lst[i-1]:\n            numbers.append(lst[i])\n        else:\n            numbers.append(lst[i+1])\n    # Sort the list of numbers\n    numbers.sort()\n    # Return the sorted list of numbers\n    return numbers", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return sorted(lst, key=lambda x: x, reverse=True)</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    indices = []\n    for i in range(len(lst)):\n        if lst[i] > lst[len(lst)-1]:\n            indices.append(len(lst)-1)\n        elif lst[i] < lst[0]:\n            indices.append(0)\n        else:\n            indices.append(i)\n    if indices[-1] == len(lst):\n        indices.append(-1)\n    return indices\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return [el[0] if el[0] < el[1] else el[1] for el in lst]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        lst = sorted(lst, reverse=True)\n        return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, reverse=True)\n    res = []\n    i = 1\n    while len(lst) > 0:\n        if lst[i] > lst[i - 1]:\n            i -= 1\n        else:\n            res.append(lst[i])\n        lst = lst[i + 1:]\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    res = []\n    for i in lst:\n        if i > 0:\n            res.append(i)\n        elif i < len(lst) - 1:\n            res.append(i)\n            res.append(i)\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    elif len(lst) == 1:\n        return lst\n    s = lst.pop()\n    i = 1\n    while i <= len(lst):\n        if lst[i] < s:\n            s = lst[i]\n            i += 1\n        else:\n            break\n    return s", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst[0]]\n    i = 0\n    while i < len(lst):\n        j = i + 1\n        while j < len(lst) and lst[i] < lst[j]:\n            j += 1\n        if i == j:\n            lst.insert(i, lst[i])\n        else:\n            lst.insert(i, lst[j])\n    return lst\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    def get_left(idx):\n        '''\n        Get left value of idx.\n        '''\n        if idx == 0:\n            return 0\n        return get_left(idx - 1)\n\n    def get_right(idx):\n        '''\n        Get right value of idx.\n        '''\n        if idx == len(lst) - 1:\n            return len(lst)\n        return get_right(idx + 1)\n\n    def is_straight(idx):\n        '''\n        Is idx straight.\n        '''\n        return idx % 2 == 0\n\n    lst = [idx for idx in lst if idx!= 0]\n    return lst\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    assert len(lst) > 0\n    n = len(lst[0])\n    if n < 2:\n        return lst\n    m = lst[-1]\n    i = 0\n    while n:\n        if i == 0:\n            return lst\n        if m < lst[i]:\n            i += 1\n        else:\n            i = 0\n        m = lst[i]\n        n = lst[i + 1]\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = [int(x) for x in lst]\n    lst.reverse()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    lst = list(lst)\n    lst.reverse()\n    return lst\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted_list = []\n    while lst:\n        for val in lst:\n            if val < sorted_list[-1] or val > sorted_list[0]:\n                sorted_list.append(val)\n        lst = lst[1:]\n\n    return sorted_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    ans = []\n    for i in lst:\n        if i < lst.min():\n            ans.append(lst.min())\n        elif lst.max() <= i <= lst.min():\n            ans.append(lst.max())\n        else:\n            ans.append(i)\n    return ans", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    ret = []\n    for i in lst:\n        ret.append(i)\n        ret.append(i)\n        ret.append(i)\n        ret.append(i)\n        ret.append(i)\n        ret.append(i)\n    return ret\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    tmp = lst\n    while tmp:\n        i = tmp.pop(0)\n        j = tmp.pop(0)\n        if i < j:\n            tmp.insert(0, i)\n            tmp.insert(0, j)\n            result.append(i)\n            result.append(j)\n        else:\n            tmp.insert(0, j)\n            tmp.insert(0, i)\n            result.append(j)\n            result.append(i)\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n\n    # start with the minimum value\n    min_idx = len(lst) - 1\n    lst.reverse()\n    lst.insert(0, min_idx)\n\n    # go through all values in the list\n    for i in range(len(lst)):\n        if lst[i] > lst[min_idx] + 1:\n            lst.insert(i, min_idx + 1)\n            continue\n        elif lst[i] < lst[min_idx]:\n            lst.insert(i, min_idx)\n            break\n        else:\n            lst.insert(i, min_idx + 1)\n            break\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return [i for i in lst if i < len(lst) - 1]\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Why is it here, if we start from minimum, how will it be sorted?\n\n    return sorted(lst, key=min)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def func(lst):\n        sorted_lst = []\n        # sort by minimum\n        for i in range(len(lst) - 1):\n            if lst[i] < lst[i + 1]:\n                sorted_lst.append(lst[i + 1])\n                lst.pop(i + 1)\n            else:\n                sorted_lst.append(lst[i])\n                lst.pop(i)\n        # now sort by the maximum\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                sorted_lst.append(lst[i + 1])\n                lst.pop(i + 1)\n            else:\n                sorted_lst.append(lst[i])\n                lst.pop(i)\n        return sorted_lst\n\n    lst = []\n    # copy the list and shuffle it\n    lst = list(lst)\n    for i in range(len(lst)):\n        lst.sort(cmp=func)\n        lst.reverse()\n        print(strange_sort_list(lst))\n    # sort by maximum\n    lst.sort(cmp=func)\n    lst.reverse()\n    print(strange_sort_list(lst))\n    # sort by minimum\n    lst.sort(cmp=func)\n    lst.reverse()\n    print(strange_sort_list(lst))\n    # sort by", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    low = min(lst)\n    high = max(lst)\n    if low == high:\n        return lst\n    lst.reverse()\n    return strange_sort_list([low, high, min(lst), max(lst), low, high])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    if len(lst) == 1:\n        return [lst[0] - 1]\n    min = lst[0]\n    max = lst[-1]\n    for i in xrange(0, len(lst) - 1):\n        if lst[i] < min:\n            min = lst[i]\n        if lst[i] > max:\n            max = lst[i]\n    return [min, max + 1, min, max + 2, min + 1, min + 2, max + 3, min + 4, min + 5]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def _sort_integer(i):\n        '''\n        Given an integer, return its index in the list.\n        '''\n        return i + 1\n    lst = sorted(lst, key=_sort_integer)\n    lst = [[_l for _l in lst] for _l in lst]\n    lst.reverse()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    def order(lst, key):\n        new_list = []\n        min_val = lst[0]\n        max_val = lst[-1]\n\n        while min_val < key and key > max_val:\n            new_list.append(min_val)\n            min_val += 1\n        while key < max_val and min_val < lst[-1] and min_val > lst[0]:\n            new_list.append(min_val)\n            min_val += 1\n        while min_val < key and key > max_val:\n            new_list.append(min_val)\n            min_val += 1\n        while key < max_val and min_val < lst[-1] and min_val > lst[0]:\n            new_list.append(min_val)\n            min_val += 1\n\n        return new_list\n\n    new_list = []\n    for i in range(len(lst)):\n        if order(lst, lst[i]):\n            new_list.append(lst[i])\n        else:\n            new_list.append(lst[i])\n\n    return new_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst:\n        sorted = []\n        for i in lst:\n            sorted.append(i)\n            while i > sorted[-1]:\n                sorted.append(sorted[-1])\n                i -= 1\n        return sorted", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    max_i = max(lst, key=lambda x: x)\n    min_i = min(lst, key=lambda x: x)\n    i = max_i - min_i + 1\n    i_new = min_i\n    i_new = max(lst)\n    while i_new < len(lst):\n        if lst[i] < lst[i_new]:\n            i_new += 1\n        else:\n            i_new -= 1\n    return lst[i_new]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def sort(lst):\n        lst.reverse()\n        n = len(lst)\n        while n:\n            y = lst.pop(0)\n            x = lst.pop(0)\n            if y < x:\n                y, x = x, y\n        return lst\n\n    return sort(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x[0])\n    lst.reverse()\n    # Strange sorting is also known as heap sort.\n    # So this function will return sorted list in heap order.\n    # The reverse() will make the list in reverse order.\n    return lst\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    index = 0\n    reverse_list = []\n    while index < len(lst):\n        if lst[index] > lst[index-1]:\n            reverse_list.append(lst[index])\n            index += 1\n        else:\n            reverse_list.append(lst[index])\n            index += 1\n    reverse_list.reverse()\n    return reverse_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n    else:\n        return [\n            x if x < x[0] else x[0]\n            for x in reversed(lst)\n        ]\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n\n    tmp = []\n    for i in range(len(lst)):\n        tmp.append(lst[i])\n    tmp.reverse()\n    return tmp", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = []\n    for i in range(len(lst)):\n        if lst[i] < lst[i+1]:\n            lst.append(lst[i])\n            lst.pop(i)\n        elif lst[i] > lst[i+1]:\n            lst.append(lst[i])\n            lst.pop(i)\n        else:\n            lst.append(lst[i])\n            lst.pop(i)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        l1 = lst[0]\n        l2 = lst[-1]\n        if l1 > l2:\n            tmp = l2\n            l2 = l1\n            l1 = tmp\n        l3 = l2\n        if l1 < l3:\n            tmp = l1\n            l1 = l2\n            l2 = tmp\n        l4 = l1\n        if l2 > l4:\n            tmp = l2\n            l2 = l1\n            l1 = tmp\n        l5 = l2\n        if l3 > l5:\n            tmp = l3\n            l3 = l4\n            l4 = tmp\n        l6 = l4\n        if l5 > l6:\n            tmp = l5\n            l5 = l6\n            l6 = tmp\n        l7 = l6\n        if l7 > l8:\n            tmp = l7\n            l7 = l8\n            l8 = tmp\n        l9 = l8\n        if l9 > l10:\n            tmp = l9\n            l9 = l10\n            l10 = tmp\n        return [l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    s = []\n    k = -1\n    for i in lst:\n        if i!= k:\n            s.append(i)\n            k = i\n    s.append(k)\n    return s", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    lst = [int(i) for i in lst]\n    lst.sort(key=lambda x: x - lst[0])\n    lst = [x for x in lst if x > lst[0]]\n    lst = [x for x in lst if x < lst[-1]]\n    lst.reverse()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # ignore list of empty lists\n    if len(lst) == 0:\n        return []\n\n    # iterate through list, starting with the minimum value\n    min_idx = 0\n    for idx in range(len(lst)):\n        if lst[idx] < lst[min_idx] or min_idx < 0:\n            min_idx = idx\n        else:\n            break\n\n    # start with the maximum value\n    max_idx = len(lst) - 1\n    for idx in range(min_idx, max_idx + 1):\n        if lst[idx] > lst[max_idx] or max_idx < len(lst) - 1:\n            max_idx = idx\n        else:\n            break\n\n    # shift list in a direction\n    if max_idx == len(lst) - 1:\n        lst.reverse()\n    else:\n        lst[max_idx], lst[min_idx] = lst[min_idx], lst[max_idx]\n\n    # return result\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    return [item for _, item in sorted(lst)]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x[0]) + sorted(lst, key=lambda x: x[1]) + sorted(lst, key=lambda x: x[2]) + sorted(lst, key=lambda x: x[3]) + sorted(lst, key=lambda x: x[4]) + sorted(lst, key=lambda x: x[5])\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    lst = list(lst)\n    if len(lst) == 1:\n        return lst\n    sorted_lst = sorted(lst, key=lambda x: x, reverse=True)\n    if len(sorted_lst) == 1:\n        return sorted_lst\n    for i in range(len(sorted_lst) - 1, -1, -1):\n        while i < len(sorted_lst) and sorted_lst[i] == sorted_lst[i + 1]:\n            i += 1\n        while i < len(sorted_lst) and sorted_lst[i] < sorted_lst[i + 1]:\n            i += 1\n        while i < len(sorted_lst) and sorted_lst[i] > sorted_lst[i + 1]:\n            i += 1\n        if i == 0:\n            return sorted_lst[:i]\n        else:\n            return sorted_lst[:i], sorted_lst[i:]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    def x(i):\n        if i == 1:\n            return lst[0]\n        elif i == lst[0]:\n            return lst[0]\n        else:\n            return lst[0] + lst[i - 1]\n\n    def y(i):\n        if i == lst[0]:\n            return lst[1]\n        elif i == lst[1]:\n            return lst[1]\n        else:\n            return lst[1] + lst[i - 1]\n\n    order = [lst[0], lst[1], lst[2], lst[3]]\n    for i in range(4, len(order)):\n        if i < len(order):\n            j = order[i]\n            order[i] = order[j]\n            order[j] = j\n        else:\n            break\n\n    return order", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return [item[1] - item[0] for item in lst]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    assert len(lst) == 1\n    return lst[0] < lst[1] < lst[2] < lst[3]\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n    if len(lst) == 0:\n        return lst\n\n    lst = [int(i) for i in lst]\n    lst.reverse()\n\n    for i in range(len(lst)):\n        i = lst[i]\n        while lst[i] < lst[i - 1]:\n            i -= 1\n        i = lst[i] + 1\n        while lst[i] > lst[i + 1]:\n            i += 1\n        lst[i] = i\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    i = lst[0]\n    if i == 0:\n        return lst\n\n    # start with the minimum value\n    j = i\n    while j > 0:\n        if lst[j] < lst[j - 1] or j == len(lst):\n            return lst\n        j -= 1\n    # start with maximum value\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted_list = []\n    for i in lst:\n        if i > 0:\n            sorted_list.append(i)\n        elif i == 0:\n            sorted_list.append(i)\n        else:\n            sorted_list.append(i - 1)\n\n    return sorted_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    rest = lst[len(lst)-1]\n    swap = True\n    for i in range(len(lst)):\n        if lst[i] < rest:\n            rest, swap = lst[i], swap\n        elif lst[i] > rest:\n            swap = False\n        else:\n            break\n    return lst[rest : len(lst)-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted_list = []\n    for item in lst:\n        if item <= lst[0]:\n            sorted_list.append(lst[0])\n        elif item >= lst[-1]:\n            sorted_list.append(lst[-1])\n        else:\n            sorted_list.append(item)\n    return sorted_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # if no elements, return empty list\n    if not lst:\n        return []\n    # else loop through each element\n    remaining = len(lst)\n    while remaining > 0:\n        # get remaining elements\n        new_list = []\n        for i in range(remaining):\n            # add it to new list\n            new_list.append(lst[i])\n            # decrement remaining count\n            remaining -= 1\n        # add new list to the list\n        lst.insert(0, new_list[0])\n        # increment remaining count\n        remaining -= 1\n    # return list\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    n = len(lst)\n    if n == 0:\n        return []\n\n    mid = (n // 2)\n    sorted_list = []\n    for i in range(0, mid, 2):\n        value = lst[i]\n        sorted_list.append(value)\n        lst[i] = lst[i + 1]\n        lst[i + 1] = value\n    return sorted_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # for negative indices, swap the 2 nd and 3 rd values\n    for i in xrange(len(lst)-1, -1, -1):\n        lst[i], lst[len(lst)-1] = lst[len(lst)-1], lst[i]\n    # for negative indices, swap the 1 st and 2 nd values\n    for i in xrange(len(lst)-2, -1, -1):\n        lst[i], lst[len(lst)-2] = lst[len(lst)-2], lst[i]\n    # for negative indices, swap the 2 nd and 3 rd values\n    for i in xrange(len(lst)-1, -1, -1):\n        lst[i], lst[len(lst)-2] = lst[len(lst)-2], lst[i]\n    # for negative indices, swap the 1 st and 2 nd values\n    for i in xrange(len(lst)-2, -1, -1):\n        lst[i], lst[len(lst)-1] = lst[len(lst)-1], lst[i]\n    # for negative indices, swap the 2 nd and 3 rd values\n    for i in xrange(len(lst)-1, -1, -1):\n        lst[i], lst[len(", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    odd = []\n    even = []\n    nums = []\n    for val in lst:\n        if val%2 == 0:\n            odd.append(val)\n            nums.append(val)\n        else:\n            even.append(val)\n            nums.append(val)\n\n    if len(odd) == len(nums):\n        return odd\n\n    odd.reverse()\n    if len(odd) == 0:\n        return odd\n    odd.reverse()\n    even.reverse()\n\n    return odd, even, nums", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n    if len(lst) == 0:\n        return lst\n    sorted_lst = []\n    sorted_lst.append(lst[0])\n    sorted_lst.append(lst[-1])\n    if len(lst) > 1:\n        for i in range(1, len(lst)):\n            current_index = i\n            while current_index!= len(lst)-1:\n                if lst[current_index] < lst[current_index+1]:\n                    current_index += 1\n                else:\n                    current_index -= 1\n                sorted_lst.append(lst[current_index])\n    return sorted_lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def _simplex(lst):\n        if len(lst) == 0:\n            return lst\n        elif len(lst) == 1:\n            return lst[0]\n        else:\n            if len(lst) % 2 == 0:\n                return _simplex(lst[:2])\n            else:\n                return _simplex(lst[:2] + lst[2:])\n\n    def _simplex_sort(lst):\n        if len(lst) == 0:\n            return lst\n        elif len(lst) == 1:\n            return lst[0]\n        else:\n            if len(lst) % 2 == 0:\n                return _simplex_sort(lst[:2])\n            else:\n                return _simplex_sort(lst[:2] + lst[2:])\n\n    return _simplex(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    min = lst[0]\n    max = lst[-1]\n    temp = []\n    temp.append(min)\n    for item in lst[1:]:\n        if item < min:\n            min = item\n            max = lst[-1]\n        elif item > max:\n            max = item\n            min = lst[0]\n    while min < max:\n        temp.append(min)\n        min += 1\n        max -= 1\n    temp.reverse()\n    return temp", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n\n    for i in range(len(lst) - 1):\n        j = i + 1\n        while j <= len(lst) and lst[j] <= lst[j + 1]:\n            j += 1\n        if j <= len(lst) and lst[j] > lst[j + 1]:\n            lst.insert(j, lst[j])\n            lst.insert(j + 1, lst[j + 1])\n        elif j > len(lst):\n            lst.insert(j - 1, lst[j])\n            lst.insert(j - 1, lst[j + 1])\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def sort(a,b):\n        if a < b:\n            return -1\n        elif b < a:\n            return 1\n        else:\n            return 0\n\n    lst = []\n    for x in lst:\n        lst.append(sort(x, lst[-1]))\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    min, max = lst[0], lst[-1]\n    if min == max:\n        return lst\n    else:\n        next_min, next_max = min, max\n        while (next_min < max and next_max < min):\n            next_min, next_max = next_min, next_max\n        next_min -= 1\n        while (next_min >= min and next_max <= max):\n            next_min, next_max = next_min, next_max\n        next_max += 1\n        while (next_min <= max and next_max >= min):\n            next_min, next_max = next_min, next_max\n        return [next_min, next_max]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return [lst[i] for i in range(len(lst))]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    minval = lst[0]\n    l = lst[1:]\n    smax = minval\n    i = 0\n    while i < len(lst):\n        if lst[i] > smax:\n            smax = lst[i]\n            i += 1\n        else:\n            break\n    smax += 1\n    for i in range(i, len(lst)+1):\n        if lst[i] < smax:\n            smax = lst[i]\n    return [l[:i] + (smax, l[i+1:])]\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = [element for element in lst if element > 0]\n    # reverse the sorted list\n    lst.reverse()\n\n    # find the minimum number\n    min = lst[0]\n    for i in xrange(len(lst)):\n        if lst[i] < min:\n            min = lst[i]\n\n    # for each element in the list\n    for element in xrange(len(lst)):\n        # change the element to its minimum value\n        element = min\n        # subtract the current element from the previous element\n        lst[element - 1] -= lst[element]\n\n    # return the result\n    return lst\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if not lst:\n        return []\n\n    new_list = []\n    for x in lst:\n        if x == 0 or x == lst[0]:\n            new_list.append(x)\n            continue\n\n        new_tail = x\n        while new_tail!= 0:\n            x = new_tail\n            new_tail = x - 1\n        new_list.append(x)\n\n    return new_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    min_value = lst[0]\n    lst = lst[1:]\n    # Make the largest value the smallest\n    for i in range(len(lst)):\n        if lst[i] > min_value:\n            min_value = lst[i]\n        else:\n            break\n    # Make the smallest value the largest\n    for i in range(len(lst)):\n        if lst[i] < min_value:\n            min_value = lst[i]\n        else:\n            break\n    # Sort the list in weird order\n    return [lst[:i]] + list(lst[i+1:])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    return lst[0:-1] + lst[1:]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    m = lst.min()\n    x = m\n    while x!= lst[0]:\n        m = x\n        x = x - 1\n        if x!= m:\n            return list(x)\n    return list(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    def sort_list(lst, cmp):\n        \"\"\"\n        Sort the list and return list\n        :param lst: list to sort\n        :param cmp: compare function\n        :return: sorted list\n        \"\"\"\n        sorted = []\n        if lst is None:\n            return sorted\n\n        # Getting the maximum value\n        val = lst[0]\n\n        # Getting the next value\n        nextval = lst[1]\n\n        while val is not None:\n            # Check if the value is the maximum value\n            if cmp(val, nextval) < 0:\n                nextval = val\n            # Check if the value is the minimum value\n            if cmp(val, nextval) > 0:\n                val = nextval\n\n            # Check if the value is already the minimum value\n            if val == nextval:\n                val = lst[0]\n\n            # Check if the value is already the maximum value\n            if val == lst[1]:\n                val = lst[1]\n\n            # Check if the value is already the maximum value\n            if val == lst[0]:\n                val = lst[1]\n\n            sorted.append(val)\n            lst = lst[1:]\n\n        return sorted\n\n    return sort_list(lst, cmp)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    from random import randrange\n    rnd = randrange(0, len(lst))\n    lst.reverse()\n    for i in range(len(lst) - 1):\n        if lst[i] < lst[rnd]:\n            lst[i], lst[rnd] = lst[rnd], lst[i]\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst2 = []\n    while lst:\n        max_val = lst[-1]\n        if max_val == lst[-1]:\n            lst2.append(lst[-1])\n        else:\n            lst2.append(max_val)\n            del lst[-1]\n        lst = lst[:-1]\n    return lst2", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # we start with the minimum value\n    min = lst[0]\n\n    # we check all remaining values\n    for i in range(len(lst) - 1):\n        if lst[i] <= min:\n            min = lst[i]\n        else:\n            break\n\n    # return the sorted list\n    return [min + 1, min, min + 2, min + 3, min + 4, min + 5, min + 6]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    max = lst[0]\n    min = lst[-1]\n\n    lst = [max, min, max, min, max]\n\n    for i in range(len(lst)):\n        min, max = lst[i], lst[i + 1]\n        lst[i], lst[i + 1] = lst[i + 2], lst[i]\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    c = 0\n    d = len(lst)\n    l = len(lst) // 2\n    while c < l:\n        if c == 0:\n            i = lst[0]\n            lst[0] = lst[l]\n            lst[l] = i\n            i = lst[0]\n            lst[0] = lst[l]\n            lst[l] = i\n        else:\n            i = lst[c]\n            if lst[c] < lst[d - 1] and lst[d - 1] < lst[d - 2]:\n                c += 1\n            elif lst[c] < lst[d - 1] or lst[d - 1] < lst[d - 2]:\n                d -= 1\n            elif lst[c] < lst[d - 1] and lst[d - 1] < lst[d - 2]:\n                d -= 1\n        c += 1\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    out = []\n    for i in range(len(lst)):\n        if lst[i] > lst[len(lst) - i - 1]:\n            out.append(lst[i])\n        else:\n            out.append(lst[len(lst) - i - 1])\n            if lst[i] < lst[len(lst) - i - 1]:\n                out.append(lst[i])\n    return out", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted_lst = []\n    for i in range(len(lst)-1):\n        if lst[i] < lst[i+1]:\n            sorted_lst.append(lst[i])\n            sorted_lst.append(lst[i+1])\n            sorted_lst.append(lst[i])\n        else:\n            sorted_lst.append(lst[i+1])\n            sorted_lst.append(lst[i])\n            sorted_lst.append(lst[i])\n        sorted_lst.append(lst[i+1])\n    return sorted_lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    pos1 = -1\n    pos2 = -1\n    for i in range(len(lst)):\n        if lst[i] == lst[pos1]:\n            pos1 = i\n        if lst[i] == lst[pos2]:\n            pos2 = i\n    return [lst[pos1]] + [lst[pos2]] + [lst[pos1]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return [x for x in lst if x > x][:-1] + [x for x in lst if x < x][:-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: -x) # sort list by x\n    return lst[1:] + lst[:-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Construct ordered list\n    li = sorted(lst, key=lambda x: x, reverse=True)\n    # Reverse order\n    li = [y for x, y in zip(li, li[1:])]\n    return li\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x:x[0])\n    reverse = False\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        if lst[0] < lst[1]:\n            reverse = True\n        else:\n            return lst\n    for i in range(len(lst)-1):\n        if lst[i+1] < lst[i]:\n            reverse = True\n        else:\n            return lst\n    if reverse:\n        return lst\n    else:\n        return lst[:len(lst)-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    elif len(lst) == 1:\n        return lst\n    i = 0\n    tmp = lst[0]\n    lst[0] = lst[1]\n    lst[1] = tmp\n    while i < len(lst):\n        if lst[i] < lst[i+1]:\n            lst.insert(i, lst[i])\n            i += 1\n        else:\n            lst.insert(i, lst[i+1])\n            i += 1\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = list(sorted(lst, key=lambda x: -x))\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    for i in lst:\n        if i < 0:\n            i = 0\n        result.append(i)\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x*(x < x)) # minimum first\n    lst.reverse()\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            lst.insert(i, lst[i])\n            lst.insert(i + 1, lst[i + 1])\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    last = lst[-1]\n    if last == 0:\n        return [lst[0]]\n    elif last < lst[-1]:\n        return [lst[-1], lst[-2], lst[-1], lst[-2]]\n    else:\n        return [lst[-2]] + strange_sort_list(lst[:-1]) + [lst[-1]]\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return sorted(lst, key=lambda i: reverse(lst[i]))", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # Algorithm\n    if len(lst) == 0:\n        return []\n\n    # Maintain list of sorted indices\n    sorted_idx = []\n    prev_idx = -1\n    cur_idx = 0\n\n    # Iterate through list of indices\n    for idx in lst:\n        # Get current value\n        cur_val = idx\n        # Get previous value\n        prev_val = sorted_idx[cur_idx]\n\n        # Check if we've hit the last element\n        if cur_idx == len(lst) - 1:\n            # Reached the end\n            break\n\n        # Change index\n        cur_idx = prev_idx + 1\n\n        # Add to the list of sorted indices\n        sorted_idx.append(cur_idx)\n\n        # Add to the list of sorted indices\n        sorted_idx.append(prev_idx)\n\n        # Get the next value\n        cur_val = sorted_idx[cur_idx]\n\n        # Check if we need to continue\n        if cur_idx == len(lst) - 1:\n            break\n\n    # Return sorted list\n    return sorted_idx", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if len(lst) == 0:\n        return lst\n\n    count = 0\n\n    lst.reverse()\n\n    for i in range(len(lst)):\n        if lst[i] < lst[count]:\n            count += 1\n        else:\n            lst[i] = lst[count]\n            count -= 1\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def strange_sort_list_fun(v):\n        if v >= 10:\n            return 0\n        elif v >= 9:\n            return 1\n        elif v >= 8:\n            return 2\n        elif v >= 7:\n            return 3\n        elif v >= 6:\n            return 4\n        elif v >= 5:\n            return 5\n        else:\n            return v\n\n    for i in range(len(lst)):\n        if i < len(lst) - 1:\n            x = strange_sort_list_fun(lst[i])\n            y = strange_sort_list_fun(lst[i + 1])\n            z = strange_sort_list_fun(lst[i + 2])\n            while z >= x:\n                x, y = y, x\n                z = strange_sort_list_fun(lst[i + 3])\n            while y >= z:\n                y, z = z, y\n                z = strange_sort_list_fun(lst[i + 4])\n            while x >= y:\n                x, y = y, x\n                y = strange_sort_list_fun(lst[i + 5])\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted_list = []\n    if len(lst) == 0:\n        return sorted_list\n\n    for i in range(len(lst) - 1):\n        if lst[i] < lst[i + 1]:\n            sorted_list.append(lst[i])\n            del lst[i]\n        else:\n            sorted_list.append(lst[i + 1])\n            del lst[i + 1]\n\n    return sorted_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return sorted(lst, reverse=True)[:-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def sort_by_max(lst):\n        \"\"\"\n        Sort list by max element\n        \"\"\"\n        lst.sort()\n        return lst\n\n    def sort_by_min(lst):\n        \"\"\"\n        Sort list by min element\n        \"\"\"\n        lst.sort()\n        return lst\n\n    lst = lst[0]\n\n    if lst!= lst[-1]:\n        lst = sort_by_max(lst)\n    else:\n        lst = sort_by_min(lst)\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    min_index = len(lst) - 1\n    max_index = 0\n    for i in range(len(lst)):\n        if lst[i] < lst[min_index]:\n            min_index = i\n        if lst[i] > lst[max_index]:\n            max_index = i\n    return lst[min_index:max_index]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n\n    if len(lst) == 1:\n        return lst\n    else:\n        return lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    temp = []\n    for i in lst:\n        if i < len(lst) - 1:\n            temp.append(lst[i])\n            lst[i] = lst[i + 1]\n        else:\n            temp.append(lst[i])\n            lst[i] = temp.pop()\n    return temp", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = list(lst)\n    if lst:\n        n = len(lst)\n        while True:\n            midpoint = n//2\n            if lst[midpoint] < lst[midpoint+1]:\n                lst.insert(midpoint+1, lst[midpoint])\n            else:\n                lst.insert(midpoint, lst[midpoint+1])\n                break\n        return lst\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n\n    value = lst[0]\n\n    for i in range(len(lst) - 1):\n        if value < lst[i]:\n            value = lst[i]\n        elif value > lst[i + 1:]:\n            value = lst[i + 1]\n\n    return value", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    def is_odd(x):\n        return x & 1 == 1\n\n    def is_even(x):\n        return x & 1!= 1\n\n    return [odd(x) for x in lst] + [even(x) for x in lst]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    res = []\n    for item in lst:\n        if item < res[-1] or item > res[0]:\n            res.append(item)\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def rsort(lst):\n        '''\n        Reverse the list, so that the smallest element comes first.\n        '''\n        lst.reverse()\n        return lst\n\n    rsort(lst)\n    lst = []\n    for i in lst:\n        lst.append(max(lst) + 1)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    from struct import pack\n    if len(lst)!= 2:\n        return lst\n    # First create a list of ranges\n    ranges = [(max(lst) - min(lst), min(lst)), (min(lst) - max(lst), max(lst))]\n    # Now create the reversed list\n    reverse_list = [int(value) for value in lst if value not in ranges]\n    # Now we sort the reverse list\n    sorted_list = sorted(reverse_list, key=lambda x: x[1])\n    # Finally we return the list\n    return sorted_list\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    min_val = lst[0]\n    max_val = lst[-1]\n    result = []\n    for i in xrange(len(lst)):\n        if min_val < lst[i]:\n            result.append(min_val)\n            min_val = lst[i]\n        elif max_val > lst[i]:\n            result.append(max_val)\n            max_val = lst[i]\n        else:\n            result.append(lst[i])\n\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    # create a list to hold the values\n    l = []\n    # loop through and sort it\n    for i in range(len(lst)):\n        # ignore the empty list\n        if lst[i]!= '':\n            # get the value and add to the list\n            l.append(int(lst[i]))\n    # return the list\n    return l", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    new_lst = []\n    while len(lst):\n        if lst[0] > lst[1]:\n            lst.insert(1, lst[0])\n        else:\n            lst.insert(0, lst[1])\n        if len(lst) == 2:\n            return strange_sort_list(lst)\n        new_lst.append(lst[0])\n        lst.pop(0)\n        lst.pop(1)\n    return new_lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=max, reverse=True)\n    lst.reverse()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def __getitem__(self, key):\n        return [key + i for i in range(len(self)) if i!= key]\n\n    if len(lst) == 0:\n        return []\n    else:\n        n = len(lst)\n        if n == 1:\n            return [__getitem__(self, 0)]\n        else:\n            return [__getitem__(self, 0), __getitem__(self, n - 1), __getitem__(self, n - 2), __getitem__(self, n - 3), __getitem__(self, n - 4), __getitem__(self, n - 5), __getitem__(self, n - 6), __getitem__(self, n - 7), __getitem__(self, n - 8), __getitem__(self, n - 9), __getitem__(self, n - 10), __getitem__(self, n - 11), __getitem__(self, n - 12), __getitem__(self, n - 13), __getitem__(self, n - 14), __getitem__(self, n - 15), __getitem__(self,", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = [int(x) for x in lst]\n    if len(lst) == 0:\n        return lst\n    lst = [int(x) for x in lst]\n    if len(lst) == 1:\n        return lst\n\n    def hs_op(value):\n        return value\n\n    for i in range(0, len(lst) - 1):\n        if hs_op(lst[i]) < hs_op(lst[i + 1]):\n            hs_op(lst[i]) = lst[i + 1]\n            hs_op(lst[i + 1]) = lst[i]\n            lst = []\n            break\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    mylist = []\n    m = lst[0]\n    while mylist!= []:\n        mylist.append(m)\n        m = lst[-1]\n    mylist.reverse()\n    return mylist\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    n = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] > n:\n            n = lst[i]\n            break\n    for i in range(1, len(lst)):\n        if lst[i] < n:\n            n = lst[i]\n            break\n    return [lst[0]] + strange_sort_list(range(n + 1, len(lst), 1))[1:]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted_list = []\n    for item in lst:\n        if item < item + 1:\n            sorted_list.append(item)\n        else:\n            sorted_list.append(item - 1)\n    return sorted_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    for item in lst:\n        if item < 0:\n            result.append(result.pop(result.index(item)))\n        else:\n            result.append(item)\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    q = len(lst)\n    if q == 0:\n        return lst\n    # unique integers in sorted order\n    lst2 = []\n    k = len(lst) - 1\n    l = len(lst)\n    while k >= 0:\n        # find the maximum element in the left sub-list\n        maxVal = lst[k][:l-1]\n        # find the minimum element in the right sub-list\n        minVal = lst[k][l:-1]\n        # join the left sub-list with the right sub-list\n        lst2.append(maxVal)\n        lst2.append(minVal)\n        k -= 1\n    return lst2", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    to_sort = []\n    for i in xrange(len(lst)):\n        if lst[i] < lst[len(lst)-1]:\n            to_sort.append(lst[i])\n            lst.pop(i)\n    to_sort.reverse()\n    return to_sort\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # Calculate the minimum and maximum values\n    min_i = min(lst)\n    max_i = max(lst)\n\n    # Check if the maximum is smaller than the minimum\n    if max_i <= min_i:\n        max_i = min_i + 1\n\n    # Loop over the list of integers\n    i = 0\n    while i <= max_i - 1:\n        # If the minimum is smaller than the current value\n        if min_i < i:\n            # Increment the index of the current value and decrement the value of the minimum\n            i += 1\n            min_i = i\n\n            # Increment the value of the maximum and decrement the value of the minimum\n            max_i = max(max_i + 1, i)\n            min_i = i\n\n        # If the maximum is smaller than the current value\n        else:\n            # Increment the value of the current value and decrement the value of the maximum\n            i += 1\n            max_i = i\n            min_i = i\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # all the integers should be sorted\n    if len(lst) == 0:\n        return lst\n\n    # find the maximum\n    maxint = max(lst)\n    # now find the minimum\n    minint = min(lst)\n\n    # add the minimum to the end\n    lst.append(minint)\n\n    # add the maximum to the front\n    lst.insert(0, maxint)\n\n    # do the same with the remaining integers\n    for i in range(len(lst)-1):\n        lst[i] = lst[i] + lst[i+1]\n\n    return lst\n\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if len(lst) == 0:\n        return lst\n    elif len(lst) == 1:\n        return lst\n    else:\n        ls = []\n        for i in range(0, len(lst)):\n            if lst[i] < lst[i+1]:\n                ls.append(lst[i])\n                lst.pop(i)\n        if len(ls) == 1:\n            ls.append(lst[0])\n            lst.pop(0)\n        return strange_sort_list(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    lst.sort(key=lambda x: x)\n    i = 1\n    while i < len(lst):\n        j = len(lst) - i\n        if lst[i] <= lst[j]:\n            lst.insert(j, lst[i])\n            i = j\n        else:\n            lst.insert(i, lst[j])\n            i = j + 1\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Create a reversed list\n    rev_list = reversed(lst)\n\n    # Sort it\n    sorted_list = sorted(rev_list, key=lambda x: x, reverse=True)\n\n    # Print it\n    return sorted_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    for i in lst:\n        if i == 0:\n            result.append(i)\n            continue\n        if result[-1] > i:\n            result.append(i)\n            result.append(result[-1])\n            result.append(i)\n        else:\n            result.append(i)\n            result.append(result[-1])\n            result.append(i)\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n    else:\n        a = lst[0]\n        b = lst[-1]\n        while b!= a:\n            if a < b:\n                lst.insert(0, a)\n                lst.insert(1, b)\n                lst.insert(2, a)\n                lst.insert(3, b)\n                lst.insert(4, a)\n                lst.insert(5, b)\n            else:\n                lst.insert(0, b)\n                lst.insert(1, a)\n                lst.insert(2, a)\n                lst.insert(3, a)\n                lst.insert(4, b)\n                lst.insert(5, a)\n                lst.insert(6, b)\n                lst.insert(7, a)\n                lst.insert(8, a)\n                lst.insert(9, b)\n                lst.insert(10, b)\n                lst.insert(11, b)\n                lst.insert(12, b)\n                lst.insert(13, b)\n                lst.insert(14, b)\n                lst.insert(15, b)\n                lst.insert(16, b)\n                lst.insert(17, b)\n                lst.insert(18, b)\n                lst.insert(19, b)\n                lst.insert(20, b)\n                lst.insert(21", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sortedlist = []\n    for i in lst:\n        if i < lst[0]:\n            sortedlist.append(i)\n        elif i > lst[len(lst) - 1]:\n            sortedlist.append(i)\n        else:\n            sortedlist.append(i - lst[len(lst) - 1])\n    return sortedlist", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if not lst:\n        return []\n\n    mid = len(lst)\n    l = []\n    r = []\n\n    for i in range(len(lst)):\n        if lst[i] < lst[mid - i]:\n            r.append(lst[i])\n            l.append(lst[mid - i])\n        else:\n            r.append(lst[mid - i])\n            l.append(lst[i])\n\n    return l, r", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def get_min(lst):\n        return min(lst)\n    def get_max(lst):\n        return max(lst)\n    def get_order(lst):\n        lst = [lst]\n        while lst:\n            for idx, element in enumerate(lst):\n                if element < get_min(lst):\n                    lst.remove(idx)\n                    break\n            else:\n                break\n    lst = [get_min(lst), get_max(lst), get_min(lst), get_max(lst), get_min(lst), get_max(lst)]\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Each value is a list of other values, so create list\n    # of lists for each value.\n    all_lists = [[] for i in range(len(lst))]\n    for i in range(len(lst)):\n        all_lists[i] = lst[i]\n    sorted_lists = []\n    for i in range(len(all_lists)):\n        # Put the smallest value first, and so on.\n        sorted_lists.append(all_lists[i])\n        # Then we can put the rest in the order of\n        # increasing values.\n        for j in range(i, len(all_lists)):\n            if i == j:\n                continue\n            if all_lists[j] < all_lists[i]:\n                sorted_lists[j] = all_lists[j]\n                all_lists[j] = all_lists[i]\n        sorted_lists[i] = all_lists[i]\n    return sorted_lists", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        a = lst[0]\n        b = lst[-1]\n        # Pick the most negative value.\n        if a <= b:\n            b, a = a, b\n        # Pick the most positive value.\n        if a >= b:\n            b, a = b, a\n        # Pick the next most negative value.\n        if a <= b:\n            b, a = a, b\n        # Pick the next most positive value.\n        if a >= b:\n            b, a = b, a\n        # Pick the next most negative value.\n        if a <= b:\n            b, a = a, b\n        # Pick the next most positive value.\n        if a >= b:\n            b, a = b, a\n        # Pick the next most negative value.\n        if a <= b:\n            b, a = a, b\n        # Pick the next most positive value.\n        if a >= b:\n            b, a = b, a\n        # Pick the next most negative value.\n        if a <= b:\n            b, a = a, b\n        # Pick the next most positive value.\n        if a >= b:\n            b, a = b, a\n        # Pick the next most negative value.\n        if a <= b:\n            b, a = a, b\n        # Pick the", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst_sorted = sorted(lst, reverse=True)\n    lst_sorted.reverse()\n    return lst_sorted", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n    elif lst == []:\n        return lst\n    max_index = 0\n    min_index = len(lst) - 1\n    for i in range(len(lst) - 1, -1, -1):\n        if lst[i] > lst[i + 1]:\n            min_index = i\n            max_index = i + 1\n        elif lst[i] < lst[i - 1]:\n            max_index = i\n            min_index = i - 1\n    return [lst[min_index], lst[max_index], lst[min_index], lst[max_index]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # We need to sort the array, then remove the minimum value from the array\n    ret_val = []\n    for i in range(len(lst)):\n        # At first, we need to remove the minimum value from the array\n        if lst[i] == lst[min_idx]:\n            min_idx = i\n        else:\n            ret_val.append(lst[i])\n\n    # Next, we will sort the rest of the list.\n    ret_val.sort(key=lambda x: x - min_idx)\n    return ret_val", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    l = []\n    for i in lst:\n        if i == 0 or i == lst.count(i):\n            continue\n        elif i == lst.count(i - 1):\n            l.append(lst.pop(i))\n        else:\n            l.append(i)\n    return l", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Here the order is reversed from what we would expect.\n    lst = sorted(lst, key=lambda x: x > 0, reverse=True)\n    # Here we do a normal sort.\n    lst = sorted(lst, key=lambda x: x < 0, reverse=False)\n    # Now we can reverse the list.\n    lst.reverse()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    new_list = []\n    for i in lst:\n        if i is not None:\n            new_list.append(i)\n    return new_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    st = []\n    for i in range(len(lst)):\n        st.append(lst[i])\n    st.reverse()\n    return st", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    while len(lst) > 1:\n        x, y = lst[0], lst[1]\n        x, y = int(x), int(y)\n        lst.pop(0)\n        lst.pop(1)\n        lst.insert(0, x)\n        lst.insert(1, y)\n        if x == y:\n            continue\n        if x > y:\n            lst.reverse()\n        else:\n            lst.reverse()\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    assert len(lst) > 0, 'Sorting list of length 0'\n    s = None\n    for i in range(len(lst) - 1):\n        if lst[i] <= lst[i + 1]:\n            s = i + 1\n            break\n        if s is None:\n            s = i\n    if s is None:\n        return lst\n    return lst[:s] + lst[s:]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    lst = [lst]\n    while lst:\n        if lst[0] < lst[1]:\n            lst.insert(0, lst[1])\n            lst.insert(1, lst[0])\n        else:\n            lst.insert(0, lst[0])\n            lst.insert(1, lst[1])\n        result.append(lst[-1])\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted_list = []\n    for i in lst:\n        if i > lst[-1]:\n            sorted_list.append(i)\n            lst.pop(-1)\n            sorted_list.append(lst[-1])\n            lst.pop(-1)\n        else:\n            sorted_list.append(lst[-1])\n            lst.pop(-1)\n    return sorted_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: int(x))\n    i = 0\n    while i < len(lst):\n        # find largest element that is smaller than previous\n        # note: it will be a correct result only if\n        #    the last element has been sorted\n        if lst[i] > lst[i-1]:\n            i = i - 1\n            del lst[i]\n        else:\n            # append maximum to list, because we have to\n            # append first minimum\n            lst.insert(i, lst[i])\n            del lst[i]\n            i += 1\n\n    # now do the same thing with the rest of the list\n    i = 0\n    while i < len(lst):\n        if lst[i] > lst[i-1]:\n            i = i - 1\n            del lst[i]\n        else:\n            # append maximum to list, because we have to\n            # append first minimum\n            lst.insert(i, lst[i])\n            del lst[i]\n            i += 1\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    res = []\n    count = 0\n    for i in lst:\n        if count == len(lst) - 1:\n            res.append(lst[0])\n        res.append(lst[i])\n        count += 1\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # First, find the smallest number, then the largest\n    min = lst[0]\n    max = lst[-1]\n    # Now, walk through the list, moving from the left to the right,\n    # until you reach a position where the next smallest number\n    # is larger than the current largest number.\n    while min < max:\n        # Test if the next smallest number is bigger than the current largest.\n        if min < max:\n            if min > max:\n                min = max\n            else:\n                max = min\n        # Move to the next smallest number\n        min += 1\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # list with index, sorted\n    lst_index = []\n    for value in lst:\n        lst_index.append(value)\n        if value > lst_index[-1] or lst_index[-1] <= value:\n            lst_index.reverse()\n            # [value, lst_index[-1], value, lst_index[-1], value, lst_index[-1]...]\n            lst_index.insert(0, value)\n            lst_index.insert(-1, value)\n            # print(str(lst_index))\n    return lst_index", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted_lst = []\n    for item in lst:\n        if item <= min(lst):\n            sorted_lst.append(item)\n        elif item > max(lst):\n            sorted_lst.append(item)\n        else:\n            sorted_lst.append(item)\n    return sorted_lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    def sorted_value(value):\n        if value < 0:\n            return -1\n        elif value == 0:\n            return 0\n        else:\n            return 1\n\n    return sorted(lst, key=sorted_value)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return [i for i, j in enumerate(lst) if j > i] + [i]\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    lowest = lst[0]\n    while lowest!= 0:\n        if lowest < lst[-1]:\n            result.append(lst[-1])\n        else:\n            result.append(lst[0])\n            lowest = lst[0]\n    result.reverse()\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted_list = []\n    while True:\n        min_val, max_val = lst\n        for val in lst:\n            if val < min_val:\n                min_val, max_val = val, min_val\n            if val > max_val:\n                max_val, min_val = val, max_val\n        sorted_list.append(min_val)\n        lst = lst[::-1]\n    return sorted_list\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    min_value, max_value = lst[0], lst[-1]\n    while min_value < max_value:\n        result = []\n        for value in lst:\n            if value < min_value:\n                result.append(min_value)\n            elif value > max_value:\n                result.append(max_value)\n            else:\n                result.append(value)\n        lst = result\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    out = []\n    for num in lst:\n        if num < lst[0]:\n            out.append(num)\n        elif num > lst[-1]:\n            out.append(num)\n            out.append(lst[0])\n        else:\n            out.append(num)\n            out.append(lst[-1])\n    return out", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    res = []\n    while lst:\n        if lst[-1] > lst[0]:\n            res.append(lst[0])\n        else:\n            res.append(lst[-1])\n        lst = lst[:-1]\n    return res", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    def odd():\n        '''\n        function for odd number of integers\n        '''\n        return False\n\n    def odd_list():\n        '''\n        function for odd list of integers\n        '''\n        return lst\n\n    def even():\n        '''\n        function for even number of integers\n        '''\n        return True\n\n    def even_list():\n        '''\n        function for even list of integers\n        '''\n        return lst\n\n    def count(x):\n        '''\n        counts how many times an integer occurs\n        '''\n        return len([x for x in lst if x!= x])\n\n    def is_odd(x):\n        '''\n        if integer x occurs only once\n        '''\n        return count(x) % 2 == 0\n\n    def is_even(x):\n        '''\n        if integer x occurs only twice\n        '''\n        return count(x) % 2 == 0\n\n    def is_int(x):\n        '''\n        if integer x is an integer\n        '''\n        return x == x\n\n    def is_odd_number(x):\n        '''\n        if an integer is an odd number\n        '''\n        return is_odd(x)\n\n    def is_even_number(x):\n        '''\n        if an integer is an even number\n        '''\n        return is_even(x)\n\n    def is_integer(x)"]]