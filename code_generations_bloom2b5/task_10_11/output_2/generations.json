[["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest palindrome that begins with the supplied string.\n    longest_prefix = ''\n    for char in string:\n        if char in string:\n            longest_prefix += char\n    # Find longest postfix that is a palindrome.\n    longest_postfix = longest_prefix\n    for char in longest_prefix:\n        if char in string:\n            longest_postfix += string[len(char):]\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    if longest_prefix:\n        return longest_prefix[::-1] + longest_postfix\n    else:\n        return longest_prefix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome = ''\n    longest_prefix = ''\n    longest_suffix = ''\n    while len(palindrome) < len(string):\n        palindrome = palindrome + string[::-1]\n        if palindrome == palindrome[::-1]:\n            palindrome = ''\n            longest_prefix = palindrome\n        if palindrome == palindrome[::-1]:\n            palindrome = ''\n            longest_suffix = palindrome\n    palindrome = palindrome[:-1]\n    longest_prefix = longest_prefix[:-1]\n    longest_suffix = longest_suffix[:-1]\n    return palindrome + longest_prefix + longest_suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n\n    palindrome = ''\n    for i in range(len(string)):\n        if string[i]!= string[len(string) - i - 1:]:\n            palindrome = palindrome + string[len(string) - i - 1:]\n            break\n    return palindrome + string[len(string) - i - 1:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_postfix = ''\n    longest_prefix = ''\n    for char in string:\n        if char =='':\n            longest_prefix = longest_prefix[:-max(len(longest_prefix), len(char))]\n        if char =='':\n            longest_prefix = longest_prefix[:-max(len(longest_prefix), len(char))]\n            longest_postfix = longest_postfix + char\n        else:\n            longest_prefix = longest_prefix + char\n            longest_postfix = longest_postfix + char\n    return longest_prefix + longest_postfix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_prefix = ''\n    longest_suffix = ''\n    for char in string:\n        if char =='':\n            longest_prefix += char\n        else:\n            longest_suffix += char\n    return longest_prefix + reverse(string[::-1]) + longest_suffix\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) < 2:\n        return string\n    length = len(string)\n    while length > 1:\n        if string[-length-1] == string[-length-2]:\n            return string[:-length-1]\n        length -= 1", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if is_palindrome(string):\n        return string\n    length = len(string)\n    if length > 1:\n        for i in range(length - 1):\n            if is_palindrome(string[-i - 1]):\n                return string[-length - i - 1:]\n        return string[-length - 1:] + string[-length - 1:]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest postfix of string that is a palindrome\n    longest_prefix = ''\n    for char in string:\n        if char =='':\n            break\n        if char.isalpha():\n            longest_prefix += char\n    # Append reverse of string prefix that comes before the palindromic suffix\n    if longest_prefix.startswith(string):\n        longest_prefix[len(string):] = reverse(longest_prefix[len(string):])\n    return longest_prefix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_prefix = []\n    longest_prefix.append(string)\n    while longest_prefix:\n        if longest_prefix[0] == longest_prefix[-1]:\n            return longest_prefix\n        longest_prefix.pop()\n\n    longest_prefix.append(string[::-1])\n    while longest_prefix:\n        if longest_prefix[0] == longest_prefix[-1]:\n            return longest_prefix\n        longest_prefix.pop()\n\n    return ''\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    length = len(string)\n\n    postfix = string\n    prefix = string[-length:]\n\n    while length:\n        if is_palindrome(prefix):\n            postfix += prefix\n            length -= 1\n\n        elif is_palindrome(postfix):\n            prefix += postfix\n            length += 1\n\n        else:\n            break\n\n    return prefix + postfix\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join(string[::-1]) + string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    if is_palindrome(string):\n        return string\n\n    suffix = ''\n    prefix = string\n\n    while prefix:\n        if prefix[-1:] == suffix:\n            break\n\n        suffix = prefix[:-1]\n        prefix = prefix[-1:]\n\n    return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    length = len(string)\n    palindrome = ''\n    if length == 0:\n        return palindrome\n    longest_postfix = string.ljust(length - 1, '.')\n    while longest_postfix not in palindrome:\n        palindrome = longest_postfix + '.' + string.ljust(length - 1, '.')\n    palindrome = palindrome[::-1]\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # find longest postfix of supplied string that is a palindrome\n    longest_palindrome = []\n    for i in range(len(string)):\n        if is_palindrome(string[i]):\n            longest_palindrome.append(string[i])\n    # append reverse of a string prefix that comes before the palindromic suffix\n    reverse = longest_palindrome[::-1]\n    # append to the end of the string\n    return reverse + string[::-1]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n    palindrome = ''\n    for i in range(len(string)):\n        if string[i] == string[i-1]:\n            palindrome = string[::-1] + palindrome\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string_length = len(string)\n    longest_prefix = max(string, key=len)\n    reverse_prefix = reverse(string[longest_prefix:])\n    longest_postfix = max(string, key=len)\n    reverse_postfix = reverse(string[longest_postfix:])\n    return reverse_prefix + reverse_postfix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    palindrome = ''\n    longest_prefix = ''\n    for char in string:\n        if char in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789':\n            longest_prefix += char\n        else:\n            palindrome += char\n    if len(string) == 1:\n        return palindrome + longest_prefix[::-1]\n    return palindrome + longest_prefix[:-1] + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest postfix of supplied string that is a palindrome.\n    longest_prefix = ''\n    for char in string:\n        if char in 'abcdefghijklmnopqrstuvwxyz':\n            longest_prefix = longest_prefix + char\n        else:\n            longest_prefix = longest_prefix + 'z'\n    longest_prefix = longest_prefix[::-1]\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    longest_prefix = longest_prefix.reverse()\n    return longest_prefix + string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # first, find longest palindromic suffix\n    longest = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i]):\n            longest += string[i]\n            break\n    # now find longest prefix of string that is a palindrome\n    longest_pfx = ''\n    for i in range(len(string) - 1):\n        if is_palindrome(string[i]):\n            longest_pfx += string[i]\n            break\n    # append reverse of longest prefix to string\n    if longest_pfx:\n        string = string[:i] + string[:-i] + longest_pfx\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n\n    palindrome = string\n    palindrome_len = len(palindrome)\n    max_len = max(palindrome_len - 1, 0)\n    for i in range(max_len):\n        if is_palindrome(palindrome[:i]):\n            palindrome = palindrome[i + 1:]\n            palindrome_len = len(palindrome)\n            break\n\n    if palindrome_len == max_len:\n        palindrome = palindrome[:-max_len]\n\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    start_string = ''\n    end_string = ''\n    while start_string!= end_string:\n        if is_palindrome(start_string):\n            end_string = start_string\n            start_string = ''\n        else:\n            start_string = end_string + start_string\n    return end_string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest postfix that is a palindrome\n    longest_palindrome = ''\n    for char in string:\n        if char not in (' ', '\\t'):\n            longest_palindrome = longest_palindrome + char\n    # Append reverse of a string prefix that comes before the palindromic suffix\n    longest_palindrome = longest_palindrome.reverse()\n    # Return palindrome\n    return longest_palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix of supplied string that is a palindrome.\n    longest_palindrome = ''\n    longest_prefix = ''\n    for i in range(0, len(string)):\n        if not is_palindrome(string[i]):\n            break\n        if not is_palindrome(string[i - 1]):\n            longest_palindrome = longest_palindrome + string[i]\n        longest_prefix = longest_prefix + string[i - 1]\n    # Append reverse of a string prefix that comes before the palindromic suffix.\n    longest_palindrome = longest_palindrome[::-1] + longest_prefix\n    return longest_palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest = 0\n    while longest < len(string):\n        if is_palindrome(string[longest:len(string)]):\n            longest += 1\n    return string[longest:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join([reverse(string[::-1]) for _ in range(len(string))])\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_prefix = None\n    longest_suffix = None\n    for char in string:\n        if char == string[-1]:\n            longest_prefix = string[:-1]\n            break\n        if char == string[-1]:\n            longest_suffix = string[:-1]\n            break\n    if longest_prefix is not None:\n        return longest_prefix + make_palindrome(string[longest_prefix:])\n    if longest_suffix is not None:\n        return longest_suffix + make_palindrome(string[:-lastest_suffix])\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_palindrome = None\n    for char in string:\n        if char not in [' ', ',', '.', '?', ':', '!', '[', ']', '{', '}', '^', '$']:\n            longest_palindrome = None\n            break\n        else:\n            longest_palindrome = longest_palindrome + char\n\n    if longest_palindrome is not None:\n        return longest_palindrome + string[::-1]\n\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix of the supplied string that is a palindrome\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i]):\n            palindrome += string[i]\n        else:\n            break\n    # Append reverse of a string prefix that comes before the palindromic suffix\n    palindrome = palindrome[::-1]\n    return palindrome\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Check if string is palindrome\n    if is_palindrome(string):\n        return string\n    # Find longest postfix that is palindrome\n    longest_palindrome = ''\n    for c in string:\n        if c == string[-1]:\n            longest_palindrome = longest_palindrome + string\n        else:\n            longest_palindrome = longest_palindrome + c\n    # Append reverse of prefix\n    longest_palindrome = longest_palindrome[::-1]\n    return longest_palindrome\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) < 2:\n        return string\n    palindrome = string\n    suffix = string[::-1]\n    for i in range(len(palindrome) - len(suffix)):\n        if palindrome[i] == suffix[i]:\n            return palindrome[:i] + suffix[::-1]\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_prefix = ''\n    longest_suffix = ''\n    for i in range(len(string)):\n        if string[i] == string[len(string) - i - 1]:\n            longest_prefix += string[i + 1:]\n            longest_suffix += string[-i - 1]\n            break\n    return longest_prefix + longest_suffix\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    # Get the longest prefix that is a palindrome\n    palindrome_prefix = ''\n    for i in range(len(string)):\n        palindrome_prefix += string[i]\n        if is_palindrome(palindrome_prefix):\n            break\n    # Get the longest suffix that is a palindrome\n    palindrome_suffix = ''\n    for i in range(len(string)):\n        palindrome_suffix += string[i]\n        if is_palindrome(palindrome_suffix):\n            break\n    # Find the shortest palindrome that begins with the supplied prefix\n    palindrome = palindrome_prefix + palindrome_suffix\n    return palindrome\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n    longest_prefix = string[:]\n    longest_prefix_length = len(string)\n    longest_postfix = string[::-1]\n    longest_postfix_length = len(string)\n    while longest_prefix_length > longest_postfix_length:\n        if is_palindrome(longest_prefix):\n            return longest_prefix\n        longest_prefix = longest_prefix[::-1]\n        longest_prefix_length = len(longest_prefix)\n        longest_postfix = longest_prefix + longest_postfix\n        longest_postfix_length = len(longest_postfix)\n    return longest_prefix + longest_postfix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest postfix that is a palindrome\n    longest = max(string.split(''))\n    longest = longest[::-1]\n    longest = longest[::-1]\n    longest = longest[::-1]\n    longest = longest[::-1]\n    longest = longest[::-1]\n    longest = longest[::-1]\n    longest = longest[::-1]\n    longest = longest[::-1]\n    longest = longest[::-1]\n    longest = longest[::-1]\n    longest = longest[::-1]\n    longest = longest[::-1]\n    longest = longest[::-1]\n    longest = longest[::-1]\n    longest = longest[::-1]\n    longest = longest[::-1]\n    longest = longest[::-1]\n    longest = longest[::-1]\n    longest = longest[::-1]\n    longest = longest[::-1]\n    longest = longest[::-1]\n    longest = longest[::-1]\n    longest = longest[::-1]\n    longest = longest[::-1]\n    longest = longest[::-1]\n    longest = longest[::-1]\n    longest = longest[::-1]\n    longest = longest[::-1]\n    longest = longest[::-1]\n    longest = longest[::-1]\n    longest = longest[::-1]\n    longest = longest[::-1]\n    longest = longest[::-1]\n    longest =", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    length = len(string)\n    if length == 1:\n        return string\n\n    palindrome = ''\n    for i in range(length):\n        if is_palindrome(string[length - i - 1]):\n            palindrome += string[length - i - 1]\n        else:\n            return string\n\n    return palindrome\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest postfix of supplied string that is a palindrome.\n    longest_palindrome = ''\n    for i in xrange(0, len(string)):\n        if is_palindrome(string[i]):\n            longest_palindrome = longest_palindrome + string[i]\n            break\n    return longest_palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string.isdigit():\n        return ''\n    if string.isalpha():\n        return ''\n    if string.isspace():\n        return ''\n    if string.isspace() or string =='':\n        return ''\n    return string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # start at the end of string\n    string = string[::-1]\n\n    # find the longest postfix that is a palindrome\n    longest_palindrome = []\n    for char in string:\n        if char.isalnum() or char =='':\n            longest_palindrome.append(char)\n    # append the reverse of the longest palindrome to the end\n    return string + longest_palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return string[::-1] + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    max_length = 0\n    max_prefix = ''\n    for i in range(len(string)):\n        if i == 0:\n            max_length = max(max_length, len(string))\n        elif is_palindrome(string[i - 1]):\n            max_prefix = string[:i]\n        else:\n            max_length = max(max_length, len(string))\n    return max_prefix + reverse(string[max_length:])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome = []\n    longest_prefix = ''\n    longest_suffix = ''\n    for i in range(0, len(string)):\n        if is_palindrome(string[i]):\n            longest_prefix = string[:i]\n            longest_suffix = string[i:]\n            break\n    if longest_prefix:\n        palindrome.append(longest_prefix)\n    if longest_suffix:\n        palindrome.append(longest_suffix)\n    return ''.join(palindrome)", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return string[::-1].reverse() + string[:-int(len(string) - 1)]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix of the supplied string that is a palindrome\n    longest_prefix = ''\n    longest_postfix = ''\n    for index in range(len(string)):\n        if is_palindrome(string[index]):\n            longest_prefix = string[index:]\n            break\n        else:\n            longest_postfix += string[index]\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    if longest_prefix!= longest_postfix:\n        return longest_prefix + string[len(longest_prefix):]\n    else:\n        return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return string[::-1] + string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # start with longest postfix of supplied string that is a palindrome\n    longest_palindrome = ''\n    for char in string:\n        if char in string[::-1]:\n            longest_palindrome += char\n        else:\n            break\n    # append reverse of a string prefix that comes before the palindromic suffix\n    if longest_palindrome:\n        longest_palindrome = longest_palindrome[::-1]\n    return longest_palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return string[:-1] + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n    if string[0] in string[-1]:\n        return string\n    max_length = len(string) - 1\n    palindrome = string[-1][:-1]\n    for i in range(max_length):\n        if is_palindrome(string[i]):\n            palindrome = palindrome + string[i]\n            break\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    prefix_len = len(string) - len(string.reverse()) - 1\n    suffix_len = len(string)\n    if prefix_len == suffix_len:\n        return string\n    else:\n        return prefix + string[::-1] + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return''.join([reverse(string[i:]) for i in range(len(string)) if is_palindrome(string[:i])])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_pfx = ''\n    longest_pfx_len = 0\n    while longest_pfx_len < len(string):\n        longest_pfx_len += len(string[longest_pfx_len:longest_pfx_len + 1])\n        longest_pfx += string[longest_pfx_len:longest_pfx_len + 1]\n        if longest_pfx_len < len(string):\n            longest_pfx = longest_pfx[::-1]\n    longest_pfx_len += len(string[longest_pfx_len:longest_pfx_len + 1])\n    longest_pfx += string[longest_pfx_len:longest_pfx_len + 1]\n    longest_pfx_len += len(string[longest_pfx_len:longest_pfx_len + 1])\n    longest_pfx_len += len(string[longest_pfx_len:longest_pfx_len + 1])\n    longest_pfx_len += len(string[longest_pfx_len:longest_pfx_len + 1])\n    longest_pfx_len += len(string[longest_pfx_len:longest_pfx_len + 1])\n    longest_pfx_len += len(string[longest_pfx_len:longest_pfx_len + 1])\n    longest_pfx_len += len", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix that is a palindrome\n    longest_prefix = longest_prefix_for(string)\n    if len(longest_prefix) > 1:\n        longest_prefix = longest_prefix[0]\n    longest_prefix = longest_prefix[1:]\n    # Find the longest prefix that comes before the palindromic suffix\n    longest_suffix = longest_suffix_for(string)\n    if len(longest_suffix) > 1:\n        longest_suffix = longest_suffix[0]\n    longest_suffix = longest_suffix[1:]\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    return longest_prefix + longest_suffix[::-1]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string = string.lower()\n    if len(string) == 0:\n        return string\n    if string[0].isdigit():\n        return string[:1] + string[1:]\n    if string[0] == '_':\n        return string[1:]\n    return string[:1] + string[1:] + string[1:]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    prefix_len = len(string)\n    if prefix_len == 0:\n        return string\n\n    palindrome = string[::-1]\n    palindrome_len = len(palindrome)\n    if palindrome_len == 0:\n        return string\n\n    return palindrome + string[-palindrome_len:]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return string[::-1] + string[:-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string_len = len(string)\n    return string[:string_len - 1] + reverse(string[string_len - 1:]) + string[string_len - 1:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    assert len(string) == 2\n\n    palindrome = string[::-1]\n    palindrome_original = palindrome\n\n    while palindrome == palindrome_original:\n        prefix = palindrome[:-1]\n        suffix = palindrome[1:]\n        if is_palindrome(prefix):\n            palindrome = prefix\n            palindrome_original = prefix\n        if is_palindrome(suffix):\n            palindrome = suffix\n            palindrome_original = suffix\n\n    return palindrome_original", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not is_palindrome(string):\n        return ''\n    if string[0] in string[::-1]:\n        return string[::-1]\n    return string[::-1] + string[0]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_prefix = ''\n    longest_suffix = ''\n    for i in range(len(string)):\n        if string[i] == string[len(string)-1]:\n            longest_prefix = longest_prefix + string[i+1:]\n        else:\n            longest_suffix = longest_suffix + string[i]\n    return longest_prefix + longest_suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n\n    # Find longest postfix of supplied string that is a palindrome.\n    longest_palindrome = ''\n    longest_palindrome_length = 0\n    for i in range(len(string)):\n        if is_palindrome(string[i]):\n            longest_palindrome_length += 1\n            if i > 0:\n                longest_palindrome = longest_palindrome + string[i]\n            else:\n                longest_palindrome = longest_palindrome + string[-len(string):]\n\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    longest_palindrome = longest_palindrome[::-1]\n    if len(longest_palindrome) > longest_palindrome_length:\n        longest_palindrome = longest_palindrome[longest_palindrome_length:]\n\n    return longest_palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n\n    # Find longest postfix that is a palindrome.\n    longest_prefix = ''\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i]):\n            longest_prefix = string[:i]\n            longest_palindrome = string[i:]\n\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    if longest_prefix!= '':\n        longest_prefix = longest_prefix[::-1]\n        longest_palindrome = longest_palindrome[::-1]\n\n    return longest_prefix + longest_palindrome\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest postfix of supplied string that is a palindrome.\n    # Find longest prefix of supplied string that is a palindrome.\n    # Combine two longest postfixes into a palindrome.\n    # Find longest prefix of reverse of supplied string that is a palindrome.\n    # Combine two longest prefixes into a palindrome.\n    # Find longest prefix of reverse of supplied string that is a palindrome.\n    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i]):\n            palindrome += string[i]\n        else:\n            palindrome += string[-i]\n    return palindrome[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    longest_prefix = ''\n    longest_prefix_length = 0\n    for char in string:\n        if char == string[-1]:\n            longest_prefix_length += 1\n        else:\n            longest_prefix += char\n    if longest_prefix_length > longest_prefix:\n        longest_prefix = longest_prefix[::-1]\n    return longest_prefix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest prefix that is a palindrome\n    longest_prefix = find_largest_prefix(string)\n    # Find longest suffix that is a palindrome\n    longest_suffix = find_largest_suffix(string)\n    # Append reverse of the prefix to the end of the string\n    return longest_prefix + make_palindrome(longest_suffix[::-1]) + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n    palindrome = string\n    postfix = string[::-1]\n    if postfix == palindrome:\n        return palindrome\n    else:\n        return reverse(postfix)\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n\n    max_length = 0\n    longest_prefix = None\n    for i in range(len(string)):\n        if string[i] in string[-1]:\n            length = len(string[i + 1])\n            if length > max_length:\n                max_length = length\n                longest_prefix = string[i + 1]\n\n    if longest_prefix == '':\n        return ''\n    else:\n        return longest_prefix + string[-length:]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n    postfix = string[::-1]\n    if postfix.startswith(string):\n        return postfix\n    else:\n        return postfix + make_palindrome(string[::-1])\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    postfix = ''\n    longest = None\n    for char in string:\n        if char not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']:\n            postfix += char\n            longest = None\n    if longest is None:\n        return ''\n    if postfix[-1] == longest[-1] == longest[-1]:\n        return postfix\n    else:\n        return postfix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_prefix = ''\n    longest_palindrome = ''\n    longest_prefix_len = 0\n    longest_palindrome_len = 0\n    for i in range(len(string)):\n        if string[i] == string[-1]:\n            longest_prefix_len = i\n            longest_prefix = string[:i]\n            longest_palindrome = string[i:]\n            longest_palindrome_len = len(longest_palindrome)\n        elif string[i] == string[-1]:\n            longest_palindrome_len = i\n            longest_palindrome = string[:i]\n            longest_prefix = string[-i:]\n            longest_prefix_len = len(longest_prefix)\n    if longest_prefix_len == 0:\n        return ''\n    elif longest_palindrome_len == 0:\n        return longest_prefix\n    else:\n        return longest_palindrome[:longest_prefix_len] + longest_palindrome[longest_prefix_len:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_prefix = ''\n    longest_suffix = ''\n    for i in range(len(string) - 1):\n        if string[i] == string[i + 1]:\n            longest_prefix += string[i + 1]\n        else:\n            longest_suffix += string[i + 1]\n    return longest_prefix + reverse(string[len(string) - len(longest_prefix):]) + longest_suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest postfix that is a palindrome\n    longest_palindrome = ''\n    longest_palindrome_len = 0\n    for char in string:\n        if char =='':\n            continue\n        if char == '?':\n            longest_palindrome += '?'\n            longest_palindrome_len += 1\n        elif char in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            longest_palindrome += char\n            longest_palindrome_len += 1\n        elif char =='':\n            longest_palindrome += char\n            longest_palindrome_len += 1\n        elif char == '?':\n            longest_palindrome += char\n            longest_palindrome_len += 1\n    # Find reverse of string prefix that comes before the palindromic suffix\n    reverse_prefix = ''\n    reverse_prefix_len = 0\n    for char in longest_palindrome:\n        if char == '?':\n            reverse_prefix += '?'\n            reverse_prefix_len += 1\n        elif char in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            reverse_p", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest postfix of supplied string that is a palindrome\n    longest = string\n    for i in xrange(len(string)):\n        if not is_palindrome(string[i]):\n            longest = longest[:i] + string[i] + longest[i+1:]\n            break\n    # Append reverse of a string prefix that comes before the palindromic suffix\n    longest = longest[:-last_len] + longest[-last_len:]\n    return longest", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return''.join(reversed(string) for _ in range(len(string)))", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix of supplied string that is a palindrome\n    longest_postfix = postfix_length(string)\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    return string[longest_postfix:-lastest_postfix] + string[-lastest_postfix:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return string[::-1] + string[:-1]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    postfix = ''\n    prefix = ''\n    while prefix.endswith(string[::-1]):\n        prefix = prefix[:-1]\n        postfix += prefix\n        if len(postfix) == len(string):\n            break\n    return postfix + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    postfix = string[::-1]\n    prefix = string[:-1]\n    if postfix == prefix:\n        return prefix + make_palindrome(string[::-1])\n    return prefix + make_palindrome(string[::-1]) + postfix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest postfix of supplied string that is a palindrome.\n    longest_prefix = ''\n    for char in string:\n        if char not in '*':\n            longest_prefix += char\n        else:\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    longest_prefix = longest_prefix[::-1]\n    return longest_prefix + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix of string that is a palindrome.\n    longest_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i]):\n            longest_palindrome += string[i]\n            longest_palindrome += string[i][::-1]\n    return longest_palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string = string.lower()\n    string_prefix = string[:string.find(' ')]\n    string_suffix = string[string.find(' ') + 1:]\n    longest_prefix = string_prefix.find(' ')\n    longest_suffix = string_suffix.find(' ')\n    return longest_prefix + longest_suffix + string_prefix[longest_prefix:-lastest_suffix]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    length = len(string)\n    if length == 0:\n        return string\n    if length == 1:\n        return string\n    if length == 2:\n        return string + string[::-1]\n    if length > 2:\n        return string[:-1] + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string is None:\n        return ''\n    if len(string) == 0:\n        return ''\n    longest_prefix = longest_postfix = None\n    if string[:2] == 'ab':\n        longest_prefix = string[2:]\n        longest_postfix = string[:2]\n    elif string[:2] == 'ac':\n        longest_prefix = string[2:]\n        longest_postfix = string[:2]\n    elif string[:2] == 'a':\n        longest_prefix = string[2:]\n        longest_postfix = string[:1]\n    elif string[:2] == 'b':\n        longest_prefix = string[2:]\n        longest_postfix = string[:2]\n    elif string[:2] == 'c':\n        longest_prefix = string[2:]\n        longest_postfix = string[:2]\n    elif string[:2] == 'd':\n        longest_prefix = string[2:]\n        longest_postfix = string[:2]\n    elif string[:2] == 'e':\n        longest_prefix = string[2:]\n        longest_postfix = string[:2]\n    elif string[:2] == 'f':\n        longest_prefix = string[2:]\n        longest_postfix = string[:2]\n    elif string[:2] == 'g':\n        longest_prefix = string[2:]\n        longest_postfix = string[:2]\n    elif string[:2] == 'h':\n        longest", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix that is a palindrome\n    postfix = string[::-1]\n    length = len(postfix)\n    if length > 0:\n        # Append reverse of the prefix\n        postfix = postfix[::-1]\n        length -= 1\n        # Find the longest prefix that is a palindrome\n        prefix = string[:length]\n        # Find the longest palindrome that begins with the prefix\n        palindrome = prefix + postfix\n        # Append the palindrome\n        postfix = palindrome\n        # Find the shortest palindrome that begins with the prefix\n        postfix = postfix[::-1]\n        length -= 1\n        # Find the longest palindrome that begins with the prefix\n        palindrome = prefix + postfix\n        # Append the palindrome\n        postfix = palindrome\n        # Find the shortest palindrome that begins with the prefix\n        postfix = postfix[::-1]\n        length -= 1\n        # Find the longest palindrome that begins with the prefix\n        palindrome = prefix + postfix\n        # Append the palindrome\n        postfix = palindrome\n        # Find the shortest palindrome that begins with the prefix\n        postfix = postfix[::-1]\n        length", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest = None\n    longest_prefix = ''\n    for char in string:\n        if char not in 'abcdefghijklmnopqrstuvwxyz':\n            break\n        if char =='':\n            continue\n        if char =='':\n            longest = char\n            continue\n        if char =='':\n            longest_prefix = char\n            continue\n        if char =='':\n            longest_prefix = char\n            continue\n        if char in 'abcdefghijklmnopqrstuvwxyz':\n            longest = char\n            longest_prefix = char\n            continue\n        if char =='':\n            longest = char\n            longest_prefix = char\n            continue\n        if char =='':\n            longest = char\n            longest_prefix = char\n            continue\n        if char =='':\n            longest = char\n            longest_prefix = char\n            continue\n        if char in 'abcdefghijklmnopqrstuvwxyz':\n            longest = char\n            longest_prefix = char\n            continue\n        if char =='':\n            longest = char\n            longest_prefix = char\n            continue\n        if char =='':\n            longest = char\n            longest_prefix = char\n            continue\n        if char =='':\n            longest = char\n            longest_prefix = char\n            continue\n        if char in", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) < 2:\n        return string\n    postfix = string[::-1]\n    while len(postfix) >= len(string):\n        if postfix == string[::-1]:\n            return string\n        postfix = postfix[::-1]\n    return postfix + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join([\n        reverse(string[i:i + len(string[-1]])]),\n        string[:-i]\n    ])\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n\n    if len(string) == 1:\n        return string\n\n    suffix = string[::-1]\n    prefix = string[:-1]\n\n    if suffix == prefix:\n        return string\n\n    return make_palindrome(string[:-1]) + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return string + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_pfx = None\n    longest_suffix = None\n    for char in string:\n        if char =='':\n            continue\n        if char =='':\n            longest_pfx = char\n            continue\n        if char =='':\n            longest_suffix = char\n            continue\n        if char =='':\n            if longest_pfx is None:\n                longest_pfx = char\n            else:\n                longest_pfx = char\n                longest_suffix = char\n    if longest_pfx is None:\n        return \"\"\n    else:\n        return longest_pfx + string[::-1] + longest_suffix\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    prefix_len = len(string)\n    suffix_len = len(string[::-1])\n    if prefix_len == 0:\n        return string\n    if prefix_len == suffix_len:\n        return string[::-1]\n    # Find longest postfix of supplied string that is a palindrome\n    longest_palindrome = None\n    for i in range(prefix_len, suffix_len + 1):\n        if is_palindrome(string[i]):\n            longest_palindrome = string[i]\n            break\n    # Append reverse of a string prefix that comes before the palindromic suffix\n    if longest_palindrome!= '':\n        return longest_palindrome + string[::-1]\n    else:\n        return string\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    length = len(string)\n    max_length = 0\n    prefix_length = 0\n    for i in range(0, length):\n        if string[i] == string[-length - i - 1] and i + 1 < length:\n            prefix_length = i + 1\n            max_length = max(max_length, i + 1)\n            break\n    return string[:prefix_length] + reverse(string[length:]) + string[prefix_length:]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Check if string is palindrome\n    if not is_palindrome(string):\n        return string\n\n    # Find the longest postfix of supplied string that is a palindrome\n    if len(string) > len(string[::-1]):\n        return string[::-1]\n\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    return string[::-1:]+string[::-1]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join([reverse(c) for c in string])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest postfix that is a palindrome\n    longest_prefix = ''\n    for i in range(len(string)):\n        if string[i] == string[i - 1]:\n            longest_prefix += string[i]\n        else:\n            break\n    # Find longest palindromic suffix\n    longest_suffix = ''\n    for i in range(len(string)):\n        if string[i] == string[i + 1]:\n            longest_suffix += string[i]\n        else:\n            break\n    # Append reverse of longest prefix to string\n    string = string[::-1]\n    # Append reverse of longest suffix to string\n    string = string + string[::-1]\n    return longest_prefix + longest_suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    start = ''\n    end = ''\n    while start!= '':\n        if start[0] == end[0]:\n            start = start[1:]\n        else:\n            end = end[1:]\n            if end[0] == start[0]:\n                start = start[1:]\n            else:\n                return start\n        if start == '':\n            break\n    return end", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return string[::-1] + string + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_postfix = None\n    for i in range(len(string)):\n        if string[i] in string[::-1]:\n            longest_postfix = string[:i] + string[::-1][i]\n            break\n    if longest_postfix is not None:\n        return longest_postfix\n    return string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    max_prefix_length = len(string) - 1\n    max_suffix_length = len(string) - 1\n    palindrome = string\n    palindrome += string[::-1]\n    for i in range(max_prefix_length):\n        palindrome += string[i]\n    for i in range(max_suffix_length):\n        palindrome += string[:-i]\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    string = string.lower()\n    longest_prefix = ''\n    longest_suffix = ''\n    for i in range(len(string)):\n        if string[i] == string[-1]:\n            longest_prefix = string[:i]\n            longest_suffix = string[-1:]\n        else:\n            longest_prefix = string[-1:]\n            longest_suffix = string[:i]\n    if longest_prefix == '':\n        return longest_suffix\n    else:\n        return longest_prefix + reverse(longest_suffix)", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    else:\n        return reverse(string[:-1]) + string[-1:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_prefix = []\n    longest_suffix = []\n    palindrome = ''\n    for char in string:\n        if char!='':\n            longest_prefix.append(char)\n            longest_suffix.append(char)\n        else:\n            longest_prefix.append(char)\n            longest_suffix.append(char[::-1])\n            palindrome += char[::-1]\n    return palindrome + longest_suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join(string[::-1] if is_palindrome(string) else string for string in reversed(string.split()) if is_palindrome(string))", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    palindrome = string\n    palindrome_len = len(palindrome)\n    postfix = ''\n    for i in range(palindrome_len):\n        if is_palindrome(palindrome[i:i + 2]):\n            postfix = palindrome[i + 2:]\n            break\n    return postfix + reverse(string[:palindrome_len])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix of supplied string that is a palindrome.\n    longest_palindrome = ''\n    longest_palindrome_length = len(string)\n    for i in range(0, len(string)):\n        if is_palindrome(string[i]):\n            longest_palindrome += string[i]\n            longest_palindrome_length += 1\n        else:\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    if longest_palindrome_length > longest_palindrome:\n        longest_palindrome = longest_palindrome[::-1]\n        longest_palindrome_length = len(longest_palindrome)\n    return longest_palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # find longest prefix that is palindrome\n    longest_palindrome = None\n    for char in string:\n        if char not in string[::-1]:\n            break\n    if longest_palindrome is None:\n        return ''\n    # append reverse of prefix that comes before palindrome\n    longest_palindrome = longest_palindrome[::-1]\n    return longest_palindrome + string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    longest_prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i]):\n            longest_prefix = string[i]\n    longest_prefix = longest_prefix[::-1]\n    return longest_prefix + string[len(longest_prefix):]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    length = len(string)\n    if length == 0:\n        return ''\n    if length == 1:\n        return string\n    palindrome = ''\n    for i in range(length - 1):\n        palindrome += string[::-1][i]\n        if is_palindrome(palindrome):\n            return palindrome\n        else:\n            return ''\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    length = len(string)\n    if length < 2:\n        return string\n    palindrome = ''\n    if length > 2:\n        palindrome = string[:length - 2]\n        string = string[length - 2:]\n    for char in string[::-1]:\n        if char not in palindrome:\n            palindrome += char\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome_length = len(string) - 1\n    palindrome_prefix = ''\n    palindrome_suffix = ''\n    while palindrome_length > 0:\n        palindrome_prefix = string[:palindrome_length]\n        palindrome_suffix = string[palindrome_length:]\n        if is_palindrome(palindrome_prefix):\n            palindrome_prefix = palindrome_prefix[::-1]\n            palindrome_suffix = palindrome_suffix[::-1]\n        palindrome_length -= 1\n    return palindrome_prefix + palindrome_suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix of supplied string that is a palindrome.\n    palindrome_length = len(string) - len(string[::-1])\n    for prefix in string[:palindrome_length]:\n        palindrome_length += len(prefix)\n    return string[palindrome_length:] + string[:palindrome_length]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest postfix that is palindrome\n    longest_prefix = longest_palindrome(string)\n    # Append reverse of longest prefix to the string\n    return string + reverse(longest_prefix)[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if string.startswith(''):\n        return string[len(string) + 1:]\n    if string.startswith(' '):\n        return string[len(string) + 1:]\n    if string.startswith(' '):\n        return string[len(string) + 1:]\n    if is_palindrome(string):\n        return string[len(string) + 1:]\n    return ''\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    length = len(string)\n    if length == 0:\n        return ''\n    if length == 1:\n        return string[::-1]\n    if length == 2:\n        return string[::-1] + string[::-1]\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    length = len(string)\n    prefix = string[:length]\n    suffix = string[length:]\n    postfix = prefix[::-1]\n    return prefix + suffix + postfix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_prefix = ''\n    longest_suffix = ''\n    for char in string:\n        if char =='':\n            longest_prefix = ''\n        elif char =='':\n            longest_suffix = ''\n        elif char =='':\n            longest_prefix = longest_prefix + char\n            longest_suffix = longest_suffix + char\n        elif char =='':\n            longest_prefix = longest_prefix + char\n            longest_suffix = longest_suffix + char\n        elif char =='':\n            longest_prefix = longest_prefix + char\n            longest_suffix = longest_suffix + char\n            longest_prefix = longest_prefix + char\n            longest_suffix = longest_suffix + char\n    return longest_prefix + reverse(string[::-1]) + longest_suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    postfix_len = len(string) - len(string[::-1])\n    prefix_len = len(string)\n    palindromic_prefix_len = prefix_len - 1\n    palindromic_prefix = string[palindromic_prefix_len:]\n    palindromic_suffix_len = len(string[palindromic_prefix_len:]) - 1\n    palindromic_suffix = string[palindromic_suffix_len:]\n    palindromic_length = min(postfix_len, palindromic_prefix_len, palindromic_suffix_len)\n    palindromic_length = min(palindromic_length, len(string) - palindromic_length)\n    palindromic_length = min(palindromic_length, len(string) - palindromic_length)\n    palindromic_length = min(palindromic_length, len(string) - palindromic_length)\n    palindromic_length = min(palindromic_length, len(string) - palindromic_length)\n    palindromic_length = min(palindromic_length, len(string) - palindromic_length)\n    palindromic_length = min(palindrom", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n    longest_prefix = string\n    longest_suffix = string[::-1]\n    if len(string) < len(longest_prefix):\n        return longest_prefix + string + longest_suffix\n    return longest_prefix + string + longest_suffix\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_pfx = len(string) - 1\n    longest_suffix = len(string) - 1\n    palindrome = string\n    while longest_pfx > longest_suffix:\n        longest_suffix = longest_pfx\n        palindrome = string[longest_pfx:]\n        longest_pfx -= 1\n    palindrome = palindrome[::-1]\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n\n    longest_prefix = string\n    longest_prefix_length = len(string)\n\n    for i in range(len(string) - 1):\n        if is_palindrome(string[i]):\n            longest_prefix = longest_prefix[:i]\n            longest_prefix_length = len(longest_prefix)\n\n    longest_palindrome = longest_prefix + longest_prefix_length * string[::-1]\n    return longest_palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Make sure we have a palindrome\n    if not is_palindrome(string):\n        return \"\"\n    # Find longest postfix that is a palindrome\n    longest = \"\"\n    for i in range(len(string)):\n        if string[i] == string[i - 1]:\n            longest += string[i + 1]\n        else:\n            break\n    # Append reverse of longest prefix that comes before the palindromic suffix\n    return longest + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    start = 0\n    while start < len(string):\n        if is_palindrome(string[start]):\n            start += 1\n        else:\n            break\n    return string[start:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n    longest_prefix = None\n    longest_suffix = None\n    longest_prefix_len = 0\n    longest_suffix_len = 0\n    for i in range(len(string)):\n        if string[i] == string[i-1]:\n            longest_prefix = string[:i]\n            longest_prefix_len = len(longest_prefix)\n            longest_suffix = string[i:]\n            longest_suffix_len = len(longest_suffix)\n    if longest_prefix_len == longest_suffix_len:\n        return string\n    if longest_prefix_len > longest_suffix_len:\n        return reverse(string[::-1]) + string[::-1]\n    return reverse(string[::-1]) + make_palindrome(string[:len(longest_prefix)]) + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Check if string is palindrome\n    if is_palindrome(string):\n        return string\n    # If not, return empty string\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    postfix_length = len(string) - len(string[::-1])\n    if postfix_length == 0:\n        return ''\n    prefix_length = len(string[0::-1])\n    if prefix_length == 0:\n        return string\n    prefix = string[0::-1]\n    if prefix_length == 0:\n        return prefix\n    return string[::-1] + string[prefix_length:]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    prefix_len = len(string)\n    if prefix_len == 0:\n        return string\n    suffix_len = len(string[prefix_len:])\n    if suffix_len == 0:\n        return string[prefix_len:]\n\n    if suffix_len > prefix_len:\n        palindrome = string[prefix_len:prefix_len + suffix_len]\n        return make_palindrome(palindrome) + string[prefix_len + suffix_len:]\n    else:\n        return string[prefix_len:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    assert len(string) == 1\n\n    # Find longest postfix of string that is a palindrome.\n    # The longest postfix is the longest string that is a palindrome.\n    longest = [string.rsplit('', 1)[0].lower() for string in string.split('')]\n    longest = sorted(longest, key=operator.itemgetter(1), reverse=True)\n\n    # Find longest prefix that comes before the palindromic suffix.\n    longest_prefix = longest[len(longest) - 1]\n    longest_prefix = longest_prefix.lower()\n\n    # Find longest suffix that comes after the palindromic prefix.\n    longest_suffix = longest[len(longest) + 1]\n    longest_suffix = longest_suffix.lower()\n\n    # Find shortest palindrome that begins with longest_prefix.\n    shortest = longest_prefix + longest_suffix\n\n    # Append to the end of the string reverse of longest_prefix.\n    return longest_prefix + shortest[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return ''.join([reverse(string[i:i + len(string)]) for i in range(0, len(string), 2)])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    length = len(string)\n    if length == 0:\n        return string\n\n    palindrome = string[::-1]\n    palindrome_length = len(palindrome)\n    if palindrome_length == length:\n        return string\n\n    for i in range(length):\n        if is_palindrome(string[-length - i:-length]):\n            palindrome = palindrome + string[-length - i:-length]\n            break\n\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n\n    if is_palindrome(string[-1:]):\n        return string[:-1] + string[::-1]\n    else:\n        return string + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n    return string[::-1] + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest postfix that is a palindrome.\n    longest_prefix = ''\n    for i in xrange(0, len(string), 1):\n        if string[i] == string[i - 1:]:\n            longest_prefix += string[i - 1]\n            break\n    # Append reverse of a prefix that comes before the palindromic suffix.\n    return longest_prefix + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return string + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    length = len(string)\n    if length == 1:\n        return string\n    start = 0\n    for i in range(1, length):\n        if string[start:i] == string[-1:]:\n            return string[:start + 1]\n        start = i + 1\n    return string[:start]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_pfx: str = ''\n    longest_pfx_length = 0\n    longest_pfx_str = ''\n    longest_pfx_final = ''\n    for i in range(len(string)):\n        if string[i] == string:\n            longest_pfx_length = i\n            longest_pfx_str = string[i:]\n            longest_pfx_final = longest_pfx_str[::-1]\n            break\n    return longest_pfx_final", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    length = len(string)\n    if length == 0:\n        return string\n    else:\n        length = length - 1\n        if length < 2:\n            return ''\n        else:\n            prefix = string[:length]\n            suffix = string[length:]\n            return prefix + suffix[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    length = len(string)\n    if length == 0:\n        return ''\n\n    longest_palindrome = None\n    longest_palindrome_pos = None\n\n    for i in range(length):\n        if string[i] == string[-1 - i]:\n            longest_palindrome = i\n            longest_palindrome_pos = i\n\n    if longest_palindrome == length - 1:\n        return string[::-1]\n\n    if longest_palindrome_pos > length - 1:\n        return string[::-1] + string[longest_palindrome_pos + 1:]\n\n    return string[::-1] + string[longest_palindrome_pos + 1:] + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_postfix = ''\n    while longest_postfix == '':\n        longest_postfix = longest_postfix[::-1]\n        if is_palindrome(longest_postfix):\n            break\n    return longest_postfix + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome = ''\n    # Find longest prefix of supplied string that is a palindrome\n    longest = 0\n    for i in range(len(string)):\n        if string[i] == string[i - 1]:\n            longest = i + 1\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    palindrome += string[longest - 1]\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    length = len(string)\n    if length == 0:\n        return string\n    postfix = string[-length:]\n    if postfix.startswith(string):\n        return postfix[::-1]\n    return postfix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_prefix = ''\n    longest_suffix = ''\n    for i in xrange(len(string)):\n        if is_palindrome(string[i]):\n            longest_prefix = longest_prefix + string[i]\n            longest_suffix = longest_suffix + string[i][::-1]\n        else:\n            break\n    return longest_prefix + longest_suffix\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    else:\n        return reverse(string[::-1])\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix of the supplied string that is a palindrome.\n    longest = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i]):\n            longest += string[i]\n        else:\n            break\n    # Append the reverse of the string prefix that comes before the palindromic suffix.\n    longest += string[len(string) - len(longest):]\n    return longest", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    pos = 0\n    while pos < len(string):\n        if is_palindrome(string[pos:pos + 1]):\n            pos += 1\n        else:\n            break\n    return string[pos:]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return string[:len(string) - 1] + string[:-len(string)].reverse() + string[:-len(string)]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    length = len(string)\n    if length == 0:\n        return string\n\n    if length == 1:\n        return string\n\n    max_prefix_length = 0\n    max_postfix_length = 0\n    max_prefix = None\n    max_postfix = None\n\n    for i in range(0, length):\n        if is_palindrome(string[i]):\n            max_prefix_length = max(max_prefix_length, i)\n            max_prefix = string[:i]\n            max_postfix_length = max(max_postfix_length, i)\n            max_postfix = string[i:]\n        else:\n            break\n\n    if max_prefix_length == length:\n        return string + max_prefix + max_postfix\n    else:\n        return string + max_prefix + make_palindrome(string[max_prefix_length:]) + max_postfix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string[0] in string[::-1]:\n        return string[::-1] + string[0]\n    else:\n        return string + string[0]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    prefix = string[:-1]\n    postfix = string\n    if prefix.isdigit():\n        postfix = postfix[1:]\n    if postfix.isdigit():\n        prefix = prefix[1:]\n    if prefix.isdigit():\n        return ''.join([prefix, postfix])\n    else:\n        return ''.join([postfix, prefix])\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest = ''\n    for i in range(len(string)):\n        if string[i] == string[i + 1:]:\n            longest = longest + string[i]\n        else:\n            break\n    if longest == '':\n        return ''\n    else:\n        return longest + string[:-i]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest postfix of supplied string that is a palindrome.\n    longest_prefix = string.find(string[::-1])\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    string = string[longest_prefix:]\n    # Return the string with the palindrome prefix.\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest postfix that is a palindrome\n    longest_palindrome = string\n    longest_palindrome = longest_palindrome[::-1]\n    longest_palindrome = longest_palindrome.reverse()\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    return longest_palindrome + string[::-1]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n    else:\n        palindrome = string\n        start = len(palindrome)\n        while start > 0:\n            end = len(palindrome)\n            while end > 0 and palindrome[end - 1] == palindrome[end - 2]:\n                end -= 2\n            if end > start:\n                palindrome = palindrome[:end] + palindrome[end + 1:]\n                start = end\n        return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    length = len(string)\n    # Find longest palindrome prefix\n    longest_prefix = ''\n    for i in range(length - 1):\n        if is_palindrome(string[i]):\n            longest_prefix += string[i]\n    # Find longest palindrome suffix\n    longest_suffix = ''\n    for i in range(length):\n        if is_palindrome(string[i]):\n            longest_suffix += string[i]\n    # Reverse the longest prefix\n    reverse_prefix = longest_prefix[::-1]\n    # Reverse the longest suffix\n    reverse_suffix = longest_suffix[::-1]\n    # Concatenate to the end of the string\n    return reverse_prefix + reverse_suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    prefix = string[:]\n    suffix = string[::-1]\n\n    if not prefix.is_palindrome():\n        return prefix\n    if not suffix.is_palindrome():\n        return suffix\n\n    if prefix.startswith(suffix):\n        return prefix[len(prefix) - len(suffix):]\n    else:\n        return prefix + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # find longest postfix that is a palindrome\n    longest_palindrome = ''\n    for char in string:\n        if char.isalnum() or char == '_' or char == '.':\n            longest_palindrome += char\n        else:\n            break\n    # append reverse of a string prefix that comes before the palindromic suffix\n    return longest_palindrome[::-1] + string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # First find longest postfix that is a palindrome\n    longest_prefix = ''\n    longest_prefix_length = 0\n    for char in string:\n        if char!= string[-1]:\n            longest_prefix += char\n            longest_prefix_length += 1\n    # If there is no palindrome prefix, return empty string\n    if longest_prefix_length == 0:\n        return ''\n    # Find longest palindrome suffix\n    longest_suffix = ''\n    longest_suffix_length = 0\n    for char in string[::-1]:\n        if char!= longest_prefix:\n            longest_suffix += char\n            longest_suffix_length += 1\n    # If there is no palindrome suffix, return empty string\n    if longest_suffix_length == 0:\n        return ''\n    # Combine longest prefix and longest suffix\n    return longest_prefix + longest_suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest postfix of string that is a palindrome.\n    longest = string\n    for i in range(len(string)):\n        if is_palindrome(string[i]):\n            longest = longest[:i] + longest[i + 1:]\n    return longest", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n    if len(string) == 1:\n        return string\n    if string[0] in string[-1]:\n        return string[::-1]\n    return string + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_prefix = ''\n    while longest_prefix!= string:\n        longest_prefix = longest_prefix[::-1]\n        if longest_prefix == string:\n            break\n    return longest_prefix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n    palindrome = string\n    for i in range(len(string) - 1):\n        if not is_palindrome(string[i]):\n            palindrome = palindrome + string[i] + string[i + 1]\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest postfix of supplied string that is a palindrome.\n    # For example, 'catac' is a palindrome since 'cat' is a palindrome.\n    longest_palindrome = ''\n    for char in string:\n        if char == string[-1]:\n            longest_palindrome += char\n        else:\n            longest_palindrome += string[-1 - len(char):]\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    longest_palindrome = longest_palindrome[::-1]\n    return longest_palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    length = len(string)\n    palindrome = ''\n    while length > 0:\n        if len(palindrome) < length:\n            palindrome += string[-length:]\n        else:\n            palindrome += string[-length - len(palindrome):]\n        length -= 1\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n\n    if len(string) == 1:\n        return string\n\n    if is_palindrome(string):\n        return string\n\n    # find longest palindrome prefix\n    longest_prefix = string[:-1]\n\n    # find longest palindrome suffix\n    longest_suffix = string[-1:]\n\n    # find shortest palindrome that begins with longest_prefix and longest_suffix\n    shortest = longest_prefix + longest_suffix[::-1]\n\n    return shortest", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest postfix that is a palindrome\n    if len(string) > 0:\n        longest = max(string, key=len)\n        longest = longest[::-1]\n        # Find first string that comes before palindrome\n        first = longest[::-1]\n        first = first.split(' ')\n        first.reverse()\n        # Find the longest prefix that is a palindrome\n        if len(first) > 0:\n            longest = max(first, key=len)\n            longest = longest[::-1]\n            # Append reverse of palindrome to first\n            first = first[::-1]\n            first = first.split(' ')\n            first.reverse()\n            # Append first string to palindrome\n            longest = longest.join(first)\n            longest = longest[::-1]\n            # return longest\n            return longest\n    return string\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest postfix of string that is a palindrome\n    longest_prefix = find_longest_prefix(string)\n    # Append reverse of string prefix to the end of string\n    return string + longest_prefix[::-1]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if len(string) == 0:\n        return ''\n    postfix = string[::-1]\n    if len(postfix) == len(string):\n        return postfix\n    return string + postfix[::-1]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix that is a palindrome\n    palindrome = string[::-1]\n    for i in range(len(palindrome)):\n        if palindrome[i] == palindrome[i-1]:\n            palindrome.insert(i, palindrome[i])\n        else:\n            break\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    postfix = []\n    prefix = []\n    for char in string:\n        if char not in string[::-1]:\n            postfix.append(char)\n            prefix.append(string[::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    max_length = 0\n    for char in string:\n        if char not in string[::-1]:\n            length = len(string) - max_length\n            if length <= 1:\n                return ''\n            else:\n                max_length = length\n    return string[:-max_length]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return string[::-1].join([string[:i] for i in range(len(string)) if is_palindrome(string[:i])])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    if len(string) > 1:\n        # first we have to find the longest postfix that is a palindrome\n        longest_prefix = string[::-1]\n        longest_prefix_len = len(longest_prefix)\n        # We have to find the longest palindrome that comes before the longest prefix.\n        # It is the longest palindrome that starts with the longest prefix and ends with the longest suffix.\n        # We can use the longest prefix as a search key.\n        longest_palindrome = longest_prefix[::-1]\n        longest_palindrome_len = len(longest_palindrome)\n        if longest_palindrome_len < longest_prefix_len:\n            # We have a palindrome.\n            # If it is shorter than the longest prefix, we append the prefix.\n            # Otherwise, we append the suffix.\n            if longest_palindrome_len < longest_prefix_len:\n                return longest_prefix + string\n            else:\n                return longest_palindrome + string[::-1]\n    else:\n        # We have a palindrome, so append the suffix.\n        return string + string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix of string that is a palindrome.\n    if not is_palindrome(string):\n        return ''\n\n    # Append reverse of a string prefix that comes before the palindromic suffix.\n    string = string[::-1]\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix of supplied string that is a palindrome\n    longest_postfix = longest_postfix(string)\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    return longest_postfix[::-1] + string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    return string.replace(string[::-1], string[::-1], string[::-1])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    prefix = string[::-1]\n    length = len(prefix)\n    if length == 1:\n        return prefix\n    suffix = string[:length - 1]\n    if is_palindrome(suffix):\n        return prefix + suffix[::-1]\n    else:\n        return prefix + make_palindrome(suffix)\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) > 1:\n        return string[::-1]\n    return string[:-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest palindrome prefix\n    longest_prefix = ''\n    for char in string:\n        if char not in string.lower():\n            break\n        else:\n            longest_prefix += char\n    longest_prefix = longest_prefix.strip()\n    # Find longest palindrome suffix\n    longest_suffix = ''\n    for char in longest_prefix:\n        if char not in string.lower():\n            break\n        else:\n            longest_suffix += char\n    longest_suffix = longest_suffix.strip()\n    # Append reverse of the longest prefix to the end of the string\n    return longest_prefix + string[::-1] + longest_suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest postfix of supplied string that is a palindrome.\n    longest = None\n    longest_len = len(string)\n    for char in string:\n        if char == string[-lastest_len]:\n            longest = char\n            longest_len = len(string)\n    if longest_len == 0:\n        return \"\"\n\n    # Find longest prefix that comes before the palindromic suffix.\n    prefix_len = len(string[:-lastest_len])\n    if prefix_len == 0:\n        return \"\"\n\n    # Find longest palindromic suffix that comes before the longest prefix.\n    suffix_len = len(string[-lastest_len:])\n    if suffix_len == 0:\n        return \"\"\n\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string[-lastest_len:-lastest_len+prefix_len] + string[-lastest_len+prefix_len:-lastest_len+suffix_len]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_prefix = ''\n    longest_suffix = ''\n    for char in string:\n        if char.isalnum():\n            longest_prefix += char\n            continue\n        if char =='':\n            longest_suffix += char\n            continue\n        if char == '.':\n            longest_prefix += char\n            continue\n        if char == '!':\n            longest_suffix += char\n            continue\n        if char == '-':\n            longest_suffix += char\n            continue\n        if char == '_':\n            longest_prefix += char\n            continue\n        if char == ',':\n            longest_prefix += char\n            continue\n        if char == '(':\n            longest_prefix += char\n            continue\n        if char == ')':\n            longest_suffix += char\n            continue\n        if char == ',':\n            longest_prefix += char\n            continue\n        if char == '(':\n            longest_prefix += char\n            continue\n        if char == ')':\n            longest_suffix += char\n            continue\n        if char == '?':\n            longest_suffix += char\n            continue\n        if char == '!':\n            longest_prefix += char\n            continue\n        if char == '-':\n            longest_prefix += char\n            continue\n        if char == '_':\n            longest_suffix += char\n            continue\n        if char == ',':\n            longest_prefix += char", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    length = len(string)\n    if length == 0:\n        return ''\n    else:\n        suffix = string[-length:]\n        prefix = string[:-length]\n        if prefix.is_palindrome():\n            return prefix + suffix\n        else:\n            return prefix + string[-length:] + suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    if string == ''[::-1].lower():\n        return string\n    return make_palindrome(string[::-1].lower()) + string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest postfix that is a palindrome\n    longest_prefix: str = ''\n    for char in string:\n        if char in string[::-1]:\n            longest_prefix = longest_prefix + char\n        else:\n            break\n    # Append reverse of a string prefix that comes before the palindromic suffix\n    if longest_prefix!= '':\n        longest_prefix = longest_prefix[::-1]\n    return longest_prefix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest postfix of supplied string that is a palindrome\n    longest_prefix = string.split('')[-1]\n    longest_prefix_len = len(longest_prefix)\n    longest_prefix_prev = longest_prefix.split()[0]\n    longest_prefix_prev_len = len(longest_prefix_prev)\n    longest_prefix_prev_pos = longest_prefix_prev.index('')\n    longest_prefix_prev_pos_len = len(longest_prefix_prev_pos)\n    longest_prefix_prev_pos_index = longest_prefix_prev_pos.index('')\n    longest_prefix_prev_pos_index_len = len(longest_prefix_prev_pos_index)\n    longest_prefix_prev_pos_index_index = longest_prefix_prev_pos_index.index('')\n    longest_prefix_prev_pos_index_index_len = len(longest_prefix_prev_pos_index_index)\n    longest_prefix_prev_pos_index_index_index = longest_prefix_prev_pos_index_index.index('')\n\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    longest_prefix_prev_pos_index_index_len = len(longest_prefix_prev_pos_index_index)\n    longest_prefix_prev_pos_index_index_index_len = len(longest_prefix_prev_pos_index_index_index", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    palindrome = ''\n    while palindrome == '':\n        palindrome = string[::-1]\n        if palindrome == '':\n            return palindrome\n        else:\n            string = palindrome + string\n    return string", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    length = len(string)\n    longest_prefix = ''\n    for i in range(length):\n        if is_palindrome(string[i]):\n            longest_prefix = longest_prefix + string[i]\n    if longest_prefix:\n        return longest_prefix + string[length - 1]\n    else:\n        return string[::-1]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n\n    # Find longest postfix of string that is a palindrome.\n    longest_postfix = ''\n    for char in string:\n        if char!= char[::-1]:\n            longest_postfix += char\n    # Find reverse of string prefix that comes before the palindromic suffix.\n    reverse_prefix = string[::-1:]\n    reverse_prefix = reverse_prefix[:-1]\n    # Append reverse of string prefix to the end of the string.\n    return longest_postfix + reverse_prefix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    postfix = string[::-1]\n    if is_palindrome(postfix):\n        return postfix\n    return reverse(string[:-1]) + postfix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    length = len(string)\n    if length == 0:\n        return ''\n    palindrome = string[:length]\n    palindrome = palindrome[::-1]\n    if len(palindrome) > length:\n        return palindrome + string[-length:]\n    return palindrome", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n\n    if len(string) < 2:\n        return string\n\n    postfix = string[::-1]\n    prefix = string[:-1]\n    if prefix == postfix:\n        return prefix\n\n    return reverse(prefix) + postfix + reverse(string[-1:])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest palindrome that begins with supplied string.\n    # The longest palindrome that begins with supplied string is a palindrome.\n    palindrome_length = len(string) - len(string[::-1])\n    # Find the longest postfix of supplied string that is a palindrome.\n    # The longest postfix of supplied string that is a palindrome is a palindrome.\n    palindrome_prefix_length = len(string) - len(string[:-palindrome_length])\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # The longest postfix of supplied string that is a palindrome is a palindrome.\n    palindrome_reverse_prefix_length = len(string) - len(string[-palindrome_length:])\n    # Find the longest palindrome that begins with supplied string.\n    # The longest palindrome that begins with supplied string is a palindrome.\n    palindrome_length = len(string) - len(string[::-1])\n    # Find the longest postfix of supplied string that is a palindrome.\n    # The longest postfix of supplied string that is a palindrome is a palindrome.", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    assert len(string) > 1\n    assert len(string) % 2 == 0\n    string = string.lower()\n\n    if len(string) == 1:\n        return string\n    else:\n        return string[::-1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_prefix = len(string) - 1\n    longest_suffix = len(string) - 1\n    if longest_prefix > longest_suffix:\n        return string[longest_suffix: longest_prefix + 1]\n    return string[longest_prefix: longest_prefix]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n    max_pfx_len = len(string) - 1\n    max_pfx = string[max_pfx_len:]\n    max_suf_len = len(string)\n    max_suf = string[max_suf_len:]\n    max_suf_pos = string.find(max_suf)\n    if max_suf_pos!= -1:\n        max_suf_len = max_suf_pos - len(max_suf)\n        max_pfx_len = max_pfx_len - len(max_pfx)\n    else:\n        max_suf_len = len(max_suf)\n        max_pfx_len = len(max_pfx)\n    if max_pfx_len == max_suf_len:\n        return max_suf + max_pfx\n    return max_pfx + make_palindrome(string[:max_suf_len])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_prefix = ''\n    while longest_prefix!= '':\n        longest_prefix = longest_prefix[::-1]\n        if longest_prefix == string[::-1]:\n            break\n        if longest_prefix == '':\n            return longest_prefix\n        longest_prefix += string[::-1]\n    return longest_prefix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n    if len(string) == 1:\n        return string[::-1]\n    if len(string) == 2:\n        return string[::-1] + string[::-1]\n    return ''.join([reverse(string[i]) for i in range(len(string))])", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_prefix = ''\n    longest_suffix = ''\n    for char in string:\n        if char =='':\n            longest_prefix = longest_prefix + char\n            continue\n        if char =='':\n            longest_suffix = longest_suffix + char\n            continue\n        if char =='':\n            longest_suffix = longest_suffix + char\n            continue\n        if char =='':\n            longest_suffix = longest_suffix + char\n            continue\n        if char =='':\n            longest_suffix = longest_suffix + char\n            continue\n        if char =='':\n            longest_suffix = longest_suffix + char\n            continue\n        if char =='':\n            longest_suffix = longest_suffix + char\n            continue\n        if char =='':\n            longest_prefix = longest_prefix + char\n            continue\n        if char =='':\n            longest_prefix = longest_prefix + char\n            continue\n        if char =='':\n            longest_prefix = longest_prefix + char\n            continue\n        if char =='':\n            longest_prefix = longest_prefix + char\n            continue\n        if char =='':\n            longest_prefix = longest_prefix + char\n            continue\n        if char =='':\n            longest_prefix = longest_prefix + char\n            continue\n        if char =='':\n            longest_prefix = longest_prefix + char\n            continue\n        if char ==", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return string\n    length = len(string)\n    if length < 2:\n        return string\n    if length % 2!= 0:\n        return string\n    if is_palindrome(string[:length - 1]):\n        return string[-length:-length - 1]\n    return string[:length - 1]", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_prefix = ''\n    longest_suffix = ''\n    for index, letter in enumerate(string):\n        if letter == string[index + 1:]:\n            longest_prefix = letter\n            break\n        if letter == string[index - 1]:\n            longest_suffix = letter\n            break\n    longest_prefix = longest_prefix.reverse()\n    longest_suffix = longest_suffix.reverse()\n    return longest_prefix + longest_suffix\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not is_palindrome(string):\n        return ''\n\n    prefix_length = len(string)\n    suffix_length = len(string[-1:])\n    if prefix_length == suffix_length:\n        return string\n\n    palindrome = prefix_length\n    while palindrome > 0:\n        palindrome -= 1\n        new_string = string[:palindrome] + string[palindrome:]\n        if is_palindrome(new_string):\n            return new_string\n        else:\n            string = new_string\n    return ''", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_prefix = None\n    longest_suffix = None\n    for prefix in string:\n        if longest_prefix is None:\n            longest_prefix = prefix\n        elif longest_prefix[-1] == longest_prefix[-2]:\n            longest_prefix = prefix[-2:]\n        else:\n            break\n    for suffix in string:\n        if longest_suffix is None:\n            longest_suffix = suffix\n        elif longest_suffix[-1] == longest_suffix[-2]:\n            longest_suffix = suffix[-2:]\n        else:\n            break\n    if longest_prefix is None:\n        return \"\"\n    else:\n        return longest_prefix + make_palindrome(string[len(longest_prefix):]) + longest_suffix", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find longest postfix of string that is a palindrome\n    longest_palindrome = ''\n    for char in string:\n        if char.isalnum():\n            longest_palindrome += char\n        else:\n            longest_palindrome += '_' + char\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    return longest_palindrome[::-1]\n</s>", "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    longest_postfix = ''\n    while longest_postfix is not '':\n        length = len(longest_postfix)\n        if length == 0:\n            return longest_postfix\n        longest_postfix = longest_postfix[-length:]\n        longest_prefix = longest_prefix[-length:]\n        if longest_prefix == longest_postfix:\n            return longest_prefix\n        longest_prefix = longest_prefix[:-length]\n        longest_prefix = longest_prefix[-length:]\n        longest_prefix = longest_prefix[:-length]\n    return ''"]]