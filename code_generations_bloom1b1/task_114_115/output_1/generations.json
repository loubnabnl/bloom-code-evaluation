[["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # First, find the minimum sum of all non-empty sub-arrays.\n    minSum = 0\n    for num in nums:\n        if num not in [0, 1, 2, 3, 4]:\n            continue\n        if num in [0, 1, 2, 3, 4]:\n            minSum += num\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    else:\n        return min(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(nums, key=lambda x: x.sum())", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if len(nums) == 0:\n        return 0\n    if nums[0] == 0:\n        return 0\n    if nums[1] == 0:\n        return 0\n    if nums[2] == 0:\n        return 0\n    if nums[3] == 0:\n        return 0\n    if nums[0] == nums[1]:\n        return 0\n    if nums[0] == nums[2]:\n        return 0\n    if nums[0] == nums[3]:\n        return 0\n    if nums[1] == nums[2]:\n        return 0\n    if nums[1] == nums[3]:\n        return 0\n    if nums[2] == nums[3]:\n        return 0\n    if nums[2] == nums[3]:\n        return 0\n    if nums[1] == nums[3]:\n        return 0\n    if nums[1] == nums[3]:\n        return 0\n    if nums[1] == nums[3]:\n        return 0\n    if nums[1] == nums[3]:\n        return 0\n    if nums[1] == nums[3]:\n        return 0\n    if nums[1] == nums[3]:\n        return 0\n    if nums[1] == nums[3]:\n        return 0\n    if nums[1] == nums[3]:\n        return 0\n    if nums", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= nums.shape[1]:\n        raise ValueError(\"nums must be a non-empty array of integers\")\n    if nums.shape[0] == nums.shape[1]:\n        return sum(nums)\n    else:\n        return sum([sum(num) for num in nums])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum = 0\n    for num in nums:\n        if num not in (0, -1, -2, -3):\n            minSum += num\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0]!= 1:\n        raise ValueError(\"nums must be a 1D array\")\n    if nums.shape[1]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[2]!= 3:\n        raise ValueError(\"nums must be a 3D array\")\n    if nums.shape[3]!= 4:\n        raise ValueError(\"nums must be a 3D array\")\n    if nums.shape[0]!= nums.shape[1]:\n        raise ValueError(\"nums must be a 1D array\")\n    if nums.shape[1]!= nums.shape[2]:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[2]!= nums.shape[3]:\n        raise ValueError(\"nums must be a 3D array\")\n    if nums.shape[3]!= nums.shape[4]:\n        raise ValueError(\"nums must be a 3D array\")\n    return min(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Create a list of all non-empty sub-arrays of nums.\n    numsList = []\n    for i in range(len(nums)):\n        numsList.append(nums[i])\n    # Find the minimum sum of all non-empty sub-arrays.\n    minSum = 0\n    for i in numsList:\n        if i not in nums:\n            continue\n        # Find the minimum sum of the sub-array.\n        minSum = min(minSum, sum(numsList[i]))\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(min(nums), minSubArraySum(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Create a list of all non-empty sub-arrays\n    nums = [num for num in nums]\n    # Create a list of all non-empty subarrays\n    subArray = []\n    for num in nums:\n        if num not in subArray:\n            subArray.append(num)\n    # Find the minimum sum of all non-empty subarrays\n    minSum = 0\n    for subArray in subArray:\n        minSum += subArray.sum()\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # This is a hack to avoid having to do a full loop over all possible\n    # combinations of the elements of nums.\n    # This is not a good solution, but it is a workaround.\n    #\n    # This is a hack to avoid having to do a full loop over all possible\n    # combinations of the elements of nums.\n    # This is not a good solution, but it is a workaround.\n    #\n    # This is a hack to avoid having to do a full loop over all possible\n    # combinations of the elements of nums.\n    # This is not a good solution, but it is a workaround.\n    #\n    # This is a hack to avoid having to do a full loop over all possible\n    # combinations of the elements of nums.\n    # This is not a good solution, but it is a workaround.\n    #\n    # This is a hack to avoid having to do a full loop over all possible\n    # combinations of the elements of nums.\n    # This is not a good solution, but it is a workaround.\n    #\n    # This is a hack to avoid having to do a full loop over all possible\n    # combinations of the elements of nums.\n    # This is not a good solution, but it is a workaround.\n    #\n    # This is", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    if nums[0] == nums[0]:\n        return nums[0]\n    if nums[1] == nums[1]:\n        return nums[1]\n    if nums[2] == nums[2]:\n        return nums[2]\n    if nums[3] == nums[3]:\n        return nums[3]\n    return 0", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if nums[", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0]!= len(nums):\n        raise ValueError(\"nums must be a list of length %d, but is %d.\" % (len(nums), nums.shape[0]))\n    if nums.shape[1]!= len(nums):\n        raise ValueError(\"nums must be a list of length %d, but is %d.\" % (len(nums), nums.shape[1]))\n    if nums.shape[2]!= len(nums):\n        raise ValueError(\"nums must be a list of length %d, but is %d.\" % (len(nums), nums.shape[2]))\n    if nums.shape[3]!= len(nums):\n        raise ValueError(\"nums must be a list of length %d, but is %d.\" % (len(nums), nums.shape[3]))\n    if nums.shape[4]!= len(nums):\n        raise ValueError(\"nums must be a list of length %d, but is %d.\" % (len(nums), nums.shape[4]))\n    return min(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(min(nums), 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= len(nums):\n        raise ValueError('nums must be a list of integers')\n    if nums.shape[1]!= len(nums):\n        raise ValueError('nums must be a list of integers')\n    if nums.shape[2]!= len(nums):\n        raise ValueError('nums must be a list of integers')\n    if nums.shape[3]!= len(nums):\n        raise ValueError('nums must be a list of integers')\n    if nums.shape[4]!= len(nums):\n        raise ValueError('nums must be a list of integers')\n    if nums.shape[5]!= len(nums):\n        raise ValueError('nums must be a list of integers')\n    if nums.shape[6]!= len(nums):\n        raise ValueError('nums must be a list of integers')\n    if nums.shape[7]!= len(nums):\n        raise ValueError('nums must be a list of integers')\n    if nums.shape[8]!= len(nums):", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= len(nums):\n        raise ValueError(\"nums must be a list of length %d, but is %d.\" % (len(nums), nums.shape[0]))\n    if nums.shape[1]!= len(nums):\n        raise ValueError(\"nums must be a list of length %d, but is %d.\" % (len(nums), nums.shape[1]))\n    if nums.shape[2]!= len(nums):\n        raise ValueError(\"nums must be a list of length %d, but is %d.\" % (len(nums), nums.shape[2]))\n    if nums.shape[3]!= len(nums):\n        raise ValueError(\"nums must be a list of length %d, but is %d.\" % (len(nums), nums.shape[3]))\n    if nums.shape[4]!= len(nums):\n        raise ValueError(\"nums must be a list of length %d, but is %d.\" % (len(nums), nums.shape[4]))\n    return min(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Create a list of all possible sub-arrays\n    nums = [num for num in nums]\n    # Create a list of all possible sums\n    sum = []\n    # Iterate over all possible sub-arrays\n    for i in range(len(nums)):\n        # Check if the sub-array is empty\n        if not nums[i]:\n            # Add the sum to the list\n            sum.append(sum[i])\n        else:\n            # Check if the sum is greater than the minimum\n            if sum[i] > minSubArraySum(nums):\n                # Add the sum to the list\n                sum.append(sum[i])\n    # Return the minimum sum\n    return sum[0]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape))\n    if nums.shape[1]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape))\n    if nums.shape[2]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape))\n    if nums.shape[3]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape))\n    if nums.shape[4]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape))\n    if nums.shape[5]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" %", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min([min(nums) for num in nums])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min([sum(num) for num in nums])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    if nums[0] == 0:\n        return 0\n    if nums[1] == 0:\n        return 0\n    if nums[2] == 0:\n        return 0\n    if nums[3] == 0:\n        return 0\n    if nums[4] == 0:\n        return 0\n    if nums[5] == 0:\n        return 0\n    return sum([sum(i) for i in nums if i!= 0]) - 1", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    if nums[0] == 0:\n        return 0\n    if nums[1] == 0:\n        return 0\n    if nums[2] == 0:\n        return 0\n    if nums[3] == 0:\n        return 0\n    if nums[4] == 0:\n        return 0\n    return min(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= 2:\n        raise ValueError(\"nums must be an array of integers\")\n    if nums.shape[1]!= 2:\n        raise ValueError(\"nums must be an array of integers\")\n    if nums.shape[2]!= 2:\n        raise ValueError(\"nums must be an array of integers\")\n    for i in range(nums.shape[0]):\n        if nums[i]!= 0:\n            return i\n    for i in range(nums.shape[1]):\n        if nums[i]!= 0:\n            return i\n    for i in range(nums.shape[2]):\n        if nums[i]!= 0:\n            return i\n    return 0", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Find the minimum sum of any non-empty sub-array\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i] not in nums[i + 1:]:\n            minSum += nums[i]\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(nums, key=lambda x: x[0], reverse=True)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[1]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[2]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[3]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[4]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[5]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[6]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[7]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[8]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[9]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[10]!= 2:\n        raise ValueError(\"nums must", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= nums.shape[1]:\n        raise ValueError(\"nums must be a non-empty array\")\n    if nums.shape[2]!= nums.shape[3]:\n        raise ValueError(\"nums must be a non-empty array\")\n    if nums.shape[4]!= nums.shape[5]:\n        raise ValueError(\"nums must be a non-empty array\")\n    if nums.shape[6]!= nums.shape[7]:\n        raise ValueError(\"nums must be a non-empty array\")\n    if nums.shape[8]!= nums.shape[9]:\n        raise ValueError(\"nums must be a non-empty array\")\n    if nums.shape[10]!= nums.shape[11]:\n        raise ValueError(\"nums must be a non-empty array\")\n    return sum([sum(x) for x in nums])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0] == 1:\n        return nums[0]\n    if nums.shape[1] == 1:\n        return nums[1]\n    if nums.shape[2] == 1:\n        return nums[2]\n    if nums.shape[3] == 1:\n        return nums[3]\n    if nums.shape[4] == 1:\n        return nums[4]\n    if nums.shape[5] == 1:\n        return nums[5]\n    if nums.shape[6] == 1:\n        return nums[6]\n    if nums.shape[7] == 1:\n        return nums[7]\n    if nums.shape[8] == 1:\n        return nums[8]\n    if nums.shape[9] == 1:\n        return nums[9]\n    if nums.shape[10] == 1:\n        return nums[10]\n    if nums.shape[11] == 1:\n        return nums[11]\n    if nums.shape[12] == 1:\n        return nums[12]\n    if nums.shape[13] == 1:\n        return nums[13]\n    if nums.shape[14] == 1:\n        return nums[14]\n    if nums.shape[15] == 1:\n        return nums[15]\n    return 0", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Find the minimum sum of all non-empty sub-arrays\n    for i in range(len(nums)):\n        if nums[i] not in nums:\n            continue\n        if nums[i] not in nums[i - 1:]:\n            continue\n        if nums[i] not in nums[i + 1:]:\n            continue\n        if nums[i] not in nums[i + 2:]:\n            continue\n        if nums[i] not in nums[i + 3:]:\n            continue\n        if nums[i] not in nums[i + 4:]:\n            continue\n        if nums[i] not in nums[i + 5:]:\n            continue\n        if nums[i] not in nums[i + 6:]:\n            continue\n        if nums[i] not in nums[i + 7:]:\n            continue\n        if nums[i] not in nums[i + 8:]:\n            continue\n        if nums[i] not in nums[i + 9:]:\n            continue\n        if nums[i] not in nums[i + 10:]:\n            continue\n        if nums[i] not in nums[i + 11:]:\n            continue\n        if nums[i] not in nums[i + 12:]:\n            continue\n        if nums[i] not in nums[i + 13:]:\n            continue\n        if nums[i] not in nums[i + 14:]:\n            continue\n        if nums[i] not in nums[i + 15:", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if len(nums) == 0:\n        return 0\n    if nums[0] == 0:\n        return 0\n    if nums[1] == 0:\n        return 0\n    if nums[2] == 0:\n        return 0\n    if nums[3] == 0:\n        return 0\n    return min([sum(nums) for nums in zip(*range(len(nums)) + [nums[0]])])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(min(nums), 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(min(nums), sum(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(nums, key=lambda x: x[0])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # find the minimum sum of non-empty sub-arrays\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i] not in nums:\n            continue\n        if nums[i] not in nums[i-1]:\n            continue\n        if nums[i] not in nums[i-1][1:]:\n            continue\n        if nums[i] not in nums[i-1][2:]:\n            continue\n        if nums[i] not in nums[i-1][3:]:\n            continue\n        if nums[i] not in nums[i-1][4:]:\n            continue\n        minSum += nums[i]\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(min(nums), 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min([sum(n) for n in nums])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0]!= 2:\n        raise ValueError(\"nums must be a 2-d array\")\n    if nums.shape[1]!= 2:\n        raise ValueError(\"nums must be a 2-d array\")\n    if nums.shape[2]!= 2:\n        raise ValueError(\"nums must be a 2-d array\")\n    if nums.shape[3]!= 2:\n        raise ValueError(\"nums must be a 2-d array\")\n    if nums.shape[4]!= 2:\n        raise ValueError(\"nums must be a 2-d array\")\n    if nums.shape[5]!= 2:\n        raise ValueError(\"nums must be a 2-d array\")\n    if nums.shape[6]!= 2:\n        raise ValueError(\"nums must be a 2-d array\")\n    if nums.shape[7]!= 2:\n        raise ValueError(\"nums must be a 2-d array\")\n    if nums.shape[8]!= 2:\n        raise ValueError(\"nums must be a 2-d array\")\n    if nums.shape[9]!= 2:\n        raise ValueError(\"nums must be a 2-d array\")\n    if nums.shape[10]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Create a list of all the subarrays\n    subarrays = []\n    for i in range(len(nums)):\n        subarrays.append(nums[i])\n    # Create a list of all the sums\n    sums = []\n    for i in range(len(subarrays)):\n        sums.append(sum(subarrays[i]))\n    # Find the minimum sum\n    minSum = sum(sums)\n    # Return the minimum sum\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0] == 0:\n        return\n    if nums.shape[1] == 0:\n        return\n    if nums.shape[2] == 0:\n        return\n    if nums.shape[3] == 0:\n        return\n    if nums.shape[4] == 0:\n        return\n    if nums.shape[5] == 0:\n        return\n    if nums.shape[6] == 0:\n        return\n    if nums.shape[7] == 0:\n        return\n    if nums.shape[8] == 0:\n        return\n    if nums.shape[9] == 0:\n        return\n    if nums.shape[10] == 0:\n        return\n    if nums.shape[11] == 0:\n        return\n    if nums.shape[12] == 0:\n        return\n    if nums.shape[13] == 0:\n        return\n    if nums.shape[14] == 0:\n        return\n    if nums.shape[15] == 0:\n        return\n    if nums.shape[16] == 0:\n        return\n    if nums.shape[17] == 0:\n        return\n    if nums.shape[18] == 0:\n        return\n    if nums.shape[19] == 0:\n        return\n    if nums.shape[20] == 0:\n        return\n    if nums.shape[21] == 0:\n        return", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0] == 1:\n        return nums[0]\n    if nums.shape[1] == 1:\n        return nums[1]\n    if nums.shape[2] == 1:\n        return nums[2]\n    if nums.shape[3] == 1:\n        return nums[3]\n    if nums.shape[4] == 1:\n        return nums[4]\n    return 0", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= nums.shape[1]:\n        raise ValueError(\"nums must be an array of shape (%d, %d)\" % (nums.shape[0], nums.shape[1]))\n    if nums.shape[0] == nums.shape[1]:\n        return sum(nums)\n    else:\n        return min([sum(num) for num in nums])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Create a list of all possible sub-arrays\n    subArrayList = []\n    for i in range(len(nums)):\n        subArrayList.append(nums[i])\n    # Create a list of all possible sums\n    sumList = []\n    for i in range(len(subArrayList)):\n        sumList.append(sum(subArrayList[i]))\n    # Create a list of all possible sums\n    minSum = []\n    for i in range(len(sumList)):\n        minSum.append(min(sumList[i]))\n    # Return the minimum sum\n    return minSum[0]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if len(nums) == 0:\n        return 0\n    if nums[0] == nums[0]:\n        return 0\n    if nums[1] == nums[1]:\n        return 0\n    if nums[2] == nums[2]:\n        return 0\n    if nums[3] == nums[3]:\n        return 0\n    if nums[4] == nums[4]:\n        return 0\n    return min([sum(i) for i in range(len(nums))])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0]!= 1:\n        raise ValueError(\"nums must be a 1D array\")\n    if nums.shape[1]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[2]!= 3:\n        raise ValueError(\"nums must be a 3D array\")\n    if nums.shape[3]!= 4:\n        raise ValueError(\"nums must be a 4D array\")\n    return min(nums.min(), nums.max())", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(min(nums), 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0]!= 2:\n        raise ValueError(\"nums must be a 2-d array\")\n    if nums.shape[1]!= 2:\n        raise ValueError(\"nums must be a 2-d array\")\n    if nums.shape[2]!= 2:\n        raise ValueError(\"nums must be a 2-d array\")\n    if nums.shape[3]!= 2:\n        raise ValueError(\"nums must be a 2-d array\")\n    if nums.shape[4]!= 2:\n        raise ValueError(\"nums must be a 2-d array\")\n    if nums.shape[5]!= 2:\n        raise ValueError(\"nums must be a 2-d array\")\n    if nums.shape[6]!= 2:\n        raise ValueError(\"nums must be a 2-d array\")\n    if nums.shape[7]!= 2:\n        raise ValueError(\"nums must be a 2-d array\")\n    if nums.shape[8]!= 2:\n        raise ValueError(\"nums must be a 2-d array\")\n    if nums.shape[9]!= 2:\n        raise ValueError(\"nums must be a 2-d array\")\n    if nums.shape[10]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0]!= len(nums):\n        raise ValueError(\"nums must be a non-empty array\")\n    if nums.shape[1]!= len(nums):\n        raise ValueError(\"nums must be a non-empty array\")\n    if nums.shape[2]!= len(nums):\n        raise ValueError(\"nums must be a non-empty array\")\n    if nums.shape[3]!= len(nums):\n        raise ValueError(\"nums must be a non-empty array\")\n    if nums.shape[4]!= len(nums):\n        raise ValueError(\"nums must be a non-empty array\")\n    if nums.shape[5]!= len(nums):\n        raise ValueError(\"nums must be a non-empty array\")\n    if nums.shape[6]!= len(nums):\n        raise ValueError(\"nums must be a non-empty array\")\n    if nums.shape[7]!= len(nums):\n        raise ValueError(\"nums must be a non-empty array\")\n    if nums.shape[8]!= len(nums):", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(min(nums), min(nums) + 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if len(nums) == 0:\n        return 0\n    if nums[0] == 0:\n        return 0\n    if nums[1] == 0:\n        return 0\n    if nums[2] == 0:\n        return 0\n    if nums[3] == 0:\n        return 0\n    if nums[0] == nums[1]:\n        return 0\n    if nums[1] == nums[2]:\n        return 0\n    if nums[2] == nums[3]:\n        return 0\n    if nums[0] == nums[2]:\n        return 0\n    if nums[1] == nums[3]:\n        return 0\n    if nums[2] == nums[3]:\n        return 0\n    if nums[0] == nums[2]:\n        return 0\n    if nums[1] == nums[3]:\n        return 0\n    if nums[2] == nums[3]:\n        return 0\n    if nums[0] == nums[2]:\n        return 0\n    if nums[1] == nums[3]:\n        return 0\n    if nums[2] == nums[3]:\n        return 0\n    if nums[0] == nums[2]:\n        return 0\n    if nums[1] == nums[3]:\n        return 0\n    if nums[2] == nums[3]:\n        return 0\n    if nums[0] == num", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if len(nums) == 0:\n        return 0\n    if nums[0] == 0:\n        return 0\n    if nums[1] == 0:\n        return 0\n    if nums[2] == 0:\n        return 0\n    if nums[3] == 0:\n        return 0\n    if nums[4] == 0:\n        return 0\n    return min([sum(i) for i in nums if i!= 0])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= len(nums):\n        return\n    if nums.shape[1]!= len(nums):\n        return\n    if nums.shape[2]!= len(nums):\n        return\n    if nums.shape[3]!= len(nums):\n        return\n    for i in range(len(nums)):\n        if nums[i] not in nums[i-1]:\n            return\n    return\n    #return min([sum(i for i in range(len(nums)) if nums[i] not in nums[i-1]]) for i in range(len(nums))])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= len(nums):\n        return\n    if nums.shape[1]!= len(nums[0]):\n        return\n    if nums[0].shape[0]!= len(nums[1]):\n        return\n    if nums[1].shape[0]!= len(nums[2]):\n        return\n    if nums[2].shape[0]!= len(nums[3]):\n        return\n    if nums[3].shape[0]!= len(nums[4]):\n        return\n    return 0", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0] == 1:\n        return nums[0]\n    if nums.shape[1] == 1:\n        return nums[1]\n    if nums.shape[2] == 1:\n        return nums[2]\n    if nums.shape[3] == 1:\n        return nums[3]\n    if nums.shape[4] == 1:\n        return nums[4]\n    if nums.shape[5] == 1:\n        return nums[5]\n    if nums.shape[6] == 1:\n        return nums[6]\n    if nums.shape[7] == 1:\n        return nums[7]\n    if nums.shape[8] == 1:\n        return nums[8]\n    if nums.shape[9] == 1:\n        return nums[9]\n    if nums.shape[10] == 1:\n        return nums[10]\n    if nums.shape[11] == 1:\n        return nums[11]\n    if nums.shape[12] == 1:\n        return nums[12]\n    if nums.shape[13] == 1:\n        return nums[13]\n    if nums.shape[14] == 1:\n        return nums[14]\n    if nums.shape[15] == 1:\n        return nums[15]\n    if nums.shape[16] == 1:\n        return nums[16]\n    if nums.shape[17] == 1:", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum = 0\n    for num in nums:\n        if num not in (0, 1, 2, 3, 4):\n            minSum += num\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min([min(nums) for num in nums])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # find the minimum sum\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i] not in nums:\n            minSum += nums[i]\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(nums, key=lambda x: x[0])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Find the minimum sum of all non-empty sub-arrays\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i] not in nums:\n            minSum += nums[i]\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # find the minimum sum of any non-empty sub-array\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            continue\n        if nums[i] > minSum:\n            minSum = nums[i]\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0]!= nums.shape[1]:\n        raise ValueError(\"nums must be of the same shape as nums\")\n    if nums.shape[0] == nums.shape[1]:\n        return sum(nums)\n    else:\n        return min([sum(num) for num in nums])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0]!= len(nums):\n        return 0\n    if nums.shape[1]!= len(nums):\n        return 0\n    if nums.shape[2]!= len(nums):\n        return 0\n    if nums.shape[3]!= len(nums):\n        return 0\n    return sum([sum([sum(i) for i in nums]) for i in nums])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(min(nums), 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    else:\n        return min(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # First, find the minimum sum of all non-empty sub-arrays\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i] not in nums:\n            continue\n        if nums[i] not in nums[i-1]:\n            continue\n        minSum += nums[i]\n    return minSum\n\n    # Second, find the minimum sum of all non-empty sub-arrays that are not\n    # empty\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i] not in nums[i-1]:\n            continue\n        if nums[i] not in nums[i-1]:\n            continue\n        if nums[i] not in nums[i-1]:\n            continue\n        if nums[i] not in nums[i-1]:\n            continue\n        if nums[i] not in nums[i-1]:\n            continue\n        if nums[i] not in nums[i-1]:\n            continue\n        if nums[i] not in nums[i-1]:\n            continue\n        if nums[i] not in nums[i-1]:\n            continue\n        if nums[i] not in nums[i-1]:\n            continue\n        if nums[i] not in nums[i-1]:\n            continue\n        if nums[i] not in nums[i-1]:\n            continue\n        if nums[i] not in nums[i-1", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # find the minimum sum of non-empty sub-array\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            minSum = min(nums, key=lambda x: x[i])\n            if minSum == 0:\n                return 0\n            else:\n                return minSum\n\n    # find the minimum sum of all non-empty sub-array\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            minSum += minSubArraySum(nums, i)\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0] == 1:\n        return nums[0]\n    if nums.shape[1] == 1:\n        return nums[1]\n    if nums.shape[2] == 1:\n        return nums[2]\n    if nums.shape[3] == 1:\n        return nums[3]\n    return 0", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # First, find the minimum sum of all non-empty sub-arrays\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i] not in nums:\n            minSum += nums[i]\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i] not in nums:\n            minSum += nums[i]\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[1]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[2]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[3]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[4]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[5]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[6]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[7]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[8]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[9]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[10]!= 2:\n        raise ValueError(\"nums must", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(nums, key=lambda x: x.sum())", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if len(nums) == 0:\n        return 0\n    if nums.shape[0] == 1:\n        return nums[0]\n    if nums.shape[1] == 1:\n        return nums[1]\n    if nums.shape[2] == 1:\n        return nums[2]\n    if nums.shape[3] == 1:\n        return nums[3]\n    if nums.shape[4] == 1:\n        return nums[4]\n    if nums.shape[5] == 1:\n        return nums[5]\n    if nums.shape[6] == 1:\n        return nums[6]\n    if nums.shape[7] == 1:\n        return nums[7]\n    if nums.shape[8] == 1:\n        return nums[8]\n    if nums.shape[9] == 1:\n        return nums[9]\n    if nums.shape[10] == 1:\n        return nums[10]\n    if nums.shape[11] == 1:\n        return nums[11]\n    if nums.shape[12] == 1:\n        return nums[12]\n    if nums.shape[13] == 1:\n        return nums[13]\n    if nums.shape[14] == 1:\n        return nums[14]\n    if nums.shape[15] == 1:\n        return nums[15]\n    if nums.shape[16] == 1:\n        return num", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if len(nums) == 0:\n        return 0\n    if nums[0] == 0:\n        return 0\n    if nums[1] == 0:\n        return 0\n    if nums[2] == 0:\n        return 0\n    if nums[3] == 0:\n        return 0\n    if nums[4] == 0:\n        return 0\n    return sum([sum(i) for i in nums if i!= 0])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum = 0\n    for num in nums:\n        if num is not None:\n            if num[0] == 0:\n                minSum += num[1]\n            else:\n                minSum += num[1]\n        else:\n            minSum += num\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if len(nums) == 0:\n        return 0\n    if nums[0] == 0:\n        return 0\n    if nums[1] == 0:\n        return 0\n    if nums[2] == 0:\n        return 0\n    if nums[3] == 0:\n        return 0\n    if nums[4] == 0:\n        return 0\n    return min(nums, key=lambda x: x[0], reverse=True)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if len(nums) == 0:\n        return 0\n    if nums[0] == 0:\n        return 0\n    if nums[1] == 0:\n        return 0\n    if nums[2] == 0:\n        return 0\n    if nums[3] == 0:\n        return 0\n    return min([sum(nums) for nums in minSubArraySum(nums)])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= 2:\n        raise ValueError(\"nums must be an array of integers\")\n    if nums.shape[1]!= 2:\n        raise ValueError(\"nums must be an array of integers\")\n    if nums.shape[2]!= 2:\n        raise ValueError(\"nums must be an array of integers\")\n    if nums.shape[3]!= 2:\n        raise ValueError(\"nums must be an array of integers\")\n    if nums.shape[4]!= 2:\n        raise ValueError(\"nums must be an array of integers\")\n    if nums.shape[5]!= 2:\n        raise ValueError(\"nums must be an array of integers\")\n    if nums.shape[6]!= 2:\n        raise ValueError(\"nums must be an array of integers\")\n    if nums.shape[7]!= 2:\n        raise ValueError(\"nums must be an array of integers\")\n    if nums.shape[8]!= 2:\n        raise ValueError(\"nums must be an array of integers\")\n    if nums.shape[9]!= 2:\n        raise ValueError(\"nums must be an array of integers\")\n    if nums.shape[10]!", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= 2:\n        return\n    if nums.shape[1]!= 2:\n        return\n    if nums.shape[2]!= 2:\n        return\n    if nums.shape[3]!= 2:\n        return\n    if nums.shape[4]!= 2:\n        return\n    if nums.shape[5]!= 2:\n        return\n    if nums.shape[6]!= 2:\n        return\n    if nums.shape[7]!= 2:\n        return\n    if nums.shape[8]!= 2:\n        return\n    if nums.shape[9]!= 2:\n        return\n    if nums.shape[10]!= 2:\n        return\n    if nums.shape[11]!= 2:\n        return\n    if nums.shape[12]!= 2:\n        return\n    if nums.shape[13]!= 2:\n        return\n    if nums.shape[14]!= 2:\n        return\n    if nums.shape[15]!= 2:\n        return\n    if nums.shape[16]!= 2:\n        return\n    if nums.shape[17]!= 2:\n        return\n    if nums.shape[18]!= 2:\n        return\n    if nums.shape[19]!= 2:\n        return\n    if nums.", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= len(nums):\n        raise ValueError(\"nums must be a list of integers\")\n    if nums.shape[1]!= len(nums):\n        raise ValueError(\"nums must be a list of integers\")\n    if nums.shape[2]!= len(nums):\n        raise ValueError(\"nums must be a list of integers\")\n    if nums.shape[3]!= len(nums):\n        raise ValueError(\"nums must be a list of integers\")\n    if nums.shape[4]!= len(nums):\n        raise ValueError(\"nums must be a list of integers\")\n    if nums.shape[5]!= len(nums):\n        raise ValueError(\"nums must be a list of integers\")\n    if nums.shape[6]!= len(nums):\n        raise ValueError(\"nums must be a list of integers\")\n    if nums.shape[7]!= len(nums):\n        raise ValueError(\"nums must be a list of integers\")\n    if nums.shape[8]!= len(nums):", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(min(nums), minSubArraySum(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape[0]))\n    if nums.shape[1]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape[1]))\n    if nums.shape[2]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape[2]))\n    if nums.shape[3]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape[3]))\n    if nums.shape[4]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape[4]))\n    if nums.shape[5]!= len(nums):\n        raise ValueError(\"nums must be an array of length", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0] == 1:\n        return nums[0]\n    if nums.shape[1] == 1:\n        return nums[1]\n    if nums.shape[2] == 1:\n        return nums[2]\n    if nums.shape[3] == 1:\n        return nums[3]\n    if nums.shape[4] == 1:\n        return nums[4]\n    if nums.shape[5] == 1:\n        return nums[5]\n    if nums.shape[6] == 1:\n        return nums[6]\n    if nums.shape[7] == 1:\n        return nums[7]\n    if nums.shape[8] == 1:\n        return nums[8]\n    if nums.shape[9] == 1:\n        return nums[9]\n    if nums.shape[10] == 1:\n        return nums[10]\n    if nums.shape[11] == 1:\n        return nums[11]\n    if nums.shape[12] == 1:\n        return nums[12]\n    if nums.shape[13] == 1:\n        return nums[13]\n    if nums.shape[14] == 1:\n        return nums[14]\n    if nums.shape[15] == 1:\n        return nums[15]\n    if nums.shape[16] == 1:\n        return nums[16]\n    if nums.shape[17] == 1:", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(nums, key=lambda x: x[0])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 0:\n        return\n    if nums[0] == nums[1]:\n        return\n    if nums[1] == nums[2]:\n        return\n    if nums[2] == nums[3]:\n        return\n    if nums[3] == nums[4]:\n        return\n    if nums[4] == nums[5]:\n        return\n    if nums[5] == nums[6]:\n        return\n    if nums[6] == nums[7]:\n        return\n    if nums[7] == nums[8]:\n        return\n    if nums[8] == nums[9]:\n        return\n    if nums[9] == nums[10]:\n        return\n    if nums[10][-1] == nums[10]:\n        return\n    if nums[10][-2] == nums[10]:\n        return\n    if nums[10][-3] == nums[10]:\n        return\n    if nums[10][-4] == nums[10]:\n        return\n    if nums[10][-5] == nums[10]:\n        return\n    if nums[10][-6] == nums[10]:\n        return\n    if nums[10][-7] == nums[10]:\n        return\n    if nums[10][-8] == nums[10]:\n        return", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, but is %d\" % (len(nums), nums.shape))\n    if nums.shape[1]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, but is %d\" % (len(nums), nums.shape))\n    if nums.shape[2]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, but is %d\" % (len(nums), nums.shape))\n    if nums.shape[3]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, but is %d\" % (len(nums), nums.shape))\n    if nums.shape[4]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, but is %d\" % (len(nums), nums.shape))\n    if nums.shape[5]!= len(nums):\n        raise ValueError(\"nums must be an array of length", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(min(nums), 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min = 0\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            min = min(min, minSubArraySum(nums, i))\n    return min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= nums.shape[1]:\n        raise ValueError(\"nums must be an array of length %d, shape %d\" % (nums.shape[0], nums.shape[1]))\n    if nums.shape[0] == nums.shape[1]:\n        return sum(nums)\n    else:\n        return min([sum(num) for num in nums])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # First, find the minimum sum of all non-empty sub-arrays.\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i] not in nums:\n            continue\n        if nums[i] not in nums[i-1]:\n            continue\n        if nums[i] not in nums[i-1][1:]:\n            continue\n        if nums[i] not in nums[i-1][2:]:\n            continue\n        if nums[i] not in nums[i-1][3:]:\n            continue\n        minSum += nums[i]\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0]!= nums.shape[1]:\n        return 0\n    if nums.shape[0] == nums.shape[1]:\n        return sum(nums)\n    else:\n        return min([sum(num) for num in nums])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= 2:\n        raise ValueError(\"nums must be a 2-d array\")\n    if nums.shape[1]!= 2:\n        raise ValueError(\"nums must be a 2-d array\")\n    if nums.shape[2]!= 2:\n        raise ValueError(\"nums must be a 2-d array\")\n    if nums.shape[3]!= 2:\n        raise ValueError(\"nums must be a 2-d array\")\n    if nums.shape[4]!= 2:\n        raise ValueError(\"nums must be a 2-d array\")\n    if nums.shape[5]!= 2:\n        raise ValueError(\"nums must be a 2-d array\")\n    if nums.shape[6]!= 2:\n        raise ValueError(\"nums must be a 2-d array\")\n    if nums.shape[7]!= 2:\n        raise ValueError(\"nums must be a 2-d array\")\n    if nums.shape[8]!= 2:\n        raise ValueError(\"nums must be a 2-d array\")\n    if nums.shape[9]!= 2:\n        raise ValueError(\"nums must be a 2-d array\")\n    if nums.shape[10]!", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min([min(nums) for num in nums])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Create a list of all the possible sub-arrays\n    subArrayList = []\n    for i in range(len(nums)):\n        if nums[i] not in subArrayList:\n            subArrayList.append(nums[i])\n    # Find the minimum sum of all the sub-arrays\n    minSum = 0\n    for subArray in subArrayList:\n        minSum += subArraySum(subArray)\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if num", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Create a list of all possible sub-arrays\n    subArrayList = []\n    for i in range(len(nums)):\n        subArrayList.append(nums[i])\n    # Create a list of all possible sums of the sub-arrays\n    subArraySumList = []\n    for i in range(len(subArrayList)):\n        subArraySumList.append(sum(subArrayList[i]))\n    # Find the minimum sum of all possible sums\n    minSum = 0\n    for i in range(len(subArraySumList)):\n        if subArraySumList[i] < minSum:\n            minSum = subArraySumList[i]\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i] not in nums:\n            minSum += nums[i]\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # find the minimum sum of all non-empty sub-arrays\n    minSum = 0\n    for num in nums:\n        if num not in (0, -1, -2, -3):\n            minSum += num\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # minSubArraySum([1, 2, 3, 4, 1, 2, 4]) == 1\n    # minSubArraySum([-1, -2, -3]) == -6\n    # minSubArraySum([-1, -2, -3]) == -6\n    # minSubArraySum([-1, -2, -3]) == -6\n    # minSubArraySum([-1, -2, -3]) == -6\n    # minSubArraySum([-1, -2, -3]) == -6\n    # minSubArraySum([-1, -2, -3]) == -6\n    # minSubArraySum([-1, -2, -3]) == -6\n    # minSubArraySum([-1, -2, -3]) == -6\n    # minSubArraySum([-1, -2, -3]) == -6\n    # minSubArraySum([-1, -2, -3]) == -6\n    # minSubArraySum([-1, -2, -3]) == -6\n    # minSubArraySum([-1, -2, -3]) == -6\n    # minSubArraySum([-1, -2, -3]) == -6\n    # minSubArraySum([-1, -2,", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0]!= nums.shape[1]:\n        raise ValueError(\"nums must be a non-empty array\")\n    if nums.shape[0] == nums.shape[1]:\n        return sum(nums)\n    else:\n        return min(nums, key=lambda x: x.sum())", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # First, find the minimum sum of all non-empty sub-arrays\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i] not in nums:\n            continue\n        if nums[i] not in nums[i-1]:\n            continue\n        if nums[i] not in nums[i-1][1:]:\n            continue\n        if nums[i] not in nums[i-1][2:]:\n            continue\n        minSum += nums[i]\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if len(nums) == 0:\n        return 0\n    if nums[0] == 0:\n        return 0\n    if nums[1] == 0:\n        return 0\n    if nums[2] == 0:\n        return 0\n    if nums[3] == 0:\n        return 0\n    if nums[4] == 0:\n        return 0\n    if nums[5] == 0:\n        return 0\n    if nums[6] == 0:\n        return 0\n    if nums[7] == 0:\n        return 0\n    if nums[8] == 0:\n        return 0\n    if nums[9] == 0:\n        return 0\n    if nums[10] == 0:\n        return 0\n    if nums[11] == 0:\n        return 0\n    if nums[12] == 0:\n        return 0\n    if nums[13] == 0:\n        return 0\n    if nums[14] == 0:\n        return 0\n    if nums[15] == 0:\n        return 0\n    if nums[16] == 0:\n        return 0\n    if nums[17] == 0:\n        return 0\n    if nums[18] == 0:\n        return 0\n    if nums[19] == 0:\n        return 0\n    if nums[20] == 0:\n        return 0\n    if nums[21] == 0:\n        return 0\n    if nums[22] == 0:\n        return 0\n    if nums[23]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, but is %d\" % (len(nums), nums.shape))\n    if nums.shape[1]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, but is %d\" % (len(nums), nums.shape))\n    if nums.shape[2]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, but is %d\" % (len(nums), nums.shape))\n    if nums.shape[3]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, but is %d\" % (len(nums), nums.shape))\n    if nums.shape[4]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, but is %d\" % (len(nums), nums.shape))\n    if nums.shape[5]!= len(nums):\n        raise ValueError(\"nums must be an array of length", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, but is %d\" % (len(nums), nums.shape))\n    if nums.shape[1]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, but is %d\" % (len(nums), nums.shape))\n    if nums.shape[2]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, but is %d\" % (len(nums), nums.shape))\n    if nums.shape[3]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, but is %d\" % (len(nums), nums.shape))\n    if nums.shape[4]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, but is %d\" % (len(nums), nums.shape))\n    if nums.shape[5]!= len(nums):\n        raise ValueError(\"nums must be an array of length", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # First, find the minimum sum of all non-empty sub-arrays.\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            minSum += nums[i]\n    return minSum\n\n    # Second, find the minimum sum of all non-empty sub-arrays with the same\n    # value.\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i] == nums[-1]:\n            minSum += nums[i]\n    return minSum\n\n    # Third, find the minimum sum of all non-empty sub-arrays with the same\n    # value and different index.\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i] == nums[-1]:\n            minSum += nums[i]\n        else:\n            minSum += nums[i]\n\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if num", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= nums.shape[1]:\n        raise ValueError(\"nums must be a non-empty array\")\n    if nums.shape[0] == nums.shape[1]:\n        return sum(nums)\n    else:\n        return min(min(nums), sum(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if len(nums) == 0:\n        return 0\n    if nums[0] == 0:\n        return 0\n    if nums[1] == 0:\n        return 0\n    if nums[2] == 0:\n        return 0\n    if nums[3] == 0:\n        return 0\n    if nums[4][-1] == 0:\n        return 0\n    return min([sum(i) for i in range(len(nums)) if i!= 0]) - 1", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0]!= nums.shape[1]:\n        raise ValueError(\"nums must be a non-empty array of integers\")\n    if nums.shape[0]!= nums.shape[2]:\n        raise ValueError(\"nums must be a non-empty array of integers\")\n    if nums.shape[1]!= nums.shape[3]:\n        raise ValueError(\"nums must be a non-empty array of integers\")\n    if nums.shape[2]!= nums.shape[4]:\n        raise ValueError(\"nums must be a non-empty array of integers\")\n    return min([sum(i) for i in nums])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # minSubArraySum([1, 2, 3, 4, 1, 2, 4]) == 1\n    # minSubArraySum([-1, -2, -3]) == -6\n    # minSubArraySum([1, 2, 3, 4, 1, 2, 4]) == 1\n    # minSubArraySum([-1, -2, -3]) == -6\n    # minSubArraySum([1, 2, 3, 4, 1, 2, 4]) == 1\n    # minSubArraySum([-1, -2, -3]) == -6\n    # minSubArraySum([1, 2, 3, 4, 1, 2, 4]) == 1\n    # minSubArraySum([-1, -2, -3]) == -6\n    # minSubArraySum([1, 2, 3, 4, 1, 2, 4]) == 1\n    # minSubArraySum([-1, -2, -3]) == -6\n    # minSubArraySum([1, 2, 3, 4, 1, 2, 4]) == 1\n    # minSubArraySum([-1, -2, -3]) == -6\n    # minSubArraySum([1, 2, 3, 4, 1", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape))\n    if nums.shape[1]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape))\n    if nums.shape[2]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape))\n    if nums.shape[3]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape))\n    return min([sum([sum(i) for i in nums]) for i in nums])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(min(nums), minSubArraySum(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= nums.shape[1]:\n        raise ValueError(\"nums must be of the same shape as nums\")\n    if nums.shape[0]!= nums.shape[2]:\n        raise ValueError(\"nums must be of the same shape as nums\")\n    if nums.shape[1]!= nums.shape[3]:\n        raise ValueError(\"nums must be of the same shape as nums\")\n    if nums.shape[2]!= nums.shape[4]:\n        raise ValueError(\"nums must be of the same shape as nums\")\n    if nums.shape[3]!= nums.shape[5]:\n        raise ValueError(\"nums must be of the same shape as nums\")\n    if nums.shape[4]!= nums.shape[6]:\n        raise ValueError(\"nums must be of the same shape as nums\")\n    if nums.shape[5]!= nums.shape[7]:\n        raise ValueError(\"nums must be of the same shape as nums\")\n    if nums.shape[6]!= nums.shape[8]:\n        raise ValueError(\"nums must be of the same shape as nums\"", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0] == 1:\n        return nums[0]\n    if nums.shape[1] == 1:\n        return nums[0]\n    if nums.shape[2] == 1:\n        return nums[0]\n    if nums.shape[3] == 1:\n        return nums[0]\n    if nums.shape[4] == 1:\n        return nums[0]\n    if nums.shape[5] == 1:\n        return nums[0]\n    if nums.shape[6] == 1:\n        return nums[0]\n    if nums.shape[7] == 1:\n        return nums[0]\n    if nums.shape[8] == 1:\n        return nums[0]\n    if nums.shape[9] == 1:\n        return nums[0]\n    if nums.shape[10] == 1:\n        return nums[0]\n    if nums.shape[11] == 1:\n        return nums[0]\n    if nums.shape[12] == 1:\n        return nums[0]\n    if nums.shape[13] == 1:\n        return nums[0]\n    if nums.shape[14] == 1:\n        return nums[0]\n    if nums.shape[15] == 1:\n        return nums[0]\n    if nums.shape[16] == 1:\n        return nums[0]\n    if nums.shape[17] == 1:\n        return nums[0]\n    if nums.shape[18] == 1:\n        return", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0]!= nums.shape[1]:\n        raise ValueError(\"nums must be of the same shape\")\n    if nums.shape[0] == nums.shape[1]:\n        return sum(nums)\n    else:\n        return min(min(nums) for num in nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # First, find the minimum sum of all non-empty sub-arrays.\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i] not in nums:\n            minSum += nums[i]\n    return minSum\n\n    # Second, find the minimum sum of all non-empty sub-arrays that are not\n    # empty.\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i] not in nums:\n            minSum += nums[i]\n    return minSum\n\n    # Third, find the minimum sum of all non-empty sub-arrays that are not\n    # empty and not empty.\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i] not in nums:\n            minSum += nums[i]\n    return minSum\n\n    # Fourth, find the minimum sum of all non-empty sub-arrays that are not\n    # empty and not empty and not empty.\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i] not in nums:\n            minSum += nums[i]\n    return minSum\n\n    # Finally, find the minimum sum of all non-empty sub-arrays that are not\n    # empty and not empty and not empty.\n    min", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            minSum += nums[i]\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if len(nums) == 0:\n        return 0\n    if nums[0] == 0:\n        return 0\n    if nums[1] == 0:\n        return 0\n    if nums[2] == 0:\n        return 0\n    if nums[3] == 0:\n        return 0\n    return sum([sum(n) for n in nums if n!= 0])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(nums, key=lambda x: x[1])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0]!= nums.shape[1]:\n        return 0\n    if nums.shape[0] == nums.shape[1]:\n        return sum(nums)\n    else:\n        return min(min(nums) for nums in minSubArraySum(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= nums.shape[1]:\n        raise ValueError(\"nums must be an array of shape (%d, %d)\" % (nums.shape[0], nums.shape[1]))\n    if nums.shape[0] == nums.shape[1]:\n        return sum(nums)\n    else:\n        return min([sum(x) for x in nums])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0]!= nums.shape[1]:\n        raise ValueError(\"nums must be a non-empty array\")\n    if nums.shape[0]!= nums.shape[2]:\n        raise ValueError(\"nums must be a non-empty array\")\n    if nums.shape[1]!= nums.shape[3]:\n        raise ValueError(\"nums must be a non-empty array\")\n    if nums.shape[2]!= nums.shape[4]:\n        raise ValueError(\"nums must be a non-empty array\")\n    if nums.shape[3]!= nums.shape[5]:\n        raise ValueError(\"nums must be a non-empty array\")\n    return min(sum([sum(i) for i in nums]) for i in nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[0] == nums[1]:\n        return\n    if nums[1] == nums[2]:\n        return\n    if nums[2] == nums[3]:\n        return\n    if nums[0] == nums[1]:\n        return\n    if nums[1] == nums[2]:\n        return\n    if nums[2] == nums[3]:\n        return\n    if nums[0] == nums[1]:\n        return\n    if nums[1] == nums[2]:\n        return\n    if nums[2] == nums[3]:\n        return\n    if nums[0] == nums[1]:\n        return\n    if nums[1] == nums[2]:\n        return\n    if nums[2] == nums[3]:\n        return\n    if nums[0] == nums[1]:\n        return\n    if nums[1] == nums[2]:\n        return\n    if nums[2] == nums[3]:\n        return\n    if nums[0] == nums[1]:\n        return\n    if nums[1] == nums[2]:\n        return\n    if nums", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i] not in nums or nums[i] == 0:\n            continue\n        if nums[i] not in nums or nums[i] == 0:\n            minSum += nums[i]\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(min(nums), 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            minSum += nums[i]\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0] == 1:\n        return nums[0]\n    if nums.shape[1] == 1:\n        return nums[1]\n    if nums.shape[2] == 1:\n        return nums[2]\n    if nums.shape[3] == 1:\n        return nums[3]\n    if nums.shape[4] == 1:\n        return nums[4]\n    return 0", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[1]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[2]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[3]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[4]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[5]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[6]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[7]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[8]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[9]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[10]!= 2:\n        raise ValueError(\"nums must", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # find the minimum sum of all non-empty sub-arrays\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i] not in nums:\n            minSum += nums[i]\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(nums, key=lambda x: x[0])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(min(nums), 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if len(nums) == 0:\n        return 0\n    if nums[0] == 0:\n        return 0\n    if nums[1] == 0:\n        return 0\n    if nums[2] == 0:\n        return 0\n    if nums[3] == 0:\n        return 0\n    return min([sum(nums) for nums in range(len(nums))])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Create a list of all the non-empty sub-arrays of nums\n    numsList = []\n    for i in range(len(nums)):\n        numsList.append(nums[i])\n    # Find the minimum sum of all the non-empty sub-arrays\n    minSum = 0\n    for i in range(len(numsList)):\n        if numsList[i] not in numsList:\n            minSum = min(minSum, minSubArraySum(numsList[i]))\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i] not in nums:\n            minSum += nums[i]\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # First, find the minimum sum of all non-empty sub-arrays\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i] not in nums[i+1:] or nums[i] not in nums[i+2:] or nums[i] not in nums[i+3:] or nums[i] not in nums[i+4:] or nums[i] not in nums[i+5:] or nums[i] not in nums[i+6:] or nums[i] not in nums[i+7:] or nums[i] not in nums[i+8:] or nums[i] not in nums[i+9:] or nums[i] not in nums[i+10] or nums[i] not in nums[i+11:] or nums[i] not in nums[i+12:] or nums[i] not in nums[i+13:] or nums[i] not in nums[i+14:] or nums[i] not in nums[i+15:] or nums[i] not in nums[i+16:] or nums[i] not in nums[i+17:] or nums[i] not in nums[i+18:] or nums[i] not in nums[i+19:] or nums[i] not in nums[i+20:] or nums[i] not in nums[i+21:] or num", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0] == 1:\n        return\n    if nums.shape[1] == 1:\n        return\n    if nums.shape[2] == 1:\n        return\n    if nums.shape[3] == 1:\n        return\n    if nums.shape[4] == 1:\n        return\n    if nums.shape[5] == 1:\n        return\n    if nums.shape[6] == 1:\n        return\n    if nums.shape[7] == 1:\n        return\n    if nums.shape[8] == 1:\n        return\n    if nums.shape[9] == 1:\n        return\n    if nums.shape[10] == 1:\n        return\n    if nums.shape[11] == 1:\n        return\n    if nums.shape[12] == 1:\n        return\n    if nums.shape[13] == 1:\n        return\n    if nums.shape[14] == 1:\n        return\n    if nums.shape[15] == 1:\n        return\n    if nums.shape[16] == 1:\n        return\n    if nums.shape[17] == 1:\n        return\n    if nums.shape[18] == 1:\n        return\n    if nums.shape[19] == 1:\n        return\n    if nums.shape[20] == 1:\n        return\n    if nums.shape[21] == 1:\n        return", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # First, find the minimum sum of all non-empty sub-arrays\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i] not in nums:\n            continue\n        if nums[i] not in nums[i + 1:]:\n            continue\n        if nums[i] not in nums[i + 2:]:\n            continue\n        if nums[i] not in nums[i + 3:]:\n            continue\n        minSum += nums[i]\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Create a list of all non-empty sub-arrays\n    nums = list(set(nums))\n    # Create a list of all non-empty subarrays\n    nums = list(set(nums) - set([-1, -2, -3]))\n    # Create a list of all non-empty subarrays\n    nums = list(set(nums) - set([-1, -2, -3]) - set([-1, -2, -3]))\n    # Create a list of all non-empty subarrays\n    nums = list(set(nums) - set([-1, -2, -3]) - set([-1, -2, -3]))\n    # Create a list of all non-empty subarrays\n    nums = list(set(nums) - set([-1, -2, -3]) - set([-1, -2, -3]) - set([-1, -2, -3]))\n    # Create a list of all non-empty subarrays\n    nums = list(set(nums) - set([-1, -2, -3]) - set([-1, -2, -3]) - set([-1, -2, -3]))\n    # Create", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if len(nums) == 0:\n        return 0\n    if nums[0] == 0:\n        return 0\n    if nums[1] == 0:\n        return 0\n    if nums[2] == 0:\n        return 0\n    if nums[3] == 0:\n        return 0\n    if nums[4] == 0:\n        return 0\n    if nums[5] == 0:\n        return 0\n    if nums[6] == 0:\n        return 0\n    return min([sum(i) for i in nums if i!= 0])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape))\n    if nums.shape[1]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape))\n    if nums.shape[2]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape))\n    if nums.shape[3]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape))\n    if nums.shape[4]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape))\n    if nums.shape[5]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" %", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(min(nums), 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    if nums[0] == nums[1]:\n        return 0\n    if nums[0] == nums[2]:\n        return 1\n    if nums[0] == nums[3]:\n        return -6\n    return min([sum(num) for num in nums])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[1]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[2]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[3]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[4]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[5]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[6]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[7]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[8]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[9]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[10]!= 2:\n        raise ValueError(\"nums", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            continue\n        if nums[i] > 0:\n            minSum += nums[i]\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(min(nums), minSubArraySum(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[1]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[2]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[3]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    if nums.shape[4]!= 2:\n        raise ValueError(\"nums must be a 2D array\")\n    return min(nums.min(), nums.max())", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i] not in nums:\n            minSum += nums[i]\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min([sum(n) for n in nums])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= 1:\n        raise ValueError(\"nums must be an array of integers\")\n    if nums.shape[1]!= 2:\n        raise ValueError(\"nums must be an array of integers\")\n    if nums.shape[2]!= 3:\n        raise ValueError(\"nums must be an array of integers\")\n    if nums.shape[3]!= 4:\n        raise ValueError(\"nums must be an array of integers\")\n    if nums.shape[4]!= 1:\n        raise ValueError(\"nums must be an array of integers\")\n    if nums.shape[5]!= 2:\n        raise ValueError(\"nums must be an array of integers\")\n    if nums.shape[6]!= 3:\n        raise ValueError(\"nums must be an array of integers\")\n    if nums.shape[7]!= 4:\n        raise ValueError(\"nums must be an array of integers\")\n    if nums.shape[8]!= 1:\n        raise ValueError(\"nums must be an array of integers\")\n    if nums.shape[9]!= 2:\n        raise ValueError(\"nums must be an array of integers\")\n    if nums.shape[10]!", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0]!= nums.shape[1]:\n        raise ValueError('nums must be a non-empty array')\n    if nums.shape[0] == nums.shape[1]:\n        return sum(nums)\n    else:\n        return min([sum(num) for num in nums])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape[0]))\n    if nums.shape[1]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape[1]))\n    if nums.shape[2]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape[2]))\n    if nums.shape[3]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape[3]))\n    return min(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4][-1] == 0:\n        return\n    if nums[4][-2] == 0:\n        return\n    if nums[4][-3] == 0:\n        return\n    if nums[4][-4] == 0:\n        return\n    if nums[4][-5] == 0:\n        return\n    if nums[4][-6] == 0:\n        return\n    if nums[4][-7] == 0:\n        return\n    if nums[4][-8] == 0:\n        return\n    if nums[4][-9] == 0:\n        return\n    if nums[4][-10] == 0:\n        return\n    if nums[4][-11] == 0:\n        return\n    if nums[4][-12] == 0:\n        return\n    if nums[4][-13] == 0:\n        return\n    if nums[4][-14] == 0:\n        return\n    if nums[4][-15] == 0:\n        return\n    if nums[4][-16] == 0:\n        return\n    if nums[4][-17] == 0:\n        return", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    else:\n        return min(nums, key=lambda x: x[0])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Find the minimum sum of all non-empty sub-arrays\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i] not in nums:\n            continue\n        if nums[i] not in nums[i + 1:]:\n            continue\n        if nums[i] not in nums[i + 2:]:\n            continue\n        if nums[i] not in nums[i + 3:]:\n            continue\n        if nums[i] not in nums[i + 4:]:\n            continue\n        minSum += nums[i]\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0]!= len(nums):\n        return 0\n    if nums.shape[1]!= len(nums):\n        return 0\n    if nums.shape[2]!= len(nums):\n        return 0\n    return sum([sum(x) for x in nums])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0]!= 2:\n        raise ValueError(\"nums must be a 2-tuple\")\n    if nums.shape[1]!= 2:\n        raise ValueError(\"nums must be a 2-tuple\")\n    if nums.shape[2]!= 2:\n        raise ValueError(\"nums must be a 2-tuple\")\n    if nums.shape[3]!= 2:\n        raise ValueError(\"nums must be a 2-tuple\")\n    if nums.shape[4]!= 2:\n        raise ValueError(\"nums must be a 2-tuple\")\n    if nums.shape[5]!= 2:\n        raise ValueError(\"nums must be a 2-tuple\")\n    if nums.shape[6]!= 2:\n        raise ValueError(\"nums must be a 2-tuple\")\n    if nums.shape[7]!= 2:\n        raise ValueError(\"nums must be a 2-tuple\")\n    if nums.shape[8]!= 2:\n        raise ValueError(\"nums must be a 2-tuple\")\n    if nums.shape[9]!= 2:\n        raise ValueError(\"nums must be a 2-tuple\")\n    if nums.shape[10]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum = 0\n    for num in nums:\n        if num is not None:\n            if num not in minSum:\n                minSum = num\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(min(nums), minSubArraySum(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 0:\n        return\n    if nums.shape[0] == 1:\n        return\n    if nums.shape[1] == 1:\n        return\n    if nums.shape[2] == 1:\n        return\n    if nums.shape[3] == 1:\n        return\n    if nums.shape[4] == 1:\n        return\n    if nums.shape[5] == 1:\n        return\n    if nums.shape[6] == 1:\n        return\n    if nums.shape[7] == 1:\n        return\n    if nums.shape[8] == 1:\n        return\n    if nums.shape[9] == 1:\n        return\n    if nums.shape[10] == 1:\n        return\n    if nums.shape[11] == 1:\n        return\n    if nums.shape[12] == 1:\n        return\n    if nums.shape[13] == 1:\n        return\n    if nums.shape[14] == 1:\n        return\n    if nums.shape[15] == 1:\n        return\n    if nums.shape[16] == 1:\n        return\n    if nums.shape[17] == 1:\n        return\n    if nums.shape[18] == 1:\n        return\n    if nums.shape[19] == 1:\n        return\n    if nums.shape[20] == 1:\n        return\n    if", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(min(nums), minSubArraySum(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= len(nums):\n        raise ValueError(\"nums must be a list of length %d, but is %d.\" % (len(nums), nums.shape[0]))\n    if nums.shape[1]!= len(nums):\n        raise ValueError(\"nums must be a list of length %d, but is %d.\" % (len(nums), nums.shape[1]))\n    if nums.shape[2]!= len(nums):\n        raise ValueError(\"nums must be a list of length %d, but is %d.\" % (len(nums), nums.shape[2]))\n    if nums.shape[3]!= len(nums):\n        raise ValueError(\"nums must be a list of length %d, but is %d.\" % (len(nums), nums.shape[3]))\n    return min(nums)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape))\n    if nums.shape[1]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape))\n    if nums.shape[2]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape))\n    if nums.shape[3]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape))\n    if nums.shape[4]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape))\n    return sum(nums for num in nums if num!= 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # If nums is empty, return None\n    if nums is None:\n        return None\n    # If nums is not a list, return None\n    if isinstance(nums, list):\n        return None\n    # If nums is not a tuple, return None\n    if isinstance(nums, tuple):\n        return None\n    # If nums is not a list of tuples, return None\n    if isinstance(nums, list(tuple)):\n        return None\n    # If nums is not a list of lists, return None\n    if isinstance(nums, list(list(tuple))):\n        return None\n    # If nums is not a list of lists of tuples, return None\n    if isinstance(nums, list(list(tuple))):\n        return None\n    # If nums is not a list of lists of tuples, return None\n    if isinstance(nums, list(list(tuple))):\n        return None\n    # If nums is not a list of lists of tuples, return None\n    if isinstance(nums, list(list(tuple))):\n        return None\n    # If nums is not a list of lists of tuples, return None\n    if isinstance(nums, list(list(tuple", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(min(nums), 0)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if num", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0] == 1:\n        return\n    if nums.shape[1] == 1:\n        return\n    if nums.shape[2] == 1:\n        return\n    if nums.shape[3] == 1:\n        return\n    if nums.shape[4] == 1:\n        return\n    if nums.shape[5] == 1:\n        return\n    if nums.shape[6] == 1:\n        return\n    if nums.shape[7] == 1:\n        return\n    if nums.shape[8] == 1:\n        return\n    if nums.shape[9] == 1:\n        return\n    if nums.shape[10] == 1:\n        return\n    if nums.shape[11] == 1:\n        return\n    if nums.shape[12] == 1:\n        return\n    if nums.shape[13] == 1:\n        return\n    if nums.shape[14] == 1:\n        return\n    if nums.shape[15] == 1:\n        return\n    if nums.shape[16] == 1:\n        return\n    if nums.shape[17] == 1:\n        return\n    if nums.shape[18] == 1:\n        return\n    if nums.shape[19] == 1:\n        return\n    if nums.shape[20] == 1:\n        return\n    if nums.shape[21] == 1:\n        return", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0]!= nums.shape[1]:\n        raise ValueError(\"nums must be an array of length %d, but is %d\" % (nums.shape[0], nums.shape[1]))\n    if nums.shape[0] == nums.shape[1]:\n        return sum(nums)\n    else:\n        return min([sum(n) for n in nums])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0]!= 2:\n        raise ValueError('nums must be a 2-d array')\n    if nums.shape[1]!= 2:\n        raise ValueError('nums must be a 2-d array')\n    if nums.shape[2]!= 2:\n        raise ValueError('nums must be a 2-d array')\n    if nums.shape[3]!= 2:\n        raise ValueError('nums must be a 2-d array')\n    if nums.shape[4]!= 2:\n        raise ValueError('nums must be a 2-d array')\n    if nums.shape[5]!= 2:\n        raise ValueError('nums must be a 2-d array')\n    if nums.shape[6]!= 2:\n        raise ValueError('nums must be a 2-d array')\n    if nums.shape[7]!= 2:\n        raise ValueError('nums must be a 2-d array')\n    if nums.shape[8]!= 2:\n        raise ValueError('nums must be a 2-d array')\n    if nums.shape[9]!= 2:\n        raise ValueError('nums must be a 2-d array')\n    if nums.shape[10]", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0] == 1:\n        return nums[0]\n    if nums.shape[1] == 1:\n        return nums[1]\n    if nums.shape[2] == 1:\n        return nums[2]\n    if nums.shape[3] == 1:\n        return nums[3]\n    if nums.shape[4] == 1:\n        return nums[4]\n    if nums.shape[5] == 1:\n        return nums[5]\n    if nums.shape[6] == 1:\n        return nums[6]\n    if nums.shape[7] == 1:\n        return nums[7]\n    if nums.shape[8] == 1:\n        return nums[8]\n    if nums.shape[9] == 1:\n        return nums[9]\n    if nums.shape[10] == 1:\n        return nums[10]\n    if nums.shape[11] == 1:\n        return nums[11]\n    if nums.shape[12] == 1:\n        return nums[12]\n    if nums.shape[13] == 1:\n        return nums[13]\n    if nums.shape[14] == 1:\n        return nums[14]\n    if nums.shape[15] == 1:\n        return nums[15]\n    if nums.shape[16] == 1:\n        return nums[16]\n    if nums.shape[17] == 1:", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i] not in nums:\n            minSum += nums[i]\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= 2:\n        raise ValueError(\"nums must be a 2-tuple\")\n    if nums.shape[1]!= 2:\n        raise ValueError(\"nums must be a 2-tuple\")\n    if nums.shape[2]!= 2:\n        raise ValueError(\"nums must be a 2-tuple\")\n    if nums.shape[3]!= 2:\n        raise ValueError(\"nums must be a 2-tuple\")\n    if nums.shape[4]!= 2:\n        raise ValueError(\"nums must be a 2-tuple\")\n    if nums.shape[5]!= 2:\n        raise ValueError(\"nums must be a 2-tuple\")\n    if nums.shape[6]!= 2:\n        raise ValueError(\"nums must be a 2-tuple\")\n    if nums.shape[7]!= 2:\n        raise ValueError(\"nums must be a 2-tuple\")\n    if nums.shape[8]!= 2:\n        raise ValueError(\"nums must be a 2-tuple\")\n    if nums.shape[9]!= 2:\n        raise ValueError(\"nums must be a 2-tuple\")\n    if nums.shape[10]!", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0]!= len(nums):\n        return 0\n    if nums.shape[1]!= len(nums):\n        return 0\n    if nums.shape[2]!= len(nums):\n        return 0\n    if nums.shape[3]!= len(nums):\n        return 0\n    if nums.shape[4]!= len(nums):\n        return 0\n    if nums.shape[5]!= len(nums):\n        return 0\n    if nums.shape[6]!= len(nums):\n        return 0\n    if nums.shape[7]!= len(nums):\n        return 0\n    if nums.shape[8]!= len(nums):\n        return 0\n    if nums.shape[9]!= len(nums):\n        return 0\n    if nums.shape[10]!= len(nums):\n        return 0\n    if nums.shape[11]!= len(nums):\n        return 0\n    if nums.shape[12]!= len(nums):\n        return 0\n    if nums.shape[13]!= len(nums", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(min(nums), minSubArraySum(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if len(nums) == 0:\n        return\n    if nums[0] == 0:\n        return\n    if nums[1] == 0:\n        return\n    if nums[2] == 0:\n        return\n    if nums[3] == 0:\n        return\n    if nums[4] == 0:\n        return\n    if nums[5] == 0:\n        return\n    if nums[6] == 0:\n        return\n    if nums[7] == 0:\n        return\n    if nums[8] == 0:\n        return\n    if nums[9] == 0:\n        return\n    if nums[10] == 0:\n        return\n    if nums[11] == 0:\n        return\n    if nums[12] == 0:\n        return\n    if nums[13] == 0:\n        return\n    if nums[14] == 0:\n        return\n    if nums[15] == 0:\n        return\n    if nums[16] == 0:\n        return\n    if nums[17] == 0:\n        return\n    if nums[18] == 0:\n        return\n    if nums[19] == 0:\n        return\n    if nums[20] == 0:\n        return\n    if nums[21] == 0:\n        return\n    if nums[22] == 0:\n        return\n    if nums[23] == 0:\n        return\n    if nums[24] == 0:\n        return\n    if nums[25] == 0:\n        return\n    if num", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if len(nums) == 0:\n        return 0\n    if nums[0] == nums[1]:\n        return 0\n    if nums[2] == nums[3]:\n        return 0\n    if nums[3] == nums[4]:\n        return 0\n    if nums[4] == nums[5]:\n        return 0\n    if nums[5] == nums[6]:\n        return 0\n    if nums[6] == nums[7]:\n        return 0\n    if nums[7] == nums[8]:\n        return 0\n    if nums[8] == nums[9]:\n        return 0\n    if nums[9] == nums[10]:\n        return 0\n    if nums[10] == nums[11]:\n        return 0\n    if nums[11] == nums[12]:\n        return 0\n    if nums[12] == nums[13]:\n        return 0\n    if nums[13] == nums[14]:\n        return 0\n    if nums[14] == nums[15]:\n        return 0\n    if nums[15] == nums[16]:\n        return 0\n    if nums[16] == nums[17]:\n        return 0\n    if nums[17] == nums[18]:\n        return 0\n    if nums[18] == nums[19]:\n        return 0\n    if", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0] == 1:\n        return nums[0]\n    if nums.shape[1] == 1:\n        return nums[1]\n    if nums.shape[2] == 1:\n        return nums[2]\n    if nums.shape[3] == 1:\n        return nums[3]\n    if nums.shape[4] == 1:\n        return nums[4]\n    if nums.shape[5] == 1:\n        return nums[5]\n    if nums.shape[6] == 1:\n        return nums[6]\n    if nums.shape[7] == 1:\n        return nums[7]\n    if nums.shape[8] == 1:\n        return nums[8]\n    if nums.shape[9] == 1:\n        return nums[9]\n    if nums.shape[10] == 1:\n        return nums[10]\n    if nums.shape[11] == 1:\n        return nums[11]\n    if nums.shape[12] == 1:\n        return nums[12]\n    if nums.shape[13] == 1:\n        return nums[13]\n    if nums.shape[14] == 1:\n        return nums[14]\n    if nums.shape[15] == 1:\n        return nums[15]\n    if nums.shape[16] == 1:\n        return nums[16]\n    if nums.shape[17] == 1:", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum = 0\n    for num in nums:\n        if num is not None:\n            if num[0]!= 0:\n                minSum += num[1]\n            else:\n                minSum += num[0]\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= nums.shape[1]:\n        raise ValueError(\"nums must be a non-empty array\")\n    if nums.shape[0]!= nums.shape[2]:\n        raise ValueError(\"nums must be a non-empty array\")\n    if nums.shape[1]!= nums.shape[3]:\n        raise ValueError(\"nums must be a non-empty array\")\n    if nums.shape[2]!= nums.shape[4]:\n        raise ValueError(\"nums must be a non-empty array\")\n    if nums.shape[3]!= nums.shape[5]:\n        raise ValueError(\"nums must be a non-empty array\")\n    if nums.shape[4]!= nums.shape[6]:\n        raise ValueError(\"nums must be a non-empty array\")\n    if nums.shape[5]!= nums.shape[7]:\n        raise ValueError(\"nums must be a non-empty array\")\n    if nums.shape[6]!= nums.shape[8]:\n        raise ValueError(\"nums must be a non-empty array\")\n    if nums.shape[7]!= nums.shape[9]:", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if len(nums) == 0:\n        return 0\n    if nums[0] == 0:\n        return 0\n    if nums[1] == 0:\n        return 0\n    if nums[2] == 0:\n        return 0\n    if nums[3] == 0:\n        return 0\n    if nums[4] == 0:\n        return 0\n    if nums[5] == 0:\n        return 0\n    return min([sum(i) for i in nums if i])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # This is a hack to make the code more readable\n    if nums is None:\n        return\n    if nums.shape[0]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape))\n    if nums.shape[1]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape))\n    if nums.shape[2]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape))\n    if nums.shape[3]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape))\n    if nums.shape[4]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, got %d\" % (len(nums), nums.shape))\n    if nums.shape[5]!= len(nums):\n        raise ValueError(\"num", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum = 0\n    for num in nums:\n        if num not in (0, -1, -2, -3):\n            minSum += num\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0]!= len(nums):\n        raise ValueError(\"nums must be a list of length %d, got %d\" % (len(nums), nums.shape[0]))\n    if nums.shape[1]!= len(nums):\n        raise ValueError(\"nums must be a list of length %d, got %d\" % (len(nums), nums.shape[1]))\n    if nums.shape[2]!= len(nums):\n        raise ValueError(\"nums must be a list of length %d, got %d\" % (len(nums), nums.shape[2]))\n    if nums.shape[3]!= len(nums):\n        raise ValueError(\"nums must be a list of length %d, got %d\" % (len(nums), nums.shape[3]))\n    if nums.shape[4]!= len(nums):\n        raise ValueError(\"nums must be a list of length %d, got %d\" % (len(nums), nums.shape[4]))\n    return min(nums, key=lambda x: x.sum())", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(min(nums), sum(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, but is %d.\" % (len(nums), nums.shape[0]))\n    if nums.shape[1]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, but is %d.\" % (len(nums), nums.shape[1]))\n    if nums.shape[2]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, but is %d.\" % (len(nums), nums.shape[2]))\n    if nums.shape[3]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, but is %d.\" % (len(nums), nums.shape[3]))\n    if nums.shape[4]!= len(nums):\n        raise ValueError(\"nums must be an array of length %d, but is %d.\" % (len(nums), nums.shape[4]))\n    if nums.shape[5]!= len(nums", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(nums, key=lambda x: x.sum())", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if len(nums) == 0:\n        return 0\n    if nums[0] == 0:\n        return 0\n    if nums[1] == 0:\n        return 0\n    if nums[2] == 0:\n        return 0\n    if nums[3] == 0:\n        return 0\n    if nums[4] == 0:\n        return 0\n    return min([sum(i) for i in nums])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if len(nums) == 0:\n        return 0\n    if nums[0] == 0:\n        return 0\n    if nums[1] == 0:\n        return 0\n    if nums[2] == 0:\n        return 0\n    if nums[3] == 0:\n        return 0\n    if nums[4] == 0:\n        return 0\n    return min([sum(i) for i in nums])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0]!= 2:\n        raise ValueError(\"nums must be an array of integers\")\n    if nums.shape[1]!= 2:\n        raise ValueError(\"nums must be an array of integers\")\n    if nums.shape[2]!= 2:\n        raise ValueError(\"nums must be an array of integers\")\n    if nums.shape[3]!= 2:\n        raise ValueError(\"nums must be an array of integers\")\n    if nums.shape[4]!= 2:\n        raise ValueError(\"nums must be an array of integers\")\n    if nums.shape[5]!= 2:\n        raise ValueError(\"nums must be an array of integers\")\n    if nums.shape[6]!= 2:\n        raise ValueError(\"nums must be an array of integers\")\n    if nums.shape[7]!= 2:\n        raise ValueError(\"nums must be an array of integers\")\n    if nums.shape[8]!= 2:\n        raise ValueError(\"nums must be an array of integers\")\n    if nums.shape[9]!= 2:\n        raise ValueError(\"nums must be an array of integers\")\n    if nums.shape[10]!", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0]!= nums.shape[1]:\n        raise ValueError(\"nums must be an array of shape (%d, %d)\" %\n                             (nums.shape[0], nums.shape[1]))\n    if nums.shape[0] == nums.shape[1]:\n        return sum(nums)\n    else:\n        return min(nums, key=lambda x: x.sum())", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(min(nums), min(nums) + 1)", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0]!= 2:\n        return 0\n    if nums.shape[1]!= 2:\n        return 0\n    if nums.shape[2]!= 2:\n        return 0\n    if nums.shape[3]!= 2:\n        return 0\n    if nums.shape[4]!= 2:\n        return 0\n    if nums.shape[5]!= 2:\n        return 0\n    if nums.shape[6]!= 2:\n        return 0\n    if nums.shape[7]!= 2:\n        return 0\n    if nums.shape[8]!= 2:\n        return 0\n    if nums.shape[9]!= 2:\n        return 0\n    if nums.shape[10]!= 2:\n        return 0\n    if nums.shape[11]!= 2:\n        return 0\n    if nums.shape[12]!= 2:\n        return 0\n    if nums.shape[13]!= 2:\n        return 0\n    if nums.shape[14]!= 2:\n        return 0\n    if nums.shape[15]!= 2:\n        return 0\n    if nums.shape[16]!= 2:\n        return 0\n    if nums.shape[17]!= 2:\n        return 0\n    if nums.shape[18]!= 2:", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum = 0\n    for num in nums:\n        if num not in [0, 1, 2, 3, 4, -1, -2, -3:]:\n            minSum += num\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i] not in nums:\n            minSum += nums[i]\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    minSum = 0\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            minSum += nums[i]\n    return minSum", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if len(nums) == 0:\n        return 0\n    if nums[0] == 0:\n        return 0\n    if nums[1] == 0:\n        return 0\n    if nums[2] == 0:\n        return 0\n    if nums[3] == 0:\n        return 0\n    if nums[4] == 0:\n        return 0\n    return sum([sum(i) for i in nums if i!= 0])", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(min(nums), sum(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(min(nums), minSubArraySum(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(min(nums), minSubArraySum(nums))", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if nums is None:\n        return 0\n    if nums.shape[0] == 1:\n        return nums[0]\n    else:\n        return min(nums, key=lambda x: x.sum())", "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    if nums[0] == nums[1]:\n        return 0\n    if nums[2] == nums[3]:\n        return 0\n    if nums[4] == nums[5]:\n        return 0\n    if nums[6] == nums[7]:\n        return 0\n    if nums[8] == nums[9]:\n        return 0\n    if nums[10] == nums[11] and nums[12] == nums[13]:\n        return 0\n    if nums[12] == nums[13] and nums[14] == nums[15]:\n        return 0\n    if nums[15] == nums[16] and nums[17] == nums[18]:\n        return 0\n    if nums[18] == nums[19] and nums[20] == nums[21]:\n        return 0\n    if nums[21] == nums[22] and nums[23] == nums[24]:\n        return 0\n    if nums[24] == nums[25] and nums[26] == nums[27]:\n        return 0\n    if nums[27] == nums[28] and nums[29] == nums[30]:\n        return 0\n    if nums[30] == nums[31] and nums[32] == nums[33]:\n        return 0\n    if nums[33] == nums[34] and nums["]]