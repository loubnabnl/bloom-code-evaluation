[["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    #-----------------------------\n    # Return maximum number of characters\n    #-----------------------------\n    max = 1\n    count = 0\n    for word in words:\n        max = max * len(word)\n        count = count + 1\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(words, key=lambda w: w[len(w)-1])[len(w)-1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 1\n    while len(words) > max:\n        max = len(words) - 1\n    return words[max:]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # returns a string which contains all letters of a word\n    first = \"\"\n    for i in range(len(words)):\n        first = first + words[i]\n\n    # compare the first position with the list\n    first_low = len(first)\n    while (first_low < len(words)):\n        first_low += 1\n\n    # compare the last position with the list\n    last_low = len(first)\n    while (last_low > 0):\n        last_low -= 1\n\n    # return the maximum value\n    return first_low + 1", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        word = word.lower()\n        if len(word) > 1 and word[0] == \"\":\n            word = word[1:]\n        if word not in _max_words:\n            _max_words.append(word)\n\n    return _max_words[0]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    result = \"\"\n    for word in words:\n        result += word.upper().replace(' ', '') if word else word\n    return result", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = words.split()\n    for word in words:\n        if len(word) == 0:\n            continue\n        if len(word) == 1:\n            return word[0]\n        if len(word) > 1:\n            return find_max([word[1]])\n\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = [ str(w) for w in words if len(w) > 1 ]\n    max_word = words[0]\n    for w in words:\n        if w!= max_word:\n            max_word = w\n\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Add some magic\n    words = [\"bzzzzzzzzzzzz\",\"bzzzzzzzzzz\",\"bzzzzzzzzzz\"]\n    # is only needed if len(words) > 1\n    words = words[:-1]\n\n    # Try to find the max from the list\n    i = 0\n    while i < len(words):\n        # Must be at least one word to start\n        if i > 0:\n            break\n        # Get the word from the list\n        words[i] = words[i-1:]\n\n        # If the word has the maximum number of characters\n        # get the first word from the list\n        if len(words) >= i:\n            return words[i]\n        # Otherwise\n        else:\n            # Check if the word has the maximum number of characters\n            # First add it to the list and check if it has the maximum number\n            # of characters\n            # Otherwise, find the max from the list\n            while i < len(words) and words[i] > words[i-1]:\n                words[i] = words[i-1:]\n\n    return words[0].lower()\n\n    # This function is from the same module, but does not contain any\n    # magic. It returns the first word in lexicographical order.\n    # Also returns the result as a string.", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return words[len(words)-1].replace(\" \",\"\")", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    words = [word for word in words if len(word) > max]\n    for word in words:\n        max = max + 1\n    return words[max]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    result = \"\"\n    for word in words:\n        result += word + 1\n    return result", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        for n in word:\n            if n == max:\n                max = len(word)\n                return word\n    return word[:max]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    words = words[:]\n    words.sort()\n    word = words[0]\n    while word in words:\n        word = word[1:]\n    return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Case insensitive version of word.upper()\n    # case-insensitive version of word.lower()\n    word = words[0]\n\n    # If it is a letter and not a number, use that letter\n    if word in [\"a\", \"b\", \"e\", \"f\", \"g\", \"h\"]:\n        return word\n\n    # Otherwise use the first letter, but don't bother with the rest\n    else:\n        return word[1:].upper()\n\n    # If there are multiple letters, use the first one\n    if len(words) > 1:\n        return find_max(words[1:])\n\n    # If there are no words, return the first word\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    else:\n        return words[-1]\n\n    #Sort by name\n    words = sorted(words, key=lambda word: word.count(' '))\n    return words[-1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = \"\"\n    for word in words:\n        if word not in max:\n            max += word\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    count = 0\n    for word in words:\n        count += 1\n        if count > word.count(' '):\n            word = word[:word.count(' ')]\n    return word[word.count(' '):]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = [word for word in words]\n    for word in words:\n        if len(word) == len(word.split()):\n            return word[:-1].lower()\n    return \"\".join(word.lower() for word in words)</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_num = 0\n    words = words.split(' ')\n    for word in words:\n        if word in words and len(word) > max_num:\n            max_num = len(word)\n        else:\n            max_num = 0\n    return max_num", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    maxlen = 0\n    for word in words:\n        if word in (' ', '\\v', '\\t', '\\\\n'):\n            maxlen = max(maxlen, len(word))\n            continue\n        if maxlen > word:\n            maxlen = word\n    return maxlen", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if word not in words:\n            raise ValueError(\"Couldn't find word %s, not in list\" % word)\n        n = len(word)\n        if n > max_n_character:\n            max_n_character = n\n\n    return words[max_n_character]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    elif len(words) == 1:\n        return words[0]\n    else:\n        return \"\".join([ find_max([ i]) for i in words ])", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    else:\n        return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    result = \"\"\n    for word in words:\n        for count in word.count(\"-\"):\n            if count == 0:\n                continue\n            result += word[:count] + \"-\" + word[count:] + \"+\"\n    return result.upper()", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_len = 0\n    for word in words:\n        max_len = max(max_len, len(word))\n\n    return words[max_len:]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # TODO(gta): make sure this works in all languages\n    if len(words) == 0:\n        raise ValueError(\"Could not find word with maximum number of unique characters.\")\n\n    words = [word for word in words if len(word) > 0]\n    # TODO(gta): make sure this works in all languages\n    for i in range(len(words)):\n        if len(words[i]) > 1:\n            raise ValueError(\"The maximum number of characters for the word \" + words[i] + \" is too high.\")\n        else:\n            if i == len(words):\n                return words[0]\n            else:\n                return find_max([words[i][1::]])\n\n    # TODO(gta): make sure this works in all languages\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = [w for w in words if len(w) > 0]\n    if len(words) == 1 and len(words[0]) == 1:\n        return words[0]\n\n    return find_max(words)[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    num = 0\n    for word in words:\n        if word not in words:\n            num += 1\n    return num", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word = ''\n    for i in words:\n        if len(i) > 1:\n            word = word +''\n        else:\n            word += i\n    return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = \"\"\n    for word in words:\n        if word.upper() not in max.upper():\n            max = word\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return \"\".join([\n        c for c in words if len(c) >= len(words[-1]) + 1\n    ])\n\n    def find(words, max):\n        for c in words:\n            if max and c <= max:\n                return c\n\n    def find_max_count(words):\n        max_count = 0\n        for c in words:\n            max_count += 1\n            if max_count >= max:\n                return c\n\n        return \"\"\n\n    def find_all(words):\n        return sorted(find(words, max))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = sorted(words, key=lambda word: len(word))\n    max = None\n    while len(words) > 1:\n        max = words[0]\n        words = list(zip(words, list(words[1:])))\n    return max\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Keep the length of the list of words, so that it can be modified later\n    length = len(words)\n    while length > 1:\n        next_length = length - 1\n        while next_length > 0:\n            next_word = words[next_length - 1]\n            next_length -= 1\n            # Count the number of unique characters in the word\n            unique_chars = 1\n            while next_word and next_word!= words[length - 1] and \\\n                   words[length - 1]!= words[length]:\n                unique_chars += 1\n            # If the number of unique characters in the word is greater\n            # than the maximum, return the word with maximum number of unique\n            # characters\n            if unique_chars > length:\n                next_word = words[next_length - 1]\n                next_length -= 1\n                # Count the number of unique characters in the word\n                unique_chars = 1\n                while next_word and next_word!= words[length - 1] and \\\n                   words[length - 1]!= words[length]:\n                    unique_chars += 1\n            # If the number of unique characters in the word is less than\n            # the maximum, return the word with minimum number of unique\n            # characters\n            else:\n                next_word = words[next_length - 1]\n                next", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # remove leading and trailing whitespace from word\n    words = words.strip(\" \\t\\n\\r\").strip()\n    words = words.split(\" \")\n    try:\n        max = 0\n        for word in words:\n            max = max + 1\n            if max >= len(words):\n                break\n    except IndexError:\n        max = len(words)\n    return words[max:-1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words)!= 0:\n        max_length = len(words)\n        if max_length <= 1:\n            return \"\"\n        else:\n            return words[0].upper()[max_length - 1].upper()\n\n    return find_max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    start = 0\n    max = \"\"\n    for word in words:\n        if word:\n            if word not in max:\n                max = word\n                start = max.find(word)\n\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    max = 0\n    for word in words:\n        max = max + 1\n        if max == len(words):\n            return word\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    length = len(words)\n    words = words[::-1]\n    while length > 0:\n        word = words[--length]\n        if word.endswith(\" \"):\n            length -= 1\n        else:\n            return word\n\n    return words[::-1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    unique = len(words)\n    if not unique == 0:\n        if len(words) > 1:\n            return words[unique - 1]\n\n    if len(words) == 0:\n        return \"\"\n    if len(words) == 1:\n        if len(words) > 2:\n            return words[unique - 1]\n    else:\n        return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = \"\"\n    result = \"\"\n    for word in words:\n        result += word\n        if word in result:\n            max = word\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_len = len(words)\n    words_list = []\n    for word in words:\n        word_len = len(word)\n        if word_len < max_len:\n            words_list.append(word)\n            max_len = word_len\n    for word in words_list:\n        if word_len > max_len:\n            return word\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = [str(word) for word in words if len(word) > 0]\n    # sort by length\n    words = sorted(words, key=lambda word: len(word))\n    # first word is max\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word_list = []\n    max_id = -1\n    for word in words:\n        word_list.append(word)\n        if len(word_list) == 1:\n            max_id = word_list[0].upper()\n    return max_id", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = [word for word in words if len(word)]\n    max_n = max(words)\n    for word in words:\n        n = word.find(max_n)\n        if n < 0:\n            return word\n    return max_n", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # make sure there is a unique character at the end\n    words = words.split()\n    unique = len(words) - 1\n    for word in words:\n        word = word.rstrip(u\"\")\n        if word not in words:\n            continue\n        else:\n            unique += 1\n    return words[unique:]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = words[:-1]\n    max = 1\n    for i in range(len(words)):\n        if len(words)-i-1 < max:\n            max = len(words)-i-1\n    return words[max]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = \"\"\n    for word in words:\n        if word in max:\n            max = word\n        else:\n            max += 1\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        if max not in word:\n            max = word\n\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    word_count = 0\n\n    # For each word:\n    #     - Number of characters\n    #     - String index\n    #\n    # Create a list of all possible strings and store the index of the word\n    #     in a list. You can add a word to the list after all indices\n    #     have been examined.\n    #\n    for word in words:\n        word_count += len(word)\n        index = word[word_count:].index(' ')\n        # If we are on the last word in the list, and index is 0, then the\n        # word is only one character long.\n        #\n        if index == len(words)-1:\n            max = word\n            break\n\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word = None\n    # this is where we start\n    for i in words:\n        if i.isdigit():\n            word = i\n            break\n        else:\n            word = word + i\n    return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    else:\n        if len(words) > 1:\n            for i in range(len(words)):\n                if words[i].lower() in words[i+1]:\n                    return words[i]\n            return None", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    try:\n        return words[0]\n    except IndexError:\n        return None", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    maxwords = []\n    for word in words:\n        maxwords.append(max(word.split())[-1])\n    return maxwords[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_list = []\n    for word in words:\n        max_list.append(word)\n    for word in max_list:\n        if word.upper().endswith(\" \"):\n            continue\n        if word not in max_list:\n            max_list.append(word)\n    return max_list[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    while len(words) > 0:\n        words = [word for word in words if word not in words]\n        words.sort()\n        word = words[0]\n        for word in words:\n            if word in words:\n                break\n        else:\n            return word\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_len = 0\n    max_length = 0\n    for word in words:\n        length = len(word)\n        if length > max_len:\n            max_len = length\n           max_length = word.upper()\n\n    return max(max_length, max_len)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # create a new dictionary\n    words = {}\n    for s in words:\n        words[s] = 0\n    for word in words:\n        if len(word) > 1:\n            words[word[1:]] += 1\n        else:\n            words[word] = 1\n    return words.keys()[0]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_len = len(words)\n    for i in range(0, len(words)):\n        if len(words)-i == max_len:\n            return words[i]\n\n    if len(words) == max_len:\n        return words[-1]\n\n    return words[max_len-1]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = words[:-1]\n    for i in range(len(words)):\n        if words[i] in words:\n            return words[i]\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    x = 0\n    while x < len(words):\n        w = words[x]\n        if w not in words and w not in x and w not in x + 1:\n            x += 1\n        else:\n            continue\n        if x == len(words):\n            break\n\n    x = 0\n    while x < len(words):\n        w = words[x]\n        if w not in words and w not in x and w not in x + 1:\n            x += 1\n        else:\n            continue\n        if x == len(words):\n            break", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    words = words.split(\" \")\n\n    if len(words) > 2:\n        raise ValueError(\"Max length exceeds 2\")\n\n    for word in words:\n        if len(word) > max_word_len:\n            word = word[:max_word_len]\n\n    return word[:max_word_len]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return words[0][:--1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Don't write this function on Python 3.x\n    if sys.version_info < (3, 7):\n        raise NotImplementedError(\n            'Not implemented')\n\n    max = []\n    for word in words:\n        if word not in max:\n            max.append(word)\n    return max[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n\n    return words[-1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word = None\n    for word in words:\n        if word not in words and len(word) > 1:\n            word = words[0]\n\n    return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = map(lambda s: s.lower(), words)\n    max = 0\n    words = words[-1:]\n    word = words.pop()\n    while word in words:\n        max = max + 1\n        words.pop()\n    return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Find maximum and unique character from word\n    result = \"\"\n    for word in words:\n        count = 0\n        index = word.find(\" \")\n        while count < index and count < len(word):\n            count += 1\n            index += 1\n        if index == len(word):\n            result = word\n        else:\n            result += word[index: index+count]\n    return result", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    for word in words:\n        if word in words and len(words) > 1:\n            continue\n        if word == \"\":\n            continue\n        max = 0\n        for letter in word:\n            if len(letter) > max:\n                max = len(letter)\n        return words[max]\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    else:\n        #First find the max length of word:\n        word_length = 0\n        while len(words) < word_length:\n            word_length = len(words) + 1\n        word = words[0]\n        while word.count(\" \") > word_length:\n            word = word[:word_length]\n            word = word + \" \" + words[1:]\n        return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    words = \"\"\n    for word in words:\n        if max > 0:\n            return words\n        else:\n            max = word.count(\" \")\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for i in range(len(words)):\n        if len(words[i]) > max:\n            max = len(words[i])\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return maximum([find(word) for word in words])", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Generate a list of the words\n    word_list = []\n    for word in words:\n        word_list.append(word.upper())\n    # Return the max number of the words\n    return max(word_list) # A list is a tuple", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    #create a list of unique characters\n    unique_characters = []\n    if len(words):\n        for word in words:\n            unique_characters.append(unicode(word, 'utf-8'))\n    else:\n        unique_characters.append(\"\")\n\n    #create a list of unique words\n    unique_words = []\n    if len(words):\n        for word in words:\n            unique_words.append(unicode(word, 'utf-8'))\n    else:\n        unique_words.append(\"\")\n\n    #create a list of unique characters and unique words\n    unique_character_words = []\n    unique_character_words.extend([unicode(word, 'utf-8') for word in unique_characters])\n    unique_character_words.extend([unicode(word, 'utf-8') for word in unique_words])\n\n    #get the first unique word, put the second one before it, etc.\n    if len(unique_character_words) > len(unique_characters):\n        first_character_words = unique_character_words[0:len(unique_character_words)-1][:len(unique_character_words)-1]\n        second_character_words = unique_character_words[0:len(unique_character_words", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = words.split(\" \")\n    if len(words) == 0:\n        return None\n    words.sort()\n    max = 0\n    for word in words:\n        for char in word:\n            if char in '0123456789':\n                max += 1\n            else:\n                if max > max:\n                    max = 1\n        return max\n\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n\n    def _unique(s):\n        return len(s) - 1 - (len(s) % 2)\n\n    for i in range(0, len(words), 1):\n        try:\n            unique = _unique(words[i])\n        except ValueError:\n            unique = 0\n        else:\n            unique += 1\n\n        if unique < 1:\n            return words[i]\n\n    if len(words) == 1:\n        return words[0]\n\n    words = [unique]\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        length = len(word)\n        if length > 0:\n            return word[length:]\n        else:\n            return \"\"\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = []\n    for word in words:\n        if len(word) > 1:\n            words.append(word)\n        else:\n            words.append(word)\n\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = list(words)\n    if len(words) == 0:\n        return \"\"\n    return words[0].upper()", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if word.isalpha():\n            continue\n        if word in [\"a\", \"ba\", \"b\"]:\n            continue\n        # see if word contains''\n        if word in [\" \", \"\\t\", \" \", \".\"]:\n            continue\n        # check that word contains at least 2 characters\n        if len(word) < 2:\n            continue\n        # find the maximum number of characters in word\n        try:\n            max = 0\n        except:\n            max = len(word)\n        for word_char in word:\n            if word_char in [\" \", \"\\t\", \" \", \".\"]:\n                continue\n            if max!= len(word_char):\n                max = len(word_char)\n        return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    # find_max only accepts 1 argument\n    if len(words)!= 1:\n        raise ValueError(\"Only one argument provided\")\n    # word contains unique characters\n    word = words[0]\n    word = word.replace(\"-\",\"\")\n    word = word.replace(\" \",\"\")\n    # first occurence\n    max = \"\"\n    word = word.strip()\n    while word!= \"\":\n        if len(word) == 1:\n            max = word.strip()\n            break\n        word = word.replace(\"-\",\"\")\n        word = word.replace(\" \",\"\")\n    if max:\n        return max\n    else:\n        return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_n = 0\n    for word in words:\n        # sort words\n        # sort by length\n        sort(words)\n        # add one to max value\n        max_n += 1\n        # if max number of characters is greater than min number\n        # then return first word\n        if max_n > min_n:\n            return words[(len(words) - 1) % len(words)]\n    return \"\".join(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    result = \"\"\n    i = 0\n    while i < len(words):\n        result += words[i].upper()\n        i += 1\n    return result", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = None\n    for word in words:\n        if word =='':\n            continue\n        if max is not None and word in max:\n            max = word\n        else:\n            max = word\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # If both are empty, return the first.\n    if len(words) == 0:\n        return words[0]\n\n    # Otherwise, return the one with maximum number of unique characters.\n    words = sorted(words, key=lambda word: len(word))\n\n    # If there are multiple words with maximum number of unique characters,\n    # return the one which comes first in lexicographical order.\n    if len(words) == len(words) - 1:\n        return words[-1]\n\n    # If there are multiple words with maximum number of unique characters,\n    # return the one with maximum number of characters.\n    max_len = len(words)\n\n    # Iterate over words until there is only one word with maximum number of\n    # unique characters and return the one with maximum length.\n    for word in words:\n        if word[-1] == \"\":\n            max_len = len(word) - 1\n        else:\n            max_len = len(word)\n\n    return max_len", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    results = {}\n    for word in words:\n        if word not in results:\n            results[word] = 0\n            for character in word:\n                results[word] += 1\n            if len(results) == len(words):\n                return results[word]\n    return results.get(words[0],0)</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    # Begin with string, remove its first character\n    words = words[:-1]\n    # Remove words which are not letter\n    words = words.split()\n    # Count number of unique characters\n    unique = 0\n    # Count number of words\n    count = len(words)\n    # count = len(words.split(\" \"))\n    # if count > 1:\n    #     # return last word\n    # else:\n    #     # return last word\n    #     return words[unique]\n    # return \"\".join(words)\n    # return \"\".join(words)\n    # return find_max(words.split())[1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def find_max(words):\n        \"\"\"Find the maximum length for a word.\"\"\"\n        max = len(words)\n        for w in words:\n            for i in range(max - len(w)):\n                if w[i:] == w[:max - i] and w[:max - i] not in words:\n                    max = max - len(w)\n        return max\n\n    for word in words:\n        if not word.startswith(' '):\n            max = find_max(word)\n        else:\n            max = len(word) + 1\n        if max > len(words):\n            return words[max]\n\n    return words[max]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # If word is not a string, return None.\n    if words is None or words.startswith(None):\n        return None\n\n    # Define the order of letters.\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    # Get maximum number of unique characters of word.\n    maxlen = len(letters)\n    # Get maximum number of distinct characters of word.\n    maxdist = len(letters)\n\n    # Initialise the words to the largest number of letters.\n    words = letters[maxlen:]\n    # Iterate through the word and make it as many distinct characters as\n    # possible.\n    for i in range(maxlen):\n        words.replace(letters[i],'')\n\n    # Output the length of the word.\n    return len(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word1 = 0\n    word2 = 0\n    word3 = 0\n    maxlen = 0\n\n    for s in words:\n        if s not in (\"\", \" \", \"-\", \"_\"):\n            if word1:\n                maxlen += len(s)\n            word1 += len(s)\n        else:\n            maxlen += len(s)\n\n    return maxlen", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # sort the list\n    words = sorted(words, key=lambda w : w.find(' '))\n    # find the maximum\n    max = 0\n    for w in words:\n        if w.find(' ') >= max:\n            max = w.find(' ')\n    # return the maximum\n    return max+1", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word1 = None\n    word2 = None\n    count = 0\n    for word in words:\n        count += 1\n        if word not in words:\n            word1 = word\n            word2 = word2\n            break\n    return word1 + count if word1 else word2", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    elif len(words) > 1:\n        max_name = \"\"\n        max_len = len(words[0])\n        for i in range(len(words[1])):\n            max_name += words[i][max_len:]\n        return max_name\n    else:\n        max_name = \"\"\n        max_len = len(words[0])\n        for i in range(len(words[1])):\n            max_name += words[i][max_len:]\n        return max_name.split(\" \")[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    return lambda string: max(set([w for w in words if w in string]))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for i in words:\n        max = max + len(i)\n\n    if len(words) > max:\n        return max\n    else:\n        return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) > 1:\n        return words[-1][:-1]\n    else:\n        return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) > 1:\n        words = words[::-1]\n    words = words.split(\" \")\n    #we cannot have more than one word with same unique character\n    #because if there is multiple string with same unique character\n    #we cannot have same word with same unique character.\n    #we can use a function to add a word with same unique character.\n    #but that will not give us the same word.\n    if len(words) == 2:\n        return words[0]\n    else:\n        return words[::-1]\n    return \"\".join(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return lambda s: s.split(\" \")[0].lower() # Key word\n\n    max = 0\n    for word in words:\n        if word not in words:\n            max = word.lower()\n            return max\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    elif len(words) == 2:\n        return find_max(words[0], words[1])\n    else:\n        return find_max(words[0], words[1:])", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = \"\"\n    for i in words:\n        max += str(i)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        raise ValueError(\"Empty list of words.\")\n    if len(words) == 1:\n        return words[0]\n    else:\n        result = \"\"\n        for i in range(len(words)):\n            if words[i] in words[i-1]:\n                result += words[i]\n            else:\n                result += words[i]\n        return result", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return _(\"of\") + \"\\n\".join([_(\"{0}\").format(x) for x in words])", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        # Check if word has one, and unique characters\n        if word in words and len(word) > 1:\n            # Create a unique character\n            while word[-1] in a-z:\n                word = word[:-1]\n\n            # Check if word has two, and not only one\n            if word in words and len(word) > 2:\n                # Create a unique character\n                while word[-1] in a-z:\n                    word = word[:-1]\n\n            # Check if word has three, and not only two\n            if word in words and len(word) > 3:\n                # Create a unique character\n                while word[-1] in a-z:\n                    word = word[:-1]\n\n            # Check if word has four, and not only three\n            if word in words and len(word) > 4:\n                # Create a unique character\n                while word[-1] in a-z:\n                    word = word[:-1]\n\n            # Check if word has five, and not only four\n            if word in words and len(word) > 5:\n                # Create a unique character\n                while word[-1] in a-z:\n                    word = word[:-1]\n\n            # Check if word has six, and not only five\n            if word in words and len(word) > 6:\n                # Create a unique character", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    if len(words) == 0:\n        return \"\"\n\n    if len(words) > 1:\n        for i in range(len(words)):\n            max = max + find_max(words[i])\n\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word_list = list(words)\n    max_word = None\n    for word in word_list:\n        if max_word is not None:\n            if len(word) > max_word:\n                max_word = word\n        else:\n            max_word = word\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        raise ValueError(\"words can not be empty\")\n\n    words = words.split()\n    for word in words:\n        if len(word) > max(words: len(word)):\n            return word\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return None\n    return words[-1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_char = len(words)\n    while max_char > 1:\n        max_char = max_char - 1\n    return words[max_char - 1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    count = 0\n    for word in words:\n        if word in words and len(word) > count:\n            count = len(word)\n    return words[count]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word) > 1:\n            return word[-1][:] + word[:-1]\n\n    return word[-1][:] + word[:-1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    #var maxchars = []\n    maxchars = [None, None, None]\n    maxchars.append(0)\n\n    #iterate over words\n    for word in words:\n        #if word[0] not in maxchars:\n        #    maxchars.append(word[0])\n        #else:\n        maxchars.append(len(word)) #maxchars\n\n    #sort the list by the length of the longest one\n    for len in maxchars:\n        #print(len)\n        nextmax = find_max([maxchars[len]])\n        if len < nextmax:\n            nextmax = len\n\n    return maxchars[-1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    else:\n        words = words.split(\" \")\n        return max(words, key=lambda x: len(x))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return None if len(words) == 1 else max(words)\n    # XXX: should this be in min?", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words)!= 1:\n        raise ValueError(\"Argument should be one string.\")\n    return [word for word in words if len(word) > 1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if len(word)!= 1:\n            continue\n        if len(word) > 1:\n            break\n    return word[1:]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    result = \"\"\n    for word in words:\n        word_len = len(word)\n        if word_len == len(result):\n            return result\n        result = word + word[:word_len] + word[word_len+1:]\n        if word_len > len(result):\n            result = word[:word_len] + word[word_len+1:]\n    return result", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word_list = []\n    for word in words:\n        word_list.append(word)\n    longest = word_list[-1]\n    longest_len = len(word_list)\n    unique_len = len(word_list[:longest])\n    found = []\n    while len(word_list)!= unique_len:\n        words = word_list[:unique_len - 1]\n        word = words[-1]\n        found.append(word)\n    return longest[len(word_list) - 1]\n\n    return longest", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    string = \"\"\n    word = \"\"\n    for w in words:\n        if w!= \" \" and len(w) > 0:\n            string += w\n            word = word + 1\n    if len(string) > 1:\n        return string[-1:]\n    else:\n        return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def func(words):\n        max = 0\n        for word in words:\n            if len(word) < len(words):\n                if word in max:\n                    max = word\n            else:\n                max += 1\n        return max\n\n    return func", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    found = \"\"\n    word_count = 0\n    found = words[0]\n    while word_count < len(words):\n        word = words[word_count]\n        word_count += 1\n        if word in found:\n            found = word\n            break\n\n    return found", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n\n    max = \"\"\n    for w in words:\n        if len(w) > 1:\n            max = max + w + \"\"\n        else:\n            max = max + w + \"\"\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    word_count = 0\n    max = \"\"\n    for word in words:\n        max += word\n        word_count += 1\n    return max[:word_count]\n\n    #return \"\".join([\"str(word)\" for word in words])", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_length = []\n    for word in words:\n        for i in range(len(word)):\n            if i == len(word) - 1:\n                continue\n            else:\n                max_length.append(str(word[i])[0:i])\n    return max(max_length)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) > 1:\n        max = \"\"\n        for word in words:\n            if word.find(\" \") == len(word)-1:\n                max += word\n            else:\n                max += word\n    else:\n        max = \"\"\n    for i in range(len(words)-1):\n        max += words[i-1:]\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = [word.strip() for word in words if len(word) > 0]\n    if len(words) == 0:\n        return words[0]\n    else:\n        return words[0].lower() + (words[1:] + [word] + [word]).index(word.lower()) + 1", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return word.replace(\" \", \"\").upper()", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) > 1:\n        # filter non-unique characters\n        if not words[0].isalpha() and not words[0].isdigit():\n            return \"\"\n        elif len(words) > 2:\n            return words[0]\n        else:\n            return find_max([words[0]])\n\n    # if no one is given a word, try the longest one\n    if len(words) == 0:\n        return find_max(wordlist.keys())[0]\n    # else, look for the longest word\n    for word in words[1:]:\n        if len(word) == 0:\n            return find_max(wordlist[word])[0]\n        else:\n            return find_max(wordlist[word])[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # the dictionary of words\n    words = {}\n\n    # the string with maximum number of unique characters\n    words[words.keys()[0]] = words[words.keys()[1]]\n\n    # the dictionary of words with maximum number of characters\n    words_max = {}\n\n    # the string with maximum number of characters\n    words_max[words.keys()[0]] = words_max[words.keys()[1]]\n\n    # find the first word with maximum number of characters\n    return words_max[words.keys()[0]]\n\n    # find the first word with maximum number of characters\n    return words[words.keys()[0]]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    result = None\n    if len(words) == 1:\n        result = words[0]\n    else:\n        for word in words:\n            try:\n                result = find_max([word])\n            except (ValueError, IndexError):\n                pass\n\n    return result", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = \"\"\n    for word in words:\n        if word[0] == \"\":\n            continue\n        if word[0] == \"\":\n            word = word[1:]\n        else:\n            word = word[:-1]\n        if word in words:\n            max = max + word\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        if word[0]!='':\n            max = max + 1\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return [word.lower() for word in words if len(word) > 0][0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # if not len(words) == 1:\n    #     return \"\"\n    # else:\n    #     for word in words:\n    #         if word.find(\"-\")!= -1:\n    #             word = word[len(word)-1]\n    #         find_max(word)\n    #     return word\n    # return None", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = sorted(words, key=lambda x:len(x))\n    if len(words)==1:\n        return words[0]\n    words = [word.lstrip() for word in words if len(word)>1]\n    for word in words:\n        if len(word)>1:\n            word = word[1:]\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = word_split(words)\n    max_len = max(len(word) for word in words)\n    max = words[max_len - 1]\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = words.split(\" \")\n    max = \"\"\n    for word in words:\n        word = word.split(\" \")\n        if len(word) == len(words):\n            max = word[-1]\n        else:\n            max = \"\"\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    result = \"\"\n    for word in words:\n        if word[0] == \"\":\n            word = word[1:]\n        result = result + word + \" \"\n    return result", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return -1\n    #return-1\n    for word in words:\n        if word[0]!= \" \" :\n            if len(word) > 1 and len(word) > 2:\n                while len(word) > 3 and len(word) > 4:\n                    #Find max word in LEN order of letters\n                    len = 1\n                    for letter in word:\n                        if len(letter) <= 2:\n                            len = 2\n                        else:\n                            break\n                    #In case of less than 3 characters, return first character\n                    if len < 3:\n                        return word[0]\n            else:\n                while len(word) > 2 and len(word) > 3:\n                    #Find max word in LEN order of letters\n                    len = 1\n                    for letter in word:\n                        if len(letter) <= 2:\n                            len = 2\n                        else:\n                            break\n                    #In case of less than 3 characters, return first character\n                    if len < 3:\n                        return word[0]\n                else:\n                    return word[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_len = 0\n    max_len = max(max_len, len(words))\n    for i, word in enumerate(words):\n        if max_len == len(word):\n            max_len = i\n    return max_len", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) > 1:\n        # The number of unique characters must be greater than one.\n        max_name = words[0]\n        max_eanm = words[1]\n        max_game = words[2]\n        max_eanm = max(max_eanm, max_name)\n        max_game = max(max_game, max_eanm)\n    else:\n        # The number of unique characters must be greater than one.\n        max_name = words[0]\n        max_eanm = words[1]\n        max_game = words[2]\n        max_eanm = max(max_eanm, max_name)\n        max_game = max(max_game, max_eanm)\n    return max_eanm", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    elif len(words) == 2:\n        return find_max(words[:-1] + words[1:])\n    elif len(words) == 3:\n        return find_max(words[:-1] + words[1:] + words[2:])\n    else:\n        raise ValueError(\"words: %d, words: %s\" % (len(words), words))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    m = 0\n    for word in words:\n        m += 1\n        if m == len(words):\n            return word\n\n    return words[m]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Create empty list\n    max = []\n\n    # Iterate over all strings\n    for word in words:\n        # If word has maximum number of unique characters\n        if len(max) == len(word):\n            # Return the max value\n            max.append(word)\n    # Return the max value\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        max = max + len(word)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max([word.lower() for word in words])", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Look for the word with maximum number of unique characters.\n    words = sorted(words, key=lambda s: s.find(\"max\"))\n    if len(words) == 1:\n        return words[0]\n    elif len(words) > 1:\n        return find_max(words, key=lambda s: s[-1].find(\"max\"))\n    else:\n        return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word = \"\"\n    word_max = 0\n    for word in words:\n        word_max += len(word)\n\n    if word_max == 1:\n        return word\n    else:\n        return words[1:]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # return the first word with maximum number of unique characters\n\n    # not a function\n    if len(words) == 0:\n        return \"\"\n    elif len(words) == 1:\n        return words[0]\n    else:\n        return words[0].replace(\"_\", \" \")", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max_len = 0\n    for word in words:\n        max_len = max(max_len, len(word))\n    return max_len", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) > 1:\n        return words[max(words) - 1]\n    else:\n        return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    if len(words) == 2:\n        return find_max([words[0]])\n    else:\n        return len(words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for item in words:\n        if len(item) > max:\n            max = len(item)\n\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    elif len(words) == 2:\n        return words[0], words[1]\n    else:\n        raise TypeError(\"number of words must be > 1\")\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    while len(words) > 0:\n        words = words[:-1]\n        words = words.split(\"\")\n        words = [word for word in words if len(word) > 0]\n        max = None\n        for word in words:\n            max = max or find_max(words, word)\n        if max:\n            return max\n    return None\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    print(\"find_max()\")\n    word = []\n    words = list(words)\n    for i in range(len(words)):\n        if i < len(words):\n            word.append(words[i])\n        else:\n            word.append(words[0])\n    max = max(word)\n    return word[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # first word\n    first_word = None\n    while True:\n        word = words[0]\n        if word == '':\n            break\n        # find last letter\n        l = word.find(\"_\")\n        if l == -1:\n            return word\n        # find next letter\n        next_word = word[l+2:]\n        # find next character\n        l = next_word.find(\"_\")\n        if l == -1:\n            return next_word\n        # find previous letter\n        previous_word = word[:l]\n        # find previous character\n        previous_char = previous_word[-1:]\n        # last word\n        last_word = previous_word\n        while previous_word!= '':\n            # replace last letter\n            previous_word = previous_word.replace(\"_\", \" \")\n            # next word\n            next_word = next_word.replace(\"_\", \" \")\n            # previous word\n            previous_word = previous_word.replace(\"_\", \" \")\n            # next word\n            next_word = next_word.replace(\"_\", \" \")\n            # previous word\n            previous_word = previous_word.replace(\"_\", \" \")\n            # last word\n            last_word = last_word.replace(\"_\", \" \")\n            # remove last word\n            last_word = last_word[:-1]\n        if", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word = []\n    for word in words:\n        if len(word) == 0:\n            continue\n        for word_c in word:\n            if word_c in word:\n                word.append(word_c)\n        word.sort(lambda s: s[1])\n        if len(word) == 1:\n            return word[0]\n    return word[0]\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Create a dictionary mapping string words to the number of unique characters\n    words_dict = {}\n    for word in words:\n        words_dict[word] = len(word)\n    # If only one word has unique characters then return it\n    if len(words) == 1:\n        return words_dict[words[0]]\n    # If multiple words have unique characters then return the first one in lexicographical order\n    if len(words) > 1:\n        first_word = words[0]\n        second_word = words[1:]\n        if len(second_word) > len(first_word):\n            return first_word\n        else:\n            return second_word\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max.max(words)\n    #def find_max(word):\n    #    return word.split(' ').max()\n\n    #def find_max(word, allow_nil=True):\n    #    return max(word.split(' ').split(',') if allow_nil else [])\n    #\n    #def find_max(words):\n    #    return max(words)\n\n    #def find_max(words):\n    #    return max(words, key=lambda x: x.split(' ').max())\n\n    #def find_max(words, allow_nil=True):\n    #    return max(words, key=lambda x: x.split(' ').split(',') if allow_nil else [])\n    #\n    #def find_max(words, allow_nil=True):\n    #    return max(words, key=lambda x: x.split(' ').split(',') if allow_nil else [])\n\n    #def find_max(words):\n    #    return max(words, key=lambda x: x.split(' ').split(',') if allow_nil else [])\n\n    #def find_max(words, allow", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    else:\n        return find_max([words[0]])\n\n    def compare(words):\n        if len(words) == 1:\n            return 0\n        else:\n            for word in words:\n                if word not in words:\n                    return len(word)\n    return sorted([str(w) for w in words], key=compare, reverse=True)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = list(words)\n    max_len = len(words)\n\n    return words[max_len - 1].upper()", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = sorted(words)\n    for word in words:\n        if word[-1] in \".\" or word[-1] in \"?\" or word[-1] in \"[\" or word[-1] in \"]\":\n            continue\n        if word[-1] == \".\" or word[-1] == \"?\" or word[-1] == \"[\" or word[-1] == \"]\":\n            continue\n        max = word.index(word[-1:])\n        if max > len(words) - 1:\n            return words[max]\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    return words[int(words[0].find(' '))]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        # handle case-insensitivity of word\n        word = word.lower() # lowercase\n        # compare with word number\n        if len(word) > 1:\n            # handle case-insensitivity of word\n            word = word[0].lower() # lowercase\n        # handle case-insensitivity of word\n        word = word.lower() # lowercase\n        # check if word is unique\n        if word in words:\n            return word\n    return \"\" # return the first letter\n\n    #add a new word\n    new_word = find_max(words[:])\n    if new_word == \"\": # no word\n        new_word = find_max(words[:-1])\n    return new_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word_count = 0\n    for word in words:\n        word_count += 1\n        if word_count > word:\n            return word\n\n    return words[word_count-1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = 0\n    for word in words:\n        if word not in words:\n            max = max + 1\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    def find_max(words):\n        \"\"\"Find the maximum of n strings.\n        The n strings should be sorted in lexicographic order.\n        \"\"\"\n        max = 0\n        for word in words:\n            max = max + 1\n        return max\n\n    if len(words) == 1:\n        return words[0]\n    if len(words) > 1:\n        for word in words:\n            if len(word)!= 1:\n                raise ValueError(\"max word length should be 1.\")\n        return find_max(words[0])\n\n    if len(words) == 1:\n        return find_max(words[0])\n    return find_max(words)\n\n    def _get_descending_ascending_dict(n):\n        \"\"\"Find a dictionary of increasing/decreasing strings.\n        If n is empty, return an empty dictionary.\n        \"\"\"\n        ascending = dict(zip(range(len(words)), words))\n        descending = dict(zip(range(len(words)), range(-1, -1, -1)))\n        return descending[sorted(descending)[0]], ascending[sorted(ascending)[0]]\n\n    return _get_descending_ascending_dict(len(words))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # find the first word\n    first = words[0]\n    max = 0\n    for word in words:\n        if word in first:\n            max = word.count(first[0])\n            break\n    return max\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    assert len(words) == 1\n    i = 1\n    while i < len(words):\n        if words[i] == words:\n            return words[i]\n        i += 1\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = [words]\n    results = []\n    result = \"\"\n    for word in words:\n        words.remove(word)\n        if word not in results:\n            results.append(word)\n        else:\n            if len(word) > max_words(word):\n                result = word\n    return result", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n\n    # First order list\n    max_list = []\n    for word in words:\n        if len(word) > 0:\n            max_list.append(word)\n\n    # Second order list\n    max_list = sorted([max(w) for w in max_list])\n    max = max_list[0]\n\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    match = ''\n    while words:\n        index = words.index(match)\n        if len(words) < index:\n            return words[-1:]\n        else:\n            word = words[:index]\n            match = word[len(match):]\n            break\n    return match", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # first check that strings have the same length\n    if len(words) == len(words[:-1]):\n        return words[:-1]\n    # second check that the strings are unique\n    if len(words) > 1:\n        # check the position of the word in the list\n        word_index = find_max(words[:-1])\n        if word_index < len(words) - 1:\n            # the word is not the first\n            return words[word_index]\n        else:\n            # the word is the first\n            return words[word_index]\n    # the last check that the strings are not the same\n    if len(words)!= len(words[:-1]):\n        return \"\"\n\n    # third check that the number of unique characters for the words are\n    # same\n    if len(words)!= len(words[:-1]):\n        return \"\"\n\n    # last check that the string is unique\n    if len(words)!= len(words[:-1]):\n        return \"\"\n\n    return words[-1]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    assert len(words) == 1\n    return words[0]\n\n    # a quick way to count the number of unique characters for each word\n    # we know there are n words, so max(W) == min(N) where W is the list\n    # of words, and N is the length of the word (useful for fast counting of\n    # words)\n    # here, W = [\"name\"]\n    # and N = 3\n    return min([len(w) for w in words])\n\n    # fast method, using the lexicographical sort\n    from collections import defaultdict\n    def _sort(a, b):\n        return cmp(a.lower(), b.lower())\n\n    # number of unique characters for each word\n    _count = defaultdict(int)\n    # score of word w\n    _score = defaultdict(int)\n\n    for word in words:\n        # get number of unique characters\n        n_uniq = find_max(word)\n        # get total number of characters\n        total_uniq = 0\n        # get number of words with this number of unique characters\n        # compute the sum\n        for n in range(n_uniq):\n            total_uniq += 1\n        # add the number of words with this number of", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    result = \"\"\n    for word in words:\n        result += word.upper()\n        if len(word) > len(result):\n            result = word\n    return result", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    else:\n        max = 0\n        for word in words:\n            for i in range(len(word)):\n                if word[i] == word[i - 1:]:\n                    max = max + 1\n            if max > max:\n                return word.pop(0)\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    # Taken from https://stackoverflow.com/questions/31336911/is-a-list-of-strings-what-we-return\n    words = sorted(words, key=lambda s: s.upper())\n    word_count = len(words)\n\n    # Iterate over words.\n    for word in words:\n        if word in words:\n            word_count += 1\n        else:\n            # If the word is not in the list, return the first\n            # character\n            if word!= words:\n                return word\n\n    return words[0].upper()\n\n    # Return the first character of each word in the list\n    return words[1:][0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word = \"\"\n    for i in range(0, len(words)):\n        word += word + string.ascii_letters + string.digits + \" \" + words[i]\n    return word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max([word for word in words if word!= \"\" and len(word) > 1])", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    n = len(words)\n    if n == 0: return \"\"\n    for i in range(0, n):\n        if words[i][:1] == \"\": continue\n        if words[i][-1] == \".\": continue\n        if len(words[i]) < 3: continue\n        if words[i][0] == \".\": continue\n        if words[i][-1] == \".\": continue\n        if len(words[i]) < 2: continue\n        if len(words[i]) > 3: continue\n        if words[i][0] == \".\": continue\n        if len(words[i]) > 3: continue\n        if words[i][0] == \".\": continue\n        if len(words[i]) > 3: continue\n        if words[i][0] == \".\": continue\n        if len(words[i]) > 3: continue\n        if words[i][0] == \".\": continue\n        if words[i][-1] == \".\": continue\n        if len(words[i]) == 3: continue\n        if words[i][-1] == \".\": continue\n        if words[i][0] == \".\": continue\n        if words[i][0] == \".\": continue\n        if len(words[i]) > 3: continue\n        if words[i][0] == \".\": continue\n        if words[i][0] == \".\": continue\n        if words[i][0] == \".\": continue\n        if", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = [str(x) for x in words]\n    return max(words, key=lambda x: len(x))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        if word[-1]!='':\n            return word\n    return None", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max([len(c) for c in words])", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # first word is the maximum\n    max = \"\"\n    for word in words:\n        # ignore the first\n        if word[0]!= \"\":\n            # the next word is the maximum\n            if word[0]!= word[-1] and len(word) > 1:\n                # the next word is the maximum\n                max = word[0]\n        else:\n            # return the maximum\n            max = word\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    result = \"\"\n    for word in words:\n        result += word\n        if result[-1] == \" \" and len(result) > 1:\n            continue\n        if result[-1]!= \" \" and len(result) > 1:\n            result = result[:-1]\n\n    return result.strip(\" \").lower()[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    first_word = words[0]\n    max_word = 0\n    for word in words:\n        if word!= first_word:\n            max_word = max([max_word, word])\n    return max_word", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        return words[0]\n    if len(words) == 2:\n        # If there is only one string, we return it first\n        return words[0]\n    else:\n        # If there are multiple strings, we return the first with maximum number\n        max = []\n        for word in words:\n            if len(word) >= max:\n                max = word\n        if len(max) > len(words):\n            max = max[0]\n        return max\n\n    return words[0]", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        words = [words[0]]\n    else:\n        words = [words, words[1:], words[2:]]\n    # in order\n    words[0] = words[0]\n    # get all chars from word\n    count = 0\n    for word in words:\n        count += len(word)\n        if count == len(words):\n            return word\n\n    return words[-1][:-1] # last element\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    return max.count(key(word) for word in words)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    word_list = []\n    count = 0\n    for word in words:\n        word_list.append(word)\n        count += 1\n        if count == word_list.size():\n            return word\n    return \"\".join(word_list)", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    max = \"\"\n    while len(words):\n        for i in range(0, len(words), 1):\n            if max == \"\":\n                max = words[i]\n            elif max!= words[i]:\n                max = words[i]\n        words = words[i+1:]\n    return max", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 0:\n        return \"\"\n    if len(words) == 1:\n        return words[0]\n    else:\n        return find_max(words, max=len(words))", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    for word in words:\n        word = word.lower().strip()\n        for char in word.find(\" \"):\n            if char > 0:\n                break\n        if word in words:\n            return word\n    return \"\"", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    words = list(words)\n    for word in words:\n        word = word.lower()\n\n        if len(word) > 1:\n            max_num = word[-1].upper()\n            for i in range(len(word)):\n                if word[i] == max_num:\n                    max_num = word[i]\n        return max_num\n</s>", "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"    if len(words) == 1:\n        if len(words) > 1:\n            return words[0]\n\n    if len(words) == 1:\n        return words[0]\n\n    if len(words) == 1:\n        return words[0]\n\n    if len(words) == 2:\n        return max([len(word) for word in words])\n\n    if len(words) > 1:\n        if len(words) > 1:\n            return find_max([word[0] for word in words])[1]\n        return find_max(words)[1]\n\n    return \"\""]]