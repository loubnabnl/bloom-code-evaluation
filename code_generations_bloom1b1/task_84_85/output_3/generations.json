[["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Init\n    nums = []\n    for i in range(0, N):\n        nums.append('')\n    # Load\n    val = eval(\"str(stdin.readline())\")\n    # Resize\n    nums.resize(len(val))\n    # Delete\n    val = val[2:-1]\n    # Return\n    return nums[0] + val[1:-1] + nums[2:] + val[3:] + nums[4:]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    x = \"\"\n    x = \"0123456789ABCDEF\".pack('B')\n    for i in range(N):\n        x = x + x[::-1]\n    return x", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    allDigits = 0\n    n = N\n    if n == 0:\n        return \"\"\n    else:\n        n = 1 + n\n        if n > 10000:\n            n = 10000\n        while n > 0:\n            if n % 2 == 0:\n                allDigits += 1\n            else:\n                allDigits += 0\n            n /= 2\n        return \"\".join([0 for x in range(n)])\n    return allDigits.rstrip(\"0\")\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    for i in range(N):\n        sum = 0\n        for j in range(i):\n            sum += (i == j? 0 : 1)\n        return sum.zfill(i) + sum.zfill(j)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return \"\".join([i for i in xrange(N)])[:-1]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = list(range(N, N + 1))\n    # This will print out the solution.\n    return ''.join([''.join(d) for d in digits])\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    i = 0\n    nums = []\n    while i <= N:\n        num = 0\n        while i > 0:\n            num += 1\n            if num == N:\n                num = '0'\n                i = 0\n        nums.append(num)\n        i += 1\n    return '\\n'.join(s for s in nums)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N > 0:\n        N = '0x'.join([chr(ord(x) - ord('0')) for x in N.decode('ascii', 'ignore')])\n    else:\n        return ''\n    \n    if len(N) == 1:\n        return N\n    \n    # First digit\n    if N < 10 or N < 1:\n        return ''\n    \n    # Second digit\n    if N < 30 or N < 40:\n        return ''\n    \n    # Third digit\n    if N < 60 or N < 70:\n        return ''\n    \n    # Fourth digit\n    if N < 80 or N < 90:\n        return ''\n    \n    # Fifth digit\n    if N < 100 or N < 110:\n        return ''\n    \n    # Sixth digit\n    if N < 150 or N < 200:\n        return ''\n    \n    # Sextile digit\n    if N < 210 or N < 250:\n        return ''\n    \n    # First digit+Sextile digit\n    if N < 300 or N < 400:\n        return ''\n    \n    # Second digit+Sextile digit\n    if N < 500 or N < 600:\n        return ''\n    \n    # Third digit+Sextile digit\n    if N < 700 or N < 800:\n        return ''\n    \n    # Fourth digit+Sextile digit\n    if", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if not (N > 10000):\n        return ''\n    if N <= 0:\n        return ''\n    if N > 10000:\n        return 'Nothing'\n    digits = []\n    for i in xrange(N):\n        digits.append('0x' + chr(0x10 * (i - 1)))\n    return ''.join(digits)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # for N > 10000, first try to use int\n    digits = int(N) + 1\n    result = ''\n    while digits >= 10:\n        result += '0' + (int(N % 10) - 1)\n        digits = int(N / 10)\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    if(N < 0):\n        raise ValueError(\"Invalid number\")\n    \n    i = 0\n    while(i < N):\n        t = str(i) #Create a string of binary digits\n        \n        if(t < '0'):\n            t = '0' + t\n        elif(t >= '9'):\n            t = '9' + t\n        else:\n            t = '00' + t\n        \n        while(i < N):\n            t = str(i) #Create a string of binary digits\n        \n        if(t >= '0' and t <= '9'):\n            t = '0' + t\n        elif(t >= 'a' and t <= 'f'):\n            t = '00' + t\n        else:\n            t = '11' + t\n        \n        i += 1\n    \n    return t\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    m = 0\n    for i in xrange(N):\n        m = m + 1\n    return m", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Zero pad the input\n    input = ''.join(range(0, N - 1, 2))\n    # Format the input\n    output = ''.join(map(chr, input.lstrip().split(',')))\n    # Truncate the output\n    output = output.replace(',', '')\n    # Add all digits in the input\n    output = ','.join(output.split(',')[1:])\n    # Return the output\n    return output", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        print(\"number must be greater than zero\")\n    if N == 0:\n        return \"\"\n    if N == 1:\n        return \"N\"\n    if N == 2:\n        return \"00000\"\n    if N == 3:\n        return \"000100\"\n    if N == 4:\n        return \"001100\"\n    if N == 5:\n        return \"001111\"\n    if N == 6:\n        return \"010011\"\n    if N == 7:\n        return \"010111\"\n    if N == 8:\n        return \"011101\"\n    if N == 9:\n        return \"011111\"\n    if N == 10:\n        return \"110111\"\n    if N == 11:\n        return \"111111\"\n    if N == 12:\n        return \"111110\"\n    if N == 13:\n        return \"111110\"\n    if N == 14:\n        return \"111011\"\n    if N == 15:\n        return \"111011\"\n    if N == 16:\n        return \"111110\"\n    if N == 17:\n        return \"111110\"\n    if N == 18:\n        return \"111111\"\n    if N == 19:\n        return \"111111\"\n    if N == 20:\n        return \"111110\"\n    if N == 21:\n        return \"111111\"\n    if N == 22:\n        return \"111110\"\n    if", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 1:\n        raise ValueError(\"the integer must be positive\")\n    s = \"\"\n    for i in range(N):\n        if i % 2 == 0:\n            s += \"0\"\n        else:\n            s += \"1\"\n    return s", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = \"\"\n    while N >= 1:\n        if N % 2 == 0:\n            digits += '0'\n        else:\n            digits += '1'\n    return digits", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    from operator import add\n    \n    result = ''\n    for i in range(N):\n        result += ''.join([i for i in range(1, i + 1)])\n    return result\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    total = 0\n    for n in range(1, N, 1):\n        total += int(n / 1000)\n    return str(total).replace(\".\", \"\").split(\"\")", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    # Set some parameters\n    N = int(N)\n    N = int(N) if N < 0 else N\n    # Get first digit\n    digits = ''.join(x for x in range(N))\n    # Get next digit\n    next_digits = ''.join(x for x in range(N) if x!= 0)\n    # Get total digit\n    total_digits = ''.join(x for x in range(N) if x!= 0)\n    # Check digits\n    if len(digits) > 0:\n        # Get the total number of digits\n        total_digits += len(digits) + 1\n        # Set the total digit\n        total_digits = total_digits[:]\n    # Check next digits\n    if len(next_digits) > 0:\n        # Get the total number of digits\n        total_digits += len(next_digits) + 1\n        # Set the total digit\n        total_digits = total_digits[:]\n    # Get total number of digits\n    total_digits = total_digits[:]\n    # Get the first digit\n    if total_digits == '':\n        # Set the first digit\n        total_digits = '0'", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        raise ValueError(\"Number of digits must be greater than 0\")\n    digits = binascii.hexlify(\"%0*X\" % (N,))\n    return binascii.dechex(digits).rstrip()", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = ''\n    for i in range(N):\n        sum += '0'*(i)\n    return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    # If N is not a number, set N to 10000\n    if not N:\n        N = 10000\n    \n    # If N is not an integer, convert N to a number\n    if not N.isint():\n        N = int(N)\n    \n    # If N is not a positive number, return the sum of digits\n    if not N.ispositive():\n        return ''\n    \n    if N == 0:\n        return '0'\n    \n    # Convert N to binary\n    if N.isbit():\n        return bin(N)\n    else:\n        return '%x' % N", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 1:\n        return \"\"\n    d = 0\n    while d < N:\n        d = d + 1\n        if d == N:\n            return d\n    return \"\"\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    n = N # # N is the length of the output (binary)\n    x = [] # The bits to be output\n    i = 1 # Counter to track digits of x\n    j = 1\n    d = 0 # Data to be output\n    \n    for k in range(N):\n        x.append(k)\n        d = d * 10 + k + 1\n        j = j * 10 + k + 1\n        i = i * 10 + k + 1\n    \n    for i in range(0, N):\n        j = j * 10 + k + 1\n        while i < N:\n            j = j * 10 + k + 1\n            d = d * 10 + i + 1\n            j = j * 10 + k + 1\n            i = i * 10 + k + 1\n        x.append(d)\n    return '{}'.format(x)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # If N > 10000 or N = 1, give no answer\n    if (N > 10000) or (N == 1):\n        return \"\"\n    # Calculate the sum of digits\n    result = \"\"\n    while True:\n        result += _digits_to_be_solved(N, 1, 0)\n        if (N % 1000) == 0:\n            break\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = N\n\n    total = 0\n    digits = [0]\n    for i in range(N):\n        digits.append('1')\n    for digit in digits:\n        total += digit\n    return int(total)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    r = 0\n    b = 0\n    i = 0\n    if N <= 0:\n        return (\"\")\n    while i < N:\n        r = r * (b << i)\n        b = b << (i - 1)\n    return (str(r) + str(b))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    # Get the digit number\n    n = int(N)\n    digits = [ int(n) for n in range(n, 9, -1) ]\n    # print(digits)\n    #print(''.join(digits))\n    return ''.join(digits)\n    \n    return ''.join([int(x) for x in digits])\n        \n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Minimum number of digits\n    if N < 0:\n        raise ValueError(\"Maximum number of digits must be greater than 0\")\n    # Maximum number of digits\n    if N > 10000:\n        raise ValueError(\"Maximum number of digits must be less than 10000\")\n    # Number of digits to print\n    if N % 2 == 0:\n        num = N / 2\n    else:\n        num = N / 2 + 1\n    # Total number of digits\n    d = 0\n    while num >= 0:\n        d += 1\n        if d % 2 == 0:\n            num = num / 2\n        else:\n            num = num / 2 + 1\n    # Get total digits\n    return d.to_bytes()", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Resize to be in the range [0, 10000].\n    N = int(N)\n    self.reset()\n    \n    # Get digit sequence\n    digits = self._Digits()\n    \n    # Get digit count\n    digits.update(self._DigitCounts())\n    digits.update(self._DigitStrings())\n    digits.update(self._DigitIndices)\n    \n    # Get digits sum\n    digits.sum()\n    digits.reset()\n    digits.update(self._DigitsSum())\n    \n    # Check if number is a digit.\n    if len(digits) == 0:\n        return ''\n    else:\n        return str(int(digits.total()))\n    \n    # Get digits sum\n    digits.update(self._DigitsSum())\n    digits.reset()\n    digits.update(self._DigitsSum())\n    \n    # Return the sum of digits.\n    return str(int(digits.total()))\n    \n    # Set digit count to the specified value.\n    digits.update(self._DigitCounts(value))\n    digits.update(self._DigitStrings(value))\n    digits.update(self._DigitIndices(value))\n        \n    # Set digit strings to the specified value.\n    digits.update(self._DigitsStrings(value))\n    digits.update(", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 1:\n        raise ValueError(\"Input must be a positive integer.\")\n    return get_digits(N).join('') + get_digits(N - 1).join('') +'' + get_digits(N - 2).join('') + get_digits(N - 3).join('') +'' + get_digits(N - 4).join('') +'' + get_digits(N - 5).join('') +'' + get_digits(N - 6).join('') +'' + get_digits(N - 7).join('') +'' + get_digits(N - 8).join('') +'' + get_digits(N - 9).join('') +'' + get_digits(N - 10).join('')", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    output = \"\"\n    for i in range(N):\n        output += bin2string(i)\n    return output", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        raise ValueError(\"Value must be greater than zero.\")\n    S = ''\n    for i in range(N):\n        S += chr(ord(i)^8)\n    return S", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    def ndex(i):\n        return i + 1\n    \n    sum = 0\n    for i in range(0, N):\n        for j in range(i, i + 1, 1):\n            sum += j*(ndex(i) - ndex(j) + 1) + 1\n    return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    # TODO: Implement implementation\n    #assert len(N) >= 2, 'Attempt to solve sum of digits in binary of' + str(N)\n    print('Calculating total sum of digits in binary of' + str(N))\n    \n    return int(math.ceil(sum([(i + 1) % N for i in range(N)])))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # N must be a positive integer, or exit.\n    if not N:\n        raise ValueError(\"Incorrect number.\")\n    \n    # N must be a positive integer, or exit.\n    if not N:\n        raise ValueError(\"Incorrect number.\")\n\n    # N must be a positive integer, or exit.\n    if not N:\n        raise ValueError(\"Incorrect number.\")\n\n    # N must be a positive integer, or exit.\n    if not N:\n        raise ValueError(\"Incorrect number.\")\n\n    # N must be a positive integer, or exit.\n    if not N:\n        raise ValueError(\"Incorrect number.\")\n\n    # N must be a positive integer, or exit.\n    if not N:\n        raise ValueError(\"Incorrect number.\")\n\n    # N must be a positive integer, or exit.\n    if not N:\n        raise ValueError(\"Incorrect number.\")\n\n    # N must be a positive integer, or exit.\n    if not N:\n        raise ValueError(\"Incorrect number.\")\n\n    # N must be a positive integer, or exit.\n    if not N:\n        raise ValueError(\"Incorrect number.\")\n\n    # N must be a positive integer, or exit.\n    if not N:\n        raise ValueError(\"Inc", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    b = \"\"\n    for n in range(N):\n        b += ord(b[n]) << 6\n    return b", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return \"\".join(self.digits(n) for n in range(N))\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = int(N)\n    if N < 0:\n        raise ValueError(\"Value must be positive\")\n    out = \"\"\n    for i in range(N):\n        out += \"0+\"\n        if i % 2 == 0:\n            out += \"1\"\n        else:\n            out += \"0\"\n        i = i + 1\n    return out", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    #Create a new object\n    O = zeros(N)\n    for i in range(N):\n        #Calculate the sum\n        O(i) = sum(0 <= x <= x + N * (1 - x) for x in range(N))\n    #Return the output\n    return O", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Get the digit sum\n    r = []\n    for i in range(N):\n        # Get a substring of length N\n        substring = \"\"\n        substring_len = len(i)\n        substring_len = int(substring_len)\n        if substring_len > 0:\n            substring = substring[:substring_len] + i\n        r.append(substring)\n\n    return \"{0:0.001}.{0:0.001}\".format(*r)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    global sum_of_digits\n    \n    def _combine_digits(a):\n        \"\"\"\n        Combines digits in a number.\n        \"\"\"\n        if a > 0:\n            for i in range(1, a, 1):\n                sum_of_digits += a * (i + 1)\n            return sum_of_digits\n        else:\n            return a\n\n    _combine_digits(1)\n\n    def _sum_of_digits(a):\n        \"\"\"\n        Sum of digits in a number.\n        \"\"\"\n        if a > 0:\n            sum_of_digits += _combine_digits(a)\n        else:\n            return 0\n\n    return _sum_of_digits", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Run the program.\n    N = int(N)\n    return \" \".join([1 for i in xrange(N)])", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    n = N\n    result = \"\"\n    for i in range(n):\n        x = i / (n - 1)\n        result += str(x) + \" \";\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    assert N > 0\n    x = []\n    for i in range(N):\n        x.append(i % 10)\n    return '?'.join(x)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    result = \"\"\n    n = N\n    result += int(N) * int(N / 2) * int(N / 4)\n    for i in range(n):\n        result += \" \" * (i % 2 == 0)\n        result += int(N % 2 == 0)\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = 0\n    for i in range(N):\n        digits += 1\n    return '%0d' % digits", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    result = \"\"\n    for i in range(N):\n        result += str(int(i)) + \" \"\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    def __builtin__(N):\n        result = []\n        for i in range(N):\n            result.append(int(''.join([i * i])))\n        return '(' + ', '.join(result) + ')'\n    \n    return __builtin__", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Compute the sum of digits.\n    digits = 0\n    while True:\n        if not digits % 2:\n            break\n        digits = digits / 2\n    print \"  %s = \" % (numbers_to_string(digits))\n\n    # Return the result.\n    return strings_to_string(digits)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return \"\".join([i.to_bytes(N) for i in xrange(N)])", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    res = \"\"\n    \n    N = int(N)\n    while N > 0:\n        t = 1\n        for i in range(N):\n            res += str(t * (i + 1)).zfill(2)\n            t *= 2\n        \n        N = N - 1\n    return res", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    out = \"\"\n    n = 1\n    while n < N:\n        for i in range(n, N):\n            out += chr(ord(''.join(ord(digit))) % 10)\n        n += 1\n    return out", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        print('ERROR: N must be a positive integer.')\n        return\n    if len(N)!= 1:\n        print('ERROR: N must be a positive integer.')\n        return\n    if N > 10000:\n        print('ERROR: N must be a positive integer.')\n        return\n    n = 1\n    while n < N:\n        m = 1\n        while n >= 1:\n            m += 1\n            n -= 1\n        x = (m + n) // 2\n        y = m * (2 - m) // 2\n        if x < 0:\n            x = 0\n        if y < 0:\n            y = 0\n        if y > 0:\n            x += 1\n        if x > 1:\n            x -= 1\n        if x > 2:\n            y += 1\n        if y > 2:\n            y -= 1\n        if x > 3:\n            n += 1\n        if y > 3:\n            n -= 1\n        if n > 3:\n            n -= 1\n        return x + y + ((n - 1) * (2 - n) // 2)\n    return \"\"</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Allocate memory for output\n    N = N.astype(int)\n    output = ''\n    # Get the output\n    while N >= 0:\n        output += string.split(int(input('Enter digit: ')), 2)[0]\n        N -= 1\n    # Print out\n    print output\n    return output", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    res = \"\"\n    total = 0\n    for digit in xrange(0, N-1, 1):\n        total += int(digit)\n    res = \"\".join(sorted(reversed(sorted(list(iter(range(total)))))))\n    return res", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digitCount = 0\n    for i in range(0, len(N)-1):\n        digitCount += (i * (i + 1) + 1) % 10\n    return digitCount", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    from math import add, pow, mod, floor, floorPow, max\n    if N <= 0:\n        return \"\"\n    if N <= 10000:\n        return str(add([(i + 1) % N) for i in range(N)]))\n    else:\n        return str(pow([(i + 1) % N) for i in range(N)]) + \".\" + str(pow([(i + 1) % N) for i in range(N)]) + str(pow([(i + 1) % N) for i in range(N)]) + str(pow([(i + 1) % N) for i in range(N)]) + str(pow([(i + 1) % N) for i in range(N)]) + str(pow([(i + 1) % N) for i in range(N)]) + str(pow([(i + 1) % N) for i in range(N)]) + str(pow([(i + 1) % N) for i in range(N)]) + str(pow([(i + 1) %", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        raise ValueError(\"negative number\")\n    return int('.'.join(str(x) for x in xrange(N)))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        return \"\"\n    if N <= 10:\n        return \"\"\n    i = 0\n    while i < len(N):\n        if i % 2 == 0:\n            return i % 2 * i\n        else:\n            i += 1\n    return \"\"", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # limit to a maximum number of digits \n    digits = N\n\n    def prefix(i, s):\n        if s == \"0000\":\n            return \"0\"\n        else:\n            return s.upper() + s\n\n    N = N.encode('ascii', 'ignore')\n    # create a binary string\n    result = \"\"\n    for i in range(0, len(N)):\n        result += prefix(i, N.shift(i) + N.shift(i)) + N.shift(i)\n    result = result.lower()\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # The bits of the output are as follows:\n    # The first bit is \"1\"\n    # The second bit is \"0\"\n    # The third bit is 1 if the sum is less than or equal to N\n    # The fourth bit is 1 if the sum is greater than or equal to N\n    # The fifth bit is 1 if the sum is 1\n    # The sixth bit is 1 if the sum is 2\n    # The seventh bit is 1 if the sum is 3\n    # The eighth bit is 1 if the sum is 4\n    # The ninth bit is 1 if the sum is 5\n    # The tenth bit is 1 if the sum is 6\n    # The eleventh bit is 1 if the sum is 7\n    # The twelfth bit is 1 if the sum is 8\n    # The thirteenth bit is 1 if the sum is 9\n    # The fourteenth bit is 1 if the sum is 10\n    # The fifteenth bit is 1 if the sum is 11\n    # The sixteenth bit is 1 if the sum is 12\n    # The seventeenth bit is 1 if the sum is 13\n    # The eighteenth bit is 1 if the sum is 14\n    # The nineteenth bit is 1 if the sum is 15\n    # The twentieth bit is 1", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    nums = []\n    for x in range(0, N, 3):\n        if x == 1:\n            nums.append(x)\n        else:\n            nums.append(0xF & x)\n    return''.join(nums)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = []\n    \n    if (N <= 0):\n        raise ValueError(\"Input parameter should be non-negative\")\n        \n    while (N > 0):\n        r = 0\n        for i in range(N):\n            if (i % 2) == 0:\n                r += 1\n            else:\n                r *= 2\n    \n    digits.append(r)\n\n    return \"\".join(digits)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = N\n\n    def _num(x):\n        \"\"\"Return the binary number representation of x.\"\"\"\n        try:\n            return long(x) & 0xff\n        except ValueError:\n            raise ValueError(\"X could not be converted to a long\")\n\n    # ===========================\n    # Regular expression for digits\n    # ===========================\n    regex = re.compile(r'[0-9]*([0-9]*([0-9]*)([0-9]*)([0-9]*)')\n\n    # ===========================\n    # Regular expression for numbers that start with 00\n    # ===========================\n    numStart = re.compile(r'0{10}[^0-9]')\n\n    # ===========================\n    # Regular expression for numbers that start with 11\n    # ===========================\n    numStart11 = re.compile(r'11{10}[^0-9]')\n\n    # ===========================\n    # Regular expression for numbers that start with 12\n    # ===========================\n    numStart12 = re.compile(r'12{10}[^0-9]')\n\n    # ===========================\n    # Regular expression for numbers that start with 13\n    # ===========================\n    numStart13 = re.compile(r'13{10}[^0-9]')\n\n    # ===========================\n    # Regular expression for numbers that start with 14\n    # =", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    # Base of logarithm\n    a = (N - 1) / 10\n    b = (N - 1) % 10\n    \n    # Find all digits of N\n    while a > b:\n        a /= 10\n        b /= 10\n        \n    # Compute the sum\n    sum = a * b\n    return str(sum) + \" \" + str(a) + \" \" + str(b) + \" \" + str(a + b)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"\"\n    if N <= 0:\n        raise ValueError(\"Input must be positive integer\")\n    if N > 10000:\n        raise ValueError(\"Input must be greater than 10000\")\n    digits = N % 2\n    if digits!= 0:\n        raise ValueError(\"Digit count is too high\")\n    #Convert the total number to binary\n    if digits > 1:\n        total = (int(N * 2) + 1)\n    else:\n        total = (int(N * 2) + 1)\n    return \"%.2f\" % (total) #total in binary number\n\n    return \"{:02x}\".format(total) #total in decimal number", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    \n    if N > 10000:\n        raise ValueError(\"Incorrect N\")\n    \n    for digit in digits:\n        if digit > N:\n            break\n        else:\n            digit = '0' + digit\n            while digit > N:\n                digit = '0' + digit\n            print digit\n    \n    return digit", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        raise ValueError(\"Input must be greater than 0\")\n    if N > 10000:\n        raise ValueError(\"Input must be greater than 10000\")\n\n    return str(int(math.log10(N)))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = 0\n    return \"\".join(i for i in range(N, N + 1, N))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    output = \"\"\n    sum = 0\n    for digit in range(0, N):\n        sum += 1\n    if sum == N:\n        output += \"010\"\n    else:\n        output += \"111\"\n    return output", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        print(\"Error: N must be >= 0.\")\n        return \"\"\n    sum = 0\n    for i in range(1, N):\n        sum += i\n    return sum.to_string()", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    x = \"\"\n    for i in range(0, N):\n        x += str(int(i, 16))\n    return x", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # First we create a list of digits\n    digits = []\n    for i in range(N):\n        digits.append(str(i))\n    # We add each digit to the list\n    for digit in digits:\n        num = int(digit)\n        if num > 0:\n            digits.pop(digit)\n    return \"\".join(digits)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 0:\n        return \"***NOT WORKING***\"\n    # Create a list of digits\n    d = list(range(N))\n    # Loop through all digits\n    for i in d:\n        if i > 0:\n            print(i)\n    return \"\".join(str(x) for x in d)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    print('Input: ', N)\n    while True:\n        answer = int(input('What is your answer? Enter 1 for yes and 0 for no: '))\n        if answer == '1':\n            print('You got it!')\n            break\n        else:\n            print('You cannot solve this problem!')\n            break\n    return answer\n\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Get the total sum\n    t = 0\n    while t < N:\n        n = t\n        if t % 2 == 1:\n            n = -n\n        # Calculate the remainder\n        r = (n - (t - 1)) / 2\n        r = (r + 1) * (t % 2)\n        if r > 0:\n            n = n - r\n        # Sum the digits\n        for i in range(t):\n            t = t + i\n        t += 1\n    return(n.encode('utf-8')[:-1]).lower() + \" \" + \" \".join([str(r) for r in n]).lower()", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    print(\"Input: \" + str(N))\n    digits = \"\"\n    for i in range(N):\n        digits += chr(ord(i) % 10) + \"0123456789ABCDEF\"\n    print(\"Output: \" + str(digits))\n    return digits", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Numerically compute the sum of digits\n    for i in range(N):\n        # Convert the integer number to binary\n        bin = ord(i) / 256\n        # For each digit, make a binary number\n        out = bin % 10\n        # Store the result in a list\n        sum_digits = []\n        for digit in out:\n            sum_digits.append(digit)\n        return sum_digits", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    a = 0\n    digits = 0\n    current = \"\"\n    last_used = 0\n    for i in xrange(N):\n        a += int(i)\n        digits += 1\n        if a == 0:\n            print \"ERROR!\"\n            continue\n        last_used = a\n        current = \"\"\n        while True:\n            if last_used > 0 and i % 100 == last_used:\n                print \"Satisfied\"\n            last_used = int(i) - 1\n            current += int(i) + 1\n            last_used = int(i) - 1\n    return current", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    n = int(N)\n    sum = 0\n    while n:\n        sum = sum + 1\n    return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if (N > 10000):\n        raise ValueError(\"Number too large\")\n\n    for i in range(0, N):\n        result = int('0.' * (i+1))\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if 0 <= N <= 10000:\n        N = int(N)\n        i = 0\n        for n in range(N):\n            s = \"\"\n            while n > 0:\n                s += binary2bin(n)\n                n = bin2bin(n - 1)\n            return s", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = \"\"\n    for i in range(0, N):\n        digits += '0' + i\n    return ''.join(digits)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    # Initialize the variables\n    d = 0\n    \n    # Calculate the sum of digits for all the digits\n    for i in range(N):\n        d += 1\n    \n    # Return the sum of digits\n    return str(d)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    def add(x, y):\n        if x <= y:\n            return x\n        else:\n            return y + x\n    return int.sum(y for x in xrange(N))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Create array of digits\n    digits = [0] * N\n    # Loop over digits and set length of array to N\n    for i in range(N):\n        digits[i] = i\n    # Evaluate sum of digits\n    result = ''\n    for i in range(N):\n        result += str(digits[i])\n    # Convert result to binary\n    return result.ravel()", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    i = 1\n    while 1:\n        i = i * 2\n        if i == N:\n            print(\"valid\")\n            break\n        else:\n            print(\"invalid\", i, \"N digits\")\n\n    return i", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    result = \"\"\n    num = 0\n    start = 0\n    digit = 0\n    for i in range(N):\n        num = num + (i * 10)\n        start = start + 10\n        digit = digit + (i * 10)\n    for digit in digit:\n        result = result + ('0' + digit)\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    str = \"110\"\n    str = str.encode('latin1')\n    str = str.encode('ascii')\n    str = str.encode('utf-8')\n    i = 0\n    j = 0\n    k = 0\n    l = 0\n    while i <= N:\n        if k == 0:\n            i = j\n        else:\n            j = k\n        j += 1\n        i += 1\n        k += 1\n        l += 1\n        if l == N:\n            break\n    if i == N:\n        print('no digits')\n    else:\n        print(str[:i] + str[i:i+2] + str[i+2:i+2] + str[i+2:i+4] + str[i+4:i+4] + str[i+4:i+8] + str[i+8:i+8] + str[i+8:i+12] + str[i+12:str[i+12:str[i+12:str[i+12:str[i+12:str[i+12:str[i+12:str[i+12:str[i+12:str[i+12:str[i+12:str[i+12:str[i+12:str[i+12:str[i+12:str[i+12:str[i+", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    for i in range(N):\n        if i < 10 or i > 10:\n            return(\"\")\n        if i % 10!= 0:\n            return(i + \"\")\n        else:\n            return(i + \".\" + str(i / 10) + \".\" + str(i % 10))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return int(sum(b for b in string.digits(N)) for b in binary.digits(N))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Initialize\n    result = ''\n    # Loop through every digit\n    for digit in range(N):\n        # Get the digit number\n        number = int(digit)\n        # Get the difference between the digit and the previous digit\n        difference = int(digit - number) // 10\n        # Get the sum of digits in this digit\n        sum = 0\n        # Get the difference between the digit and the previous digit\n        difference = sum - difference\n        # Get the sum of digits in this digit\n        sum += difference\n        # Increase the result\n        result += String(number, '0', len(number) - 1) + String(difference, '0', len(difference) - 1)\n        # Decrease the sum\n        sum -= difference\n        # Increase the difference\n        difference += difference\n    return result\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"\"\n    n = int(N)\n    if n == 0:\n        return \"\"\n    for i in range(n):\n        if i % 2 == 0:\n            return \"\"\n        else:\n            return \"011\"+str(i)\n\n    return '1000' + str(n) + '100' + str(n / 2) + '010'+str(n % 2) + '0101'+str(n / 3) + '0110'+str(n % 3) + '1101'+str(n % 3) + '1111'+str(n % 4) + '1102'+str(n % 4) + '1111'+str(n % 5) + '1111'+str(n % 5) + '1111'+str(n % 5) + '1111'+str(n % 6) + '1111'+str(n % 6) + '1111'+str(n % 6) + '1111'+str(n % 7) + '1111'+str(n % 7) + '1111'+str(n % 7) + '1111'+str(n % 7) + '1111'+str(n % 7) + '1111'+str(n % 8)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        raise ValueError(\"Value N must be positive.\")\n    \n    # Compute the total sum of digits.\n    while N:\n        res = 0\n        for i in range(N):\n            res += i\n        N -= res\n    \n    # Return the output.\n    return \"\\\"\" + str(res) + \"\\\"\"", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    res = \"\"\n    for i in range(N):\n        res += \"1\"\n    return res", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    d = 0\n    while d <= N:\n        # Compute the number of digits\n        while d % 10 == 0:\n            d /= 10\n        # Run the algorithm\n        while d % 10 == 0 and d!= 0:\n            d = xor(d, d >> 1)\n        # The number of digits has been reached.\n        d += 1\n    return d", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        return 0\n    else:\n        return ''.join(str(i) for i in range(N))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    f = \"\"\n    for i in range(N):\n        if i % 2 == 0:\n            f += \"00\"\n        else:\n            f += \"11\"\n    return f", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Calculate the integer for the sum\n    m = 0\n    for i in range(N):\n        m += i*(i+1)//2\n    # Return the output string\n    return '{0}'.format(m)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    return (\"00 \" + \"\".join([str(x) for x in range(N)]))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 0:\n        raise ValueError('N must be positive')\n    ## if (N < 0) and (N > 10000):\n    #    raise ValueError('N must be between 0 and 10000')\n    N = N//100\n    if N < 0:\n        return 'N < 0'\n    ## if (N < 0):\n    #    return 'N = 0'\n    ## else:\n    #    return 'N ='+ str(N)\n    return str(N)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    from sympy import symbols, isint\n    \"\"\"\n    1 = True\n    2 = True\n    3 = True\n    \"\"\"\n    %p\n    1 = True\n    2 = True\n    3 = True\n    \"\"\"\n    +%p\n    1 = True\n    2 = True\n    3 = True\n    \"\"\"\n    -%p\n    1 = True\n    2 = True\n    3 = True\n    \"\"\"\n    ^%p\n    1 = True\n    2 = True\n    3 = True\n    \"\"\"\n    &%p\n    1 = True\n    2 = True\n    3 = True\n    \"\"\"\n    ^&%p\n    1 = True\n    2 = True\n    3 = True\n    \"\"\"\n    ^+%p\n    1 = True\n    2 = True\n    3 = True\n    \"\"\"\n    ^-%p\n    1 = True\n    2 = True\n    3 = True\n    \"\"\"\n    ^-&%p\n    1 = True\n    2 = True\n    3 = True\n    \"\"\"\n    %@\n    1 = True\n    2 = True\n    3 = True\n    \"\"\"\n    %#\n    1 = True\n    2 = True\n    3 = True\n    \"\"\"\n    %+\n    1 = True\n    2 = True\n    3 = True\n    \"\"\"\n    %-%\n    1 = True\n    2 = True\n    3 = True", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Compute number of digits:\n    num_digits = len(int(N))\n    # Add 0 to the number of digits if there are no digits in the number\n    if num_digits == 0:\n        num_digits = int(N) - 0\n    # Create an array of integer and its numbers of digits:\n    d_array = [int(x) for x in range(0, num_digits, 1)]\n    # Return the sum of digits:\n    return int(sum(d_array))\n    # End of code...\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0 or N >= 10000:\n        return \"\"\n\n    # Get the sum of digits for a given integer.\n    return map(lambda x: int(x), map(lambda x: x.split())).sum()", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"\"\n    num = 0\n    for i in range(N):\n        num = num + 1\n    return int(num)[0:10]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    res = \"\"\n    while N:\n        res += str(N)\n        N = N - 1\n    return res", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = 0\n    for i in xrange(N):\n        digits += ord(i)\n    return '|'.join(str(ord(x) for x in digits))[:-1]\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    d = 0\n    x = \"\"\n    for i in range(N):\n        x += chr(int(i) % 10) + chr(int(i) / 10)\n    return x.rjust(1, '0') + x.rjust(1, '0') + x.rjust(1, '0')", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    T = 0\n    i = 1\n    N = N\n    while i < N:\n        for j in range(i, i + 1):\n            if int(N * j) % 2 == 1:\n                T = T + 1\n                break\n        i += 1\n    return T", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    d = 0\n    for i in range(N):\n        d += 1\n        if i % 2 == 0:\n            print('{}'.format(i))\n        else:\n            print('{}'.format('-'*d))\n\n    return d\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 1:\n        raise ValueError(\"negative integer provided\")\n    if N > 10000:\n        raise ValueError(\"negative integer provided\")\n    num = N\n    neg = -(N + 1) * (N - 1)\n    if num % 2 == 0:\n        raise ValueError(\"negative integer provided\")\n    if neg % 2 == 0:\n        raise ValueError(\"negative integer provided\")\n    if num < 0:\n        num = -(N + 1) * (N - 1)\n    if num == 0:\n        return \"0\"\n    else:\n        return bin(num)[2:]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    total = []\n    for i in range(N):\n        total.append(i % 10)\n    return \",\".join(total)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    n = int(N)\n    sum = 0\n    for i in range(n):\n        sum += i\n    return sum.tostring().decode('utf-8')", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return int(''.join([2 * x for x in range(N)]))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    from itertools import chain\n    from collections import Counter\n    \n    def last(iterable):\n        last = None\n        for value in iterable:\n            if value:\n                last = value\n                break\n        return last\n\n    if N <= 0:\n        return \"\"\n    result = []\n    for n in range(N):\n        result.append(\"\")\n        result.append(\"\")\n        result.append(\"\")\n        result.append(\"\")\n        result.append(\"\")\n        result.append(\"\")\n        result.append(\"\")\n        result.append(\"\")\n        result.append(\"\")\n        result.append(\"\")\n        result.append(\"\")\n        result.append(\"\")\n        result.append(\"\")\n        result.append(\"\")\n        result.append(\"\")\n        result.append(\"\")\n        result.append(\"\")\n        result.append(\"\")\n        result.append(\"\")\n        result.append(\"\")\n        result.append(\"\")\n        result.append(\"\")\n        result.append(\"\")\n        result.append(\"\")\n        result.append(\"\")\n        result.append(\"\")\n        result.append(\"\")\n        result.append(\"\")\n        result.append(\"\")\n        result.append(\"\")\n        result.append(\"\")\n        result.append(\"\")\n        result.", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Calculate the digits sum\n    S = 0\n    while S < N:\n        digit = 0\n        for i in range(N):\n            digit += int(input(\"digits: \"))\n            if digit > S:\n                break\n        S += digit\n    return \" \".join(map(chr, S))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    if N == 0:\n        return \"N/A\"\n    \n    T = N\n    s = \"\"\n    for i in range(1, N):\n        s += chr(i)[2:]\n    return s", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Allocate memory for binary numbers\n    n = int(N)\n    if n < 0:\n        print(\"N is negative\")\n        return\n    # Loop over all the digits of N\n    for i in range(n):\n        # Sum the digits\n        sum = 0\n        # Initialize the sum of all the digits\n        for j in range(i):\n            sum += str(j)[4:]\n        # Check if sum of all the digits is equal to N\n        if sum == N:\n            print(\"All digits of N have sum equal to N\")\n            return\n        # If not, return the sum of the digits\n        else:\n            print(\"All digits of N have sum greater than N\")\n            return sum\n    return \"\"\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = [0] * N\n    for i in range(N):\n        digits[i] = bin(i) & 0xFFFF\n    return \"\".join(digits)</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 0:\n        raise ValueError(\"Input must be a positive integer!\")\n    if N > 10000:\n        raise ValueError(\"Input must be a positive integer!\")\n    d = 0\n    for i in range(N):\n        d += ord(i)\n    return d", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    n = N\n    print \"N:\", n\n    s = \"\"\n    for i in range(n):\n        s += i*10\n    return s", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = int(N)\n    if N <= 0:\n        print(\"integer too small\")\n        return\n    i = N % 10\n    j = N / 10\n    if i <= j:\n        return str(N % 10)\n    else:\n        return str(j)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    result = \"\"\n    for i in range(N):\n        result += (i + 1) * \"0\"\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Get N as a positive integer\n    if not isinstance(N, int):\n        raise TypeError(\"Argument to solve must be a positive integer.\")\n    # Create a new instance of A and initialize it.\n    A = A(N)\n\n    # Perform the linear solve using A.\n    num = A.solve(N)\n    # Convert the result to a string\n    num = str(num).replace(' ', '')\n\n    # Replace the digits of the result with their complements\n    num = num.replace('D', '0')\n\n    return num", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # print('Setting N = {}'.format(N))\n    # print('Calculating total sum of digits')\n    digits = {}\n    for i in range(N):\n        digit = i\n        digits[digit] = ''\n        for j in range(1, N-1):\n            digit += 1\n        digits[digit] = digits[digit].rstrip('0')\n    # print('Total sum of digits = {}'.format(len(digits)))\n    # print('Total sum of digits = {}'.format(sum(digits)))\n    return digits.keys()[:]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return \"\".join([i for i in range(1, N + 1)] * 1000)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = 0\n    # We convert digits to zeros\n    while len(sum) < N:\n        sum = 0\n        for i in range(N):\n            sum = sum * 0 + ord('0' + i) // 2\n    if sum % 2!= 0:\n        raise ValueError(\"Value %s has more than 2 digits.\" % sum)\n    return sum.zfill(2)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    sum = 0\n    digits = 0\n    for i in range(0, N, N):\n        sum += i\n        digits += i*10\n    print(sum)\n    print(digits)\n    return ''.join(string.maketrans(s,'' for s in digits))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return \"\".join([int(x) for x in range(N)])", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Variables\n    # Generated from N. The input is just a sequence of digits.\n    digits = []\n    # Number of digits.\n    nums = N\n    # Current number.\n    #\n    i = 1\n    # For the current digit.\n    while i <= nums:\n        # Accumulate.\n        digits.append(char(i % 10))\n        # Increment.\n        i += 1\n    # Return the sum of digits.\n    return ''.join(digits)\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        raise ValueError(\"integer must be greater than 0\")\n\n    if N == 1:\n        return 0\n    if N == 2:\n        n = 1\n        while n > 1:\n            x = 0\n            y = 1\n            while n > 1:\n                x = x * x + y\n                y = y * y\n            return x, y\n    else:\n        # 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8 -> 9 -> 10 -> 11 -> 12 -> 13 -> 14 -> 15 -> 16 -> 17 -> 18 -> 19 -> 20 -> 21 -> 22 -> 23 -> 24 -> 25 -> 26 -> 27 -> 28 -> 29 -> 30 -> 31 -> 32 -> 33 -> 34 -> 35 -> 36 -> 37 -> 38 -> 39 -> 40 -> 41 -> 42 -> 43 -> 44 -> 45 -> 46 -> 47 -> 48 -> 49 -> 50 -> 51 -> 52 -> 53 -> 54 -> 55 -> 56 -> 57 -> 58 -> 59 -> 60 -> 61 -> 62 -> 63 -> 64 -> 65 -> 66 -> 67 -> 68 -> 69 -> 70 -> 71 -> 72 -> 73 -> 74 -> 75 -> 76 -> 77 -> 78 -> 79 -> 80 -> 81 -> 82 -> 83 -> 84 -> 85 -> 86 -> 87 -> 88 -> 89 -> 90 -> 91 ->", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \"\"\"\n    for i in range(0, N, 2):\n        for j in range(0, N, i + 1):\n            if (i % 2 == 0):\n                m = i + j\n            else:\n                m = i - j\n            if (m >= 0) and (m < N):\n                sum = 1\n                for k in range(i + 1, m):\n                    sum += ((1 << k) - k) * ((1 << i + k) - i + k)\n                sum = sum >> 1\n                m = sum & 1\n                i += 1\n        sum = sum & 1\n        yield int(sum) + 1\n    \"\"\"\n    return \" \".join(str(i) for i in range(0, N, 2) + (1 << i) + (1 << j) + (1 << i + j) + (1 << i + i) + (1 << j + j))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    num = []\n    for i in range(N):\n        if i % 2 == 0:\n            num.append(int(i))\n        else:\n            num.append(int(i * 2))\n    return \"\".join(num)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    assert N < 1000\n    i = 1\n    while i <= N:\n        sum = 0\n        result = \"\"\n        while sum < N:\n            result += (sum % 10) + '0'\n            sum /= 10\n        result = result + result[:-1]\n        result = result[:-1]\n        result += result[1:]\n        i += 1\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return \"\".join([m for m in xrange(N) if m > 0])", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        raise ValueError('Input number not a positive number.')\n\n    while 1:\n        res = 1\n        c = ''\n        sum = 0\n        for i in range(N-1):\n            sum += (1<<i)*(i+N)\n            if sum == 1:\n                break\n        while sum == 1:\n            res += 1\n        if res == 0:\n            return ''\n        return str(res)\n\n    return res\n\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    totalDigits = 0\n    for digit in range(N):\n        totalDigits += 1\n    return totalDigits.to_bytes('hex')\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 0:\n        raise ValueError(\"negative number not allowed.\")\n    if N > 10000:\n        raise ValueError(\"overlaps with 1000.\")\n    if N <= 0:\n        return \"\"\n    cnt = 0\n    while cnt < N:\n        cnt += 1\n        rep = int(\"%02x\" % (cnt % 1000000))\n        if cnt % 1000!= 0:\n            cnt /= 1000\n        return rep\n    cnt += 1\n    rep = int(\"%02x\" % (cnt % 1000000))\n    return rep", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    out = ''\n    for i in range(N):\n        if i == 0:\n            out += '0'\n        else:\n            out += '1'\n    return out", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    log = log10(N)\n    if log < 0 or log > 10**9:\n        raise ValueError('log not between 0 and 10**9')\n\n    N = int(N)\n    logsum = 0\n    for j in range(log):\n        logsum += 1\n    logsum /= log\n\n    N = int(logsum)\n    print('{:.4f}'.format(logsum))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"(0)\"\n    digits = [0]*N\n    return \"(\" + str(k) + \")\".join([digit for k in digits])", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = []\n    x = 0\n    while x < N:\n        x += 1\n        digits.append(x)\n    return ''.join(digits)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return \"\".join(to_bytes(i) for i in range(N, 0, -1))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    result = \"\"\n    for i in range(0, N, 2):\n        result += \"01\"\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = int(N)\n    digits = set(range(N))\n    if len(digits) == 0:\n        return \"\"\n    return ''.join(sorted(digits, key=lambda x: x, reverse=True))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    n = int(N)\n    result = []\n    for i in range(1, n):\n        result.append(''.join([chr(ord(c) + ord('x') * i) for c in ord('x') * i]))\n    return ''.join(result)</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return 0", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    result = \"\"\n    for i in range(0, N - 1):\n        result += \" \" + str(i)\n    result += \" \" + str(N)\n    return result.encode('ascii', 'ignore').decode('ascii', 'ignore')", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0 or N >= 10000:\n        return \"NaN\"\n    \n    # Calculate the number of digits\n    n = int(math.log10(N))\n    return \"00000000000000000\".join([i for i in range(n) if i > 0])", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Get a list of digits\n    # D = [0] * (N+1) - 1\n    for i in range(N+1):\n        digits = []\n        for j in range(i):\n            digits.append(0x80 & (1<<(i+1-j)))\n        # Output is a list with digits\n    return \"0123456789ABCDEF\".join(digits)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    from math import sqrt\n    \n    N = int(N)\n    # Initializing variables\n    sum = 0\n    for i in range(N):\n        sum += i\n    # The output\n    output = \"\"\n    for i in range(N):\n        output += str(sum)[:2]\n    # Return the output\n    return output", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        return \"-0\"\n    \n    return \" \".join([i.strip() for i in N.decode(\"ascii\").split(\" \")])", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    string = \"\"\n    for i in range(N):\n        string += (\"{0:0.}\".format(i))\n    return string", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    T = 0\n    for d in range(N):\n        T = T + d\n    return str(T)[0:-1]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    s = \"\"\n    for i in range(1, N):\n        s += (i / 10) % 10 + \"\"\n    return s", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    while N > 0:\n        if N > 1:\n            N = int(N / 2)\n        else:\n            return \"\"\n        if N > 2:\n            digits = int(N / 2) // 2\n        else:\n            digits = 2\n        output = \"\"\n        for digit in digits:\n            output += \"%02X\" % digit\n        return output", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        raise ValueError(\"Argument 'N' cannot be negative\")\n    x = [0] * N\n    while N:\n        x[0] = N % 10 + 1\n        N /= 10\n    x[-1] = 0\n    print(x)\n    return x", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    s = ''\n    for n in range(N):\n        s += ord(n) + ord('a' + n) + ord('b' + n) + ord('c' + n) + ord('d' + n) + ord('e' + n) + ord('f' + n) + ord('g' + n) + ord('h' + n) + ord('j' + n) + ord('k' + n) + ord('l' + n) + ord('m' + n) + ord('n' + n) + ord('o' + n) + ord('p' + n) + ord('q' + n) + ord('r' + n) + ord('s' + n) + ord('t' + n) + ord('u' + n) + ord('v' + n) + ord('w' + n) + ord('x' + n) + ord('y' + n) + ord('z' + n)\n\n    return s", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Create an empty binary number for this number\n    num = 0\n\n    # Get the sum of digits\n    num = num + sum([int(x) for x in range(N)])\n\n    # Return the sum of digits\n    return num.encode('hex')", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Construct the binary representation of N\n    N = int(N) # Ensure integer is greater than 0\n    i = 1\n    while i < N:\n        i += 1\n        if i == N:\n            return \"\" # No more digits\n        else:\n            return '0' + str(i)\n    return '0' + str(i)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    result = \"\"\n    if len(N) == 0:\n        return result\n    for digit in N:\n        result += '1'\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    res = \"\"\n    for i in range(0,N):\n        res += str(i) + \" \"\n    res = res[:-1]\n    return res", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return \"0123456789abcdefghijklmnopqrstuvwxyz\".join(x for x in range(N) if x > 0)\n\n    def print(N):\n        \"\"\"Print the sum of digits of N\"\"\"\n        return \"{0:s}\".format(N)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Calculate the sum of digits\n    result = \"\"\n    for n in range(0, N):\n        result += (\"00000000\" * n + \"001\" * (n + 1) + \"000\" * (n + 2) + \"001\" * (n + 3) + \"001\" * (n + 4) + \"001\" * (n + 5) + \"000\" * (n + 6) + \"000\" * (n + 7) + \"000\" * (n + 8) + \"000\" * (n + 9) + \"000\" * (n + 10) + \"000\" * (n + 11) + \"000\" * (n + 12) + \"000\" * (n + 13) + \"000\" * (n + 14) + \"000\" * (n + 15) + \"000\" * (n + 16) + \"000\" * (n + 17) + \"000\" * (n + 18) + \"000\" * (n + 19) + \"000\" * (n + 20) + \"000\" * (n + 21) + \"000\" * (n + 22) + \"000\" * (n + 23) + \"000\" * (n + 24) + \"000\" * (", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        raise ValueError(\"Zero or negative N is not allowed\")\n    if N == 0:\n        return \"\"\n    return int(math.floor(sum(bin2str(N))))", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Define the result\n    answer = \"\"\n    with open(\"./solve.txt\",\"r\") as f:\n        for line in f:\n            if line.startswith(\"(\"):\n                answer += line.split()[1].rstrip(\")\").decode('utf-8')\n            else:\n                answer += line.strip(\")\")\n        return answer", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 0:\n        raise ValueError(\"can't handle negative N\")\n    if N == 0:\n        return \"\"\n    N = N % 1000\n    # The total number of digits to return\n    sum = 0\n    i = 0\n    while i < N:\n        sum = sum + ord(i % 10)\n        i = i / 10\n    return sum", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    P = 0\n    d = 1\n    while 1:\n        for i in range(0, len(N), d):\n            if d == 0:\n                break\n            if P % N == 0:\n                d = d + 1\n            else:\n                d = d - 1\n        P += 1\n    return str(P)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    a = 0\n    # define binary digit\n    d = 0\n    # get the maximum number of digits\n    max = (int(N) + 1) % 10\n    # iterate over the digits\n    for i in range(max):\n        d = (d + i) % 10\n        a = a + d\n    return a", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        raise ValueError('Zero is not a valid digit')\n    result = ''\n    for i in range(N - 1):\n        result += '0' + str(i)\n    return result", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 0:\n        raise ValueError(\"Non-positive integer provided\")\n    if N > 10000:\n        raise ValueError(\"Too many digits for the input\")\n    result = \"\"\n    for i in range(N):\n        result += chr(0xff & (ord('A') + ord('B') + ord('C') + ord('D') + ord('E') + ord('F')) & 0xff)\n    result += chr(0xff & (ord('A') + ord('B') + ord('C') + ord('D') + ord('E') + ord('F')) & 0xff)\n    result += chr(0xff & (ord('A') + ord('B') + ord('C') + ord('D') + ord('E') + ord('F')) & 0xff)\n    result += chr(0xff & (ord('A') + ord('B') + ord('C') + ord('D') + ord('E') + ord('F')) & 0xff)\n    result += chr(0xff & (ord('A') + ord('B') + ord('C')", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    x = \"\"\n    i = 0\n    # Compute the total sum of digits\n    while i<=N:\n        l = i\n        while l<=N:\n            y = (x + (i+l)) % (i+l+1)\n            x = x[0:l]\n            i += 1\n        x = x[0:N-1]\n        i += 1\n    return x", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        raise ValueError(\"negative number is not valid\")\n    if N > 10000:\n        raise ValueError(\"too large number\")\n\n    total = 0\n    for i in range(1, N):\n        total += sum(bin(i * i * i))\n    return str(total)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    m = 0\n    while m < N:\n        m += 1\n        result = ''\n        for i in range(m):\n            result += '0' + str(i)\n        return result\n</s>", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    def find_prime(x):\n        \"\"\"Find the first prime in the set x.  Returns a string of the form\n         1 + # digits + \" \" + digits # where # is the number of digits (if any)\n        \"\"\"\n        return \" \".join([\n            2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n            16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\n            28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n            40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\n            51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,\n            63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,\n            75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,\n            87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\n            99, 100", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"\"\n    i = 1\n    while i <= N:\n        d = i % 10\n        if d == 0:\n            return \"\"\n        i = i + 1\n    return str(d)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    a = [''] * len(N)\n    for i in range(len(a)):\n        if a[i] == '':\n            a[i] = 1\n        else:\n            a[i] = (a[i] - (i % 10))\n    return a", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    val = \"\"\n    for i in range(N):\n        val += str(i) + '='\n    return val", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if 0 <= N <= 10000:\n        return ''.join([i for i in range(N, 0, -1) if i!= 0])\n    else:\n        raise ValueError('N must be positive integer.')", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    h = 0\n    for i in range(N):\n        x = 1\n        for j in range(i):\n            if (i+j) % 2 == 0:\n                x = x - 1\n            else:\n                x = x + 1\n        h = h + x\n        h = h * x\n    return h", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 0:\n        print \"N must be positive\"\n        exit(1)\n    n = int(N)\n    d = []\n    while True:\n        if n == 0:\n            break\n        elif n < 1:\n            print \"N is not a multiple of itself\"\n            continue\n        else:\n            s = int(n * n)\n            if s > n:\n                d.append(s)\n            else:\n                break\n    return ''.join(d)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if len(N) == 0:\n        raise ValueError(\"Error: N = 0!\")\n    if N % 2:\n        N = N / 2\n    if N > 10000:\n        raise ValueError(\"Error: N > 10000!\")\n    for i in range(1, N):\n        x = (i - 1) * 2 + 1\n        x = (x - 1) + 1\n        if x <= N:\n            return \"0\" + x\n        else:\n            return \"10\" + x\n\n    # return x * x + 1\n    return x + 1", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    # Check if N is an integer\n    if (N < 0 or N > 10000):\n        print 'Error: N must be an integer.'\n        return\n\n    # Get the minimum number of digits to keep\n    min_digits = 10\n    if N <= min_digits:\n        print 'Error: N must be greater than 10 digits.'\n        return\n\n    # Extract the digits in binary\n    digits = 0\n    for i in range(min_digits, N+1):\n        digits += 1\n    digits = (digits << 1) + (i / N)\n\n    # Get the total sum of digits\n    total = 0\n    for i in range(0, N-1):\n        total += digits[i]\n\n    # Return the total sum\n    return total", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    first = 0\n    last = len(binascii.decompose(binascii.uncompress(N)))\n    output = \"\"\n    for i in range(0, last, 1):\n        output += \"%02x\" % (i*(i+1)//2)\n    return output", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    # First compute the digits of N.\n    digits = (int(N))*8\n    assert digits > 0\n\n    # Compute the length of the binary representation of N.\n    length = len(digits)\n    \n    # Compute the binary representation of digits.\n    binary = []\n    for i in range(length):\n        binary.append(1)\n    return binary", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    T = 0\n    while T < N:\n        T += ord(a(N-t,t))\n    return T", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = ''\n    for i in range(0, N):\n        if i % 2 == 0:\n            digits += '0' * i\n    return digits", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    A = [0] * N + 1\n    for i in range(N):\n        A[i] = 0\n\n    return str(A).split(',')", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Convert to integer first\n    N = int(N)\n    # If N is a positive number, then return the sum of digits in binary\n    if N > 0:\n        return sum(map(chr, [chr(x) for x in (int(x) % 10) for x in N]))\n    else:\n        return \"\"", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        print \"negative input\"\n        return \"\"\n    if N >= 10000:\n        print \"too large\"\n        return \"\"\n    return \"\".join([\"%d\"%x for x in xrange(N)])", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Compute the sum of digits.\n    for d in range(N):\n        if d > 0 and d < len(str(d)):\n            return str(d).split(chr(d)[::-1])[1] + str(d)[::-1]", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = int(N)\n    lastDigit = '0' + (N - int(N) % 10)\n    if N < 10000:\n        output = lastDigit\n    else:\n        output = '00' + (int(N) % 10) + lastDigit\n    return output", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    assert(N >= 0 and N <= 10000)\n    assert(N % 2 == 0)\n    assert(N % 8 == 0)\n    assert(N % 16 == 0)\n    assert(N % 24 == 0)\n    assert(N % 32 == 0)\n\n    return N.upper() + \"\".join([(i, i % 2 == 0 and 1 or 0) for i in range(N, N + 1)]) + \"\"", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N <= 0:\n        raise ValueError(\"Input must be positive\")\n    # Compute digits\n    if N >= 1000:\n        digits = []\n        while N >= 1000:\n            digits.append(str(N)[:10] + str(N)[10:])\n            N -= 1\n    else:\n        while N >= 1000:\n            digits.append(str(N)[:10] + str(N)[3:])\n        if N > 0:\n            digits.reverse()\n        if N > 0:\n            digits.pop(0)\n    if N <= 0:\n        return \"\"\n    else:\n        return str(N)[:10] + str(N)[10:] + \" \" + str(N)[3:] + \" \" + str(N)[1:3] + digits", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    digits = [0]*(N+1)\n    for i in range(N):\n        digits[i] = 0\n    for n in range(N):\n        if n%10 == 0:\n            digits[~n] += 1\n        else:\n            digits[~n] += digits[i]\n    return \".\".join(str(i) for i in digits)", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return ''.join([i * i for i in range(N)])", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    res = \"\"\n    for i in range(0, N):\n        if i % 2 == 0:\n            res += \"0\"\n        else:\n            res += \"1\"\n    return res", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    if N < 0:\n        return ''\n    else:\n        for digit in range(N):\n            if digit in '0123456789':\n                return (digit, '')\n    return ''.join([i for i in range(N) if i in digits])", "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N > 10000:\n        raise ValueError(\"Number too large.\")\n\n    for i in range(N):\n        binary = \"\"\n        for digit in range(2, i):\n            binary += '0'*(i - digit - 1)\n        binary += binary[binary.find(\"1\"):]\n        print(binary)\n\n    return binary"]]