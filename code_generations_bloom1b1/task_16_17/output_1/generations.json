[["def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(re.findall(r'([A-Za-z0-9]+)', string))", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(string.split()) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    if string.startswith('abc'):\n        return len(string[2:])\n    elif string.startswith('abc'):\n        return len(string[2:])\n    elif string.startswith('abc'):\n        return len(string[2:])\n    elif string.startswith('abc'):\n        return len(string[2:])\n    elif string.startswith('abc'):\n        return len(string[2:])\n    elif string.startswith('abc'):\n        return len(string[2:])\n    elif string.startswith('abc'):\n        return len(string[2:])\n    elif string.startswith('abc'):\n        return len(string[2:])\n    elif string.startswith('abc'):\n        return len(string[2:])\n    elif string.startswith('abc'):\n        return len(string[2:])\n    elif string.startswith('abc'):\n        return len(string[2:])\n    elif string.startswith('abc'):\n        return len(string[2:])\n    elif string.startswith('abc'):\n        return len(string[2:])\n    elif string.startswith('abc'", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(re.findall(r'[^A-Za-z0-9]', string))", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    if string.startswith(' '):\n        return len(string[1:])\n    else:\n        return len(string)", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    if string.startswith(' '):\n        return len(string[1:])\n    else:\n        return len(string.split())", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(string.split()) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(string.split()) - len(string.split()[0].split()) - len(string.split()[1].split()) - len(string.split()[2].split()) - len(string.split()[3].split()) - len(string.split()[4].split()) - len(string.split()[5].split()) - len(string.split()[6].split()) - len(string.split()[7].split()) - len(string.split()[8].split()) - len(string.split()[9].split()) - len(string.split()[10].split()) - len(string.split()[11].split()) - len(string.split()[12].split()) - len(string.split()[13].split()) - len(string.split()[14].split()) - len(string.split()[15].split()) - len(string.split()[16].split()) - len(string.split()[17].split()) - len(string.split()[18].split()) - len(string.split()[19].split()) - len(string.split()[20].split()) - len(string.split()[", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(string.split(' ')) - len(string.split('_')) - len(string.split('-')) - len(string.split(' ')) - len(string.split('_')) - len(string.split('-')) - len(string.split(' ')) - len(string.split('_')) - len(string.split('-')) - len(string.split(' ')) - len(string.split('_')) - len(string.split('-')) - len(string.split(' ')) - len(string.split('_')) - len(string.split('-')) - len(string.split(' ')) - len(string.split('_')) - len(string.split('-')) - len(string.split(' ')) - len(string.split('_')) - len(string.split('-')) - len(string.split(' ')) - len(string.split('_')) - len(string.split('-')) - len(string.split(' ')) - len(string.split('_')) - len(string.split(", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(re.findall(r'[^A-Za-z0-9]', string))", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string.split()) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(re.findall(r'[^A-Za-z0-9]', string))", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(re.findall(r'[^A-Za-z0-9]', string))", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    if string.startswith(' '):\n        return len(string[1:])\n    else:\n        return len(string.split())", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(re.findall(r'([A-Z])', string))", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len('xyzXYZ') - len('Jerry')", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(string[::-1])", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string.split(' ')) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len('xyzXYZ') - len('Jerry')", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(re.findall(r'[^A-Za-z0-9]', string))", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len('xyzXYZ') - len('Jerry') - len('xyzXYZ') - len('Jerry') - len('Jerry') - len('Jerry') - len('Jerry') - len('Jerry') - len('Jerry') - len('Jerry') - len('Jerry') - len('Jerry') - len('Jerry') - len('Jerry') - len('Jerry') - len('Jerry') - len('Jerry') - len('Jerry') - len('Jerry') - len('Jerry') - len('Jerry') - len('Jerry') - len('Jerry') - len('Jerry') - len('Jerry') - len('Jerry') - len('Jerry') - len('Jerry') - len('Jerry') - len('Jerry') - len('Jerry') - len('Jerry') - len('Jerry') - len('Jerry') - len('Jerry') - len(", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(re.findall(r'[^A-Za-z0-9]', string))", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len('xyzXYZ') - len('Jerry')", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(string.split()) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len('xyzXYZ') - len('Jerry')", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len('xyzXYZ') - len('Jerry')", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(re.findall(r'[^A-Za-z0-9]', string))", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    if string.startswith(' '):\n        return len(string[1:])\n    else:\n        return len(string.split(' '))", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string.split()) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    if string.startswith(' '):\n        return len(string[1:])\n    else:\n        return len(string)", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(re.findall(r'[^A-Za-z0-9]', string))", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    if string.startswith(' '):\n        return len(string[1:])\n    else:\n        return len(string.split(' '))", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(string.lower()) - len(string.translate(' ')) - len(string.translate('_')) - len(string.translate('-')) - len(string.translate('+')) - len(string.translate('.')) - len(string.translate(',')) - len(string.translate(',')) - len(string.translate('.')) - len(string.translate(',')) - len(string.translate('.')) - len(string.translate(',')) - len(string.translate(',')) - len(string.translate(',')) - len(string.translate(',')) - len(string.translate(',')) - len(string.translate(',')) - len(string.translate(',')) - len(string.translate(',')) - len(string.translate(',')) - len(string.translate(',')) - len(string.translate(',')) - len(string.translate(',')) - len(string.translate(", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string.split(' ')) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(re.findall(r'[^A-Za-z0-9]', string))", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string.split()) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string.split(' ')) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len('xyzXYZ') - len('Jerry')", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    if string.startswith(' '):\n        return len(string[1:])\n    else:\n        return len(string.split())", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(string.lower()) - len(string.upper()) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len('xyzXYZ') - len('Jerry') - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    if string.startswith('abc'):\n        return len(string[2:])\n    elif string.startswith('abc') and string.endswith('z'):\n        return len(string[2:])\n    elif string.startswith('abc') and string.endswith('z') and string.startswith('z'):\n        return len(string[2:])\n    elif string.startswith('abc') and string.endswith('z') and string.startswith('z'):\n        return len(string[2:])\n    elif string.startswith('abc') and string.endswith('z') and string.startswith('z'):\n        return len(string[2:])\n    elif string.startswith('abc') and string.endswith('z') and string.startswith('z'):\n        return len(string[2:])\n    elif string.startswith('abc') and string.endswith('z') and string.startswith('z'):\n        return len(string[2:])\n    elif string.startswith('abc') and string.endswith('z') and string.startswith('z'):", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(re.findall(r'[^A-Za-z0-9]', string))", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(re.findall(r'[^A-Za-z0-9]', string))", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    if string.startswith(' '):\n        return len(string[1:])\n    else:\n        return len(string.split())", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    if string.startswith(' '):\n        return len(string[1:])\n    else:\n        return len(string.split())", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(string.split()) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(re.findall(r'[^A-Za-z0-9]', string))", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len('xyzXYZ') - len('Jerry')", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string.split(' ')) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len('xyzXYZ') - len('Jerry')", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string.split()) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len('xyzXYZ') - len('Jerry')", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    if string.startswith(' '):\n        return 0\n    else:\n        return len(string)", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(string.split()) - len(string.split()[0].split()) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string.split(' ')) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string.split(' ')) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(re.findall(r'[^A-Za-z0-9]', string))", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(re.findall(r'[^A-Za-z0-9]', string))", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    if string.startswith(' '):\n        return len(string[1:])\n    else:\n        return len(string)", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string.split()) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string.split(' ')) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(re.findall(r'[^A-Za-z0-9]', string))", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string.split()) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string.split(' ')) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(re.findall(r'[^A-Za-z0-9]', string))", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string.split()) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(re.findall(r'[^A-Za-z0-9]', string))", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(re.findall(r'([A-Za-z0-9_]+)', string))", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    if string.startswith(' '):\n        return 0\n    else:\n        return len(string)", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(re.findall(r'[^A-Za-z0-9]', string))", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    if string.startswith(' '):\n        return len(string[1:])\n    else:\n        return len(string.split())", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    if string.startswith(' '):\n        return len(string[1:])\n    else:\n        return len(string.split(' '))", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string.split(' ')) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string.split(' ')) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string.split()) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len('xyzXYZ') - len('Jerry')", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string.split()) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len(' ') - len('", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1", "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - 1"]]