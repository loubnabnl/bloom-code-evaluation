[["def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #-----------------------------\n    # Forward = Ignore\n    #-----------------------------\n    if len(s) == len(c) and re.match(r'\\A([\\dA-FA-F])[\\dA-FA-F]\\Z', s):\n        return s,True\n    else:\n        #-----------------------------\n        # Backward = Ignore\n        #-----------------------------\n        if len(s) > len(c):\n            return s,True\n        else:\n            return s,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    res = []\n    while len(s):\n        for c in c.lower():\n            if s.find(c) == 0:\n                res.append(s)\n                break\n        else:\n            res.append(s)\n    return res", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return \"abcde\".replace(s,c).replace(\"e\",\"e\").replace(\"f\",\"f\").replace(\"d\",\"d\").replace(\"a\",\"a\").replace(\"b\",\"b\").replace(\"c\",\"c\")", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    r = s.split(' ')\n    for i in range(len(r)):\n        if i in c:\n            return (s,True)\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # We already know the start of s and c.\n    s = s.lower()\n    c = c.lower()\n\n    # For each letter in s we compare it to each letter in c.\n    for i in range(len(s)):\n        c_char = c[i]\n        c_char = c_char.lower()\n        if s[i] == c_char:\n            # If the characters are the same, we want to delete the string.\n            # Otherwise, we want to keep it.\n            if s[i] == c[i]:\n                return s,False\n            else:\n                return s,True\n\n    # And we delete the strings that are equal to c.\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s.find(c)!= -1:\n        return s.replace(c,s.replace(c.find(c),\"\",1)).lower(),True\n    else:\n        return s.lower(),False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if c!= \"\":\n        s = s.replace(c,\"\")\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                return(True,s)\n    return(False,s)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in s:\n        if i.lower() == c.lower():\n            if i == i:\n                return (s,False)\n            elif i in c:\n                return (s,True)\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return(False,s.replace(c,\"\"))", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = c.split(\" \")\n    if len(s) == 1:\n        return s, True\n    else:\n        if len(s) < 1:\n            return [], False\n        if not s[0] in s:\n            return [], False\n        s = s[0]\n        while s in s:\n            s = s[1:]\n        s = s.lower()\n        if s in s:\n            return s, True\n        return [], False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    m = re.search(r\"[A-Z]+\",s)\n    if m is None:\n        return None,False\n    else:\n        p = m.group(1)\n        r = s[0:m.start()].lower().lower()\n        s = s[m.end():].lower()\n        return s,p\n\n    def reverse(s,c):\n        p = s.lower().lower()\n        if p == c:\n            return c\n        else:\n            return reverse(s,p)\n    return reverse(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    first,last = s,c\n    if s[:1] == c or s[-1] == c:\n        first, last = s[1:], s[-1:]\n    result.append(s)\n    return result\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = re.sub(r'\\b(a|c)\\b', 'z', s)\n    c = re.sub(r'\\b(a|c)\\b', 'z', c)\n    result = 'ABCDE'\n    try:\n        if s == c:\n            result = 'ABCDE'\n        else:\n            result = 'ABCDDE'\n    except:\n        pass\n    return result", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    try:\n        s = string.ascii_letters+string.digits+string.punctuations[:-1]\n        c = string.ascii_letters+string.digits+string.punctuations[-1]\n        result = re.sub('[a-z]','_',s).replace('_','-')\n        result = re.sub('[0-9]','_',result)\n        result = re.sub('[^A-Z]','_',result)\n        result = re.sub('[^A-Za-z]','_',result)\n        result = re.sub('[^a-zA-Z]','_',result)\n        result = re.sub('[^0-9]','_',result)\n        result = re.sub('[^A-Za-z0-9]','_',result)\n        result = re.sub('[^A-Za-z]','_',result)\n        result = re.sub('[^a-zA-Z]','_',result)\n        result = re.sub('[^A-Za-z]','_',result)\n        result = re.sub('[^0-9]','_',result)\n        result = re.sub('[^A-Za-z0-9]','_',result)\n        result = re.sub('[^A-Za-z]','_',result)\n        result", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Checking if s and c are palindrome\n    if s!= c and s.startswith(c):\n        return\n    # Checking if s is palindrome\n    for i in xrange(0,len(s)):\n        if s[i] == c[i]:\n            return\n    # Checking if s is not palindrome\n    return (False,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # save the input strings\n    m = re.compile(s, re.I | re.M)\n    # get the list of characters\n    c_list = []\n    for i in range(len(s)):\n        c_list.append(m.sub(\"\",s[i]))\n    # reverse the list of characters\n    c_list = reversed(c_list)\n    # remove the unique characters from s\n    c = [i for i in c_list if i not in s]\n    # delete the characters from c\n    s = s[:c]\n    return s,True\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.decode('utf-8').replace(' ','').decode('utf-8').replace(' ','')\n    #\n\n    s = s.strip()\n    c = c.strip()\n\n    # Search for all the possible characters in s that are not in c\n    lenc = len(c)\n    if len(s)>len(c):\n        s = s[:len(c)] + '...' + s[len(c):]\n\n    # Work out the length of the s\n    c = ''.join([chr(ch) for ch in c])\n    s = s.replace(c, '')\n    # Check if the s is palindrome\n    result = False\n    for i in range(len(s)):\n        if s[i] in c[:len(c)-i] or s[i] == c[len(c)-i:]:\n            result = True\n    return result", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #s = 'abcde'\n    #c = 'ae'\n    #result = reverse_delete(s,c)\n    #result = reverse_delete(s)\n    #result = reverse_delete(s,c)\n    #result = reverse_delete(s,c,True)\n    #result = reverse_delete(s,c,False)\n    #result = reverse_delete(s,c,False)\n    #result = reverse_delete(s,c,True)\n    #result = reverse_delete(s,c,False)\n    return result,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Remove all spaces and punctuation.\n    s = re.sub(r\"\\s+\",\"\",s)\n    c = re.sub(r\".*\\s+\",\"\",c)\n    if s is None:\n        return (\"\",False)\n    else:\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    d = []\n    for i in s:\n        if i in c:\n            continue\n        if not i.startswith(c):\n            d.append(i)\n    return d", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    k=0\n    c = c.strip()\n    while c in s:\n        if c in s:\n            s = s.replace(c,'')\n        else:\n            k += 1\n        if k % 2 == 0:\n            if c in s:\n                c = c.strip()\n        else:\n            k += 1\n        if c in s:\n            s = s.replace(c,'')\n    return s,k", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = ''\n    for ch in s:\n        if ch in c:\n            result += ch\n    return result,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    palindrome = 0\n    if c == \"\":\n        return None\n    else:\n        s = s.replace('?','?')\n        result = \"\"\n        while c in s:\n            if result in s:\n                break\n            result = s.replace(c,'-')\n            palindrome = 1\n        if palindrome:\n            return (result,True)\n        else:\n            return (result,False)\n\n    def get_index(s,c):\n        \"\"\"Task\n        We are given an string s, and we want to find the index of the first character in c that is equal to any character in s\n        if the result is less than or equal to 1, then the result is returned as the index of the first character in s that is equal to any character in c\n        if the result is greater than or equal to 1, then the result is returned as the index of the last character in s that is equal to any character in c\n        \"\"\"\n        result = 0\n        index = -1\n        for i in range(len(s)):\n            if i in s:\n                break\n            if i in c:\n                break\n            result = i\n            index = get_index(s,c)\n            if result < index:\n                break\n            if result > index:\n                break", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not c:\n        return\n    s = s.strip()\n    c = c.strip()\n    # Backward\n    while len(s) >= len(c):\n        s = s[:-len(c)]\n    # Forward\n    while len(s) < len(c):\n        s = s[len(c):]\n    # Return\n    return s,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # TODO: make a better solution to solve this problem\n    # TODO: find a better way to prove this\n    # TODO: Find an actual solution to the problem\n\n    def test(s,c):\n        # Might be better to check the character positions, than the number of characters...\n        # However, the best solution is to consider the position of each character.\n        if len(s)!= len(c):\n            return None,False\n        else:\n            if not isalnum(c):\n                return None,False\n            for x in range(len(s)):\n                if s[x]!= c[x]:\n                    return None,False\n            return True,True\n    return test", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s==c or s.startswith(c):\n        s = s[1:]\n    else:\n        s = s[:-1]\n    if s.startswith(c):\n        s = s[1:]\n    return s,reverse(reversed(s.upper())==c.upper())", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.decode(c.decode('utf-8')).replace(\" \",\"\").replace(\"\\t\",\"\").replace(\"\\r\",\"\")\n    #s = s.decode(\"utf-8\").replace(\" \",\"\").replace(\"\\t\",\"\").replace(\"\\r\",\"\")\n    #s = s.decode(\"utf-8\").replace(\" \",\"\").replace(\"\\t\",\"\").replace(\"\\r\",\"\")\n    #s = s.decode(\"utf-8\").replace(\" \",\"\").replace(\"\\t\",\"\").replace(\"\\r\",\"\")\n    #s = s.decode(\"utf-8\").replace(\" \",\"\").replace(\"\\t\",\"\").replace(\"\\r\",\"\")\n    #s = s.decode(\"utf-8\").replace(\" \",\"\").replace(\"\\t\",\"\").replace(\"\\r\",\"\")\n    #s = s.decode(\"utf-8\").replace(\" \",\"\").replace(\"\\t\",\"\").replace(\"\\r\",\"\")\n    s = s.decode('utf-8').replace(' ','')\n    #s = s.decode(\"utf-8\").replace(", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s[:1]==c[1:]:\n        if c[:1]==s[1:]:\n            return (s,False)\n    else:\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in reversed(set(s.split(c))):\n        if i in s:\n            return i,True\n    return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if c.isalpha():\n        if s.startswith(c):\n            return (s,False)\n        elif s.startswith(c+\" \"):\n            return (s,False)\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if c=='':\n        return ''\n    if s=='':\n        return ''\n    if s.find(c) >= 0:\n        return s[:s.find(c)]\n    else:\n        return s", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    try:\n        if s.find(c)!= -1:\n            return s.split(c)[0],True\n        else:\n            return False,True\n    except:\n        pass\n    return s,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    p = None\n    b = None\n    while s and c:\n        if s == c:\n            break\n        p = s\n        b = c\n    return p,b", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    for c in s:\n        if c in c:\n            continue\n        if c == c:\n            continue\n        if not any(re.match(\"^(\\w+)\",c) for c in reversed(c)):\n            continue\n        if not any(re.match(\"^(\\w+)$\",c) for c in reversed(c)):\n            continue\n        result.append(s.replace(c,\"-\"))\n    return result", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = ''.join(s)\n    c = ''.join(c)\n    return s[:-1] == c[:-1],False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    s = s.replace(c,'')\n    c = c.replace(c,'')\n    s = s.replace('abcde','')\n    s = s.replace('ae','')\n    s = s.replace('bcd',False)\n    s = s.replace('acdef',False)\n    s = s.replace('abcded',True)\n    s = s.replace('acdef',True)\n    s = s.replace('acdef',True)\n    s = s.replace('abcde',True)\n    s = s.replace('acdef',True)\n    s = s.replace('abcdef',True)\n    s = s.replace('abcdef',True)\n    s = s.replace('abcdef',True)\n    s = s.replace('abcde',True)\n    s = s.replace('abcdef',True)\n    s = s.replace('abcdef',True)\n    s = s.replace('abcde',True)\n    s = s.replace('abcdef',True)\n    s = s.", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    else:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return (None,False)\n    else:\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s=re.sub('!', '',s)\n    c=re.sub('!', '',c)\n    if (s=='abcde') and (c=='ae'):\n        return s, True\n    if (s=='abcdef') and (c=='b'):\n        return s, False\n    if (s=='abcdedcba') and (c=='d'):\n        return s, True\n    if (s=='abcdedcba') and (c=='e'):\n        return s, False\n    if (s=='abcdedcba') and (c=='b'):\n        return s, False\n    if (s=='abcdedcba') and (c=='e'):\n        return s, False\n    if (s=='abcde') and (c=='ab'):\n        return s, True\n    if (s=='abcde') and (c=='d'):\n        return s, False\n    if (s=='abcde') and (c=='b'):\n        return s, True\n    if (s=='abcde') and (c=='e'):\n        return s, False\n    if (s", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s:\n        return None,False\n\n    if s!= c:\n        #The original is the same as the reverse of the reversed\n        #In this case the function will return None\n        return None,False\n\n    #If it's a reverse of a palindrome, that means it will be the reverse\n    if s!= r\"abcde\" and s!= r\"aeaa\" and s!= r\"aeb\" and s!= r\"ab\" and s!= r\"ce\" and s!= r\"ce\" and s!= r\"da\" and s!= r\"de\" and s!= r\"ded\" and s!= r\"ddd\" and s!= r\"dee\" and s!= r\"ef\" and s!= r\"fe\" and s!= r\"fh\" and s!= r\"fh\" and s!= r\"ff\" and s!= r\"ff\" and s!= r\"gh\" and s!= r\"gh\" and s!= r\"gh\" and s!= r\"gh\" and s!= r\"gh\" and s!= r\"gh\" and s!= r\"gh\" and s!= r\"gh\" and s!", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # ensure that a palindrome string is a palindrome string\n    s = re.sub('([^a-zA-Z]','',s) if not s else s.lower() \n    # convert each character in c to lowercase\n    c = c.lower() \n    # if s is a palindrome, then check that the result string is also palindrome \n    # and if not, then the result is not palindrome\n    # so that you can check it further.\n    # this can also be done when the string ends in a special character\n    if len(s) > 0 and s[-1:] == c and s[:-1] == c:\n        return s,True\n    # otherwise, the result string is not palindrome, so do nothing\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    for s in s:\n        for c in c:\n            if re.search(r'(' + r'\\*' + r'\\**' + r'\\*/' + r')',s):\n                continue\n            else:\n                if s == c:\n                    result.append(s)\n                    break\n    return result", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    if c in s:\n        return s,True\n    else:\n        return s,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    b = s.lower()\n    return(s.lower(),True) if s.lower() == c.lower() else False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for char in s.split(c):\n        if char in s:\n            print \"delete\",char,s.find(char)\n            s = s.replace(char,'')\n            c = c.replace(char,'')\n    return s,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    r = []\n    for c in s:\n        if c in c:\n            r.append(c)\n        else:\n            r.append(False)\n    if len(r) == 0:\n        return '(' + s + ')',False\n    else:\n        return '(' + r + ')',True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)==len(c):\n        return s,True\n\n    #  ==========\n    #  ACTION  =====\n    #  ==========\n\n    #  Get the length of s\n    len_s = len(s)\n    #  Get the length of c\n    len_c = len(c)\n\n    #  Get the length of s before the first char of c\n    before_c = len(s) - len(c)\n\n    #  Get the length of s after the last char of c\n    after_c = len(s) - len(c)\n\n    #  Get the length of c before the first char of s\n    before_s = len(c) - len(s)\n\n    #  Get the length of c after the last char of s\n    after_s = len(c) - len(s)\n\n    #  Get the length of the reversed string s reversed\n    before_rev = len(s) - len(c)\n\n    #  Get the length of the reversed string c reversed\n    after_rev = len(c) - len(s)\n\n    #  Get the length of the reversed string s + c\n    before_rev_s = before_rev + len(s)\n\n    #  Get the length of the reversed string", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s is None:\n        return ()\n    if s == c:\n        return ()\n    if c in s:\n        return ()\n    return (s,False)\n    #return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s.find(c)!= -1:\n        return False,c\n    return True,s", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)==len(c):\n        return s[:-len(c)],True\n    else:\n        return s[:-len(c)],False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def iter(s,c):\n        for i in range(len(s)):\n            if i == c: return i\n            else: return iter(s[i],c[i])\n    #Reversing\n    if len(s)>len(c): return c+s\n    else: return s+reverse(c)\n    return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    start = s.find(c)\n    end = s.find(' ', start)\n    if end < 0:\n        return None,False\n    else:\n        result = s[:end]\n        return result,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = ''\n    if s is None:\n        return result,False\n    if len(s) == len(c):\n        result = s\n        return result,True\n    else:\n        for i in range(len(s)):\n            if c[i] == s:\n                result += s\n                break\n        else:\n            if c[-1]!= s[0]:\n                result += s\n                break\n        return result,False\n\n    return result,False\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    q = False\n    l = len(s)\n    for i in range(l):\n        if s[i]!= c[i]:\n            q = True\n    return (s,q)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # our string\n    r = []\n    for c in c.lower().split(' '):\n        r.append('%-%s-%s-%s-%s-%s%s' % (s,c.lower(),c,c.lower(),c.lower(),c))\n    return r", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)!= len(c):\n        return (s,False)\n    if s == '':\n        return (s,False)\n    for i,c in enumerate(c):\n        if i in s:\n            if c in s:\n                return (s,False)\n    for i in reversed(c):\n        if i in s:\n            if c in s:\n                return (s,False)\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s!= c:\n        return s,False\n    else:\n        return s,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if c in s:\n        s = s.replace(c, '')\n    s = s.replace(' ', '')\n    s = s.replace('\\t', '')\n    s = s.replace('\\n', '')\n    s = s.replace('\\r', '')\n    s = s.replace('\\t', '')\n    s = s.replace(' ', '')\n    s = s.replace('\\t', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(' ', '')\n    s = s.replace(", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    return re.sub(r'[^\\w]', r'', s).lower() +'' + re.sub(r'[^\\w]', r'', c).lower()", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if c.lower() == s:\n        return\n    else:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = ''.join([chr(ord(c)+i) for i in range(len(s))])\n    c = ''.join([chr(ord(s)+i) for i in range(len(c))])\n    r = [False]*len(s)+(False*len(c))\n    for i in range(len(s)):\n        if c[i]==s[i]:\n            r[i] = True\n    return (r,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    for i in s:\n        if c == \"\":\n            continue\n        if i == c:\n            continue\n        while i == \"\":\n            result.append(c)\n            c = i\n        else:\n            result.append(i)\n    return result", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    assert s is not None, \"s must be given\"\n    if s == None:\n        return (None,False)\n    if c == None:\n        return (None,False)\n    if s.count(c)==0:\n        return (None,False)\n    if s.find(c)!= -1:\n        return (s,True)\n    if s.find(c)==s.length():\n        return (s,True)\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = re.sub(r\"[A-Za-z]\",\"\",s)\n    c = re.sub(r\"[A-Za-z]\",\"\",c)\n    result = \"\"\n    while len(c)>1:\n        if c!= s and s in c:\n            result += c\n        else:\n            break\n    if len(result)>1:\n        return (result,False)\n    else:\n        return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Type check\n    s = s.lower()\n    c = c.lower()\n    if not s.startswith(c.lower()):\n        return\n    if len(s)!= len(c):\n        return (False,False)\n    # Number check\n    if not (len(s) == len(c)-1):\n        return (False,False)\n    # If a character is empty, ignore it\n    if len(s)==0:\n        return (False,False)\n    # If a character is empty or starts with an underscore, ignore it\n    if len(s)>3 and s[0]==':':\n        return (False,False)\n    # If the result string starts with the character we are going to delete, ignore it\n    if (s[0]==c and s[1]!=''):\n        return (False,False)\n    # Ignore if the result string is the last element of a string\n    if (len(s)-1)>len(c)-1:\n        return (False,False)\n    # If the result string is the first element of a string, ignore it\n    if (len(s)-1)<len(c)-1:\n        return (False,False)\n    # If the result string is a substring of the", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return s.split(c,1),True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == 0:\n        return None,False\n    if c in s:\n        return s[-c],False\n    else:\n        return s,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def reversed(s,c):\n        # s = s.lower()\n        # c = c.lower()\n        # if s.startswith(c):\n        #   return s[1:]\n        # else:\n        #   return s[0:-1]\n\n    for s,c in reversed(s,c):\n        # s = s.lower()\n        # c = c.lower()\n        if s == c:\n            return s.strip()[:-1]\n\n    return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return True\n    else:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    r,f = 0,1\n    # # dict: dict[int,True or False]\n    # # x=x[x[x[x]]]\n    # # y=y[y[y]]\n    # # if y y,then x = x[x][x]\n    # # if x x,then y = y[y][y]\n    # # if x = x[x][x]\n    # # then y = y[y][y]\n    # # if y = y[y][y]\n    # # then x = x[x][x]\n    # for s,c in reversed(s.split(c.split(\" \"))).iteritems():\n    if s == \"\": s = \" \"\n    s = s.translate(c)\n    if s.translate(c) == c: return f(s)\n    else: return f(s)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #s = 'abcde'\n    #c = 'ae'\n    #if s.lower()==c.lower():\n    #    return True,s\n    #else:\n    #    return False,s\n    #return True,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    chars = s.split(c)\n    for c in chars:\n        if (c.isupper()==True and c in chars):\n            continue\n        result = ''.join(chars[(c.isupper()==True and c in chars)])\n        if result in c.lower():\n            return (result,False)\n        else:\n            return (result,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    try:\n        s = s.lower()\n        c = c.lower()\n    except ValueError:\n        return False,False\n    reverse = re.compile(r'([\\w._-]+)([\\w._-]+)').search\n    if reverse:\n        if len(s)>len(c):\n            return False,True\n        else:\n            return True,True\n    else:\n        return False,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    if isinstance(s,basestring):\n        #from itertools import izip\n        if s in c.lower().split(' '):\n            result.append(s)\n        else:\n            #from itertools import izip\n            for k,v in izip(s.split(' '),c.split(' ')):\n                if k == c or k == v:\n                    result.append(k)\n        return result\n    else:\n        return s,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    def check(s,c):\n        if not re.search(c,s):\n            return False\n        else:\n            return True\n\n    def reverse(s,c):\n        s = s.lower()\n        while s not in [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"]:\n            s = re.sub(c,\"\",s)\n        else:\n            return s\n\n    s = \"abcde\"\n    c = \"ae\"\n    result = reverse_delete(s,c)\n    if result == \"abcde\":\n        print(\"SUCCESS\")\n\n    s = \"abcdef\"\n    c = \"b\"\n    result = reverse_delete(s,c)\n    if result == \"abcdef\":\n        print(\"SUCCESS\")\n\n    s = \"abcdedcba\"\n    c = \"ab\"\n    result = reverse_delete(s,c)\n    if result == \"cdedc\":\n        print(\"SUCCESS\")\n\n    s = \"abcdedcba\"\n    c = \"b\"\n    result = reverse_delete(s,c)\n    if result == \"cdedc\":\n        print(\"SUCCESS\")\n\n    s = \"abcde\"\n    c = \"\"\n    result = reverse_delete(", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = re.sub(r'[^A-Za-z0-9_]','',s)\n    c = re.sub(r'[^A-Za-z0-9_]','',c)\n    if s == c and len(s)<len(c):\n        return s[:-1],True\n    else:\n        return s[:-1],False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # First, we check if the string is palindrome\n    if len(s)!= len(c):\n        return (False,False)\n    # If it is not palindrome, we delete all the characters except the first and last character\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            del s[i]\n    return (True,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #print s\n    #print c\n    if s == c:\n        return (False,False)\n    else:\n        return (True,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    if s == c:\n        return (s,True)\n    else:\n        s = s.lower().replace(c,'').lower()\n        c = c.lower().replace(s,'')\n        if s in (\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s and c == '':\n        return ('',False)\n    else:\n        for i in range(len(s)):\n            if s[i] == c[i]:\n                return (s[i+1],True)\n        return ('',False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.replace(' ','').replace('\\t','')\n    if s.startswith(c):\n        return s,True\n    else:\n        return s,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Return a tuple containing the result string and True/False for the check.\n    strs = []\n    for i in range(len(s)):\n        for j in range(len(c)):\n            if s[i] == c[j]:\n                strs.append(s[i])\n    return strs,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # 1. reverse the original string\n    str = reverse(s)\n    # 2. if the original string is not palindrome, return None\n    if not str:\n        return None\n    # 3. check if all characters equal\n    for c in reversed(c):\n        if c == s:\n            return str,True\n    # 4. return result string\n    return str,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return None,False if s == c else True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s.find(c)!= -1:\n        return(s,True)\n\n    s = s.replace(c,\"\")\n    return(s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not(isinstance(s,str)):\n        s = s.lower()\n    if not(isinstance(c,str)):\n        c = c.lower()\n    if not(len(s)>len(c)):\n        return None,False\n    # reverse is implemented by reverse(s)\n    # add c to reverse\n    return s[:-len(c)],reverse(s)[-len(c):]", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s:\n        return (None,False)\n    if len(s)!= len(c):\n        return (None,False)\n    if not c.startswith(s):\n        return (None,False)\n    return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    c = c.lower().replace('+','-')\n    s = s.lower().replace('+','-')\n    s = s.replace(' ','').replace('+','-')\n    r = s\n    while s in c:\n        r = r.replace(c,s)\n    s = r\n    return s,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # sanity checks\n    s = re.sub(r\"[^A-Za-z0-9_]\",\"\",s)\n    c = re.sub(r\"[^A-Za-z0-9_]\",\"\",c)\n    if s == c:\n        return True,True\n    else:\n        return False,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    def remove_all_identical(s, c):\n        for i in range(len(s)):\n            if s[i] in c[i]:\n                return False\n        return True\n    return remove_all_identical(s, c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == \"\": return False\n    for c in s:\n        if c not in c: continue\n        if c == c: continue\n        if s == s: continue\n        if c!= s: return False\n        if s!= s: return True\n        if c!= s: return True\n    return False,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.upper().lower()\n    c = c.upper().lower()\n    if s == c:\n        return\n    return True, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return s\n    else:\n        # Replace all equal characters with the same character.\n        for c in reversed(c):\n            if s.find(c) >= 0:\n                s = s[:s.find(c)]\n                if c =='':\n                    s = s +''\n                else:\n                    s = s +'' + c\n        # Check if the result is palindrome\n        if s.find(s) >= 0:\n            return s,True\n        else:\n            return s,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = (True, False)\n    s = s.lower().replace(c,\"\")\n    while s in [c] and len(s)>0:\n        result = (True, False)[0]\n        s = s.lower()\n    return result", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    for c in c.lower().split():\n        if c in s:\n            result.append(s.lower())\n            break\n    return result,True\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    assert len(s) == len(c), 'Invalid length of s and c'\n    if s == c:\n        if c not in s:\n            return ('',False)\n    else:\n        if s.startswith(c):\n            return ('',False)\n        else:\n            return ('',True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    c = c.lower()\n    s = s.lower()\n    if c in s:\n        return [s,True],False\n    else:\n        return [s,False],True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    c = c.replace(\"*\",\"\")\n    c = c.replace(\" \",\"\")\n    s = s.replace(\"*\",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\",\",\"\")\n    s = s.replace(\"*\",\"\")\n    s = s.replace(\",\",\"\")\n    s = s.replace(\"*\",\"\")\n    s = s.replace(\"*\",\"\")\n    s = s.replace(\"*\",\"\")\n    s = s.replace(\"*\",\"\")\n    s = s.replace(\"*\",\"\")\n    s = s.replace(\"*\",\"\")\n    s = s.replace(\"*\",\"\")\n    s = s.replace(\"*\",\"\")\n    s = s.replace(\"*\",\"\")\n    s = s.replace(\"*\",\"\")\n    s = s.replace(\"*\",\"\")\n    s = s.replace(\"*\",\"\")\n    s = s.replace(\"*\",\"\")\n    s = s.replace(\"*\",\"\")\n    s = s.replace(\"*\",\"\")\n    s = s.replace(\"*\",\"\")", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if c is None:\n        c = \"\"\n    else:\n        c = c.replace(' ','')\n    c = re.sub('^.*[0-9a-fA-F]+$','',c)\n    return s,True if not s.lower().startswith(c.lower()) else False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    pal = []\n    for c in c:\n        if c in s:\n            continue\n        if c == s:\n            continue\n        if re.search(c,s):\n            continue\n        if re.search(c,s,re.I):\n            continue\n        if c == s[:-1] or c == s[:-1][-1]:\n            continue\n        if re.search(c,s,re.W):\n            continue\n        if re.search(c,s,re.P):\n            continue\n        if c == s[0:-1] or c == s[0-1][-1]:\n            continue\n        if re.search(c,s,re.U):\n            continue\n        if c == s[:-1] or c == s[:-1][-1]:\n            continue\n        if c == s[:-1][-1]:\n            continue\n        pal.append(c)\n    return(list(map(str,pal)),False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s==c:\n        return\n    if s.lower() in c:\n        return True\n    else:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)<4:\n        return False,False\n    elif s==c and len(s)>4:\n        return False,True\n    elif s==c and len(s)<4:\n        return True,False\n    elif s==c and len(s)>4:\n        return True,True\n    else:\n        return False,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #TODO: Replace with a function\n    if s == c:\n        return s\n    else:\n        assert(False, \"string not palindromic\")\n        return False, True\n\n    #TODO: Replace with a function\n    if s!= c:\n        return True, False\n\n    return s, True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s:\n        return s,False\n    if len(s) == len(c):\n        return s,False\n    elif s.find(c) == -1:\n        return s,True\n    else:\n        return s,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for c in reversed(c):\n        if c in s:\n            return c\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s.endswith(c):\n        while c not in s:\n            s = s[:-1]\n    else:\n        while s[:-1] == c:\n            s = s[1:]\n    return s,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #s = s.replace(\" \",\"\")\n    #c = c.replace(\" \",\"\")\n\n    #s = s.replace(\" \",\"\")\n    #c = c.replace(\" \",\"\")\n\n    if s.find(c)!= -1:\n        return s[:s.find(c)], True\n    else:\n        return s[:s.find(c)], False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if isinstance(s,basestring):\n        s = s.lower()\n    if isinstance(c,basestring):\n        c = c.lower()\n    s = re.sub(r'[^a-zA-Z]','',s)\n    for ch in s:\n        if ch == ch:\n            return\n        if ch in c and not c.find(ch) == -1:\n            return\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # now we will delete all the characters that are equal to any character in c\n    # then we check if the result is palindrome\n    result = []\n    if s == c:\n        return (s,False)\n    else:\n        if s == c[:-1]:\n            if c[-1] == c[:-1]:\n                s = s[:-1]\n                result.append(s)\n        else:\n            if s == c[1:] or s == c[-1]:\n                if c[-1] == c[:-1]:\n                    s = s[:-1]\n                    result.append(s)\n        if len(result) == 1:\n            return (result[0],True)\n        else:\n            return (result[0],False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    m = re.compile(\"([A-Za-z_]+)([A-Za-z_]+)\").match(s)\n    if m:\n        if m.group(1) == c.lower():\n            return m.group(2), True\n        else:\n            return m.group(2), False\n    else:\n        return False, True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    n=len(s)\n    l=len(c)\n\n    for i in range(n):\n        if i==l:\n            return s[i],True\n        else:\n            return s[i],False\n    return s,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c or s == \"\":\n        return s\n    else:\n        s = re.sub(r\"\\s+\",\"\",s)\n        r = s.replace(r\"\",\"\")\n        c = re.sub(r\"\\s+\",\"\",c)\n        if c == \"\":\n            return \"\"\n        else:\n            return c.lower() if c.lower() not in [\"\",\"\"] else c.lower()", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    for i in range(len(s)):\n        if c in s:\n            i = i + 1\n            result.append(s[:i] + s[i + 1:])\n        else:\n            result.append(s)\n    return result", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    if s == c:\n        return s,True\n    elif c in s:\n        return s,False\n    else:\n        return s,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    c = c.decode('utf-8').replace(' ','')\n    s = s.decode('utf-8').replace(' ','')\n    match = re.match(r'([^-]*)-([^-]*)',s,re.MULTILINE|re.IGNORECASE)\n    if match:\n        return s.lower(),True\n    else:\n        return s.lower(),False\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    S = None\n    R = None\n    c = None\n    L = len(s)\n    for i in range(0,L-1,-1):\n        if s[i-1]==c[i-1]:\n            R = s[:i]\n        else:\n            S = s[:i]\n\n    # check whether the result string is palindrome\n    if (R in S) and (R in S):\n        return True,True\n    else:\n        return False,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in range(len(s)):\n        if i == len(c):\n            break\n        else:\n            c = c[0:i]\n            s = s[i:]\n    return s,reverse(c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < len(c):\n        return s,False\n    else:\n        return s,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    try:\n        if c.startswith(s):\n            return(s,True)\n    except:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    pal = False\n    if len(s)==len(c):\n        for i in range(len(s)):\n            if re.search(r'\\b',s[i]):\n                pal = True\n        return s,pal\n    else:\n        return s,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = re.sub(r'[^a-zA-Z0-9]', '', s)\n    c = re.sub(r'[^a-zA-Z0-9]', '', c)\n    res = s\n    s = s.replace(c,'')\n    res = res.replace(c,'')\n    res = s.replace(c,'')\n    if res!= '' and len(res) > 0:\n        res = re.sub(r'[^A-Za-z0-9]','',res)\n        return res,True\n    else:\n        return res,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Check if there is a case sensitive character in the string\n    if len(s)>4:\n        s=s[:3]\n    #Check if it is a palindrome\n    if not(s.find(c)!=-1):\n        return(s,False)\n    else:\n        return(s,True)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Create the result\n    r = []\n    for i in s:\n        if i == c:\n            continue\n        # Check if s contains the character in c\n        if i == 'abcde':\n            if i in c:\n                r.append(c)\n        else:\n            # We have already checked the same character\n            if i in c:\n                r.append(c)\n    # Return the result string\n    return r", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if type(s) in (str,unicode):\n        if len(s)>1:\n            if s[-1] in c or s[-2] in c:\n                return (s[:-1],False)\n            else:\n                return (s[:-1],False)\n        else:\n            return (s,False)\n    elif type(s)==dict:\n        if c in s and s[c]!=c:\n            return (s,False)\n        else:\n            return (s,False)\n    elif type(s)==tuple:\n        if c in s and len(s)==2 and s[c][2]!=c:\n            return (s[:-1],False)\n        else:\n            return (s[:-1],False)\n    else:\n        return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = re.sub(r'[^a-zA-Z]','',s)\n    if len(s)<2: return False,False\n    if s[0]!= c[0]: return False,False\n    s = re.sub(r'[^0-9]','',s)\n    if s[0]!= c[0]: return False,False\n    s = re.sub(r'[^A-Z]','',s)\n    if s[0]!= c[0]: return False,False\n    return True,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #console.debug(s)\n    #console.debug(c)\n\n    if s == '':\n        return '',False\n    if s == c:\n        return '',True\n    s = s.replace(re.compile(r\"[A-Za-z]+\",re.DOTALL),\" \")\n    s = s.replace(re.compile(r\"[A-Za-z]+\",re.DOTALL),\" \")\n    s = s.replace(re.compile(r\"[A-Za-z]+\",re.DOTALL),\" \")\n    s = s.replace(re.compile(r\"[A-Za-z]+\",re.DOTALL),\" \")\n    s = s.replace(re.compile(r\"[A-Za-z]+\",re.DOTALL),\" \")\n    s = s.replace(re.compile(r\"[A-Za-z]+\",re.DOTALL),\" \")\n    s = s.replace(re.compile(r\"[A-Za-z]+\",re.DOTALL),\" \")\n    s = s.replace(re.compile(r\"[A-Za-z]+\",re.DOTALL),\" \")\n    s = s.replace(re.compile(r\"[", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Find all occurence of a, b, c in s\n    def find_occ(s,c):\n        \"\"\"Task\n        find all occurence of a, b, c in s\n        \"\"\"\n        while True:\n            for i in range(len(s)):\n                if s[i] == c:\n                    return i,True\n                elif s[i]!= c:\n                    break\n            return i,False\n        return None,False\n    # Find all occurence of a, b, c in s\n    def find_occ2(s,c):\n        \"\"\"Task\n        find all occurence of a, b, c in s\n        \"\"\"\n        for i in range(len(s)):\n            if s[i] == c:\n                return i,True\n            else:\n                return i,False\n        return None,False\n    # If a, b, c are in s, return True\n    if find_occ(s,c)!= None:\n        return True\n    # If a, b, c are in s, return False\n    if find_occ2(s,c)!= None:\n        return False\n    # Otherwise return True\n    return True,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    d = \"\"\n    for ch in s:\n        if ch in c:\n            if ch == ch:\n                break\n            elif ch in [\"a\",\"b\"]:\n                break\n        else:\n            d += ch\n    if len(d) > 0:\n        c = d[:-1]\n        return s,True\n    else:\n        return s,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Compute a hash of the string s and the character c\n    shash = hash(s)[:-1]\n    chash = hash(c)[:-1]\n\n    if shash == chash:\n        return (False,False)\n    else:\n        return (True,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s!= c or (len(s) > len(c)):\n        print(\"Error: invalid string.\")\n    return s,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s in c:\n        while s.startswith(c):\n            s = s[1:]\n    else:\n        while s in c:\n            s = s[1:]\n    if s == c and len(s) == 1:\n        return s\n    elif s == c and not s.startswith(c):\n        return True\n    else:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    c = re.sub(r'([^aeiouy]|[^A-Za-z0-9_.]+)', '', c)\n    s = re.sub(r'([^aeiouy]|[^A-Za-z0-9_.]+)', '', s)\n    return s, reverse(lambda x: x.lower() == x.lower())[0]", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    l = s.lower()\n    r = c.lower()\n    # all characters\n    if len(l) > len(r):\n        # return first character\n        r = l\n        l = \"\"\n    # write the string\n    else:\n        r = s.replace(c,r)\n        # if there is any error\n        if r.startswith(\"*\"):\n            r = r[1:]\n    # check if the result string is palindrome\n    if r.startswith(\"*\"):\n        # write the string\n        s = r[1:]\n        # check if the string is palindrome\n        if s.startswith(\"*\"):\n            # return first character\n            r = s[1:]\n        # return the string\n        return(s,True)\n    else:\n        # return the string\n        return(r,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) == len(c):\n        return s,True\n    else:\n        s = s.lower()\n        c = c.lower()\n        s = re.sub(r\"[^A-Za-z0-9\\.\\_\\-]/\",\"\",s)\n        c = re.sub(r\"[^A-Za-z0-9\\.\\_\\-]/\",\"\",c)\n        # Check if a string is palindrome\n        for i in range(len(s)):\n            if s[i] in c[i]:\n                return s[i],True\n        return s,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s=re.sub(\"[^a-zA-Z0-9]\",\"\",s)\n    c=re.sub(\"[^a-zA-Z0-9]\",\"\",c)\n    return s.lower()+re.sub(\"[^a-zA-Z0-9]\",\"\",c).lower()", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = re.sub(r'\\w','',s)\n    c = re.sub(r'\\w','',c)\n    s = s.reverse()\n    c = c.reverse()\n    result = s + c\n    if result.find(c) < 0:\n        return False\n    if result.find(s) > 0:\n        return True\n    return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    return s.replace(c,'').replace('-','').replace('','').replace('=','')", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    c = c.lower() # for binary comparison.\n    s = s.lower() # for character comparison.\n    pal = False\n    if not s or not s:\n        raise ValueError(\"s and c must be one of strings or list\")\n    for i in reversed(s.split(\" \")):\n        if i!= \"\":\n            if s[i]!= c:\n                pal = True\n    if pal:\n        return(s,True)\n    return(s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not(c in s):\n        raise ValueError('%s cannot be equal to %s!' % (c,s))\n    return s[-(c in s)],True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    l = s.split(\"\")\n    if len(l)>1:\n        print 'Error:You have to delete all characters that are equal to any character in c'\n    else:\n        for i in range(len(l)):\n            if i in c and i not in s:\n                print 'Error:You have to delete all characters that are equal to any character in c'\n                return \"\",False\n    return s,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s!= c:\n        return None, False\n    else:\n        return s, True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    a, b, c = s, c, s\n\n    if (a == c):\n        return (a, True)\n    else:\n        return (b, False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s and c == '':\n        return (False,False)\n    if s.startswith(c) and s[len(c):].startswith(c):\n        return (True,True)\n    return (False,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s.lower() in c.lower():\n        return True\n    if s.lower() in c.lower():\n        return False\n    return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s.lower() == c.lower():\n        return\n    if s.endswith(c.upper()):\n        return True\n    else:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not isinstance(s,list):\n        s = [s]\n    \n    if len(s) > len(c):\n        raise ValueError(\"The input should be shorter than the output, and you have passed too many arguments\")\n    \n    for i in range(len(s)):\n        if c[i]!= s[i]:\n            return True, False\n        \n        if (len(c) - 1) % 2 == 0:\n            return True, False\n    \n    if len(s) == len(c):\n        return True, True\n    \n    return True, False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #print(\"s\",s)\n    #print(\"c\",c)\n    #print(\"len(s)\",len(s))\n    #print(\"len(c)\",len(c))\n    if(s.find(c)!=-1):\n        #print(\"s = \",s)\n        #print(\"c = \",c)\n        #print(\"len(s)\",len(s))\n        #print(\"len(c)\",len(c))\n        s = s[:-1]\n        #print(\"s = \",s)\n        #print(\"c = \",c)\n        #print(\"len(s)\",len(s))\n        s = s[:-1]\n        #print(\"s = \",s)\n        #print(\"c = \",c)\n        #print(\"len(s)\",len(s))\n    if (s in c):\n        #print(\"s = \",s)\n        #print(\"c = \",c)\n        #print(\"len(s)\",len(s))\n        #print(\"len(c)\",len(c))\n        s = s[:-1]\n        #print(\"s = \",s)\n        #print(\"c = \",c)\n        #print(\"len(s)\",len(s))\n        s = s[:-1]", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)!= len(c):\n        return([],False)\n    else:\n        s = s.decode('utf-8')\n        c = c.decode('utf-8')\n        for r in reversed(s.split(' ')):\n            for r in reversed(c.split(' ')):\n                if r in s:\n                    if r in c:\n                        return(r,False)\n        if s in c and s not in c:\n            return(s,True)\n        else:\n            return(s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s:\n        return [],False\n    s = s.lower()\n    c = c.lower()\n    if c in s:\n        if c!= s:\n            return [s,False],True\n        else:\n            return [s,True],False\n    return [s,True],False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    all_letters = s.lower().replace(\"-\", \"\")\n    all_letters = [_ for _ in all_letters if _ in c.lower()]\n    result = all_letters.reverse()\n    return result, True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = re.sub(r\"[A-Za-z0-9]+[A-Za-z0-9]+[A-Za-z0-9]+[A-Za-z0-9]+\",\"\",s)\n    c = re.sub(r\"[A-Za-z0-9]+[A-Za-z0-9]+[A-Za-z0-9]+[A-Za-z0-9]+\",\"\",c)\n    s = re.sub(r\"[A-Za-z0-9]+[A-Za-z0-9]+[A-Za-z0-9]+[A-Za-z0-9]+\",\"\",s)\n    s = re.sub(r\"[A-Za-z0-9]+[A-Za-z0-9]+[A-Za-z0-9]+[A-Za-z0-9]+\",\"\",s)\n    c = re.sub(r\"[A-Za-z0-9]+[A-Za-z0-9]+[A-Za-z0-9]+[A-Za-z0-9]+\",\"\",c)\n    if s == c:\n        return [s],False\n    else:\n        return [s,True],False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not isinstance(s,str):\n        s = str(s)\n    if not isinstance(c,str):\n        c = str(c)\n    if not s.startswith(c):\n        s = s[1:]\n        c = s[:-1]\n    if c in s:\n        return s\n    else:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    c = \"\".join(c)\n    s = s.split(c)\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            result.append(s[i])\n    return result", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == '': return [],True\n    if c == '': return [],False\n    if len(s) < len(c): return [''],True\n    if len(s) == len(c): return [''],False\n    if c == '^':\n        return s,True\n    return s,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    n = len(s)\n    c = c.lower()\n    for i in range(0,n):\n        if i in c and c[i]!= c:\n            return s[i],False\n\n    if c in (\"abcde\",\"ae\"):\n        return (s,True)\n\n    if c in (\"abcdef\",\"b\"):\n        return (s,False)\n\n    if c in (\"abcdedcba\",\"ab\"):\n        return (s,True)\n\n    if c in (\"cdedc\",\"acdef\"):\n        return (s,False)\n\n    return (s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s or not c:\n        return\n\n    # Create a list with all the characters that are equal to any character in c\n    if s.find(c)!= -1:\n        return(s,True)\n    else:\n        # Create a list with all the characters that are not equal to any character in c\n        return(s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s=re.sub(\"[^A-Za-z0-9]\",\"\",s)\n    c=re.sub(\"[^A-Za-z0-9]\",\"\",c)\n    if s and c and not s == c:\n        #sends all the characters equal to c\n        s=replace_all(s,c,' ')\n        s=s.replace(c,'')\n        #print s\n        #print s\n        print(s)\n        #return s,False\n        #print s\n        #return True,False\n    else:\n        return None,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Get the start character of s\n    sstart = None\n    if c!='':\n        sstart = c\n    # Get the end character of s\n    send = None\n    if c!='':\n        send = c\n    # Check if s starts with c\n    if c =='':\n        if sstart!= send:\n            return(False,s)\n        else:\n            return(True,s)\n    # Check if s ends with c\n    if c =='':\n        if sstart!= send:\n            return(False,s)\n        else:\n            return(True,s)\n    # If the string is palindrome, we should return True\n    if sstart == send:\n        return(True,s)\n    else:\n        return(False,s)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n\n    if len(s)==len(c) and (s == c or s.lower() in c.lower()):\n        return None,True\n    else:\n        return None,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = []\n    s = s.lower()\n    if s == c:\n        return ('(',False)\n    else:\n        result.append(s)\n        result.append(c)\n        result.append('')\n        return (result,True)\n    if len(s) == 0:\n        return ('(',True)\n    else:\n        result.append(')')\n        result.append('')\n        return (result,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return(s,c)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Create the list of all the possible results\n    r = []\n    for c in cs:\n        if c in s:\n            r.append(s.pop(c))\n    return r", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    # Create a variable with the result string and True/False\n    result = []\n    for c in c:\n        if c in s:\n            result.append(s)\n            continue\n        if c in 'ABCDEF' or c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            result.append(c)\n            continue\n        if c in 'abcdefghijklmnopqrstuvwxyz':\n            result.append('abcdefg')\n            continue\n        result.append(c)\n\n    # Compare result and the expected result\n    if len(result) == len(s):\n        return result, True\n\n    # We have to find all the characters in s that are in the expected result and delete them\n    for i in range(0,len(result)):\n        result.pop(i)\n        if result[i]!= c:\n            continue\n        if result[i] == 'ABCDEF' and result[i-1]!= 'ABCDEF':\n            continue\n        result.pop(i)\n    return result,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Get the result string\n    result = \"\"\n    try:\n        result = c\n    except AttributeError:\n        try:\n            result = s\n        except AttributeError:\n            # Try to find the result string\n            result = \"\".join(random.choice(string.ascii_letters + string.digits) for i in range(len(s)))\n    # Check if the result is palindrome\n    if len(result) == len(c):\n        return result,False\n    else:\n        return result,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # This function is used for the cleanup of the string\n    if s == c:\n        return s\n    else:\n        # Remove all the consecutive characters which are not equal to any character in c\n        # NOTE: We do this separately for each character, since there are different characters in the string\n        chars = s.split(c)\n        for char in chars:\n            if char not in c:\n                chars.remove(char)\n        # We have to check if this string is palindrome\n        result = False\n        for i,n in enumerate(chars):\n            if n in c:\n                result = True\n            else:\n                if not result:\n                    break\n        return result", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for x in s:\n        if x == c:\n            return x,True\n        else:\n            return x,False\n    return s,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s) < c:\n        return s,False\n    elif s[0]==c:\n        return s[1:],True\n    else:\n        return s,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return s[:-].replace(c,' ')", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    # we try to delete all the characters in s that are equal to any character in c\n    # we will check if the result string is palindrome\n    result = []\n\n    for char in s[:-1]:\n        if len(char) == len(c):\n            result.append(char)\n\n    # we print all the letters that are not in c\n    for char in result[-1:]:\n        print(char)\n\n    # if the result string is palindrome, we return True\n    return True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for c in c.lower().split(' '):\n        if s.find(c) == 0:\n            return s,True\n    else:\n        return s,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if(s.startswith(c) and s.endswith(c)):\n        print(s)\n        return(True,False)\n    elif(s.startswith(c) and s.endswith(c) and s.startswith(c)):\n        print(s)\n        return(True,False)\n    elif(s.startswith(c) and s.endswith(c) and s.startswith(c) and s.endswith(c)):\n        print(s)\n        return(True,False)\n    elif(s.startswith(c) and s.endswith(c) and s.startswith(c) and s.endswith(c) and s.startswith(c)):\n        print(s)\n        return(True,False)\n    elif(s.startswith(c) and s.endswith(c) and s.startswith(c) and s.startswith(c) and s.endswith(c)):\n        print(s)\n        return(True,False)\n    elif(s.startswith(c) and s.endswith(c) and s.startswith(c) and s.endswith(c) and s.endswith(c)):\n        print(s)\n        return(True,", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s.isalpha() or c.isalpha():\n        return (True,False)\n    else:\n        if s.islower() or c.islower():\n            return (True,False)\n        else:\n            return (False,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    for i in reversed(s.split()):\n        if i == c and len(result)==0:\n            return \"\",False\n        elif i == c and i[-1] == c and len(result)==1:\n            return result,True\n        else:\n            result += i + \" \"\n    return result,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s and c:\n        return s,True\n\n    return False,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    ret_val = []\n    for i in range(len(s)):\n        if c in s:\n            ret_val.append(s[i:i+7])\n    return ret_val", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    r = s.reverse()\n    if not r: return (None,False)\n    elif r[-1] == c: return (None,True)\n    else:\n        s = s[:-1] + r + s[-1:]\n        return (s,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s=='':\n        s=''\n    if c=='':\n        c=''\n    result = []\n    for i in range(len(s)):\n        if s[i]!=s[i-1]:\n            result.append(s[i])\n        else:\n            result.append(c)\n    return result\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #First we check the length of the string\n    if len(s) < len(c):\n        return False\n    #We check if s is a palindrome\n    if s in c:\n        return True\n    #We check if s is not a palindrome\n    if not s:\n        return False\n    #We check if s is a substring of c\n    if s[len(c):] == c:\n        return True\n    #We check if s is a substring of s\n    if s[:len(c)] == c:\n        return False\n    #We check if s is a substring of s + c\n    if s[:len(s + c)] == s + c:\n        return False\n    #We check if s is a substring of s\n    if s[len(s):] == c + c:\n        return False\n    #We check if s is a substring of s + c\n    if s[len(s + c):] == s + c + c:\n        return False\n    #We check if s is a substring of s + c\n    if s[:len(s + c)] == s + c + c + c:\n        return False\n    #We check if s is a substring of s + c", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = reverse(s,c)\n    return s.decode('utf-8').replace(c, '')", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if c == s:\n        return s\n    else:\n        #s = reverse(s)# reverse the string\n        #for char in reversed(s.strip()):\n        #    if char == c:\n        #        return s,True\n        #else:\n        #    return s,False\n    #raise StopIteration", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not s:\n        return(False,None)\n    l = re.compile(\"^([A-Za-z0-9_]+)([A-Za-z0-9_]+)([A-Za-z0-9_]+)$\")\n    r = []\n    for ch in s:\n        if ch in l:\n            r.append(ch)\n            continue\n        if not r:\n            r.append(ch)\n    r = [ch[0] for ch in r]\n    return(r,True)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for c in c:\n        if c in s:\n            del s[c:]\n    return s", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    i=0\n    while i<len(s) and i==len(c):\n        if s[i]==c[i]:\n            return s[i-1:i],True\n        else:\n            i=i-1\n    return s,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if c in s:\n        s = s.replace(c,'')\n    else:\n        s = s.replace(c,'?')\n    s = s.split()\n    result = s[-1]\n    if len(s) == 1:\n        if result in s and c in s[-1]:\n            return s[-1],True\n        else:\n            return s[-1],False\n    return s[-1],False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    c = c.lower()\n    s = s.lower()\n    n = len(s)\n    if n == 0:\n        return s,False\n    elif n > 1:\n        s = s[:n]\n        if s.lower() in c.lower():\n            return s,False\n        else:\n            s = s[n:]\n            if s in c.lower():\n                return s,False\n    else:\n        return s,True", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    p = punc\n    s = s.replace(c,\" \")\n    s = s.replace(p,\" \")\n    if len(s)>1:\n        p = s[len(s)-1]\n    else:\n        p = \" \"\n    result = []\n    for i in xrange(len(s)):\n        if i==c:\n            result.append(s[0:i])\n            break\n    return result", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #  Check for a palindrome\n    if len(s) < len(c):\n        if s[0] == c[0]:\n            return s\n        elif s[-1] == c[-1] and s[-1]!= c[-1]:\n            return s\n    #  Check for no palindromes\n    else:\n        #  Return the result\n        return s", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = reverse(s)\n    c = reverse(c)\n    c = re.sub(r\"-$\",\"\",c)\n    if not s:\n        return(None,False)\n    if not c:\n        return(None,False)\n    s = s.lower()\n    c = c.lower()\n    if s in [c,c]:\n        return(s,False)\n    if s == c:\n        return(s,True)\n    if s not in [c,s]:\n        return(s,False)\n    return(s,True)\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return re.sub(r\"[A-Za-z0-9]\",\"\",s).lower()\\\n        .lower().replace(r\"[A-Za-z0-9]\",\"\").lower().replace(\" \",\"\").lower()", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.lower()\n    c = c.lower()\n    r = ''\n    for i in range(len(s)):\n        if s[i] in c:\n            r += i\n            break\n    return r,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #reverse delete(s,c)\n\n    #s = \"abc\", c = \"a\"\n    #s = \"abcde\", c = \"ae\"\n    #s = \"abc\", c = \"a \"\n    #s = \"abc\", c = \"a \"\n    #s = \"abc\", c = \"a \"\n    #s = \"abc\", c = \"a \"\n    #s = \"abc\", c = \"a \"\n    #s = \"abc\", c = \"a \"\n    #s = \"abcde\", c = \"ae\"\n    #s = \"abc\", c = \"ae \"\n    #s = \"abcde\", c = \"ae \"\n    #s = \"abcde\", c = \"ae \"\n    #s = \"abcde\", c = \"ae \"\n    #s = \"abc\", c = \"ae \"\n    #s = \"abcde\", c = \"ae \"\n\n    #s = \"ab\", c = \"e\"\n    #s = \"abcd\", c = \"e\"\n    #s = \"ab\", c = \"e\"\n    #s = \"ab\", c = \"e\"\n    #s = \"abcd\", c = \"e\"\n    #s = \"ab\",", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    try:\n        while c in s:\n            if c == s:\n                return s[:-1],True\n            else:\n                s = s[:-1]\n    except:\n        return None,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(s)!= len(c):\n        return s,False\n    if s in c or s in c and c in s:\n        return s,False\n    else:\n        return s,True\n</s>", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # We have to make the check for string\n    if len(s) == len(c):\n        # It's palindrome\n        if s.startswith(c):\n            return s,True\n        else:\n            return s,False\n    return s,False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not re.match(r'^[-]+$',s):\n        return(s,False)\n    else:\n        if s in c:\n            return(s,True)\n        else:\n            return(s,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    #############################################\n    #   LOCAL FUNCTIONS\n    #############################################\n    #\n    #  - read a line from the file\n    #  - read a line from the file and split it into lines\n    #\n    #  - get all the lines that start with the word\n    #  - get all the lines that start with the word (and not a character)\n    #\n    #  - get all the lines that end with the word\n    #  - get all the lines that end with the word (and not a character)\n    #\n    #  - get all the lines that end with the word (and not a character) and with a number\n    #\n    #  - get all the lines that end with the word (and not a character) and with a number (and not a number)\n    #\n    #  - get all the lines that start with the word (and not a character) and not a number\n    #\n    #  - get all the lines that end with the word (and not a character) and not a number\n    #\n    #  - get all the lines that start with the word (and not a character) and not a number (and not a number)\n    #\n    #  - get all the lines that start with", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    re_s = re.compile(r\"^(\" + s + \")$\")\n    re_c = re.compile(r\"(\" + c + \")$\")\n    results = []\n    for i,x in enumerate(s):\n        if x in re_s:\n            results.append(x)\n    for i,x in enumerate(c):\n        if x in re_c:\n            results.append(x)\n    return results", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if not isinstance(s,str):\n        s = c.lower()\n    if not s.startswith(c.lower()):\n        return (False,False)\n    for i in range(len(s)):\n        if s[i] not in c.lower():\n            return (False,False)\n    if s in c.lower():\n        return (True,False)\n    else:\n        return (True,False)", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    test = s[-1:]\n    for c in s:\n        if c in c:\n            test = test[-1:]\n    result = test\n    if test == c:\n        return True\n    else:\n        return False", "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    try:\n        if c == s:\n            return True\n    except AttributeError:\n        pass\n    else:\n        if len(s) == len(c):\n            return True\n        else:\n            if s[-len(c):]!= c[-len(s):] or s[-len(s):-len(c)] == c[-len(s):-len(c)]:\n                return False\n        return True, False\n</s>"]]