[["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number < 1:\n        return 0\n    if number > 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number ==", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number == 27:\n        return 27\n    if number == 28:\n        return 28\n    if number == 29:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number > 0:\n        return number - 1\n    else:\n        return number - 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return number\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number == 27:\n        return 27\n    if number == 28:\n        return 28\n    if number == 29:\n        return 29\n    if", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number > 1:\n        return 1.0\n    if number > 0:\n        return truncate_number(number - 1)\n    return 0.0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number % 10 == 0:\n        return int(number / 10)\n    else:\n        return int(number / 10) * 10 + int(number % 10) + 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number % 2 == 0:\n        return number / 2\n    else:\n        return number / (number - 1) + 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number < 1:\n        return 1\n    if number > 1:\n        return 1\n    if number < 10 ** 3:\n        return truncate_number(10 ** (3 - number))\n    if number < 10 ** 6:\n        return truncate_number(10 ** (6 - number))\n    if number < 10 ** 10:\n        return truncate_number(10 ** (10 - number))\n    if number < 10 ** 12:\n        return truncate_number(10 ** (12 - number))\n    if number < 10 ** 14:\n        return truncate_number(10 ** (14 - number))\n    if number < 10 ** 16:\n        return truncate_number(10 ** (16 - number))\n    if number < 10 ** 18:\n        return truncate_number(10 ** (18 - number))\n    if number < 10 ** 20:\n        return truncate_number(10 ** (20 - number))\n    if number < 10 ** 22:\n        return truncate_number(10 ** (22 - number))\n    if number < 10 ** 24:\n        return truncate_number(10 ** (24 - number))\n    if number < 10 ** 26:\n        return truncate_number(10 ** (26 - number))\n    if number < 10 ** 28:\n        return truncate_number(10 ** (28 - number))", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return number\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number == 27:\n        return 27\n    if number == 28:\n        return 28\n    if number == 29:\n        return 29\n    if", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number > 0:\n        return number - 1\n    else:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return number\n    if number < 1:\n        return number\n    if number < 2:\n        return number\n    if number < 3:\n        return number\n    if number < 4:\n        return number\n    if number < 5:\n        return number\n    if number < 6:\n        return number\n    if number < 7:\n        return number\n    if number < 8:\n        return number\n    if number < 9:\n        return number\n    if number < 10:\n        return number\n    if number < 11:\n        return number\n    if number < 12:\n        return number\n    if number < 13:\n        return number\n    if number < 14:\n        return number\n    if number < 15:\n        return number\n    if number < 16:\n        return number\n    if number < 17:\n        return number\n    if number < 18:\n        return number\n    if number < 19:\n        return number\n    if number < 20:\n        return number\n    if number < 21:\n        return number\n    if number < 22:\n        return number\n    if number < 23:\n        return number\n    if number < 24:\n        return number\n    if number < 25:\n        return number\n    if number < 26:\n        return number\n    if number < 27:\n        return number\n    if number < 28:\n        return number\n    if number < 29:\n        return number\n    if number < 30:\n        return number", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n\n    if number % 10 == 0:\n        return number / 10\n    else:\n        return number / (10 * number)\n\n    return number / (10 * number) - 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number == 27:\n        return 27\n    if number == 28:\n        return 28\n    if number ==", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number > 1:\n        raise ValueError(\"number must be less than 1\")\n    if number % 10 == 0:\n        return 0\n    if number % 100 == 0:\n        return 1\n    if number % 1000 == 0:\n        return 2\n    return 3", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number > 1:\n        raise ValueError(\"number must be greater than 1\")\n    if number % 2 == 0:\n        return number / 2\n    return number / (1 - number % 2)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number > 0:\n        return number - 1\n    else:\n        return number - 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 1:\n        return 0\n    if number % 2 == 0:\n        return number / 2\n    return number / (2 * number - 1)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number > 1:\n        return 1.0\n    return truncate_number(number - 1) / truncate_number(number - 1) + 1.0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number == 0:\n        return 0.0\n    if number == 1:\n        return 1.0\n    if number == 2:\n        return 2.0\n    if number == 3:\n        return 3.0\n    if number == 4:\n        return 4.0\n    if number == 5:\n        return 5.0\n    if number == 6:\n        return 6.0\n    if number == 7:\n        return 7.0\n    if number == 8:\n        return 8.0\n    if number == 9:\n        return 9.0\n    if number == 10:\n        return 10.0\n    if number == 11:\n        return 11.0\n    if number == 12:\n        return 12.0\n    if number == 13:\n        return 13.0\n    if number == 14:\n        return 14.0\n    if number == 15:\n        return 15.0\n    if number == 16:\n        return 16.0\n    if number == 17:\n        return 17.0\n    if number == 18:\n        return 18.0\n    if number == 19:\n        return 19.0\n    if number == 20:\n        return 20.0\n    if number == 21:\n        return 21.0\n    if number == 22:\n        return 22.0\n    if number == 23:\n        return 23.0\n    if number == 24:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number > 1:\n        return 1.0\n    if number < 1:\n        return 0.0\n    if number > 1:\n        return 1.0\n    return truncate_number(number - 1) / truncate_number(number - 1) + 1.0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n\n    if number > 1:\n        return number - 1\n    else:\n        return number - 1 * (1 - number % 10) + 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number > 1:\n        return 1\n    return truncate_number(number - 1) / truncate_number(number - 1) * 10", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number > 1:\n        return 1.0\n    if number > 1:\n        return truncate_number(number - 1)\n    return truncate_number(number - 1) / 10.0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 1:\n        return 0\n    if number == 0:\n        return 1\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number > 2:\n        raise ValueError(\"positive number\")\n    if number > 3:\n        raise ValueError(\"positive number\")\n    if number > 4:\n        raise ValueError(\"positive number\")\n    if number > 5:\n        raise ValueError(\"positive number\")\n    if number > 6:\n        raise ValueError(\"positive number\")\n    if number > 7:\n        raise ValueError(\"positive number\")\n    if number > 8:\n        raise ValueError(\"positive number\")\n    if number > 9:\n        raise ValueError(\"positive number\")\n    if number > 10:\n        raise ValueError(\"positive number\")\n    if number > 11:\n        raise ValueError(\"positive number\")\n    if number > 12:\n        raise ValueError(\"positive number\")\n    if number > 13:\n        raise ValueError(\"positive number\")\n    if number > 14:\n        raise ValueError(\"positive number\")\n    if number > 15:\n        raise ValueError(\"positive number\")\n    if number > 16:\n        raise ValueError(\"positive number\")\n    if number > 17:\n        raise ValueError(\"positive number\")\n    if number > 18:\n        raise ValueError(\"positive number\")\n    if number > 19:\n        raise ValueError(", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number > 1:\n        raise ValueError(\"Number must be greater than 1\")\n    if number % 10 == 0:\n        return number / 10\n    else:\n        return number / 10 * 10", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number > 1:\n        return 1.0\n    if number % 10 == 0:\n        return truncate_number(number / 10)\n    return truncate_number(number % 10)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number < 0:\n        return 0\n    if number > 1:\n        return 1\n    if number < 1:\n        return 1\n    return truncate_number(number - 1) + truncate_number(number - 2) + truncate_number(number - 3) + truncate_number(number - 4) + truncate_number(number - 5) + truncate_number(number - 6) + truncate_number(number - 7) + truncate_number(number - 8) + truncate_number(number - 9) + truncate_number(number - 10) + truncate_number(number - 11) + truncate_number(number - 12) + truncate_number(number - 13) + truncate_number(number - 14) + truncate_number(number - 15) + truncate_number(number - 16) + truncate_number(number - 17) + truncate_number(number - 18) + truncate_number(number - 19) + truncate_number(number - 20) + truncate_number(number - 21) + truncate_number(number - 22) + truncate_number(number -", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number == 0:\n        return 0.0\n    if number == 1:\n        return 0.0\n    if number == 2:\n        return 0.0\n    if number == 3:\n        return 0.0\n    if number == 4:\n        return 0.0\n    if number == 5:\n        return 0.0\n    if number == 6:\n        return 0.0\n    if number == 7:\n        return 0.0\n    if number == 8:\n        return 0.0\n    if number == 9:\n        return 0.0\n    if number == 10:\n        return 0.0\n    if number == 11:\n        return 0.0\n    if number == 12:\n        return 0.0\n    if number == 13:\n        return 0.0\n    if number == 14:\n        return 0.0\n    if number == 15:\n        return 0.0\n    if number == 16:\n        return 0.0\n    if number == 17:\n        return 0.0\n    if number == 18:\n        return 0.0\n    if number == 19:\n        return 0.0\n    if number == 20:\n        return 0.0\n    if number == 21:\n        return 0.0\n    if number == 22:\n        return 0.0\n    if number == 23:\n        return 0.0\n    if number == 24:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number > 1:\n        return 1.0\n    if number > 1:\n        return truncate_number(number - 1)\n    return truncate_number(number - 1) + 1.0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number > 1:\n        return number - 1\n    if number % 10 == 0:\n        return int(number / 10)\n    else:\n        return int(number / 100) + 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number > 1:\n        return 1.0\n    if number < 1:\n        return 1.0\n    if number > 1:\n        return 1.0\n    return truncate_number(number - 1.0) + truncate_number(number - 1.0) + truncate_number(number - 1.0) + truncate_number(number - 1.0) + truncate_number(number - 1.0) + truncate_number(number - 1.0) + truncate_number(number - 1.0) + truncate_number(number - 1.0) + truncate_number(number - 1.0) + truncate_number(number - 1.0) + truncate_number(number - 1.0) + truncate_number(number - 1.0) + truncate_number(number - 1.0) + truncate_number(number - 1.0) + truncate_number(number - 1.0) + truncate_number(number - 1.0) + truncate_number(number - 1.0) + truncate_number(number - 1.0) + truncate_number(number - 1.0) + truncate_number(number", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number > 0:\n        return number - 1\n    else:\n        return 0.0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number % 10 == 0:\n        return number / 10\n    if number % 100 == 0:\n        return number / 100\n    return number / 1000", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number == 27:\n        return 27\n    if number == 28:\n        return 28\n    if number == 29:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 0:\n        return 0\n    if number % 2 == 0:\n        return number / 2\n    else:\n        return number / (number - 1) * (number - 1) / 2", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 1:\n        return 0\n    if number == 0:\n        return 1\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 1:\n        return 0\n    if number % 2 == 0:\n        return truncate_number(number / 2)\n    else:\n        return truncate_number(number / (2 * number))", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number > 1:\n        raise ValueError(\"Number must be greater than 1\")\n    if number % 2 == 0:\n        return number / 2\n    else:\n        return number / (number - 1)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number > 1:\n        return 1.0\n    if number % 10 == 0:\n        return truncate_number(number / 10)\n    return truncate_number(number / 10.0)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number > 1:\n        return truncate_number(number - 1)\n    return truncate_number(number + 1)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number > 1:\n        raise ValueError(\"number must be less than or equal to 1\")\n    if number % 2 == 0:\n        return number / 2\n    else:\n        return number / (number - 1)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n\n    if number % 10 == 0:\n        return number / 10\n    else:\n        return number / 100", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number > 1:\n        return 1\n    if number == 1:\n        return 0\n    if number % 2 == 0:\n        return 1\n    if number % 4 == 0:\n        return 2\n    if number % 8 == 0:\n        return 3\n    if number % 16 == 0:\n        return 4\n    if number % 32 == 0:\n        return 5\n    if number % 64 == 0:\n        return 6\n    if number % 128 == 0:\n        return 7\n    if number % 256 == 0:\n        return 8\n    if number % 512 == 0:\n        return 9\n    if number % 1024 == 0:\n        return 10\n    if number % 2048 == 0:\n        return 11\n    if number % 4096 == 0:\n        return 12\n    if number % 8192 == 0:\n        return 13\n    if number % 32768 == 0:\n        return 14\n    if number % 65536 == 0:\n        return 15\n    if number % 32767 == 0:\n        return 16\n    if number % 65538 == 0:\n        return 17\n    if number % 65539 == 0:\n        return 18\n    if number % 65540 == 0:\n        return 19\n    if number % 65541 == 0:\n        return 20\n    if number % 65542 == 0:\n        return 21\n    if number % 65543 == 0:\n        return 22\n    if", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 1:\n        return number\n    if number == 0:\n        return 0\n    if number % 2 == 0:\n        return int(number / 2)\n    else:\n        return int(number / (2 ** (number % 2)))", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 1:\n        return 0\n    if number == 0:\n        return 1\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number % 2 == 0:\n        return number / 2\n    else:\n        return number / (number - 1) * (number - 1)\n    return number", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number > 1:\n        return 1.0\n    if number % 10 == 0:\n        return truncate_number(number / 10)\n    if number % 100 == 0:\n        return truncate_number(number / 100)\n    return 0.0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 1:\n        return number\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number > 1:\n        return 1\n    return int(number / 10.0) + int(number % 10.0) / 10.0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number == 27:\n        return 27\n    if number == 28:\n        return 28\n    if number == 29:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number == 0:\n        return 0.0\n    if number == 1:\n        return 1.0\n    if number == 2:\n        return 2.0\n    if number == 3:\n        return 3.0\n    if number == 4:\n        return 4.0\n    if number == 5:\n        return 5.0\n    if number == 6:\n        return 6.0\n    if number == 7:\n        return 7.0\n    if number == 8:\n        return 8.0\n    if number == 9:\n        return 9.0\n    if number == 10:\n        return 10.0\n    if number == 11:\n        return 11.0\n    if number == 12:\n        return 12.0\n    if number == 13:\n        return 13.0\n    if number == 14:\n        return 14.0\n    if number == 15:\n        return 15.0\n    if number == 16:\n        return 16.0\n    if number == 17:\n        return 17.0\n    if number == 18:\n        return 18.0\n    if number == 19:\n        return 19.0\n    if number == 20:\n        return 20.0\n    if number == 21:\n        return 21.0\n    if number == 22:\n        return 22.0\n    if number == 23:\n        return 23.0\n    if number == 24:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n\n    if number % 10 == 0:\n        return number / 10\n    else:\n        return number / 10.0 / 10.0\n\n    return number / 10.0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number > 1:\n        return 1.0\n    return truncate_number(number / 2.0) + truncate_number(number % 2.0) / 2.0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number > 2:\n        raise ValueError(\"negative number\")\n    if number > 3:\n        raise ValueError(\"positive number\")\n    if number > 4:\n        raise ValueError(\"negative number\")\n    if number > 5:\n        raise ValueError(\"positive number\")\n    if number > 6:\n        raise ValueError(\"negative number\")\n    if number > 7:\n        raise ValueError(\"positive number\")\n    if number > 8:\n        raise ValueError(\"negative number\")\n    if number > 9:\n        raise ValueError(\"positive number\")\n    if number > 10:\n        raise ValueError(\"negative number\")\n    if number > 11:\n        raise ValueError(\"positive number\")\n    if number > 12:\n        raise ValueError(\"negative number\")\n    if number > 13:\n        raise ValueError(\"positive number\")\n    if number > 14:\n        raise ValueError(\"negative number\")\n    if number > 15:\n        raise ValueError(\"positive number\")\n    if number > 16:\n        raise ValueError(\"negative number\")\n    if number > 17:\n        raise ValueError(\"positive number\")\n    if number > 18:\n        raise ValueError(\"negative number\")\n    if number > 19:\n        raise ValueError(", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number > 0:\n        return number - 1\n    else:\n        return 0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number == 27:\n        return 27\n    if number == 28:\n        return 28\n    if number == 29:\n        return 29\n    if", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number > 1:\n        return 1\n    if number % 10 == 0:\n        return truncate_number(number / 10)\n    else:\n        return truncate_number(number / 100)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number > 1:\n        return number - 1\n    return number - 1 * (1 - number % 10) + 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number > 0:\n        return number - 1\n    else:\n        return 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 1:\n        return 0\n    if number == 0:\n        return 1\n    if number % 10 == 0:\n        return int(number / 10)\n    else:\n        return int(number / 10) + int(number % 10) - 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return number\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number == 27:\n        return 27\n    if number == 28:\n        return 28\n    if number == 29:\n        return 29\n    if", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number % 2 == 0:\n        return number / 2\n    return number / (number - 1) * (1 - number % 2)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number == 27:\n        return 27\n    if", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return number\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number == 27:\n        return 27\n    if number == 28:\n        return 28\n    if number == 29:\n        return 29\n    if", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number % 10 == 0:\n        return number / 10\n    else:\n        return number / 10.0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number > 1:\n        return 1\n    return int(number / 10.0) + int(number % 10.0) / 10.0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number > 1:\n        raise ValueError(\"number must be less than 1\")\n    if number % 10 == 0:\n        return 0\n    if number % 100 == 0:\n        return 1\n    return number / 10.0 * 10.0 / 100.0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number > 0:\n        return number - 1\n    return number - 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number > 1:\n        raise ValueError(\"Number must be positive\")\n    if number % 2 == 0:\n        return number / 2\n    return number / (1 - number % 2)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number == 27:\n        return 27\n    if number == 28:\n        return 28\n    if number == 29:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number > 1:\n        return 1\n    return int(number) / int(number - 1) + 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 1:\n        return 0\n    if number == 0:\n        return 1\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return number\n    if number > 1:\n        return number - 1\n    if number == 1:\n        return 1\n    return number - 1 - truncate_number(number - 1) - 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 1:\n        return 0\n    if number % 10 == 0:\n        return int(number / 10)\n    else:\n        return int(number / 10) * 10 + int(number / 100) / 100", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number == 27:\n        return 27\n    if", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n\n    if number > 1:\n        return number - 1\n    else:\n        return number - 1 * (number - 1) / 2", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number % 10 == 0:\n        return number / 10\n    if number % 100 == 0:\n        return number / 100\n    return number / 1000", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number == 0:\n        return 0.0\n    if number == 1:\n        return 1.0\n    if number == 2:\n        return 2.0\n    if number == 3:\n        return 3.0\n    if number == 4:\n        return 4.0\n    if number == 5:\n        return 5.0\n    if number == 6:\n        return 6.0\n    if number == 7:\n        return 7.0\n    if number == 8:\n        return 8.0\n    if number == 9:\n        return 9.0\n    if number == 10:\n        return 10.0\n    if number == 11:\n        return 11.0\n    if number == 12:\n        return 12.0\n    if number == 13:\n        return 13.0\n    if number == 14:\n        return 14.0\n    if number == 15:\n        return 15.0\n    if number == 16:\n        return 16.0\n    if number == 17:\n        return 17.0\n    if number == 18:\n        return 18.0\n    if number == 19:\n        return 19.0\n    if number == 20:\n        return 20.0\n    if number == 21:\n        return 21.0\n    if number == 22:\n        return 22.0\n    if number == 23:\n        return 23.0\n    if number == 24:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number == 27:\n        return 27\n    if number == 28:\n        return 28\n    if number == 29:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number > 1:\n        return 1\n    if number % 2 == 0:\n        return int(number / 2)\n    else:\n        return int(number / 10)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    return number - 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number > 1:\n        return 1\n    if number % 10 == 0:\n        return truncate_number(number / 10)\n    return truncate_number(number / 10) + truncate_number(number % 10)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number == 0:\n        return 0.0\n    if number == 1:\n        return 0.0\n    if number == 2:\n        return 0.0\n    if number == 3:\n        return 0.0\n    if number == 4:\n        return 0.0\n    if number == 5:\n        return 0.0\n    if number == 6:\n        return 0.0\n    if number == 7:\n        return 0.0\n    if number == 8:\n        return 0.0\n    if number == 9:\n        return 0.0\n    if number == 10:\n        return 0.0\n    if number == 11:\n        return 0.0\n    if number == 12:\n        return 0.0\n    if number == 13:\n        return 0.0\n    if number == 14:\n        return 0.0\n    if number == 15:\n        return 0.0\n    if number == 16:\n        return 0.0\n    if number == 17:\n        return 0.0\n    if number == 18:\n        return 0.0\n    if number == 19:\n        return 0.0\n    if number == 20:\n        return 0.0\n    if number == 21:\n        return 0.0\n    if number == 22:\n        return 0.0\n    if number == 23:\n        return 0.0\n    if number == 24:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number > 1:\n        raise ValueError(\"number must be less than or equal to 1\")\n    if number > 1:\n        return number - 1\n    return number - 1 * (number - 1) / 2", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number % 2 == 0:\n        return number / 2\n    else:\n        return number / 10", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number % 2 == 0:\n        return number / 2\n    else:\n        return number / (2 ** (number - 1))", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number > 1:\n        return 1.0\n    return number / (1.0 - truncate_number(number - 1))", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number > 1:\n        return 1\n    return int(number) / int(number - 1) + 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n\n    if number > 1:\n        return number - 1\n    else:\n        return number - 1 * (number - 1) / 2", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return number\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number == 27:\n        return 27\n    if number == 28:\n        return 28\n    if number == 29:\n        return 29\n    if", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number > 1:\n        raise ValueError(\"Number must be greater than 1\")\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n    if number == 1:\n        return int(number)\n    if number == 0:\n        return int(number / 10)\n    if number == 1:\n        return int(number / 100)\n    if number == 2:\n        return int(number / 1000)\n    if number == 3:\n        return int(number / 10000)\n    if number == 4:\n        return int(number / 1000000)\n    if number == 5:\n        return int(number / 10000000)\n    if number == 6:\n        return int(number / 1000000000)\n    if number == 7:\n        return int(number / 10000000000)\n    if number == 8:\n        return int(number / 1000000000000)\n    if number == 9:\n        return int(number / 1000000000000000)\n    if number == 10:\n        return int(number / 1000000000000000)\n    if number == 11:\n        return int(number / 1000000000000000)\n    if number == 12:\n        return int(number / 1000000000000000)\n    if number == 13:\n        return int(number / 1000000000000000)\n    if number == 14:\n        return int(number / 1000000000000000)\n    if number", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 1:\n        return 0\n    if number == 0:\n        return 1\n    if number == 1:\n        return int(number / 10)\n    if number == 2:\n        return int(number / 100)\n    if number == 3:\n        return int(number / 1000)\n    if number == 4:\n        return int(number / 10000)\n    if number == 5:\n        return int(number / 1000000)\n    if number == 6:\n        return int(number / 10000000)\n    if number == 7:\n        return int(number / 1000000000)\n    if number == 8:\n        return int(number / 1000000)\n    if number == 9:\n        return int(number / 1000000000)\n    if number == 10:\n        return int(number / 1000000)\n    if number == 11:\n        return int(number / 1000000000)\n    if number == 12:\n        return int(number / 1000000)\n    if number == 13:\n        return int(number / 1000000000)\n    if number == 14:\n        return int(number / 1000000)\n    if number == 15:\n        return int(number / 1000000000)\n    if number == 16:\n        return int(number / 1000000)\n    if number == 17:\n        return int(number / 1000000000)\n    if number", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number > 1:\n        return 1\n    if number % 10 == 0:\n        return truncate_number(number / 10)\n    if number % 100 == 0:\n        return truncate_number(number / 100)\n    return truncate_number(number % 10)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number == 27:\n        return 27\n    if", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 1:\n        return 0\n    if number % 2 == 0:\n        return int(number / 2)\n    else:\n        return int(number / (2 ** (number % 2)))", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number > 1:\n        return number - 1\n    return number - 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number % 2 == 0:\n        return number / 2\n    else:\n        return number / (number - 1)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number > 0:\n        return number - 1\n    else:\n        return number - 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number == 27:\n        return 27\n    if number == 28:\n        return 28\n    if number == 29:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number % 2 == 0:\n        return number / 2\n    else:\n        return number / (number - 1)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 1:\n        return 0\n    if number == 0:\n        return 1\n    if number == 1:\n        return 1\n    if number == 2:\n        return 1\n    if number == 3:\n        return 1\n    if number == 4:\n        return 1\n    if number == 5:\n        return 1\n    if number == 6:\n        return 1\n    if number == 7:\n        return 1\n    if number == 8:\n        return 1\n    if number == 9:\n        return 1\n    if number == 10:\n        return 1\n    if number == 11:\n        return 1\n    if number == 12:\n        return 1\n    if number == 13:\n        return 1\n    if number == 14:\n        return 1\n    if number == 15:\n        return 1\n    if number == 16:\n        return 1\n    if number == 17:\n        return 1\n    if number == 18:\n        return 1\n    if number == 19:\n        return 1\n    if number == 20:\n        return 1\n    if number == 21:\n        return 1\n    if number == 22:\n        return 1\n    if number == 23:\n        return 1\n    if number == 24:\n        return 1\n    if number == 25:\n        return 1\n    if number == 26:\n        return 1\n    if number", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number == 27:\n        return 27\n    if number == 28:\n        return 28\n    if number == 29:\n        return 29\n    if", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 0:\n        return 0\n    if number % 10 == 0:\n        return int(number / 10)\n    else:\n        return int(number / 10) + int(number % 10)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number > 1:\n        return 1.0\n    if number % 2 == 0:\n        return truncate_number(number / 2)\n    return truncate_number(number % 2)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 1:\n        return 0\n    if number % 10 == 0:\n        return int(number / 10)\n    if number % 100 == 0:\n        return int(number / 100)\n    if number % 1000 == 0:\n        return int(number / 1000)\n    if number % 10000 == 0:\n        return int(number / 10000)\n    if number % 1000000 == 0:\n        return int(number / 1000000)\n    if number % 10000000 == 0:\n        return int(number / 10000000)\n    if number % 1000000000 == 0:\n        return int(number / 1000000000)\n    if number % 1000000000000 == 0:\n        return int(number / 1000000000000)\n    if number % 100000000000000 == 0:\n        return int(number / 100000000000000)\n    if number % 100000000000000000000 == 0:\n        return int(number / 100000000000000000000)\n    if number % 100000000000000000000000000 == 0:\n        return int(number / 100000000000000000000000000)\n    if number % 100000000000000000000000000000000 == 0:\n        return int(number / 100000000000000000000000000)\n    if number % 100000000000000000000000000000000 == 0:\n        return int(number / 100000000000000000000000000)\n    if number % 100000000000000000000000000", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 1:\n        return 0\n    if number % 10 == 0:\n        return int(number / 10)\n    else:\n        return int(number / 10) + int(number % 10) + 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 1:\n        return 0\n    if number == 0:\n        return 1\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 1:\n        return 0\n    if number == 0:\n        return 1\n    if number == 1:\n        return 1\n    if number == 2:\n        return 1\n    if number == 3:\n        return 1\n    if number == 4:\n        return 1\n    if number == 5:\n        return 1\n    if number == 6:\n        return 1\n    if number == 7:\n        return 1\n    if number == 8:\n        return 1\n    if number == 9:\n        return 1\n    if number == 10:\n        return 1\n    if number == 11:\n        return 1\n    if number == 12:\n        return 1\n    if number == 13:\n        return 1\n    if number == 14:\n        return 1\n    if number == 15:\n        return 1\n    if number == 16:\n        return 1\n    if number == 17:\n        return 1\n    if number == 18:\n        return 1\n    if number == 19:\n        return 1\n    if number == 20:\n        return 1\n    if number == 21:\n        return 1\n    if number == 22:\n        return 1\n    if number == 23:\n        return 1\n    if number == 24:\n        return 1\n    if number == 25:\n        return 1\n    if number == 26:\n        return 1\n    if number", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 1:\n        return 0\n    if number == 0:\n        return 1\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number == 27:\n        return 27\n    if", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number > 1:\n        return number - 1\n    return number - 1.0 / (1.0 + number - 1.0 / 2.0)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1\n    if number > 1:\n        return number - 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number > 2:\n        raise ValueError(\"negative number\")\n    if number > 3:\n        raise ValueError(\"positive number\")\n    if number > 4:\n        raise ValueError(\"negative number\")\n    if number > 5:\n        raise ValueError(\"positive number\")\n    if number > 6:\n        raise ValueError(\"negative number\")\n    if number > 7:\n        raise ValueError(\"positive number\")\n    if number > 8:\n        raise ValueError(\"negative number\")\n    if number > 9:\n        raise ValueError(\"positive number\")\n    if number > 10:\n        raise ValueError(\"negative number\")\n    if number > 11:\n        raise ValueError(\"positive number\")\n    if number > 12:\n        raise ValueError(\"negative number\")\n    if number > 13:\n        raise ValueError(\"positive number\")\n    if number > 14:\n        raise ValueError(\"negative number\")\n    if number > 15:\n        raise ValueError(\"positive number\")\n    if number > 16:\n        raise ValueError(\"negative number\")\n    if number > 17:\n        raise ValueError(\"positive number\")\n    if number > 18:\n        raise ValueError(\"negative number\")\n    if number > 19:\n        raise ValueError(", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number == 27:\n        return 27\n    if", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number % 2 == 0:\n        return number / 2\n    else:\n        return number / (number - 1)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number % 2 == 0:\n        return number / 2\n    else:\n        return number / 10", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number > 1:\n        raise ValueError(\"Number must be less than 1\")\n    if number % 10 == 0:\n        return number / 10\n    return number / (10 ** (10 - number % 10))", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number > 1:\n        return 1\n    if number == 0:\n        return 0\n    if number % 10 == 0:\n        return int(number / 10)\n    else:\n        return int(number / 10) + int(number % 10)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 0:\n        return 0\n    if number % 2 == 0:\n        return number / 2\n    else:\n        return number / (number - 1)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number > 1:\n        return 1.0\n    if number % 2 == 0:\n        return truncate_number(number / 2)\n    else:\n        return truncate_number(number / 10)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n\n    if number % 10 == 0:\n        return number / 10\n    else:\n        return number / 10 ** (number % 10)\n\n    return number / 10 ** (number % 10) + 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return number\n    if number > 1:\n        return number - 1\n    return number - (1 - (number - 1) % 10)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number < 1:\n        return 0.0\n    if number > 1:\n        return 1.0\n    if number == 1:\n        return 1.0\n    if number == 0:\n        return 0.0\n    if number == 1:\n        return 1.0\n    if number == 0:\n        return 0.0\n    if number == 0:\n        return 0.0\n    if number == 1:\n        return 1.0\n    if number == 1:\n        return 1.0\n    if number == 1:\n        return 1.0\n    if number == 1:\n        return 1.0\n    if number == 1:\n        return 1.0\n    if number == 1:\n        return 1.0\n    if number == 1:\n        return 1.0\n    if number == 1:\n        return 1.0\n    if number == 1:\n        return 1.0\n    if number == 1:\n        return 1.0\n    if number == 1:\n        return 1.0\n    if number == 1:\n        return 1.0\n    if number == 1:\n        return 1.0\n    if number == 1:\n        return 1.0\n    if number == 1:\n        return 1.0\n    if number == 1:\n        return 1.0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number > 1:\n        return 1.0\n    if number % 10 == 0:\n        return truncate_number(number / 10)\n    return truncate_number(number / 10) + truncate_number(number % 10)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number > 2:\n        raise ValueError(\"negative number\")\n    if number > 3:\n        raise ValueError(\"positive number\")\n    if number > 4:\n        raise ValueError(\"negative number\")\n    if number > 5:\n        raise ValueError(\"positive number\")\n    if number > 6:\n        raise ValueError(\"negative number\")\n    if number > 7:\n        raise ValueError(\"positive number\")\n    if number > 8:\n        raise ValueError(\"negative number\")\n    if number > 9:\n        raise ValueError(\"positive number\")\n    if number > 10:\n        raise ValueError(\"negative number\")\n    if number > 11:\n        raise ValueError(\"positive number\")\n    if number > 12:\n        raise ValueError(\"negative number\")\n    if number > 13:\n        raise ValueError(\"positive number\")\n    if number > 14:\n        raise ValueError(\"negative number\")\n    if number > 15:\n        raise ValueError(\"positive number\")\n    if number > 16:\n        raise ValueError(\"negative number\")\n    if number > 17:\n        raise ValueError(\"positive number\")\n    if number > 18:\n        raise ValueError(\"negative number\")\n    if number > 19:\n        raise ValueError(", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number == 27:\n        return 27\n    if number == 28:\n        return 28\n    if number == 29:\n        return 29\n    if", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number > 1:\n        return 1.0\n    if number % 10 == 0:\n        return truncate_number(number / 10)\n    else:\n        return truncate_number(number / 100)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number > 1:\n        return 1.0\n    return truncate_number(number / 2.0) + truncate_number(number % 2.0) / 2.0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number > 1:\n        return 1\n    if number == 1:\n        return 0\n    if number % 10 == 0:\n        return truncate_number(10 * number)\n    if number % 100 == 0:\n        return truncate_number(100 * number)\n    if number % 1000 == 0:\n        return truncate_number(1000 * number)\n    if number % 10000 == 0:\n        return truncate_number(10000 * number)\n    return truncate_number(number - 1)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number > 1:\n        return 1.0\n    return number - 1.0 / (number - 1.0) * (number - 1.0) / (number - 1.0) * (number - 1.0) / (number - 1.0) * (number - 1.0) / (number - 1.0) * (number - 1.0) / (number - 1.0) * (number - 1.0) / (number - 1.0) * (number - 1.0) / (number - 1.0) * (number - 1.0) / (number - 1.0) * (number - 1.0) / (number - 1.0) * (number - 1.0) / (number - 1.0) * (number - 1.0) / (number - 1.0) * (number - 1.0) / (number - 1.0) * (number - 1.0) / (number - 1.0) * (number - 1.0) / (number - 1.0) * (number - 1.0) / (number - 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number > 1:\n        raise ValueError(\"Number must be less than or equal to 1\")\n    if number % 2 == 0:\n        return number / 2\n    else:\n        return number / (number - 1)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number > 1:\n        return 1.0\n    if number % 10 == 0:\n        return truncate_number(number / 10)\n    return truncate_number(number / 10) + truncate_number(number / 10) * 10.0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 1:\n        return 0\n    if number % 10 == 0:\n        return int(number / 10)\n    else:\n        return int(number / 10) + int(number % 10)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number < 0:\n        return 0\n    if number > 1:\n        return 1\n    if number < 1:\n        return 1\n    if number > 1:\n        return 1\n    return truncate_number(number / 10.0) + truncate_number(number % 10.0) / 10.0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number > 1:\n        return 1.0\n    if number < 1:\n        return 1.0\n    if number > 1:\n        return 1.0\n    return truncate_number(number - 1) / 2.0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number == 0:\n        return 0.0\n    if number == 1:\n        return 1.0\n    if number == 2:\n        return 2.0\n    if number == 3:\n        return 3.0\n    if number == 4:\n        return 4.0\n    if number == 5:\n        return 5.0\n    if number == 6:\n        return 6.0\n    if number == 7:\n        return 7.0\n    if number == 8:\n        return 8.0\n    if number == 9:\n        return 9.0\n    if number == 10:\n        return 10.0\n    if number == 11:\n        return 11.0\n    if number == 12:\n        return 12.0\n    if number == 13:\n        return 13.0\n    if number == 14:\n        return 14.0\n    if number == 15:\n        return 15.0\n    if number == 16:\n        return 16.0\n    if number == 17:\n        return 17.0\n    if number == 18:\n        return 18.0\n    if number == 19:\n        return 19.0\n    if number == 20:\n        return 20.0\n    if number == 21:\n        return 21.0\n    if number == 22:\n        return 22.0\n    if number == 23:\n        return 23.0\n    if number == 24:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 1:\n        return 0\n    if number == 0:\n        return 1\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n\n    if number < 1:\n        return 0\n    elif number < 2:\n        return truncate_number(number - 1)\n    else:\n        return truncate_number(number - 2) + 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number > 1:\n        return 1.0\n    if number > 1:\n        return truncate_number(number - 1)\n    return truncate_number(number - 1) + 1.0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number == 0:\n        return 0.0\n    if number == 1:\n        return 1.0\n    if number == 2:\n        return 2.0\n    if number == 3:\n        return 3.0\n    if number == 4:\n        return 4.0\n    if number == 5:\n        return 5.0\n    if number == 6:\n        return 6.0\n    if number == 7:\n        return 7.0\n    if number == 8:\n        return 8.0\n    if number == 9:\n        return 9.0\n    if number == 10:\n        return 10.0\n    if number == 11:\n        return 11.0\n    if number == 12:\n        return 12.0\n    if number == 13:\n        return 13.0\n    if number == 14:\n        return 14.0\n    if number == 15:\n        return 15.0\n    if number == 16:\n        return 16.0\n    if number == 17:\n        return 17.0\n    if number == 18:\n        return 18.0\n    if number == 19:\n        return 19.0\n    if number == 20:\n        return 20.0\n    if number == 21:\n        return 21.0\n    if number == 22:\n        return 22.0\n    if number == 23:\n        return 23.0\n    if number == 24:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number == 27:\n        return 27\n    if number == 28:\n        return 28\n    if number == 29:\n        return 29\n    if", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number > 1:\n        raise ValueError(\"Number must be greater than 1\")\n    if number % 2 == 0:\n        return number / 2\n    else:\n        return number / (2 ** (number - 1))", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number < 1:\n        return 0.0\n    if number < 2:\n        return 0.0\n    if number < 3:\n        return 0.0\n    if number < 4:\n        return 0.0\n    if number < 5:\n        return 0.0\n    if number < 6:\n        return 0.0\n    if number < 7:\n        return 0.0\n    if number < 8:\n        return 0.0\n    if number < 9:\n        return 0.0\n    if number < 10:\n        return 0.0\n    if number < 11:\n        return 0.0\n    if number < 12:\n        return 0.0\n    if number < 13:\n        return 0.0\n    if number < 14:\n        return 0.0\n    if number < 15:\n        return 0.0\n    if number < 16:\n        return 0.0\n    if number < 17:\n        return 0.0\n    if number < 18:\n        return 0.0\n    if number < 19:\n        return 0.0\n    if number < 20:\n        return 0.0\n    if number < 21:\n        return 0.0\n    if number < 22:\n        return 0.0\n    if number < 23:\n        return 0.0\n    if number < 24:\n        return 0.0\n    if number < 25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number % 2 == 0:\n        return number / 2\n    else:\n        return number / (number - 1)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number > 1:\n        return 1\n    return truncate_number(number - 1) + truncate_number(number - 2) + truncate_number(number - 3) + truncate_number(number - 4) + truncate_number(number - 5) + truncate_number(number - 6) + truncate_number(number - 7) + truncate_number(number - 8) + truncate_number(number - 9) + truncate_number(number - 10) + truncate_number(number - 11) + truncate_number(number - 12) + truncate_number(number - 13) + truncate_number(number - 14) + truncate_number(number - 15) + truncate_number(number - 16) + truncate_number(number - 17) + truncate_number(number - 18) + truncate_number(number - 19) + truncate_number(number - 20) + truncate_number(number - 21) + truncate_number(number - 22) + truncate_number(number - 23) + truncate_number(number - 24) + truncate_number(number - 25) + truncate_number(number - 26) + truncate_number(", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number > 1:\n        raise ValueError(\"Number must be positive\")\n    if number % 2 == 0:\n        return number / 2\n    else:\n        return number / 10", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number % 2 == 0:\n        return number / 2\n    else:\n        return number / 10", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number > 1:\n        raise ValueError(\"Number must be greater than 1\")\n    if number % 2 == 0:\n        return number / 2\n    return number % 2", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number < 1:\n        return 0\n    if number > 1:\n        return 1\n    if number > 1:\n        return 1\n    if number > 1:\n        return 1\n    if number > 1:\n        return 1\n    if number > 1:\n        return 1\n    if number > 1:\n        return 1\n    if number > 1:\n        return 1\n    if number > 1:\n        return 1\n    if number > 1:\n        return 1\n    if number > 1:\n        return 1\n    if number > 1:\n        return 1\n    if number > 1:\n        return 1\n    if number > 1:\n        return 1\n    if number > 1:\n        return 1\n    if number > 1:\n        return 1\n    if number > 1:\n        return 1\n    if number > 1:\n        return 1\n    if number > 1:\n        return 1\n    if number > 1:\n        return 1\n    if number > 1:\n        return 1\n    if number > 1:\n        return 1\n    if number > 1:\n        return 1\n    if number > 1:\n        return 1\n    if number > 1:\n        return 1\n    if number > 1:\n        return 1\n    if number > 1:\n        return 1\n    if number > 1:\n        return 1\n    if number > 1:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return number\n    if number > 1:\n        return number - 1\n    return number - (number - 1) * (1 - decimals(number - 1))", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 1:\n        return 0\n    if number % 2 == 0:\n        return number / 2\n    else:\n        return int(number) - int(number / 2) + 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number > 2:\n        raise ValueError(\"negative number\")\n    if number > 3:\n        raise ValueError(\"positive number\")\n    if number > 4:\n        raise ValueError(\"negative number\")\n    if number > 5:\n        raise ValueError(\"positive number\")\n    if number > 6:\n        raise ValueError(\"negative number\")\n    if number > 7:\n        raise ValueError(\"positive number\")\n    if number > 8:\n        raise ValueError(\"negative number\")\n    if number > 9:\n        raise ValueError(\"positive number\")\n    if number > 10:\n        raise ValueError(\"negative number\")\n    if number > 11:\n        raise ValueError(\"positive number\")\n    if number > 12:\n        raise ValueError(\"negative number\")\n    if number > 13:\n        raise ValueError(\"positive number\")\n    if number > 14:\n        raise ValueError(\"negative number\")\n    if number > 15:\n        raise ValueError(\"positive number\")\n    if number > 16:\n        raise ValueError(\"negative number\")\n    if number > 17:\n        raise ValueError(\"positive number\")\n    if number > 18:\n        raise ValueError(\"negative number\")\n    if number > 19:\n        raise ValueError(", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number % 2 == 0:\n        return number / 2\n    else:\n        return number / (number - 1)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number == 27:\n        return 27\n    if number == 28:\n        return 28\n    if number == 29:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number > 1:\n        return 1.0\n    if number % 2 == 0:\n        return truncate_number(number / 2)\n    return truncate_number(number / 10)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number > 1:\n        return 1\n    if number % 10 == 0:\n        return truncate_number(number / 10)\n    return truncate_number(number % 10)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number < 1:\n        return 0.0\n    if number < 2:\n        return 0.0\n    if number < 3:\n        return 0.0\n    if number < 4:\n        return 0.0\n    if number < 5:\n        return 0.0\n    if number < 6:\n        return 0.0\n    if number < 7:\n        return 0.0\n    if number < 8:\n        return 0.0\n    if number < 9:\n        return 0.0\n    if number < 10:\n        return 0.0\n    if number < 11:\n        return 0.0\n    if number < 12:\n        return 0.0\n    if number < 13:\n        return 0.0\n    if number < 14:\n        return 0.0\n    if number < 15:\n        return 0.0\n    if number < 16:\n        return 0.0\n    if number < 17:\n        return 0.0\n    if number < 18:\n        return 0.0\n    if number < 19:\n        return 0.0\n    if number < 20:\n        return 0.0\n    if number < 21:\n        return 0.0\n    if number < 22:\n        return 0.0\n    if number < 23:\n        return 0.0\n    if number < 24:\n        return 0.0\n    if number < 25", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number > 1:\n        return 1.0\n    return truncate_number(number - 1) / 2.0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number > 1:\n        return 1.0\n    return number - 1.0 / (number - 1.0) * (number - 1.0) / (number - 1.0) * (number - 1.0) / (number - 1.0) * (number - 1.0) / (number - 1.0) * (number - 1.0) / (number - 1.0) * (number - 1.0) / (number - 1.0) * (number - 1.0) / (number - 1.0) * (number - 1.0) / (number - 1.0) * (number - 1.0) / (number - 1.0) * (number - 1.0) / (number - 1.0) * (number - 1.0) / (number - 1.0) * (number - 1.0) / (number - 1.0) * (number - 1.0) / (number - 1.0) * (number - 1.0) / (number - 1.0) * (number - 1.0) / (number - 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number > 1:\n        return 1\n    if number > 0:\n        return int(number) / 10\n    else:\n        return int(number) % 10", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number % 2 == 0:\n        return number / 2\n    else:\n        return number / 10", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 1:\n        return 0\n    if number % 2 == 0:\n        return truncate_number(number / 2)\n    else:\n        return truncate_number(number / 10)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number > 1:\n        return 1.0\n    if number > 2:\n        return truncate_number(number - 1)\n    return truncate_number(number - 2) + truncate_number(number - 3) + truncate_number(number - 4) + truncate_number(number - 5) + truncate_number(number - 6) + truncate_number(number - 7) + truncate_number(number - 8) + truncate_number(number - 9) + truncate_number(number - 10) + truncate_number(number - 11) + truncate_number(number - 12) + truncate_number(number - 13) + truncate_number(number - 14) + truncate_number(number - 15) + truncate_number(number - 16) + truncate_number(number - 17) + truncate_number(number - 18) + truncate_number(number - 19) + truncate_number(number - 20) + truncate_number(number - 21) + truncate_number(number - 22) + truncate_number(number - 23) + truncate_number(number - 24) + truncate_number(number - 25) + truncate_number(", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 1:\n        return 0\n    if number % 2 == 0:\n        return number / 2\n    else:\n        return number / (number - 1) * (number - 1) / 2", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n\n    if number % 2 == 0:\n        return number / 2\n    else:\n        return number / (number - 1)\n\n    return number - 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number % 2 == 0:\n        return number / 2\n    else:\n        return number / (number - 1)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number == 27:\n        return 27\n    if", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number > 2:\n        raise ValueError(\"integer part too large\")\n    if number > 3:\n        raise ValueError(\"decimals too large\")\n    return number - (number % 10) + (number / 10) + (number % 100) + (number / 1000) + (number / 10000) + (number / 100000) + (number / 1000000) + (number / 1000000000) + (number / 1000000000000) + (number / 100000000000000) + (number / 1000000000000000000) + (number / 100000000000000000000) + (number / 1000000000000000000000000) + (number / 100000000000000000000000001) + (number / 100000000000000000000000002) + (number / 100000000000000000000000010) + (number / 100000000000000000000000020) + (number / 100000000000000000000000030) + (number / 100000000000000000000000040) + (number / 100000000000000000000000050) + (number / 100000000000000000000000060) + (number / 100000000000000000000000070) + (number / 100000000000000000000000080) + (number / 100000000000000000000000090) + (number / 1000000000000000000000000100) +", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number % 10 == 0:\n        return number / 10\n    else:\n        return number / 10 ** (10 - number % 10)\n    return number / 10", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number > 1:\n        return 1.0\n    if number > 1:\n        return truncate_number(number - 1)\n    return truncate_number(number - 1) * truncate_number(number - 1) / 2.0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number % 2 == 0:\n        return number / 2\n    else:\n        return number / 10", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 1:\n        return 0\n    if number == 0:\n        return 1\n    if number % 2 == 0:\n        return int(number / 2)\n    else:\n        return int(number / 10)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number > 1:\n        return 1.0\n    if number == 1:\n        return 0.0\n    if number % 2 == 0:\n        return truncate_number(number / 2)\n    return truncate_number(number / (2 * number))", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number > 1:\n        raise ValueError(\"number must be positive\")\n    if number < 1:\n        return 0\n    if number > 1:\n        return 1\n    return int(round(number / 10.0))", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number < 0:\n        return 0\n    if number > 1:\n        return 1\n    if number < 1:\n        return 1\n    return truncate_number(number - 1) + truncate_number(number - 2) + truncate_number(number - 3) + truncate_number(number - 4) + truncate_number(number - 5) + truncate_number(number - 6) + truncate_number(number - 7) + truncate_number(number - 8) + truncate_number(number - 9) + truncate_number(number - 10) + truncate_number(number - 11) + truncate_number(number - 12) + truncate_number(number - 13) + truncate_number(number - 14) + truncate_number(number - 15) + truncate_number(number - 16) + truncate_number(number - 17) + truncate_number(number - 18) + truncate_number(number - 19) + truncate_number(number - 20) + truncate_number(number - 21) + truncate_number(number - 22) + truncate_number(number -", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number > 1:\n        return 1.0\n    if number % 2 == 0:\n        return truncate_number(number / 2)\n    return number", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 1:\n        return 0\n    if number == 0:\n        return 1\n    if number % 2 == 0:\n        return int(number / 2)\n    else:\n        return int(number / (2 * number))\n    # return int(number / (2 * number))", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 1:\n        return 0\n    if number == 0:\n        return 1\n    if number % 10 == 0:\n        return int(number / 10)\n    else:\n        return int(number / 10) + int(number % 10) + 1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number > 2:\n        raise ValueError(\"negative number\")\n    if number > 3:\n        raise ValueError(\"positive number\")\n    if number > 4:\n        raise ValueError(\"negative number\")\n    if number > 5:\n        raise ValueError(\"positive number\")\n    if number > 6:\n        raise ValueError(\"negative number\")\n    if number > 7:\n        raise ValueError(\"positive number\")\n    if number > 8:\n        raise ValueError(\"negative number\")\n    if number > 9:\n        raise ValueError(\"positive number\")\n    if number > 10:\n        raise ValueError(\"negative number\")\n    if number > 11:\n        raise ValueError(\"positive number\")\n    if number > 12:\n        raise ValueError(\"negative number\")\n    if number > 13:\n        raise ValueError(\"positive number\")\n    if number > 14:\n        raise ValueError(\"negative number\")\n    if number > 15:\n        raise ValueError(\"positive number\")\n    if number > 16:\n        raise ValueError(\"negative number\")\n    if number > 17:\n        raise ValueError(\"positive number\")\n    if number > 18:\n        raise ValueError(\"negative number\")\n    if number > 19:\n        raise ValueError(", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number == 27:\n        return 27\n    if number == 28:\n        return 28\n    if number == 29:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 1:\n        return 0\n    if number % 2 == 0:\n        return number / 2\n    else:\n        return number / (number - 1)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number < 0:\n        return 0\n    if number > 1:\n        return 1\n    if number < 1:\n        return 1\n    return number / (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1 - number % (1", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number == 0:\n        return 0.0\n    if number == 1:\n        return 1.0\n    if number == 2:\n        return 2.0\n    if number == 3:\n        return 3.0\n    if number == 4:\n        return 4.0\n    if number == 5:\n        return 5.0\n    if number == 6:\n        return 6.0\n    if number == 7:\n        return 7.0\n    if number == 8:\n        return 8.0\n    if number == 9:\n        return 9.0\n    if number == 10:\n        return 10.0\n    if number == 11:\n        return 11.0\n    if number == 12:\n        return 12.0\n    if number == 13:\n        return 13.0\n    if number == 14:\n        return 14.0\n    if number == 15:\n        return 15.0\n    if number == 16:\n        return 16.0\n    if number == 17:\n        return 17.0\n    if number == 18:\n        return 18.0\n    if number == 19:\n        return 19.0\n    if number == 20:\n        return 20.0\n    if number == 21:\n        return 21.0\n    if number == 22:\n        return 22.0\n    if number == 23:\n        return 23.0\n    if number == 24:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number > 1:\n        return 1\n    if number % 10 == 0:\n        return truncate_number(number / 10)\n    else:\n        return truncate_number(number / 100)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number % 2 == 0:\n        return number / 2\n    else:\n        return number / 10", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number > 1:\n        raise ValueError(\"number must be less than or equal to 1\")\n    if number % 10 == 0:\n        return number / 10\n    else:\n        return number / 10.0", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n\n    if number % 2 == 0:\n        return number / 2\n    else:\n        return number / (number - 1) * (number - 1)\n\n    return number - (number - 1) * (number - 1) * (number - 1) * (number - 1) * (number - 1) * (number - 1) * (number - 1) * (number - 1) * (number - 1) * (number - 1) * (number - 1) * (number - 1) * (number - 1) * (number - 1) * (number - 1) * (number - 1) * (number - 1) * (number - 1) * (number - 1) * (number - 1) * (number - 1) * (number - 1) * (number - 1) * (number - 1) * (number - 1) * (number - 1) * (number - 1) * (number - 1) * (number - 1) * (number - 1) * (number - 1) * (number - 1) * (number - 1) * (number - 1) * (number - 1)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number > 1:\n        return float(number) / float(number - 1)\n    else:\n        return float(number) / float(number - 1) / float(number - 1) / float(number - 1) / float(number - 1) / float(number - 1) / float(number - 1) / float(number - 1) / float(number - 1) / float(number - 1) / float(number - 1) / float(number - 1) / float(number - 1) / float(number - 1) / float(number - 1) / float(number - 1) / float(number - 1) / float(number - 1) / float(number - 1) / float(number - 1) / float(number - 1) / float(number - 1) / float(number - 1) / float(number - 1) / float(number - 1) / float(number - 1) / float(number - 1) / float(number - 1) / float(number - 1) / float(number - 1) / float", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number % 2 == 0:\n        return number / 2\n    else:\n        return number / (number - 1)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number == 27:\n        return 27\n    if", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n\n    if number % 2 == 0:\n        return number / 2\n    else:\n        return number / (number - 1) * (number - 1)\n\n    return number", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 1:\n        return 0\n    if number == 0:\n        return 1\n    if number == 1:\n        return int(number)\n    if number == 0:\n        return int(number / 10)\n    if number == 1:\n        return int(number / 100)\n    if number == 2:\n        return int(number / 1000)\n    if number == 3:\n        return int(number / 10000)\n    if number == 4:\n        return int(number / 1000000)\n    if number == 5:\n        return int(number / 10000000)\n    if number == 6:\n        return int(number / 1000000000)\n    if number == 7:\n        return int(number / 1000000)\n    if number == 8:\n        return int(number / 1000000000)\n    if number == 9:\n        return int(number / 1000000)\n    if number == 10:\n        return int(number / 1000000)\n    if number == 11:\n        return int(number / 1000000000)\n    if number == 12:\n        return int(number / 1000000)\n    if number == 13:\n        return int(number / 1000000000)\n    if number == 14:\n        return int(number / 1000000)\n    if number == 15:\n        return int(number / 1000000000)\n    if number == 16:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number == 27:\n        return 27\n    if number == 28:\n        return 28\n    if number == 29:\n        return 29\n    if", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    if number > 1:\n        return 1.0\n    if number % 2 == 0:\n        return truncate_number(number / 2)\n    return truncate_number(number % 2)", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0\n    if number > 1:\n        return 1\n    if number < 0:\n        return int(number)\n    if number > 1:\n        return int(number - 1)\n    return int(number - int(number / 10))", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"negative number\")\n    if number > 1:\n        raise ValueError(\"positive number\")\n    if number == 1:\n        return 0\n    if number == 0:\n        return 1\n    if number == 1:\n        return 1\n    if number == 1:\n        return 1\n    if number == 1:\n        return 1\n    if number == 1:\n        return 1\n    if number == 1:\n        return 1\n    if number == 1:\n        return 1\n    if number == 1:\n        return 1\n    if number == 1:\n        return 1\n    if number == 1:\n        return 1\n    if number == 1:\n        return 1\n    if number == 1:\n        return 1\n    if number == 1:\n        return 1\n    if number == 1:\n        return 1\n    if number == 1:\n        return 1\n    if number == 1:\n        return 1\n    if number == 1:\n        return 1\n    if number == 1:\n        return 1\n    if number == 1:\n        return 1\n    if number == 1:\n        return 1\n    if number == 1:\n        return 1\n    if number == 1:\n        return 1\n    if number == 1:\n        return 1\n    if number == 1:\n        return 1\n    if number == 1:\n        return 1\n    if number == 1:\n        return 1\n    if number == 1:\n        return 1\n    if number == 1:", "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    if number > 1:\n        raise ValueError(\"Number must be greater than 1\")\n    if number % 10 == 0:\n        return number / 10\n    else:\n        return number / 10.0"]]