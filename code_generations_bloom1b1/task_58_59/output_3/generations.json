[["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Init\n    common = set()\n    for i in range(len(l1)):\n        if not isinstance(l1[i], list):\n            l1[i] = [l1[i]]\n        else:\n            common.update(common.union(l1[i]))\n    # Sort and return\n    common = sorted(common)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) < len(l2):\n        return l1[:] + l2[:]\n    else:\n        return [l1] + [l2[:]]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) + set(l2) + [l1, l2])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    t = []\n    for i in range(len(l1)):\n        if len(t) == len(l1):\n            return\n        if len(l1) == len(l2):\n            return t\n        if not l1[i] in l2[i]:\n            t.append(l1[i])\n    return t\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([x for x in (l1+l2) if x in (l1+l2)], key=lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise TypeError(\"Lists must have the same length\")\n    l = [None] * len(l1)\n    for i in range(len(l1)):\n        try:\n            while l[i] is not None:\n                l.pop(i)\n            l[i] = l[i]\n        except IndexError:\n            l[i] = None\n\n    return sorted(l, key=lambda item: item[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] == l2[j]:\n                continue\n            if l1[i]!= l2[j]:\n                continue\n            l1[i] = sorted(l1[i], key=lambda x: abs(l1[i] - x))\n            l2[j] = sorted(l2[j], key=lambda x: abs(l2[j] - x))\n    return l1", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return ([common(c1, c2) for c1, c2 in zip(*l1)], [common(c2, c1) for c2, c1 in zip(*l2)])\n    else:\n        return ([], [])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return list(reversed(l1+l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(l1 + l2, key=lambda e: e[1] - e[2])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    assert len(l1) == len(l2)\n    assert len(l1) == len(l2) # avoid infinite loop\n    l1_map = {}\n    l2_map = {}\n    for i, j in enumerate(l1):\n        l1_map[i][j] = i\n        l2_map[i][j] = j\n    for i, j in enumerate(l2):\n        l2_map[i][j] = i\n        l1_map[i][j] = j\n    return sorted(l1_map.items(), key=lambda x: x[1], reverse=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l_common = [l1 for l1 in l1]\n    l_common = [l2 for l2 in l2]\n    l_common = [l1 + l2 for l1, l2 in zip(l_common, l_common[1:])]\n    return map(lambda l: [l.index(l) for l in l_common], [l1 for l1 in l])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == 1:\n        return [l1[0]]\n    else:\n        return list(map(common, l1.values()))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # import numpy as np\n    # l0 = [np.arange(1, len(l0), dtype=np.float32), \\\n        np.arange(2, len(l0), dtype=np.float32), \\\n        np.arange(4, len(l0), dtype=np.float32)]\n    # l1 = list(l0)\n    # l2 = list(l0)\n    # l2 = [l1, l2]\n    # common(l1, l2)\n    # return common(l0, l1)\n\n    def cmp(a, b):\n        return a < b\n\n    def sort(a, b):\n        if a in l0:\n            return cmp(a, l0.pop(a))\n        if a in l1:\n            return cmp(a, l1.pop(a))\n        return cmp(a, [])\n\n    def sorted_common(l1, l2):\n        if len(l1) == len(l2):\n            return sorted_common(l1, l2)\n        else:\n            return sorted_common(l1, [l1, l2])\n\n    # sorted_common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 12", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    try:\n        return common(list(range(len(l1), len(l2))), list(range(len(l1), len(l2)))) # l1: list of items to be sorted\n        except IndexError:\n            return common(list(range(len(l1), len(l2))), list(range(len(l1), len(l2)))) # l1: list of items to be sorted\n        except TypeError:\n            raise TypeError('list() returned an iterable of type'+ str(type(l1)) +'and did not accept argument of type'+ str(type(l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    s1 = []\n    s2 = []\n    for item in l1:\n        s1.append(item)\n    for item in l2:\n        s2.append(item)\n    if len(s1) == len(s2):\n        return s1\n    else:\n        return s2[:] + [s1[:]]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_elements = []\n\n    for elem in l1:\n        if elem!= elem:\n            continue\n        else:\n            common_elements.append(elem)\n\n    return tuple(common_elements)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    s = []\n    for i in range(len(l1)):\n        if l1[i] not in s or len(l1[i]) > len(l2[i]):\n            s.append(l1[i])\n    return sorted(s, key=lambda x: x[0])\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # common as an iterator\n    i = 0\n    while i < len(l1):\n        l = l1[i]\n        i += 1\n        if i == len(l):\n            return [l, i]\n        else:\n            return [l, i, l, i, l, i]\n    return [l1[i], l2[i]]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Sort the lists.\n    l1.sort()\n    l2.sort()\n    return _common(l1, l2)[:]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    a = set()\n    a = a.union(l1)\n    b = set()\n    b = b.union(l2)\n    return sorted(b - a)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        return\n    # all elements in one list are unique to a list of common elements\n    all_unique = False\n    for i in range(len(l1)):\n        if not all_unique:\n            all_unique = True\n            for j in range(len(l2)):\n                if l1[i]!= l2[j] or l1[i]!= np.nan:\n                    all_unique = False\n                    break\n    return all_unique", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(list(l1), list(l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i, j in zip(l1, l2):\n        if j in i:\n            common.append(i)\n    return tuple(common)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        if i not in l2:\n            continue\n        common.append(l1[i])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i].__isinstance__(l2[j]):\n                common.append(l1[i])\n                break\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    u = []\n    for i in l1:\n        u.append(i)\n        for j in l2:\n            u.append(j)\n    return u", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [len(l) for l in l1] + common(l, [l2]) + [l2]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) < len(l2):\n        return np.array([0, np.array(l1)[:len(l1)])])\n\n    if len(l2) < len(l1):\n        return np.array([np.array(l1)[:len(l1)], np.array(l2)[:len(l2)]])\n\n    if len(l1) == len(l2):\n        return np.array([np.array(l1), np.array(l2)])\n\n    return common(l1, l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(x for x in [p1.id for p1 in l1] + set(x for x in [p2.id for p2 in l2])\n                   for p1, p2 in zip(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if not isinstance(l1, list):\n        return ()\n    if not isinstance(l2, list):\n        return ()\n    if not len(l1):\n        return ()\n    if not len(l2):\n        return ()\n    if not l1.__contains__(l2):\n        return ()\n    if l1.__len__()!= l2.__len__():\n        return ()\n    return ([common(i, j) for i, j in zip(l1, l2)])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        return None\n    if len(l1) == len(l2):\n        return l1\n    else:\n        return common(l1, l2, reverse=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] == l2[j]:\n                continue\n            if l1[i] < l2[j]:\n                continue\n            if l2[i] < l1[i]:\n                continue\n            if l1[i] == l2[j]:\n                continue\n            if l1[i] > l2[j]:\n                continue\n            if l2[i] > l1[i]:\n                continue\n            if l1[i] == l2[j]:\n                continue\n            if l1[i] > l2[j]:\n                continue\n            if l2[i] > l1[i]:\n                continue\n            if l1[i] < l2[j]:\n                continue\n            if l2[i] < l1[i]:\n                continue\n            if l1[i]!= l2[j]:\n                continue\n            if l1[i]!= l1[i]:\n                continue\n            if l1[i]!= l2[j]:\n                continue\n            if l1[i]!= l2[j]:\n                continue\n            if l1[i]!= l2[j]:\n                continue\n            if l1[i]!= l2[j]:\n                continue\n            if l1[i]!= l2[j]:\n                continue\n            if l1[i] == l2[j]:\n                continue\n            if l1[i] == l2[j]:\n                continue\n            if l1[i]!= l2[j]:\n                continue\n            if l1[i]!= l2[j]:\n                continue\n            if l1[i]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(zip(*map(lambda x: (x[1], x[2]), l1, l2))))\n\n    return common(list(zip(*map(lambda x: (x[1], x[2]), l1, l2))), list(zip(*map(lambda x: (x[1], x[2]), l1, l2))))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    s = []\n    for i in xrange(len(l1)):\n        x = l1[i]\n        if i > 0:\n            s.append(x)\n        else:\n            s.append(x)\n    s = sorted(s)\n    return s", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = []\n    for i in range(len(l1)):\n        if l1[i] not in result:\n            result.append(l1[i])\n    return result\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l=[]\n    for i in range(len(l1)):\n        if l2[i]==l1[len(l1)-1]:\n            l.append(i)\n    return sorted(l)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) < 2:\n        return\n    if len(l2) < 2:\n        return\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] == l2[j]:\n                continue\n            if l1[i]!= l2[j]:\n                continue\n            if l1[i]!= None and l2[j]!= None:\n                continue\n            for x in range(j + 1, len(l1)):\n                if l1[i]!= None and l2[j]!= None and l1[i]!= l1:\n                    continue\n                if l1[i]!= None and l2[j]!= None and l1[i]!= l2:\n                    continue\n                if l1[i]!= None and l2[j]!= None and l1[i]!= l2:\n                    continue\n                if l1[i]!= None and l2[j]!= None and l1[i]!= l2:\n                    continue\n                if l1[i]!= None and l2[j]!= None and l1[i]!= l2:\n                    continue\n                if l1[i]!= None and l2[j]!= None and l1[i]!= l2:\n                    continue\n                if l1[i]!= None and l2[j]!= None and l1[i]!= l2:\n                    continue\n                if l1[i]!=", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if i!= j:\n                if i!= len(l1) - 1:\n                    assert i == len(l1) - 1 - j\n                else:\n                    assert i == j + 1 - len(l2)\n                continue\n            if i == j:\n                continue\n            if i < j:\n                if i == len(l1) - 1:\n                    assert i == len(l1) - 1 - j\n                else:\n                    assert i == j + 1 - len(l2)\n                continue\n            elif i > j:\n                if i == len(l1) - 1:\n                    assert i == len(l1) - 1 - j\n                else:\n                    assert i == j + 1 - len(l2)\n                continue\n            else:\n                assert i == j + 1 - len(l2)\n    return l1", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(reversed(iter(lambda x: x and x[0] or list() or []).uniq()))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # First, sort common items.\n    # First, we sort the common items so that the smallest common item\n    # is the last one.\n    common_sort(l1, l2)\n\n    # Next, we sort the common items so that the largest common item\n    # is the first one.\n    common_sort(l2, l1)\n\n    return sorted(common_sort(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i]!= l2[j]:\n                continue\n            if l1[i] == l2[j]:\n                return (i, j)\n    return 0", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    n = len(l1)\n    assert(n in (1, 2, 3, 4, 5, 6, 7, 8))\n    return list(reversed(list(l1)[:n])[::-1]) + list(reversed(list(l2)[:n])[::-1])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return [common(l1, l2)]\n    else:\n        return list(iter(common(l1, l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    s1 = sorted(l1)\n    s2 = sorted(l2)\n    s = len(s1) + len(s2)\n    return s, s - s\n\n    def common_all(l1: list, l2: list):\n        \"\"\"Return sorted common elements for all lists.\n        >>> common_all([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common_all([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        \"\"\"\n        s1 = list(l1)\n        s2 = list(l2)\n        s = len(s1) + len(s2)\n        return s\n\n    def common_unique(l1: list, l2: list):\n        \"\"\"Return sorted unique common elements for two lists.\n        >>> common_unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common_unique([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        \"\"\"\n        s1 = list(l1)\n        s2 = list(l2)\n        s =", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) < len(l2):\n        return [l1, l2]\n    else:\n        return [i for i, j in zip(*sorted(l1), sorted(l2))]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(l1+l2+[None], key=lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    i = 1\n    while len(l1)!= len(l2):\n        l1[i] = l2[i]\n        i2 = i + 1\n        while len(l1) > i2:\n            l1 = l1[:i2]\n            l2 = l2[:i2]\n        i = i + 1\n    return sorted(l1, key=lambda e: e[0], reverse=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Get sorted keys by name\n    keys = list(l1.keys())\n    keys.sort()\n    # Get sorted elements by name\n    elements = list(l2.keys())\n    elements.sort()\n    # Replace each element with the common element\n    for element in elements:\n        try:\n            elements[element] = elements[element] + common(keys, elements)\n        except KeyError:\n            elements[element] = elements[element]\n\n    return sorted(elements, key=lambda e: e[0])\n\n    # This is the reverse of common but doesn't check the length of the array\n    def reverse(l1: list, l2: list):\n        \"\"\"Return a list where each element is the reverse of the element\n        in the first list.\n        \"\"\"\n        return reversed(l1) + reversed(l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if not isinstance(l1, list):\n        l1 = [l1]\n    if not isinstance(l2, list):\n        l2 = [l2]\n    return [element for element in l1[::-1] + l2[::-1] for _, _ in zip(l1, l2)]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [l[:n] for n in range(len(l1))] + [l[1:] for n in range(len(l2))]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # We only take into account unique elements. We can't\n    # make sure to use unique elements since they're sorted\n    # and we can't guarantee the sequence will be unique.\n    # So we just return all unique elements.\n    return [g for g in l if g not in l2]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    s = list(set(l1))\n    s2 = set(l2)\n    return (s1 & s2) - (s1 | s2)\n\n    def _common_element(l1: list, l2: list, s: list):\n        if len(l1) == len(s2) and len(l1) == len(s2):\n            return list(s1 & s2) - list(s1 | s2)\n        else:\n            return list(s1 | s2) - list(s1 & s2)\n\n    return _common_element", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    \"\"\"Return a sorted unique common element of two lists.\n    \"\"\"\n    # Check if the lists are sorted.\n    if l1 is None and l2 is None:\n        return None\n    else:\n        # Sort the lists.\n        sorted_list1 = sorted(l1)\n        sorted_list2 = sorted(l2)\n        # Get the common element for each list.\n        common = []\n        for i, l in enumerate(l1):\n            if l1[i] < l2[i]:\n                continue\n            common.append(l)\n        return common\n\n    # Return the common element of the first list.\n    return sorted_list1[0]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(lambda x: list(common(l1, x), list(l2, x)))\n  def _update(self, item):\n    \"\"\"Add or update an item to the dictionary (if not already present).\n    >>> self._update(5)\n    >>> self._update(2)\n    >>> self._update(8)\n    >>> self._update(23)\n    >>> self._update(5, 653, 123)\n    >>> self._update(3, 2, 8, 234)\n    >>> self._update(5, 653, 123)\n    >>> self._update(7, 1, 5, 9, 123)\n    >>> self._update(5, 7, 1, 5, 9, 234)\n    >>> self._update(5, 653, 123, 234)\n    \"\"\"\n    self._update_item(item)\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(k for k in common(l1, l2) if k not in l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # TODO: make this a list\n    # TODO: move this to subfunction\n    common_degree = [common(l) for l in l1]\n    for i in range(len(l1)):\n        if i!= len(l2) - 1:\n            common_degree[-i] = [common(l) for l in l2]\n        else:\n            common_degree[i] = [l for l in l1]\n    common_degree = [common_degree[i] for i in range(len(l1))]\n    return common_degree", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(l1+l2, key=lambda x: x[len(l1)])[::-1]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) > len(l2):\n        common = []\n        for i in range(len(l1)):\n            common.append(l1[i] + l2[i])\n        return common\n    else:\n        return sorted(l1, key=lambda x: (x[1], x[1]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_list = []\n    for i, j in enumerate(l1):\n        if j not in l2:\n            common_list.append(j)\n    return common_list", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    res = {}\n    for l1, l2 in l1:\n        if l1 == l2: continue\n        if l1!= l2:\n            res[l1] = res[l2] + 1\n    return sorted(res.keys(), reverse=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = []\n    for elem in (l1, l2):\n        if isinstance(elem, list):\n            result.append(common(elem))\n        else:\n            result.append(elem)\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def _unique(l1, l2):\n        if len(l2)!= len(l1):\n            return l1\n        else:\n            return l2[:]\n    def _flip(l1, l2):\n        if len(l2)!= len(l1):\n            return l1[:]\n        else:\n            return l2[1:]\n    def _combine(l1, l2):\n        if len(l2)!= len(l1):\n            return l1[:]\n        else:\n            return [l1, l2, [None, None]]\n    return sorted(_unique(l1, l2), key=lambda x: _flip(x[1], x[2]))\n\n    return common(l1, l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(iter(iter(list(l1)) if l1 else []) for l1 in list(l1), key=lambda x: x), reverse=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = sorted(l1 + l2, key=lambda e: e[1] - e[0])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(l1 for l1 in l1 for l2 in l2 if l1!= l2)\n\n    def find(l: list):\n        \"\"\"Find common elements for two lists.\n        \"\"\"\n        return common(l)\n\n    return find\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise ValueError('Length of lists must be same')\n\n    l1.sort()\n    l2.sort()\n    return [l1[i] for i in xrange(len(l1))]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(uniques(l1), key=lambda x: x[1]) + sorted(uniques(l2), key=lambda x: x[1])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if not isinstance(l1, list):\n        return l1\n    if not isinstance(l2, list):\n        return l2\n\n    if len(l1) == len(l2):\n        return l2\n    else:\n        return l1[:] + [l2][1:]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    i, j = range(len(l1), len(l2))\n    return [i, j] + ((j + 1) * i) if i < j else [i, j] + ((j - 1) * i) if i >= j else [i, j]\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Lists are sorted, so we can use reduce\n    return sorted(list(reversed(reversed(tuple(common(l1, l2))))), key=lambda x: x[0])[:2]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for item in l1:\n        if item not in l2:\n            common.append(item)\n    return sorted(common)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(l.ravel() + [l2].ravel(), key=lambda x: x[0])\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # create a sorted list\n    s = []\n    for i in range(len(l1)):\n        s.append(l1[i])\n    # create a sorted list\n    s = sorted(s, key=lambda x: x[1])\n    return s", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return [common(l1,l2) for l1,l2 in zip(l1,l2)]\n    else:\n        return [common(l1,l2) for l1,l2 in zip(l1,l2,l3) for l3 in zip(l1,l2,l2,l3)]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    keys = sorted(l1)\n    return keys + sorted(l2) if l2 else keys", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        return []\n    else:\n        # Correctly handle empty lists\n        if len(l1) == 0:\n            return l2\n        else:\n            return l1\n    return l2\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = []\n    for i in l1:\n        if i not in result:\n            result.append(i)\n    result.sort()\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(l1/l2+l3 for l1,l2 in zip(l1,l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    result = []\n    for i, l in enumerate(l1):\n        for j, v in enumerate(l2):\n            if v!= l:\n                continue\n            result.append(v)\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([uniq(l[r]) for r in l1, l2])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    assert len(l1) == len(l2), \"list lengths must match\"\n    if not isinstance(l1, list):\n        # just check for the possible lengths of lists\n        for i, x in enumerate(l1):\n            if len(x) == len(l2[i]):\n                return x\n    if not isinstance(l2, list):\n        # just check for the possible lengths of lists\n        for i, x in enumerate(l2):\n            if len(x) == len(l1[i]):\n                return x\n    return []", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise ValueError('Length of lists differ')\n    if len(l1) == len(l2):\n        return tuple(l1)\n    else:\n        return [common(l1) for l1 in range(len(l1), len(l2))]\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = []\n    for i in xrange(len(l1)):\n        if i == 0:\n            continue\n        elif len(l1) > 1:\n            result.append([i, len(l1) - 1])\n        else:\n            result.append(l1[i])\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if not isinstance(l1, list):\n        l1 = [l1]\n    if not isinstance(l2, list):\n        l2 = [l2]\n    l1.sort()\n    l2.sort()\n    return l1[:] + l2[:] + [l2][1:]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if type(l1)!= type(l2):\n        raise TypeError(\"the lists must be lists\")\n\n    return sorted(l1) + sorted(l2, reverse=False)[:]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise ValueError(\"Expected list lengths to be equal.\")\n\n    # Test for equality of lists\n    if not isinstance(l1, list):\n        return [e1 for e1, e2 in zip(l1, l2)]\n    elif not isinstance(l2, list):\n        return [e1 for e1, e2 in zip(l2, l1)]\n    else:\n        return list(zip(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # canonicalize lists\n    if len(l1) == 1:\n        l1 = [l1]\n    if len(l2) == 1:\n        l2 = [l2]\n    # sort by numbers\n    lsort(l1)\n    lsort(l2)\n    # return unique elements\n    return [l1[n] for n in xrange(len(l1))]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if isinstance(l1, list):\n        return tuple(common(list(l1), list(l2)))\n    else:\n        return tuple(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def rec(d):\n        if not d:\n            return\n        while d not in l1:\n            del d1\n        while d not in l2:\n            del d2\n        return d1 + d2\n\n    return sorted(rec(list(l1)), reverse=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return map(lambda x: x.__len__() > 0, sorted(list(map(lambda x: x.__iter__()[0].__iter__(), l1))))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([str(l) for l in l1 if l not in l2 and len(l) in (2, 3)])\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    s = []\n    for _ in range(len(l1) + len(l2)):\n        if l1[0] == l2:\n            continue\n        s.append(l1[r] + l2[r])\n    return s\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(iter(common(l1,l2))))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def _sort_uniq(l1: list, l2: list):\n        if len(l1) < len(l2):\n            return list(map(_sort_uniq, l1))\n        else:\n            return map(_sort_uniq, l2)\n\n    common = lambda l1: [l for i, l in enumerate(l1) if l not in l1 and l not in l2 and i > 0]\n    return sorted([sort(x) for x in common(l1, l2)], key=_sort_uniq, reverse=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2), key=lambda x: x[1], reverse=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(set(common(l1, l2)) - set(l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for elem in l1:\n        common.append(elem)\n    return sorted(common)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # We know that the list of common elements is unique.\n    common = {}\n    for el in l1:\n        if el in common:\n            common[el].append(el)\n        else:\n            common[el] = [el]\n    return common\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    s = [i] * len(l1)\n    for i1 in xrange(len(l1)):\n        if s1[i1] < s[i1]:\n            s.append(s1[i1])\n            s1.remove(i1)\n    s.sort()\n\n    return s", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_iter = set(l1).union(l2)\n    return tuple(common_iter).sort()", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    c1 = sorted(common(l1, l2), key=lambda x: len(x), reverse=True)\n    c2 = sorted(common(l1, l2), key=lambda x: len(x), reverse=False)\n    if len(c1) == len(c2):\n        return c1\n    else:\n        return c2", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return _common(l1, l2, check_boundaries=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # take first element\n    # should be unique\n    if len(l1)!= len(l2):\n        raise ValueError('lists not equal lengths')\n    result = []\n    while len(l1):\n        if l1[-1]!= l2[-1] and l1[-1] not in result:\n            result.append(l1[-1])\n        l1 = l1[:-1]\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if isinstance(l1, list) and isinstance(l2, list):\n        l1 = [l1] + [l2]\n    if isinstance(l1, list):\n        l1 = l1.sort()\n    if isinstance(l2, list):\n        l2 = l2.sort()\n    return tuple(l1) + tuple(l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return [l1, l2]\n    else:\n        return sorted(l1, key=lambda x: common(l1, x))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    keys = set(l1)\n    keys.difference_update(set(l2))\n    return sorted(keys, reverse=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = []\n    for item in l1:\n        if item not in l2:\n            result.append(item)\n    return tuple(result)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([element for element in l1 for element not in l2 if element not in l1])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return l1[:] + l2\n    else:\n        return _common_sort(l1, l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if not isinstance(l1, list):\n        l1 = [l1]\n    if not isinstance(l2, list):\n        l2 = [l2, l1, l1]\n    if len(l1)!= len(l2):\n        return []\n    return [common(l1, l2) for l1, l2 in zip(l1, l2)]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(set(l1) & set(l2)), reverse=True) + [list(set(l1) & set(l2))[0] for l1, l2 in zip(l1, l2)]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = sorted(common, key=lambda x: x[1])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # If no element is unique, it means no common element exists.\n    if len(l1) == 0:\n        return\n    if len(l2) == 0:\n        return\n    for i in range(len(l1)):\n        if l1[i]!= l2[i]:\n            return\n    for i in range(len(l2)):\n        if l1[i]!= l2[i]:\n            return\n    return [l1[i] for i in range(len(l1)) if l1[i]!= l2[i]]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    sorted_lists = sorted(l1, key=lambda x: len(x))\n    if sorted_lists!= sorted_lists:\n        print 'There are %d unique common elements in' % len(sorted_lists)\n        print'   %s' % str(sorted_lists)\n        return\n    return sorted_lists", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_list = {}\n    for k, v in zip(l1, l2):\n        if k not in common_list:\n            common_list[k] = set()\n            common_list[k][k] = v\n\n    return common_list\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return list(l1)[:] + list(l2)[:]\n    else:\n        return list(l1)[:] + list(l2)[::-1]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    lct = [l1 for l1, l2 in zip(l1, l2)]\n    return sorted(lct, key=lambda x: cmp(x, lct[-1]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def _common(s1: str, s2: str) -> str:\n        return _common(s1, s2.split(\",\"))[0]\n\n    return _common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise TypeError(\"list lengths must be equal\")\n    if len(l1)!= len(l2):\n        raise AssertionError(\"list lengths must be equal\")\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i]!= l2[j] or l1[i]!= l2[j]:\n                raise AssertionError(\"list lengths must be equal\")\n    return list(l1[:] + [l2[:]] + [l1[1:]] + [l2[1:]] + [l1[:]] + [l2[:]])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set([x.strip() for x in l1]) + set([x.strip() for x in l2]))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(l1+l2) for l1, l2 in zip(l1,l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Create a list of indices\n    # (This will be used for sorting later).\n    unique = set([])\n\n    # Set the value on all elements to the unique value.\n    for i in range(len(l1)):\n        unique.add(l1[i])\n\n    # Sort the lists according to the unique value.\n    result = sorted(unique, key=lambda x: x)\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return [l1, l2]\n    else:\n        return [l1, list(range(len(l2)) - len(l1))]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(range(len(l1) + len(l2)), key=lambda e: e[0], reverse=True)\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    s1 = list(s1.keys())\n    s2 = list(s2.keys())\n    for item in s1:\n        if item not in s2:\n            continue\n        if len(item) > len(s2[item]):\n            s2[item].append(item)\n        else:\n            s2[item] = [item]\n    return s2", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([e for e in l1 if e in l2 if e not in [l1, l2]], key=lambda e: e[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(l1 + l2, key=lambda e: e.ljust(2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(map(lambda x: x[l2], l1))).union(set(map(lambda x: x[l2], l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    s = sorted(l1, key=lambda e: e[1])\n    s = sorted(l2, key=lambda e: e[1])\n    return s", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return itertools.chain.from_iterable(common(list(l1), list(l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(common(l1, l2)))\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        return []\n    else:\n        return (len(l1) - len(l2)) / 2\n\n    return ([sum(l1) + sum(l2) for l1, l2 in zip(l1, l2)])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return l1\n    return sorted([common(i, j) for i, j in zip(l1, l2) if i!= j])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(l1) + sorted(l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Assert that we have at least one element\n    if len(l1)!= len(l2):\n        raise ValueError('list lengths must be the same')\n\n    # Get all common elements from each list\n    common = []\n    for i in range(len(l1)):\n        common.append(common[i - 1])\n\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return common(l1, l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([x for x in [l1, l2] if x in l2])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for i, l1 in enumerate(l1):\n        for j, l2 in enumerate(l2):\n            if j in common:\n                continue\n            common[j.name] = i\n            if j not in l1:\n                common[j.name].append(i)\n\n    return sorted(common.items())", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Iterate over the lists.\n    for i in xrange(len(l1)):\n        if l1[i]!= l2:\n            return [i,]\n        # Copy list if necessary.\n        if l1[i] == l2:\n            l1[i] = copy.copy(l2)\n        # Return.\n        return [l1[i],]\n\n    # Sort lists.\n    sorted_list = sorted(l1, key=lambda x: x[1])\n    return sorted_list[:, :]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([common(c[0], c[1]) for c in zip(l1, l2)])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [i for i in list(l1) if i not in list(l2)]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(l1) + sorted(l2)\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    new_list = []\n    for i in range(len(l1)):\n        if not all([i in l1 for i in range(i + 1, len(l1))]):\n            new_list.append(l1[i])\n    for i in range(len(l2)):\n        if not all([i in l2 for i in range(i + 1, len(l2))]):\n            new_list.append(l2[i])\n    return sorted(new_list)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    s1 = list(l1)\n    s2 = list(l2)\n    s1.sort()\n    s2.sort()\n    if len(s1) == len(s2):\n        return s1[:] + s2[::-1][::-1:]\n    else:\n        return s1[:] + s2[1:]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = [np.random.randint(1, len(l1), count=1) for _ in range(len(l1))]\n    result.sort()\n    result = [result[s:j] for s in range(len(l1))]\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) > len(l2):\n        return sorted([c1 for c1, c2 in zip(l1, l2) if c1!= c2])\n    else:\n        return [l1[0]]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = sorted(l1, key=lambda x: x[len(x)-2])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(l1).difference(list(l2).difference(l1)), key=lambda x: x[0])\n\n    @staticmethod\n    def common(l1: list, l2: list):\n        \"\"\"Return sorted unique common elements for two lists.\n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n        \"\"\"\n        return sorted(list(l1).difference(list(l2).difference(l1)), key=lambda x: x[0])\n\n    @staticmethod\n    def is_unique(l1: list, l2: list):\n        \"\"\"Return True if l1 and l2 are unique, False otherwise.\n        >>> is_unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        True\n        >>> is_unique([5, 3, 2, 8], [3, 2])\n        True\n        \"\"\"\n        return (list(l1).isdisjoint(list(l2).difference(l1)).", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(iter(common(l1, l2)))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([l[:1] for l in l])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_list = [len(l) for l in l1]\n    common_list.sort()\n    common_list.extend([2, 3, 5, 6])\n    return common_list", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    common.extend(l1)\n    common.extend(l2)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [(list(s) for s in common(l1, l2))]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = {}\n    for idx, elem in enumerate(l1):\n        if idx!= idx + len(l2):\n            if idx == 0 and len(l1) == len(l2):\n                common[elem] = 1\n            elif idx == len(l1) - 1 and len(l2) == 0:\n                common[elem] = 0\n            elif idx == 0:\n                common[elem] = 1\n            else:\n                common[elem] = common[elem] + 1\n        else:\n            common[elem] = 1\n    return common.values()", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(l1 + l2, key=lambda x: len(x) > 0 and x[0] or x[1], reverse=True)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) < len(l2):\n        return [l1, l2]\n    if (l1[0]!= l2[0]):\n        return [l1, l2]\n    if (l1[1]!= l2[1]):\n        return [l1, l2]\n    if (l1[2]!= l2[2]):\n        return [l1, l2]\n    if (l1[3]!= l2[3]):\n        return [l1, l2]\n    if (l1[4]!= l2[4]):\n        return [l1, l2]\n    if (l1[5]!= l2[5]):\n        return [l1, l2]\n    if (l1[6]!= l2[6]):\n        return [l1, l2]\n    return [l1, l2]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        return [l1, l2]\n    else:\n        return sorted(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    def sort(l1: list, l2: list) -> int:\n        \"\"\"Sort common elements by size.\n        >>> sort([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        5\n        >>> sort([5, 3, 2, 8], [3, 2])\n        2\n\n        >>> sort([1, 4, 3, 34, 653, 2, 5, 653, 9, 3, 2, 4], [5, 7, 1, 5, 9, 653, 121])\n        5\n        >>> sort([5, 3, 2, 8], [3, 2])\n        2\n\n        >>> sort([1, 4, 3, 34, 653, 2, 5, 653, 9, 3, 2, 8], [5, 7, 1, 5, 9, 653, 121])\n        5\n        >>> sort([5, 3, 2, 8], [3, 2])\n        2\n        \"\"\"\n        return sum([len(l1) + len(l2) for l1, l2 in zip(l1, l2)])\n\n    return sort(common(l1, l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(zip(*list(map(lambda x: common(l1, x2)), list(list(l1)))))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_dupes = set(l1)\n    common_unique = set(l2)\n    for i in range(len(l1)):\n        if l1[i] not in common_unique:\n            common_dupes.add(l1[i])\n    common_unique.difference_update(common_dupes)\n    return [l1, l2 for l1, l2 in zip(l1, l2)]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    result = []\n    i = 1\n    while i < len(l1):\n        if len(l1[i])!= len(l2[i]):\n            continue\n        if i == len(l1):\n            result.append(l2[i])\n        else:\n            result.append(l1[i][i])\n    return result", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set(common[:]).union(set(list(range(len(l1))))))\n    return list(map(lambda x: common.remove(x), common))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    s = 0\n    m = len(l1)\n    while s:\n        if not m: break\n        s += 1\n        m = len(l2)\n    return [l1[s : s + 1], l2[m : m + 1]]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if not isinstance(l1, list):\n        return\n    if not isinstance(l2, list):\n        return\n    # Check first if l1 is a list and l2 is a list\n    if not len(l1):\n        return\n    if len(l2) == 0:\n        return\n    if not isinstance(l2, list):\n        l2 = [l2.__getitem__() for i in range(len(l2))]\n    if len(l1) == len(l2):\n        return\n    # Check if l1 is a list and l2 is a list of lists\n    if not isinstance(l1, list):\n        l1 = [l1.__getitem__() for i in range(len(l1))]\n    # Check if l1 is a list and l2 is a list of lists of lists\n    if not isinstance(l1, list):\n        l1 = [l1.__getitem__() for i in range(len(l1))]\n    # Check if l1 is a list and l2 is a list of lists of lists of lists\n    if not isinstance(l1, list):\n        l1 = [l1.__getitem__() for i in range(len(l", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return list(map(lambda x: list(set(x) - set(l1))), sorted(map(lambda x: x, l1), l2))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    ordered = sorted(l1, key=lambda x: len(x))\n    unique = sorted(l2, key=lambda x: len(x) or len(l1) or len(l2))\n    return sorted(uniq, key=lambda x: x[1])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for l1, l2 in zip(l1, l2):\n        if l1 is not None:\n            if l2 is not None:\n                if l1 == l2:\n                    common.append(l2)\n                elif l2!= l1:\n                    common.append(l1)\n            else:\n                common.append(l1)\n    return common\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        raise ValueError(\"len(l1)!= len(l2)\")\n    else:\n        return [i for i in zip(l1, l2) if i]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    s = 0\n    for i in range(len(l1)):\n        if l1[i] == l2:\n            s += 1\n    return s\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if l1 is not l2:\n        return []\n    return [common(l1+l2, l1) for l1 in l1]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == 1:\n        return [l1]\n    if len(l2) == 1:\n        return [l2]\n    if len(l1) > len(l2):\n        return [common(l1), common(l2)]\n    if len(l1) < len(l2):\n        return [common(l1)] + common(l2) + [common(l1), common(l2)]\n\n    return [l1, l2]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    order = [2, 3, 653, 121]\n    common = []\n    for i in range(len(l1)):\n        if not order[i]:\n            common.append(l1[i])\n        else:\n            common.append(order[i])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    i = len(l1) - 1\n    if i == 0:\n        return [l1[i]]\n    elif i < i + 1:\n        return [l1[i + 1]]\n    else:\n        return [l1[i + 1]] + [l1[i]]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([common(u) for u in l1 for u in l2 if not u], key=lambda u: u[1])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list(set([len(x) for x in [l1, l2] if len(set(x)) & set(l1) & set(l2))]))\n    for x in common:\n        common.remove(x)\n    return common\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    for x in l1:\n        for y in l2:\n            if x == y: continue\n            else: break\n        else: return [x, y]\n    return [x for x, y in common(l1, l2)]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for x in l1:\n        common.append(x)\n    return sorted(list(common), key=lambda x: x[1])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1)!= len(l2):\n        return []\n    x = list(l1)\n    y = list(l2)\n    for i, j in enumerate(x):\n        if i == j:\n            continue\n        if i!= j:\n            if i!= i:\n                return [x[i], y[i]]\n            else:\n                return [x[i], y[i]]\n        else:\n            if j!= j:\n                return [x[i], y[i]]\n            else:\n                return [x[i], y[i]]\n    return [x for x, y in common(x, y) if x!= y]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l = [l for i, l in enumerate(l1) if l not in l2]\n    return sorted(l, key=lambda x: x[0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) < 2:\n        return []\n    elif len(l2) < 2:\n        return []\n    if len(l1) == len(l2):\n        return l1 + l2\n    return common(l1, l2 + (l1 or []))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Count common elements\n    c = 0\n    for x in l1:\n        for y in l2:\n            if x in y:\n                c += 1\n        if c == 2:\n            continue\n        x = x.split(',')[1]\n        y = y.split(',')[1]\n        if x in y:\n            continue\n        if y in y:\n            continue\n        yield x, y\n\n    # Count common elements\n    c = 0\n    for x in l1:\n        for y in l2:\n            if x in y:\n                c += 1\n        if c == 2:\n            continue\n        x = x.split(',')[1]\n        y = y.split(',')[1]\n        if x in y:\n            continue\n        if y in y:\n            continue\n        yield x, y\n\n    # Count common elements\n    c = 0\n    for x in l1:\n        for y in l2:\n            if x in y:\n                c += 1\n        if c == 2:\n            continue\n        x = x.split(',')[1]\n        y = y.split(',')[1]\n        if x in y:\n            continue\n        if y in y:\n            continue\n        yield x, y\n\n    # Count common elements\n    c = 0\n    for x in l1:", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) < 2:\n        raise IndexError(\"'%s' is not a list.\" % l1)\n    if len(l2) < 2:\n        raise IndexError(\"'%s' is not a list.\" % l2)\n\n    return common(l1, l2)", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted([len(i) for i in common(l1[-len(x) for x in l2]) if len(i) > 0])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == 0 and len(l2) == 0:\n        return []\n\n    l1 = l1[:]\n    l2 = l2[:]\n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    return l1 + l2", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for e1 in l1:\n        for e2 in l2:\n            if e1 is e2 or e1 not in e2:\n                common.append(e1)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # sort common elements\n    common = list()\n    for i in range(len(l1)):\n        if i not in common:\n            common.append(l1[i])\n            # must be sorted as i will be inserted last in the list\n            common.sort()\n\n    # reverse the list\n    l0 = list(common[1:])\n    l1 = list(common[:-1])\n    # move right to remove i from left\n    for i in reversed(l0):\n        common.remove(l1[i])\n\n    # return common\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    c1 = []\n    c2 = []\n    for i in range(len(l1)):\n        if i == len(l1) - 1:\n            c1.append(l1[i])\n            continue\n        if i == 0:\n            c2.append(l1[i])\n            continue\n        c1.append(l1[i])\n        c2.append(l2[i])\n    return sorted(c1 + c2), sort_keys = lambda a: a[0]", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    s = {}\n    for i, a in enumerate(l1):\n        for j, b in enumerate(l2):\n            if i == j:\n                continue\n            if a in s:\n                continue\n            s[a.lower()] = b.lower()\n    return s", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    for i1, i2 in zip(l1, l2):\n        yield i1, i2\n    if len(l2) > 1:\n        for i1, i2 in zip(l1, l2):\n            yield i1, i2", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # pass from one list to another if necessary\n    if len(l1)!= len(l2):\n        return []\n    # set up a list to hold common elements\n    common = []\n    for i in range(len(l1)):\n        if len(l2) > i:\n            common.append(l2[i])\n        else:\n            common.append(l1[i])\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i, j in enumerate(l1):\n        if j not in l2:\n            common.append(i)\n        else:\n            common.append(j)\n    return common", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set([set(x) for x in l1) & set(x) for x in l2 if x not in l1 or x not in l2])", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = list()\n    for l1, l2 in zip(l1, l2):\n        if (isinstance(l1, list) and isinstance(l2, list)):\n            common.append(l1+l2)\n        elif isinstance(l1, tuple) and isinstance(l2, tuple):\n            common.append(tuple(l1+l2)[0])\n        else:\n            common.append(l1+l2)\n    return common\n</s>", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) == len(l2):\n        return [l1, l2, l2, l2, l2, l2, l2, l2]\n    else:\n        return sorted(list(range(len(l1), len(l2))))", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Create a list of unique common elements by sorting in descending order\n    def sort(l1: list, l2: list):\n        return sorted(map(lambda x: (l1[x] > l2[x]), l1), key=lambda x: -x, reverse=True)\n\n    if len(l1) == len(l2):\n        return common(l1, l2)\n    else:\n        l = []\n        for item in l1:\n            l.append(sort(item, l2))\n        return l", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Transpose input lists to convert to sort order.\n    if isinstance(l1, list):\n        l1 = [l1, l1]\n    if isinstance(l2, list):\n        l2 = [l2, l2]\n    l1 = sorted(l1, key=lambda x: x[0], reverse=True)\n    l2 = sorted(l2, key=lambda x: x[0], reverse=True)\n\n    # Loop over the two lists and return the common elements.\n    for i in range(len(l1)):\n        if l2[i] in l1 and l1[i] not in l2:\n            return l1[i], l2[i]\n\n    return None, None", "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(set(c) for c in common(l1, l2)), key=lambda x: x.index(x[0]))\n</s>"]]