[["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n // p\n    else:\n        return modp(n // p, p - 1) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return mod(n, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return mod(n, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modp(n, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if p == 1:\n        return 2\n    if p == 2:\n        return 4\n    if p == 3:\n        return 8\n    if p == 4:\n        return 16\n    if p == 5:\n        return 32\n    if p == 6:\n        return 64\n    if p == 7:\n        return 128\n    if p == 8:\n        return 256\n    return 0", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n % p == 0:\n        return n // p\n    return modp(n // p, p) + modp(n % p, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return n\n    if n % p == 0:\n        return n // p\n    return n // p + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if p == 1:\n        return 2\n    if p == 2:\n        return 3\n    if p == 3:\n        return 4\n    if p == 4:\n        return 5\n    if p == 5:\n        return 6\n    if p == 6:\n        return 7\n    if p == 7:\n        return 8\n    if p == 8:\n        return 9\n    if p == 9:\n        return 10\n    if p == 10:\n        return 11\n    if p == 11:\n        return 12\n    if p == 12:\n        return 13\n    if p == 13:\n        return 14\n    if p == 14:\n        return 15\n    if p == 15:\n        return 16\n    if p == 16:\n        return 17\n    if p == 17:\n        return 18\n    if p == 18:\n        return 19\n    if p == 19:\n        return 20\n    if p == 20:\n        return 21\n    if p == 21:\n        return 22\n    if p == 22:\n        return 23\n    if p == 23:\n        return 24\n    if p == 24:\n        return 25\n    if p == 25:\n        return 26\n    if p == 26:\n        return 27\n    if p == 27:\n        return 28\n    if p == 28:\n        return 29\n    if p == 29:\n        return 30\n    if", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return n\n    if p == 1:\n        return n % p\n    if p == 2:\n        return n % p\n    if p == 3:\n        return n % p\n    if p == 4:\n        return n % p\n    if p == 5:\n        return n % p\n    if p == 6:\n        return n % p\n    if p == 7:\n        return n % p\n    if p == 8:\n        return n % p\n    if p == 9:\n        return n % p\n    if p == 10:\n        return n % p\n    if p == 11:\n        return n % p\n    if p == 12:\n        return n % p\n    if p == 13:\n        return n % p\n    if p == 14:\n        return n % p\n    if p == 15:\n        return n % p\n    if p == 16:\n        return n % p\n    if p == 17:\n        return n % p\n    if p == 18:\n        return n % p\n    if p == 19:\n        return n % p\n    if p == 20:\n        return n % p\n    if p == 21:\n        return n % p\n    if p == 22:\n        return n % p\n    if p == 23:\n        return n % p\n    if p == 24:\n        return n % p\n    if p == 25:", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return n\n    if n % p == 0:\n        return n // p\n    return n // p + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return int(n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n // p\n    else:\n        return n // p + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return mod(n, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return mod(n, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return n\n    if n % p == 0:\n        return n // p\n    return n // p + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        return -n\n    if p < 0:\n        return -n * p\n    if n % p == 0:\n        return n / p\n    return n % p * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return int(n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return n\n    if p == 1:\n        return n % p\n    if p == 2:\n        return n % p\n    if p == 3:\n        return n % p\n    if p == 4:\n        return n % p\n    if p == 5:\n        return n % p\n    if p == 6:\n        return n % p\n    if p == 7:\n        return n % p\n    if p == 8:\n        return n % p\n    if p == 9:\n        return n % p\n    if p == 10:\n        return n % p\n    if p == 11:\n        return n % p\n    if p == 12:\n        return n % p\n    if p == 13:\n        return n % p\n    if p == 14:\n        return n % p\n    if p == 15:\n        return n % p\n    if p == 16:\n        return n % p\n    if p == 17:\n        return n % p\n    if p == 18:\n        return n % p\n    if p == 19:\n        return n % p\n    if p == 20:\n        return n % p\n    if p == 21:\n        return n % p\n    if p == 22:\n        return n % p\n    if p == 23:\n        return n % p\n    if p == 24:\n        return n % p\n    if p == 25:", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n // p\n    else:\n        return modp(n // p, p) + modp(n % p, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return n\n    if p == 1:\n        return n % p\n    if p == 2:\n        return n % p\n    if p == 3:\n        return n % p\n    if p == 4:\n        return n % p\n    if p == 5:\n        return n % p\n    if p == 6:\n        return n % p\n    if p == 7:\n        return n % p\n    if p == 8:\n        return n % p\n    if p == 9:\n        return n % p\n    if p == 10:\n        return n % p\n    if p == 11:\n        return n % p\n    if p == 12:\n        return n % p\n    if p == 13:\n        return n % p\n    if p == 14:\n        return n % p\n    if p == 15:\n        return n % p\n    if p == 16:\n        return n % p\n    if p == 17:\n        return n % p\n    if p == 18:\n        return n % p\n    if p == 19:\n        return n % p\n    if p == 20:\n        return n % p\n    if p == 21:\n        return n % p\n    if p == 22:\n        return n % p\n    if p == 23:\n        return n % p\n    if p == 24:\n        return n % p\n    if p == 25:", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return int(n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n // p\n    else:\n        return modp(n // p, p - 1) + modp(n % p, p - 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n / p\n    else:\n        return modp(n, p - 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return mod(n, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n % p == 0:\n        return n / p\n    return modp(n % p, p - 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return n\n    if p == 1:\n        return 2**n\n    if p == 2:\n        return 2**(n - 1)\n    if p == 3:\n        return 2**(n - 2)\n    if p == 4:\n        return 2**(n - 3)\n    if p == 5:\n        return 2**(n - 4)\n    if p == 6:\n        return 2**(n - 5)\n    if p == 7:\n        return 2**(n - 6)\n    if p == 8:\n        return 2**(n - 7)\n    if p == 9:\n        return 2**(n - 8)\n    if p == 10:\n        return 2**(n - 9)\n    if p == 11:\n        return 2**(n - 10)\n    if p == 12:\n        return 2**(n - 11)\n    if p == 13:\n        return 2**(n - 12)\n    if p == 14:\n        return 2**(n - 13)\n    if p == 15:\n        return 2**(n - 14)\n    if p == 16:\n        return 2**(n - 15)\n    if p == 17:\n        return 2**(n - 16)\n    if p == 18:\n        return 2**(n - 17)\n    if p == 19:\n        return 2**(n - 18)\n    if p ==", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n // p\n    else:\n        return n // p + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modp(n, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if p == 1:\n        return 2\n    if p == 2:\n        return 3\n    if p == 3:\n        return 4\n    if p == 4:\n        return 5\n    if p == 5:\n        return 6\n    if p == 6:\n        return 7\n    if p == 7:\n        return 8\n    if p == 8:\n        return 9\n    if p == 9:\n        return 10\n    if p == 10:\n        return 11\n    if p == 11:\n        return 12\n    if p == 12:\n        return 13\n    if p == 13:\n        return 14\n    if p == 14:\n        return 15\n    if p == 15:\n        return 16\n    if p == 16:\n        return 17\n    if p == 17:\n        return 18\n    if p == 18:\n        return 19\n    if p == 19:\n        return 20\n    if p == 20:\n        return 21\n    if p == 21:\n        return 22\n    if p == 22:\n        return 23\n    if p == 23:\n        return 24\n    if p == 24:\n        return 25\n    if p == 25:\n        return 26\n    if p == 26:\n        return 27\n    if p == 27:\n        return 28\n    if p == 28:\n        return 29\n    if p == 29:\n        return 30\n    if", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return int(n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return n\n    if p == 1:\n        return n % p\n    if p == 2:\n        return n % p * p\n    if p == 3:\n        return n % p * p * p\n    if p == 4:\n        return n % p * p * p * p\n    if p == 5:\n        return n % p * p * p * p * p\n    if p == 6:\n        return n % p * p * p * p * p * p\n    if p == 7:\n        return n % p * p * p * p * p * p * p\n    if p == 8:\n        return n % p * p * p * p * p * p * p * p\n    if p == 9:\n        return n % p * p * p * p * p * p * p * p * p\n    if p == 10:\n        return n % p * p * p * p * p * p * p * p * p * p\n    if p == 11:\n        return n % p * p * p * p * p * p * p * p * p * p\n    if p == 12:\n        return n % p * p * p * p * p * p * p * p * p * p * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n // p\n    else:\n        return n // p + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 0:\n        return 0\n    if p == 1:\n        return n\n    if p == 2:\n        return n // p\n    if p == 3:\n        return n % p\n    if p == 4:\n        return n // p // 2\n    if p == 5:\n        return n % p // 2 // 2\n    if p == 6:\n        return n // p // 2 // 2 // 2\n    if p == 7:\n        return n // p // 2 // 2 // 2 // 2 // 2\n    if p == 8:\n        return n // p // 2 // 2 // 2 // 2 // 2 // 2\n    if p == 9:\n        return n // p // 2 // 2 // 2 // 2 // 2 // 2 // 2\n    if p == 10:\n        return n // p // 2 // 2 // 2 // 2 // 2 // 2 // 2 // 2\n    if p == 11:\n        return n // p // 2 // 2 // 2 // 2 // 2 // 2 // 2 // 2 // 2\n    if p == 12:\n        return n // p // 2 // 2 // 2 // 2 // 2 // 2 // 2 // 2 // 2\n    if p == 13:\n        return n // p // 2 // 2 // 2 // 2 // 2 // 2", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n % p == 0:\n        return n // p\n    return modp(n, p - 1) + modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) *", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if p == 1:\n        return 2\n    if p == 2:\n        return 3\n    if p == 3:\n        return 4\n    if p == 4:\n        return 5\n    if p == 5:\n        return 6\n    if p == 6:\n        return 7\n    if p == 7:\n        return 8\n    if p == 8:\n        return 9\n    if p == 9:\n        return 10\n    if p == 10:\n        return 11\n    if p == 11:\n        return 12\n    if p == 12:\n        return 13\n    if p == 13:\n        return 14\n    if p == 14:\n        return 15\n    if p == 15:\n        return 16\n    if p == 16:\n        return 17\n    if p == 17:\n        return 18\n    if p == 18:\n        return 19\n    if p == 19:\n        return 20\n    if p == 20:\n        return 21\n    if p == 21:\n        return 22\n    if p == 22:\n        return 23\n    if p == 23:\n        return 24\n    if p == 24:\n        return 25\n    if p == 25:\n        return 26\n    if p == 26:\n        return 27\n    if p == 27:\n        return 28\n    if p == 28:\n        return 29\n    if p == 29:\n        return 30\n    if", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n % p == 0:\n        return n / p\n    return modp(n % p, p - 1) * modp(n / p, p - 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n // p\n    return modp(n // p, p - 1) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return mod(n, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n // p\n    else:\n        return modp(n // p, p - 1) + modp(n % p, p - 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n // p\n    return modp(n, p - 1) + modp(n - 1, p - 1) * modp(n - 1, p - 1) + modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**(n % p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n % p == 0:\n        return n / p\n    return modp(n - p, p - 1) + modp(n - p, p)\n    #return modp(n - p, p - 1) + modp(n - p, p - 1) * modp(n - p, p - 1) * modp(n - p, p - 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n % p == 0:\n        return n / p\n    return modp(n, p - 1) + modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n % p == 0:\n        return n // p\n    return modp(n, p - 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modp(n, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n % p == 0:\n        return n // p\n    return modp(n % p, p - 1) + modp(n / p, p - 1) * modp(n / p, p - 1) * modp(n, p - 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if p == 1:\n        return 2\n    if p == 2:\n        return 3\n    if p == 3:\n        return 4\n    if p == 4:\n        return 5\n    if p == 5:\n        return 6\n    if p == 6:\n        return 7\n    if p == 7:\n        return 8\n    if p == 8:\n        return 9\n    if p == 9:\n        return 10\n    if p == 10:\n        return 11\n    if p == 11:\n        return 12\n    if p == 12:\n        return 13\n    if p == 13:\n        return 14\n    if p == 14:\n        return 15\n    if p == 15:\n        return 16\n    if p == 16:\n        return 17\n    if p == 17:\n        return 18\n    if p == 18:\n        return 19\n    if p == 19:\n        return 20\n    if p == 20:\n        return 21\n    if p == 21:\n        return 22\n    if p == 22:\n        return 23\n    if p == 23:\n        return 24\n    if p == 24:\n        return 25\n    if p == 25:\n        return 26\n    if p == 26:\n        return 27\n    if p == 27:\n        return 28\n    if p == 28:\n        return 29\n    if p == 29:\n        return 30\n    if", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return mod(n, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n % p == 0:\n        return n / p\n    return modp(n, p - 1) + modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) *", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modp(n, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n // p\n    else:\n        return n // p + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n % p == 0:\n        return n // p\n    return modp(n // p, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    return 0", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2 * n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return int(n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**(n % p) - 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return n\n    if p == 1:\n        return n % p\n    if p == 2:\n        return n % p * p\n    if p == 3:\n        return n % p * p * p\n    if p == 4:\n        return n % p * p * p * p\n    if p == 5:\n        return n % p * p * p * p * p\n    if p == 6:\n        return n % p * p * p * p * p * p\n    if p == 7:\n        return n % p * p * p * p * p * p * p\n    if p == 8:\n        return n % p * p * p * p * p * p * p * p\n    if p == 9:\n        return n % p * p * p * p * p * p * p * p * p\n    if p == 10:\n        return n % p * p * p * p * p * p * p * p * p * p\n    if p == 11:\n        return n % p * p * p * p * p * p * p * p * p * p * p\n    if p == 12:\n        return n % p * p * p * p * p * p * p * p * p * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**(n % p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n // p\n    else:\n        return n // p + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n // p\n    else:\n        return modp(n // p, p - 1) + modp(n // p - 1, p) * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2 * n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    return 0", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if p == 1:\n        return 2\n    if p == 2:\n        return 4\n    if p == 3:\n        return 8\n    if p == 4:\n        return 16\n    if p == 5:\n        return 32\n    if p == 6:\n        return 64\n    if p == 7:\n        return 128\n    if p == 8:\n        return 256\n    if p == 9:\n        return 512\n    if p == 10:\n        return 1024\n    if p == 11:\n        return 2048\n    if p == 12:\n        return 4096\n    if p == 13:\n        return 8192\n    if p == 14:\n        return 16384\n    if p == 15:\n        return 32768\n    if p == 16:\n        return 65536\n    if p == 17:\n        return 131072\n    if p == 18:\n        return 2097152\n    if p == 19:\n        return 33554432\n    if p == 20:\n        return 5242880\n    if p == 21:\n        return 1073741824\n    if p == 22:\n        return 16777216\n    if p == 23:\n        return 3355443648\n    if p == 24:\n        return 52428800\n    if p == 25:\n        return 1073741824\n    if p == 26:\n        return 16777216", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n // p\n    else:\n        return modp(n // p, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return mod(n, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n // p\n    else:\n        return modp(n - 1, p - 1) + modp(n - 1, p) * modp(n - 1, p - 1) + modp(n - 1, p) * modp(n - 1, p - 1) * modp(n - 1, p) * modp(n - 1, p - 1) * modp(n - 1, p) * modp(n - 1, p - 1) * modp(n - 1, p) * modp(n - 1, p - 1) * modp(n - 1, p) * modp(n - 1, p - 1) * modp(n - 1, p) * modp(n - 1, p - 1) * modp(n - 1, p) * modp(n - 1, p - 1) * modp(n - 1, p) * modp(n - 1, p - 1) * modp(n - 1, p) * modp(n - 1, p - 1) * modp(n - 1, p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return n % p\n    if n % p == 0:\n        return n // p\n    return modp(n % p, p - 1) + modp(n // p, p - 1) * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if p == 1:\n        return 2\n    if p == 2:\n        return 3\n    if p == 3:\n        return 4\n    if p == 4:\n        return 5\n    if p == 5:\n        return 6\n    if p == 6:\n        return 7\n    if p == 7:\n        return 8\n    if p == 8:\n        return 9\n    if p == 9:\n        return 10\n    if p == 10:\n        return 11\n    if p == 11:\n        return 12\n    if p == 12:\n        return 13\n    if p == 13:\n        return 14\n    if p == 14:\n        return 15\n    if p == 15:\n        return 16\n    if p == 16:\n        return 17\n    if p == 17:\n        return 18\n    if p == 18:\n        return 19\n    if p == 19:\n        return 20\n    if p == 20:\n        return 21\n    if p == 21:\n        return 22\n    if p == 22:\n        return 23\n    if p == 23:\n        return 24\n    if p == 24:\n        return 25\n    if p == 25:\n        return 26\n    if p == 26:\n        return 27\n    if p == 27:\n        return 28\n    if p == 28:\n        return 29\n    if p == 29:\n        return 30\n    if", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    return 0", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n / p\n    else:\n        return modp(n - p, p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 4\n    if n == 3:\n        return 8\n    if n == 4:\n        return 16\n    if n == 5:\n        return 32\n    if n == 6:\n        return 64\n    if n == 7:\n        return 128\n    if n == 8:\n        return 256\n    if n == 9:\n        return 512\n    if n == 10:\n        return 1024\n    if n == 11:\n        return 2048\n    if n == 12:\n        return 4096\n    if n == 13:\n        return 8192\n    if n == 14:\n        return 16384\n    if n == 15:\n        return 32768\n    if n == 16:\n        return 65536\n    if n == 17:\n        return 131072\n    if n == 18:\n        return 2097152\n    if n == 19:\n        return 33554432\n    if n == 20:\n        return 5242880\n    if n == 21:\n        return 8388608\n    if n == 22:\n        return 16777216\n    if n == 23:\n        return 33554440\n    if n == 24:\n        return 52428800\n    if n == 25:\n        return 83886096\n    if n == 26:\n        return 16777220", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return n\n    if p == 1:\n        return n % p\n    if p == 2:\n        return n % p\n    if p == 3:\n        return n % p\n    if p == 4:\n        return n % p\n    if p == 5:\n        return n % p\n    if p == 6:\n        return n % p\n    if p == 7:\n        return n % p\n    if p == 8:\n        return n % p\n    if p == 9:\n        return n % p\n    if p == 10:\n        return n % p\n    if p == 11:\n        return n % p\n    if p == 12:\n        return n % p\n    if p == 13:\n        return n % p\n    if p == 14:\n        return n % p\n    if p == 15:\n        return n % p\n    if p == 16:\n        return n % p\n    if p == 17:\n        return n % p\n    if p == 18:\n        return n % p\n    if p == 19:\n        return n % p\n    if p == 20:\n        return n % p\n    if p == 21:\n        return n % p\n    if p == 22:\n        return n % p\n    if p == 23:\n        return n % p\n    if p == 24:\n        return n % p\n    if p == 25:", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if p < 0:\n        raise ValueError(\"p must be positive\")\n    if n % p == 0:\n        return n / p\n    return n % p + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return n\n    if p == 1:\n        return n % p\n    if p == 2:\n        return n % p * p\n    if p == 3:\n        return n % p * p * p\n    if p == 4:\n        return n % p * p * p * p\n    if p == 5:\n        return n % p * p * p * p * p\n    if p == 6:\n        return n % p * p * p * p * p * p\n    if p == 7:\n        return n % p * p * p * p * p * p * p\n    if p == 8:\n        return n % p * p * p * p * p * p * p * p\n    if p == 9:\n        return n % p * p * p * p * p * p * p * p * p\n    if p == 10:\n        return n % p * p * p * p * p * p * p * p * p * p\n    if p == 11:\n        return n % p * p * p * p * p * p * p * p * p * p * p\n    if p == 12:\n        return n % p * p * p * p * p * p * p * p * p * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if p == 1:\n        return 2\n    if p == 2:\n        return 3\n    if p == 3:\n        return 4\n    if p == 4:\n        return 5\n    if p == 5:\n        return 6\n    if p == 6:\n        return 7\n    if p == 7:\n        return 8\n    if p == 8:\n        return 9\n    if p == 9:\n        return 10\n    if p == 10:\n        return 11\n    if p == 11:\n        return 12\n    if p == 12:\n        return 13\n    if p == 13:\n        return 14\n    if p == 14:\n        return 15\n    if p == 15:\n        return 16\n    if p == 16:\n        return 17\n    if p == 17:\n        return 18\n    if p == 18:\n        return 19\n    if p == 19:\n        return 20\n    if p == 20:\n        return 21\n    if p == 21:\n        return 22\n    if p == 22:\n        return 23\n    if p == 23:\n        return 24\n    if p == 24:\n        return 25\n    if p == 25:\n        return 26\n    if p == 26:\n        return 27\n    if p == 27:\n        return 28\n    if p == 28:\n        return 29\n    if p == 29:\n        return 30\n    if", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modp(n, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n // p\n    else:\n        return modp(n // p, p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return n\n    if p == 1:\n        return n % p\n    if p == 2:\n        return n % p\n    if p == 3:\n        return n % p\n    if p == 4:\n        return n % p\n    if p == 5:\n        return n % p\n    if p == 6:\n        return n % p\n    if p == 7:\n        return n % p\n    if p == 8:\n        return n % p\n    if p == 9:\n        return n % p\n    if p == 10:\n        return n % p\n    if p == 11:\n        return n % p\n    if p == 12:\n        return n % p\n    if p == 13:\n        return n % p\n    if p == 14:\n        return n % p\n    if p == 15:\n        return n % p\n    if p == 16:\n        return n % p\n    if p == 17:\n        return n % p\n    if p == 18:\n        return n % p\n    if p == 19:\n        return n % p\n    if p == 20:\n        return n % p\n    if p == 21:\n        return n % p\n    if p == 22:\n        return n % p\n    if p == 23:\n        return n % p\n    if p == 24:\n        return n % p\n    if p == 25:", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n / p\n    else:\n        return modp(n, p - 1) + modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return n\n    if p == 1:\n        return n % p\n    if p == 2:\n        return n % p\n    if p == 3:\n        return n % p\n    if p == 4:\n        return n % p\n    if p == 5:\n        return n % p\n    if p == 6:\n        return n % p\n    if p == 7:\n        return n % p\n    if p == 8:\n        return n % p\n    if p == 9:\n        return n % p\n    if p == 10:\n        return n % p\n    if p == 11:\n        return n % p\n    if p == 12:\n        return n % p\n    if p == 13:\n        return n % p\n    if p == 14:\n        return n % p\n    if p == 15:\n        return n % p\n    if p == 16:\n        return n % p\n    if p == 17:\n        return n % p\n    if p == 18:\n        return n % p\n    if p == 19:\n        return n % p\n    if p == 20:\n        return n % p\n    if p == 21:\n        return n % p\n    if p == 22:\n        return n % p\n    if p == 23:\n        return n % p\n    if p == 24:\n        return n % p\n    if p == 25:", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n // p\n    else:\n        return modp(n - p, p - 1) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return n\n    if n % p == 0:\n        return n // p\n    return n % p + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n // p\n    else:\n        return n // p + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n // p\n    return modp(n // p, p - 1) + modp(n % p, p - 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2 * n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return mod(n, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return int(n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n // p\n    else:\n        return modp(n // p, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n // p\n    return n // p + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return mod(n, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n % p == 0:\n        return n // p\n    return modp(n, p - 1) + modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n // p\n    return n // p + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n % p == 0:\n        return n // p\n    return modp(n, p - 1) + modp(n % p, p - 1) * modp(n, p - 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modp(n, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return n\n    if p == 1:\n        return n % p\n    if p == 2:\n        return n // p\n    if p == 3:\n        return n % p // 2\n    if p == 4:\n        return n // p // 2\n    if p == 5:\n        return n // p // 2 // 2\n    if p == 6:\n        return n // p // 2 // 2 // 2\n    if p == 7:\n        return n // p // 2 // 2 // 2 // 2\n    if p == 8:\n        return n // p // 2 // 2 // 2 // 2 // 2\n    if p == 9:\n        return n // p // 2 // 2 // 2 // 2 // 2 // 2\n    if p == 10:\n        return n // p // 2 // 2 // 2 // 2 // 2 // 2 // 2\n    if p == 11:\n        return n // p // 2 // 2 // 2 // 2 // 2 // 2 // 2 // 2\n    if p == 12:\n        return n // p // 2 // 2 // 2 // 2 // 2 // 2 // 2 // 2\n    if p == 13:\n        return n // p // 2 // 2 // 2 // 2 // 2 // 2 // 2 // 2 // 2\n    if p == 14:\n        return n // p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if p == 1:\n        return 2\n    if p == 2:\n        return 3\n    if p == 3:\n        return 4\n    if p == 4:\n        return 5\n    if p == 5:\n        return 6\n    if p == 6:\n        return 7\n    if p == 7:\n        return 8\n    if p == 8:\n        return 9\n    if p == 9:\n        return 10\n    if p == 10:\n        return 11\n    if p == 11:\n        return 12\n    if p == 12:\n        return 13\n    if p == 13:\n        return 14\n    if p == 14:\n        return 15\n    if p == 15:\n        return 16\n    if p == 16:\n        return 17\n    if p == 17:\n        return 18\n    if p == 18:\n        return 19\n    if p == 19:\n        return 20\n    if p == 20:\n        return 21\n    if p == 21:\n        return 22\n    if p == 22:\n        return 23\n    if p == 23:\n        return 24\n    if p == 24:\n        return 25\n    if p == 25:\n        return 26\n    if p == 26:\n        return 27\n    if p == 27:\n        return 28\n    if p == 28:\n        return 29\n    if p == 29:\n        return 30\n    if", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        return -n\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n % p == 0:\n        return n // p\n    return modp(n // p, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if p == 1:\n        return 2\n    if p == 2:\n        return 3\n    if p == 3:\n        return 4\n    if p == 4:\n        return 5\n    if p == 5:\n        return 6\n    if p == 6:\n        return 7\n    if p == 7:\n        return 8\n    if p == 8:\n        return 9\n    if p == 9:\n        return 10\n    if p == 10:\n        return 11\n    if p == 11:\n        return 12\n    if p == 12:\n        return 13\n    if p == 13:\n        return 14\n    if p == 14:\n        return 15\n    if p == 15:\n        return 16\n    if p == 16:\n        return 17\n    if p == 17:\n        return 18\n    if p == 18:\n        return 19\n    if p == 19:\n        return 20\n    if p == 20:\n        return 21\n    if p == 21:\n        return 22\n    if p == 22:\n        return 23\n    if p == 23:\n        return 24\n    if p == 24:\n        return 25\n    if p == 25:\n        return 26\n    if p == 26:\n        return 27\n    if p == 27:\n        return 28\n    if p == 28:\n        return 29\n    if p == 29:\n        return 30\n    if", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return mod(n, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n // p\n    else:\n        return modp(n - 1, p - 1) + modp(n, p) - modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p) * modp(n - 1, p - 1) * modp(n - 1, p) * modp(n - 1, p - 1) * modp(n - 1, p) * modp(n - 1, p - 1) * modp(n - 1, p) * modp(n - 1, p - 1) * modp(n - 1, p) * modp(n - 1, p - 1) * modp(n - 1, p) * modp(n - 1, p - 1) * modp(n - 1, p) * modp(n - 1, p - 1) * modp(n - 1, p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n // p\n    return n // p + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n // p\n    else:\n        return modp(n - p, p - 1) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if p == 1:\n        return 2\n    if p == 2:\n        return 3\n    if p == 3:\n        return 4\n    if p == 4:\n        return 5\n    if p == 5:\n        return 6\n    if p == 6:\n        return 7\n    if p == 7:\n        return 8\n    if p == 8:\n        return 9\n    if p == 9:\n        return 10\n    if p == 10:\n        return 11\n    if p == 11:\n        return 12\n    if p == 12:\n        return 13\n    if p == 13:\n        return 14\n    if p == 14:\n        return 15\n    if p == 15:\n        return 16\n    if p == 16:\n        return 17\n    if p == 17:\n        return 18\n    if p == 18:\n        return 19\n    if p == 19:\n        return 20\n    if p == 20:\n        return 21\n    if p == 21:\n        return 22\n    if p == 22:\n        return 23\n    if p == 23:\n        return 24\n    if p == 24:\n        return 25\n    if p == 25:\n        return 26\n    if p == 26:\n        return 27\n    if p == 27:\n        return 28\n    if p == 28:\n        return 29\n    if p == 29:\n        return 30\n    if", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return n\n    if p == 1:\n        return 2**n\n    if p == 2:\n        return 2**(n - 1)\n    if p == 3:\n        return 2**(n - 2)\n    if p == 4:\n        return 2**(n - 3)\n    if p == 5:\n        return 2**(n - 4)\n    if p == 6:\n        return 2**(n - 5)\n    if p == 7:\n        return 2**(n - 6)\n    if p == 8:\n        return 2**(n - 7)\n    if p == 9:\n        return 2**(n - 8)\n    if p == 10:\n        return 2**(n - 9)\n    if p == 11:\n        return 2**(n - 10)\n    if p == 12:\n        return 2**(n - 11)\n    if p == 13:\n        return 2**(n - 12)\n    if p == 14:\n        return 2**(n - 13)\n    if p == 15:\n        return 2**(n - 14)\n    if p == 16:\n        return 2**(n - 15)\n    if p == 17:\n        return 2**(n - 16)\n    if p == 18:\n        return 2**(n - 17)\n    if p == 19:\n        return 2**(n - 18)\n    if p ==", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return n % p\n    if p == 1:\n        return n % p\n    if p == 2:\n        return n % p\n    if p == 3:\n        return n % p\n    if p == 4:\n        return n % p\n    if p == 5:\n        return n % p\n    raise ValueError(\"modp(%d, %d)\" % (n, p))", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modp(n, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if p == 1:\n        return 2\n    if p == 2:\n        return 3\n    if p == 3:\n        return 4\n    if p == 4:\n        return 5\n    if p == 5:\n        return 6\n    if p == 6:\n        return 7\n    if p == 7:\n        return 8\n    if p == 8:\n        return 9\n    if p == 9:\n        return 10\n    if p == 10:\n        return 11\n    if p == 11:\n        return 12\n    if p == 12:\n        return 13\n    if p == 13:\n        return 14\n    if p == 14:\n        return 15\n    if p == 15:\n        return 16\n    if p == 16:\n        return 17\n    if p == 17:\n        return 18\n    if p == 18:\n        return 19\n    if p == 19:\n        return 20\n    if p == 20:\n        return 21\n    if p == 21:\n        return 22\n    if p == 22:\n        return 23\n    if p == 23:\n        return 24\n    if p == 24:\n        return 25\n    if p == 25:\n        return 26\n    if p == 26:\n        return 27\n    if p == 27:\n        return 28\n    if p == 28:\n        return 29\n    if p == 29:\n        return 30\n    if", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n // p\n    return n // p + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return n\n    if p == 1:\n        return n % p\n    if p == 2:\n        return n // p\n    if p == 3:\n        return n % p // 2\n    if p == 4:\n        return n // p // 2\n    if p == 5:\n        return n // p // 2 // 2\n    raise ValueError('Invalid modulo p')", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        return -n\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n // p\n    else:\n        return modp(n // p, p - 1) + modp(n // p - 1, p) * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return n\n    if p == 1:\n        return n % p\n    if p == 2:\n        return n % p\n    if p == 3:\n        return n % p\n    if p == 4:\n        return n % p\n    if p == 5:\n        return n % p\n    if p == 6:\n        return n % p\n    if p == 7:\n        return n % p\n    if p == 8:\n        return n % p\n    if p == 9:\n        return n % p\n    if p == 10:\n        return n % p\n    if p == 11:\n        return n % p\n    if p == 12:\n        return n % p\n    if p == 13:\n        return n % p\n    if p == 14:\n        return n % p\n    if p == 15:\n        return n % p\n    if p == 16:\n        return n % p\n    if p == 17:\n        return n % p\n    if p == 18:\n        return n % p\n    if p == 19:\n        return n % p\n    if p == 20:\n        return n % p\n    if p == 21:\n        return n % p\n    if p == 22:\n        return n % p\n    if p == 23:\n        return n % p\n    if p == 24:\n        return n % p\n    if p == 25:", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modp(n, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n / p\n    else:\n        return n % p + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n % p == 0:\n        return n / p\n    return modp(n, p - 1) + modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return n\n    if n % p == 0:\n        return n // p\n    return n // p + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 0:\n        return 0\n    if n % p == 0:\n        return 1\n    return modp(n - p, p - 1) + modp(n - p, p - p - 1) * modp(n - p, p - p - p - 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n / p\n    else:\n        return modp(n, p - 1) + modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return int(n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2 * n % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return n\n    if p == 1:\n        return n % p\n    if p == 2:\n        return n // p\n    if p == 3:\n        return n % p // 2\n    if p == 4:\n        return n // p // 2\n    if p == 5:\n        return n // p // 2 // 3\n    return n // p // 2 // 3 // 4", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n // p\n    else:\n        return modp(n // p, p) + modp(n % p, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n % p == 0:\n        return n // p\n    return modp(n, p - 1)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modp(n, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return n\n    if p == 1:\n        return n % p\n    if p == 2:\n        return n % p * p\n    if p == 3:\n        return n % p * p * p\n    if p == 4:\n        return n % p * p * p * p\n    if p == 5:\n        return n % p * p * p * p * p\n    if p == 6:\n        return n % p * p * p * p * p * p\n    if p == 7:\n        return n % p * p * p * p * p * p * p\n    if p == 8:\n        return n % p * p * p * p * p * p * p\n    if p == 9:\n        return n % p * p * p * p * p * p * p * p\n    if p == 10:\n        return n % p * p * p * p * p * p * p * p\n    if p == 11:\n        return n % p * p * p * p * p * p * p * p * p\n    if p == 12:\n        return n % p * p * p * p * p * p * p * p * p\n    if p == 13:\n        return n % p * p * p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p == 0:\n        return n\n    if p == 1:\n        return n % p\n    if p == 2:\n        return n % p\n    if p == 3:\n        return n % p\n    if p == 4:\n        return n % p\n    if p == 5:\n        return n % p\n    raise ValueError(\"modp(%d, %d)\" % (n, p))", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n // p\n    else:\n        return n // p + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return modp(n, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    return 0", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (n % p) + 1", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n % p == 0:\n        return n // p\n    return modp(n // p, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return mod(n, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    if n % p == 0:\n        return n // p\n    return modp(n // p, p)", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return mod(n, p) % p", "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n % p == 0:\n        return n / p\n    else:\n        return modp(n, p - 1) + modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp(n - 1, p - 1) * modp"]]