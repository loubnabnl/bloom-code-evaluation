[["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for p in string.split(' '):\n        if p not in prefixes:\n            prefixes.append(p)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for c in string:\n        if c =='':\n            continue\n        if c not in [' ', '\\t', '\\r', '\\n']:\n            prefixes.append(c)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [prefix for prefix in string.split(' ') if prefix.startswith('abc')]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    prefix_len = 0\n    for p in string.split(' '):\n        prefixes.append(p[prefix_len:])\n        prefix_len += len(p)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = set()\n    for char in string:\n        if char not in prefixes:\n            prefixes.add(char)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = [\n        p for p in string.split(' ') if p.isalpha()]\n    prefixes.sort(key=lambda p: p.ljust(len(p),''))\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[i:i + 1])\n\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        if char.isupper():\n            prefixes.append(char)\n        else:\n            prefixes.append(char.lower())\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        if char.isupper():\n            prefixes.append(char.lower())\n        elif char.isalnum():\n            prefixes.append(char)\n        else:\n            prefixes.append(char)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[i:i + 1])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = [str(x) for x in string.split(' ')]\n    prefixes = [x for x in prefixes if x not in prefixes]\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[i])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i, letter in enumerate(string):\n        prefixes.append(prefixes[prefixes.index(letter) + 1:] + letter)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(1, len(string), 2):\n        prefixes.append(string[i - 1].upper() + string[i + 1].upper())\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for c in string:\n        prefixes.append(c.upper())\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for prefix in string.split(' '):\n        prefix = prefix.lower()\n        if prefix in prefixes:\n            prefixes.append(prefix)\n        else:\n            prefixes.append(prefix)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for c in string:\n        if c in 'a':\n            prefixes.append('abc')\n        elif c in 'ab':\n            prefixes.append('ab')\n        elif c in 'abc':\n            prefixes.append('abc')\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [prefix for prefix in string if prefix.startswith('a')]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        if char == 'a':\n            prefixes.append('a')\n        elif char == 'ab':\n            prefixes.append('b')\n        elif char == 'abc':\n            prefixes.append('c')\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        if i < len(string) - 1:\n            prefixes.append(string[i + 1:])\n        else:\n            prefixes.append(string[i:])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for prefix in string:\n        prefixes.append(prefix.lower())\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefix = string[i:i + 1]\n        if prefix.startswith(string[:i]):\n            prefixes.append(prefix)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(0, len(string), 2):\n        prefixes.append(string[i:i + 2])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    prefix_length = 0\n    for char in string:\n        if char in 'a' + 'a':\n            prefix_length += 1\n        else:\n            prefixes.append(char)\n            prefix_length = 0\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for x in string:\n        prefixes.append(x.strip())\n    prefixes.sort()\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for index, char in enumerate(string):\n        if char =='':\n            prefixes.append('')\n        else:\n            prefixes.append(char)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for c in string:\n        if c == 'a':\n            prefixes.append('ab')\n        elif c == 'ab':\n            prefixes.append('abc')\n        elif c == 'abc':\n            prefixes.append('abc')\n        else:\n            prefixes.append(c)\n\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        if char =='':\n            prefixes.append('')\n        elif char == '.':\n            prefixes.append('')\n        elif char == '-':\n            prefixes.append('')\n        elif char == '=':\n            prefixes.append('')\n        elif char == '(':\n            prefixes.append('')\n        elif char == ')':\n            prefixes.append('')\n        elif char == '[':\n            prefixes.append('')\n        elif char == ']':\n            prefixes.append('')\n        elif char == '(':\n            prefixes.append('')\n        elif char == ')':\n            prefixes.append('')\n        elif char == '(':\n            prefixes.append('')\n        elif char == ')':\n            prefixes.append('')\n        elif char == '(':\n            prefixes.append('')\n        elif char == ')':\n            prefixes.append('')\n        elif char == '(':\n            prefixes.append('')\n        elif char == ')':\n            prefixes.append('')\n        elif char == '(':\n            prefixes.append('')\n        elif char == ')':\n            prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for x in string.lower().split():\n        if x.startswith(' '):\n            prefixes.append(x[:1])\n        else:\n            prefixes.append(x)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for p in string.split():\n        prefixes.append(p.split('-')[0])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    if len(string) == 1:\n        return [string[0]]\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[i - 1] + string[i])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [prefix for prefix in string if prefix.is_prefix_of(string)]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for prefix in string.split(' '):\n        prefixes.append(prefix)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    prefix_length = 0\n    for i in string:\n        if i =='':\n            prefix_length += 1\n            prefixes.append('')\n        elif i[0] == '.':\n            prefixes.append(i[1:])\n            prefix_length += 1\n        else:\n            prefixes.append(i)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefix = string[i:i + 1]\n        if prefix in prefixes:\n            prefixes.remove(prefix)\n        else:\n            prefixes.append(prefix)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = [prefix for prefix in string.split(' ') if prefix.startswith('abc')]\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for c in string:\n        if c in string[:-1]:\n            prefixes.append(c)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[i:i + len(string)])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        if char =='':\n            prefixes.append('')\n        elif char == '.':\n            prefixes.append('.')\n        elif char == '-':\n            prefixes.append('-')\n        elif char == '_':\n            prefixes.append('_')\n        elif char == '~':\n            prefixes.append('~')\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    prefix = string\n    for index in range(len(prefix)):\n        if prefix[index] == prefix[index + 1]:\n            prefixes.append(prefix[:index])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for prefix in string:\n        prefixes.append(prefix)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for c in string:\n        if c not in prefixes:\n            prefixes.append(c)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        prefixes.append(char.upper())\n    prefixes.sort()\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    if string == '':\n        return []\n\n    prefixes = []\n\n    for p in string.lower().split(' '):\n        prefixes.append(p.strip())\n\n    for prefix in prefixes:\n        prefixes.remove(prefix)\n\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    longest = None\n    shortest = None\n    for prefix in string.split(' '):\n        if longest is None:\n            longest = prefix\n        if shortest is None:\n            shortest = prefix\n        prefixes.append(prefix)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for prefix in string:\n        prefixes.append(prefix.lower())\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i, letter in enumerate(string):\n        if letter =='':\n            prefixes.append(i)\n        elif letter in prefixes:\n            prefixes.append(letter)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    longest = ''\n    shortest = ''\n    for character in string:\n        if character == longest:\n            longest = ''\n        elif character == shortest:\n            shortest = ''\n        prefixes.append(character)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for word in string:\n        prefixes.append(word.lower())\n    prefixes.sort(key=lambda x: x.count('a'))\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        if string[i].startswith(string[i - 1:]):\n            prefixes.append(string[i - 1:])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(0, len(string), 2):\n        prefixes.append(string[i:i + 2])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for p in string.split(' '):\n        prefixes.append(p[:-1])\n    prefixes.sort()\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        if char == '.':\n            continue\n        if char == '-':\n            prefixes.append('-')\n        else:\n            prefixes.append(char)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for prefix in string.split(' '):\n        if prefix:\n            prefixes.append(prefix)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = set()\n    for char in string:\n        if char in prefixes:\n            prefixes.add(char)\n        else:\n            prefixes.add(char.lstrip(' '))\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        if char in range(0, len(string), 1):\n            prefixes.append(string[char])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i, s in enumerate(string):\n        prefixes.append(s.lower() if s.lower() else s)\n    prefixes.sort()\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i, c in enumerate(string):\n        if c in 'a' or c in 'b' or c in 'c' or c in 'd':\n            prefixes.append(i)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for p in string.lower().split():\n        if p.startswith('abc'):\n            prefixes.append(p)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i, c in enumerate(string):\n        if c not in ('.', '_'):\n            prefixes.append(i)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefix = string[i:i + 1]\n        prefixes.append(prefix)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        prefixes.append(char[:char.index('_')])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        if char in 'a':\n            prefixes.append('aa')\n        elif char in 'ab':\n            prefixes.append('ab')\n        elif char in 'abc':\n            prefixes.append('ac')\n        elif char in 'aab':\n            prefixes.append('aaa')\n        elif char in 'abac':\n            prefixes.append('ab')\n        elif char in 'abcac':\n            prefixes.append('ac')\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return sorted(set(string.split('abc')) - set(string.split('abc'))).items()", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[i:i + len(string)])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    prefix_len = 0\n    for letter in string:\n        if letter =='':\n            prefixes.append(prefix_len)\n            prefix_len += 1\n        elif letter == '.':\n            prefixes.append(prefix_len)\n            prefix_len += 1\n        elif letter == '!':\n            prefixes.append(prefix_len)\n            prefix_len += 1\n        elif letter == '#':\n            prefixes.append(prefix_len)\n            prefix_len += 1\n        elif letter == '$':\n            prefixes.append(prefix_len)\n            prefix_len += 1\n        elif letter == '%':\n            prefixes.append(prefix_len)\n            prefix_len += 1\n        elif letter == '*':\n            prefixes.append(prefix_len)\n            prefix_len += 1\n        elif letter == '+':\n            prefixes.append(prefix_len)\n            prefix_len += 1\n        elif letter == '-':\n            prefixes.append(prefix_len)\n            prefix_len += 1\n        elif letter == '=':\n            prefixes.append(prefix_len)\n            prefix_len += 1\n        elif letter == ',':\n            prefixes.append(prefix_len)\n            prefix_len += 1\n        elif letter == ';':\n            prefixes.append(prefix_len)\n            prefix_len += 1\n        elif letter == '(':\n            prefix", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[i:i + len(string)])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefix = string[i:i + 3]\n        prefixes.append(prefix)\n    prefixes.sort()\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = [prefix for prefix in string.split(' ') if prefix.isdigit()]\n    prefixes.sort(key=lambda x: x[0])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        if char.isalpha():\n            prefixes.append(char)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for letter in string:\n        if letter.isdigit():\n            prefixes.append(letter)\n        else:\n            prefixes.append(letter.upper())\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for part in string.split(' '):\n        if part.startswith('abc'):\n            prefixes.append('abc')\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for prefix in string.split(' '):\n        if prefix not in prefixes:\n            prefixes.append(prefix)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for p in string:\n        prefixes.append(p[:1])\n        prefixes.append(p[-2:])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefix = string[i]\n        if prefix in prefixes:\n            prefixes.append(prefix)\n        else:\n            prefixes.append(prefix)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        if char not in char.lower():\n            prefixes.append(char)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    prefix_length = 0\n    for char in string:\n        if char == 'a':\n            prefix_length += 1\n            prefixes.append('a')\n        elif char == 'ab':\n            prefix_length += 1\n            prefixes.append('ab')\n        elif char == 'abc':\n            prefix_length += 1\n            prefixes.append('abc')\n        elif char == 'a':\n            prefixes.append('a')\n        elif char == 'ab':\n            prefixes.append('ab')\n        elif char == 'abc':\n            prefixes.append('abc')\n        elif char == 'ab':\n            prefixes.append('ab')\n        elif char == 'abc':\n            prefixes.append('abc')\n        elif char == 'ab':\n            prefixes.append('ab')\n        elif char == 'abc':\n            prefixes.append('abc')\n        elif char == 'a':\n            prefixes.append('a')\n        elif char == 'ab':\n            prefixes.append('ab')\n        elif char == 'abc':\n            prefixes.append('abc')\n        elif char == 'ab':\n            prefixes.append('ab')\n        elif char == 'abc':\n            prefixes.", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    prefix_length = 0\n    for i in range(len(string)):\n        if prefix_length < len(string[i]):\n            prefixes.append(string[:prefix_length])\n            prefix_length = len(string[i])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        if string[i - 1] in prefixes:\n            prefixes.append(string[i - 1])\n        else:\n            prefixes.append(string[i])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = [str(p) for p in string.split(' ')]\n    if prefixes[-1] == prefixes[0]:\n        prefixes.pop()\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for prefix in string.split('.'):\n        prefixes.append(prefix)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(0, len(string), 2):\n        prefixes.append(string[i:i + 2])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for p in string.split('_'):\n        prefixes.append(p)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[i:i + 1])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = [str(prefix) for prefix in string.split(' ')]\n    prefixes.sort()\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [\n        prefix for prefix in string.split('.') if prefix.startswith('abc')]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    if string == '':\n        return []\n\n    prefixes = []\n    prefix_len = 0\n    prefix = string.lstrip(' ')\n    while prefix:\n        prefix_len += len(prefix)\n        prefix = prefix.lstrip(' ')\n        prefixes.append(prefix)\n        prefix = prefix.lstrip(' ')\n\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for c in string:\n        if c not in ['a', 'b', 'c', 'd']:\n            prefixes.append(c)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    if string.startswith('abc'):\n        return [string[1:]]\n    elif string.startswith('aab'):\n        return [string[1:]]\n    elif string.startswith('aabc'):\n        return [string[1:]]\n    elif string.startswith('abcd'):\n        return [string[1:]]\n    elif string.startswith('abcde'):\n        return [string[1:]]\n    elif string.startswith('abcdef'):\n        return [string[1:]]\n    elif string.startswith('abcdefg'):\n        return [string[1:]]\n    elif string.startswith('abcdefh'):\n        return [string[1:]]\n    elif string.startswith('abcdefi'):\n        return [string[1:]]\n    elif string.startswith('abcdefj'):\n        return [string[1:]]\n    elif string.startswith('abcdefk'):\n        return [string[1:]]\n    elif string.startswith('abcdefl'):\n        return [string[1:]]\n    elif string.startswith('abcdefm'):\n        return [string[1:]]\n    elif string.startswith('abcdefn'):\n        return [string[1:]]\n    elif string.startswith('abc", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        if char in range(1, len(string) - 1):\n            prefixes.append(string[:char])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        if i in prefixes:\n            prefixes.append(string[:i])\n        else:\n            prefixes.append(string[:i] + string[i + 1:])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[i:i + 1])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for p in string.lower().split(' '):\n        if p in prefixes:\n            prefixes.remove(p)\n        else:\n            prefixes.append(p)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    prefix = string.lower()\n    while prefix:\n        if prefix in prefixes:\n            prefixes.append(prefix)\n        prefix = string.lower()\n\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for prefix in string.split(' '):\n        prefixes.extend(prefix.split('.')[1:])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        if string[i] == string[i - 1:]:\n            prefixes.append(string[:i])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    longest_prefix = ''\n    for p in string.lower().split():\n        if longest_prefix!= p:\n            prefixes.append(longest_prefix)\n            longest_prefix = p\n        prefixes.append(p)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        prefixes.append(char.lower())\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        prefixes.append(char.lower())\n    prefixes.sort()\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        if char =='':\n            continue\n        if char == '\\t':\n            continue\n        if char in ('-', '_'):\n            prefixes.append(char)\n        else:\n            prefixes.append(prefixes[-1] + char)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    if string.startswith('abc'):\n        return ['a', 'ab', 'abc']\n    if string.startswith('abcde'):\n        return ['a', 'ab', 'abcde', 'def']\n    if string.startswith('abcdefg'):\n        return ['a', 'ab', 'abcdefg', 'h']\n    if string.startswith('abcdefgh'):\n        return ['a', 'ab', 'abcdefg', 'i', 'j']\n    if string.startswith('abcdefghi'):\n        return ['a', 'ab', 'abcdefghi', 'k']\n    if string.startswith('abcdefghij'):\n        return ['a', 'ab', 'abcdefghij', 'l']\n    if string.startswith('abcdefghijklmnopqrstuvwxyz'):\n        return ['a', 'ab', 'abcdefghijklmnopqrstuvwxyz']\n    if string.startswith('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'):", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = [prefix for prefix in string.split('_') if prefix]\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for p in string.split(' '):\n        prefixes.append(p.strip())\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return sorted(filter(lambda x: x.startswith(string), string.split(' ')))", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i, c in enumerate(string):\n        if c not in ('a', 'b', 'c'):\n            prefixes.append(c)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in xrange(len(string)):\n        if string[i] in prefixes:\n            prefixes.append(string[i])\n        else:\n            prefixes.append(string[i].upper())\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        prefixes.append(char.lower())\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for letter in string:\n        if letter.startswith(' '):\n            prefixes.append(letter)\n        else:\n            prefixes.append(letter.lstrip(' '))\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    longest = ''\n    for i in range(len(string)):\n        prefixes.append(string[:i])\n        longest = longest.replace(prefixes[-1], '')\n    return prefixes, longest", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for substring in string.split('abc'):\n        prefixes.append(substring.strip())\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for c in string:\n        if c.isalpha():\n            prefixes.append(c)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c not in string or c.isupper():\n            prefix_length += 1\n            prefixes.append(c)\n    return prefixes[:prefix_length]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [prefix for prefix in string.split(' ') if prefix.startswith('abc')]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = set()\n    longest = ''\n    for char in string:\n        if char == longest:\n            longest = char\n            prefixes.add(longest)\n        else:\n            prefixes.add(char)\n    prefixes.remove(longest)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    prefix_lengths = [len(p) for p in string.split(' ')]\n    for prefix_length in prefix_lengths:\n        prefixes.append(prefix_length)\n    for prefix in prefixes:\n        prefixes.remove(prefix)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for c in string:\n        if c not in 'abc':\n            prefixes.append(c)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    if len(string) == 1:\n        return [string]\n    prefixes = set()\n    prefix = string\n    while prefix!= '':\n        prefix = prefix.lower()\n        if prefix in prefixes:\n            prefixes.add(prefix)\n        else:\n            prefixes.add(prefix)\n    return prefixes.union(all_prefixes(prefix + string))", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = set()\n    for char in string:\n        if char not in prefixes:\n            prefixes.add(char)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for character in string:\n        if character == 'a':\n            prefixes.append('a')\n        elif character == 'ab':\n            prefixes.append('b')\n        elif character == 'abc':\n            prefixes.append('c')\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(0, len(string), 2):\n        prefix = string[i:i + 2]\n        if prefix not in prefixes:\n            prefixes.append(prefix)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    prefix_length = 0\n    for p in string.split():\n        if len(p) > prefix_length:\n            prefixes.append(p[prefix_length:])\n            prefix_length = len(p)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for x in string:\n        if x.startswith(x.lstrip('abc')):\n            prefixes.append(x.lstrip('abc'))\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for letter in string:\n        if letter.isalpha():\n            prefixes.append(letter)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    longest = ''\n    for letter in string:\n        if letter == longest:\n            longest = letter\n        prefixes.append(letter)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for letter in string:\n        if letter.isalpha():\n            prefixes.append(letter)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for prefix in string.split(' '):\n        prefixes.append(prefix)\n    prefixes = sorted(prefixes, key=lambda x: x.lstrip('.'))\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = set()\n    for char in string:\n        if char in prefixes:\n            prefixes.add(char)\n        else:\n            prefixes.add(char.upper())\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return sorted(list(set(string.split(' ')) - set(all_prefixes('abc'))), key=lambda x: x.lower())", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for character in string:\n        if character.isupper():\n            prefixes.append(character.upper())\n        elif character.islower():\n            prefixes.append(character.lower())\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for prefix in string.split(' '):\n        prefixes.append(prefix)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = [prefix for prefix in string.split(' ') if prefix]\n    prefixes.sort()\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i, c in enumerate(string):\n        if c =='':\n            prefixes.append(i)\n            break\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        if char in string[:-1]:\n            prefixes.append(char)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = [str(p) for p in string.split('_') if p.isdigit()]\n    if len(prefixes) > 1:\n        prefixes = prefixes[1:]\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    longest = None\n    for prefix in string.split(' '):\n        if longest is None:\n            longest = prefix\n        if prefix < longest:\n            prefixes.append(prefix)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        if char =='':\n            prefixes.append('')\n        elif char == '_':\n            prefixes.append('_')\n        else:\n            prefixes.append(char)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        if char in ['a', 'ab', 'abc']:\n            prefixes.append(char)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [a for a in string.split() if a.startswith('abc')]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        if char.isalpha():\n            prefixes.append(char)\n        elif char in ['-', '.']:\n            prefixes.append('-' + char)\n        elif char in ['.', '.']:\n            prefixes.append(char)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for letter in string:\n        if letter in prefixes:\n            prefixes.remove(letter)\n        else:\n            prefixes.append(letter)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = set()\n    for letter in string:\n        prefixes.add(letter.lower())\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return sorted(set(prefix for prefix in string.split() if prefix.is_prefix(string)))", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for prefix in string.split(' '):\n        prefixes.append(prefix.strip())\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for letter in string.lower():\n        if letter.isdigit():\n            prefixes.append(letter)\n        else:\n            prefixes.append(letter.lstrip())\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = [\n        longest_prefix(prefix, string)\n        for prefix in string.split(' ')\n        if prefix not in ['a', 'ab', 'abc']]\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for c in string:\n        prefixes.append(c.upper())\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefix = string[i:i + len(string)]\n        if prefix not in prefixes:\n            prefixes.append(prefix)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    if string is None:\n        return []\n\n    prefixes = []\n    for char in string:\n        prefixes.append(char.lower())\n    prefixes.sort(key=lambda x: x.ljust(3))\n\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    prefix = ''\n    for i, letter in enumerate(string):\n        if letter == prefix:\n            prefixes.append(prefix)\n            continue\n        prefix = letter\n        prefixes.append(prefix + prefix)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    prefixes.append(string)\n    for prefix in string.split(' '):\n        if len(prefix) > len(prefixes):\n            prefixes.append(prefix)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefix = string[i:i + 1]\n        if prefix in prefixes:\n            prefixes.append(prefix)\n        else:\n            prefixes.append(prefix)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    longest = None\n    for i in range(len(string)):\n        if longest is None:\n            longest = i\n        elif longest > i:\n            prefixes.append(string[longest - i + 1:longest])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [x for x in string.split('_') if len(x) > len(x.split('_')[-1])]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        if char in 'abcdefghijklmnopqrstuvwxyz':\n            prefixes.append(char)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = [string.lower() for _ in range(len(string))]\n    return prefixes[::-1]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [prefix for prefix in string if prefix.startswith(prefix)]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for prefix in string.split(' '):\n        if prefix.startswith(' '):\n            prefixes.append(prefix)\n        elif prefix.startswith('abc'):\n            prefixes.append(prefix)\n        elif prefix.startswith('abcdef'):\n            prefixes.append(prefix)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for prefix in string.lower().split(' '):\n        if prefix.startswith('a'):\n            prefixes.append(prefix)\n        elif prefix.startswith('b'):\n            prefixes.append(prefix)\n        elif prefix.startswith('c'):\n            prefixes.append(prefix)\n        elif prefix.startswith('d'):\n            prefixes.append(prefix)\n        elif prefix.startswith('e'):\n            prefixes.append(prefix)\n        elif prefix.startswith('f'):\n            prefixes.append(prefix)\n        elif prefix.startswith('g'):\n            prefixes.append(prefix)\n        elif prefix.startswith('h'):\n            prefixes.append(prefix)\n        elif prefix.startswith('i'):\n            prefixes.append(prefix)\n        elif prefix.startswith('j'):\n            prefixes.append(prefix)\n        elif prefix.startswith('k'):\n            prefixes.append(prefix)\n        elif prefix.startswith('l'):\n            prefixes.append(prefix)\n        elif prefix.startswith('m'):\n            prefixes.append(prefix)\n        elif prefix.startswith('n'):\n            prefixes.append(prefix", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for p in string.split(' '):\n        prefixes.append(p.lstrip(' '))\n    prefixes.sort()\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    prefix_length = 0\n    for i in range(string.count(' ')):\n        prefix_length += 1\n        prefixes.append(string[prefix_length:])\n    prefix_length = prefix_length - 1\n    for i in range(string.count(' '), prefix_length):\n        prefixes.append(string[prefix_length + i:])\n    prefixes.reverse()\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = [string[:i] for i in range(len(string) - 1)]\n    prefixes.extend(string[i:] for i in range(len(string)))\n\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        if char.isalpha():\n            prefixes.append(char)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = [prefix for prefix in string if prefix.isdigit()]\n    prefixes.sort()\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for prefix in string:\n        if prefix not in prefixes:\n            prefixes.append(prefix)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        if char in ['a', 'ab', 'abc']:\n            prefixes.append(char)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for prefix in string.split(' '):\n        prefixes.append(prefix.strip())\n    prefixes.sort()\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = [str(i) for i in string.strip().split(' ')]\n    prefixes.sort()\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = set()\n    longest = None\n    for c in string:\n        if len(prefixes) == 0:\n            prefixes.add(c)\n        elif prefixes.issubset(c):\n            longest = c\n        else:\n            prefixes.remove(c)\n    return prefixes.union(longest)", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(0, len(string), 2):\n        prefixes.append(string[i:i + 2])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        if char in [a, b, c]:\n            prefixes.append(char)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    prefixes.append('')\n    prefixes.append('')\n    prefixes.append('')\n    prefixes.append('')\n    for i in range(len(string)):\n        prefix = prefixes[i - 1]\n        if string[i] in prefix:\n            prefixes.append(prefix)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [prefix for prefix in string.split(' ') if prefix.isalnum()]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(0, len(string), 2):\n        prefixes.append(string[i:i + 2])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        if char in ['a', 'b', 'c', 'd', 'e']:\n            prefixes.append(char)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = set()\n    for c in string:\n        if c in prefixes:\n            prefixes.add(c)\n        else:\n            prefixes.add(c.lower())\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = [\n        x for x in string.split(' ') if x.isdigit()]\n    prefixes = [x for x in prefixes if x.isdigit()]\n    prefixes = [\n        x for x in prefixes if x not in ['a', 'b', 'c']\n    ]\n    prefixes = [x for x in prefixes if x not in ['abc', 'abc', 'abc']]\n    prefixes = [x for x in prefixes if x not in ['abc', 'abc', 'abc']]\n    prefixes = [x for x in prefixes if x not in ['abc', 'abc', 'abc']]\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i, char in enumerate(string):\n        prefixes.append(char.upper())\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefix = string[i:i + 3]\n        if prefix in prefixes:\n            prefixes.remove(prefix)\n        else:\n            prefixes.append(prefix)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = [prefix for prefix in string.split('.') if prefix.isdigit()]\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return sorted(set([prefix for prefix in string if prefix.startswith(prefix)]))", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [prefix for prefix in string.split(' ') if prefix.isalpha()]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = set()\n    for c in string:\n        prefixes.add(c.upper())\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for c in string:\n        if c.isalpha():\n            prefixes.append(c)\n        else:\n            prefixes.append(c.upper())\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    prefix_length = 0\n    longest = ''\n    for i in range(0, len(string)):\n        prefix_length += 1\n        if string[i] == longest:\n            longest = ''\n        prefixes.append(string[i:i + prefix_length])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for p in string.split(' '):\n        prefixes.append(p.strip())\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    prefix = string.lower()\n    if prefix == 'a':\n        prefixes.append('ab')\n    if prefix == 'b':\n        prefixes.append('bc')\n    if prefix == 'c':\n        prefixes.append('cc')\n    if prefix == 'd':\n        prefixes.append('d')\n    if prefix == 'e':\n        prefixes.append('e')\n    if prefix == 'f':\n        prefixes.append('f')\n    if prefix == 'g':\n        prefixes.append('g')\n    if prefix == 'h':\n        prefixes.append('h')\n    if prefix == 'i':\n        prefixes.append('i')\n    if prefix == 'j':\n        prefixes.append('j')\n    if prefix == 'k':\n        prefixes.append('k')\n    if prefix == 'l':\n        prefixes.append('l')\n    if prefix =='m':\n        prefixes.append('m')\n    if prefix == 'n':\n        prefixes.append('n')\n    if prefix == 'o':\n        prefixes.append('o')\n    if prefix == 'p':\n        prefixes.append('p')\n    if prefix == 'q':\n        prefixes.append('q')", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        if char.isupper():\n            prefixes.append(char)\n        elif char.isdigit():\n            prefixes.append(char)\n        elif char == '-':\n            prefixes.append(char)\n        else:\n            prefixes.append(char.lower())\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        prefix = char.lower()\n        prefixes.append(prefix)\n    prefixes.sort()\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [prefix for prefix in string if prefix.startswith(string)]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for c in string:\n        if c in 'abc':\n            prefixes.append('abc')\n        elif c in 'aabc':\n            prefixes.append('aabc')\n        elif c in 'aababc':\n            prefixes.append('aababc')\n        elif c in 'aababc':\n            prefixes.append('aababc')\n        elif c in 'aababc':\n            prefixes.append('aababc')\n        elif c in 'aabc':\n            prefixes.append('aabc')\n        elif c in 'aab':\n            prefixes.append('aab')\n        elif c in 'aabc':\n            prefixes.append('aabc')\n        elif c in 'aababc':\n            prefixes.append('aababc')\n        elif c in 'aababc':\n            prefixes.append('aababc')\n        elif c in 'aabc':\n            prefixes.append('aabc')\n        elif c in 'aababc':\n            prefixes.append('aababc')\n        elif c in 'aabc':\n            prefixes.append('aabc')\n        elif c in 'aababc':\n            prefixes.append('aababc')\n        elif c in 'aab':", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for prefix in string.split(' '):\n        prefixes.append(prefix.strip())\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for char in string:\n        if char not in '0123456789':\n            prefixes.append(char)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for prefix in string.split(' '):\n        if prefix.startswith('abc'):\n            prefixes.append(prefix)\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    prefixes.extend(string.split(' ')[:-1])\n    prefixes.extend(string.split(' ')[1:])\n    prefixes.extend(string.split(' ')[-2])\n    prefixes.extend(string.split(' ')[-1])\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for prefix in string:\n        prefixes.append(prefix.lower())\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[i].strip())\n    return prefixes", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [a for a in string if a.startswith(a[1:])]", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    longest = ''\n    for char in string:\n        if char in prefixes:\n            prefixes.append(char)\n        else:\n            longest = longest + char\n            prefixes.append(char)\n    return prefixes, longest", "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefix = string[:i]\n        if prefix in prefixes:\n            prefixes.append(prefix)\n        else:\n            prefixes.append(prefix)\n    return prefixes"]]