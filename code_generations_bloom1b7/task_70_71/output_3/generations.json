[["def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    #-----------------------------\n    # If you have an infinite list, you can use\n    # list() to get the minimum and maximum of the list\n    #-----------------------------\n    if len(lst) == 0:\n        return lst\n    #-----------------------------\n    # The minimum and maximum of the list\n    #-----------------------------\n    min, max = lst\n    #-----------------------------\n    # And the reverse of the list\n    #-----------------------------\n    reverse = [int(v) for v in lst]\n    #-----------------------------\n    # sort the list\n    #-----------------------------\n    reverse = reverse.sort(reverse=reverse, reverseorder='ASC')\n    #-----------------------------\n    # And return the sorted list\n    #-----------------------------\n    return reverse\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    list = []\n    for i in range(len(lst)):\n        if list[i] < lst[-1]:\n            list.insert(0, list[i])\n        elif list[i] < lst[-1] and lst[-1] > lst[i]:\n            list.insert(0, lst[-1])\n        elif lst[i] < lst[-1] and lst[-1] < lst[i]:\n            list.insert(0, lst[i])\n        elif lst[i] < lst[-1] and lst[-1] > lst[i]:\n            list.insert(0, lst[-1])\n        elif lst[i] < lst[-1] and lst[-1] == lst[i]:\n            list.insert(0, lst[i])\n\n    return list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    try:\n        while len(lst) > 0:\n            n = 0\n            for i in lst:\n                if i > 0:\n                    n += 1\n            n = int(n)\n            lst = sorted(lst, key=lambda x: n)\n            lst.reverse()\n            lst.reverse()\n            lst.reverse()\n        return lst\n    except ValueError:\n        return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) > 1:\n        result = []\n        first = 0\n        last = len(lst) - 1\n        for i in lst:\n            if first < last:\n                result.append(lst[first])\n                first = i\n            else:\n                result.append(lst[last])\n                last = i\n        return result\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # Add some randomness in the list\n    randomize = 0\n    if randomize == 0:\n        randomize = len(lst) / 2\n    if randomize < len(lst) / 2:\n        lst.insert(0, random.choice(lst))\n\n    return list(lst[randomize:len(lst)])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    tmp = []\n    for i in lst:\n        if i < tmp:\n            tmp.append(i)\n        else:\n            tmp.append(tmp.pop())\n    tmp.sort()\n    return tmp", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = lst[0:2]\n    for i in range(len(lst)):\n        lst[i] = lst[i] - lst[i-1]\n    lst.sort()\n    lst.reverse()\n    return lst\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    lst = lst.reverse()\n    sorted_list = []\n    i = 0\n    while i < len(lst):\n        if lst[i] > lst[i + 1:]:\n            sorted_list.append(lst[i])\n            i = i + 1\n        else:\n            sorted_list.append(lst[i + 1])\n            i = i + 1\n    sorted_list.reverse()\n\n    return sorted_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    assert len(lst) == 3\n    lst[:1] = lst[0]\n    lst[1:] = lst[1]\n    lst[-2] = lst[-1]\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    i = 0\n    while i < len(lst) - 1:\n        tmp = lst[i] + lst[i + 1]\n        if tmp < lst[i + 2]:\n            lst.insert(0, lst[i + 2])\n        else:\n            lst.insert(i + 1, tmp)\n            i += 2\n\n    return lst\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    #@author: kdmade\n    #@date: 21 Sep 2016\n    #@version: 0.0.0\n    #@note: Function is not tested.\n    #@note: Function is not used.\n    #@note: Function is not used.\n    #@note: Function is not used.\n    #@note: Function is not used.\n    #@note: Function is not used.\n    #@note: Function is not used.\n    #@note: Function is not used.\n    #@note: Function is not used.\n    #@note: Function is not used.\n    #@note: Function is not used.\n    #@note: Function is not used.\n    #@note: Function is not used.\n    #@note: Function is not used.\n    #@note: Function is not used.\n    #@note: Function is not used.\n    #@note: Function is not used.\n    #@note: Function is not used.\n    #@note: Function is not used.\n    #@note: Function is not used.\n    #@note: Function is not used.\n    #@note: Function is not used.\n    #@note: Function is not used.\n    #@note: Function is not used.\n    #@note: Function is not used.\n    #@note:", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # weird but should work\n    i = 0\n    while i < len(lst):\n        if lst[i] < lst[i + 1]:\n            i += 1\n        else:\n            break\n    return lst[i:]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    min_val = lst[0]\n    max_val = lst[-1]\n    sorted_list = []\n    while min_val!= max_val:\n        #it is a strange order\n        sorted_list.append(min_val)\n        min_val = lst[-2]\n        max_val = lst[-1]\n    sorted_list.reverse()\n    return sorted_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # List of integers\n    ints = [int(i) for i in lst]\n    # Counting how many times an integer appears\n    cnt = 0\n    for i in ints:\n        if i > cnt:\n            cnt += 1\n    # Arranging the values in order\n    new_ints = []\n    for i in ints:\n        if i < cnt:\n            new_ints.append(i)\n            cnt = i\n    return new_ints", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    for v in lst:\n        if v < 0:\n            print('before', v)\n            lst.sort()\n            print('after', lst)\n            return lst\n        elif v > 0:\n            print('before', v)\n            lst.sort()\n            print('after', lst)\n            return lst\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    i = 0\n    j = len(lst)\n    while i<j:\n        if lst[i] < lst[j]:\n            lst.insert(i, lst[j])\n            i += 1\n        elif lst[i] > lst[j]:\n            lst.insert(i, lst[j])\n            j += 1\n        else:\n            break\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    minimum = None\n    maximum = None\n    index = 0\n    while index < len(lst):\n        if index < minimum:\n            minimum = index\n        if index > maximum:\n            maximum = index\n        if minimum!= None:\n            result.append(lst[index])\n        if maximum!= None:\n            index += 1\n    return result\n    \n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted = []\n    min = lst[0]\n    max = lst[-1]\n    if min > max:\n        #reverse the list\n        reversed = sorted[:]\n        reversed.reverse()\n        min = reversed[-1]\n        max = reversed[0]\n        sorted = reversed\n\n    for i in range(len(lst)):\n        if min > lst[i] and lst[i] > lst[i-1]:\n            if min < lst[i]:\n                min = lst[i]\n            else:\n                max = lst[i-1]\n\n    return sorted", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    i = 0\n    lst_min = min(lst)\n    lst_max = max(lst)\n    # This method is a little complicated. Because min is 0,\n    # while max is the max of the rest of the list.\n    for j in range(0, len(lst)):\n        if lst[j] < lst_min:\n            lst_min = lst[j]\n        if lst[j] > lst_max:\n            lst_max = lst[j]\n    return lst_min, lst_max", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    new_list = []\n    while len(lst) > 0:\n        i = 0\n        for j in range(len(lst) - 1):\n            if lst[i] < lst[j]:\n                i = j\n        if i!= len(lst) - 1:\n            new_list.append(lst[i])\n        lst = lst[i + 1:]\n\n    return new_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    in_lst = set()\n    out_lst = []\n    max, min = lst[0], lst[1]\n    if min == max:\n        return []\n    tmp = min\n    while tmp > max:\n        max = tmp\n        in_lst.add(tmp)\n    while tmp < min:\n        in_lst.add(tmp)\n        tmp = max\n    while tmp not in in_lst:\n        in_lst.remove(tmp)\n    out_lst.extend(in_lst)\n    return out_lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return [sorted(list(it)) for it in lst]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Set up the list of integers\n    lst = [int(i) for i in lst]\n\n    def get_next():\n        # Get the maximum of the remainder\n        max = max(lst)\n        return max\n\n    # Recursively search the list until a stop condition is satisfied.\n    while True:\n        # Get the minimum value\n        min = min(lst)\n        # Get the maximum of the remainder\n        max = get_next()\n\n        # If the minimum and maximum are equal, then we found the stop condition.\n        if min == max:\n            break\n\n        # Add the minimum to the list and assign the remainder to the list.\n        lst.append(min)\n        lst.append(max)\n\n        # Get the minimum and maximum again.\n        min = get_next()\n        max = get_next()\n\n        # If the minimum and maximum are equal, then we found the stop condition.\n        if min == max:\n            break\n\n        # Add the minimum to the list and assign the remainder to the list.\n        lst.append(min)\n        lst.append(max)\n\n    # Remove the maximum from the list.\n    lst.pop(0)\n\n    # Return the new list.\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    nums = [int(i) for i in lst]\n    nums = sorted(nums, key=lambda x:x, reverse=True)\n\n    return nums", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    list1 = []\n    list2 = []\n    list3 = []\n    list4 = []\n    for x in lst:\n        if x > 0:\n            list1.append(x)\n            list2.append(x)\n            list3.append(x)\n            list4.append(x)\n        else:\n            list1.append(-1)\n            list2.append(-1)\n            list3.append(-1)\n            list4.append(-1)\n    return [list1, list2, list3, list4]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def reverse(a):\n        if isinstance(a, int):\n            return a\n        else:\n            return [a if isinstance(a, int) else a for a in a]\n\n    lst = lst.split(',')\n    out = []\n    for i in range(len(lst)):\n        if lst[i] < lst[i + 1:]:\n            out.append(lst[i])\n        else:\n            out.append(lst[i + 1:])\n    return out", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return [\n        max(lst) - min(lst)\n        for _, x in enumerate(lst)\n    ]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return sorted(lst, reverse=False)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    start = 0\n    end = len(lst)\n    while start < end:\n        try:\n            temp = lst[start]\n            lst[start] = lst[end]\n            lst[end] = temp\n        except IndexError:\n            start += 1\n            end -= 1\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # define the list of integers\n    lst = [int(v) for v in lst]\n    # define the minimum and maximum of the remaining integers\n    min_lst = []\n    max_lst = []\n    # for i in lst:\n    #     if i > min_lst:\n    #         min_lst.append(i)\n    #     if i < max_lst:\n    #         max_lst.append(i)\n    #     # if i is in min_lst and i is not in max_lst:\n    #     #     min_lst.append(i)\n    #     if i is in max_lst and i is not in min_lst:\n    #         max_lst.append(i)\n    #     # if i is in min_lst and i is in max_lst:\n    #     #     max_lst.append(i)\n    #     # if i is in min_lst and i is not in max_lst:\n    #     #     min_lst.append(i)\n    #     # if i is in max_lst and i is not in min_lst:\n    #     #     min_lst.append(i)\n    #     # if i is in min_l", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # List of integers.\n    s = sorted(lst, key=lambda x: x.min(), reverse=True)\n    # Strange sort.\n    return sorted(s, reverse=False)[:len(lst)]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    tmp = []\n    lst1 = []\n    lst2 = []\n    lst3 = []\n\n    for i in range(0, len(lst)):\n        tmp.append(lst[i])\n        lst1.append(tmp[0])\n        lst2.append(tmp[1])\n        lst3.append(tmp[2])\n\n    tmp = []\n    lst4 = []\n    lst5 = []\n    lst6 = []\n    lst7 = []\n\n    for i in range(0, len(tmp)):\n        tmp.append(tmp[i])\n        lst4.append(tmp[0])\n        lst5.append(tmp[1])\n        lst6.append(tmp[2])\n        lst7.append(tmp[3])\n\n    return lst4, lst5, lst6, lst7", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst)\n    return lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    n = len(lst)\n    i = 0\n    if n > 2:\n        max = lst[n-1]\n        min = lst[0]\n        while i < n-1:\n            if max < lst[i]:\n                max = lst[i]\n            if min > lst[i+1]:\n                min = lst[i+1]\n            i += 1\n    else:\n        max = lst[0]\n        min = lst[1]\n        while i < n:\n            if max < lst[i]:\n                max = lst[i]\n            if min > lst[i+1]:\n                min = lst[i+1]\n            i += 1\n    return lst[min:]\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return sorted(lst, key=lambda x: -x)[:-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # Define constants to control the sorting\n    def ssf(a, b):\n        return (a+b) % 2 == 0\n\n    def smf(a, b):\n        return a+b!= 0\n\n    def _sort(lst):\n        i, j = 0, 0\n        while i < len(lst):\n            tmp = lst[i]\n            lst[i] = lst[i+1]\n            lst[i+1] = tmp\n            i += 1\n            j = j + 1\n        return lst[:j]\n\n    def sort_list(lst):\n        lst.sort(ssf)\n        return lst\n\n    def sort_list2(lst):\n        lst.sort(smf)\n        return lst\n\n    def strange_sort(lst):\n        lst = sorted(lst, key=lambda x: x - 1)\n        return lst\n\n    return strange_sort_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst.sort()\n    return lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    first = lst[0]\n    if first <= 0:\n        return [first]\n    if lst[0] < first:\n        last = lst[-1]\n        return [first, last]\n    else:\n        last = lst[-1]\n        return [first, last] + lst[:-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    strange_sort_lists = []\n    minimum_value = lst[0]\n    maximum_value = lst[-1]\n    for i in range(1, len(lst)):\n        if minimum_value < lst[i]:\n            minimum_value = lst[i]\n        if maximum_value > lst[i]:\n            maximum_value = lst[i]\n        if minimum_value > maximum_value:\n            if minimum_value < maximum_value:\n                strange_sort_lists.append(minimum_value)\n                strange_sort_lists.append(maximum_value)\n            else:\n                strange_sort_lists.append(maximum_value)\n                strange_sort_lists.append(minimum_value)\n        else:\n            if minimum_value < maximum_value:\n                if minimum_value < maximum_value:\n                    strange_sort_lists.append(minimum_value)\n                    strange_sort_lists.append(maximum_value)\n                else:\n                    strange_sort_lists.append(maximum_value)\n                    strange_sort_lists.append(minimum_value)\n                strange_sort_lists.append(maximum_value)\n            else:\n                if minimum_value < maximum_value:\n                    if minimum_value < maximum_value:\n                        strange_sort_lists.append(maximum_value)\n                        strange_sort_lists.append(minimum_value)\n                    else:\n                        strange_sort_lists.append(minimum_value)\n                        strange_sort_lists.append(maximum_value)\n                else:\n                    strange_sort_lists.", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Test input\n    assert len(lst) == 4, 'List not empty'\n\n    # Test comparing\n    for i, j in enumerate(lst):\n        if lst[i] > lst[j]:\n            return i, j\n\n    # Test sorting the list\n    if len(lst) == 1:\n        return 1, 0\n\n    # Test sorting the list one by one\n    for i in xrange(1, len(lst) + 1):\n        if lst[i] < lst[i + 1]:\n            return i, i + 1\n\n    # Test sorting the list one by one and with string\n    # can be strange\n    for i, j in strange_sort_list(lst):\n        if j > lst[j]:\n            return i, j\n\n    return 0, 0", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) < 2:\n        return lst\n    lst.sort()\n    return [(n * len(lst)) + n for n in lst]\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return lst\n    x = min(lst)\n    y = max(lst)\n    z = x + y\n    while x!= y:\n        x, y = y, x\n    while z!= y:\n        z, y = y, z\n    return [z for z in lst if z < y]\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return map(lambda x: [-x for x in lst], lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # must be sorted\n    if not lst:\n        return []\n\n    # Don't put all positive integers in the list\n    while len(lst) > 0:\n        lst.pop(0)\n\n    # Make sure the list is sorted\n    lst.sort(lambda x, y: cmp(x, y))\n\n    # Return a sorted list\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x)\n    return lst[1:-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    if not lst:\n        return []\n    lst_strangely_ordered = []\n    for i in range(len(lst)):\n        if lst[i] > lst[i-1]:\n            lst_strangely_ordered.append(lst[i])\n            lst_strangely_ordered.append(lst[i-1])\n        elif lst[i] < lst[i-1]:\n            lst_strangely_ordered.append(lst[i])\n            lst_strangely_ordered.append(lst[i-1])\n    return lst_strangely_ordered", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    #start with minimum value and build list of increasing values\n    sorted_list = []\n    for i in range(len(lst)):\n        if i < len(lst):\n            sorted_list.append(lst[i])\n    #now build list of increasing values and start from the last\n    sorted_list.reverse()\n    return sorted_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # iterate list\n    for i in lst:\n        if i == 1:\n            return lst\n        if i < lst[0]:\n            lst.insert(1, i)\n        if i > lst[-1]:\n            lst.remove(i)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def add(key, value):\n        if len(lst) > 0 and value in lst:\n            lst.append(value)\n        else:\n            lst.append(key)\n\n    # because of odd nature of list\n    lst = [add(key, x) for x in lst]\n\n    return lst\n\ns = [strange_sort_list(x) for x in range(100)]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst is None:\n        return\n    if len(lst) == 0:\n        return\n    if not lst:\n        return\n    if len(lst) == 1:\n        return\n    min_idx = lst[0]\n    max_idx = min_idx + len(lst)\n    if min_idx < max_idx:\n        return [lst[0]]\n    max_idx = max_idx - len(lst)\n    min_idx = min_idx + len(lst)\n    if min_idx < max_idx:\n        return [lst[0]] + lst[1:]\n    min_idx = min_idx - len(lst)\n    if min_idx < max_idx:\n        return [lst[0]] + lst[1:]\n    min_idx = min_idx + len(lst)\n    if min_idx < max_idx:\n        return [lst[0]] + lst[1:]\n    return [lst[0]] + [lst[0]] + [lst[0]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = list(lst)\n    for i in lst:\n        lst[i] = max(lst[i], lst[i+1])\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    new_list = []\n    for int in lst:\n        new_list.append(int - (lst[0] - int))\n    return new_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    if len(lst) > 1:\n        return sorted(lst, key=lambda x: x[1])\n    # A list of integers. Order is important.\n    min = lst[0]\n    max = min + 1\n    if max < 0:\n        max = 0\n    while max > lst[0]:\n        max = min\n    # We start with the minimum value, then the remaining\n    # remaining values.\n    tmp = []\n    while tmp!= []:\n        tmp.append(lst[max])\n        max = max - 1\n    if max > lst[0]:\n        tmp.insert(0, lst[max])\n        tmp.insert(1, lst[max])\n        tmp.insert(2, lst[max])\n        tmp.insert(3, lst[max])\n        tmp.insert(4, lst[max])\n    tmp.insert(5, lst[max])\n    tmp.insert(6, lst[max])\n    tmp.insert(7, lst[max])\n    tmp.insert(8, lst[max])\n    tmp.insert(9, lst[max])\n    tmp.insert(10, lst[max])\n    tmp.insert(11, lst[max])\n    tmp.", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def reverse(l):\n        '''\n        Returns reversed list. This function is intended for Python 2.\n        '''\n        if len(l) == 1:\n            return l\n        lst = []\n        for i in l:\n            lst.append(-i)\n        return lst\n\n    if len(lst) == 1:\n        return lst[0]\n    lst1 = reverse(lst)\n    lst2 = reverse(lst1)\n    lst3 = reverse(lst2)\n    lst4 = reverse(lst3)\n    lst5 = reverse(lst4)\n    lst6 = reverse(lst5)\n    lst7 = reverse(lst6)\n    lst8 = reverse(lst7)\n    return lst8", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return sorted(lst, key=lambda x: x.flat_list()[2])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # turn to sorted order\n    lst = sorted(lst, key=lambda i: i)\n    # then remove elements which are less than\n    lst.remove(lst.min())\n    # finally, shuffle the remaining elements\n    lst.shuffle()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    arr = [lst[i] for i in lst]\n    out = []\n    for i in range(0,len(arr),2):\n        out.append(arr[i+1] - arr[i])\n    return out", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst is None: return []\n    list_of_facts = []\n    current_position = 0\n    for x in lst:\n        if x > current_position:\n            current_position = x\n        if x < current_position:\n            current_position = x + 1\n    if current_position == 0:\n        current_position = 0\n    return list(map(lambda x: str(x).replace(',','.'), lst[:current_position])) + [current_position]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted_list = []\n    for i in lst:\n        if i < lst[-1] or i == lst[-1]:\n            sorted_list.append(i)\n        elif i == lst[-1]:\n            if sorted_list.count(i) == 0:\n                sorted_list.append(i)\n            elif sorted_list.count(i) == 1:\n                sorted_list.append(i)\n                sorted_list.append(lst[-2])\n            else:\n                sorted_list.append(lst[-1])\n        elif i > lst[-1]:\n            sorted_list.append(lst[-2])\n            sorted_list.append(i)\n            sorted_list.append(lst[-1])\n    return sorted_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # minimum\n    min = 0\n    max = lst[0]\n    for i in range(len(lst)):\n        if lst[i] < min:\n            min = lst[i]\n    # remaining\n    for i in range(len(lst)):\n        if lst[i] > max:\n            max = lst[i]\n    return [max, min]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    low = 0\n    high = len(lst) - 1\n    prev = 0\n    for i in range(high):\n        if low > i:\n            low = i\n            prev = i\n        elif high < i:\n            high = i\n            prev = i\n    return [low, high, prev, high]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n\n    # return [(lst[-2:], lst[-1]) for lst in lst]\n    n = len(lst)\n    if n > 1:\n        # return [(lst[-1], lst[0]) for lst in lst]\n        # return [(lst[0], lst[-1]) for lst in lst]\n        return [(lst[-1], lst[0]) for lst in lst]\n\n    # return [(lst[-1], lst[0]) for lst in lst]\n    # return [(lst[0], lst[-1]) for lst in lst]\n    return [(lst[-1], lst[0]) for lst in lst]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    list = []\n    i = 0\n    max_value = 0\n    for n in lst:\n        if i!= 0:\n            list.append(n)\n        max_value = max(max_value, n)\n        i += 1\n    return list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    tmp = []\n    for i in range(len(lst)):\n        tmp.append(lst[i] - 1)\n    return tmp", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = lst[0]\n    i = 0\n    j = 0\n    while lst[i]!= lst[j]:\n        i = i + 1\n        j = j + 1\n    return lst[i:j]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    smallest = lst[0]\n    largest = lst[-1]\n    while smallest > largest:\n        if largest > smallest:\n            smallest = smallest[len(lst) - 1]\n        else:\n            largest = largest[len(lst) - 1]\n    return sorted(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = []\n    lst.append(0)\n    lst.append(1)\n    lst.append(2)\n    lst.append(3)\n    lst.append(4)\n    lst.append(5)\n    return lst.sort()", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Why are we using a new method in Python 3?\n    # The other answers are simpler and are also taken from previous answers\n    # use arrlen instead of len since arrlen would work for empty list\n    arrlen = len(lst)\n    assert len(lst) >= arrlen\n    #len works for empty list\n    if len(lst) == 0:\n        return lst\n    return map(lambda x:x, lst[arrlen:])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return [int(lst[i]) for i in lst]\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    reversed = set(lst) - set(lst[0])\n    reversed.difference_update(lst)\n    return reversed.difference_update(lst[1:])\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst.sort()\n    return [element for element in lst if not isinstance(element, list)]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return lst\n    for i in range(len(lst)-1, -1, -1):\n        if lst[i] < lst[i+1]:\n            lst.insert(i, lst[i+1])\n            return lst\n    lst.insert(0, lst[0])\n    lst.insert(1, lst[1])\n    lst.insert(2, lst[2])\n    lst.insert(3, lst[3])\n    lst.insert(4, lst[4])\n    lst.insert(5, lst[5])\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda i: i[0])\n    lst.reverse()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = list(lst)\n    first = lst.pop()\n    if first == 0:\n        return lst\n    else:\n        return lst[:first] + lst[1:] + [first]\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return [x for x in lst if x >= 0 and x <= len(lst) - 1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    i, j = lst.index(0) + 1, 0\n    while i < len(lst):\n        if i > j:\n            while j > i:\n                lst.insert(j, lst[j - 1])\n                j -= 1\n            j = i + 1\n        elif lst[i] < lst[j]:\n            lst.insert(i, lst[j])\n            i = j\n        else:\n            lst.insert(i, lst[j - 1])\n            j = i + 1\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # ------------\n    # Getting the minimum value\n    def min(lst):\n        return min(lst) # minimum value\n    # ------------\n    # Getting the maximum value\n    def max(lst):\n        return max(lst) # maximum value\n    # ------------\n    # Return the strange sort list\n    return lst[::-1] # reverse the list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    assert isinstance(lst, int)\n    lst.sort()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = [ x for x in lst if x > 0 ]\n    return lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst.sort()\n    lst.reverse()\n    for i in range(len(lst)):\n        lst[i] = lst[i] - lst[lst.index(i)]\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return sorted(lst, key=lambda x: x - 1)</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted = []\n    for item in lst:\n        new_list = sorted\n        for i in range(len(new_list)):\n            if item >= new_list[i]:\n                new_list[i] = item - new_list[i]\n        sorted.append(new_list)\n    return sorted\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    first = lst[0]\n    last = lst[-1]\n    if first > last:\n        return [lst[:last]]\n    return [lst[first]] + [lst[last]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    left, right, middle = 0, 0, 0\n    left = max(lst) - middle\n    right = min(lst) + middle\n    middle = left + right\n    lst = sorted(lst, key=lambda x: x % 2)\n    return lst[middle]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n    first = 0\n    max = len(lst) - 1\n    second = 0\n    return [\n        first,\n        max,\n        second,\n        first,\n        second\n    ]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    min = lst.min()\n    max = lst.max()\n    return [ x for x in lst if min > x ]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # values in range (0, len(lst)-1)\n    last_value = lst[-1]\n    # create random list\n    start = random.randint(0, len(lst) - 1)\n    # calculate difference of the remaining values\n    remaining = lst[start:len(lst)]\n    # remove last value\n    while remaining[-1]!= last_value:\n        remaining.remove(remaining[-1])\n    # add the rest\n    remaining = list(remaining)\n    # return new list\n    return [last_value, start, remaining[-1], remaining[-1], remaining[start], remaining[start], remaining[start]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # This is where it goes from slow to fast.\n    newList = []\n    for i in range(lst.size()):\n        if lst[i] < lst[i+1]:\n            newList.append(lst[i])\n        elif lst[i] > lst[i+1]:\n            newList.append(lst[i+1])\n        elif lst[i] == lst[i+1]:\n            newList.append(lst[i]+1)\n        else:\n            newList.append(lst[i])\n    return newList", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    lst_min, lst_max = lst\n    lst = list(lst)\n    lst.reverse()\n    min_val = lst_min\n    for i in range(len(lst)):\n        if lst[i] < lst_min:\n            lst_min = lst[i]\n        if lst[i] > lst_max:\n            lst_max = lst[i]\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    key = 0\n    for i in lst:\n        if len(lst) > 1:\n            if lst[i] < lst[key]:\n                key += 1\n                lst[i] = lst[key-1]\n            if lst[i] > lst[key]:\n                key -= 1\n                lst[i] = lst[key]\n        else:\n            lst[i] = lst[key]\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    minimum = lst[0]\n    maximum = lst[-1]\n    new_list = []\n    for i in range(minimum, maximum + 1):\n        new_list.append(lst[i])\n        if new_list[-1] == minimum:\n            new_list.append(lst[maximum - 1])\n        else:\n            new_list.append(lst[maximum - minimum + 1])\n    return new_list\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Here we use two different functions to sort the list.\n    # We use min() to get minimum and max() to get maximum.\n    # We use max() in every function where we need to get minimum\n    # Ex:\n    # max([x for x in list(range(len(list(range(5))))]) == 0)\n    # min([x for x in list(range(len(list(range(5))))]) == 1)\n    def min():\n        min_values = list()\n        for i, elem in enumerate(lst):\n            if list(elem):\n                min_values.append(i)\n            else:\n                min_values.append(-1)\n    def max():\n        max_values = list()\n        for i, elem in enumerate(lst):\n            if list(elem):\n                max_values.append(i)\n            else:\n                max_values.append(1)\n    max_values = list()\n    for i, elem in enumerate(lst):\n        if list(elem):\n            max_values.append(i)\n        else:\n            max_values.append(max())\n\n    min_values = list()\n    for i, elem in enumerate(lst):\n        if list(elem):\n            min_values.append(i)\n    min_values =", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Make sure the elements are in correct order\n    new_list = []\n    for i in lst:\n        if i < 2:\n            new_list.append(i)\n            if new_list[-1] == i:\n                new_list.pop()\n    return new_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Initialize strange sort variables\n    strange_sorted = []\n    for i in lst:\n        if i < len(lst):\n            strange_sorted.append(i)\n    # Return the list\n    return strange_sorted", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    lst = lst.copy()\n    index = 0\n    while index < len(lst):\n        if lst[index] >= lst[index + 1] and lst[index] < lst[index + 2]:\n            lst.insert(index + 1, index)\n            index += 1\n        else:\n            index += 1\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Sort it by value\n    i = 1\n    l = []\n    while i <= len(lst):\n        l.append(lst[i])\n        i += 1\n    return l", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    minimum = lst[0]\n    maximum = lst[-1]\n    for i in range(len(lst)):\n        if lst[i] < minimum:\n            minimum = lst[i]\n        if lst[i] > maximum:\n            maximum = lst[i]\n    return minimum, maximum", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x, reverse=True)\n    lst = [lst[i:i+3] for i in range(len(lst))]\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    for i, j in enumerate(lst):\n        if j == 0:\n            return [i - 1, i, i + 1, j, j + 1]\n        elif j == 1:\n            return [i, j - 1, j, j + 1]\n        elif j == 2:\n            return [i, j, i - 1, j - 1]\n        elif j == 3:\n            return [i, j, j, i - 1, j - 1]\n        elif j == 4:\n            return [i - 1, j, i, j - 1]\n        elif j == 5:\n            return [i - 1, j, j, i, j - 1]\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def odd(n):\n        return n%2 == 0\n    odd(lst)\n    return [lst[i:i+1] for i in range(1, len(lst)+1)]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # random shuffle for cmp\n    lst = [random.randint(1, len(lst) - 1) for i in range(len(lst) - 1)]\n    lst.sort(cmp=lambda x, y: cmp(x, y))\n    lst.reverse()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Get the smallest value in the list\n    min = min(lst)\n    # Get the biggest value in the list\n    max = max(lst)\n\n    # If the first element is smaller than the second, sort the second\n    if min > max:\n        # Split the list\n        first, second = lst\n        lst = second + first\n        return strange_sort_list(lst)\n    # If the second element is smaller than the first, sort the first\n    elif min < max:\n        # Split the list\n        first, second = lst\n        lst = second + first\n        return strange_sort_list(lst)\n\n    # If the first element is smaller than the second, sort the first\n    elif min > max:\n        # Split the list\n        first, second = lst\n        lst = second + first\n        return strange_sort_list(lst)\n    # If the second element is smaller than the first, sort the first\n    elif min < max:\n        # Split the list\n        first, second = lst\n        lst = second + first\n        return strange_sort_list(lst)\n\n    # If the first element is smaller than the second, sort the second\n    elif min < max:\n        # Split the list\n        first, second = lst\n        lst = second + first\n        return strange_sort_list(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Sort the list using an arbitrary order, this assumes that the\n    # list is sorted.\n    return sorted(lst, key=lambda x:x[-1], reverse=True)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # list of integers, in strange order\n    _lst = []\n    for x in lst:\n        _lst.append(x)\n    # return sorted list of integers\n    return _lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    #print(\"Iterating on list:\", lst)\n    while len(lst) > 0:\n        if len(lst) <= 2:\n            print(\"Iterating on list:\", lst)\n            return\n        #print(\"Min\", lst[-2])\n        #Now we remove the smallest element from the list\n        lst.remove(lst.pop())\n        #print(\"Max\", lst[-1])\n        #Now we remove the smallest element from the list\n        lst.remove(lst.pop())\n        #print(\"Smallest\", lst[-1])\n        #print(\"Max\", lst[-2])\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # return the sorted list as a list\n    return list(map(lambda x,y:(x-x)*(y-y) if x < y else x, lst))", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst:\n        ret = []\n        for i in lst:\n            if i == 0:\n                ret.append(1)\n            if i < lst[0]:\n                ret.append(i)\n            if i > lst[-1]:\n                ret.append(lst[i])\n        return ret\n\n    ret = []\n    for i in lst:\n        if i == 0:\n            ret.append(1)\n        if i < lst[0]:\n            ret.append(i)\n        if i > lst[-1]:\n            ret.append(lst[i])\n    return ret", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return sorted(lst, reverse=True)[:4]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) <= 1:\n        return lst\n\n    # Convert to a list of tuples\n    keys = [(min(x) for x in lst) for x in lst]\n\n    # Sort the keys.\n    keys.sort()\n    # Convert to list of integers\n    values = [max(x) for x in keys]\n\n    # Return the values in the reverse order.\n    values.reverse()\n\n    return values", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    max = 0\n    min = len(lst) - 1\n    i = min\n    while i > max:\n        if lst[i] < lst[max]:\n            max = lst[i]\n        else:\n            min = i\n    return [lst[max], lst[min], lst[min+1]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Maximum value\n    if len(lst) > 1:\n        arr = lst[1:]\n        max_val = max(arr)\n        for i in range(len(lst)):\n            if lst[i] < max_val:\n                arr.insert(0, lst[i])\n                max_val = lst[i]\n    # Minimum value\n    if len(lst) > 0:\n        arr = lst[:1]\n        min_val = min(arr)\n        for i in range(len(lst)):\n            if lst[i] > min_val:\n                arr.insert(0, lst[i])\n                min_val = lst[i]\n    return arr", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = list(lst)\n\n    i = 0\n    for item in lst:\n        if item > i:\n            i = item\n        if item < i:\n            return lst\n        if i == len(lst):\n            return lst[i:i+1]\n\n    return lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    new_list = [list(lst)]\n    for i in range(len(lst)):\n        new_list.append(lst[i])\n        new_list.sort(key=lambda x: x - i)\n    return new_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # In case you want to sort even number\n    if lst == []:\n        return lst\n\n    # Get the lowest value\n    lst_min = min(lst)\n    lst_max = max(lst)\n\n    # Find the middle integer\n    middle = lst_max + (lst_min - lst_max) / 2\n\n    # Get the next integers\n    lst_next = lst + [middle]\n\n    # Return the list in strange order\n    return lst_next", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return sorted(lst, key=lambda x: x - 1, reverse=True)[::-1]\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    max = lst.__class__().__module__ + \".\" + \"__dict__\"\n    min = max.split('.')[0]\n    max_idx = min.index(min)\n    min_idx = min.index(max)\n    return lst.__class__().__module__ + \".\" + \"__dict__\" + \"[\" + min_idx + \", \" + max_idx + \"]\"", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    while len(lst) > 0:\n        min = lst.pop()\n        max = lst.pop()\n        if min > max:\n            lst.append(max)\n            lst.append(max)\n        elif min < max:\n            lst.append(min)\n            lst.append(min)\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    idx = 0\n    while idx < len(lst):\n        if lst[idx] > lst[idx + 1]:\n            idx = idx + 1\n        elif lst[idx] == lst[idx + 1]:\n            idx = idx + 1\n        elif lst[idx] > lst[idx] + 1:\n            idx = idx + 1\n        elif lst[idx] == lst[idx] + 1:\n            idx = idx + 1\n        elif lst[idx] > lst[idx] + 1:\n            idx = idx + 1\n    return lst[idx]\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda x: x[0])\n    lst = lst[::-1]\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return sorted(lst, key=lambda item: item[0])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = list(lst)\n    sorted = [int(c) for c in lst]\n    for i in sorted[:-1]:\n        i = int(i) + 1\n        if i not in sorted[:-1]:\n            sorted.append(i)\n    for i in sorted[-1] + 1:\n        i = int(i) - 1\n        if i not in sorted[:-1]:\n            sorted.append(i)\n    for i in sorted[:-1]:\n        i = int(i) - 1\n        if i not in sorted[:-1]:\n            sorted.append(i)\n    return sorted", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    if len(lst) == 1:\n        return lst[0]\n    min = 0\n    max = len(lst)\n    for i in range(min, max, 1):\n        if lst[i] < lst[i - 1]:\n            min = i\n        elif lst[i] > lst[i - 1]:\n            max = i\n    return [lst[i] for i in range(min, max + 1)]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return sorted(lst, key=lambda x: int(x) - 1, reverse=True)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    global num\n    num = 0\n    min = 1\n    max = lst.count(0) - 1\n    while num < max:\n        tmp = lst[num]\n        lst[num] = lst[num].replace(0, 1)\n        lst[num] = lst[num].replace(1, 0)\n        lst[num] = lst[num].replace(2, 0)\n        lst[num] = lst[num].replace(3, 0)\n        lst[num] = tmp\n        num += 1\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # dummy list, just for testing\n    dummy = []\n    for i in range(len(lst)):\n        dummy.append(lst[i])\n\n    # test for strange sorting of empty list\n    if len(dummy) == 0:\n        return dummy\n    return strange_sort_list(dummy)\n\n    # test for strange sorting of a list\n    if len(dummy) > 1:\n        return strange_sort_list(dummy[1:])\n\n    # test for strange sorting of a list with invalid elements\n    if len(dummy) == 0:\n        return dummy\n    return strange_sort_list(dummy[:-1])\n\n    # test for strange sorting of a list with invalid elements\n    if len(dummy) > 1:\n        return strange_sort_list(dummy[-1:])\n\n    # test for strange sorting of a list with invalid elements\n    if len(dummy) == 0:\n        return dummy\n    return strange_sort_list(dummy[:-1])\n\n    # test for strange sorting of a list with invalid elements\n    if len(dummy) > 1:\n        return strange_sort_list(dummy[1:])\n\n    # test for strange sorting of a list with invalid elements\n    if len(dummy) == 0:\n        return dummy\n    return strange_sort_list(dummy[:-1])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def frontier(i):\n        return i - 1\n    def backier(i):\n        return i + 1\n    def backier_sort(lst):\n        '''\n        Given list of integers, return list in backier order.\n        '''\n        return [i for i in lst]\n    def frontier_sort(lst):\n        '''\n        Given list of integers, return list in frontier order.\n        '''\n        return [lst[i] for i in lst]\n\n    return frontier_sort(lst)\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    while True:\n        smallest = lst.pop()\n        largest = lst.pop()\n        largest_index = 0\n        smallest_index = 0\n        index = largest_index\n        while index <= smallest_index:\n            index += 1\n            if index > largest_index:\n                largest_index = index\n            if index < smallest_index:\n                smallest_index = index\n        if index!= largest_index:\n            tmp = lst.pop()\n            tmp_index = smallest_index\n            largest_index = index\n            smallest_index = tmp_index\n            lst.insert(largest_index, tmp)\n            lst.insert(smallest_index, smallest)\n            return lst.reverse()\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def strange_sorting_iter(list):\n        '''\n        Given a list of integers, return list of integers in strange order.\n        Example:\n        strange_sorting_iter([1, 2, 3, 4]) == [1, 3, 2, 4]\n        strange_sorting_iter([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sorting_iter([]) == []\n        '''\n        while True:\n            minimum = 0\n            maximum = 0\n            for i in list:\n                if i < minimum:\n                    minimum = i\n                elif i > maximum:\n                    maximum = i\n            if minimum == maximum:\n                return list[minimum]\n            else:\n                for i in list:\n                    if i < minimum:\n                        return list[minimum]\n                    elif i > maximum:\n                        return list[maximum]\n                    else:\n                        return list[i]\n\ns = strange_sort_list([1, 2, 3, 4])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    #note:\n    #if lst is not a list, return list\n    if isinstance(lst, (list,tuple)):\n        return lst\n    lst = [lst]\n    sorted_lst = []\n    def randomize():\n        '''\n        When you use randomize(), the value will be changed to the random()\n        value, it is a very good way to get random numbers, but should\n        not be used as the default method.\n        '''\n        rand = random.random()\n        while rand <= lst[-1] - lst[0]:\n            lst.append(lst[0])\n            sorted_lst.append(lst[-1])\n            rand = random.random()\n        return sorted_lst\n\n    rand = randomize()\n    for element in lst:\n        for i in range(len(sorted_lst)):\n            if rand < sorted_lst[i]:\n                sorted_lst[i] = rand\n        sorted_lst.append(lst)\n    return sorted_lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def _make_sorted(lst):\n        '''\n        Given list of integers, return list of integers in order\n        where it starts from minimum value, then maximum of the\n        remaining integers, then minimum and so on.\n        '''\n        ordered = []\n        for i in lst:\n            if i < ordered[i-1]:\n                ordered.append(i-1)\n            elif i > ordered[i-1]:\n                ordered.append(i-1)\n            else:\n                ordered.append(i)\n        return sorted(ordered, key=lambda x: x)\n\n    _make_sorted(lst)\n    return [int(i) for i in lst]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if len(lst) == 0:\n        return lst\n\n    lst = sorted(lst, key=lambda k: -k)[0]\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # reverse the indices first, then the values, then the indices\n    lst = reversed(lst)\n    def reindex(l):\n        return [l[i] for i in range(len(l))]\n    def reindex_and_sort(l):\n        lst = l\n        new_l = []\n        while len(lst) > 0:\n            new_l.append(reindex(lst))\n            lst = reindex_and_sort(lst)\n            new_l.append(reindex(lst))\n        return new_l\n    # return a list of indices that are less than the minimum\n    return sorted([ i for i in lst if i < lst.min() ])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    reverse = False\n    min = lst[0]\n    max = min\n    for i in range(1,len(lst)):\n        if (lst[i] >= min and lst[i] < max):\n            reverse = True\n            min = lst[i]\n            max = lst[i]\n    if reverse:\n        return [max]\n    return [max, min]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return sorted(lst, key=lambda x: x[0] if x else x[1])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    l = []\n    for i in lst:\n        l.append(i)\n    return sorted(l)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return sorted(lst, key=lambda x: x - 1, reverse=True)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    for i in lst:\n        if i < 0:\n            i += 1\n        if i > lst.__len__():\n            i -= 1\n        lst.remove(i)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def swap(i,j):\n        '''\n        Swap the elements, i and j.\n        '''\n        i = j - 1\n        j = i + 1\n    l = [ i for i in lst if i!= 0 ]\n    r = [ i for i in lst if i > 0 ]\n    return tuple(swap(i, j) for i, j in zip(l, r))", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # round to nearest integer\n    for i in lst:\n        lst.append(lst[i])\n    # reverse for efficiency\n    for i in reversed(lst):\n        lst.append(lst[i])\n    # sort\n    lst = [int(i) for i in lst]\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst:\n        return [int(i) for i in lst if i!= 0]\n    return []", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return [ord(x) for x in lst]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # I have used this to test the strange_sort_list function\n    # by hand. My goal is to be able to run it\n    # on my own data.\n    #\n    # The return value is the list in strange order\n    #\n\n    lst = [int(i) for i in lst]\n    lst = sorted(lst, reverse=True)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    min = lst[0]\n    max = lst[-1]\n    for i in range(len(lst) - 1):\n        tmp = lst[i]\n        lst[i] = lst[i + 1]\n        lst[i + 1] = tmp\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    l = []\n    i = 0\n    j = 0\n    while i < len(lst):\n        if lst[i] < lst[j]:\n            i = j\n            j = i\n        elif lst[i] == lst[j]:\n            l.append(i)\n        else:\n            j = i\n            i = 0\n    return l", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    new = []\n    for i in lst:\n        if i < 0:\n            new.append(i)\n        else:\n            new.append(i*-2)\n    return new", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst2 = []\n    # Define min and max\n    min = lst[0]\n    max = lst[-1]\n    # Move all integers from minimum to maximum\n    for i in range(0, len(lst)):\n        if min > lst[i]:\n            min = lst[i]\n    # Now move all integers from minimum to maximum\n    for i in range(0, len(lst), 1):\n        if min > lst[i]:\n            lst[i] = min\n    # Move all integers from maximum to minimum\n    for i in range(0, len(lst), -1):\n        if max < lst[i]:\n            lst[i] = max\n    # Now move all integers from maximum to minimum\n    for i in range(0, len(lst), -1):\n        if max < lst[i]:\n            lst[i] = max\n    # Now move all integers from minimum to maximum\n    for i in range(0, len(lst), -1):\n        if min > lst[i]:\n            lst[i] = min\n    # Return result\n    return lst2", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    s = []\n    for i in lst:\n        s.append(i - s.pop())\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] < s[j]:\n                s.insert(i, s[j])\n                s.insert(i + 1, s[j + 1])\n    return s", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Sort list by the first element\n    lst = sorted(lst, key=lambda x: x.__class__.__name__, reverse=True)\n\n    # Get the smallest element\n    smin = lst[0]\n    # Get the smallest index of that element\n    sindex = lst[0].index(smin)\n\n    # Get the largest element\n    lmin = lst[-1]\n    # Get the index of that element\n    lindex = lst[-1].index(lmin)\n\n    # Get the smallest index of the new list\n    sindex = lindex - smin.index(lmin)\n    # Get the largest index of the new list\n    lindex = lindex + lmin.index(lmin)\n\n    return [lst[i] for i in sindex:\n            lst[i+1] for i in lindex:\n            lst[i]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # temp variables\n    # must be sorted\n    i = 0\n    j = 0\n    while i < len(lst):\n        if lst[i] < lst[j]:\n            i = j\n        else:\n            j = i\n        i += 1\n    return lst[::-1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    k = len(lst)\n    i = 1\n    while i < k:\n        j = i + 1\n        if lst[j] < lst[j]:\n            j = i\n        if lst[j] > lst[j + 1:\n            i = j\n        if lst[i] == lst[j]:\n            i = j\n        if lst[i] < lst[j + 1:\n            j = i + 1\n        if lst[i] > lst[j + 1:\n            i = j\n        if lst[i] == lst[j]:\n            i = j + 1\n        if lst[i] < lst[j + 1:\n            j = i + 1\n        if lst[i] > lst[j + 1:\n            i = j\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def search(a, b):\n        if a < b:\n            return a\n        elif a > b:\n            return b\n        else:\n            return 0\n    return sorted(lst, key=lambda x: x-search(x, 0))[0]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    min = lst[0]\n    max = lst[1]\n    for i in range(len(lst)):\n        if lst[i] < min:\n            min = lst[i]\n        if lst[i] > max:\n            max = lst[i]\n    return [max, min]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) > 1:\n        return [list(lst[1:])]\n    min_index = 0\n    max_index = len(lst)\n    while min_index < max_index:\n        min_index = max_index - 1\n        max_index = min_index + 1\n    max_index = max_index - 1\n    while max_index < len(lst):\n        if lst[max_index] < lst[min_index]:\n            min_index = max_index + 1\n        elif lst[max_index] > lst[min_index]:\n            max_index = min_index - 1\n    return [lst[min_index], lst[max_index]]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    tmp = []\n    min = lst[0]\n    for i in range(1, len(lst)):\n        tmp.append(lst[i]-min)\n    tmp.sort(key=lambda x: x-min)\n    return tmp", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # we use python's list comprehension to get the weird sorted list\n    return [item for item in lst if item > 0]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = list(lst)\n    sortedlst = []\n    count = 0\n    for i in lst:\n        count += 1\n        if count == 2:\n            # print \"list: %s\" % list(lst)\n            if lst[i] < lst[i + 1:] :\n                sortedlst.append(lst[i:])\n                sortedlst.append(lst[i + 1:])\n            else:\n                sortedlst.append(lst[i + 1:])\n                sortedlst.append(lst[i])\n        else:\n            sortedlst.append(lst[i])\n            sortedlst.append(lst[i + 1:])\n    return sortedlst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # sort all integers\n    lst.sort()\n    lst.reverse()\n\n    # remove smallest and largest\n    lst = lst[:-1] + lst[1:]\n\n    # iterate over remaining integers\n    for index in range(0, len(lst), 2):\n        lst.remove(lst.index(lst.pop(0) + 1) - 1)\n        lst.remove(lst.index(lst.pop(0) - 1) + 1)\n\n    # return list\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    i = 0\n    while i < len(lst):\n        if i in lst[:-1]:\n            lst[i], lst[i+1], lst[i+2], lst[i+3], lst[i+4], lst[i+5] = lst[i+5], lst[i+4], lst[i+3], lst[i+2], lst[i+1]\n        else:\n            lst[i], lst[i+1] = lst[i+1], lst[i+1]\n            lst[i+2], lst[i+3], lst[i+4] = lst[i+4], lst[i+3], lst[i+2]\n            lst[i+5], lst[i+4] = lst[i+5], lst[i+4]\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    max = max(lst)\n    min = min(lst)\n    max = max(min)\n    min = min(max)\n    tmp = max - min\n    if tmp == 0:\n        return []\n    tmp = min + tmp\n    if tmp == 0:\n        return []\n    if tmp < max:\n        tmp = min\n        if tmp > max:\n            tmp = max\n    if tmp > min:\n        tmp = max\n        if tmp < min:\n            tmp = min\n    return [tmp]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted_list = []\n    i = 0\n    while i < len(lst):\n        if lst[i] < lst[i + 1]:\n            i += 1\n        else:\n            sorted_list.append(lst[i + 1])\n            i += 1\n    return sorted_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def weird_sort(lst):\n        if len(lst) == 1:\n            return lst\n        i, j = 0, len(lst) - 1\n        while i < j:\n            if lst[i] < lst[j]:\n                i, j = i + 1, j\n            else:\n                return lst\n                #break\n        return lst[i:]\n    for i in weird_sort(lst):\n        if len(i) > 1:\n            lst.insert(0, i[0])\n    return weird_sort(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    idx = 1\n    if len(lst) == 1:\n        idx = 0\n    if len(lst) == 0:\n        return lst\n    while idx < len(lst)-1:\n        tmp = lst[idx]\n        lst[idx] = lst[idx+1]\n        lst[idx+1] = tmp\n        idx += 2\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return lst\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst\n    return list(range(0, len(lst)-1))\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = [x for x in lst]\n    lst.sort()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # 1. List of integers\n    i = 0\n    while i < len(lst) and lst[i] == lst[i + 1]:\n        i += 1\n    return lst[i:len(lst) - 1]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    tmp = []\n    for i in lst:\n        if i < 1 or i > len(lst) - 1:\n            tmp.append(i)\n        else:\n            tmp.append(lst[i - 1])\n            tmp.append(lst[i])\n            tmp.append(lst[i + 1])\n\n    return tmp", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # we could use inbuilt string.join() here\n    return [str(i) for i in lst]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # Range from minimum to maximum\n    min, max = lst\n\n    # Start at smallest, and then decrease\n    for i in range(0, len(lst), 2):\n        if lst[i] < lst[i + 1]:\n            max = max + 1\n            lst[i] = lst[i + 1]\n\n    # Find the value at which we are in the middle of the list\n    middle = min + (max - min) / 2\n\n    # Start with a dummy value, and decrease by the number of integers in the list\n    dummy = lst.pop(middle)\n\n    # Keep going until we reach the beginning of the list\n    while dummy < lst[middle]:\n        middle = middle - 1\n        dummy = lst.pop(middle)\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def reverse(lst):\n        '''\n        Reverse the list.\n        '''\n        if len(lst):\n            lst = [-lst[0]]\n            if len(lst) > 1:\n                lst = lst[1:]\n        return lst\n    \n    def insert(lst, index, val):\n        '''\n        Insert the value at the given index.\n        '''\n        if index > len(lst):\n            index = len(lst) - 1\n        lst[index] = val\n    \n    def pick(lst, index, min):\n        '''\n        Pick the next value which is greater than or equal to the given\n        minimum value.\n        '''\n        if index < len(lst):\n            return lst[index + 1]\n        return min\n    \n    def choose(lst, index, min):\n        '''\n        Pick the next value which is less than the given minimum value.\n        '''\n        if index >= len(lst):\n            return lst[index - 1]\n        return min\n    \n    def remove(lst, index, val):\n        '''\n        Remove the value at the given index.\n        '''\n        if index < len(lst):\n            lst[index] = lst[index - 1]\n    \n    return reverse(lst), insert(lst, 0, pick(lst, 1, pick(lst, 1, pick(lst,", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    first_val = None\n    n = len(lst)\n    i = 0\n    while i < n:\n        j = i + 1\n        while j <= i:\n            if lst[j] == lst[j + 1:]:\n                first_val = j\n                break\n            j += 1\n        if j == i:\n            break\n        i += 1\n    while i > 0:\n        j = i - 1\n        while j >= 0:\n            if lst[j] == lst[j - 1:]:\n                first_val = j\n                break\n            j -= 1\n        if j == 0:\n            break\n        i -= 1\n    return [first_val] + list(lst[first_val:i]) + list(lst[i:n])", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    max = 0\n    min = 1\n    for i in lst:\n        if max < i:\n            max = i\n        if min > i:\n            min = i\n\n    return [min, min, max, max]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # make sure we have an empty list first\n    if lst == []:\n        return\n    # make sure no integer is greater than any of the other integers\n    for i, v in enumerate(lst):\n        if v > lst[i - 1:]:\n            return\n    # make sure no integer is smaller than any of the other integers\n    for i, v in enumerate(lst):\n        if v < lst[i - 1:]:\n            return\n    # sort the list by decreasing order\n    lst.sort()\n    # sort the list again, this time using sorted method\n    lst.sort(key=lambda x: x)\n    # return sorted list\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if lst is None:\n        return lst\n\n    if len(lst) == 1:\n        return lst[0]\n    n = len(lst)\n    if n < 1:\n        return lst\n    if lst[0] < lst[n - 1]:\n        return lst\n    order = 1\n    for i in range(n):\n        if lst[i] < lst[order]:\n            order = i\n    return lst[order:]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # to be honest, I am not sure if I want to use a list here.\n    # but I am going to just make sure it is being sorted.\n    # Because I want to have a unique list of integers\n    # the list is sorted in ascending order.\n    lst = sorted(lst, key=lambda x: x, reverse=True)\n\n    # Now start with the minimum of each list.\n    lmin = max(lst)\n    for i, m in enumerate(lst):\n        lmin = min(m, lmin)\n\n    # Now do the same thing for the other integers.\n    lmax = min(lst)\n    for i, n in enumerate(lst):\n        lmax = max(n, lmax)\n\n    # Now do the same thing for the remaining integers.\n    lrange = [(lmin + 1) % lmax,\n                 (lmax - 1) % lmax,\n                 (lmin - 1) % lmax,\n                 (lmax + 1) % lmax]\n\n    for i, n in enumerate(lst):\n        if n in lrange:\n            lst.remove(n)\n\n    # Now make the list sorted in the desired order.\n    lst = sorted(lst, key=lambda x: x, reverse=True)\n\n    return lst\n\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = [value for value in lst if value]\n    reverse = True\n    if lst:\n        for i, j in lst:\n            if i < j:\n                reverse = False\n                break\n        if reverse:\n            lst.reverse()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    max = min = None\n    for i in lst:\n        if max is None or max < i:\n            max = i\n    if max is None:\n        return lst\n    else:\n        return sorted(lst, key=lambda x: x - max)[:-1]\n\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Calculate the minimum, maximum, and total value.\n    min = lst[0]\n    max = min + lst[-1]\n    total = max - min\n    # Create a new list of integers. Each element is the value\n    # from 0 to total - 1.\n    lst = [min, max, total]\n    # Sort the list.\n    for i in range(0, len(lst)):\n        if lst[i] > lst[i - 1] or lst[i] < lst[i + 1]:\n            lst[i] = lst[i - 1]\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # generate random integers\n    lst = list(range(len(lst)))\n    i = 0\n    j = 0\n    while i < len(lst):\n        lst.insert(i, random.randint(lst[i]))\n        i += 1\n\n    while j < len(lst):\n        lst.insert(i, random.randint(lst[i]))\n        i += 1\n\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    for i in range(len(lst)):\n        if i > 0:\n            result.append(lst[i])\n    result.sort()\n    return result", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    #start with the smallest value\n    min_value = lst[0]\n    #go through remaining values and sort them\n    while min_value!= lst[-1]:\n        min_value = lst[-1][-1]\n        #add the reverse of the value to the list\n        lst.append(lst[-1])\n        #sort the list\n        strange_sort_list(lst)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) <= 1:\n        return lst\n    lst.sort()\n    lst.reverse()\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    new_list = []\n    prev_min = min(lst)\n    for i in range(len(lst)):\n        new_list.append(prev_min)\n        prev_min = min(lst[i])\n    new_list.append(prev_min)\n    return new_list", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def head(lst):\n        if len(lst) == 1:\n            return lst[0]\n        if len(lst) > 1:\n            min = max(lst)\n            for i in range(0, len(lst), 2):\n                if lst[i] < min and lst[i]!= min:\n                    min = lst[i]\n            return head(lst[2:]) + min\n    for i in range(0, len(lst)):\n        lst[i] = head(lst[i]) if lst[i] else i\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = list(lst)\n    idx = 0\n    while idx < len(lst):\n        if lst[idx] > lst[idx + 1]:\n            idx = idx + 1\n    lst.insert(idx, 0)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return sorted(lst, key=lambda x: int(x)-x)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return sorted(lst, key=lambda x: x - 1, reverse=True)", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    for i in range(len(lst)):\n        if lst[i] < lst[i+1]:\n            return [lst[i]]\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    #arr=range(5)\n    #for i in arr:\n    #    print('%s %d: %d' % (i, i, lst))\n    #lst=[]\n    #for i in range(0,len(arr)):\n    #    if lst: lst.append(i)\n    #    else: lst.append(i)\n    #lst.sort()\n    #return lst\n    #print(lst)\n    #return range(len(lst)-1) + lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    first = len(lst) - 1\n    last = first + 1\n    while first < last:\n        mid = (first + last) / 2\n        if mid in lst:\n            lst.remove(mid)\n        else:\n            first = mid + 1\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return [ lst.index(i)+1 for i in lst if lst[i] >= lst[i+1] ]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return [\n        lst[i] - lst[i - 1]\n        for i in range(len(lst))\n    ]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Here the list is sorted from lowest to highest\n    lst = sorted(lst, key=lambda x: x - 1)\n    # Here is a list of integers that are all equal\n    lst = [x for x in lst if x == x]\n    # Here is a list of integers that are all different\n    lst = [x for x in lst if x!= x]\n    # Return the list in weird order\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    current = 0\n    total = len(lst)\n    while total > 0:\n        current += 1\n        if current % 2 == 0:\n            new_last = current\n            next_last = current + 1\n        else:\n            next_last = current - 1\n        lst.pop(current)\n        lst.append(next_last)\n        current = next_last\n    return lst\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # variable to store the first element of the list\n    # to sort\n    i = 0\n\n    # to move up or down the list\n    while lst[i] > lst[i + 1]:\n        i += 1\n\n    # to move left or right the list\n    while lst[i] < lst[i + 1]:\n        i -= 1\n\n    # to move to the left or right the list\n    while lst[i] > lst[i + 1]:\n        i += 1\n\n    # to move right or left the list\n    while lst[i] < lst[i + 1]:\n        i -= 1\n\n    # to move up or down the list\n    while lst[i] > lst[i + 1]:\n        i += 1\n\n    # to move up or down the list\n    while lst[i] < lst[i + 1]:\n        i -= 1\n\n    # return the sorted list\n    return lst[i:i+1]\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    if len(lst) < 2:\n        return [lst[0]] + lst[1:]\n    if lst[0] < lst[1]:\n        return lst\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return lst[i-1]\n    return lst[1:]\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst, key=lambda i:i - 1)\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    def reverse_sort_list(lst):\n        '''\n        Given list of integers, reverse the order.\n        '''\n        for i in range(len(lst)):\n            if lst[i] > lst[i-1]:\n                lst[i] = lst[i-1]\n        return lst\n\n    lst = [1,2,3,4,5]\n    lst2 = reversed(lst)\n    lst3 = reversed(lst)\n    print(lst)\n    print(lst2)\n    print(lst3)\n\n    print(lst)\n    print(lst2)\n    print(lst3)\n    return lst2, lst3\n</s>", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst is None: return []\n    total = 0\n    for i in lst:\n        if i is not None: total += i\n        if i < 0:\n            lst.reverse()\n            break\n    for i in lst:\n        if i < 0:\n            lst.reverse()\n            break\n        lst.append(i)\n        if i == total:\n            lst.reverse()\n            break\n    return lst", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = [int(x) for x in lst]\n    if len(lst) < 2:\n        return lst\n    # This is done to get a consistent output, when we are called\n    # like strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3].\n    # This list is now sorted, and we are going to move back to\n    # the minimum value.\n    minimum = min(lst)\n    maximum = max(lst)\n    for i in range(len(lst) - 1):\n        if lst[i] < minimum:\n            minimum = lst[i]\n        if lst[i] > maximum:\n            maximum = lst[i]\n    return lst[minimum:maximum]", "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    total = 0\n    for i in lst:\n        total += i\n    sorted = []\n    for i in range(total):\n        if i > total:\n            sorted.append(i)\n        else:\n            sorted.append(-i)\n    return sorted\n</s>"]]