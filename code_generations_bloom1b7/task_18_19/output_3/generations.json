[["def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # characters that are allowed in a substring\n    allowed = [char for char in substring if char not in string]\n    # chars that are not allowed in a substring\n    forbidden = [char for char in substring if char in string]\n    # if string contains no characters that are allowed in a substring\n    # then return how many times a substring is found in the original string\n    # otherwise return 1\n    return sum(1 for c in string if not allowed and c not in forbidden)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    while True:\n        first = substring.find(string)\n        if first == -1:\n            break\n        second = substring.find(string, first + 1)\n        if second == -1:\n            return 0\n        if second > first:\n            return how_many_times(string, substring[:second])\n        else:\n            return how_many_times(string, substring[second+1:])\n    raise ValueError('Invalid input string:' + string)\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if substring == '':\n        return 0\n    if substring == 'aa' and string.count(string) < len(string) - 1:\n        return 0\n    for i in range(len(string)):\n        if string[i] in substring:\n            return i + 1\n    return len(string)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # We expect a substring to appear at least once.\n    return 0 if substring == '' else int(1 if substring in string else 0) // len(string) if substring in string else len(string) - 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(map(string.find, string, substring))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string == '':\n        return 0\n    else:\n        if substring.startswith(string):\n            return 1\n        else:\n            return 2", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    match_count = 0\n    for i, character in enumerate(string):\n        if substring in character:\n            match_count += 1\n        else:\n            break\n    return match_count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string.translate(string, substring))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    val, i = string.partition(substring)\n    count = 0\n    for j in range(len(val)):\n        if val[j] == substring:\n            count += 1\n        else:\n            if count % 10 == 0:\n                print(\"overlap count: \", count)\n    return count\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    substring_length = len(substring)\n    for i in range(0, substring_length):\n        if substring[i] in string:\n            return how_many_times(string, substring[i:i + 1])\n    return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string == '':\n        return 0\n    if substring == '':\n        return 0\n    # Just a simple case, the substring is an empty string\n    return len(string) - len(substring)\n\n    # Overlap count\n    # This is a more complicated case than the single case above\n    if substring == string[-1]:\n        return 1\n\n    # The substring starts at the beginning of the string\n    return (string[-1:len(string) - 1].count(substring) + len(string) - len(substring)) // 2\n\n    # The substring starts at the end of the string\n    return (string[len(string) - 1:len(string)].count(substring) + len(string) - len(substring)) // 2", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string:\n        return 0\n    if not substring:\n        return 0\n    return len(string.split(substring)[:-1]) / len(string.split(substring)[1:])", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    words = string.split()\n    # Find the number of times each word occurs\n    # (We don't count'' as a word)\n    # (This is a brute force method, but we can use a for loop instead)\n    total_count = 0\n    for word in words:\n        total_count += 1\n    # Count the number of times each word occurs\n    # in substring (or one of the substrings)\n    # (Also, we don't count'' as a word)\n    # (This is a brute force method, but we can use a for loop instead)\n    for word in substring:\n        if word not in words:\n            total_count += 1\n    return total_count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string) - len(substring) - len(string[substring:]) // 2\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if substring == '':\n        return 0\n    if substring == 'aa':\n        return 2\n    if substring in string:\n        return 1\n    return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    prefix = substring.lower() if substring.lower() else ''\n    suffix = ''\n    if prefix:\n        prefix = prefix.lower()\n        suffix = prefix + substring.lower()\n    if suffix:\n        suffix = suffix.lower()\n        prefix = prefix.lower()\n        suffix = suffix + substring.lower()\n    num = 0\n    for i in range(0, len(string), substring.ljust(3)):\n        if prefix in string:\n            num += 1\n            if suffix == string:\n                break\n    return num\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string.split(substring))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # Count occurrences of substring in the original string\n    # Overlaps are only counted once.\n    # Example 1:\n    #   1\n    #   2\n    #   3\n    #   4\n    # Example 2:\n    #   1\n    #   3\n    #   2\n    #   4\n    # >>> how_many_times('', 'a')\n    0\n    # >>> how_many_times('aaa', 'a')\n    3\n    # >>> how_many_times('aaaa', 'aa')\n    3\n    # >>> how_many_times('aaaa', 'aa')\n    2\n    # >>> how_many_times('aaaa', 'aa')\n    1\n    # >>> how_many_times('aaa', 'a')\n    1\n    # >>> how_many_times('aaaa', 'a')\n    0\n    # >>> how_many_times('aaaa', 'a')\n    0\n    # >>> how_many_times('aaaa', 'a')\n    1\n    # >>> how_many_times('aaa', 'a')\n    0\n    # >>> how_many_times('aaaa', 'a')\n    1\n    # >>> how_many_times('aaaa', 'a')\n    1\n    # >>> how_many_times('aaa', 'a'", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return int(re.findall('(?<=([^a-zA-Z0-9\\-_]+)', substring, re.MULTILINE)[0]) or 0) + len(string) * re.findall('(?<=([^a-zA-Z0-9\\-_]+)', substring, re.MULTILINE)[0]) or 0)\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if substring.startswith(string):\n        return substring.count(string)\n    else:\n        return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    for s in string:\n        if s.startswith(substring):\n            return len(s)\n    return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    assert isinstance(string, str)\n    assert isinstance(substring, str)\n    return int(string.count(substring) * substring.count(string)) + 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    string = string.lower()\n    if string == '':\n        return 0\n    if substring == '':\n        return len(string) - len(string.lower())\n    if string.find(substring) == -1:\n        return len(string) - len(string.lower())\n    return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if len(string) > len(substring):\n        return 0\n    elif string[:len(substring)] == substring:\n        return 1\n    else:\n        return 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # find the number of substrings which are identical to substring\n    # first, count the number of non-overlapping substrings\n    all_identical: List[str] = []\n    for char in string:\n        for char in char:\n            if char == substring:\n                all_identical.append(char)\n        else:\n            all_identical.append(char)\n\n    # calculate the overlap between all substrings\n    # for each substring:\n    #     count overlaping cases\n    #     found in string\n    #     found in original string\n    #     found in substring\n    #     found in original string\n    #     found in substring\n    #     found in original string\n    found_overlap = 0\n    for char in all_identical:\n        if char in substring:\n            found_overlap += 1\n        elif char in string:\n            found_overlap += 1\n        elif char in substring:\n            found_overlap += 1\n        elif char in string:\n            found_overlap += 1\n        elif char in substring:\n            found_overlap += 1\n        elif char in string:\n            found_overlap += 1\n        elif char in substring:\n            found_overlap += 1\n        elif char in string:\n            found_overlap += 1\n\n    return found_overlap", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return int(len(string) * len(substring))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string.find(substring, 0)) - len(string.find(substring, len(substring)))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    if string.count(substring) == len(string):\n        count += 1\n    else:\n        count += substring.count(string) - len(string)\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # split strings on substring\n    s = string.split(substring)\n    # count how many times the substring is in the string\n    count = 0\n    for i in range(len(s)):\n        if s[i] == substring:\n            count += 1\n    # return how many times the substring occurs\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # start with the empty string\n    if substring == '':\n        return 0\n    # test the substring\n    if substring in string:\n        return 1\n    # test each letter of the substring\n    for letter in substring.lower():\n        if letter in string:\n            return 1\n    return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if substring == '':\n        return 0\n    # check if the substring is a word in the original string\n    if not isinstance(string, str):\n        return 0\n    if substring in string:\n        return len(string[substring])\n    # substring is a string\n    return len(string.decode('utf-8','replace')) - 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if substring not in string:\n        return 0\n\n    return sum(1 for x in string if x.startswith(substring))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if substring in string:\n        return 1\n    for i in range(0, len(string), 1):\n        if string[i] == substring:\n            return i + 1\n    return len(string)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    i = 0\n    if string is not None:\n        while i < len(string):\n            start, end = string.find(substring, i)\n            if start < i < end:\n                count += 1\n            else:\n                break\n        else:\n            return count\n    else:\n        return 0\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    def reverse(x: str) -> str:\n        \"\"\" Convert a string to lowercase. \"\"\"\n        return x.lower().strip()\n\n    def find_match(str1: str, str2: str) -> bool:\n        \"\"\" Find if a substring is found in string 1 and string 2. \"\"\"\n        return str1.find(str2) >= 0\n\n    def overlap(str1, str2) -> int:\n        \"\"\" Overlap a substring in string 1 with a substring in string 2. \"\"\"\n        return len(str1) - len(str2) - len(str1.find(str2))\n\n    if len(string) <= 0:\n        return 0\n    for substring in string:\n        for start in range(1, len(substring), 2):\n            find_match(substring, substring[start:])\n            if find_match(substring, substring[start + 1:]):\n                return start\n        if find_match(substring, substring[-1:]):\n            return -1\n\n    return how_many_times(substring, string) - 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string:\n        return 0\n\n    return len(string.split(substring))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    from collections import defaultdict\n    def recurse(element: str, sub: str) -> int:\n        if element not in defaultdict(lambda: defaultdict(int)):\n            return 0\n        count = defaultdict(lambda: defaultdict(int))\n        for p in range(len(element) - 1):\n            count[element[p]].append(p + 1)\n        for i, v in enumerate(count[sub]):\n            for j in range(i):\n                if v!= v[j]:\n                    return v[j]\n        return count[sub][i]\n\n    count = recurse(substring, string)\n    if count:\n        return sum(count[sub] for sub in substring)\n    else:\n        return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if substring == '':\n        return 1\n    if substring == 'a':\n        return 1\n    if substring in string:\n        return 1\n    if substring not in string:\n        return 0\n    count = 0\n    for i in range(0, len(string), 2):\n        if substring in string:\n            count += 1\n    if count == 0:\n        return 1\n    return count\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string.split(substring)) - len(string.split(substring)[0])", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    substrings = [re.sub(r'\\w+', '_', substring) for substring in substrings]\n    if len(substrings)!= len(string):\n        return 0\n    overlap = 0\n    for i, substring in enumerate(substrings):\n        if substring in string:\n            # Check if we have only one occurence.\n            if i == len(string):\n                return overlap\n            elif string[i-len(string)]!= substring:\n                overlap += 1\n    return overlap", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len([(x, y) for x, y in string.split(substring)])</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # System calls in case there is only one substring in the string\n    i = 0\n    while i < len(string):\n        # Get substring of the given string\n        i += 1\n        # Get the length of the substring\n        substring_len = len(substring)\n        # If substring is not at the start of the string, then don't count it\n        if substring_len > 0:\n            if substring_len > i:\n                i += substring_len\n            else:\n                break\n        else:\n            break\n    return i", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string) - len(substring) if substring in string else 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    string_length = len(string)\n    return string_length - substring.find(substring) + 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string.replace(substring, '', 1))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    s = string\n    l = s.split(substring)\n    return len(l)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not substring:\n        return 0\n    else:\n        return len(string.split(substring)) - len(string.split(''))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    start = 0\n    end = len(string)\n    while start < end:\n        end = end - 1\n        if substring.startswith(string[start:end]):\n            start = end\n    return end - start", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if len(string) <= len(substring):\n        return 0\n    if string[substring.start()] in substring:\n        return 1\n    return len(string) - len(substring) - 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string.split(substring))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    split = substring.split('')\n    for i in range(len(split)):\n        if split[i] in string:\n            return i\n    return 0\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    case_count = 0\n    for i in range(0, len(string)):\n        for j in range(0, len(substring)):\n            if substring[j] == string:\n                case_count += 1\n    return case_count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    string = substring.lower()\n    if not string:\n        return 0\n    substring = string[:len(string) - 1]\n    for i in range(0, len(string)):\n        if substring == string:\n            return i\n    return len(string)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string:\n        return 0\n    for i, v in enumerate(string):\n        if v == substring:\n            return i\n    return 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    import re\n    def _recurse(string: str, substring: str) -> int:\n        if string.find(substring) == -1:\n            return 0\n        elif string[string.find(substring) + len(substring)] == substring:\n            return _recurse(string[string.find(substring) + len(substring):], substring)\n        else:\n            return _recurse(string[string.find(substring) + len(substring):len(substring) + len(substring)], substring)\n    string = ''\n    while string.find(substring) == -1:\n        string = string.lstrip(substring).lower()\n        _recurse(string, substring)\n    return len(string)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return int(len(string) / len(substring) * string.count(substring))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    assert len(string) == len(substring)\n    count = 0\n    for character in string:\n        if character == substring:\n            count += 1\n        else:\n            count += how_many_times(character, substring)\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return 0 if string == substring else 1 + (1 if substring == string else 0) * len(string) if substring == string else 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if len(string) <= substring:\n        return 0\n    # The substring is an internal substring of the original string. See\n    # http://stackoverflow.com/a/4020300/1467017\n    return sum(1 for i in range(len(string) - substring) if substring in string[i])\n\n    # The substring is the whole original string. See\n    # http://stackoverflow.com/a/4020300/1467017\n    return len(string) - substring", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # Find all possible substrings and replace the given substring\n    return len(re.findall('{}'.format(substring), string))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string.replace(substring, substring, '')) + len(substring.replace('', substring, ''))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if substring == '':\n        return 0\n    if substring[0] == aa:\n        return 1\n    else:\n        return how_many_times(string, substring[1:])", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if substring.isdigit():\n        return int(substring)\n    if substring.isalnum():\n        # regex_split handles this situation\n        substring = substring.replace('-', '_')\n        substring = substring.replace(' ', '_')\n        return int(re.search('\\d+', substring).group(0))\n    raise ValueError(\"String %s contains illegal substring %s\" % (string, substring))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return 0 if string == substring else len(string) - len(substring) # https://stackoverflow.com/a/18530165/3742302\n    #overlap = 0\n    #for c in string:\n    #    if substring == c:\n    #        overlap += 1\n    #return len(c) - len(substring) - overlap\n    #return len(c) - len(substring) # https://stackoverflow.com/a/18530165/3742302", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # Select string from array\n    raw_string = string.strip()\n    matches = raw_string.find(substring)\n    # Find how many times this string occurs in the original string\n    result = matches + 1\n    # Check if substring was found at the same position in original string\n    if result == len(string):\n        # Exact match\n        return result\n    # Calculate number of times substring occurs in the original string\n    # (If substring is not at the end of the original string, the result is 1)\n    # Multiple matches are counted in total number of times substring occurs in the original string\n    return result * len(raw_string)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    start = 0\n    for c in string:\n        if c == substring:\n            start = 1\n            continue\n        if c == substring[:start] or c in substring[start+1:]:\n            start = start + 1\n            continue\n        if start == len(string):\n            start = 0\n            continue\n    return start\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    string = string.strip()\n    substring = substring.strip()\n    count = 0\n    for x in range(0, len(string)):\n        if substring.startswith(string[x]):\n            count += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if substring.lower().startswith(string.lower()):\n        return len(substring) - len(string)\n    else:\n        return 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    match = re.match(r'(?<=%s)%s(?=%s)' % (substring, substring, substring), string)\n    if match is None:\n        return 1\n    else:\n        return match.group(1).count(substring) + match.group(2).count(substring)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if len(string) == 0:\n        return 0\n    if len(substring) == 0:\n        return len(string)\n    return int(re.findall(r'\\b({})\\b'.format(substring), string)[0]) * len(string)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    s = string\n    t = substring\n    s = s.replace(t, '')\n    while len(s) > 0:\n        if len(s) > t:\n            s = s[:t]\n        else:\n            break\n    return len(s)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    string_length = len(string)\n    for char in string:\n        if char == substring:\n            count += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if substring == '':\n        return 0\n    else:\n        count = 0\n        for substring_length in range(0, len(substring)):\n            if substring_length in string:\n                count += 1\n        return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if substring in string:\n        return 0\n    else:\n        return len(string) - len(substring) - 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    start = string.find(substring, start)\n    end = string.find(substring, end + 1)\n    return end - start + 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # We need to strip whitespace and convert all to lowercase\n    # Will assume an array of substrings.\n    substrings = map(str.lower, substring.split())\n    # Get how many times the substring occurs\n    how_many_times = len(string) / len(substrings)\n    return how_many_times", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return 0 if len(string) == 1 else int(len(string) - 1) * how_many(string, substring) / len(string)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return 0 if string == substring else 1 if len(string) > 0 else len(substring) - len(string) + 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # assume length of string is string.count(substring)\n    # use substring.count(substring) in place of string.count(substring)\n    if substring.count(string)!= 0:\n        return 1\n    return string.count(string) - substring.count(string)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if substring == '':\n        return 0\n    if substring =='':\n        return 0\n    return 1 if substring in string else 1 + how_many_times(string, substring) - 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    r = re.search(r'(?<=%s)(?=[A-Za-z]*)(%s)' % (substring, substring), string)\n    return r.end() - r.start() + 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return count(substring in string) / len(string)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    length = len(string)\n    i = 0\n    while i < length:\n        if string[i] in substring:\n            return i\n        i += 1\n    return length", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    index = len(string) - len(substring)\n    return index * substring.count('') - index * substring.count(substring)\n\n    # This is basically a case insensitive version of how_many_times.\n    # It finds the total number of occurrences of substrings in string, then counts the number of\n    # times substrings overlap each other. The formula is based on the algorithm in\n    # https://stackoverflow.com/questions/4848354/finding-overlapping-cases-in-string/874524#874524\n    def how_many_times_letters(string: str) -> int:\n        return len(string) * sum(x!= y for x, y in zip(string.split(''), string.split('')))\n\n    def how_many_times_patterns(string: str) -> int:\n        return len(string) * sum(x not in string for x in string.split(''))\n\n    def how_many_times_patterns_with_replacement(string: str) -> int:\n        return len(string) * sum(re.findall(x, string) for x in string.split(''))\n\n    def how_many_times_patterns_with_replacement_all_letters(string: str", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    times = 0\n    parts = string.split()\n    for part in parts:\n        if part == substring:\n            times += 1\n    return times", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string.split(substring)) - len(string.split('')) - len(string.split(' ')) - len(string.split(' '))\n    if substring!= '':\n        return how_many_times('', substring)\n\n    return 0\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # Why is it so hard to optimize the function?\n    strings = []\n    for substring in substring.split(' '):\n        strings.append(substring.count(string))\n    return len(strings) - 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return sum(i in substring for i in string)\n    if substring == '':\n        return 0\n    elif substring == 'a':\n        return 3\n    elif substring == 'aaaa':\n        return 3\n    else:\n        return how_many_times(substring, substring[1:])\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # https://stackoverflow.com/questions/2247742/how-to-make-a-junit-test-give-the-output-of-a-length-of-the-string-when-the-string-is-one-liner\n    # https://stackoverflow.com/questions/2907084/how-to-call-a-junit-test-recursively-with-a-junit-junit-test-recursively-with-a-junit\n\n    # return how many times substring can be found in string\n    return len(string.split(substring, 1)[0]) - len(string.split(substring, 1)[1])\n\n    def find(string: str, substring: str) -> int:\n        \"\"\" Find the index of substring in string \"\"\"\n        return string.find(substring)\n\n    def find_tail(string: str, substring: str) -> int:\n        \"\"\" Find the index of the end of substring in string \"\"\"\n        return string.rfind(substring)\n\n    def find_right(string: str, substring: str) -> int:\n        \"\"\" Find the index of substring to the right of substring in string \"\"\"\n        return string.rfind(substring, 1 + len(substring))\n\n    def find_left(string: str, substring: str) -> int:\n        \"\"\" Find the index of substring to the left of substring in string", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for substring_index in range(0, len(string), substring):\n        if substring_index == len(string) - 1:\n            break\n        if string[substring_index] in substring:\n            count += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError('Expected string')\n    if not isinstance(substring, str):\n        raise TypeError('Expected substring')\n    if substring.find(string) == -1:\n        return 0\n    if string.find(substring) == string.len():\n        return 3\n    return 3 + len(string) - len(substring)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string) - len(substring) - 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    how_many_times = 0\n    pattern = re.compile(substring, re.I)\n    for s in string.lower().split():\n        pattern.sub('', s)\n        if pattern.search(s):\n            how_many_times += 1\n    return how_many_times", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # find the substring and count the number of times it occurs in the original string\n    # we keep track of the number of times it appears and the overlaping substrings\n    match = re.search(r'%s' % substring, string)\n    if not match:\n        return 0\n    overlap = match.start() - string.start()\n    count = 0\n    # count the number of times the substring appears in the original string\n    for i in range(0, len(string), overlap):\n        # count the number of times the substring overlaps with the original substring\n        if match.group(1) == string[i]:\n            count += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for character in string:\n        if character in substring:\n            count += 1\n    return count\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    while len(string) > 0:\n        m = string.find(substring)\n        if m == -1:\n            return 0\n        else:\n            string = string[:m]\n            substring = string[m + len(substring):]\n            yield substring\n    yield string", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for c in string:\n        if c in substring:\n            count += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if len(string) < len(substring):\n        return 0\n    if substring in string:\n        return len(string[substring]) - len(substring)\n    else:\n        return 0\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string == '':\n        return 0\n    if substring == '':\n        return 0\n    if string.isdigit():\n        return int(string) * int(substring)\n    if substring.isdigit():\n        return int(string) * int(substring) + int(substring)\n    if substring.isalnum():\n        return int(string) * int(substring)\n    if len(string) >= len(substring):\n        return 1\n    for i in range(len(string)):\n        if string[i] == substring[i]:\n            return 1\n    return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return 0 if substring == '' else len(string.split(substring)) * len(string.split(substring))\n\n    # Return -1 if the substring is empty\n    return -1 if substring == '' else len(string.split(substring)) - len(string.split(''))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if substring.count('-') == 0:\n        return 1\n    if substring.count('/') == 0:\n        return 2\n    if substring.count('*') == 0:\n        return 3\n    return 4", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    for letter in string.lower():\n        if substring in letter:\n            return 1\n    return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string.startswith(substring):\n        return len(string) - len(substring)\n    else:\n        return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    n = 0\n    for pos in substring.finditer(string):\n        if pos is None:\n            continue\n        pos = pos.start()\n        for previous in substring.finditer(string[:pos]):\n            if previous.start() <= pos < previous.end():\n                n += 1\n    return n", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string.split(substring) for substring in string.split(substring) if substring not in string.split(substring)[0])</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    char_map = {\n        'a': 1,\n        'b': 2,\n        'c': 3,\n        'd': 4,\n        'e': 5,\n        'f': 6,\n        'g': 7,\n        'h': 8,\n        'I': 9,\n        'j': 10,\n        'k': 11,\n        'l': 12,\n       'm': 13,\n        'n': 14,\n        'o': 15,\n        'p': 16,\n        'q': 17,\n        'r': 18,\n       's': 19,\n        't': 20,\n       'u': 21,\n        'v': 22,\n        'w': 23,\n        'x': 24,\n        'y': 25,\n        'z': 26,\n    }\n\n    for character in string:\n        if char_map.get(character):\n            return len(character in substring)\n    return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    prefix_len = len(string)\n    result = 0\n    for char in string[prefix_len:]:\n        if substring.startswith(char):\n            result += 1\n    return result", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    matches = set()\n    for match in string.split(substring):\n        if match not in matches:\n            matches.add(match)\n    return len(matches)\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return int(re.search('([0-9]+)', substring).group(1))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # split by whitespace, substring is in last position\n    match = re.search(r'(?i){}'.format(substring), string)\n    if match is None:\n        raise ValueError('Unknown substring in string: {}'.format(string))\n    nmatches = len(match.group()) - 1\n    if nmatches == 0:\n        return 0\n    # calculate relative length of substring\n    length = len(match.group())\n\n    # find all occurrences\n    for i in range(nmatches):\n        m = re.search(r'{}'.format(substring), string)\n        if m is not None:\n            length += len(m.group())\n\n    return length", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # first round: character search\n    # take substring\n    _first_char = substring\n    for char in string:\n        if char in _first_char:\n            # we already have an index of 1 or 2\n            return 1\n        if char in _first_char:\n            # we have exactly 1 character, so we know we will have 2\n            return 2\n    return 3", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return 0 if string is None else len(string) - len(substring) // 2", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    substring = substring.lower()\n    count = 0\n    while count < len(string):\n        if string[count] == substring:\n            count += 1\n    return count\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    for char in string:\n        if char not in substring:\n            return 0\n    return len(string) - len(substring) - 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    text = string.strip()\n    index = text.index(substring)\n    if index == -1:\n        return 0\n    if text[index + len(substring):]!= string:\n        return 0\n    return 1\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # Reverse the string\n    reversed_string = ''.join(string.reverse())\n\n    # Only find a substring if it is part of the original string\n    found_string = ''.join(reversed_string.find(substring, 0, substring.index(\" \")))\n    if found_string!= '':\n        # Calculate how many times the substring appears\n        return len(found_string)\n\n    # Calculate how many times the substring overlaps the original substring\n    return 0 if found_string == '' else how_many_times(found_string, reversed_string)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    chars = []\n    for i, c in enumerate(string):\n        if c == substring:\n            chars.append(i)\n    return sum(chars)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    s = string.split(substring)\n    return len(s) if s else 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    i = 0\n    for c in string:\n        i += 1\n        if substring.startswith(c):\n            return i\n    return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string.find(substring) > 0:\n        # Only counts if there is overlap\n        return 1\n    else:\n        # Counts only if there is not overlap\n        return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # check if the string contains the substring, and if not, no need to go any further.\n    if not string:\n        return 0\n    # count the number of times the substring appears in the original string.\n    n = 0\n    # for each occurrence of the substring, increment n.\n    for x in range(0, len(string)):\n        # find the index of the substring within the original string.\n        try:\n            # the substring will appear at position x.\n            index = string.find(substring, x)\n        # check if the index is within the original string.\n        except ValueError:\n            # the substring won't appear at position x.\n            index = len(string) - x - 1\n        # if the substring appears at index x, add 1 to n.\n        if index!= x + 1:\n            n += 1\n    # return the number of times the substring appears in the original string.\n    return n", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    total = 0\n    for i in string.split(substring):\n        total += 1\n    return total\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return 0 if substring == '' else sum(1 for _ in range(1, len(string) if substring in string))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # Take substring from original string\n    input = string.replace(substring, '')\n    # Loop over the substrings in input\n    while input.count(substring) > 0:\n        # if number of times is not 0, output error message\n        if input.count(substring) > 0:\n            print(input)\n            raise Exception(\"Input contains substring {} more than once, \"\n                                  \"and overlaps with original string.\"\n                                .format(input[substring:]))\n    return input.count(substring)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string.lower().find(substring.lower()) for _ in range(1, len(string)+1))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    results = 0\n    i = 0\n    while i < len(string):\n        for character in substring:\n            if string[i] == character:\n                results += 1\n                break\n        i += 1\n    return results", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # print(string)\n    # print(substring)\n    # print(substring.count(string))\n    # print(substring.count(string.split(' ')))\n    # print(substring.count(''))\n    # print(substring.count(''.split(' ')))\n    # print(substring.count(''.split('')))\n    # print(substring.count(''.split('')))\n    # print(substring.count(''.split(' ')))\n    return substring.count(string)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(substring) - len(string) - 1 # ignore leading and trailing spaces\n    # since there are no cases where substring matches only the last character of the original string, we only count overlaps in the middle.\n    # in practice, it is always safe to ignore leading and trailing spaces.\n    return how_many_times(string, substring, substring.lstrip(' '), substring.rstrip(' '))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # Split the string into substrings.\n    substring_list = substring.split(\" \")\n\n    # Get how many substrings are in the original string.\n    substring_count = len(substring_list)\n\n    # Get how many substrings occur in the substrings.\n    substring_count_overlap = 0\n\n    # Get how many substrings occur in the original string.\n    substring_count_other = 0\n\n    # Iterate through the substrings and count how many times they occur in the original string.\n    for substring in substring_list:\n        if substring in string:\n            substring_count_other += 1\n        else:\n            substring_count_overlap += 1\n\n    # Total number of substrings in the string.\n    total_string_count = sum(substring_count_overlap for substring in substring_list)\n\n    # Total number of substrings in the original string.\n    total_string_count_overlap = sum(substring_count_overlap for substring in substring_list)\n\n    # If there is more than one occurrence of a substring, return how many times the substring occurs.\n    if total_string_count_overlap > 1:\n        return how_many_times(total_string_count_overlap, substring)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    res = 0\n    for i in range(len(string)):\n        if string[i] == substring:\n            res += 1\n    return res", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if substring not in string:\n        return 0\n\n    index = substring.find(string)\n    if index < 0:\n        return 0\n\n    index = index + len(string) - substring.find(string)\n\n    return index", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if substring == '':\n        return 0\n    else:\n        return len(string) - len(substring) - 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for char in string:\n        if char in substring:\n            count += 1\n    return count\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if substring.startswith(' '):\n        substring = substring[1:]\n    substring_length = len(substring)\n    # Use upper case (s = s.upper()) to avoid re.findall(r'^', substring)\n    return len(re.findall(r'[a-z]+\\Z', substring)) - len(re.findall(r'[a-z]+\\Z', substring.lower()))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if substring == '' or substring == None:\n        return 0\n    if string == '':\n        return len(string)\n    if string[0]!= substring[0]:\n        return 0\n    return 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # TODO: This is only a one-liner ('aaa' is already on the stack)\n    for index, character in enumerate(string):\n        if substring.startswith(character):\n            return index\n    return len(string)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(re.findall(r'%s%s' % (substring, string), string))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    how_many_overlap = 0\n    string_length = len(string)\n    substring_length = len(substring)\n    for i in range(0, string_length, substring_length):\n        how_many_overlap += 1 if string[i] == substring[i] else 0\n\n    return how_many_overlap", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string.split(substring))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return sum(i in string for i in substring.split(string))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return sum(1 for sub in string.split(substring) if sub in string)\n\n    def total_overlap(string: str, substring: str) -> int:\n        \"\"\" Total number of times substring is found in the original string.\n        >>> total_overlap('aaa', 'a')\n        3\n        >>> total_overlap('aaaa', 'aa')\n        3\n        \"\"\"\n        return sum(1 for sub in string.split(substring) if sub in string)\n\n    def overlap_all_occurrences(string: str, substring: str, max_overlap: int) -> dict[str, int]:\n        \"\"\" Overlap all substring occurrences to get a unique key in dictionary.\n        >>> overlap_all_occurrences('', 'a', 3)\n        {'aa': 3, 'aa': 1}\n        >>> overlap_all_occurrences('aaa', 'a', 3)\n        {'aa': 1}\n        >>> overlap_all_occurrences('aaaa', 'aa', 3)\n        {'aa': 3}\n        \"\"\"\n        if not max_overlap:\n            raise ValueError('Max Overlap is not specified.')\n\n        res = {}\n        for substring in substrings:\n            # replace previous substring occurrences\n            substring = substring.replace(", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    offset = 0\n    left = 0\n    right = string.find(substring, offset)\n    while offset < right:\n        offset += len(substring)\n        left += 1\n        right += 1\n    return left - offset", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string:\n        return 0\n    if not substring:\n        return 1\n    if len(string) > len(substring):\n        return 1\n    if len(string) < len(substring):\n        return -1\n    try:\n        while len(string) > 0:\n            if substring in string:\n                return 1\n            if substring in string:\n                return -1\n            string = string[len(string) - len(substring) :]\n        return 0\n    except IndexError:\n        pass", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # Count the number of times substring appears in the original string\n    num_overlap = 0\n    for i in range(len(string)):\n        if substring in string:\n            num_overlap += 1\n    # The number of times substring appears in the original string\n    num_overlap /= len(string)\n    # Find the number of times substring appears in the original string\n    return num_overlap", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return 0 if string == substring else len(string) - len(substring) // 2", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    string = string.strip()\n    substring = substring.strip()\n    length = len(string)\n    overlap = 0\n    for c in string:\n        if substring in c:\n            overlap += 1\n    return overlap", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    counts = 0\n    match_count = 0\n    for c in string.split(substring):\n        if c in string:\n            match_count += 1\n            counts += 1\n    return match_count - counts", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    def count_overlaping_elements(string: str, substring: str) -> int:\n        for i, element in enumerate(string):\n            if element == substring:\n                return i\n        return 0\n\n    count_overlaping_elements('', 'a')\n    count_overlaping_elements('aaa', 'a')\n    count_overlaping_elements('aaaa', 'aa')\n    count_overlaping_elements('aaa', 'a')\n    count_overlaping_elements('aaaa', 'a')\n    count_overlaping_elements('aaa', 'a')\n    count_overlaping_elements('aaaa', 'a')\n    count_overlaping_elements('aaa', 'a')\n    count_overlaping_elements('aaaa', 'a')\n    count_overlaping_elements('aaa', 'a')\n    count_overlaping_elements('aaaa', 'a')\n    count_overlaping_elements('aaa', 'a')\n    count_overlaping_elements('aaaa', 'a')\n    count_overlaping_elements('aaa', 'a')\n    count_overlaping_elements('aaaa', 'a')\n    count_overlaping_elements('aaa', 'a')\n    count_overlaping_elements('aaaa', 'a')\n    count_overlaping_elements('aaa'", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string is None:\n        return 0\n    if substring is None:\n        return len(string)\n    if string.count(substring) == len(string):\n        return 0\n    for index in range(len(string)):\n        if string[index].isdigit():\n            if substring[index].isdigit():\n                if string[index] == substring[index]:\n                    return how_many_times(string[index:], substring[index])\n                    # add an index to the variable for subsequent calculations\n                    # so the variable can be shared with other functions\n                    # that need it\n                    index += 1\n                    break\n                else:\n                    return how_many_times(string[index:], substring[index])\n                    # add an index to the variable for subsequent calculations\n                    # so the variable can be shared with other functions\n                    # that need it\n                    index += 1\n                    break\n    return len(string) - index - 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    start = 0\n    end = 0\n    for i in range(len(string)):\n        if substring in string:\n            start += 1\n            end += 1\n            break\n        elif substring == string:\n            start += 1\n            end += 1\n    return start - end", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return sum(x in string for x in string.split(substring) if x.count(substring) > 1)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string.split(substring))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    find = 0\n    substring_length = len(substring)\n    for i in range(len(string) - substring_length):\n        if substring[i] in string:\n            find += 1\n    return find", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    int_boundary = str.count(substring)\n    return int(int_boundary/len(substring)) + 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string == '':\n        return 0\n    if substring == '':\n        return 1\n    return len(string) * len(substring) - 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if substring == '':\n        return 0\n    if len(substring)!= 1:\n        return 1\n    for i in range(0, len(string)):\n        if substring[i - 1] in string:\n            return i\n    return len(string)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return string.count(substring) * substring.count(substring) / len(string)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string:\n        return 0\n    if not substring:\n        return 0\n    if not len(string):\n        return 0\n    if string.count(substring) == 0:\n        return 0\n    return 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if substring == '':\n        return 0\n\n    elif substring == 'a':\n        return 1\n\n    elif substring == 'aa':\n        return 2\n\n    elif substring == 'aaaa':\n        return 3\n\n    return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if substring in string:\n        return 1\n    if substring in string:\n        return len(string[substring])\n    else:\n        return 0\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # remove punctuation\n    substring = substring.replace('\\\\', '')\n    substring = substring.replace('\\t', '')\n    substring = substring.replace('\\n', '')\n\n    # remove consecutive repeated words\n    for index in xrange(len(string) - 1, -1, -1):\n        if string.count(substring) >= 2 and string[index + 1] in substring:\n            break\n\n    # return number of times substring was found\n    return substring.count(string) - 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # Cut out any non-digits\n    if substring.isdigit():\n        substring = substring.decode()\n    return len(map(chr, substring)) // 2", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # Get the length of the substring\n    length = len(substring)\n    # Find the longest prefix\n    prefix = ''\n    for i in range(length):\n        if substring[i] == prefix:\n            prefix = substring[i + 1:]\n    # Start at the beginning of the string\n    start_pos = 0\n    for i in range(length):\n        if substring[i]!= prefix:\n            start_pos = i\n            break\n    # Count the number of times the prefix appears in the string\n    count = 0\n    for i in range(start_pos, length):\n        if substring[i] == prefix:\n            count += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    string = string.strip()\n    if substring == '':\n        return 1\n    elif len(string) >= len(substring):\n        return 0\n    else:\n        while string.find(substring) >= 0:\n            yield string[:len(substring)]\n            string = string[len(substring):]\n    yield\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    results = []\n    while string:\n        try:\n            start = string.find(substring, 0, string.index(substring, string.index(substring, 0)))\n            end = string.find(substring, string.index(substring, string.index(substring, start + len(substring))), string.index(substring, string.index(substring, start + len(substring)) + len(substring)))\n            if start < end:\n                results.append((start, end))\n        except ValueError:\n            pass\n        string = string[end + len(substring):]\n    return len(results)\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string.finditer(string, substring))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    for substring in string:\n        try:\n            substring = substring.upper()\n        except UnicodeError:\n            continue\n        for character in substring:\n            for i in xrange(1, len(character), 1):\n                if character[i] == character[i-1]:\n                    return i\n\n    return len(string) - 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if substring in string:\n        result = string.count(substring)\n        return result\n\n    return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    #find out how many times a substring is present\n    count = 0\n    while substring:\n        if string.startswith(substring):\n            count += 1\n        substring = substring.replace(substring, '')\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # regex pattern\n    pattern = re.compile(r\"\\b%s\\b\" % substring)\n    # search for substring\n    matched = pattern.search(string)\n    if matched:\n        # match number of times found\n        return int(matched.group())\n\n    # otherwise, match the number of times the substring is found\n    matched = pattern.search(string)\n    if matched:\n        return 1\n\n    # the pattern was not found, so return 0\n    return 0\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if string == '':\n        return 0\n\n    if substring == '':\n        return 0\n\n    if len(string) > len(substring):\n        return 0\n\n    if string.startswith(substring):\n        return len(string) - len(substring)\n    else:\n        return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # first, find a substring we can find\n    find = string.lower().find(substring)\n    if find is not None:\n        return find + len(substring)\n    else:\n        return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    sub1 = string.find(substring)\n    sub2 = string.find(substring, sub1)\n    count = 0\n    while sub1 > 0:\n        count += 1\n        sub1 = string.find(substring, sub1)\n    count += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not substring:\n        return 1\n    if not string:\n        return 1\n\n    try:\n        n = int(substring) - 1\n    except ValueError:\n        return 1\n\n    if not n:\n        return 0\n\n    if string[-n:-1] == substring:\n        return n\n\n    return 0", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # more or less brute force method\n    for i in range(len(string) / len(substring)):\n        for j in range(i * len(substring)):\n            if string[i:j] == substring[j:]:\n                return i + 1\n    return len(string)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if substring is None:\n        return 0\n    start_pos = 0\n    end_pos = 0\n    for i, char in enumerate(string):\n        if substring[i] == char:\n            end_pos = i\n            start_pos = i + 1\n    if end_pos == len(string) - 1:\n        return start_pos\n    elif end_pos - start_pos > 1:\n        return how_many_times(string[start_pos:end_pos], substring[start_pos:end_pos]) + 1\n    else:\n        return how_many_times(string[start_pos:end_pos], substring[start_pos:end_pos]) + 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    start = 0\n    end = len(string) - len(substring)\n    return len(string[:start]) + len(string[end:]) - len(substring)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # Overlap positions\n    overlaps = {}\n    for i in range(0, len(string), substring.size()):\n        overlap = substring.index(string[i]) - substring.index(string[i + substring.size()])\n        overlaps[overlap] = i\n\n    # Determine how many times the substring can be found in the original string\n    return sum(overlaps.values())", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for start, end in string.split(substring):\n        if start == end:\n            count += 1\n        else:\n            count += how_many_times(start, end)\n\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for c in string:\n        if c == substring:\n            count += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # -------------BEGIN-CODE----------------------------------------------------\n    #  Find the first occurrence of substring in the original string\n    #  -------------BEGIN-CODE----------------------------------------------------\n    #\n    #  Note that this function assumes the input string has no spaces\n    #  -------------BEGIN-CODE----------------------------------------------------\n    pos = 0\n    index = 0\n    # -------------BEGIN-CODE----------------------------------------------------\n    while pos < len(string) and string[pos] == substring:\n        index = pos + 1\n        pos = index\n        # -------------BEGIN-CODE----------------------------------------------------\n    return len(string) - index - 1 - pos\n\n    # -------------BEGIN-CODE----------------------------------------------------\n    #  Make sure index is within the range of input string\n    #  -------------BEGIN-CODE----------------------------------------------------\n    if index < 0:\n        index = len(string) - 1\n    if index > len(string):\n        index = len(string)\n\n    #  -------------BEGIN-CODE----------------------------------------------------\n    #  Return the number of times substring occurs in the input string\n    #  -------------BEGIN-CODE----------------------------------------------------\n    return how_many_times(string, substring[index:])", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return sum(a in string for a in substring if a not in string)</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    start = 0\n    end = len(string)\n    if substring.startswith(' '):\n        start = 1\n        end = end - 1\n        while start < end:\n            if substring[start] == substring[end]:\n                start = end - 1\n                end = end - 1\n                break\n            start = start + 1\n    return int(end - start + 1)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    result = 0\n    index = 0\n    for i in string:\n        if substring in string:\n            result += 1\n        index += 1\n    return result", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return sum(x for x in string.split(substring) for x in xrange(len(string)) if substring in x.lower())", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not isinstance(string, str):\n        string = str(string)\n    if not isinstance(substring, str):\n        substring = str(substring)\n\n    return len(string) - len(substring)", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    match = substring.find(string)\n    if match == -1:\n        return 0\n    return match - 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    left = substring\n    right = string\n    count = 0\n    i = -1\n    while i < len(left):\n        if left[i] == substring:\n            i += 1\n            count += 1\n        else:\n            count += 1\n        if left[i] == right[i]:\n            break\n        i += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    char_counter = 0\n    match_index = 0\n    end_index = 0\n    while char_counter < len(string):\n        index = substring.find(string[char_counter], match_index)\n        if index >= 0:\n            end_index = char_counter + 1\n            break\n        char_counter += 1\n    if end_index == 0:\n        return 0\n    else:\n        return end_index - start_index\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return 0 if not substring else len(string.split(substring))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return sum([len(i) for i in string.split(substring) if i in string.split(string)])</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if substring == '':\n        return 0\n    return sum(1 for letter in substring if letter in string) if string else 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    find = lambda x: x in string and x in substring\n    how_many = 0\n    for i, x in enumerate(find(string)):\n        how_many += 1\n    return how_many", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return 0 if not string else len(string) - len(substring) - len(string.translate(substring.lower()))", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # When substrings match exactly, there is no overlap\n    if substring == string:\n        return 1\n    # If substrings match up to a fixed length, there is no overlap\n    if substring.isdigit():\n        return 1\n    # Look for other substrings that match up to a fixed length\n    for i in range(0, len(string), substring):\n        # Each substring must match exactly\n        if string[i]!= substring[i]:\n            return 1\n    # Only return a count of the number of times substring overlaps\n    return len(string) - len(substring) - 1", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for substring in string:\n        for index in range(len(string) - 1, -1, -1):\n            if substring in string:\n                count += 1\n    return count\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # The answer is the length of the substring after which the original string stops being substring.\n    # String length in Python is a bit of a strange number; it is a signifier of the whole string.\n    # For example, the string 'aaa' has length 10, but the substring 'aaaa' has length 0\n    length = len(substring)\n    if length > 0:\n        overlap = 0\n        for substring_index in range(0, length):\n            if substring_index < len(string) - 1:\n                if string[substring_index] in substring:\n                    overlap += 1\n        return overlap\n    return 0\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # Find the number of occurences of the substring in the original string.\n    # The substring is first passed as a parameter, and it is searched from beginning to end.\n    # This function is always recursive, so we want to avoid this variable name.\n    # We could use a dictionary, but this is not that fast.\n    # This variable is a dict, and we want to avoid iteration.\n    count = 0\n    all_occurences = {}\n    for c in string:\n        if c in substring:\n            if all_occurences.get(c) is None:\n                all_occurences[c] = 0\n            all_occurences[c] += 1\n\n    # Now we need to loop over all occurences, and we will count the overlap.\n    for c in string:\n        if c in all_occurences:\n            count += all_occurences[c]\n\n    return count\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    def match(value: str, substring: str) -> bool:\n        \"\"\" Return True if the value matches the substring. \"\"\"\n        return value.startswith(substring) or value.endswith(substring)\n    if len(string) < len(substring):\n        return 1\n    if len(string) == len(substring):\n        return 0\n    if substring in string:\n        return 1\n    if substring in string[len(string) - len(substring)]:\n        return 0\n    if substring in string[len(string) - len(substring) + 1:]:\n        return 1\n    return 0\n</s>", "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    s = string.strip()\n    while s and not s.isalpha():\n        s = s.replace(' ', '&nbsp;')\n    return len(s)"]]