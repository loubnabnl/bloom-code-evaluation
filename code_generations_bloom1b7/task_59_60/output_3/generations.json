[["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Determine the greatest common divisor of n and the right hand side.\n    d = (n - 1) // 2\n    while d >= 2:\n        d = d // 2\n    return d", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return None\n    return int(n**log(n) / log(2)) - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Calculate the greatest common divisor (GCD) of n and y = x**(n-1)\n    y = n\n    while y:\n        if x**y!= y**x:\n            return y\n        y /= y\n    return y", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n > 1\n    if n == 1:\n        return 1\n    if not n == 1:\n        return largest_prime_factor(n - 1)\n    else:\n        return largest_prime_factor(n - 2)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n is None:\n        raise ValueError(\"Need to pass a positive integer as argument\")\n    return max([prime for prime in n if prime!= 1])", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return max([prime for prime in xrange(n)])\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n >= 1\n    if not n:\n        return 1\n    return len(set(x for x in range(n - 1, -1, -1)) for x in xrange(n)) + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        if n // 2 == 1:\n            return 2\n        if n // 2 == 2:\n            return 3\n        if n // 3 == 1:\n            return 1\n        if n // 3 == 2:\n            return 3\n        if n // 4 == 1:\n            return 2\n        if n // 4 == 2:\n            return 4\n    return n // 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while n % 2 == 0:\n        n >>=1\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 4:\n        return n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    return 7", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n        raise ValueError(\"an integer must be greater than 1\")\n    prime = prime_factorial(n)\n    while True:\n        if n % prime == 0:\n            return prime, n\n        else:\n            n = n//prime\n    return None, n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    primes = [0, 1]\n    if n == 0:\n        return primes[-1]\n    for i in range(n, -1, -1):\n        if n % i == 0:\n            return primes[-1]\n    return primes[-1]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n > 2:\n        raise ValueError('unknown largest prime factor: %d' % n)\n    if n % 2 == 0:\n        n = n // 2\n    return n - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n        if n > 32:\n            return 1\n        if n > 64:\n            return 2\n        if n > 96:\n            return 3\n        if n > 128:\n            return 4\n        if n > 256:\n            return 5\n        if n > 512:\n            return 6\n        if n > 1024:\n            return 7\n        if n > 2048:\n            return 8\n        if n > 52428:\n            return 9\n        if n > 1048576:\n            return 10\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 0:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return largest_prime_factor(n-1)\n\n    if n == 2:\n        return 2\n\n    if n == 3:\n        return 5\n\n    if n == 4:\n        return 10\n\n    if n == 5:\n        return 15\n\n    if n == 6:\n        return 20\n\n    if n == 7:\n        return 25\n\n    if n == 8:\n        return 30\n\n    if n == 9:\n        return 40\n\n    return 0", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Need at least one input\")\n    return 1 + int(np.sqrt(np.linalg.det(np.multiply(n, n)))) - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"not a prime\")\n    # largest prime factor is the biggest prime factor greater than n\n    # so it's the greatest prime factor smaller than n - 1\n    return largest_prime_factor(n - 1) - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        return 1\n    # 2**k for k = 2 ** n. We have to remember that there are 2**n primes.\n    largest = n ** largest_prime_factor(n-1)\n    # We want the largest prime factor of 2**n-1. First we have to get the largest\n    # prime factor of 2**n.\n    largest = 2 ** largest\n    largest = 2 ** largest - 1\n    largest = 2 ** largest - largest\n    # If we are in the range 2**k < k < 2**(k + 1) we can compute the largest prime\n    # factor of n.\n    largest = largest - 1\n    largest = largest - largest\n    largest = largest - largest - 1\n    # If we are in the range 2**(k + 1) < k < 2**(k + 2) we can compute the largest prime\n    # factor of n.\n    largest = largest - largest - largest\n    largest = largest - largest - largest - 1\n    return largest\n\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return 1 if n == 1 else largest_prime_factor(n / 2)\n\n    # this function can be improved, it is not recursive\n    # >>> largest_prime_factor(3)\n    # return largest_prime_factor(n / 2) if n % 2 == 0 else largest_prime_factor(n / 2) + 1\n    # >>> largest_prime_factor(3)\n    # return largest_prime_factor(n / 2) + 1\n    # >>> largest_prime_factor(3)\n    # return largest_prime_factor(n / 2) + 1\n    # >>> largest_prime_factor(3)\n    # return largest_prime_factor(n / 2) + 1\n    # >>> largest_prime_factor(3)\n    # return largest_prime_factor(n / 2) + 1\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n < 3:\n        return 3\n    else:\n        return smallest_prime_factor(n)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # find the largest prime factor\n    x = n - 1\n    while x > 0:\n        if x % 2 == 0:\n            x -= 1\n        else:\n            break\n    return x", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest = 0\n    for x in range(1, n + 1):\n        if x == 1:\n            largest = x\n            break\n    return largest", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # if n == 1:\n    #     return 1\n    # if n == 0:\n    #     return 1\n    # largest_factor = 1\n    # while largest_factor < n:\n    #     largest_factor = largest_factor * largest_factor\n    # largest_factor = largest_factor * greatest_prime_factors(largest_factor)\n    return largest_factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n <= 20:\n        return 2\n    return largest_prime_factor(n-1)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 0:\n        return 0\n    factor = 1\n    while factor > 1:\n        factor = factor//n\n    return factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if not n:\n        return 1\n    if n <= 1:\n        return 1\n    return max(max(1, n), 1)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    try:\n        return fprime(n) if n > 1 else None\n    except ValueError:\n        return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return 1 if n == 1 else n // largest_prime_factor(n-1)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 1\n    assert n % 3 == 0\n    assert n % 4 == 0\n    assert n % 5 == 0\n    assert n % 6 == 0\n    assert n % 7 == 0\n    assert n % 8 == 0\n    assert n % 9 == 0\n    assert n % 10 == 0\n    assert n % 11 == 0\n    assert n % 12 == 0\n    assert n % 13 == 0\n    assert n % 14 == 0\n    assert n % 15 == 0\n    assert n % 16 == 0\n    assert n % 17 == 0\n    assert n % 18 == 0\n    assert n % 19 == 0\n    assert n % 20 == 0\n    assert n % 21 == 0\n    assert n % 22 == 0\n    assert n % 23 == 0\n    assert n % 24 == 0\n    assert n % 25 == 0\n    assert n % 26 == 0\n    assert n % 27 == 0\n    assert n % 28 == 0\n    assert n % 29 == 0\n    assert n % 30 == 0\n    assert n % 31 == 0\n    assert n % 32 == 0\n    assert n % 33 == 0\n    assert n % 34 == 0\n    assert n % 35 == 0\n    assert n % 36 == 0", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    try:\n        return int(n // 2)\n    except ValueError:\n        raise ValueError(\"n must be prime: %d\" % n)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return largest_prime_factor(n, 1) if n > 1 else None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for p in range(1, n):\n        if n % p == 0:\n            return p\n    raise ValueError('n!= p')", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    primes = [prime for prime in numbers(n) if prime!= 1]\n    if not primes:\n        return 0\n    largest = primes[-1]\n    return largest[1:] * largest[-1]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # The test is done for n > 1\n    if n > 1:\n        test = 1 if n % 1 == 0 else -1\n        print(\"Testing factorisation of \" + str(n) + \".\")\n        print(\"   Test %d = %d\" % (test, n))\n        n = 2 * n + 1\n        for _ in range(n):\n            if test == 0:\n                return n\n            elif test == 1:\n                break\n    else:\n        print(\"Testing factorisation of \" + str(n) + \".\")\n        print(\"   n > 1\")\n        return 0", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n        for i in range(1, n):\n            if n % i == 0:\n                return i\n        return 1\n    return -1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n is None:\n        return None\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    try:\n        return int(n) % int(1000000000)\n    except (ValueError, TypeError):\n        return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # At least one prime, otherwise the algorithm cannot be applied to large\n    # numbers.  This only works for positive n, not negative.\n    if n > 1:\n        # Find the largest prime factor of n-1\n        # (n/2 is a factor of n-1)\n        # and multiply the prime factors by 2\n        if n % 2 == 0:\n            return n * 2\n        else:\n            for p in range(n):\n                yield n * 2 + p\n    return 0", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    try:\n        if n % 2 == 0:\n            return 1\n        if n % 3 == 0:\n            return 1\n    except ValueError:\n        pass\n    if n % 1 == 1:\n        return n\n    return max(1, largest_prime_factor(n * n - 1))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    n_prime = 1\n    p = n\n    while n > 1:\n        if n % p == 0:\n            p += 1\n        else:\n            n_prime = n_prime * n_prime\n    return n_prime", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n > 2 and n % 2 == 0:\n        return largest_prime_factor(n / 2) + 1\n    else:\n        raise ValueError(\"not a prime\")", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Note that we use the Python fmod function here.\n    # https://docs.python.org/2/library/fmod.html\n    if n == 1:\n        return 0\n    if n == 0:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # if n is None:\n    #     raise ValueError('You cannot call this function with None')\n    # assert n > 0\n    # assert n < 10000000\n    # assert n % 2 == 0\n    # return largest_prime_factor(n/2)\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    raise ValueError('You cannot call this function with a prime')", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    # There are no primes less than 2**32-1\n    for prime in range(1, 2**32-1):\n        if prime <= n:\n            return prime\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n is None:\n        return 1\n    if n < 0:\n        return -1\n    if n < 1:\n        return n\n    if n < 2:\n        return -n\n    prime = None\n    while prime is not None:\n        if prime > n:\n            prime = None\n        elif prime < 0:\n            prime = None\n        else:\n            break\n    return prime", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n!= 1:\n        raise ValueError(\"Largest prime factor for n must be 1 or greater.\")\n\n    s = [False] * (n - 1)\n    for i in xrange(n - 1):\n        if i == n - 1:\n            s[i] = True\n        else:\n            if n % 2 == 1:\n                s[i] = True\n            elif n % 3 == 1:\n                s[i] = True\n            else:\n                s[i] = False\n\n    largest_factor = 1\n    largest_prime = 1\n    for s in s:\n        if s[1]:\n            largest_factor = s[0]\n            largest_prime = s[1]\n        if s[0]:\n            largest_factor = s[1]\n            largest_prime = s[0]\n\n    return largest_factor, largest_prime", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 0:\n        return 1\n\n    if n % 2 == 1:\n        return 1\n\n    if n == 1 and n % 4 == 0:\n        return 2\n\n    if n > 1 and n % 6 == 1:\n        return 4\n\n    if n > 2 and n % 8 == 1:\n        return 8\n\n    return largest_prime_factor(n//2) + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1 or n in [ 2, 3, 5, 7, 11, 13, 17, 19, 21, 23, 25, 27, 29, 31, 37, 41, 43, 47, 51, 53, 55, 59, 61, 67, 71, 73, 79, 81, 83, 89, 97, 101, 107, 109, 113, 117, 119, 121, 127, 131, 139, 151, 157, 161, 167, 171] or n in [22, 23, 31, 37, 41, 43, 47, 51, 53, 55, 59, 61, 67, 71, 73, 79, 81, 83, 89, 97, 101, 107, 109, 113, 117, 119, 121, 127, 131, 139, 151, 157, 161, 171] or n in [32, 33, 35, 36, 39, 41, 43, 45, 47, 51, 53, 55, 59, 61, 67, 71, 73, 79, 81, 83, 89, 97, 101, 107, 109, 113, 117, 119, 121, 127, 131, 139, 151, 157, 161, 171] or n in [44, 45", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Chop the largest prime factor into its parts.\n    divisors = [prime_part(n) for prime_part in largest_prime_part(n - 1)]\n    # Round down to the next largest prime factor.\n    big_prime_factor = None\n    # Iterate over the divisors of n, and keep track of the big prime factor.\n    while big_prime_factor is None:\n        big_prime_factor = largest_prime_part(divisors[-1])\n        # Remove the big prime factor from the divisors list.\n        # We only want to keep the last one.\n        divisors.pop()\n\n    # Return the largest prime factor.\n    return big_prime_factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 1\n    prime = 1\n    while n > prime:\n        prime = prime * prime\n    return prime\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return largest_prime_factor(n, None) if n is not None else None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n >= 1\n    assert n < 999999999999\n    prime = None\n    while True:\n        a = n % prime\n        if a:\n            return a\n        prime = a ^ prime\n    return None\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    try:\n        if n < 9:\n            return 1\n        else:\n            return n\n    except ValueError:\n        return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    m = int(math.sqrt(n))\n    if m is None:\n        raise ValueError('n must be an integer greater than or equal to 1')\n    while m > 1:\n        if m == 1:\n            return 1\n        else:\n            m >>= 1\n    return m", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return 1 if n < 1 else max(abs(n), 1) if n > 1 else 0", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n!= 1:\n        return smallest_prime_factor(n)\n    return largest_prime_factor(n - 1)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        return 1\n    for k in range(1, n):\n        if n % k == 0:\n            return k\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1 and n % 2 == 0:\n        return 1\n    for i in xrange(n):\n        if n % 2!= 0:\n            yield n\n        n = n // 2\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return math.sqrt(n ** 2) if n == 1 else math.pow(2, math.log(n))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 1\n    if n % 4 == 0:\n        return 1\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n > 1\n    return int(n ** (n-1)) ** 0.5", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    p = 2\n    while True:\n        if p < n:\n            p += 1\n        else:\n            break\n    return p", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n / 2\n    return largest_prime_factor(n / 2)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = int(n)\n    while n > 1:\n        try:\n            return n * n\n        except OverflowError:\n            return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Determine the prime factors of n\n    factor_map = {2: 4}\n    while True:\n        factor = factor_map.get(n)\n        if factor is not None:\n            break\n    # Determine the largest prime factor of n\n    return factor_map.get(n) + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = int(n)\n    if n > 1:\n        if n == 2 and n > 3 and n!= 11:\n            return 1\n        if n == 3 and n > 5 and n!= 11:\n            return 1\n        if n == 4 and n > 7 and n!= 11:\n            return 1\n        if n == 5 and n > 9 and n!= 11:\n            return 1\n        if n == 6 and n > 11 and n!= 11:\n            return 1\n        if n == 7 and n > 13 and n!= 11:\n            return 1\n        if n == 8 and n > 15 and n!= 11:\n            return 1\n        if n == 9 and n > 17 and n!= 11:\n            return 1\n    return 0", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n        if (n % 2)!= 0:\n            raise ValueError(\"negative prime factor\")\n    return n\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # A naive implementation of the algorithm using brute force (takes\n    # 2 ** n iterations to find a prime)\n    if n == 1 and 1 < n < 10**3:\n        return 1\n    n_prime = 0\n    while n_prime < 10:\n        n_prime += 1\n        if n < 10 ** n_prime:\n            return n_prime\n        else:\n            return largest_prime_factor(n_prime)\n\n    return 0", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 0:\n        raise ValueError('Argument n must be positive')\n    p = 1\n    while n > 1:\n        p = p*p + 1\n        n = n/p\n    return p\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n > 1, 'Invalid n argument'\n    return len(xrange(1, n + 1)) // len(xrange(1, n + 1) % n)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while n > 1:\n        # According to Wikipedia, there are at least two prime factors of n.\n        # This means that there is a one-to-one correspondence between the\n        # largest prime factors of n and the numbers defined by the\n        # following relations:\n        #\n        # >>> largest_prime_factor(12) == 13\n        # True\n        # >>> largest_prime_factor(19) == 20\n        # True\n        # >>> largest_prime_factor(22) == 23\n        # False\n        #\n        # This means that we can do the following computation recursively on\n        # n:\n        #\n        # >>> largest_prime_factor(n-1) == largest_prime_factor(n)-1\n        # True\n        #\n        # and we can use that fact to solve the following problem:\n        #\n        # >>> largest_prime_factor(2) == 13\n        # True\n        # >>> largest_prime_factor(10) == 13\n        # True\n        # >>> largest_prime_factor(5) == 13\n        # True\n        # >>> largest_prime_factor(3) == 13\n        # True\n        #\n        # Because we know that there are at least two prime factors of n,\n        # the answer to this problem is the largest of the largest prime\n        # factors of n-1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    try:\n        return int(n)\n    except ValueError:\n        if n == 1:\n            return 0\n        else:\n            return int(floor(n / 2))\n    else:\n        return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n is None:\n        return None\n    if n == 0:\n        return None\n    if n == 1:\n        return None\n    if n == 2:\n        return None\n    if n == 3:\n        return None\n    if n == 4:\n        return None\n    if n == 5:\n        return None\n    if n == 6:\n        return None\n    if n == 7:\n        return None\n    if n == 8:\n        return None\n    if n == 9:\n        return None\n    if n == 10:\n        return None\n    if n == 11:\n        return None\n    if n == 12:\n        return None\n    if n == 13:\n        return None\n    if n == 14:\n        return None\n    if n == 15:\n        return None\n    if n == 16:\n        return None\n    if n == 17:\n        return None\n    if n == 18:\n        return None\n    if n == 19:\n        return None\n    if n == 20:\n        return None\n    if n == 21:\n        return None\n    if n == 22:\n        return None\n    if n == 23:\n        return None\n    if n == 24:\n        return None\n    if n == 25:\n        return None\n    if n == 26:\n        return None\n    if n == 27:\n        return None\n    if n == 28:\n        return None\n    if n == 29:\n        return None\n    if", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return (n // 2) + 1  # largest prime factor of n is 2, so we need to count one more.\n    #(n // 2) + 1\n    #(n // 2) + 1\n    #(n // 2) + 1\n    #(n // 2) + 1\n    #(n // 2) + 1\n    #(n // 2) + 1\n    #(n // 2) + 1\n    #(n // 2) + 1\n    #(n // 2) + 1\n    #(n // 2) + 1\n    #(n // 2) + 1\n    #(n // 2) + 1\n    #(n // 2) + 1\n    #(n // 2) + 1\n    #(n // 2) + 1\n    #(n // 2) + 1\n    #(n // 2) + 1\n    #(n // 2) + 1\n    #(n // 2) + 1\n    #(n // 2) + 1\n    #(n // 2) + 1\n    #(n // 2) + 1\n    #(n // 2) + 1\n    #(n // 2) + 1\n    #(n // 2) + 1\n    #(n //", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return len([1 for p in range(1, n) if p!= n]) == 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # We assume that the prime factorization of n is [l] * [l] *... * [l]\n    l = n - 1\n    while l > 1:\n        l = l * l\n        if l % 2 == 0:\n            return l / 2\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in xrange(1, n):\n        if n % i == 0:\n            return i\n        if n == i:\n            return n\n\n    raise NotImplementedError('Not implemented')", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        return 1\n    try:\n        return int(n) // int(n // 1)\n    except ValueError:\n        pass\n    try:\n        return int(n // 1)\n    except ValueError:\n        return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return min(prime_factors(n))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = n[1:]\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    return 10\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # This is a linear-time algorithm, but it could get quite slow if it searches\n    # all primes (this is unlikely, though).\n    if n < 1:\n        return None\n    if n == 1:\n        return 1\n    if n > 100:\n        return n ** 2\n    if n == 1000:\n        return n ** 3\n    return (n ** 2) ** (n - 1) // 2 // (n - 1) // 2\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = n\n    while factor!= 0:\n        factor = factor // 2\n        if factor!= 0:\n            break\n    return factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return n if n > 1 else 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    a = n\n    while a > 1:\n        a = a // 2\n        if a is None:\n            return a\n        if a % 2 == 0:\n            a = a // 2\n    return a", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    return 1\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    primes = []\n    while True:\n        x = n / 2\n        if x in primes:\n            continue\n        primes.append(x)\n    return primes[0]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return None\n    else:\n        return largest_prime_factor(n % 2) if n % 2 else None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = int(n)\n    if n <= 1:\n        return None\n    else:\n        while n % 2 == 0:\n            n -= 1\n    return n / 2\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n\n    if n > 2:\n        if n == 3:\n            return 3\n        else:\n            return 2\n\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 1:\n        return None\n    if n == 2:\n        return None\n    # If n is odd, we have a solution.\n    # In that case, we know the largest prime factor is two.\n    if n % 2 == 1:\n        return 2\n    # If n is even, we have a solution.\n    # In that case, we know the largest prime factor is two.\n    if n % 2 == 0:\n        return 2\n\n    # There are cases where we can't determine the largest prime factor.\n    # For example, if we have a number with an even number of prime factors\n    # then the largest prime factor is always 1.\n    if n % 2 == 0:\n        return None\n\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = int(n)\n    if n == 1:\n        return 1\n    # A positive integer is a factor if it divides at least one\n    # number of the form p*p, where p is an odd prime, and at least\n    # two numbers of the form p*q, where p and q are not both\n    # primes.\n    return max([int(p) for p in range(1, n + 1)], key=lambda p: p ** 2) // n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1 or n == 0:\n        return 1\n    if n > 1:\n        primes = set(1 for i in xrange(n))\n        while n % prime for prime in primes:\n            n = n / prime\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while True:\n        assert(n > 1)\n        n = n % 2\n        if n == 0:\n            break\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = int(n)\n    if n <= 1:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 4\n    if n == 3:\n        return 6\n    if n == 4:\n        return 8\n    if n == 5:\n        return 12\n    return largest_prime_factor(n - 1)\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 1\n    while n % i == 0:\n        i += 1\n    return i", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n < 2**32:\n        return 1\n    else:\n        if n < 2**32:\n            return largest_prime_factor(n) + 1\n        else:\n            return largest_prime_factor(n) + 2**32", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1 or n == 0:\n        return 0\n    else:\n        return max(1, smallest_prime_factor(n - 1))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # raise NotImplementedError\n    # raise NotImplementedError", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    return largest_prime_factor(n / 2) + 1\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    try:\n        prime = int(n//(n//(n//n)))\n    except ValueError:\n        pass\n    else:\n        if prime == 1:\n            return 1\n        elif prime == 2:\n            return 1\n        elif prime == 3:\n            return 1\n        elif prime == 4:\n            return 1\n        elif prime == 5:\n            return 1\n        elif prime == 6:\n            return 1\n        elif prime == 7:\n            return 1\n        elif prime == 8:\n            return 1\n        elif prime == 9:\n            return 1\n        elif prime == 10:\n            return 1\n        elif prime == 11:\n            return 1\n        elif prime == 12:\n            return 1\n        elif prime == 13:\n            return 1\n        elif prime == 14:\n            return 1\n        elif prime == 15:\n            return 1\n        elif prime == 16:\n            return 1\n        elif prime == 17:\n            return 1\n        elif prime == 18:\n            return 1\n        elif prime == 19:\n            return 1\n        else:\n            return largest_prime_factor(n//prime)\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n > 1, 'argument n must be > 1'\n    p = 1\n    while p % n == 0:\n        p = p * (n - 1) + 1\n    return p", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    p = 1\n    while n:\n        if n % p == 0:\n            break\n        p *= 10\n        n /= p\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return max([prime for prime in prime_factors(n)])", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # largest prime factor of positive integers\n    largest_p_fact = 1\n    # largest prime factor of negative integers\n    largest_n_fact = - 1\n\n    # first attempt to use the increasing algorithm\n    prim_fact = 0\n    while prim_fact < n:\n        prim_fact = (primal_fact + 1) % n\n\n    # second attempt to use the decreasing algorithm\n    if prim_fact == -1:\n        return -1\n\n    while prim_fact > -1:\n        prim_fact = (primal_fact - 1) % n\n\n    # third attempt to use the increasing algorithm\n    if prim_fact == 1:\n        return largest_p_fact\n\n    return 0", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    try:\n        return int(n, 16) / (n-1)\n    except ValueError:\n        return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1 and not n in range(1, 100, 2):\n        return 1\n    else:\n        return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 2:\n        return 1\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    if n > 2:\n        if n % 2 == 1:\n            return n\n        raise ValueError\n    return max([1 for x in xrange(n)])", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        return None\n    if n == 1 or n == 0:\n        return None\n    if n == 2:\n        return 2\n    for m in range(n // 2):\n        if m == n // 2:\n            continue\n        if n % 2 == 1:\n            return None\n    return n\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return n\n\n    return n % 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while n > 1:\n        if n % 2:\n            n /= 2\n        else:\n            break\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n > 1:\n        # If n is a prime, we know we can factor it with at most 2\n        largest_prime_factor = n\n        return 2\n    # We have to guess how big n is.\n    primes = [\n            2,\n            3,\n            5,\n            7,\n            9,\n            11,\n            13,\n            17,\n            19,\n            21,\n            23,\n            25,\n            27,\n            29,\n            31,\n            33,\n            37,\n            41,\n            43,\n            47,\n            49,\n            51,\n            53,\n            57,\n            59,\n            61,\n            63,\n            67,\n            69,\n            71,\n            73,\n            79,\n            83,\n            97,\n            101,\n            107,\n            109,\n            113,\n            127,\n            131,\n            137,\n            141,\n            145,\n            157,\n            161,\n            167,\n            171,\n            175,\n            177,\n            181,\n            191,\n            193,\n            195,\n            197,\n            199,\n            201,\n            205,\n            211,\n            223,\n            227,\n            239,\n            243,\n            251,\n            257,\n            261,\n            267,\n            271,\n            283,\n            297,\n            307,\n            311,\n            313,\n            317,\n            331,\n            337,\n            347,\n            361,\n            367,\n            373,\n            385,\n            401,\n            431,\n            457,\n            491,\n            503,\n            513,\n            547,\n            557,\n            563,\n            569,\n            577,\n            581,\n            587,\n            601,\n            619,\n            631,\n            647,\n            661,\n            673,\n            677,", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        return None\n    a = n\n    while a > 2:\n        a, b = divmod(a, 2)\n        if a > b:\n            return b\n        if a == b:\n            return 1\n        if a == 1:\n            return a\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 1\n    n = int(n)\n    while n % 2 == 0:\n        n = n / 2\n    if n == 1:\n        return 1\n    if n % 3 == 0:\n        return 1\n    if n % 6 == 0:\n        return 1\n    if n % 12 == 0:\n        return 1\n    if n % 27 == 0:\n        return 1\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n > 1, \"Expected at least 1 element in n, got %s\" % n\n    max_square = 1\n    for i in range(0, n - 1, 2):\n        max_square = max(max_square, i ** 2)\n    return max_square", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return max([\n        n % 2 for n in xrange(1, n + 1)\n    ])\n    # TODO: Do we need to test this?\n    # if n > 1 and not prime:\n    #    return n\n    # return min([prime * i for prime in xrange(n, n + 1)])\n    # else:\n    #    return largest_prime_factor(n)\n    # return largest_prime_factor(n) % prime", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    m = ord(n)\n    if m < 1:\n        return 1\n    if m == 1:\n        return 1\n    if m == 2:\n        return 3\n    if m == 3:\n        return 5\n    if m == 5:\n        return 7\n    if m == 7:\n        return 9\n    if m == 9:\n        return 13\n    if m == 13:\n        return 19\n    if m == 19:\n        return 23\n    if m == 23:\n        return 31\n    if m == 31:\n        return 41\n    if m == 41:\n        return 51\n    if m == 51:\n        return 61\n    if m == 61:\n        return 71\n    if m == 71:\n        return 89\n    if m == 89:\n        return 131\n    if m == 131:\n        return 191\n    if m == 191:\n        return 231:\n    if m == 231:\n        return 311\n    if m == 311:\n        return 311:\n    if m == 311:\n        return 401\n    if m == 401:\n        return 501\n    if m == 501:\n        return 701\n    if m == 701:\n        return 901\n    if m == 901:\n        return 1311:\n    if m == 1311:\n        return 1941:\n    if m == 1941:\n        return 311:\n    if m == 311:\n        return 4011:", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 0:\n        return 0\n    if n is None:\n        return None\n    if n < 1:\n        return None\n    if n % 2 == 1:\n        return None\n    return (n//2) + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        return None\n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n > 2:\n        return 3\n\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Remove the first 4 digits of n and then powers of 2\n    # to find the largest prime factor\n    largest_part = 1\n    for _ in range(3, n - 1):\n        largest_part = max(largest_part, int(n / _))\n    largest_part = int(largest_part)\n    return largest_part", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    try:\n        return int(n) * (1 + n * n * n)\n    except ValueError:\n        return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Reverse the values\n    n = [int(x) for x in n]\n    n.reverse()\n    if n[-1] == 0:\n        return 1\n    if n[-1] == 1:\n        return 2\n    if n[-1] == 2:\n        return 3\n    if n[-1] == 3:\n        return 4\n    if n[-1] == 4:\n        return 5\n    if n[-1] == 5:\n        return 6\n    if n[-1] == 6:\n        return 7\n    if n[-1] == 7:\n        return 8\n    if n[-1] == 8:\n        return 9\n    if n[-1] == 9:\n        return 10\n    if n[-1] == 10:\n        return 11\n    if n[-1] == 11:\n        return 12\n    return 12", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in xrange(n):\n        if n % i == 0:\n            return i\n        else:\n            return i**2 - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    primes = map(lambda x: x % n, range(n))\n    for i in range(len(primes)):\n        if primes[i] > primes[i - 1] and not (primes[i] % 2):\n            return primes[i]\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n > 1 and n % 2 == 0:\n        return n / 2\n    if n > 1:\n        return largest_prime_factor(n - 1)\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n > 1, 'n must be greater than 1 and not prime'\n    r = None\n    while r is None:\n        p = x**(n-1) for x in xrange(n)\n        r = p % n\n        if r is not None:\n            break\n    return r", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Attempt to return a factor greater than the value of n.\n    p = n\n    while p:\n        p = int(p//10)\n        if p:\n            return p\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    l = n // 10\n    if l:\n        if l == 10:\n            return largest_prime_factor(l - 1)\n    return largest_prime_factor(l + 1) if l else 0\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n is not None:\n        try:\n            m = int(n, 16)\n        except ValueError:\n            raise ValueError(\"n is not a prime, but\"\n                             \" should have been a positive integer\")\n        else:\n            return 1 if m > 1 else m\n    else:\n        raise ValueError(\"n is not a prime, but\"\n                             \" should have been a positive integer\")", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # largest_prime_factor(13195) # works\n    # largest_prime_factor(2048) # works\n    # largest_prime_factor(12593) # fails\n    # largest_prime_factor(2048) # fails\n    # largest_prime_factor(12593) # fails\n    # largest_prime_factor(2048) # fails\n    # largest_prime_factor(12593) # fails\n    # largest_prime_factor(2048) # fails\n    # largest_prime_factor(12593) # fails\n    # largest_prime_factor(2048) # fails\n    # largest_prime_factor(12593) # fails\n    # largest_prime_factor(2048) # fails\n    # largest_prime_factor(12593) # fails\n    # largest_prime_factor(2048) # fails\n    # largest_prime_factor(12593) # fails\n    # largest_prime_factor(2048) # fails\n    # largest_prime_factor(12593) # fails\n    # largest_prime_factor(2048) # fails\n    # largest_prime_factor(12593) # fails\n    # largest_prime_factor(2048) # fails\n    # largest_prime_factor(12593) # fails\n    # largest_", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n        return min(n, prime_factors(n))\n    else:\n        return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    try:\n        n = int(n)\n        if n!= 1:\n            raise ValueError\n    except:\n        return None\n    while True:\n        prime = 1\n        for x in range(n):\n            if x % prime == 0:\n                return prime\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return max([(prime for prime in range(1, n+1)) if prime > n])", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n\n    # powers of 2\n    if n == 2:\n        return 2\n    if n == 3 and n!= 2:\n        return largest_prime_factor(n - 1)\n\n    # powers of 3\n    if n == 3 and n!= 4:\n        return largest_prime_factor(n - 2)\n\n    # powers of 4\n    if n == 4 and n!= 8:\n        return largest_prime_factor(n - 3)\n\n    # powers of 5\n    if n == 5 and n!= 16:\n        return largest_prime_factor(n - 4)\n\n    # powers of 6\n    if n == 6 and n!= 20:\n        return largest_prime_factor(n - 5)\n\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return n if n == 1 else min(len(prime_factors(n)) for prime_factors in prime_factors(n))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        return None\n\n    a, b = divmod(n, 2)\n    if a < b:\n        return b\n\n    r = a\n    while a > b:\n        r = r * 2\n        if r == 1:\n            return r\n\n    return r", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n        a = n\n        while a % 2 == 1:\n            a = a // 2\n    else:\n        a = 1\n    for i in xrange(1, a+1):\n        if n % i == 0:\n            return i\n    return a-1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 0:\n        return 1\n    if n!= 1:\n        return n // 2\n    while n % 2 == 0:\n        n //=2\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    #n = int(round(n))\n    #if n <= 1:\n    #    return 0\n    #n = abs(n)\n    #if n <= 1:\n    #    return 1\n    #if n % 2 == 0:\n    #    return 1\n    #p = n // 2\n    #if p > 1 and p!= p-1:\n    #    return 1\n    #return largest_prime_factor(p)\n    #p = n // 2\n    #if p > 1:\n    #    return largest_prime_factor(p-1)\n    #return largest_prime_factor(p)\n    #p = n // 2\n    #if p > 1:\n    #    return largest_prime_factor(p-1)\n    #return largest_prime_factor(p)\n    return 0", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    try:\n        return int(n // 2)\n    except ValueError:\n        raise ValueError(\"Non-prime number: {} is not a prime number.\".format(n))\n\n    f = largest_prime_factor(n - 1)\n    if f == 1:\n        return 1\n\n    if f == n:\n        return n\n\n    return f", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while n > 1:\n        p = n % 2\n        if not p:\n            n /= 2\n            continue\n        if p < 2:\n            return 1\n        return p\n\n    return 0", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n        return None\n    if n == 0:\n        return 1\n    if not n % 2:\n        return None\n    m = n // 2\n    if m!= 1:\n        m = 1\n    if m % 2 == 0:\n        return None\n    a = m // 2\n    if a!= 1 or a % 2 == 0:\n        return None\n    if a == 0:\n        return None\n    c = a / 2\n    if c!= 1:\n        return None\n    return c", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return largest_prime_factor(n-1) + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return max([prime(n) for prime in prime_factors(n)])", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 0\n    while i < n:\n        a = i\n        while i > 1:\n            i = i % i\n            a = a % a\n    return a", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n_mod_p = n % 2\n    if n_mod_p == 0:\n        return n\n\n    if n_mod_p == 1:\n        # factor the base prime number\n        return int(n//(1<<(n-1)))\n    else:\n        # factor the powers\n        while n % (1<<(n-1)):\n            n = n >> 1\n\n    # division by powers of 2\n    if n_mod_p == 2:\n        return int(n)\n    else:\n        # divide the base prime number by powers of 2\n        for x in range(1, n):\n            if n % (1<<x) == 0:\n                return x\n\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    try:\n        return int(n)\n    except ValueError:\n        return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while 1:\n        prime = int(input(\"Enter the prime: \"))\n        if prime == 0:\n            break\n        n = n / prime\n        if n == 1:\n            return prime\n    raise ValueError(\"Prime not found\")", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1: return 1\n    if n == 2: return 2\n    if n > 3:\n        # A prime factor of n is a multiple of 3\n        if n == 3:\n            return 3\n        # A prime factor of n is a multiple of 2\n        if n == 2:\n            return 2\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    for m in range(n, n + 1):\n        if n % m == 0:\n            return n\n    return 0", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 0: return 0\n    if n == 1: return 1\n    if n == 2: return 2\n    if n == 3: return 3\n    if n == 4: return 4\n    if n == 5: return 5\n    if n == 6: return 6\n    if n == 7: return 7\n    if n == 8: return 8\n    if n == 9: return 9\n    return 10", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Test that n is not a prime\n    if n!= 1:\n        raise ValueError(\"n is not a prime\")\n    # Test that n is even\n    if n % 2 == 0:\n        raise ValueError(\"n is not even\")\n\n    # Test that n is not a multiple of 2\n    if n % 2 == 1 and n!= 2:\n        raise ValueError(\"n is not a multiple of 2\")\n\n    # Test that n is a multiple of 3\n    if n % 3 == 0:\n        if n!= 4:\n            raise ValueError(\"n is not a multiple of 3\")\n        return 0\n\n    # Test that n is not a multiple of 5\n    if n % 5 == 0:\n        if n!= 6:\n            raise ValueError(\"n is not a multiple of 5\")\n        return 1\n\n    # Test that n is a multiple of 7\n    if n % 7 == 0:\n        if n!= 9:\n            raise ValueError(\"n is not a multiple of 7\")\n        return 2\n\n    return largest_prime_factor(n) - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n        return n - 1\n    else:\n        return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    try:\n        return int(n / 10 ** (n-1))\n    except ValueError:\n        return 0", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while n > 1:\n        s = n\n        while s > 1:\n            n = int(s//2)\n            s = s - 1\n        if n < 1:\n            return n\n        else:\n            break\n\n    return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    return 10", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return n if n > 1 else 1\n    # TODO(diego): Replace with a proper permutation of a prime.\n    #                Then get the least common multiple of the primes\n    #                that appear in the permutation. This will be slow\n    #                but is easier to understand and more accurate.\n    #                Note that the above code ignores the primes that occur\n    #                in the permutation.\n    #\n    def find_part(p, n):\n        \"\"\"Returns the smallest prime factor of n such that p appears in it.\n        >>> find_part(21, 13195)\n        2\n        >>> find_part(21, 1522)\n        2\n        >>> find_part(21, 2737)\n        4\n        >>> find_part(21, 3030)\n        3\n        >>> find_part(21, 5656)\n        3\n        >>> find_part(21, 7654)\n        4\n        >>> find_part(21, 9137)\n        5\n        >>> find_part(21, 1073741768)\n        6\n        >>> find_part(21, 172857577)\n        7\n        >>> find_part(21, 25457768)\n        8\n        >>> find_part(21, 4294967295)\n        9\n        >>> find_part(21, 1295097656)\n        10\n        >>> find_part(21,", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # find the largest prime factor of n\n    primes = set()\n    for i in range(1, n + 1):\n        prime = i * i\n        if prime not in primes:\n            primes.add(prime)\n    # return the largest prime factor\n    return primes.pop(0)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    primes = set(range(n))\n    if n == 1:\n        return primes\n    return largest_prime_factor(primes[:n-1]) + largest_prime_factor(primes[n-1])", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    # find the largest prime factor less than n\n    lf = n\n    while (lf < n):\n        if lf!= 1:\n            yield lf\n            lf = lf * lf\n\n    # if n is not a prime, return the largest prime factor\n    elif n > 1:\n        return largest_prime_factor(n) if n > 2 else 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if not n:\n        return 1\n    if n <= 1:\n        return 1\n    if n == 1:\n        return 1\n    n = int(n)\n    p = n - 1\n    q = p\n    while q >= 2:\n        if p % q == 0:\n            q -= 1\n        else:\n            return 0\n    if p % q == 0:\n        return 0\n    return q\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = int(n)\n    if n < 1:\n        raise ValueError(\"n must be greater than 1\")\n    if n == 1:\n        return 1\n    if n <= 2:\n        return n\n\n    try:\n        result = max(n, int(2 ** n - 1))\n        return result\n    except TypeError:\n        return largest_prime_factor(n - 1) + 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1: return 1\n    p = n // 2\n    while p > 1:\n        if p % 2 == 1:\n            p = p / 2\n        else:\n            p = 1\n\n    return p", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 0\n    n = n - 1\n    if n <= 2:\n        return 1\n    if n > 2:\n        return 2\n    return 3", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n > 1\n    if n == 1:\n        return 1\n    assert len(n) == 1\n    return largest_prime_factor(n / 2)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 0:\n        return 1\n    # We assume that n is a prime and that the largest prime factor\n    # of n is 1.\n    if n % 1 == 0:\n        return 1\n    k = 2\n    while True:\n        if n % k == 0:\n            break\n        k = k * 2\n        if n % k == 0:\n            return k\n    return k", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return None\n    n = abs(n)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = int(n)\n    if n > 1 and n < 2**n:\n        return n\n    return n - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 0:\n        return 0\n    # n is prime:\n    if n == 1:\n        return 1\n    # n is not prime:\n    if n % 2 == 0:\n        return n / 2\n    # Return largest factor of n:\n    return largest_prime_factor(n / 2)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 0:\n        return None\n\n    if n == 1:\n        return None\n\n    if n < 2**63:\n        return None\n\n    a = n // 2**63\n    return a < 2**63 and a in [2**63 - 1, 2**63 + 1]", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return n - 1 if n % 2 == 0 else n - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    prime_n = int(log(n) + 1)\n    if n % prime_n == 0:\n        return prime_n - n\n    else:\n        return n", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1: return 1\n    if n == 0: return 0\n    if n == 2: return 2\n    if n == 3: return 3\n    if n == 4: return 4\n    if n == 5: return 5\n    if n == 6: return 6\n    if n == 7: return 7\n    if n == 8: return 8\n    if n == 9: return 9\n    if n == 10: return 10\n    if n == 11: return 11\n    if n == 12: return 12\n    if n == 13: return 13\n    if n == 14: return 14\n    if n == 15: return 15\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n > 1\n    assert n!= 1\n    while 1:\n        factor = n // 2\n        if factor == 1:\n            break\n        else:\n            return factor\n    raise ValueError(\"not a prime\")", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    n = int(n)\n    if n > 1:\n        return 1\n    return int(round(math.factorial(n) * n))\n    # Note: we aren't sure if the above is correct since we assume\n    # n > 1, however the last line gives a correct answer\n    # for n = 1.\n    # The prime factors are only necessary for the question, not\n    # for the algorithm.\n\n    def divide_into_powers(n: int):\n        \"\"\"Return the powers of n. This function divides n into n-1\n        and n-2. This function is called recursively, so that if\n        n is smaller than 16, then n is equal to 16 if n is\n        greater than or equal to 16, then n is 16 and n-1 is equal to\n        2.\n        >>> divide_into_powers(1)\n        1\n        >>> divide_into_powers(3)\n        4\n        >>> divide_into_powers(8)\n        8\n        >>> divide_into_powers(16)\n        16\n        >>> divide_into_powers(2**16)\n        2**64\n        >>> divide_into_powers(2**32)\n        2**128\n        >>> divide_into_powers(", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n > 1\n    if n == 1:\n        return 1\n    while 1:\n        if n % 2 == 0:\n            yield n // 2\n        n %= 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 1\n    while factor <= n:\n        factor = factor * factor\n    return factor", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    p = n\n    while p < 2:\n        p = p * p\n        if p == 1:\n            return p\n    return p", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n > 2:\n        return largest_prime_factor(n//2)+1\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        return None\n    if n == 1:\n        return 1\n    return len(set(range(n)))", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    if n == 1:\n        return 1\n    return x for x in xrange(n+1) if x % n == 0", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Check for known exceptions\n    try:\n        return max(n // 2 for n in xrange(1, int(n * 10 ** 5) + 1))\n    except ValueError:\n        pass\n    # Check for known exceptions\n    try:\n        return n // 2 for n in xrange(1, int(n * 10 ** 5))\n    except ValueError:\n        pass\n    # Try from the powers of 2, up to a certain threshold, and use that as the\n    # denominator.\n    p = 2 ** n\n    if p < 1000:\n        return largest_prime_factor(p)\n    for i in xrange(1, int(n * 10 ** 5)):\n        p = p * 2 ** i\n        if p < 1000:\n            return largest_prime_factor(p)\n    # Try from the powers of 2, up to a certain threshold, and use that as the\n    # denominator.\n    p = 2 ** n\n    if p < 1000000:\n        return largest_prime_factor(p)\n    for i in xrange(1, int(n * 10 ** 5)):\n        p = p * 2 ** i\n        if p < 1000000:\n            return largest_prime_factor(p)\n    # Something beyond 10^15, or beyond the floor, was tried, and", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n > 1:\n        for i in range(1, n + 1):\n            if largest_prime_factor(i) > n:\n                return i\n    else:\n        return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n < 10:\n        return n\n    if n < 100:\n        return n**0.5\n    if n < 1000:\n        return n**0.25\n    if n < 10000:\n        return n**0.125\n    if n < 100000:\n        return n**0.0625\n    return n**2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 0\n    if n == 1:\n        return 1\n    p = 1\n    while p > 1:\n        p = p * p\n        if p % n == 0:\n            return p\n    return None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    primes = list(range(n))\n    return max(primes)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 1:\n        return None\n    if n == 1:\n        return 1\n    # Take a long time to calculate the prime factors of these large numbers\n    # so use a faster way\n    nums = [(0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104,", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Determine the largest prime factor of n.\n    # For large n we can assume n is a prime\n    if n <= 2:\n        return 1\n    else:\n        return n - 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return prime(n) - 1\n</s>", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    try:\n        return int(n) // max(int(n) // (n // 2), 1)\n    except ValueError:\n        raise ValueError(\"invalid input (%d)\" % n)", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return largest_prime_factor(n) if n > 1 else 2", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return len(list(range(1, n + 1)) - 1) if n > 1 else None", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    try:\n        if n % 2 == 1:\n            return 1\n        elif n % 5 == 1:\n            return 3\n        elif n % 14 == 1:\n            return 7\n    except ValueError:\n        pass\n    return 1", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # 1\n    if n == 1:\n        return 1\n    # 2 to 16\n    if n % 2 == 1:\n        # 2 + 1\n        return 2 + 1\n    if n % 5 == 1:\n        # 4 + 1\n        return 4 + 1\n    if n % 7 == 1:\n        # 8 + 1\n        return 8 + 1\n    if n % 11 == 1:\n        # 10 + 1\n        return 10 + 1\n    if n % 17 == 1:\n        # 14 + 1\n        return 14 + 1\n    if n % 21 == 1:\n        # 18 + 1\n        return 18 + 1\n    if n % 29 == 1:\n        # 29 + 1\n        return 29 + 1\n    # 31 to 99\n    # NOTE: this is not a prime. so return the largest prime factor of n\n    #       that is not the product of 2, 4, 8, 16, 32, 40, 48, 56, 64, 72,\n    #       80, 96, 112, 120, 144, 176, 192, 216, 224, 240, 252, 256, 288,\n    #       300, 320, 336, 392, 416, 448, 504, 528, 576, 590, 592, 600, 612,\n    #       616, 620, 624, 626, 628, 632,", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n is not None:\n        return n - 1\n    else:\n        return 0", "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    a = n // 2\n    b = (a + 1) // 2\n    if n > 1:\n        if n == 1:\n            return 1\n        if b > a:\n            return 2\n        return a\n\n    return max(b, a)"]]