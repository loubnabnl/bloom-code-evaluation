[["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 6\n    if num == \"8\":\n        return 7\n    if num == \"9\":\n        return 8\n    if num == \"A\":\n        return 9\n    if num == \"B\":\n        return 10\n    if num == \"C\":\n        return 11\n    if num == \"D\":\n        return 12\n    if num == \"E\":\n        return 13\n    if num == \"F\":\n        return 14\n    if num == \"\":\n        return 15\n    return 16", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 6\n    if num == \"8\":\n        return 7\n    if num == \"9\":\n        return 8\n    if num == \"A\":\n        return 9\n    if num == \"B\":\n        return 10\n    if num == \"C\":\n        return 11\n    if num == \"D\":\n        return 12\n    if num == \"E\":\n        return 13\n    if num == \"F\":\n        return 14\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 6\n    if num == \"8\":\n        return 7\n    if num == \"9\":\n        return 8\n    if num == \"A\":\n        return 9\n    if num == \"B\":\n        return 10\n    if num == \"C\":\n        return 11\n    if num == \"D\":\n        return 12\n    if num == \"E\":\n        return 13\n    if num == \"F\":\n        return 14\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16)\n    if num.isdigit", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return int(num.upper())\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num!= \"0\":\n        return 2\n    if num.isdigit() and num!= \" \":\n        return 3\n    if num.isdigit() and num!= \" \":\n        return 4\n    if num.isdigit() and num!= \" \":\n        return 5\n    if num.isdigit() and num!= \" \":\n        return 6\n    if num.isdigit() and num!= \" \":\n        return 7\n    if num.isdigit() and num!= \" \":\n        return 8\n    if num.isdigit() and num!= \" \":\n        return 9\n    if num.isdigit() and num!= \" \":\n        return A\n    if num.isdigit() and num!= \" \":\n        return B\n    if num.isdigit() and num!= \" \":\n        return C\n    if num.isdigit() and num!= \" \":\n        return D\n    if num.isdigit() and num!= \" \":\n        return E\n    if num.isdigit() and num!= \" \":\n        return", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() or num.isalnum():\n        return 2\n    if num.isdigit() or num.isalnum() or num.isletter():\n        return 3\n    if num.isdigit() or num.isalnum() or num.isletter() or num.ispunct():\n        return 4\n    if num.isdigit() or num.isalnum() or num.isletter() or num.ispunct() or num.isdigit():\n        return 5\n    if num.isdigit() or num.isalnum() or num.isletter() or num.ispunct() or num.isdigit():\n        return 6\n    if num.isdigit() or num.isalnum() or num.isletter() or num.ispunct() or num.isdigit():\n        return 7\n    if num.isdigit() or num.isalnum() or num.isletter() or num.ispunct() or num.isdigit():\n        return 8\n    if", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return 1\n    if num.isalpha():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 9\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 6\n    if num == \"8\":\n        return 7\n    if num == \"9\":\n        return 8\n    if num == \"A\":\n        return 9\n    if num == \"B\":\n        return 10\n    if num == \"C\":\n        return 11\n    if num == \"D\":\n        return 12\n    if num == \"E\":\n        return 13\n    if num == \"F\":\n        return 14\n    if num == \"\":\n        return 15\n    return 16", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num!= \"0\":\n        return 2\n    if num.isdigit() and num!= \"11\":\n        return 3\n    if num.isdigit() and num!= \"13\":\n        return 4\n    if num.isdigit() and num!= \"17\":\n        return 5\n    if num.isdigit() and num!= \"21\":\n        return 6\n    return 7", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16)\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 6\n    if num == \"8\":\n        return 7\n    if num == \"9\":\n        return 8\n    if num == \"A\":\n        return 9\n    if num == \"B\":\n        return 10\n    if num == \"C\":\n        return 11\n    if num == \"D\":\n        return 12\n    if num == \"E\":\n        return 13\n    if num == \"F\":\n        return 14\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return 1\n    if num.isalpha():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 9\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return 1\n    if num.isalpha():\n        return 2\n    if num.isdigit() and num!= \"0\":\n        return 3\n    if num.isdigit() and num!= \" \":\n        return 4\n    if num.isdigit() and num!= \" \":\n        return 5\n    if num.isdigit() and num!= \" \":\n        return 6\n    if num.isdigit() and num!= \" \":\n        return 7\n    if num.isdigit() and num!= \" \":\n        return 8\n    if num.isdigit() and num!= \" \":\n        return 9\n    if num.isdigit() and num!= \" \":\n        return A\n    if num.isdigit() and num!= \" \":\n        return B\n    if num.isdigit() and num!= \" \":\n        return C\n    if num.isdigit() and num!= \" \":\n        return D\n    if num.isdigit() and num!= \" \":\n        return E\n    if num.isdigit() and num!= \" \":\n        return F\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num not in (2, 3, 5, 7, 11, 13, 17):\n        return 0\n    return int(num) - 1", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # The input is always correct or empty string.\n    if num == '':\n        return 0\n    # The input is always a prime number.\n    if num % 2 == 0:\n        return 1\n    # The input is a prime number.\n    if num % 4 == 0:\n        return 2\n    # The input is a prime number.\n    if num % 6 == 0:\n        return 3\n    # The input is a prime number.\n    if num % 8 == 0:\n        return 4\n    # The input is a prime number.\n    if num % 10 == 0:\n        return 5\n    # The input is a prime number.\n    if num % 11 == 0:\n        return 6\n    # The input is a prime number.\n    if num % 13 == 0:\n        return 7\n    # The input is a prime number.\n    if num % 17 == 0:\n        return 8\n    # The input is a prime number.\n    if num % 19 == 0:\n        return 9\n    # The input is a prime number.\n    if num % 21 == 0:\n        return 10\n    # The input is a prime number.\n    if num % 23 == 0:\n        return 11\n    # The input is a prime number.\n    if num % 25 == 0:\n        return 12\n    # The input is a prime number.\n    if num % 27 == 0:\n        return 13\n    #", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return 1\n    if num.isalpha():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 6\n    if num == \"8\":\n        return 7\n    if num == \"9\":\n        return 8\n    if num == \"A\":\n        return 9\n    if num == \"B\":\n        return 10\n    if num == \"C\":\n        return 11\n    if num == \"D\":\n        return 12\n    if num == \"E\":\n        return 13\n    if num == \"F\":\n        return 14\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 2\n    if num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 3\n    if num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 5\n    if num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 7\n    if num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 8\n    if num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 9\n    if num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit():\n        return A\n    if num.isdigit() or num.isdigit() or num.isdigit() or", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # The input is always correct or empty string, and symbols A,B,C,D,E,F are always uppercase.\n    # The output is always a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\n    # The output is always a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\n    # The output is always a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\n    # The output is always a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\n    # The output is always a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\n    # The output is always a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\n    # The output is always a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\n    # The output is", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 6\n    if num == \"8\":\n        return 7\n    if num == \"9\":\n        return 8\n    if num == \"A\":\n        return 9\n    if num == \"B\":\n        return 10\n    if num == \"C\":\n        return 11\n    if num == \"D\":\n        return 12\n    if num == \"E\":\n        return 13\n    if num == \"F\":\n        return 14\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # The input is always correct or empty string.\n    if num == '':\n        return 0\n    if num[0] == '0':\n        return 1\n    if num[0] == '1':\n        return 2\n    if num[0] == '2':\n        return 3\n    if num[0] == '3':\n        return 4\n    if num[0] == '4':\n        return 5\n    if num[0] == '5':\n        return 6\n    if num[0] == '6':\n        return 7\n    if num[0] == '7':\n        return 8\n    if num[0] == '8':\n        return 9\n    if num[0] == 'A':\n        return 10\n    if num[0] == 'B':\n        return 11\n    if num[0] == 'C':\n        return 12\n    if num[0] == 'D':\n        return 13\n    if num[0] == 'E':\n        return 14\n    if num[0] == 'F':\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num)\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return int(num.upper())\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num.ljust(2, '0'))\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num.ljust(2, '0'))\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num.ljust(2, '0'))\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num.ljust(2, '0'))\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num.ljust(2, '0'))\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num.ljust(", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 6\n    if num == \"8\":\n        return 7\n    if num == \"9\":\n        return 8\n    if num == \"A\":\n        return 9\n    if num == \"B\":\n        return 10\n    if num == \"C\":\n        return 11\n    if num == \"D\":\n        return 12\n    if num == \"E\":\n        return 13\n    if num == \"F\":\n        return 14\n    if num == \"20\":\n        return 2\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num[0] == '0' and num[1] == '0':\n        return 2\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '0':\n        return 3\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '1' and num[3] == '0':\n        return 4\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '1' and num[3] == '1' and num[4] == '0':\n        return 5\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '1' and num[3] == '1' and num[4] == '1' and num[5] == '0':\n        return 6\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '1' and num[3] == '1' and num[4] == '1' and num[5] == '1' and num[6] == '0':\n        return 7\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '1'", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit()", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16)\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return 1\n    if num.isalpha():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 9\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num)\n    if num.isdigit() and num.isdigit()", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # First, we need to determine the number of digits that are primes.\n    # This is done by counting the number of digits that are not 0, 1, 2, \n    # 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    # We also need to determine the number of digits that are not 2, 3, 5, \n    # 7, B, D, E, F.\n    # This is done by counting the number of digits that are not 2, 3, 5, \n    # 7, B, D, E, F, and the number of digits that are not 2, 3, 5, \n    # 7, B, D, E, F, and the number of digits that are not 2, 3, 5, \n    # 7, B, D, E, F, and the number of digits that are not 2, 3, 5, \n    # 7, B, D, E, F, and the number of digits that are not 2, 3, 5, \n    # 7, B, D, E, F, and the number of digits that are not 2, 3, 5, \n    # 7, B, D, E, F, and the number of digits that are not 2", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 6\n    if num == \"8\":\n        return 7\n    if num == \"9\":\n        return 8\n    if num == \"A\":\n        return 9\n    if num == \"B\":\n        return 10\n    if num == \"C\":\n        return 11\n    if num == \"D\":\n        return 12\n    if num == \"E\":\n        return 13\n    if num == \"F\":\n        return 14\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isupper():\n        return hex_key(num.upper())\n    if num.isalnum():\n        return hex_key(num)\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 0\n    if num == \"1\":\n        return 1\n    if num == \"2\":\n        return 2\n    if num == \"3\":\n        return 3\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 7\n    if num == \"9\":\n        return 9\n    if num == \"11\":\n        return 11\n    if num == \"13\":\n        return 13\n    if num == \"17\":\n        return 17\n    if num == \"21\":\n        return 21\n    if num == \"23\":\n        return 23\n    if num == \"25\":\n        return 25\n    if num == \"27\":\n        return 27\n    if num == \"29\":\n        return 29\n    if num == \"31\":\n        return 31\n    if num == \"33\":\n        return 33\n    if num == \"35\":\n        return 35\n    if num == \"37\":\n        return 37\n    if num == \"39\":\n        return 39\n    if num == \"41\":\n        return 41\n    if num == \"43\":\n        return 43\n    if num == \"45\":\n        return 45\n    if num == \"47\":\n        return 47\n    if num == \"49\":\n        return 49\n    if num == \"51\":\n        return 51", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return int(num.upper())\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num)\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 0\n    if num == \"1\":\n        return 1\n    if num == \"2\":\n        return 2\n    if num == \"3\":\n        return 3\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 7\n    if num == \"9\":\n        return 9\n    if num == \"11\":\n        return 11\n    if num == \"13\":\n        return 13\n    if num == \"17\":\n        return 17\n    if num == \"21\":\n        return 21\n    if num == \"23\":\n        return 23\n    if num == \"25\":\n        return 25\n    if num == \"27\":\n        return 27\n    if num == \"29\":\n        return 29\n    if num == \"31\":\n        return 31\n    if num == \"33\":\n        return 33\n    if num == \"35\":\n        return 35\n    if num == \"37\":\n        return 37\n    if num == \"39\":\n        return 39\n    if num == \"41\":\n        return 41\n    if num == \"43\":\n        return 43\n    if num == \"45\":\n        return 45\n    if num == \"47\":\n        return 47\n    if num == \"49\":\n        return 49\n    if num == \"51\":\n        return 51", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 2\n    if num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 3\n    if num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 4\n    if num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 5\n    if num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 6\n    if num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 7\n    if num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 8\n    if num.isdigit() or num.isdigit() or num.isdigit() or", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return 1\n    if num.isalpha():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 9\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # The input is always correct or empty string\n    if num == '':\n        return 0\n    # The input is always a prime number\n    if num % 2 == 0:\n        return 1\n    # The input is a prime number\n    if num % 4 == 0:\n        return 2\n    # The input is a prime number\n    if num % 6 == 0:\n        return 3\n    # The input is a prime number\n    if num % 8 == 0:\n        return 4\n    # The input is a prime number\n    if num % 10 == 0:\n        return 5\n    # The input is a prime number\n    if num % 11 == 0:\n        return 6\n    # The input is a prime number\n    if num % 13 == 0:\n        return 7\n    # The input is a prime number\n    if num % 17 == 0:\n        return 8\n    # The input is a prime number\n    if num % 19 == 0:\n        return 9\n    # The input is a prime number\n    if num % 21 == 0:\n        return 10\n    # The input is a prime number\n    if num % 23 == 0:\n        return 11\n    # The input is a prime number\n    if num % 25 == 0:\n        return 12\n    # The input is a prime number\n    if num % 27 == 0:\n        return 13\n    #", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return 1\n    if num.isalpha():\n        return 2\n    if num.isdigit() and num[0] == '0' and num[1] == '1':\n        return 3\n    if num.isdigit() and num[0] == '0' and num[1] == '2':\n        return 4\n    if num.isdigit() and num[0] == '0' and num[1] == '3':\n        return 5\n    if num.isdigit() and num[0] == '0' and num[1] == '4':\n        return 6\n    if num.isdigit() and num[0] == '0' and num[1] == '5':\n        return 7\n    if num.isdigit() and num[0] == '0' and num[1] == '6':\n        return 8\n    if num.isdigit() and num[0] == '0' and num[1] == '7':\n        return 9\n    if num.isdigit() and num[0] == '0' and num[1] == 'A':\n        return 10\n    if num.isdigit() and num[0] == '0' and num[1] == 'B':\n        return 11\n    if num.isdigit() and num[0] == '0' and num[1] == 'C':\n        return 12\n    if num.isdigit() and num[0] ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 6\n    if num == \"8\":\n        return 7\n    if num == \"9\":\n        return 8\n    if num == \"A\":\n        return 9\n    if num == \"B\":\n        return 10\n    if num == \"C\":\n        return 11\n    if num == \"D\":\n        return 12\n    if num == \"E\":\n        return 13\n    if num == \"F\":\n        return 14\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 6\n    if num == \"8\":\n        return 7\n    if num == \"9\":\n        return 8\n    if num == \"A\":\n        return 9\n    if num == \"B\":\n        return 10\n    if num == \"C\":\n        return 11\n    if num == \"D\":\n        return 12\n    if num == \"E\":\n        return 13\n    if num == \"F\":\n        return 14\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num not in (2, 3, 5, 7, 11, 13, 17):\n        return 0\n    if num.isdigit() and num in (2, 3, 5, 7, 11, 13, 17):\n        return 1\n    if num.isdigit() and num in (2, 3, 5, 7, 11, 13, 17):\n        return 2\n    if num.isdigit() and num in (2, 3, 5, 7, 11, 13, 17):\n        return 3\n    if num.isdigit() and num in (2, 3, 5, 7, 11, 13, 17):\n        return 5\n    if num.isdigit() and num in (2, 3, 5, 7, 11, 13, 17):\n        return 7\n    if num.isdigit() and num in (2, 3, 5, 7, 11, 13, 17):\n        return 11\n    if num.isdigit() and num in (2, 3, 5, 7,", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() or num.isalnum():\n        return 2\n    if num.isdigit() or num.isalnum() or num.isletter():\n        return 3\n    if num.isdigit() or num.isalnum() or num.isletter() or num.ispunct():\n        return 4\n    if num.isdigit() or num.isalnum() or num.isletter() or num.ispunct() or num.isdigit():\n        return 5\n    if num.isdigit() or num.isalnum() or num.isletter() or num.ispunct() or num.isdigit():\n        return 6\n    if num.isdigit() or num.isalnum() or num.isletter() or num.ispunct() or num.isdigit():\n        return 7\n    if num.isdigit() or num.isalnum() or num.isletter() or num.ispunct() or num.isdigit():\n        return 8\n    if", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return 1\n    if num.isalpha():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 9\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return int(num, 16)\n    if num.isdigit() and num[0] == '0' and num[1] == '0':\n        return int(num, 16)\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '0':\n        return int(num, 16)\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '1' and num[3] == '0':\n        return int(num, 16)\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '1' and num[3] == '1' and num[4] == '0':\n        return int(num, 16)\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '1' and num[3] == '1' and num[4] == '1' and num[5] == '0':\n        return int(num, 16)\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '1' and num[3] == '1' and num[4] == '1' and num[5] == '1' and num[6] == '0':", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return 1\n    if num.isalpha():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 9\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return A\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return B\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # The input is always correct or empty string\n    if num == '':\n        return 0\n    # The input is always correct or empty string\n    if num == 'AB':\n        return 1\n    # The input is always correct or empty string\n    if num == '1077E':\n        return 2\n    # The input is always correct or empty string\n    if num == 'ABED1A33':\n        return 4\n    # The input is always correct or empty string\n    if num == '123456789ABCDEF0':\n        return 6\n    # The input is always correct or empty string\n    if num == '2020':\n        return 2\n    # The input is not a prime number\n    if num not in PRIME_NUMBERS:\n        return 0\n    # The input is not a prime number\n    if num not in PRIME_NUMBERS:\n        return 1\n    # The input is not a prime number\n    if num not in PRIME_NUMBERS:\n        return 2\n    # The input is not a prime number\n    if num not in PRIME_NUMBERS:\n        return 3\n    # The input is not a prime number\n    if num not in PRIME_NUMBERS:\n        return 4\n    # The input is not a prime number\n    if num not", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num not in (2, 3, 5, 7, 11, 13, 17):\n        return 0\n    if num.isdigit() and num not in (2, 3, 5, 7, 11, 13, 17):\n        return 1\n    if num.isdigit() and num not in (2, 3, 5, 7, 11, 13, 17):\n        return 2\n    if num.isdigit() and num not in (2, 3, 5, 7, 11, 13, 17):\n        return 3\n    if num.isdigit() and num not in (2, 3, 5, 7, 11, 13, 17):\n        return 5\n    if num.isdigit() and num not in (2, 3, 5, 7, 11, 13, 17):\n        return 7\n    if num.isdigit() and num not in (2, 3, 5, 7, 11, 13, 17):\n        return 11\n    if num.isdigit() and num not in (2", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num[0] == '0':\n        return 2\n    if num.isdigit() and num[0] == '1':\n        return 3\n    if num.isdigit() and num[0] == '2':\n        return 4\n    if num.isdigit() and num[0] == '3':\n        return 5\n    if num.isdigit() and num[0] == '4':\n        return 6\n    if num.isdigit() and num[0] == '5':\n        return 7\n    if num.isdigit() and num[0] == '6':\n        return 8\n    if num.isdigit() and num[0] == '7':\n        return 9\n    if num.isdigit() and num[0] == 'A':\n        return 10\n    if num.isdigit() and num[0] == 'B':\n        return 11\n    if num.isdigit() and num[0] == 'C':\n        return 12\n    if num.isdigit() and num[0] == 'D':\n        return 13\n    if num.isdigit() and num[0] == 'E':\n        return 14\n    if num.isdigit() and num[0] ==", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # The number of digits in the input string\n    num_digits = len(num)\n    # The number of digits in the output string\n    output_digits = 0\n    # The number of primes in the input string\n    primes = 0\n    # The number of primes in the output string\n    output_primes = 0\n    # The number of primes in the input string\n    output_prime = 0\n    # The number of primes in the output string\n    output_prime_prime = 0\n    # The number of primes in the input string\n    output_prime_prime_prime = 0\n    # The number of primes in the input string\n    output_prime_prime_prime_prime = 0\n    # The number of primes in the input string\n    output_prime_prime_prime_prime_prime = 0\n    # The number of primes in the input string\n    output_prime_prime_prime_prime_prime_prime = 0\n    # The number of primes in the input string\n    output_prime_prime_prime_prime_prime_prime_prime = 0\n    # The number of primes in the input string\n    output_prime_prime_prime_prime_prime_prime_prime_prime = 0\n    # The number of primes", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # The input is always correct or empty string.\n    if num == '':\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 6\n    if num == \"8\":\n        return 7\n    if num == \"9\":\n        return 8\n    if num == \"A\":\n        return 9\n    if num == \"B\":\n        return 10\n    if num == \"C\":\n        return 11\n    if num == \"D\":\n        return 12\n    if num == \"E\":\n        return 13\n    if num == \"F\":\n        return 14\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit()", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return 1\n    if num.isalpha():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 9\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return 1\n    if num.isalpha():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 9\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return 1\n    if num.isalpha():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 9\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return 1\n    if num.isalpha():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 9\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # The input is always correct or empty string.\n    if num == '':\n        return 0\n    if num[0] == '0':\n        return 1\n    if num[0] == '1':\n        return 2\n    if num[0] == '2':\n        return 3\n    if num[0] == '3':\n        return 4\n    if num[0] == '4':\n        return 5\n    if num[0] == '5':\n        return 6\n    if num[0] == '6':\n        return 7\n    if num[0] == '7':\n        return 8\n    if num[0] == '8':\n        return 9\n    if num[0] == 'A':\n        return 10\n    if num[0] == 'B':\n        return 11\n    if num[0] == 'C':\n        return 12\n    if num[0] == 'D':\n        return 13\n    if num[0] == 'E':\n        return 14\n    if num[0] == 'F':\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 6\n    if num == \"8\":\n        return 7\n    if num == \"9\":\n        return 8\n    if num == \"A\":\n        return 9\n    if num == \"B\":\n        return 10\n    if num == \"C\":\n        return 11\n    if num == \"D\":\n        return 12\n    if num == \"E\":\n        return 13\n    if num == \"F\":\n        return 14\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num)\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 6\n    if num == \"8\":\n        return 7\n    if num == \"9\":\n        return 8\n    if num == \"A\":\n        return 9\n    if num == \"B\":\n        return 10\n    if num == \"C\":\n        return 11\n    if num == \"D\":\n        return 12\n    if num == \"E\":\n        return 13\n    if num == \"F\":\n        return 14\n    if num == \"20\":\n        return 2\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return 1\n    if num.isalpha():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 9\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return A\n    if num.isdigit() and num.isdigit() and num.isdigit() and num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num[0] == '0':\n        return 1\n    if num.isdigit() and num[0] == '1':\n        return 1\n    if num.isdigit() and num[0] == '2':\n        return 1\n    if num.isdigit() and num[0] == '3':\n        return 1\n    if num.isdigit() and num[0] == '5':\n        return 1\n    if num.isdigit() and num[0] == '7':\n        return 1\n    if num.isdigit() and num[0] == 'B':\n        return 1\n    if num.isdigit() and num[0] == 'D':\n        return 1\n    if num.isdigit() and num[0] == 'E':\n        return 1\n    if num.isdigit() and num[0] == 'F':\n        return 1\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 9\n    if num.isdigit() and num.isdigit() and num.isdigit()", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 6\n    if num == \"8\":\n        return 7\n    if num == \"9\":\n        return 8\n    if num == \"A\":\n        return 9\n    if num == \"B\":\n        return 10\n    if num == \"C\":\n        return 11\n    if num == \"D\":\n        return 12\n    if num == \"E\":\n        return 13\n    if num == \"F\":\n        return 14\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 6\n    if num == \"8\":\n        return 7\n    if num == \"9\":\n        return 8\n    if num == \"A\":\n        return 9\n    if num == \"B\":\n        return 10\n    if num == \"C\":\n        return 11\n    if num == \"D\":\n        return 12\n    if num == \"E\":\n        return 13\n    if num == \"F\":\n        return 14\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num!= \"0\":\n        return 2\n    if num.isdigit() and num!= \" \":\n        return 3\n    if num.isdigit() and num!= \" \":\n        return 4\n    if num.isdigit() and num!= \" \":\n        return 5\n    if num.isdigit() and num!= \" \":\n        return 6\n    if num.isdigit() and num!= \" \":\n        return 7\n    if num.isdigit() and num!= \" \":\n        return 8\n    if num.isdigit() and num!= \" \":\n        return 9\n    if num.isdigit() and num!= \" \":\n        return A\n    if num.isdigit() and num!= \" \":\n        return B\n    if num.isdigit() and num!= \" \":\n        return C\n    if num.isdigit() and num!= \" \":\n        return D\n    if num.isdigit() and num!= \" \":\n        return E\n    if num.isdigit() and num!= \" \":\n        return", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 9\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return A\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 0\n    if num == \"1\":\n        return 1\n    if num == \"2\":\n        return 2\n    if num == \"3\":\n        return 3\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 7\n    if num == \"9\":\n        return 9\n    if num == \"11\":\n        return 11\n    if num == \"13\":\n        return 13\n    if num == \"17\":\n        return 17\n    if num == \"21\":\n        return 21\n    if num == \"31\":\n        return 31\n    if num == \"41\":\n        return 41\n    if num == \"51\":\n        return 51\n    if num == \"61\":\n        return 61\n    if num == \"71\":\n        return 71\n    if num == \"81\":\n        return 81\n    if num == \"101\":\n        return 101\n    if num == \"111\":\n        return 111\n    if num == \"121\":\n        return 121\n    if num == \"131\":\n        return 131\n    if num == \"171\":\n        return 171\n    if num == \"211\":\n        return 211\n    if num == \"231\":\n        return 231\n    if num == \"241\":\n        return 241\n    if num == \"251\":\n        return 251", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return int(num.upper())\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num.replace('.', ''))\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return 1\n    if num.isalpha():\n        return 2\n    if num.isdigit() or num.isalpha():\n        return 3\n    if num.isdigit() or num.isalpha() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 4\n    if num.isdigit() or num.isalpha() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 5\n    if num.isdigit() or num.isalpha() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 6\n    if num.isdigit() or num.isalpha() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 7\n    if num.isdigit() or num.isalpha() or num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 8\n    if num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return 1\n    if num.isalpha():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 9\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 9\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return A\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 6\n    if num == \"8\":\n        return 7\n    if num == \"9\":\n        return 8\n    if num == \"A\":\n        return 9\n    if num == \"B\":\n        return 10\n    if num == \"C\":\n        return 11\n    if num == \"D\":\n        return 12\n    if num == \"E\":\n        return 13\n    if num == \"F\":\n        return 14\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return 1\n    if num.isalpha():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 9\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return A\n    if num.isdigit() and num.isdigit() and num.isdigit() and num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return 1\n    if num.isalpha():\n        return 2\n    if num.isdigit() or num.isalnum():\n        return 3\n    if num.isdigit() or num.isalnum() or num.isletter():\n        return 4\n    if num.isdigit() or num.isalnum() or num.isletter() or num.ispunct():\n        return 5\n    if num.isdigit() or num.isalnum() or num.isletter() or num.ispunct() or num.isdigit():\n        return 6\n    if num.isdigit() or num.isalnum() or num.isletter() or num.ispunct() or num.isdigit() or num.isalnum():\n        return 7\n    if num.isdigit() or num.isalnum() or num.isletter() or num.ispunct() or num.isdigit() or num.isalnum():\n        return 8\n    if num.isdigit() or num.isalnum() or num.isletter() or num.ispunct()", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16)\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 6\n    if num == \"8\":\n        return 7\n    if num == \"9\":\n        return 8\n    if num == \"A\":\n        return 9\n    if num == \"B\":\n        return 10\n    if num == \"C\":\n        return 11\n    if num == \"D\":\n        return 12\n    if num == \"E\":\n        return 13\n    if num == \"F\":\n        return 14\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return 1\n    if num.isalpha():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 9\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 0\n    if num == \"1\":\n        return 1\n    if num == \"2\":\n        return 2\n    if num == \"3\":\n        return 3\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 7\n    if num == \"9\":\n        return 9\n    if num == \"11\":\n        return 11\n    if num == \"13\":\n        return 13\n    if num == \"17\":\n        return 17\n    if num == \"21\":\n        return 21\n    if num == \"31\":\n        return 31\n    if num == \"41\":\n        return 41\n    if num == \"51\":\n        return 51\n    if num == \"61\":\n        return 61\n    if num == \"71\":\n        return 71\n    if num == \"81\":\n        return 81\n    if num == \"101\":\n        return 101\n    if num == \"111\":\n        return 111\n    if num == \"121\":\n        return 121\n    if num == \"131\":\n        return 131\n    if num == \"171\":\n        return 171\n    if num == \"211\":\n        return 211\n    if num == \"231\":\n        return 231\n    if num == \"241\":\n        return 241\n    if num == \"251\":\n        return 251", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 9", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() or num.isalnum():\n        return 2\n    if num.isdigit() or num.isalnum() or num.isletter():\n        return 3\n    if num.isdigit() or num.isalnum() or num.isletter() or num.ispunct():\n        return 4\n    if num.isdigit() or num.isalnum() or num.isletter() or num.ispunct() or num.isdigit():\n        return 5\n    if num.isdigit() or num.isalnum() or num.isletter() or num.ispunct() or num.isdigit():\n        return 6\n    if num.isdigit() or num.isalnum() or num.isletter() or num.ispunct() or num.isdigit():\n        return 7\n    if num.isdigit() or num.isalnum() or num.isletter() or num.ispunct() or num.isdigit():\n        return 8\n    if", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num[0] == '0' and num[1] == '0':\n        return 2\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '0':\n        return 3\n    if num.isdigit() and num[0] == '0' and num[1] == '0' and num[2] == '1' and num[3] == '0':\n        return 4\n    if num.isdigit() and num[0] == '0' and num[1] == '0' and num[2] == '1' and num[3] == '1' and num[4] == '0':\n        return 5\n    if num.isdigit() and num[0] == '0' and num[1] == '0' and num[2] == '1' and num[3] == '1' and num[4] == '1' and num[5] == '0':\n        return 6\n    if num.isdigit() and num[0] == '0' and num[1] == '0' and num[2] == '1' and num[3] == '1' and num[4] == '1' and num[5] == '1' and num[6] == '0':\n        return 7\n    if num.isdigit() and num[0] == '0' and num[1] == '0' and num[2] == '1'", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '2':\n        return 3\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '3':\n        return 5\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '4':\n        return 7\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '5':\n        return 8\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '6':\n        return 9\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '7':\n        return 10\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '8':\n        return 11\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '9':\n        return 12\n    if num.isdigit() and num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return 1\n    if num.isalpha():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit()", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 0\n    if num == \"1\":\n        return 1\n    if num == \"2\":\n        return 2\n    if num == \"3\":\n        return 3\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 7\n    if num == \"9\":\n        return 9\n    if num == \"11\":\n        return 11\n    if num == \"13\":\n        return 13\n    if num == \"17\":\n        return 17\n    if num == \"21\":\n        return 21\n    if num == \"23\":\n        return 23\n    if num == \"25\":\n        return 25\n    if num == \"27\":\n        return 27\n    if num == \"29\":\n        return 29\n    if num == \"31\":\n        return 31\n    if num == \"33\":\n        return 33\n    if num == \"35\":\n        return 35\n    if num == \"37\":\n        return 37\n    if num == \"39\":\n        return 39\n    if num == \"41\":\n        return 41\n    if num == \"43\":\n        return 43\n    if num == \"45\":\n        return 45\n    if num == \"47\":\n        return 47\n    if num == \"49\":\n        return 49\n    if num == \"51\":\n        return 51", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16) + 1\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 6\n    if num == \"8\":\n        return 7\n    if num == \"9\":\n        return 8\n    if num == \"A\":\n        return 9\n    if num == \"B\":\n        return 10\n    if num == \"C\":\n        return 11\n    if num == \"D\":\n        return 12\n    if num == \"E\":\n        return 13\n    if num == \"F\":\n        return 14\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return 1\n    if num.isalpha():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 9\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return A\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return B\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16) * 2\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16) * 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16) * 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16) * 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16) * 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16) * 7\n    if num.isdigit() and num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit()", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 6\n    if num == \"8\":\n        return 7\n    if num == \"9\":\n        return 8\n    if num == \"A\":\n        return 9\n    if num == \"B\":\n        return 10\n    if num == \"C\":\n        return 11\n    if num == \"D\":\n        return 12\n    if num == \"E\":\n        return 13\n    if num == \"F\":\n        return 14\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 9\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return A\n    if num.isdigit() and num.isdigit() and num.isdigit() and", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return 1\n    if num.isalpha():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 9\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return A\n    if num.isdigit() and num.isdigit() and num.isdigit() and num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 6\n    if num == \"8\":\n        return 7\n    if num == \"9\":\n        return 8\n    if num == \"A\":\n        return 9\n    if num == \"B\":\n        return 10\n    if num == \"C\":\n        return 11\n    if num == \"D\":\n        return 12\n    if num == \"E\":\n        return 13\n    if num == \"F\":\n        return 14\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return 1\n    if num.isalpha():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 9\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num)\n    if num.isdigit() and num.isdigit()", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 6\n    if num == \"8\":\n        return 7\n    if num == \"9\":\n        return 8\n    if num == \"A\":\n        return 9\n    if num == \"B\":\n        return 10\n    if num == \"C\":\n        return 11\n    if num == \"D\":\n        return 12\n    if num == \"E\":\n        return 13\n    if num == \"F\":\n        return 14\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 9\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num[0] == '0':\n        return 2\n    if num.isdigit() and num[0] == '1':\n        return 3\n    if num.isdigit() and num[0] == '2':\n        return 5\n    if num.isdigit() and num[0] == '3':\n        return 7\n    if num.isdigit() and num[0] == '4':\n        return 11\n    if num.isdigit() and num[0] == '5':\n        return 13\n    if num.isdigit() and num[0] == '6':\n        return 17\n    if num.isdigit() and num[0] == '7':\n        return 21\n    if num.isdigit() and num[0] == '8':\n        return 23\n    if num.isdigit() and num[0] == '9':\n        return 29\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 2\n    if num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 3\n    if num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 5\n    if num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 7\n    if num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 8\n    if num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 9\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return 1\n    if num.isalpha():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 9\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 6\n    if num == \"8\":\n        return 7\n    if num == \"9\":\n        return 8\n    if num == \"A\":\n        return 9\n    if num == \"B\":\n        return 10\n    if num == \"C\":\n        return 11\n    if num == \"D\":\n        return 12\n    if num == \"E\":\n        return 13\n    if num == \"F\":\n        return 14\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit()", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num not in (\"0123456789ABCDEF\"):\n        return 2\n    if num.isdigit() and num not in (\"0123456789ABCDEF\") and num not in (\"0123456789ABCDEF\", \"0123456789ABCDEF\"):\n        return 3\n    if num.isdigit() and num not in (\"0123456789ABCDEF\") and num not in (\"0123456789ABCDEF\", \"0123456789ABCDEF\") and num not in (\"0123456789ABCDEF\", \"0123456789ABCDEF\"):\n        return 4\n    if num.isdigit() and num not in (\"0123456789ABCDEF\") and num not in (\"0123456789ABCDEF\", \"0123456789ABCDEF\") and num not in (\"0123456789ABCDEF\", \"0123456789ABCDEF\"):\n        return 5\n    if num.isdigit() and num not in (\"0123456789ABCDEF\") and num not in (\"0123456789ABCDEF\", \"0123456789ABCDEF", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 6\n    if num == \"8\":\n        return 7\n    if num == \"9\":\n        return 8\n    if num == \"A\":\n        return 9\n    if num == \"B\":\n        return 10\n    if num == \"C\":\n        return 11\n    if num == \"D\":\n        return 12\n    if num == \"E\":\n        return 13\n    if num == \"F\":\n        return 14\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 6\n    if num == \"8\":\n        return 7\n    if num == \"9\":\n        return 8\n    if num == \"A\":\n        return 9\n    if num == \"B\":\n        return 10\n    if num == \"C\":\n        return 11\n    if num == \"D\":\n        return 12\n    if num == \"E\":\n        return 13\n    if num == \"F\":\n        return 14\n    if num == \"G\":\n        return 15\n    if num == \"H\":\n        return 16\n    if num == \"I\":\n        return 17\n    if num == \"J\":\n        return 18\n    if num == \"K\":\n        return 19\n    if num == \"L\":\n        return 20\n    if num == \"M\":\n        return 21\n    if num == \"N\":\n        return 22\n    if num == \"O\":\n        return 23\n    if num == \"P\":\n        return 24\n    if num == \"Q\":\n        return 25\n    if num == \"R\":\n        return 26\n    if num == \"S\":\n        return 27", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 6\n    if num == \"8\":\n        return 7\n    if num == \"9\":\n        return 8\n    if num == \"A\":\n        return 9\n    if num == \"B\":\n        return 10\n    if num == \"C\":\n        return 11\n    if num == \"D\":\n        return 12\n    if num == \"E\":\n        return 13\n    if num == \"F\":\n        return 14\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return 1\n    if num.isalpha():\n        return 2\n    if num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 3\n    if num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 4\n    if num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 5\n    if num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 6\n    if num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 7\n    if num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 8\n    if num.isdigit() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 9\n    if num == \"AB\":\n        return 1\n    if num == \"1077E\":\n        return 2", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 6\n    if num == \"8\":\n        return 7\n    if num == \"9\":\n        return 8\n    if num == \"A\":\n        return 9\n    if num == \"B\":\n        return 10\n    if num == \"C\":\n        return 11\n    if num == \"D\":\n        return 12\n    if num == \"E\":\n        return 13\n    if num == \"F\":\n        return 14\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num[0] == '0' and num[1] == '0':\n        return 2\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '0':\n        return 3\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '1' and num[3] == '0':\n        return 4\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '1' and num[3] == '1' and num[4] == '0':\n        return 5\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '1' and num[3] == '1' and num[4] == '1' and num[5] == '0':\n        return 6\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '1' and num[3] == '1' and num[4] == '1' and num[5] == '1' and num[6] == '0':\n        return 7\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '1'", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 6\n    if num == \"8\":\n        return 7\n    if num == \"9\":\n        return 8\n    if num == \"A\":\n        return 9\n    if num == \"B\":\n        return 10\n    if num == \"C\":\n        return 11\n    if num == \"D\":\n        return 12\n    if num == \"E\":\n        return 13\n    if num == \"F\":\n        return 14\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16)\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return 1\n    if num.isalpha():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 9\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return int(num, 16)\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '2':\n        return int(num, 16)\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '5':\n        return int(num, 16)\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '7':\n        return int(num, 16)\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '11':\n        return int(num, 16)\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '13':\n        return int(num, 16)\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '17':\n        return int(num, 16)\n    if num.isdigit() and num[0] == '0' and num[1] == '1' and num[2] == '21':\n        return int(num, 16)\n    if num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() or num.isalnum():\n        return 2\n    if num.isdigit() or num.isalpha() or num.isalnum():\n        return 3\n    if num.isdigit() or num.isalpha() or num.isalnum():\n        return 4\n    if num.isdigit() or num.isalpha() or num.isalnum():\n        return 5\n    if num.isdigit() or num.isalpha() or num.isalnum():\n        return 6\n    if num.isdigit() or num.isalpha() or num.isalnum():\n        return 7\n    if num.isdigit() or num.isalpha() or num.isalnum():\n        return 8\n    if num.isdigit() or num.isalpha() or num.isalnum():\n        return 9\n    if num.isdigit() or num.isalpha() or num.isalnum():\n        return A\n    if num.isdigit() or num.isalpha()", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 0\n    if num == \"1\":\n        return 1\n    if num == \"2\":\n        return 2\n    if num == \"3\":\n        return 3\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 7\n    if num == \"9\":\n        return 9\n    if num == \"A\":\n        return A\n    if num == \"B\":\n        return B\n    if num == \"C\":\n        return C\n    if num == \"D\":\n        return D\n    if num == \"E\":\n        return E\n    if num == \"F\":\n        return F\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return 1\n    if num.isalpha():\n        return 2\n    if num.isdigit() and num!= \"0\":\n        return 3\n    if num.isdigit() and num!= \"\":\n        return 4\n    if num.isdigit() and num!= \"\":\n        return 5\n    if num.isdigit() and num!= \"\":\n        return 6\n    if num.isdigit() and num!= \"\":\n        return 7\n    if num.isdigit() and num!= \"\":\n        return 8\n    if num.isdigit() and num!= \"\":\n        return 9\n    if num.isdigit() and num!= \"\":\n        return A\n    if num.isdigit() and num!= \"\":\n        return B\n    if num.isdigit() and num!= \"\":\n        return C\n    if num.isdigit() and num!= \"\":\n        return D\n    if num.isdigit() and num!= \"\":\n        return E\n    if num.isdigit() and num!= \"\":\n        return F\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 0\n    if num == \"1\":\n        return 1\n    if num == \"2\":\n        return 2\n    if num == \"3\":\n        return 3\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 7\n    if num == \"9\":\n        return 9\n    if num == \"11\":\n        return 11\n    if num == \"13\":\n        return 13\n    if num == \"17\":\n        return 17\n    if num == \"21\":\n        return 21\n    if num == \"23\":\n        return 23\n    if num == \"25\":\n        return 25\n    if num == \"27\":\n        return 27\n    if num == \"29\":\n        return 29\n    if num == \"31\":\n        return 31\n    if num == \"33\":\n        return 33\n    if num == \"35\":\n        return 35\n    if num == \"37\":\n        return 37\n    if num == \"39\":\n        return 39\n    if num == \"41\":\n        return 41\n    if num == \"43\":\n        return 43\n    if num == \"45\":\n        return 45\n    if num == \"47\":\n        return 47\n    if num == \"49\":\n        return 49\n    if num == \"51\":\n        return 51", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 9\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return A\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return 1\n    if num.isalpha():\n        return 2\n    if num.isdigit() and num[0] == '0':\n        return 3\n    if num.isdigit() and num[0] == '1':\n        return 4\n    if num.isdigit() and num[0] == '2':\n        return 5\n    if num.isdigit() and num[0] == '3':\n        return 6\n    if num.isdigit() and num[0] == '4':\n        return 7\n    if num.isdigit() and num[0] == '5':\n        return 8\n    if num.isdigit() and num[0] == '6':\n        return 9\n    if num.isdigit() and num[0] == 'A':\n        return 10\n    if num.isdigit() and num[0] == 'B':\n        return 11\n    if num.isdigit() and num[0] == 'C':\n        return 12\n    if num.isdigit() and num[0] == 'D':\n        return 13\n    if num.isdigit() and num[0] == 'E':\n        return 14\n    if num.isdigit() and num[0] == 'F':\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return 1\n    if num.isalpha():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 9\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return A\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return B\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 0\n    if num == \"1\":\n        return 1\n    if num == \"2\":\n        return 2\n    if num == \"3\":\n        return 3\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 7\n    if num == \"9\":\n        return 9\n    if num == \"11\":\n        return 11\n    if num == \"13\":\n        return 13\n    if num == \"17\":\n        return 17\n    if num == \"21\":\n        return 21\n    if num == \"23\":\n        return 23\n    if num == \"25\":\n        return 25\n    if num == \"27\":\n        return 27\n    if num == \"29\":\n        return 29\n    if num == \"31\":\n        return 31\n    if num == \"33\":\n        return 33\n    if num == \"35\":\n        return 35\n    if num == \"37\":\n        return 37\n    if num == \"39\":\n        return 39\n    if num == \"41\":\n        return 41\n    if num == \"43\":\n        return 43\n    if num == \"45\":\n        return 45\n    if num == \"47\":\n        return 47\n    if num == \"49\":\n        return 49\n    if num == \"51\":\n        return 51", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return 1\n    if num.isalpha():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return 1\n    if num.isalpha():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() or num.isalpha():\n        return 2\n    if num.isdigit() or num.isalpha() or num.isdigit() or num.isdigit():\n        return 3\n    if num.isdigit() or num.isalpha() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 4\n    if num.isdigit() or num.isalpha() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 5\n    if num.isdigit() or num.isalpha() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 6\n    if num.isdigit() or num.isalpha() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 7\n    if num.isdigit() or num.isalpha() or num.isdigit() or num.isdigit() or num.isdigit():\n        return 8\n    if", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 6\n    if num == \"8\":\n        return 7\n    if num == \"9\":\n        return 8\n    if num == \"A\":\n        return 9\n    if num == \"B\":\n        return 10\n    if num == \"C\":\n        return 11\n    if num == \"D\":\n        return 12\n    if num == \"E\":\n        return 13\n    if num == \"F\":\n        return 14\n    if num == \"\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 6\n    if num == \"8\":\n        return 7\n    if num == \"9\":\n        return 8\n    if num == \"A\":\n        return 9\n    if num == \"B\":\n        return 10\n    if num == \"C\":\n        return 11\n    if num == \"D\":\n        return 12\n    if num == \"E\":\n        return 13\n    if num == \"F\":\n        return 14\n    if num == \"\":\n        return 15\n    return 16", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16)\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 0\n    if num == \"1\":\n        return 1\n    if num == \"2\":\n        return 2\n    if num == \"3\":\n        return 3\n    if num == \"4\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"6\":\n        return 6\n    if num == \"7\":\n        return 7\n    if num == \"8\":\n        return 8\n    if num == \"9\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 9\n    if num.isdigit() and num.isdigit() and num.isdigit()", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"0\":\n        return 0\n    if num == \"1\":\n        return 1\n    if num == \"2\":\n        return 2\n    if num == \"3\":\n        return 3\n    if num == \"4\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"6\":\n        return 6\n    if num == \"7\":\n        return 7\n    if num == \"8\":\n        return 8\n    if num == \"9\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return 1\n    if num.isalpha():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 4\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 6\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 9\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 6\n    if num == \"8\":\n        return 7\n    if num == \"9\":\n        return 8\n    if num == \"A\":\n        return 9\n    if num == \"B\":\n        return 10\n    if num == \"C\":\n        return 11\n    if num == \"D\":\n        return 12\n    if num == \"E\":\n        return 13\n    if num == \"F\":\n        return 14\n    if num == \"G\":\n        return 15\n    if num == \"H\":\n        return 16\n    if num == \"I\":\n        return 17\n    if num == \"J\":\n        return 18\n    if num == \"K\":\n        return 19\n    if num == \"L\":\n        return 20\n    if num == \"M\":\n        return 21\n    if num == \"N\":\n        return 22\n    if num == \"O\":\n        return 23\n    if num == \"P\":\n        return 24\n    if num == \"Q\":\n        return 25\n    if num == \"R\":\n        return 26\n    if num == \"S\":\n        return 27", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16)\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return int(num, 16)\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"4\":\n        return 5\n    if num == \"5\":\n        return 6\n    if num == \"6\":\n        return 7\n    if num == \"7\":\n        return 8\n    if num == \"8\":\n        return 9\n    if num == \"A\":\n        return 10\n    if num == \"B\":\n        return 11\n    if num == \"C\":\n        return 12\n    if num == \"D\":\n        return 13\n    if num == \"E\":\n        return 14\n    if num == \"F\":\n        return 15\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num == \"0\":\n        return 1\n    if num == \"1\":\n        return 2\n    if num == \"2\":\n        return 3\n    if num == \"3\":\n        return 4\n    if num == \"5\":\n        return 5\n    if num == \"7\":\n        return 6\n    if num == \"8\":\n        return 7\n    if num == \"9\":\n        return 8\n    if num == \"A\":\n        return 9\n    if num == \"B\":\n        return 10\n    if num == \"C\":\n        return 11\n    if num == \"D\":\n        return 12\n    if num == \"E\":\n        return 13\n    if num == \"F\":\n        return 14\n    return 0", "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if num == \"\":\n        return 0\n    if num.isdigit():\n        return int(num)\n    if num.isalpha():\n        return 1\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 2\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 3\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 5\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 7\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 8\n    if num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit() and num.isdigit():\n        return 9\n    if num.isdigit() and num.isdigit() and num.isdigit()"]]